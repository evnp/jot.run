(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all2) => {
    for (var name in all2)
      __defProp(target, name, { get: all2[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element3) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id2 = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id2;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id2) {
              clearTimeout(id2);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(
            Math.ceil(currentProgress * canvas.width),
            options.barThickness / 2
          );
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop2() {
                  progressTimerId = window2.requestAnimationFrame(loop2);
                  topbar2.progress(
                    "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
                  );
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop2() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop2);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params2) {
        params2 = params2 || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params2.bubbles, params2.cancelable, params2.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element3, targetModifierKey) {
      var to = element3.getAttribute("data-to"), method = buildHiddenInput("_method", element3.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element3.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element3.getAttribute("target");
      form.method = element3.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element3 = e.target;
      if (e.defaultPrevented)
        return;
      while (element3 && element3.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element3.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element3.getAttribute("data-method")) {
          handleClick(element3, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element3 = element3.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global2 = globalSelf || phxWindow || global2;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    /**
     *
     * @param {number} timeout
     */
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    /**
     *
     */
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    /**
     *
     * @param {*} status
     * @param {*} callback
     */
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    /**
     * @private
     */
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    /**
     * @private
     */
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    /**
     * @private
     */
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    /**
     * @private
     */
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    /**
     * @private
     */
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    /**
     * @private
     */
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    /**
     * @private
     */
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    /**
     * Cancels any previous scheduleTimeout and schedules callback
     */
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params2, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params2 || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(
        this.socket.onOpen(() => {
          this.rejoinTimer.reset();
          if (this.isErrored()) {
            this.rejoin();
          }
        })
      );
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    /**
     * Join the channel
     * @param {integer} timeout
     * @returns {Push}
     */
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    /**
     * Hook into channel close
     * @param {Function} callback
     */
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    /**
     * Hook into channel errors
     * @param {Function} callback
     */
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    /**
     * Subscribes on channel events
     *
     * Subscription returns a ref counter, which can be used later to
     * unsubscribe the exact event listener
     *
     * @example
     * const ref1 = channel.on("event", do_stuff)
     * const ref2 = channel.on("event", do_other_stuff)
     * channel.off("event", ref1)
     * // Since unsubscription, do_stuff won't fire,
     * // while do_other_stuff will keep firing on the "event"
     *
     * @param {string} event
     * @param {Function} callback
     * @returns {integer} ref
     */
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    /**
     * Unsubscribes off of channel events
     *
     * Use the ref returned from a channel.on() to unsubscribe one
     * handler, or pass nothing for the ref to unsubscribe all
     * handlers for the given event.
     *
     * @example
     * // Unsubscribe the do_stuff handler
     * const ref1 = channel.on("event", do_stuff)
     * channel.off("event", ref1)
     *
     * // Unsubscribe all handlers from event
     * channel.off("event")
     *
     * @param {string} event
     * @param {integer} ref
     */
    off(event, ref) {
      this.bindings = this.bindings.filter((bind2) => {
        return !(bind2.event === event && (typeof ref === "undefined" || ref === bind2.ref));
      });
    }
    /**
     * @private
     */
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    /**
     * Sends a message `event` to phoenix with the payload `payload`.
     * Phoenix receives this in the `handle_in(event, payload, socket)`
     * function. if phoenix replies or it times out (default 10000ms),
     * then optionally the reply can be received.
     *
     * @example
     * channel.push("event")
     *   .receive("ok", payload => console.log("phoenix replied:", payload))
     *   .receive("error", err => console.log("phoenix errored", err))
     *   .receive("timeout", () => console.log("timed out pushing"))
     * @param {string} event
     * @param {Object} payload
     * @param {number} [timeout]
     * @returns {Push}
     */
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    /** Leaves the channel
     *
     * Unsubscribes from server events, and
     * instructs channel to terminate on server
     *
     * Triggers onClose() hooks
     *
     * To receive leave acknowledgements, use the `receive`
     * hook to bind to the server ack, ie:
     *
     * @example
     * channel.leave().receive("ok", () => alert("left!") )
     *
     * @param {integer} timeout
     * @returns {Push}
     */
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling
     * before dispatching to the channel callbacks.
     *
     * Must return the payload, modified or unmodified
     * @param {string} event
     * @param {Object} payload
     * @param {integer} ref
     * @returns {Object}
     */
    onMessage(_event, payload, _ref) {
      return payload;
    }
    /**
     * @private
     */
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    /**
     * @private
     */
    joinRef() {
      return this.joinPush.ref;
    }
    /**
     * @private
     */
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /**
     * @private
     */
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind2) => bind2.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind2 = eventBindings[i];
        bind2.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    /**
     * @private
     */
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /**
     * @private
     */
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /**
     * @private
     */
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    /**
     * @private
     */
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /**
     * @private
     */
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /**
     * @private
     */
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global2.XDomainRequest) {
        let req = new global2.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global2.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params2) {
      if (Object.keys(params2).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params2)}`;
    }
  };
  var arrayBufferToBase64 = (buffer) => {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    // we collect all pushes within the current event loop by
    // setTimeout 0, which optimizes back-to-back procedural
    // pushes against an empty buffer
    send(body) {
      if (typeof body !== "string") {
        body = arrayBufferToBase64(body);
      }
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    // private
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global2.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    /**
     * Returns the LongPoll transport reference
     */
    getLongPollTransport() {
      return LongPoll;
    }
    /**
     * Disconnects and replaces the active transport
     *
     * @param {Function} newTransport - The new transport class to instantiate
     *
     */
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    /**
     * Returns the socket protocol
     *
     * @returns {string}
     */
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    /**
     * The fully qualified socket url
     *
     * @returns {string}
     */
    endPointURL() {
      let uri = Ajax.appendParams(
        Ajax.appendParams(this.endPoint, this.params()),
        { vsn: this.vsn }
      );
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    /**
     * Disconnects the socket
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes for valid status codes.
     *
     * @param {Function} callback - Optional callback which is called after socket is disconnected.
     * @param {integer} code - A status code for disconnection (Optional).
     * @param {string} reason - A textual description of the reason to disconnect. (Optional)
     */
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    /**
     *
     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`
     *
     * Passing params to connect is deprecated; pass them in the Socket constructor instead:
     * `new Socket("/socket", {params: {user_id: userToken}})`.
     */
    connect(params2) {
      if (params2) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params2);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    /**
     * Logs the message. Override `this.logger` for specialized logging. noops by default
     * @param {string} kind
     * @param {string} msg
     * @param {Object} data
     */
    log(kind, msg, data) {
      this.logger(kind, msg, data);
    }
    /**
     * Returns true if a logger has been set on this socket.
     */
    hasLogger() {
      return this.logger !== null;
    }
    /**
     * Registers callbacks for connection open events
     *
     * @example socket.onOpen(function(){ console.info("the socket was opened") })
     *
     * @param {Function} callback
     */
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection close events
     * @param {Function} callback
     */
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection error events
     *
     * @example socket.onError(function(error){ alert("An error occurred") })
     *
     * @param {Function} callback
     */
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection message events
     * @param {Function} callback
     */
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    /**
     * Pings the server and invokes the callback with the RTT in milliseconds
     * @param {Function} callback
     *
     * Returns true if the ping was pushed or false if unable to be pushed.
     */
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    /**
     * @private
     */
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    /**
     * @private
     */
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    /**
     * @private
     */
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    /**
     * @private
     */
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    /**
     * @returns {string}
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    /**
     * @returns {boolean}
     */
    isConnected() {
      return this.connectionState() === "open";
    }
    /**
     * @private
     *
     * @param {Channel}
     */
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());
    }
    /**
     * Removes `onOpen`, `onClose`, `onError,` and `onMessage` registrations.
     *
     * @param {refs} - list of refs returned by calls to
     *                 `onOpen`, `onClose`, `onError,` and `onMessage`
     */
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    /**
     * Initiates a new channel for the given topic
     *
     * @param {string} topic
     * @param {Object} chanParams - Parameters for the channel
     * @returns {Channel}
     */
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    /**
     * @param {Object} data
     */
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     * @returns {string}
     */
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel = this.channels[i];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_MAGIC_ID = "data-phx-id";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_LOADING_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_CLIENT_ERROR_CLASS = "phx-client-error";
  var PHX_SERVER_ERROR_CLASS = "phx-server-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_VIEWPORT_TOP = "viewport-top";
  var PHX_VIEWPORT_BOTTOM = "viewport-bottom";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_STREAM_REF = "data-phx-stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var ROOT = "r";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.errored = false;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      if (this.errored) {
        return;
      }
      this.uploadChannel.leave();
      this.errored = true;
      clearTimeout(this.chunkTimer);
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      }).receive("error", ({ reason }) => this.error(reason));
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash2 = maybeHash.toString().substring(1);
      if (hash2 === "") {
        return;
      }
      return document.getElementById(hash2) || document.querySelector(`a[name="${hash2}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id2) {
      return document.getElementById(id2) || logError(`no id found for ${id2}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    isAutoUpload(inputEl) {
      return inputEl.hasAttribute("data-phx-auto-upload");
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      let isDownload = e.target instanceof HTMLAnchorElement && e.target.hasAttribute("download");
      let isTargetBlank = e.target.hasAttribute("target") && e.target.getAttribute("target").toLowerCase() === "_blank";
      return wantsNewTab || isTargetBlank || isDownload;
    },
    isUnloadableFormSubmit(e) {
      let isDialogSubmit = e.target && e.target.getAttribute("method") === "dialog" || e.submitter && e.submitter.getAttribute("formmethod") === "dialog";
      if (isDialogSubmit) {
        return false;
      } else {
        return !e.defaultPrevented && !this.wantsNewTab(e);
      }
    },
    isNewPageClick(e, currentLocation) {
      let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
      let url;
      if (e.defaultPrevented || href === null || this.wantsNewTab(e)) {
        return false;
      }
      if (href.startsWith("mailto:") || href.startsWith("tel:")) {
        return false;
      }
      if (e.target.isContentEditable) {
        return false;
      }
      try {
        url = new URL(href);
      } catch (e2) {
        try {
          url = new URL(href, currentLocation);
        } catch (e3) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return url.protocol.startsWith("http");
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom) {
      if (el.hasAttribute && (el.hasAttribute(phxViewportTop) || el.hasAttribute(phxViewportBottom))) {
        el.setAttribute("data-phx-hook", "Phoenix.InfiniteScroll");
      }
    },
    maybeHideFeedback(container, inputs, phxFeedbackFor) {
      let feedbacks = [];
      inputs.forEach((input) => {
        if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
          feedbacks.push(input.name);
          if (input.name.endsWith("[]")) {
            feedbacks.push(input.name.slice(0, -2));
          }
        }
      });
      if (feedbacks.length > 0) {
        let selector = feedbacks.map((f) => `[${phxFeedbackFor}="${f}"]`).join(", ");
        DOM.all(container, selector, (el) => el.classList.add(PHX_NO_FEEDBACK_CLASS));
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name = sourceAttrs[i].name;
        if (exclude.indexOf(name) < 0) {
          target.setAttribute(name, source.getAttribute(name));
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name = targetAttrs[i].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name) && ![PHX_REF, PHX_REF_SRC].includes(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr2) => !retainedAttrs.has(attr2.name.toLowerCase())).forEach((attr2) => container.removeAttribute(attr2.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr2) => container.setAttribute(attr2, attrs[attr2]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr2) => newContainer.setAttribute(attr2, attrs[attr2]));
        retainedAttrs.forEach((attr2) => newContainer.setAttribute(attr2, container.getAttribute(attr2)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file31) {
      let isNew = file31._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file31)) >= 0;
      return file31.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file31) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file31)) >= 0;
      return isPreflighted && this.isActive(fileEl, file31);
    }
    constructor(fileEl, file31, view) {
      this.ref = LiveUploader.genFileRef(file31);
      this.fileEl = fileEl;
      this.file = file31;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      if (!dom_default.isAutoUpload(this.fileEl)) {
        LiveUploader.clearFiles(this.fileEl);
      }
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref,
        meta: typeof this.file.meta === "function" ? this.file.meta() : void 0
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file31) {
      let ref = file31._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file31._phxRef = (liveUploaderFileRef++).toString();
        return file31._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file31 = this.activeFiles(inputEl).find((file210) => this.genFileRef(file210) === ref);
      callback(URL.createObjectURL(file31));
    }
    static hasUploadsInProgress(formEl) {
      let active2 = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active2++;
        }
      });
      return active2 > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file31) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file31);
        entry.last_modified = file31.lastModified;
        entry.name = file31.name || entry.ref;
        entry.relative_path = file31.webkitRelativePath;
        entry.type = file31.type;
        entry.size = file31.size;
        if (typeof file31.meta === "function") {
          entry.meta = file31.meta();
        }
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file31) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f) => !Object.is(f, file31)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file31) => !this.activeFiles(inputEl).find((f) => Object.is(f, file31)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f) => UploadEntry.isActive(input, f));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file31) => new UploadEntry(inputEl, file31, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        if (!entry.meta) {
          return acc;
        }
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance68, classes) {
      return classes.find((name) => instance68 instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var scrollTop = () => document.documentElement.scrollTop || document.body.scrollTop;
  var winHeight = () => window.innerHeight || document.documentElement.clientHeight;
  var isAtViewportTop = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.top <= winHeight();
  };
  var isAtViewportBottom = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.right >= 0 && rect.left >= 0 && rect.bottom <= winHeight();
  };
  var isWithinViewport = (el) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.top <= winHeight();
  };
  Hooks.InfiniteScroll = {
    mounted() {
      let scrollBefore = scrollTop();
      let topOverran = false;
      let throttleInterval = 500;
      let pendingOp = null;
      let onTopOverrun = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => true;
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id, _overran: true }, () => {
          pendingOp = null;
        });
      });
      let onFirstChildAtTop = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => firstChild.scrollIntoView({ block: "start" });
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id }, () => {
          pendingOp = null;
          if (!isWithinViewport(firstChild)) {
            firstChild.scrollIntoView({ block: "start" });
          }
        });
      });
      let onLastChildAtBottom = this.throttle(throttleInterval, (bottomEvent, lastChild) => {
        pendingOp = () => lastChild.scrollIntoView({ block: "end" });
        this.liveSocket.execJSHookPush(this.el, bottomEvent, { id: lastChild.id }, () => {
          pendingOp = null;
          if (!isWithinViewport(lastChild)) {
            lastChild.scrollIntoView({ block: "end" });
          }
        });
      });
      this.onScroll = (e) => {
        let scrollNow = scrollTop();
        if (pendingOp) {
          scrollBefore = scrollNow;
          return pendingOp();
        }
        let rect = this.el.getBoundingClientRect();
        let topEvent = this.el.getAttribute(this.liveSocket.binding("viewport-top"));
        let bottomEvent = this.el.getAttribute(this.liveSocket.binding("viewport-bottom"));
        let lastChild = this.el.lastElementChild;
        let firstChild = this.el.firstElementChild;
        let isScrollingUp = scrollNow < scrollBefore;
        let isScrollingDown = scrollNow > scrollBefore;
        if (isScrollingUp && topEvent && !topOverran && rect.top >= 0) {
          topOverran = true;
          onTopOverrun(topEvent, firstChild);
        } else if (isScrollingDown && topOverran && rect.top <= 0) {
          topOverran = false;
        }
        if (topEvent && isScrollingUp && isAtViewportTop(firstChild)) {
          onFirstChildAtTop(topEvent, firstChild);
        } else if (bottomEvent && isScrollingDown && isAtViewportBottom(lastChild)) {
          onLastChildAtBottom(bottomEvent, lastChild);
        }
        scrollBefore = scrollNow;
      };
      window.addEventListener("scroll", this.onScroll);
    },
    destroyed() {
      window.removeEventListener("scroll", this.onScroll);
    },
    throttle(interval, callback) {
      let lastCallAt = 0;
      let timer;
      return (...args2) => {
        let now2 = Date.now();
        let remainingTime = interval - (now2 - lastCallAt);
        if (remainingTime <= 0 || remainingTime > interval) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          lastCallAt = now2;
          callback(...args2);
        } else if (!timer) {
          timer = setTimeout(() => {
            lastCallAt = Date.now();
            timer = null;
            callback(...args2);
          }, remainingTime);
        }
      };
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id2) => !idsBefore.has(id2));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr2;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr2 = toNodeAttrs[i];
      attrName = attr2.name;
      attrNamespaceURI = attr2.namespaceURI;
      attrValue = attr2.value;
      if (attrNamespaceURI) {
        attrName = attr2.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr2.prefix === "xmlns") {
            attrName = attr2.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr2 = fromNodeAttrs[d];
      attrName = attr2.name;
      attrNamespaceURI = attr2.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr2.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl, toEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id2, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id2;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args2) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args2));
    }
    trackAfter(kind, ...args2) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args2));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform(isJoinPatch) {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxViewportTop = liveSocket2.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = liveSocket2.binding(PHX_VIEWPORT_BOTTOM);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let trackedInputs = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([ref, inserts, deleteIds, reset]) => {
          Object.entries(inserts).forEach(([key, [streamAt, limit]]) => {
            this.streamInserts[key] = { ref, streamAt, limit, resetKept: false };
          });
          if (reset !== void 0) {
            dom_default.all(container, `[${PHX_STREAM_REF}="${ref}"]`, (child) => {
              if (inserts[child.id]) {
                this.streamInserts[child.id].resetKept = true;
              } else {
                this.removeStreamChildElement(child);
              }
            });
          }
          deleteIds.forEach((id2) => {
            let child = container.querySelector(`[id="${id2}"]`);
            if (child) {
              this.removeStreamChildElement(child);
            }
          });
        });
        morphdom_esm_default(targetContainer, html, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            if (dom_default.isPhxDestroyed(node)) {
              return null;
            }
            if (isJoinPatch) {
              return node.id;
            }
            return node.id || node.getAttribute && node.getAttribute(PHX_MAGIC_ID);
          },
          skipFromChildren: (from2) => {
            return from2.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let { ref, streamAt, limit } = this.getStreamInsert(child);
            if (ref === void 0) {
              return parent.appendChild(child);
            }
            dom_default.putSticky(child, PHX_STREAM_REF, (el) => el.setAttribute(PHX_STREAM_REF, ref));
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
            let children2 = limit !== null && Array.from(parent.children);
            let childrenToRemove = [];
            if (limit && limit < 0 && children2.length > limit * -1) {
              childrenToRemove = children2.slice(0, children2.length + limit);
            } else if (limit && limit >= 0 && children2.length > limit) {
              childrenToRemove = children2.slice(limit);
            }
            childrenToRemove.forEach((removeChild) => {
              if (!this.streamInserts[removeChild.id]) {
                this.removeStreamChildElement(removeChild);
              }
            });
          },
          onBeforeNodeAdded: (el) => {
            dom_default.maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom);
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el.getAttribute) {
              this.maybeReOrderStream(el);
            }
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            if (el.getAttribute && el.getAttribute("name") && dom_default.isFormInput(el)) {
              trackedInputs.push(el);
            }
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onBeforeElChildrenUpdated: (fromEl, toEl) => {
            if (fromEl.getAttribute(phxUpdate) === PHX_STREAM) {
              let toIds = Array.from(toEl.children).map((child) => child.id);
              Array.from(fromEl.children).filter((child) => {
                let { resetKept } = this.getStreamInsert(child);
                return resetKept;
              }).forEach((child) => {
                this.streamInserts[child.id].streamAt = toIds.indexOf(child.id);
              });
            }
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.maybeAddPrivateHooks(toEl, phxViewportTop, phxViewportBottom);
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              trackedInputs.push(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              if (toEl.getAttribute("name") && dom_default.isFormInput(toEl)) {
                trackedInputs.push(toEl);
              }
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update2) => update2.perform());
        });
      }
      dom_default.maybeHideFeedback(targetContainer, trackedInputs, phxFeedbackFor);
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        Object.getPrototypeOf(externalFormTriggered).submit.call(externalFormTriggered);
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    removeStreamChildElement(child) {
      if (!this.maybePendingRemove(child)) {
        child.remove();
        this.onNodeDiscarded(child);
      }
    }
    getStreamInsert(el) {
      let insert3 = el.id ? this.streamInserts[el.id] : {};
      return insert3 || {};
    }
    maybeReOrderStream(el) {
      let { ref, streamAt, limit } = this.getStreamInsert(el);
      if (streamAt === void 0) {
        return;
      }
      dom_default.putSticky(el, PHX_STREAM_REF, (el2) => el2.setAttribute(PHX_STREAM_REF, ref));
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children2 = Array.from(el.parentElement.children);
        let oldIndex = children2.indexOf(el);
        if (streamAt >= children2.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children2[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.hasAttribute(PHX_SKIP);
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var VOID_TAGS = /* @__PURE__ */ new Set([
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  var quoteChars = /* @__PURE__ */ new Set(["'", '"']);
  var modifyRoot = (html, attrs, clearInnerHTML) => {
    let i = 0;
    let insideComment = false;
    let beforeTag, afterTag, tag, tagNameEndsAt, id2, newHTML;
    let lookahead = html.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);
    if (lookahead === null) {
      throw new Error(`malformed html ${html}`);
    }
    i = lookahead[0].length;
    beforeTag = lookahead[1];
    tag = lookahead[2];
    tagNameEndsAt = i;
    for (i; i < html.length; i++) {
      if (html.charAt(i) === ">") {
        break;
      }
      if (html.charAt(i) === "=") {
        let isId = html.slice(i - 3, i) === " id";
        i++;
        let char = html.charAt(i);
        if (quoteChars.has(char)) {
          let attrStartsAt = i;
          i++;
          for (i; i < html.length; i++) {
            if (html.charAt(i) === char) {
              break;
            }
          }
          if (isId) {
            id2 = html.slice(attrStartsAt + 1, i);
            break;
          }
        }
      }
    }
    let closeAt = html.length - 1;
    insideComment = false;
    while (closeAt >= beforeTag.length + tag.length) {
      let char = html.charAt(closeAt);
      if (insideComment) {
        if (char === "-" && html.slice(closeAt - 3, closeAt) === "<!-") {
          insideComment = false;
          closeAt -= 4;
        } else {
          closeAt -= 1;
        }
      } else if (char === ">" && html.slice(closeAt - 2, closeAt) === "--") {
        insideComment = true;
        closeAt -= 3;
      } else if (char === ">") {
        break;
      } else {
        closeAt -= 1;
      }
    }
    afterTag = html.slice(closeAt + 1, html.length);
    let attrsStr = Object.keys(attrs).map((attr2) => attrs[attr2] === true ? attr2 : `${attr2}="${attrs[attr2]}"`).join(" ");
    if (clearInnerHTML) {
      let idAttrStr = id2 ? ` id="${id2}"` : "";
      if (VOID_TAGS.has(tag)) {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}/>`;
      } else {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}></${tag}>`;
      }
    } else {
      let rest = html.slice(tagNameEndsAt, closeAt + 1);
      newHTML = `<${tag}${attrsStr === "" ? "" : " "}${attrsStr}${rest}`;
    }
    return [newHTML, beforeTag, afterTag];
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.magicId = 0;
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids, true, {});
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids, changeTracking, rootAttrs) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output, changeTracking, rootAttrs);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff, true);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 || oldc[cid] === void 0 ? cdiff : this.cloneMerge(oldc[cid], cdiff, false);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
      if (target[ROOT]) {
        target.newRender = true;
      }
    }
    cloneMerge(target, source, pruneMagicId) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val, pruneMagicId);
        }
      }
      if (pruneMagicId) {
        delete merged.magicId;
        delete merged.newRender;
      } else if (target[ROOT]) {
        merged.newRender = true;
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid, null);
      let [strippedHTML, _before, _after] = modifyRoot(str, {});
      return [strippedHTML, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    nextMagicID() {
      this.magicId++;
      return `${this.parentViewId()}-${this.magicId}`;
    }
    toOutputBuffer(rendered, templates, output, changeTracking, rootAttrs = {}) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      let isRoot = rendered[ROOT];
      let prevBuffer = output.buffer;
      if (isRoot) {
        output.buffer = "";
      }
      if (changeTracking && isRoot && !rendered.magicId) {
        rendered.newRender = true;
        rendered.magicId = this.nextMagicID();
      }
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output, changeTracking);
        output.buffer += statics[i];
      }
      if (isRoot) {
        let skip = false;
        let attrs;
        if (changeTracking || Object.keys(rootAttrs).length > 0) {
          skip = !rendered.newRender;
          attrs = __spreadValues({ [PHX_MAGIC_ID]: rendered.magicId }, rootAttrs);
        } else {
          attrs = rootAttrs;
        }
        if (skip) {
          attrs[PHX_SKIP] = true;
        }
        let [newRoot, commentBefore, commentAfter] = modifyRoot(output.buffer, attrs, skip);
        rendered.newRender = false;
        output.buffer = prevBuffer + commentBefore + newRoot + commentAfter;
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_ref, _inserts, deleteIds, reset] = stream || [null, {}, [], null];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          let changeTracking = false;
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output, changeTracking);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0 || reset)) {
        delete rendered[STREAM];
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output, changeTracking) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output, changeTracking, {});
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let attrs = { [PHX_COMPONENT]: cid };
      let skip = onlyCids && !onlyCids.has(cid);
      component.newRender = !skip;
      component.magicId = `${this.parentViewId()}-c-${cid}`;
      let changeTracking = true;
      let [html, streams] = this.recursiveToString(component, components, onlyCids, changeTracking, attrs);
      return [html, streams];
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(this.el, null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(this.el, targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(null, name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        view.dispatchUploads(targetCtx, name, files);
      });
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, { callback: defaults && defaults.callback }];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args2]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args2.data = Object.assign(args2.data || {}, defaultArgs.data);
          args2.callback = args2.callback || defaultArgs.callback;
        }
        this.filterToEls(sourceEl, args2).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args2);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    isInViewport(el) {
      const rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    },
    exec_exec(eventType, phxEvent, view, sourceEl, el, [attr2, to]) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr2);
        if (!encodedJS) {
          throw new Error(`expected ${attr2} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args2) {
      let { event, data, target, page_loading, loading, value, dispatcher, callback } = args2;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (!targetView.isConnected()) {
          return;
        }
        if (eventType === "change") {
          let { newCid, _target } = args2;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args2;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts, callback);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts, callback);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr2, val] }) {
      this.setOrRemoveAttrs(el, [[attr2, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr: attr2 }) {
      this.setOrRemoveAttrs(el, [], [attr2]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transitionRun, transitionStart, transitionEnd] = transition || [[], [], []];
      if (transitionRun.length > 0) {
        let onStart = () => {
          this.addOrRemoveClasses(el, transitionStart, [].concat(transitionRun).concat(transitionEnd));
          window.requestAnimationFrame(() => {
            this.addOrRemoveClasses(el, transitionRun, []);
            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, transitionEnd, transitionStart));
          });
        };
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transitionEnd), removes.concat(transitionRun).concat(transitionStart));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr2, _val]) => attr2).concat(removes);
      let newSets = prevSets.filter(([attr2, _val]) => !alteredAttrs.includes(attr2)).concat(sets);
      let newRemoves = prevRemoves.filter((attr2) => !alteredAttrs.includes(attr2)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr2) => currentEl.removeAttribute(attr2));
        newSets.forEach(([attr2, val]) => currentEl.setAttribute(attr2, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, metadata, onlyNames = []) => {
    let _a2 = metadata, { submitter } = _a2, meta = __objRest(_a2, ["submitter"]);
    let formData = new FormData(form);
    if (submitter && submitter.hasAttribute("name") && submitter.form && submitter.form === form) {
      formData.append(submitter.name, submitter.value);
    }
    let toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    let params2 = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params2.append(key, val);
      }
    }
    for (let metaKey in meta) {
      params2.append(metaKey, meta[metaKey]);
    }
    return params2.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        let url = this.href && this.expandURL(this.href);
        return {
          redirect: this.redirect ? url : void 0,
          url: this.redirect ? void 0 : url || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params2 = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params2["_track_static"] = manifest;
      }
      params2["_mounts"] = this.joinCount;
      params2["_live_referer"] = liveReferer;
      return params2;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id2 in this.viewHooks) {
          this.destroyHook(this.viewHooks[id2]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS, PHX_SERVER_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id2 in this.viewHooks) {
          this.viewHooks[id2].__disconnected();
        }
        this.setContainerClasses(PHX_LOADING_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id2 in this.viewHooks) {
        this.viewHooks[id2].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
      dom_default.all(this.el, `[${phxViewportTop}], [${phxViewportBottom}]`, (hookEl) => {
        dom_default.maybeAddPrivateHooks(hookEl, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false, true);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids, isJoinPatch = false) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
        let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
        dom_default.maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform(isJoinPatch);
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id2) {
      return this.root.children[this.id][id2];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id2) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id2) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children2 = this.root.children[this.id] || {};
      for (let id2 in children2) {
        callback(this.getChildById(id2));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        if (this.isMain()) {
          this.onRedirect({ to: this.href });
        }
        return;
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        if (this.isMain()) {
          this.onRedirect({ to: this.href });
        }
        return;
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        if (this.liveSocket.isConnected()) {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        } else {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS]);
        }
      }
    }
    displayError(classes) {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(...classes);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                if (ref !== null) {
                  this.undoRefs(ref);
                }
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            if (ref !== null) {
              this.undoRefs(ref);
            }
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = opts.target || target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(el, targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([el], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0 && !(el instanceof HTMLFormElement)) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}, onReply) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      }, (resp, reply) => onReply && onReply(reply));
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx, opts);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      let meta = this.extractMeta(inputEl.form);
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta), [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta));
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && dom_default.isAutoUpload(inputEl)) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
              this.undoRefs(ref);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let meta = this.extractMeta(formEl);
          let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else if (!(formEl.hasAttribute(PHX_REF) && formEl.classList.contains("phx-submit-loading"))) {
        let meta = this.extractMeta(formEl);
        let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(targetCtx, name, filesOrBlobs) {
      let targetElement = this.targetCtxElement(targetCtx) || this.el;
      let inputs = dom_default.findUploadInputs(targetElement).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    targetCtxElement(targetCtx) {
      if (isCid(targetCtx)) {
        let [target] = dom_default.findComponentNodeList(this.el, targetCtx);
        return target;
      } else if (targetCtx) {
        return targetCtx;
      } else {
        return null;
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let phxChange = this.binding("change");
        let inputs = Array.from(form.elements).filter((el) => dom_default.isFormInput(el) && el.name && !el.hasAttribute(phxChange));
        if (inputs.length === 0) {
          return;
        }
        inputs.forEach((input2) => input2.hasAttribute(PHX_UPLOAD_REF) && LiveUploader.clearFiles(input2));
        let input = inputs.find((el) => el.type !== "hidden") || inputs[0];
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let url = href.startsWith("/") ? `${location.protocol}//${location.host}${href}` : href;
      let push = this.pushWithReply(refGen, "live_patch", { url }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        const phxChangeValue = form.getAttribute(phxChange).replaceAll(/([\[\]"])/g, "\\$1");
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${phxChangeValue}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, form, this.targetComponentID(form)];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    execJSHookPush(el, phxEvent, data, callback) {
      this.withinOwners(el, (view) => {
        js_default.exec("hook", phxEvent, view, el, ["push", { data, callback }]);
      });
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args2) {
      this.domCallbacks[kind](...args2);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count2) => count2 + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params2) {
      return this.socket.channel(topic, params2);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(() => callback(linkRef));
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        this.execJS(el, el.getAttribute(removeAttr), "remove");
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id2) {
      return this.roots[id2];
    }
    destroyAllViews() {
      for (let id2 in this.roots) {
        this.roots[id2].destroy();
        delete this.roots[id2];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (!phxTarget) {
          let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("mousedown", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          if (!capture && dom_default.isNewPageClick(e, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        if (target.hasAttribute(PHX_REF)) {
          return;
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el) && js_default.isInViewport(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id: id2, root, scroll } = event.state || {};
        let href = window.location.href;
        dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: type === "patch", pop: true } });
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id2 === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href instanceof SVGAnimatedString ? target.href.baseVal : target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      dom_default.dispatchEvent(window, "phx:navigate", { detail: { patch: true, href, pop: false } });
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, (linkRef) => {
          if (linkRef === this.linkRef) {
            browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
            dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: false, pop: false } });
            this.registerNewLocation(window.location);
          }
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type === "change" && lastType === "input") {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // ../deps/live_svelte/priv/static/live_svelte.esm.js
  function normalizeComponents(components) {
    if (!Array.isArray(components.default) || !Array.isArray(components.filenames))
      return components;
    const normalized = {};
    for (const [index, module] of components.default.entries()) {
      const Component = module.default;
      const name = components.filenames[index].replace("../svelte/", "").replace(".svelte", "");
      normalized[name] = Component;
    }
    return normalized;
  }
  function getAttributeJson(ref, attributeName) {
    const data = ref.el.getAttribute(attributeName);
    return data ? JSON.parse(data) : {};
  }
  function detach(node) {
    var _a2;
    (_a2 = node.parentNode) == null ? void 0 : _a2.removeChild(node);
  }
  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }
  function noop2() {
  }
  function getSlots(ref) {
    const slots = {};
    for (const slotName in getAttributeJson(ref, "data-slots")) {
      const slot = () => {
        return {
          getElement() {
            const base64 = getAttributeJson(ref, "data-slots")[slotName];
            const element3 = document.createElement("div");
            element3.innerHTML = atob(base64).trim();
            return element3;
          },
          update() {
            detach(this.savedElement);
            this.savedElement = this.getElement();
            insert(this.savedTarget, this.savedElement, this.savedAnchor);
          },
          c: noop2,
          m(target, anchor) {
            this.savedTarget = target;
            this.savedAnchor = anchor;
            this.savedElement = this.getElement();
            insert(this.savedTarget, this.savedElement, this.savedAnchor);
          },
          d(detaching) {
            if (detaching)
              detach(this.savedElement);
          },
          l: noop2
        };
      };
      slots[slotName] = [slot];
    }
    return slots;
  }
  function getLiveJsonProps(ref) {
    const json = getAttributeJson(ref, "data-live-json");
    if (!Array.isArray(json))
      return json;
    const liveJsonData = {};
    for (const liveJsonVariable of json) {
      const data = window[liveJsonVariable];
      if (data)
        liveJsonData[liveJsonVariable] = data;
    }
    return liveJsonData;
  }
  function getProps(ref) {
    return __spreadProps(__spreadValues(__spreadValues({}, getAttributeJson(ref, "data-props")), getLiveJsonProps(ref)), {
      live: ref,
      $$slots: getSlots(ref),
      $$scope: {}
    });
  }
  function findSlotCtx(component) {
    return component.$$.ctx.find((ctxElement) => ctxElement == null ? void 0 : ctxElement.default);
  }
  function getHooks(components) {
    components = normalizeComponents(components);
    const SvelteHook = {
      mounted() {
        const componentName = this.el.getAttribute("data-name");
        if (!componentName) {
          throw new Error("Component name must be provided");
        }
        const Component = components[componentName];
        if (!Component) {
          throw new Error(`Unable to find ${componentName} component.`);
        }
        for (const liveJsonElement of Object.keys(getAttributeJson(this, "data-live-json"))) {
          window.addEventListener(`${liveJsonElement}_initialized`, (event) => this._instance.$set(getProps(this)), false);
          window.addEventListener(`${liveJsonElement}_patched`, (event) => this._instance.$set(getProps(this)), false);
        }
        this._instance = new Component({
          target: this.el,
          props: getProps(this),
          hydrate: this.el.hasAttribute("data-ssr")
        });
      },
      updated() {
        this._instance.$set(getProps(this));
        const slotCtx = findSlotCtx(this._instance);
        for (const key in slotCtx) {
          slotCtx[key][0]().update();
        }
      },
      destroyed() {
        this._instance.$destroy();
      }
    };
    return {
      SvelteHook
    };
  }

  // import-glob:../svelte/**/*.svelte
  var __exports = {};
  __export(__exports, {
    default: () => __default,
    filenames: () => filenames
  });

  // svelte/AccountButton.svelte
  var AccountButton_exports = {};
  __export(AccountButton_exports, {
    default: () => AccountButton_default
  });

  // node_modules/svelte/src/runtime/internal/utils.js
  function noop3() {
  }
  var identity = (x) => x;
  function assign(tar, src) {
    for (const k in src)
      tar[k] = src[k];
    return (
      /** @type {T & S} */
      tar
    );
  }
  function add_location(element3, file31, line, column, char) {
    element3.__svelte_meta = {
      loc: { file: file31, line, column, char }
    };
  }
  function run(fn) {
    return fn();
  }
  function blank_object() {
    return /* @__PURE__ */ Object.create(null);
  }
  function run_all(fns) {
    fns.forEach(run);
  }
  function is_function(thing) {
    return typeof thing === "function";
  }
  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
  }
  var src_url_equal_anchor;
  function src_url_equal(element_src, url) {
    if (element_src === url)
      return true;
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement("a");
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }
  function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== "function") {
      throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      for (const callback of callbacks) {
        callback(void 0);
      }
      return noop3;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
  }
  function get_store_value(store) {
    let value;
    subscribe(store, (_) => value = _)();
    return value;
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
  }
  function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
      const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
      return definition[0](slot_ctx);
    }
  }
  function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
  }
  function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
      const lets = definition[2](fn(dirty));
      if ($$scope.dirty === void 0) {
        return lets;
      }
      if (typeof lets === "object") {
        const merged = [];
        const len = Math.max($$scope.dirty.length, lets.length);
        for (let i = 0; i < len; i += 1) {
          merged[i] = $$scope.dirty[i] | lets[i];
        }
        return merged;
      }
      return $$scope.dirty | lets;
    }
    return $$scope.dirty;
  }
  function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
      const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
      slot.p(slot_context, slot_changes);
    }
  }
  function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
      const dirty = [];
      const length3 = $$scope.ctx.length / 32;
      for (let i = 0; i < length3; i++) {
        dirty[i] = -1;
      }
      return dirty;
    }
    return -1;
  }
  function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
      if (k[0] !== "$")
        result[k] = props[k];
    return result;
  }
  function compute_rest_props(props, keys2) {
    const rest = {};
    keys2 = new Set(keys2);
    for (const k in props)
      if (!keys2.has(k) && k[0] !== "$")
        rest[k] = props[k];
    return rest;
  }
  function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
  }
  function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop3;
  }
  function split_css_unit(value) {
    const split = typeof value === "string" && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
    return split ? [parseFloat(split[1]), split[2] || "px"] : [
      /** @type {number} */
      value,
      "px"
    ];
  }

  // node_modules/svelte/src/runtime/internal/environment.js
  var is_client = typeof window !== "undefined";
  var now = is_client ? () => window.performance.now() : () => Date.now();
  var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop3;

  // node_modules/svelte/src/runtime/internal/loop.js
  var tasks = /* @__PURE__ */ new Set();
  function run_tasks(now2) {
    tasks.forEach((task) => {
      if (!task.c(now2)) {
        tasks.delete(task);
        task.f();
      }
    });
    if (tasks.size !== 0)
      raf(run_tasks);
  }
  function loop(callback) {
    let task;
    if (tasks.size === 0)
      raf(run_tasks);
    return {
      promise: new Promise((fulfill) => {
        tasks.add(task = { c: callback, f: fulfill });
      }),
      abort() {
        tasks.delete(task);
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/globals.js
  var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
    // @ts-ignore Node typings have this
    global
  );

  // node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
  var ResizeObserverSingleton = class {
    /** @param {ResizeObserverOptions} options */
    constructor(options) {
      /**
       * @private
       * @readonly
       * @type {WeakMap<Element, import('./private.js').Listener>}
       */
      __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
      /**
       * @private
       * @type {ResizeObserver}
       */
      __publicField(this, "_observer");
      /** @type {ResizeObserverOptions} */
      __publicField(this, "options");
      this.options = options;
    }
    /**
     * @param {Element} element
     * @param {import('./private.js').Listener} listener
     * @returns {() => void}
     */
    observe(element3, listener) {
      this._listeners.set(element3, listener);
      this._getObserver().observe(element3, this.options);
      return () => {
        this._listeners.delete(element3);
        this._observer.unobserve(element3);
      };
    }
    /**
     * @private
     */
    _getObserver() {
      var _a2;
      return (_a2 = this._observer) != null ? _a2 : this._observer = new ResizeObserver((entries) => {
        var _a3;
        for (const entry of entries) {
          ResizeObserverSingleton.entries.set(entry.target, entry);
          (_a3 = this._listeners.get(entry.target)) == null ? void 0 : _a3(entry);
        }
      });
    }
  };
  ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

  // node_modules/svelte/src/runtime/internal/dom.js
  var is_hydrating = false;
  function start_hydrating() {
    is_hydrating = true;
  }
  function end_hydrating() {
    is_hydrating = false;
  }
  function upper_bound(low, high, key, value) {
    while (low < high) {
      const mid = low + (high - low >> 1);
      if (key(mid) <= value) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low;
  }
  function init_hydrate(target) {
    if (target.hydrate_init)
      return;
    target.hydrate_init = true;
    let children2 = (
      /** @type {ArrayLike<NodeEx2>} */
      target.childNodes
    );
    if (target.nodeName === "HEAD") {
      const my_children = [];
      for (let i = 0; i < children2.length; i++) {
        const node = children2[i];
        if (node.claim_order !== void 0) {
          my_children.push(node);
        }
      }
      children2 = my_children;
    }
    const m = new Int32Array(children2.length + 1);
    const p = new Int32Array(children2.length);
    m[0] = -1;
    let longest = 0;
    for (let i = 0; i < children2.length; i++) {
      const current = children2[i].claim_order;
      const seq_len = (longest > 0 && children2[m[longest]].claim_order <= current ? longest + 1 : upper_bound(1, longest, (idx) => children2[m[idx]].claim_order, current)) - 1;
      p[i] = m[seq_len] + 1;
      const new_len = seq_len + 1;
      m[new_len] = i;
      longest = Math.max(new_len, longest);
    }
    const lis = [];
    const to_move = [];
    let last2 = children2.length - 1;
    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
      lis.push(children2[cur - 1]);
      for (; last2 >= cur; last2--) {
        to_move.push(children2[last2]);
      }
      last2--;
    }
    for (; last2 >= 0; last2--) {
      to_move.push(children2[last2]);
    }
    lis.reverse();
    to_move.sort((a, b) => a.claim_order - b.claim_order);
    for (let i = 0, j = 0; i < to_move.length; i++) {
      while (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {
        j++;
      }
      const anchor = j < lis.length ? lis[j] : null;
      target.insertBefore(to_move[i], anchor);
    }
  }
  function append(target, node) {
    target.appendChild(node);
  }
  function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
      const style = element("style");
      style.id = style_sheet_id;
      style.textContent = styles;
      append_stylesheet(append_styles_to, style);
    }
  }
  function get_root_for_style(node) {
    if (!node)
      return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && /** @type {ShadowRoot} */
    root.host) {
      return (
        /** @type {ShadowRoot} */
        root
      );
    }
    return node.ownerDocument;
  }
  function append_empty_stylesheet(node) {
    const style_element = element("style");
    style_element.textContent = "/* empty */";
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
  }
  function append_stylesheet(node, style) {
    append(
      /** @type {Document} */
      node.head || node,
      style
    );
    return style.sheet;
  }
  function append_hydration(target, node) {
    if (is_hydrating) {
      init_hydrate(target);
      if (target.actual_end_child === void 0 || target.actual_end_child !== null && target.actual_end_child.parentNode !== target) {
        target.actual_end_child = target.firstChild;
      }
      while (target.actual_end_child !== null && target.actual_end_child.claim_order === void 0) {
        target.actual_end_child = target.actual_end_child.nextSibling;
      }
      if (node !== target.actual_end_child) {
        if (node.claim_order !== void 0 || node.parentNode !== target) {
          target.insertBefore(node, target.actual_end_child);
        }
      } else {
        target.actual_end_child = node.nextSibling;
      }
    } else if (node.parentNode !== target || node.nextSibling !== null) {
      target.appendChild(node);
    }
  }
  function insert2(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }
  function insert_hydration(target, node, anchor) {
    if (is_hydrating && !anchor) {
      append_hydration(target, node);
    } else if (node.parentNode !== target || node.nextSibling != anchor) {
      target.insertBefore(node, anchor || null);
    }
  }
  function detach2(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }
  function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
      if (iterations[i])
        iterations[i].d(detaching);
    }
  }
  function element(name) {
    return document.createElement(name);
  }
  function svg_element(name) {
    return document.createElementNS("http://www.w3.org/2000/svg", name);
  }
  function text(data) {
    return document.createTextNode(data);
  }
  function space() {
    return text(" ");
  }
  function empty() {
    return text("");
  }
  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
  }
  function prevent_default(fn) {
    return function(event) {
      event.preventDefault();
      return fn.call(this, event);
    };
  }
  function attr(node, attribute, value) {
    if (value == null)
      node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
      node.setAttribute(attribute, value);
  }
  function set_svg_attributes(node, attributes) {
    for (const key in attributes) {
      attr(node, key, attributes[key]);
    }
  }
  function get_svelte_dataset(node) {
    return node.dataset.svelteH;
  }
  function children(element3) {
    return Array.from(element3.childNodes);
  }
  function init_claim_info(nodes) {
    if (nodes.claim_info === void 0) {
      nodes.claim_info = { last_index: 0, total_claimed: 0 };
    }
  }
  function claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {
    init_claim_info(nodes);
    const result_node = (() => {
      for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {
        const node = nodes[i];
        if (predicate(node)) {
          const replacement = process_node(node);
          if (replacement === void 0) {
            nodes.splice(i, 1);
          } else {
            nodes[i] = replacement;
          }
          if (!dont_update_last_index) {
            nodes.claim_info.last_index = i;
          }
          return node;
        }
      }
      for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {
        const node = nodes[i];
        if (predicate(node)) {
          const replacement = process_node(node);
          if (replacement === void 0) {
            nodes.splice(i, 1);
          } else {
            nodes[i] = replacement;
          }
          if (!dont_update_last_index) {
            nodes.claim_info.last_index = i;
          } else if (replacement === void 0) {
            nodes.claim_info.last_index--;
          }
          return node;
        }
      }
      return create_node();
    })();
    result_node.claim_order = nodes.claim_info.total_claimed;
    nodes.claim_info.total_claimed += 1;
    return result_node;
  }
  function claim_element_base(nodes, name, attributes, create_element) {
    return claim_node(
      nodes,
      /** @returns {node is Element | SVGElement} */
      (node) => node.nodeName === name,
      /** @param {Element} node */
      (node) => {
        const remove = [];
        for (let j = 0; j < node.attributes.length; j++) {
          const attribute = node.attributes[j];
          if (!attributes[attribute.name]) {
            remove.push(attribute.name);
          }
        }
        remove.forEach((v) => node.removeAttribute(v));
        return void 0;
      },
      () => create_element(name)
    );
  }
  function claim_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, element);
  }
  function claim_svg_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, svg_element);
  }
  function claim_text(nodes, data) {
    return claim_node(
      nodes,
      /** @returns {node is Text} */
      (node) => node.nodeType === 3,
      /** @param {Text} node */
      (node) => {
        const data_str = "" + data;
        if (node.data.startsWith(data_str)) {
          if (node.data.length !== data_str.length) {
            return node.splitText(data_str.length);
          }
        } else {
          node.data = data_str;
        }
      },
      () => text(data),
      true
      // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
    );
  }
  function claim_space(nodes) {
    return claim_text(nodes, " ");
  }
  function set_input_value(input, value) {
    input.value = value == null ? "" : value;
  }
  function set_style(node, key, value, important) {
    if (value == null) {
      node.style.removeProperty(key);
    } else {
      node.style.setProperty(key, value, important ? "important" : "");
    }
  }
  var crossorigin;
  function is_crossorigin() {
    if (crossorigin === void 0) {
      crossorigin = false;
      try {
        if (typeof window !== "undefined" && window.parent) {
          void window.parent.document;
        }
      } catch (error) {
        crossorigin = true;
      }
    }
    return crossorigin;
  }
  function add_iframe_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === "static") {
      node.style.position = "relative";
    }
    const iframe = element("iframe");
    iframe.setAttribute(
      "style",
      "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"
    );
    iframe.setAttribute("aria-hidden", "true");
    iframe.tabIndex = -1;
    const crossorigin2 = is_crossorigin();
    let unsubscribe;
    if (crossorigin2) {
      iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>";
      unsubscribe = listen(
        window,
        "message",
        /** @param {MessageEvent} event */
        (event) => {
          if (event.source === iframe.contentWindow)
            fn();
        }
      );
    } else {
      iframe.src = "about:blank";
      iframe.onload = () => {
        unsubscribe = listen(iframe.contentWindow, "resize", fn);
        fn();
      };
    }
    append(node, iframe);
    return () => {
      if (crossorigin2) {
        unsubscribe();
      } else if (unsubscribe && iframe.contentWindow) {
        unsubscribe();
      }
      detach2(iframe);
    };
  }
  function toggle_class(element3, name, toggle) {
    element3.classList.toggle(name, !!toggle);
  }
  function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
    return new CustomEvent(type, { detail, bubbles, cancelable });
  }
  function get_custom_elements_slots(element3) {
    const result = {};
    element3.childNodes.forEach(
      /** @param {Element} node */
      (node) => {
        result[node.slot || "default"] = true;
      }
    );
    return result;
  }

  // node_modules/svelte/src/runtime/internal/style_manager.js
  var managed_styles = /* @__PURE__ */ new Map();
  var active = 0;
  function hash(str) {
    let hash2 = 5381;
    let i = str.length;
    while (i--)
      hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
    return hash2 >>> 0;
  }
  function create_style_information(doc4, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
    managed_styles.set(doc4, info);
    return info;
  }
  function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = "{\n";
    for (let p = 0; p <= 1; p += step) {
      const t = a + (b - a) * ease(p);
      keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc4 = get_root_for_style(node);
    const { stylesheet, rules } = managed_styles.get(doc4) || create_style_information(doc4, node);
    if (!rules[name]) {
      rules[name] = true;
      stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || "";
    node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
  }
  function delete_rule(node, name) {
    const previous = (node.style.animation || "").split(", ");
    const next2 = previous.filter(
      name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
      // remove all Svelte animations
    );
    const deleted = previous.length - next2.length;
    if (deleted) {
      node.style.animation = next2.join(", ");
      active -= deleted;
      if (!active)
        clear_rules();
    }
  }
  function clear_rules() {
    raf(() => {
      if (active)
        return;
      managed_styles.forEach((info) => {
        const { ownerNode } = info.stylesheet;
        if (ownerNode)
          detach2(ownerNode);
      });
      managed_styles.clear();
    });
  }

  // node_modules/svelte/src/runtime/internal/animations.js
  function create_animation(node, from2, fn, params2) {
    if (!from2)
      return noop3;
    const to = node.getBoundingClientRect();
    if (from2.left === to.left && from2.right === to.right && from2.top === to.top && from2.bottom === to.bottom)
      return noop3;
    const {
      delay = 0,
      duration = 300,
      easing = identity,
      // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
      start: start_time = now() + delay,
      // @ts-ignore todo:
      end = start_time + duration,
      tick: tick2 = noop3,
      css
    } = fn(node, { from: from2, to }, params2);
    let running = true;
    let started = false;
    let name;
    function start() {
      if (css) {
        name = create_rule(node, 0, 1, duration, delay, easing, css);
      }
      if (!delay) {
        started = true;
      }
    }
    function stop() {
      if (css)
        delete_rule(node, name);
      running = false;
    }
    loop((now2) => {
      if (!started && now2 >= start_time) {
        started = true;
      }
      if (started && now2 >= end) {
        tick2(1, 0);
        stop();
      }
      if (!running) {
        return false;
      }
      if (started) {
        const p = now2 - start_time;
        const t = 0 + 1 * easing(p / duration);
        tick2(t, 1 - t);
      }
      return true;
    });
    start();
    tick2(0, 1);
    return stop;
  }
  function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== "absolute" && style.position !== "fixed") {
      const { width, height } = style;
      const a = node.getBoundingClientRect();
      node.style.position = "absolute";
      node.style.width = width;
      node.style.height = height;
      add_transform(node, a);
    }
  }
  function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
      const style = getComputedStyle(node);
      const transform = style.transform === "none" ? "" : style.transform;
      node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
  }

  // node_modules/svelte/src/runtime/internal/lifecycle.js
  var current_component;
  function set_current_component(component) {
    current_component = component;
  }
  function get_current_component() {
    if (!current_component)
      throw new Error("Function called outside component initialization");
    return current_component;
  }
  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }

  // node_modules/svelte/src/runtime/internal/scheduler.js
  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = /* @__PURE__ */ Promise.resolve();
  var update_scheduled = false;
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush);
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  function add_flush_callback(fn) {
    flush_callbacks.push(fn);
  }
  var seen_callbacks = /* @__PURE__ */ new Set();
  var flushidx = 0;
  function flush() {
    if (flushidx !== 0) {
      return;
    }
    const saved_component = current_component;
    do {
      try {
        while (flushidx < dirty_components.length) {
          const component = dirty_components[flushidx];
          flushidx++;
          set_current_component(component);
          update(component.$$);
        }
      } catch (e) {
        dirty_components.length = 0;
        flushidx = 0;
        throw e;
      }
      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;
      while (binding_callbacks.length)
        binding_callbacks.pop()();
      for (let i = 0; i < render_callbacks.length; i += 1) {
        const callback = render_callbacks[i];
        if (!seen_callbacks.has(callback)) {
          seen_callbacks.add(callback);
          callback();
        }
      }
      render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }
  function update($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      const dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }
  function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
    targets.forEach((c) => c());
    render_callbacks = filtered;
  }

  // node_modules/svelte/src/runtime/internal/transitions.js
  var promise;
  function wait() {
    if (!promise) {
      promise = Promise.resolve();
      promise.then(() => {
        promise = null;
      });
    }
    return promise;
  }
  function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
  }
  var outroing = /* @__PURE__ */ new Set();
  var outros;
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros
      // parent group
    };
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }
    outros = outros.p;
  }
  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }
  function transition_out(block, local, detach3, callback) {
    if (block && block.o) {
      if (outroing.has(block))
        return;
      outroing.add(block);
      outros.c.push(() => {
        outroing.delete(block);
        if (callback) {
          if (detach3)
            block.d(1);
          callback();
        }
      });
      block.o(local);
    } else if (callback) {
      callback();
    }
  }
  var null_transition = { duration: 0 };
  function create_in_transition(node, fn, params2) {
    const options = { direction: "in" };
    let config = fn(node, params2, options);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
      if (animation_name)
        delete_rule(node, animation_name);
    }
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick: tick2 = noop3,
        css
      } = config || null_transition;
      if (css)
        animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
      tick2(0, 1);
      const start_time = now() + delay;
      const end_time = start_time + duration;
      if (task)
        task.abort();
      running = true;
      add_render_callback(() => dispatch(node, true, "start"));
      task = loop((now2) => {
        if (running) {
          if (now2 >= end_time) {
            tick2(1, 0);
            dispatch(node, true, "end");
            cleanup();
            return running = false;
          }
          if (now2 >= start_time) {
            const t = easing((now2 - start_time) / duration);
            tick2(t, 1 - t);
          }
        }
        return running;
      });
    }
    let started = false;
    return {
      start() {
        if (started)
          return;
        started = true;
        delete_rule(node);
        if (is_function(config)) {
          config = config(options);
          wait().then(go);
        } else {
          go();
        }
      },
      invalidate() {
        started = false;
      },
      end() {
        if (running) {
          cleanup();
          running = false;
        }
      }
    };
  }
  function create_bidirectional_transition(node, fn, params2, intro) {
    const options = { direction: "both" };
    let config = fn(node, params2, options);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    let original_inert_value;
    function clear_animation() {
      if (animation_name)
        delete_rule(node, animation_name);
    }
    function init2(program, duration) {
      const d = (
        /** @type {Program['d']} */
        program.b - t
      );
      duration *= Math.abs(d);
      return {
        a: t,
        b: program.b,
        d,
        duration,
        start: program.start,
        end: program.start + duration,
        group: program.group
      };
    }
    function go(b) {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick: tick2 = noop3,
        css
      } = config || null_transition;
      const program = {
        start: now() + delay,
        b
      };
      if (!b) {
        program.group = outros;
        outros.r += 1;
      }
      if ("inert" in node) {
        if (b) {
          if (original_inert_value !== void 0) {
            node.inert = original_inert_value;
          }
        } else {
          original_inert_value = /** @type {HTMLElement} */
          node.inert;
          node.inert = true;
        }
      }
      if (running_program || pending_program) {
        pending_program = program;
      } else {
        if (css) {
          clear_animation();
          animation_name = create_rule(node, t, b, duration, delay, easing, css);
        }
        if (b)
          tick2(0, 1);
        running_program = init2(program, duration);
        add_render_callback(() => dispatch(node, b, "start"));
        loop((now2) => {
          if (pending_program && now2 > pending_program.start) {
            running_program = init2(pending_program, duration);
            pending_program = null;
            dispatch(node, running_program.b, "start");
            if (css) {
              clear_animation();
              animation_name = create_rule(
                node,
                t,
                running_program.b,
                running_program.duration,
                0,
                easing,
                config.css
              );
            }
          }
          if (running_program) {
            if (now2 >= running_program.end) {
              tick2(t = running_program.b, 1 - t);
              dispatch(node, running_program.b, "end");
              if (!pending_program) {
                if (running_program.b) {
                  clear_animation();
                } else {
                  if (!--running_program.group.r)
                    run_all(running_program.group.c);
                }
              }
              running_program = null;
            } else if (now2 >= running_program.start) {
              const p = now2 - running_program.start;
              t = running_program.a + running_program.d * easing(p / running_program.duration);
              tick2(t, 1 - t);
            }
          }
          return !!(running_program || pending_program);
        });
      }
    }
    return {
      run(b) {
        if (is_function(config)) {
          wait().then(() => {
            const opts = { direction: b ? "in" : "out" };
            config = config(opts);
            go(b);
          });
        } else {
          go(b);
        }
      },
      end() {
        clear_animation();
        running_program = pending_program = null;
      }
    };
  }

  // node_modules/svelte/src/runtime/internal/each.js
  function ensure_array_like(array_like_or_iterator) {
    return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
  }
  function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
  }
  function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
      lookup.delete(block.key);
    });
  }
  function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
  }
  function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block5, next2, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
      old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = /* @__PURE__ */ new Map();
    const deltas = /* @__PURE__ */ new Map();
    const updates = [];
    i = n;
    while (i--) {
      const child_ctx = get_context(ctx, list, i);
      const key = get_key(child_ctx);
      let block = lookup.get(key);
      if (!block) {
        block = create_each_block5(key, child_ctx);
        block.c();
      } else if (dynamic) {
        updates.push(() => block.p(child_ctx, dirty));
      }
      new_lookup.set(key, new_blocks[i] = block);
      if (key in old_indexes)
        deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = /* @__PURE__ */ new Set();
    const did_move = /* @__PURE__ */ new Set();
    function insert3(block) {
      transition_in(block, 1);
      block.m(node, next2);
      lookup.set(block.key, block);
      next2 = block.first;
      n--;
    }
    while (o && n) {
      const new_block = new_blocks[n - 1];
      const old_block = old_blocks[o - 1];
      const new_key = new_block.key;
      const old_key = old_block.key;
      if (new_block === old_block) {
        next2 = new_block.first;
        o--;
        n--;
      } else if (!new_lookup.has(old_key)) {
        destroy(old_block, lookup);
        o--;
      } else if (!lookup.has(new_key) || will_move.has(new_key)) {
        insert3(new_block);
      } else if (did_move.has(old_key)) {
        o--;
      } else if (deltas.get(new_key) > deltas.get(old_key)) {
        did_move.add(new_key);
        insert3(new_block);
      } else {
        will_move.add(old_key);
        o--;
      }
    }
    while (o--) {
      const old_block = old_blocks[o];
      if (!new_lookup.has(old_block.key))
        destroy(old_block, lookup);
    }
    while (n)
      insert3(new_blocks[n - 1]);
    run_all(updates);
    return new_blocks;
  }
  function validate_each_keys(ctx, list, get_context, get_key) {
    const keys2 = /* @__PURE__ */ new Map();
    for (let i = 0; i < list.length; i++) {
      const key = get_key(get_context(ctx, list, i));
      if (keys2.has(key)) {
        let value = "";
        try {
          value = `with value '${String(key)}' `;
        } catch (e) {
        }
        throw new Error(
          `Cannot have duplicate keys in a keyed each: Keys at index ${keys2.get(
            key
          )} and ${i} ${value}are duplicates`
        );
      }
      keys2.set(key, i);
    }
  }

  // node_modules/svelte/src/runtime/internal/spread.js
  function get_spread_update(levels, updates) {
    const update2 = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
      const o = levels[i];
      const n = updates[i];
      if (n) {
        for (const key in o) {
          if (!(key in n))
            to_null_out[key] = 1;
        }
        for (const key in n) {
          if (!accounted_for[key]) {
            update2[key] = n[key];
            accounted_for[key] = 1;
          }
        }
        levels[i] = n;
      } else {
        for (const key in o) {
          accounted_for[key] = 1;
        }
      }
    }
    for (const key in to_null_out) {
      if (!(key in update2))
        update2[key] = void 0;
    }
    return update2;
  }
  function get_spread_object(spread_props) {
    return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
  }

  // node_modules/svelte/src/shared/boolean_attributes.js
  var _boolean_attributes = (
    /** @type {const} */
    [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ]
  );
  var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

  // node_modules/svelte/src/runtime/internal/Component.js
  function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== void 0) {
      component.$$.bound[index] = callback;
      callback(component.$$.ctx[index]);
    }
  }
  function create_component(block) {
    block && block.c();
  }
  function claim_component(block, parent_nodes) {
    block && block.l(parent_nodes);
  }
  function mount_component(component, target, anchor) {
    const { fragment, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
      flush_render_callbacks($$.after_update);
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching);
      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }
  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
  }
  function init(component, options, instance68, create_fragment68, not_equal, props, append_styles2 = null, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
      fragment: null,
      ctx: [],
      // state
      props,
      update: noop3,
      not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      // everything else
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles2 && append_styles2($$.root);
    let ready = false;
    $$.ctx = instance68 ? instance68(component, options.props || {}, (i, ret, ...rest) => {
      const value = rest.length ? rest[0] : ret;
      if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
        if (!$$.skip_bound && $$.bound[i])
          $$.bound[i](value);
        if (ready)
          make_dirty(component, i);
      }
      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment68 ? create_fragment68($$.ctx) : false;
    if (options.target) {
      if (options.hydrate) {
        start_hydrating();
        const nodes = children(options.target);
        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach2);
      } else {
        $$.fragment && $$.fragment.c();
      }
      if (options.intro)
        transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor);
      end_hydrating();
      flush();
    }
    set_current_component(parent_component);
  }
  var SvelteElement;
  if (typeof HTMLElement === "function") {
    SvelteElement = class extends HTMLElement {
      constructor($$componentCtor, $$slots, use_shadow_dom) {
        super();
        /** The Svelte component constructor */
        __publicField(this, "$$ctor");
        /** Slots */
        __publicField(this, "$$s");
        /** The Svelte component instance */
        __publicField(this, "$$c");
        /** Whether or not the custom element is connected */
        __publicField(this, "$$cn", false);
        /** Component props data */
        __publicField(this, "$$d", {});
        /** `true` if currently in the process of reflecting component props back to attributes */
        __publicField(this, "$$r", false);
        /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
        __publicField(this, "$$p_d", {});
        /** @type {Record<string, Function[]>} Event listeners */
        __publicField(this, "$$l", {});
        /** @type {Map<Function, Function>} Event listener unsubscribe functions */
        __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
        this.$$ctor = $$componentCtor;
        this.$$s = $$slots;
        if (use_shadow_dom) {
          this.attachShadow({ mode: "open" });
        }
      }
      addEventListener(type, listener, options) {
        this.$$l[type] = this.$$l[type] || [];
        this.$$l[type].push(listener);
        if (this.$$c) {
          const unsub = this.$$c.$on(type, listener);
          this.$$l_u.set(listener, unsub);
        }
        super.addEventListener(type, listener, options);
      }
      removeEventListener(type, listener, options) {
        super.removeEventListener(type, listener, options);
        if (this.$$c) {
          const unsub = this.$$l_u.get(listener);
          if (unsub) {
            unsub();
            this.$$l_u.delete(listener);
          }
        }
      }
      async connectedCallback() {
        this.$$cn = true;
        if (!this.$$c) {
          let create_slot2 = function(name) {
            return () => {
              let node;
              const obj = {
                c: function create7() {
                  node = element("slot");
                  if (name !== "default") {
                    attr(node, "name", name);
                  }
                },
                /**
                 * @param {HTMLElement} target
                 * @param {HTMLElement} [anchor]
                 */
                m: function mount(target, anchor) {
                  insert2(target, node, anchor);
                },
                d: function destroy(detaching) {
                  if (detaching) {
                    detach2(node);
                  }
                }
              };
              return obj;
            };
          };
          await Promise.resolve();
          if (!this.$$cn) {
            return;
          }
          const $$slots = {};
          const existing_slots = get_custom_elements_slots(this);
          for (const name of this.$$s) {
            if (name in existing_slots) {
              $$slots[name] = [create_slot2(name)];
            }
          }
          for (const attribute of this.attributes) {
            const name = this.$$g_p(attribute.name);
            if (!(name in this.$$d)) {
              this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
            }
          }
          this.$$c = new this.$$ctor({
            target: this.shadowRoot || this,
            props: __spreadProps(__spreadValues({}, this.$$d), {
              $$slots,
              $$scope: {
                ctx: []
              }
            })
          });
          const reflect_attributes = () => {
            this.$$r = true;
            for (const key in this.$$p_d) {
              this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
              if (this.$$p_d[key].reflect) {
                const attribute_value = get_custom_element_value(
                  key,
                  this.$$d[key],
                  this.$$p_d,
                  "toAttribute"
                );
                if (attribute_value == null) {
                  this.removeAttribute(this.$$p_d[key].attribute || key);
                } else {
                  this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
                }
              }
            }
            this.$$r = false;
          };
          this.$$c.$$.after_update.push(reflect_attributes);
          reflect_attributes();
          for (const type in this.$$l) {
            for (const listener of this.$$l[type]) {
              const unsub = this.$$c.$on(type, listener);
              this.$$l_u.set(listener, unsub);
            }
          }
          this.$$l = {};
        }
      }
      // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
      // and setting attributes through setAttribute etc, this is helpful
      attributeChangedCallback(attr2, _oldValue, newValue) {
        var _a2;
        if (this.$$r)
          return;
        attr2 = this.$$g_p(attr2);
        this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
        (_a2 = this.$$c) == null ? void 0 : _a2.$set({ [attr2]: this.$$d[attr2] });
      }
      disconnectedCallback() {
        this.$$cn = false;
        Promise.resolve().then(() => {
          if (!this.$$cn) {
            this.$$c.$destroy();
            this.$$c = void 0;
          }
        });
      }
      $$g_p(attribute_name) {
        return Object.keys(this.$$p_d).find(
          (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
        ) || attribute_name;
      }
    };
  }
  function get_custom_element_value(prop, value, props_definition, transform) {
    var _a2;
    const type = (_a2 = props_definition[prop]) == null ? void 0 : _a2.type;
    value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
    if (!transform || !props_definition[prop]) {
      return value;
    } else if (transform === "toAttribute") {
      switch (type) {
        case "Object":
        case "Array":
          return value == null ? null : JSON.stringify(value);
        case "Boolean":
          return value ? "" : null;
        case "Number":
          return value == null ? null : value;
        default:
          return value;
      }
    } else {
      switch (type) {
        case "Object":
        case "Array":
          return value && JSON.parse(value);
        case "Boolean":
          return value;
        case "Number":
          return value != null ? +value : value;
        default:
          return value;
      }
    }
  }
  var SvelteComponent = class {
    constructor() {
      /**
       * ### PRIVATE API
       *
       * Do not use, may change at any time
       *
       * @type {any}
       */
      __publicField(this, "$$");
      /**
       * ### PRIVATE API
       *
       * Do not use, may change at any time
       *
       * @type {any}
       */
      __publicField(this, "$$set");
    }
    /** @returns {void} */
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop3;
    }
    /**
     * @template {Extract<keyof Events, string>} K
     * @param {K} type
     * @param {((e: Events[K]) => void) | null | undefined} callback
     * @returns {() => void}
     */
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop3;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    /**
     * @param {Partial<Props>} props
     * @returns {void}
     */
    $set(props) {
      if (this.$$set && !is_empty(props)) {
        this.$$.skip_bound = true;
        this.$$set(props);
        this.$$.skip_bound = false;
      }
    }
  };

  // node_modules/svelte/src/shared/version.js
  var VERSION = "4.2.7";
  var PUBLIC_VERSION = "4";

  // node_modules/svelte/src/runtime/internal/dev.js
  function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, __spreadValues({ version: VERSION }, detail), { bubbles: true }));
  }
  function append_hydration_dev(target, node) {
    dispatch_dev("SvelteDOMInsert", { target, node });
    append_hydration(target, node);
  }
  function insert_hydration_dev(target, node, anchor) {
    dispatch_dev("SvelteDOMInsert", { target, node, anchor });
    insert_hydration(target, node, anchor);
  }
  function detach_dev(node) {
    dispatch_dev("SvelteDOMRemove", { node });
    detach2(node);
  }
  function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
    const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
      modifiers.push("preventDefault");
    if (has_stop_propagation)
      modifiers.push("stopPropagation");
    if (has_stop_immediate_propagation)
      modifiers.push("stopImmediatePropagation");
    dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
      dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
      dispose();
    };
  }
  function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
      dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
    else
      dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
  }
  function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev("SvelteDOMSetProperty", { node, property, value });
  }
  function set_data_dev(text3, data) {
    data = "" + data;
    if (text3.data === data)
      return;
    dispatch_dev("SvelteDOMSetData", { node: text3, data });
    text3.data = /** @type {string} */
    data;
  }
  function ensure_array_like_dev(arg) {
    if (typeof arg !== "string" && !(arg && typeof arg === "object" && "length" in arg) && !(typeof Symbol === "function" && arg && Symbol.iterator in arg)) {
      throw new Error("{#each} only works with iterable values.");
    }
    return ensure_array_like(arg);
  }
  function validate_slots(name, slot, keys2) {
    for (const slot_key of Object.keys(slot)) {
      if (!~keys2.indexOf(slot_key)) {
        console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
      }
    }
  }
  function validate_dynamic_element(tag) {
    const is_string = typeof tag === "string";
    if (tag && !is_string) {
      throw new Error('<svelte:element> expects "this" attribute to be a string.');
    }
  }
  var SvelteComponentDev = class extends SvelteComponent {
    /** @param {import('./public.js').ComponentConstructorOptions<Props>} options */
    constructor(options) {
      if (!options || !options.target && !options.$$inline) {
        throw new Error("'target' is a required option");
      }
      super();
      /**
       * For type checking capabilities only.
       * Does not exist at runtime.
       * ### DO NOT USE!
       *
       * @type {Props}
       */
      __publicField(this, "$$prop_def");
      /**
       * For type checking capabilities only.
       * Does not exist at runtime.
       * ### DO NOT USE!
       *
       * @type {Events}
       */
      __publicField(this, "$$events_def");
      /**
       * For type checking capabilities only.
       * Does not exist at runtime.
       * ### DO NOT USE!
       *
       * @type {Slots}
       */
      __publicField(this, "$$slot_def");
    }
    /** @returns {void} */
    $destroy() {
      super.$destroy();
      this.$destroy = () => {
        console.warn("Component was already destroyed");
      };
    }
    /** @returns {void} */
    $capture_state() {
    }
    /** @returns {void} */
    $inject_state() {
    }
  };

  // node_modules/svelte/src/runtime/internal/disclose-version/index.js
  if (typeof window !== "undefined")
    (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

  // node_modules/svelte/src/runtime/easing/index.js
  function cubicOut(t) {
    const f = t - 1;
    return f * f * f + 1;
  }
  function sineIn(t) {
    const v = Math.cos(t * Math.PI * 0.5);
    if (Math.abs(v) < 1e-14)
      return 1;
    else
      return 1 - v;
  }

  // node_modules/svelte/src/runtime/transition/index.js
  function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
      delay,
      duration,
      easing,
      css: (t) => `opacity: ${t * o}`
    };
  }
  function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === "none" ? "" : style.transform;
    const od = target_opacity * (1 - opacity);
    const [xValue, xUnit] = split_css_unit(x);
    const [yValue, yUnit] = split_css_unit(y);
    return {
      delay,
      duration,
      easing,
      css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});
			opacity: ${target_opacity - od * u}`
    };
  }
  function scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === "none" ? "" : style.transform;
    const sd = 1 - start;
    const od = target_opacity * (1 - opacity);
    return {
      delay,
      duration,
      easing,
      css: (_t, u) => `
			transform: ${transform} scale(${1 - sd * u});
			opacity: ${target_opacity - od * u}
		`
    };
  }

  // node_modules/lucide-svelte/dist/defaultAttributes.js
  var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    "stroke-width": 2,
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  };
  var defaultAttributes_default = defaultAttributes;

  // node_modules/lucide-svelte/dist/Icon.svelte
  var file = "node_modules/lucide-svelte/dist/Icon.svelte";
  function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i][0];
    child_ctx[11] = list[i][1];
    return child_ctx;
  }
  function create_dynamic_element(ctx) {
    let svelte_element;
    let svelte_element_levels = [
      /*attrs*/
      ctx[11]
    ];
    let svelte_element_data = {};
    for (let i = 0; i < svelte_element_levels.length; i += 1) {
      svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
    }
    const block = {
      c: function create7() {
        svelte_element = svg_element(
          /*tag*/
          ctx[10]
        );
        this.h();
      },
      l: function claim(nodes) {
        svelte_element = claim_svg_element(
          nodes,
          /*tag*/
          ctx[10],
          {}
        );
        children(svelte_element).forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        set_svg_attributes(svelte_element, svelte_element_data);
        add_location(svelte_element, file, 23, 4, 555);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, svelte_element, anchor);
      },
      p: function update2(ctx2, dirty) {
        set_svg_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [dirty & /*iconNode*/
        32 && /*attrs*/
        ctx2[11]]));
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(svelte_element);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_dynamic_element.name,
      type: "child_dynamic_element",
      source: "(24:4) <svelte:element this={tag} {...attrs}/>",
      ctx
    });
    return block;
  }
  function create_each_block(ctx) {
    let previous_tag = (
      /*tag*/
      ctx[10]
    );
    let svelte_element_anchor;
    validate_dynamic_element(
      /*tag*/
      ctx[10]
    );
    let svelte_element = (
      /*tag*/
      ctx[10] && create_dynamic_element(ctx)
    );
    const block = {
      c: function create7() {
        if (svelte_element)
          svelte_element.c();
        svelte_element_anchor = empty();
      },
      l: function claim(nodes) {
        if (svelte_element)
          svelte_element.l(nodes);
        svelte_element_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (svelte_element)
          svelte_element.m(target, anchor);
        insert_hydration_dev(target, svelte_element_anchor, anchor);
      },
      p: function update2(ctx2, dirty) {
        if (
          /*tag*/
          ctx2[10]
        ) {
          if (!previous_tag) {
            svelte_element = create_dynamic_element(ctx2);
            previous_tag = /*tag*/
            ctx2[10];
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else if (safe_not_equal(
            previous_tag,
            /*tag*/
            ctx2[10]
          )) {
            svelte_element.d(1);
            validate_dynamic_element(
              /*tag*/
              ctx2[10]
            );
            svelte_element = create_dynamic_element(ctx2);
            previous_tag = /*tag*/
            ctx2[10];
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else {
            svelte_element.p(ctx2, dirty);
          }
        } else if (previous_tag) {
          svelte_element.d(1);
          svelte_element = null;
          previous_tag = /*tag*/
          ctx2[10];
        }
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(svelte_element_anchor);
        }
        if (svelte_element)
          svelte_element.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_each_block.name,
      type: "each",
      source: "(23:2) {#each iconNode as [tag, attrs]}",
      ctx
    });
    return block;
  }
  function create_fragment(ctx) {
    var _a2;
    let svg;
    let each_1_anchor;
    let svg_stroke_width_value;
    let svg_class_value;
    let current;
    let each_value = ensure_array_like_dev(
      /*iconNode*/
      ctx[5]
    );
    let each_blocks = [];
    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    }
    const default_slot_template = (
      /*#slots*/
      ctx[9].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[8],
      null
    );
    let svg_levels = [
      defaultAttributes_default,
      /*$$restProps*/
      ctx[6],
      { width: (
        /*size*/
        ctx[2]
      ) },
      { height: (
        /*size*/
        ctx[2]
      ) },
      { stroke: (
        /*color*/
        ctx[1]
      ) },
      {
        "stroke-width": svg_stroke_width_value = /*absoluteStrokeWidth*/
        ctx[4] ? Number(
          /*strokeWidth*/
          ctx[3]
        ) * 24 / Number(
          /*size*/
          ctx[2]
        ) : (
          /*strokeWidth*/
          ctx[3]
        )
      },
      {
        class: svg_class_value = `lucide-icon lucide lucide-${/*name*/
        ctx[0]} ${/*$$props*/
        (_a2 = ctx[7].class) != null ? _a2 : ""}`
      }
    ];
    let svg_data = {};
    for (let i = 0; i < svg_levels.length; i += 1) {
      svg_data = assign(svg_data, svg_levels[i]);
    }
    const block = {
      c: function create7() {
        svg = svg_element("svg");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        each_1_anchor = empty();
        if (default_slot)
          default_slot.c();
        this.h();
      },
      l: function claim(nodes) {
        svg = claim_svg_element(nodes, "svg", {
          width: true,
          height: true,
          stroke: true,
          "stroke-width": true,
          class: true
        });
        var svg_nodes = children(svg);
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].l(svg_nodes);
        }
        each_1_anchor = empty();
        if (default_slot)
          default_slot.l(svg_nodes);
        svg_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        set_svg_attributes(svg, svg_data);
        add_location(svg, file, 9, 0, 235);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, svg, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(svg, null);
          }
        }
        append_hydration_dev(svg, each_1_anchor);
        if (default_slot) {
          default_slot.m(svg, null);
        }
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        var _a3;
        if (dirty & /*iconNode*/
        32) {
          each_value = ensure_array_like_dev(
            /*iconNode*/
            ctx2[5]
          );
          let i;
          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context(ctx2, each_value, i);
            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty);
            } else {
              each_blocks[i] = create_each_block(child_ctx);
              each_blocks[i].c();
              each_blocks[i].m(svg, each_1_anchor);
            }
          }
          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1);
          }
          each_blocks.length = each_value.length;
        }
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          256)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[8],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[8]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[8],
                dirty,
                null
              ),
              null
            );
          }
        }
        set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
          defaultAttributes_default,
          dirty & /*$$restProps*/
          64 && /*$$restProps*/
          ctx2[6],
          (!current || dirty & /*size*/
          4) && { width: (
            /*size*/
            ctx2[2]
          ) },
          (!current || dirty & /*size*/
          4) && { height: (
            /*size*/
            ctx2[2]
          ) },
          (!current || dirty & /*color*/
          2) && { stroke: (
            /*color*/
            ctx2[1]
          ) },
          (!current || dirty & /*absoluteStrokeWidth, strokeWidth, size*/
          28 && svg_stroke_width_value !== (svg_stroke_width_value = /*absoluteStrokeWidth*/
          ctx2[4] ? Number(
            /*strokeWidth*/
            ctx2[3]
          ) * 24 / Number(
            /*size*/
            ctx2[2]
          ) : (
            /*strokeWidth*/
            ctx2[3]
          ))) && { "stroke-width": svg_stroke_width_value },
          (!current || dirty & /*name, $$props*/
          129 && svg_class_value !== (svg_class_value = `lucide-icon lucide lucide-${/*name*/
          ctx2[0]} ${/*$$props*/
          (_a3 = ctx2[7].class) != null ? _a3 : ""}`)) && { class: svg_class_value }
        ]));
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(svg);
        }
        destroy_each(each_blocks, detaching);
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance($$self, $$props, $$invalidate) {
    const omit_props_names = ["name", "color", "size", "strokeWidth", "absoluteStrokeWidth", "iconNode"];
    let $$restProps = compute_rest_props($$props, omit_props_names);
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Icon", slots, ["default"]);
    let { name } = $$props;
    let { color = "currentColor" } = $$props;
    let { size = 24 } = $$props;
    let { strokeWidth = 2 } = $$props;
    let { absoluteStrokeWidth = false } = $$props;
    let { iconNode } = $$props;
    $$self.$$.on_mount.push(function() {
      if (name === void 0 && !("name" in $$props || $$self.$$.bound[$$self.$$.props["name"]])) {
        console.warn("<Icon> was created without expected prop 'name'");
      }
      if (iconNode === void 0 && !("iconNode" in $$props || $$self.$$.bound[$$self.$$.props["iconNode"]])) {
        console.warn("<Icon> was created without expected prop 'iconNode'");
      }
    });
    $$self.$$set = ($$new_props) => {
      $$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
      if ("name" in $$new_props)
        $$invalidate(0, name = $$new_props.name);
      if ("color" in $$new_props)
        $$invalidate(1, color = $$new_props.color);
      if ("size" in $$new_props)
        $$invalidate(2, size = $$new_props.size);
      if ("strokeWidth" in $$new_props)
        $$invalidate(3, strokeWidth = $$new_props.strokeWidth);
      if ("absoluteStrokeWidth" in $$new_props)
        $$invalidate(4, absoluteStrokeWidth = $$new_props.absoluteStrokeWidth);
      if ("iconNode" in $$new_props)
        $$invalidate(5, iconNode = $$new_props.iconNode);
      if ("$$scope" in $$new_props)
        $$invalidate(8, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({
      defaultAttributes: defaultAttributes_default,
      name,
      color,
      size,
      strokeWidth,
      absoluteStrokeWidth,
      iconNode
    });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
      if ("name" in $$props)
        $$invalidate(0, name = $$new_props.name);
      if ("color" in $$props)
        $$invalidate(1, color = $$new_props.color);
      if ("size" in $$props)
        $$invalidate(2, size = $$new_props.size);
      if ("strokeWidth" in $$props)
        $$invalidate(3, strokeWidth = $$new_props.strokeWidth);
      if ("absoluteStrokeWidth" in $$props)
        $$invalidate(4, absoluteStrokeWidth = $$new_props.absoluteStrokeWidth);
      if ("iconNode" in $$props)
        $$invalidate(5, iconNode = $$new_props.iconNode);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [
      name,
      color,
      size,
      strokeWidth,
      absoluteStrokeWidth,
      iconNode,
      $$restProps,
      $$props,
      $$scope,
      slots
    ];
  }
  var Icon = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance, create_fragment, safe_not_equal, {
        name: 0,
        color: 1,
        size: 2,
        strokeWidth: 3,
        absoluteStrokeWidth: 4,
        iconNode: 5
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Icon",
        options,
        id: create_fragment.name
      });
    }
    get name() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set name(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get color() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set color(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get size() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set size(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get strokeWidth() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set strokeWidth(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get absoluteStrokeWidth() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set absoluteStrokeWidth(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get iconNode() {
      throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set iconNode(value) {
      throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var Icon_default = Icon;

  // node_modules/lucide-svelte/dist/icons/arrow-left.svelte
  function create_default_slot(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"arrow-left\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment2(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "arrow-left" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment2.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance2($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Arrow_left", slots, ["default"]);
    const iconNode = [["path", { "d": "m12 19-7-7 7-7" }], ["path", { "d": "M19 12H5" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Arrow_left = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance2, create_fragment2, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Arrow_left",
        options,
        id: create_fragment2.name
      });
    }
  };
  var arrow_left_default = Arrow_left;

  // node_modules/lucide-svelte/dist/icons/check.svelte
  function create_default_slot2(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot2.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"check\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment3(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "check" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot2] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment3.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance3($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Check", slots, ["default"]);
    const iconNode = [["path", { "d": "M20 6 9 17l-5-5" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Check = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance3, create_fragment3, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Check",
        options,
        id: create_fragment3.name
      });
    }
  };
  var check_default = Check;

  // node_modules/lucide-svelte/dist/icons/chevron-down.svelte
  function create_default_slot3(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot3.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"chevron-down\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment4(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "chevron-down" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment4.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance4($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Chevron_down", slots, ["default"]);
    const iconNode = [["path", { "d": "m6 9 6 6 6-6" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Chevron_down = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance4, create_fragment4, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Chevron_down",
        options,
        id: create_fragment4.name
      });
    }
  };
  var chevron_down_default = Chevron_down;

  // node_modules/lucide-svelte/dist/icons/chevron-right.svelte
  function create_default_slot4(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot4.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"chevron-right\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment5(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "chevron-right" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment5.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance5($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Chevron_right", slots, ["default"]);
    const iconNode = [["path", { "d": "m9 18 6-6-6-6" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Chevron_right = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance5, create_fragment5, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Chevron_right",
        options,
        id: create_fragment5.name
      });
    }
  };
  var chevron_right_default = Chevron_right;

  // node_modules/lucide-svelte/dist/icons/chevron-up.svelte
  function create_default_slot5(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot5.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"chevron-up\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment6(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "chevron-up" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot5] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment6.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance6($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Chevron_up", slots, ["default"]);
    const iconNode = [["path", { "d": "m18 15-6-6-6 6" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Chevron_up = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance6, create_fragment6, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Chevron_up",
        options,
        id: create_fragment6.name
      });
    }
  };
  var chevron_up_default = Chevron_up;

  // node_modules/lucide-svelte/dist/icons/circle-alert.svelte
  function create_default_slot6(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot6.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"circle-alert\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment7(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "circle-alert" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot6] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment7.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance7($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Circle_alert", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "12", "r": "10" }],
      [
        "line",
        {
          "x1": "12",
          "x2": "12",
          "y1": "8",
          "y2": "12"
        }
      ],
      [
        "line",
        {
          "x1": "12",
          "x2": "12.01",
          "y1": "16",
          "y2": "16"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Circle_alert = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance7, create_fragment7, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Circle_alert",
        options,
        id: create_fragment7.name
      });
    }
  };
  var circle_alert_default = Circle_alert;

  // node_modules/lucide-svelte/dist/icons/circle-check-big.svelte
  function create_default_slot7(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot7.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"circle-check-big\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment8(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "circle-check-big" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot7] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment8.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance8($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Circle_check_big", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M22 11.08V12a10 10 0 1 1-5.93-9.14"
        }
      ],
      ["path", { "d": "m9 11 3 3L22 4" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Circle_check_big = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance8, create_fragment8, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Circle_check_big",
        options,
        id: create_fragment8.name
      });
    }
  };
  var circle_check_big_default = Circle_check_big;

  // node_modules/lucide-svelte/dist/icons/circle-ellipsis.svelte
  function create_default_slot8(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot8.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"circle-ellipsis\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment9(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "circle-ellipsis" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot8] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment9.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance9($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Circle_ellipsis", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "12", "r": "10" }],
      ["path", { "d": "M17 12h.01" }],
      ["path", { "d": "M12 12h.01" }],
      ["path", { "d": "M7 12h.01" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Circle_ellipsis = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance9, create_fragment9, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Circle_ellipsis",
        options,
        id: create_fragment9.name
      });
    }
  };
  var circle_ellipsis_default = Circle_ellipsis;

  // node_modules/lucide-svelte/dist/icons/circle-x.svelte
  function create_default_slot9(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot9.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"circle-x\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment10(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "circle-x" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot9] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment10.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance10($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Circle_x", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "12", "r": "10" }],
      ["path", { "d": "m15 9-6 6" }],
      ["path", { "d": "m9 9 6 6" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Circle_x = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance10, create_fragment10, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Circle_x",
        options,
        id: create_fragment10.name
      });
    }
  };
  var circle_x_default = Circle_x;

  // node_modules/lucide-svelte/dist/icons/grip-horizontal.svelte
  function create_default_slot10(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot10.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"grip-horizontal\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment11(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "grip-horizontal" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot10] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment11.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance11($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Grip_horizontal", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "9", "r": "1" }],
      ["circle", { "cx": "19", "cy": "9", "r": "1" }],
      ["circle", { "cx": "5", "cy": "9", "r": "1" }],
      ["circle", { "cx": "12", "cy": "15", "r": "1" }],
      ["circle", { "cx": "19", "cy": "15", "r": "1" }],
      ["circle", { "cx": "5", "cy": "15", "r": "1" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Grip_horizontal = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance11, create_fragment11, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Grip_horizontal",
        options,
        id: create_fragment11.name
      });
    }
  };
  var grip_horizontal_default = Grip_horizontal;

  // node_modules/lucide-svelte/dist/icons/info.svelte
  function create_default_slot11(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot11.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"info\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment12(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "info" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot11] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment12.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance12($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Info", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "12", "r": "10" }],
      ["path", { "d": "M12 16v-4" }],
      ["path", { "d": "M12 8h.01" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Info = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance12, create_fragment12, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Info",
        options,
        id: create_fragment12.name
      });
    }
  };
  var info_default = Info;

  // node_modules/lucide-svelte/dist/icons/laptop.svelte
  function create_default_slot12(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot12.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"laptop\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment13(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "laptop" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot12] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment13.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance13($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Laptop", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Laptop = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance13, create_fragment13, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Laptop",
        options,
        id: create_fragment13.name
      });
    }
  };
  var laptop_default = Laptop;

  // node_modules/lucide-svelte/dist/icons/log-out.svelte
  function create_default_slot13(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot13.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"log-out\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment14(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "log-out" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot13] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment14.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance14($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Log_out", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
        }
      ],
      ["polyline", { "points": "16 17 21 12 16 7" }],
      [
        "line",
        {
          "x1": "21",
          "x2": "9",
          "y1": "12",
          "y2": "12"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Log_out = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance14, create_fragment14, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Log_out",
        options,
        id: create_fragment14.name
      });
    }
  };
  var log_out_default = Log_out;

  // node_modules/lucide-svelte/dist/icons/moon.svelte
  function create_default_slot14(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot14.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"moon\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment15(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "moon" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot14] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment15.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance15($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Moon", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Moon = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance15, create_fragment15, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Moon",
        options,
        id: create_fragment15.name
      });
    }
  };
  var moon_default = Moon;

  // node_modules/lucide-svelte/dist/icons/move-right.svelte
  function create_default_slot15(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot15.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"move-right\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment16(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "move-right" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot15] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment16.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance16($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Move_right", slots, ["default"]);
    const iconNode = [["path", { "d": "M18 8L22 12L18 16" }], ["path", { "d": "M2 12H22" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Move_right = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance16, create_fragment16, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Move_right",
        options,
        id: create_fragment16.name
      });
    }
  };
  var move_right_default = Move_right;

  // node_modules/lucide-svelte/dist/icons/pencil.svelte
  function create_default_slot16(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot16.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"pencil\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment17(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "pencil" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot16] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment17.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance17($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Pencil", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"
        }
      ],
      ["path", { "d": "m15 5 4 4" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Pencil = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance17, create_fragment17, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Pencil",
        options,
        id: create_fragment17.name
      });
    }
  };
  var pencil_default = Pencil;

  // node_modules/lucide-svelte/dist/icons/redo-2.svelte
  function create_default_slot17(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot17.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"redo-2\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment18(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "redo-2" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot17] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment18.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance18($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Redo_2", slots, ["default"]);
    const iconNode = [
      ["path", { "d": "m15 14 5-5-5-5" }],
      [
        "path",
        {
          "d": "M20 9H9.5A5.5 5.5 0 0 0 4 14.5v0A5.5 5.5 0 0 0 9.5 20H13"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Redo_2 = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance18, create_fragment18, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Redo_2",
        options,
        id: create_fragment18.name
      });
    }
  };
  var redo_2_default = Redo_2;

  // node_modules/lucide-svelte/dist/icons/refresh-cw.svelte
  function create_default_slot18(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot18.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"refresh-cw\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment19(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "refresh-cw" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot18] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment19.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance19($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Refresh_cw", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
        }
      ],
      ["path", { "d": "M21 3v5h-5" }],
      [
        "path",
        {
          "d": "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
        }
      ],
      ["path", { "d": "M8 16H3v5" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Refresh_cw = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance19, create_fragment19, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Refresh_cw",
        options,
        id: create_fragment19.name
      });
    }
  };
  var refresh_cw_default = Refresh_cw;

  // node_modules/lucide-svelte/dist/icons/settings.svelte
  function create_default_slot19(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot19.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"settings\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment20(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "settings" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot19] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment20.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance20($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Settings", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"
        }
      ],
      ["circle", { "cx": "12", "cy": "12", "r": "3" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Settings = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance20, create_fragment20, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Settings",
        options,
        id: create_fragment20.name
      });
    }
  };
  var settings_default = Settings;

  // node_modules/lucide-svelte/dist/icons/share-2.svelte
  function create_default_slot20(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot20.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"share-2\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment21(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "share-2" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot20] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment21.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance21($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Share_2", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "18", "cy": "5", "r": "3" }],
      ["circle", { "cx": "6", "cy": "12", "r": "3" }],
      ["circle", { "cx": "18", "cy": "19", "r": "3" }],
      [
        "line",
        {
          "x1": "8.59",
          "x2": "15.42",
          "y1": "13.51",
          "y2": "17.49"
        }
      ],
      [
        "line",
        {
          "x1": "15.41",
          "x2": "8.59",
          "y1": "6.51",
          "y2": "10.49"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Share_2 = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance21, create_fragment21, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Share_2",
        options,
        id: create_fragment21.name
      });
    }
  };
  var share_2_default = Share_2;

  // node_modules/lucide-svelte/dist/icons/sun.svelte
  function create_default_slot21(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot21.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"sun\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment22(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "sun" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot21] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment22.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance22($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Sun", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "12", "r": "4" }],
      ["path", { "d": "M12 2v2" }],
      ["path", { "d": "M12 20v2" }],
      ["path", { "d": "m4.93 4.93 1.41 1.41" }],
      ["path", { "d": "m17.66 17.66 1.41 1.41" }],
      ["path", { "d": "M2 12h2" }],
      ["path", { "d": "M20 12h2" }],
      ["path", { "d": "m6.34 17.66-1.41 1.41" }],
      ["path", { "d": "m19.07 4.93-1.41 1.41" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Sun = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance22, create_fragment22, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Sun",
        options,
        id: create_fragment22.name
      });
    }
  };
  var sun_default = Sun;

  // node_modules/lucide-svelte/dist/icons/swatch-book.svelte
  function create_default_slot22(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot22.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"swatch-book\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment23(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "swatch-book" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot22] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment23.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance23($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Swatch_book", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z"
        }
      ],
      [
        "path",
        {
          "d": "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7"
        }
      ],
      ["path", { "d": "M 7 17h0.01" }],
      [
        "path",
        {
          "d": "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Swatch_book = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance23, create_fragment23, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Swatch_book",
        options,
        id: create_fragment23.name
      });
    }
  };
  var swatch_book_default = Swatch_book;

  // node_modules/lucide-svelte/dist/icons/trash-2.svelte
  function create_default_slot23(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot23.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"trash-2\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment24(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "trash-2" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot23] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment24.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance24($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Trash_2", slots, ["default"]);
    const iconNode = [
      ["path", { "d": "M3 6h18" }],
      [
        "path",
        {
          "d": "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"
        }
      ],
      [
        "path",
        {
          "d": "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"
        }
      ],
      [
        "line",
        {
          "x1": "10",
          "x2": "10",
          "y1": "11",
          "y2": "17"
        }
      ],
      [
        "line",
        {
          "x1": "14",
          "x2": "14",
          "y1": "11",
          "y2": "17"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Trash_2 = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance24, create_fragment24, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Trash_2",
        options,
        id: create_fragment24.name
      });
    }
  };
  var trash_2_default = Trash_2;

  // node_modules/lucide-svelte/dist/icons/triangle-alert.svelte
  function create_default_slot24(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot24.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"triangle-alert\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment25(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "triangle-alert" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot24] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment25.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance25($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Triangle_alert", slots, ["default"]);
    const iconNode = [
      [
        "path",
        {
          "d": "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
        }
      ],
      ["path", { "d": "M12 9v4" }],
      ["path", { "d": "M12 17h.01" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Triangle_alert = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance25, create_fragment25, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Triangle_alert",
        options,
        id: create_fragment25.name
      });
    }
  };
  var triangle_alert_default = Triangle_alert;

  // node_modules/lucide-svelte/dist/icons/undo-2.svelte
  function create_default_slot25(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot25.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"undo-2\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment26(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "undo-2" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot25] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment26.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance26($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Undo_2", slots, ["default"]);
    const iconNode = [
      ["path", { "d": "M9 14 4 9l5-5" }],
      [
        "path",
        {
          "d": "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11"
        }
      ]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var Undo_2 = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance26, create_fragment26, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Undo_2",
        options,
        id: create_fragment26.name
      });
    }
  };
  var undo_2_default = Undo_2;

  // node_modules/lucide-svelte/dist/icons/user-round.svelte
  function create_default_slot26(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot26.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"user-round\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment27(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "user-round" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot26] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment27.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance27($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("User_round", slots, ["default"]);
    const iconNode = [
      ["circle", { "cx": "12", "cy": "8", "r": "5" }],
      ["path", { "d": "M20 21a8 8 0 0 0-16 0" }]
    ];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var User_round = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance27, create_fragment27, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "User_round",
        options,
        id: create_fragment27.name
      });
    }
  };
  var user_round_default = User_round;

  // node_modules/lucide-svelte/dist/icons/x.svelte
  function create_default_slot27(ctx) {
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[2].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[3],
      null
    );
    const block = {
      c: function create7() {
        if (default_slot)
          default_slot.c();
      },
      l: function claim(nodes) {
        if (default_slot)
          default_slot.l(nodes);
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor);
        }
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          8)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[3],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[3]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[3],
                dirty,
                null
              ),
              null
            );
          }
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot27.name,
      type: "slot",
      source: '(22:0) <Icon name=\\"x\\" {...$$props} iconNode={iconNode}>',
      ctx
    });
    return block;
  }
  function create_fragment28(ctx) {
    let icon;
    let current;
    const icon_spread_levels = [
      { name: "x" },
      /*$$props*/
      ctx[1],
      { iconNode: (
        /*iconNode*/
        ctx[0]
      ) }
    ];
    let icon_props = {
      $$slots: { default: [create_default_slot27] },
      $$scope: { ctx }
    };
    for (let i = 0; i < icon_spread_levels.length; i += 1) {
      icon_props = assign(icon_props, icon_spread_levels[i]);
    }
    icon = new Icon_default({ props: icon_props, $$inline: true });
    const block = {
      c: function create7() {
        create_component(icon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(icon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(icon, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const icon_changes = dirty & /*$$props, iconNode*/
        3 ? get_spread_update(icon_spread_levels, [
          icon_spread_levels[0],
          dirty & /*$$props*/
          2 && get_spread_object(
            /*$$props*/
            ctx2[1]
          ),
          dirty & /*iconNode*/
          1 && { iconNode: (
            /*iconNode*/
            ctx2[0]
          ) }
        ]) : {};
        if (dirty & /*$$scope*/
        8) {
          icon_changes.$$scope = { dirty, ctx: ctx2 };
        }
        icon.$set(icon_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(icon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(icon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(icon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment28.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance28($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("X", slots, ["default"]);
    const iconNode = [["path", { "d": "M18 6 6 18" }], ["path", { "d": "m6 6 12 12" }]];
    $$self.$$set = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
      if ("$$scope" in $$new_props)
        $$invalidate(3, $$scope = $$new_props.$$scope);
    };
    $$self.$capture_state = () => ({ Icon: Icon_default, iconNode });
    $$self.$inject_state = ($$new_props) => {
      $$invalidate(1, $$props = assign(assign({}, $$props), $$new_props));
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$props = exclude_internal_props($$props);
    return [iconNode, $$props, slots, $$scope];
  }
  var X = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance28, create_fragment28, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "X",
        options,
        id: create_fragment28.name
      });
    }
  };
  var x_default = X;

  // lib/actions/focusTrap.ts
  function isHTMLElement(element3) {
    return element3 instanceof HTMLElement;
  }
  function focusElement(element3) {
    if (isHTMLElement(element3)) {
      element3.focus();
    } else {
      console.error("Element is not an HTMLElement and cannot be focused.", element3);
    }
  }
  function focusTrap(element3, { focusFirstElement = false, onEscape = void 0 }) {
    const focusableElements = Array.from(element3.querySelectorAll("[data-focusindex]"));
    if (focusFirstElement) {
      const firstElementToFocus = focusableElements.find(
        (el) => el.getAttribute("data-focusindex") === "0"
      );
      focusElement(firstElementToFocus);
    }
    function keydownHandler(event) {
      const indexOfActiveElement = focusableElements.indexOf(document.activeElement);
      const previousElement = indexOfActiveElement === 0 ? focusableElements[focusableElements.length - 1] : focusableElements[indexOfActiveElement - 1];
      const nextElement = indexOfActiveElement === focusableElements.length - 1 ? focusableElements[0] : focusableElements[indexOfActiveElement + 1];
      switch (event.key) {
        case "Tab":
          event.preventDefault();
          if (event.shiftKey) {
            focusElement(previousElement);
          } else {
            focusElement(nextElement);
          }
          break;
        case "ArrowUp":
          focusElement(previousElement);
          break;
        case "ArrowDown":
          focusElement(nextElement);
          break;
        case "Escape":
          if (onEscape) {
            onEscape();
          }
          break;
      }
    }
    element3.addEventListener("keydown", keydownHandler);
    return {
      update(newOptions) {
        focusFirstElement = newOptions.focusFirstElement;
        onEscape = newOptions.onEscape;
      },
      destroy() {
        element3.removeEventListener("keydown", keydownHandler);
      }
    };
  }

  // lib/hooks/useIsConnected.ts
  async function useIsConnected({
    pathname = "/",
    timeout = 5e3
  }) {
    try {
      const url = new URL(`${window.location.origin}${pathname}`);
      url.searchParams.set("bypass_service_worker", Date.now().toString());
      const response = await fetch(url, {
        // Timeout to prevent excessive wait time.
        signal: AbortSignal.timeout(timeout)
      });
      return response.ok;
    } catch (e) {
      return false;
    }
  }

  // lib/topbar/lib/events.ts
  var LOADING_START_EVENT = "phx:page-loading-start";
  var LOADING_STOP_EVENT = "phx:page-loading-stop";
  function showTopBar() {
    window.dispatchEvent(new CustomEvent(LOADING_START_EVENT));
  }
  function hideTopBar() {
    window.dispatchEvent(new CustomEvent(LOADING_STOP_EVENT));
  }

  // node_modules/svelte/src/runtime/store/index.js
  var subscriber_queue = [];
  function writable(value, start = noop3) {
    let stop;
    const subscribers = /* @__PURE__ */ new Set();
    function set(new_value) {
      if (safe_not_equal(value, new_value)) {
        value = new_value;
        if (stop) {
          const run_queue = !subscriber_queue.length;
          for (const subscriber of subscribers) {
            subscriber[1]();
            subscriber_queue.push(subscriber, value);
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1]);
            }
            subscriber_queue.length = 0;
          }
        }
      }
    }
    function update2(fn) {
      set(fn(value));
    }
    function subscribe2(run2, invalidate = noop3) {
      const subscriber = [run2, invalidate];
      subscribers.add(subscriber);
      if (subscribers.size === 1) {
        stop = start(set, update2) || noop3;
      }
      run2(value);
      return () => {
        subscribers.delete(subscriber);
        if (subscribers.size === 0 && stop) {
          stop();
          stop = null;
        }
      };
    }
    return { set, update: update2, subscribe: subscribe2 };
  }

  // stores/clientOnlyState.ts
  var isListsOpened = writable(true);
  var isTodoOpened = writable(true);
  var itemToProcessId = writable("");
  var newList = writable("");
  var newTodo = writable("");
  var openedMenuId = writable("");
  var selectedListId = writable("");
  var urlHash = writable("");

  // stores/toast.ts
  var toast = writable({
    show: false,
    kind: "info",
    title: "",
    msg: ""
  });

  // svelte/DataClearer.svelte
  var DataClearer_exports = {};
  __export(DataClearer_exports, {
    clearUserData: () => clearUserData,
    default: () => DataClearer_default,
    indexedDBName: () => indexedDBName
  });

  // svelte/ServiceWorker.svelte
  var ServiceWorker_exports = {};
  __export(ServiceWorker_exports, {
    default: () => ServiceWorker_default,
    requestAssetDeletion: () => requestAssetDeletion
  });

  // lib/assets.ts
  var privateAssets = ["/app"];
  var publicAssets = [
    "/favicon.ico",
    "/android-chrome-192x192.png",
    "/android-chrome-512x512.png",
    "/apple-touch-icon.png",
    "/browserconfig.xml",
    "/favicon-16x16.png",
    "/favicon-32x32.png",
    "/mstile-150x150.png",
    "/og.png",
    "/safari-pinned-tab.svg",
    "/screenshot-narrow-light.png",
    "/screenshot-narrow-dark.png",
    "/screenshot-wide-light.png",
    "/screenshot-wide-dark.png",
    "/site.webmanifest",
    // Note: This route should only be cached after login so that
    // DataClearer does not run.
    "/offline"
  ];

  // svelte/ServiceWorker.svelte
  var { console: console_1 } = globals;
  function create_fragment29(ctx) {
    const block = {
      c: noop3,
      l: noop3,
      m: noop3,
      p: noop3,
      i: noop3,
      o: noop3,
      d: noop3
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment29.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function getAppJsAndCss() {
    const appJsScript = document.querySelector("script[phx-track-static]");
    const appJsUrl = new URL(appJsScript.src);
    const appJs = `${appJsUrl.pathname}${appJsUrl.search}`;
    const appCssLink = document.querySelector("link[phx-track-static]");
    const appCssUrl = new URL(appCssLink.href);
    const appCss = `${appCssUrl.pathname}${appCssUrl.search}`;
    return { appJs, appCss };
  }
  function requestAssetCaching(assets) {
    var _a2, _b;
    (_b = (_a2 = navigator.serviceWorker) == null ? void 0 : _a2.controller) == null ? void 0 : _b.postMessage({
      type: "request_asset_caching",
      payload: { assets }
    });
  }
  function requestAssetDeletion(assets) {
    var _a2, _b;
    (_b = (_a2 = navigator.serviceWorker) == null ? void 0 : _a2.controller) == null ? void 0 : _b.postMessage({
      type: "request_asset_deletion",
      payload: { assets }
    });
  }
  function requestServiceWorkerVersion() {
    var _a2, _b;
    (_b = (_a2 = navigator.serviceWorker) == null ? void 0 : _a2.controller) == null ? void 0 : _b.postMessage({ type: "request_service_worker_version" });
  }
  function instance29($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ServiceWorker", slots, []);
    let { serviceWorkerVersion } = $$props;
    onMount(() => {
      var _a2;
      (_a2 = navigator.serviceWorker) == null ? void 0 : _a2.addEventListener("message", (event) => {
        switch (event.data.type) {
          case "request_skip_waiting":
            window.location.reload();
            break;
          case "request_service_worker_version":
            $$invalidate(0, serviceWorkerVersion = event.data.payload.serviceWorkerVersion);
            break;
          default:
            console.error("Unknown message type received from service worker.", event.data);
        }
      });
    });
    onMount(() => {
      useIsConnected({ timeout: 1e4 }).then((isConnected) => {
        if (isConnected) {
          const { appJs, appCss } = getAppJsAndCss();
          requestAssetCaching([...privateAssets, ...publicAssets, appJs, appCss]);
        }
      });
    });
    onMount(() => {
      requestServiceWorkerVersion();
    });
    $$self.$$.on_mount.push(function() {
      if (serviceWorkerVersion === void 0 && !("serviceWorkerVersion" in $$props || $$self.$$.bound[$$self.$$.props["serviceWorkerVersion"]])) {
        console_1.warn("<ServiceWorker> was created without expected prop 'serviceWorkerVersion'");
      }
    });
    const writable_props = ["serviceWorkerVersion"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console_1.warn(`<ServiceWorker> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(0, serviceWorkerVersion = $$props2.serviceWorkerVersion);
    };
    $$self.$capture_state = () => ({
      getAppJsAndCss,
      requestAssetCaching,
      requestAssetDeletion,
      requestServiceWorkerVersion,
      onMount,
      useIsConnected,
      privateAssets,
      publicAssets,
      serviceWorkerVersion
    });
    $$self.$inject_state = ($$props2) => {
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(0, serviceWorkerVersion = $$props2.serviceWorkerVersion);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [serviceWorkerVersion];
  }
  var ServiceWorker = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance29, create_fragment29, safe_not_equal, { serviceWorkerVersion: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ServiceWorker",
        options,
        id: create_fragment29.name
      });
    }
    get serviceWorkerVersion() {
      throw new Error("<ServiceWorker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set serviceWorkerVersion(value) {
      throw new Error("<ServiceWorker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ServiceWorker_default = ServiceWorker;

  // svelte/DataClearer.svelte
  var { console: console_12 } = globals;
  function create_fragment30(ctx) {
    const block = {
      c: noop3,
      l: noop3,
      m: noop3,
      p: noop3,
      i: noop3,
      o: noop3,
      d: noop3
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment30.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var indexedDBName = "ToDo";
  function clearUserData() {
    localStorage.clear();
    sessionStorage.clear();
    requestAssetDeletion(privateAssets);
    const DBDeleteRequest = window.indexedDB.deleteDatabase(indexedDBName);
    DBDeleteRequest.onerror = () => {
      console.error("Error deleting database.");
    };
  }
  function instance30($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("DataClearer", slots, []);
    let { live = void 0 } = $$props;
    live;
    onMount(() => {
      clearUserData();
    });
    const writable_props = ["live"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console_12.warn(`<DataClearer> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    $$self.$capture_state = () => ({
      privateAssets,
      requestAssetDeletion,
      indexedDBName,
      clearUserData,
      onMount,
      live
    });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [live];
  }
  var DataClearer = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance30, create_fragment30, safe_not_equal, { live: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "DataClearer",
        options,
        id: create_fragment30.name
      });
    }
    get live() {
      throw new Error("<DataClearer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<DataClearer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var DataClearer_default = DataClearer;

  // svelte/AccountButton.svelte
  var { console: console_13 } = globals;
  var file2 = "svelte/AccountButton.svelte";
  function create_if_block(ctx) {
    let div2;
    let div1;
    let t0;
    let t1;
    let div0;
    let t2;
    let t3;
    let ul;
    let li0;
    let a0;
    let info;
    let t4;
    let t5;
    let li1;
    let a1;
    let settings;
    let t6;
    let span0;
    let t7;
    let li2;
    let button;
    let logout;
    let t8;
    let span1;
    let focusTrap_action;
    let div2_intro;
    let current;
    let mounted;
    let dispose;
    info = new info_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    settings = new settings_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    logout = new log_out_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div2 = element("div");
        div1 = element("div");
        t0 = text(
          /*currentUserEmail*/
          ctx[0]
        );
        t1 = space();
        div0 = element("div");
        t2 = text(
          /*serviceWorkerVersion*/
          ctx[1]
        );
        t3 = space();
        ul = element("ul");
        li0 = element("li");
        a0 = element("a");
        create_component(info.$$.fragment);
        t4 = text("\n            About");
        t5 = space();
        li1 = element("li");
        a1 = element("a");
        create_component(settings.$$.fragment);
        t6 = text("\n            Settings\n            ");
        span0 = element("span");
        t7 = space();
        li2 = element("li");
        button = element("button");
        create_component(logout.$$.fragment);
        t8 = text("\n            Log out\n            ");
        span1 = element("span");
        this.h();
      },
      l: function claim(nodes) {
        div2 = claim_element(nodes, "DIV", { class: true });
        var div2_nodes = children(div2);
        div1 = claim_element(div2_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        t0 = claim_text(
          div1_nodes,
          /*currentUserEmail*/
          ctx[0]
        );
        t1 = claim_space(div1_nodes);
        div0 = claim_element(div1_nodes, "DIV", { title: true, class: true });
        var div0_nodes = children(div0);
        t2 = claim_text(
          div0_nodes,
          /*serviceWorkerVersion*/
          ctx[1]
        );
        div0_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        t3 = claim_space(div2_nodes);
        ul = claim_element(div2_nodes, "UL", {});
        var ul_nodes = children(ul);
        li0 = claim_element(ul_nodes, "LI", {});
        var li0_nodes = children(li0);
        a0 = claim_element(li0_nodes, "A", {
          "data-focusindex": true,
          class: true,
          href: true
        });
        var a0_nodes = children(a0);
        claim_component(info.$$.fragment, a0_nodes);
        t4 = claim_text(a0_nodes, "\n            About");
        a0_nodes.forEach(detach_dev);
        li0_nodes.forEach(detach_dev);
        t5 = claim_space(ul_nodes);
        li1 = claim_element(ul_nodes, "LI", {});
        var li1_nodes = children(li1);
        a1 = claim_element(li1_nodes, "A", {
          "data-focusindex": true,
          class: true,
          href: true
        });
        var a1_nodes = children(a1);
        claim_component(settings.$$.fragment, a1_nodes);
        t6 = claim_text(a1_nodes, "\n            Settings\n            ");
        span0 = claim_element(a1_nodes, "SPAN", { class: true });
        children(span0).forEach(detach_dev);
        a1_nodes.forEach(detach_dev);
        li1_nodes.forEach(detach_dev);
        t7 = claim_space(ul_nodes);
        li2 = claim_element(ul_nodes, "LI", {});
        var li2_nodes = children(li2);
        button = claim_element(li2_nodes, "BUTTON", { "data-focusindex": true, class: true });
        var button_nodes = children(button);
        claim_component(logout.$$.fragment, button_nodes);
        t8 = claim_text(button_nodes, "\n            Log out\n            ");
        span1 = claim_element(button_nodes, "SPAN", { class: true });
        children(span1).forEach(detach_dev);
        button_nodes.forEach(detach_dev);
        li2_nodes.forEach(detach_dev);
        ul_nodes.forEach(detach_dev);
        div2_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div0, "title", "Current service worker version.");
        attr_dev(div0, "class", "text-xs font-normal h-4");
        toggle_class(div0, "skeleton", !/*serviceWorkerVersion*/
        ctx[1]);
        add_location(div0, file2, 120, 8, 3348);
        attr_dev(div1, "class", "px-4 py-2 font-bold border-b border-neutral rounded-none mb-1.5");
        add_location(div1, file2, 118, 6, 3235);
        attr_dev(a0, "data-focusindex", "0");
        attr_dev(a0, "class", "flex gap-2 focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(a0, "href", "/app#about");
        add_location(a0, file2, 131, 10, 3600);
        add_location(li0, file2, 130, 8, 3585);
        attr_dev(span0, "class", "loading loading-dots loading-xs");
        toggle_class(span0, "hidden", !/*isSettingsLoading*/
        ctx[5]);
        add_location(span0, file2, 158, 12, 4405);
        attr_dev(a1, "data-focusindex", "1");
        attr_dev(a1, "class", "flex gap-2 focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(a1, "href", "/users/settings");
        toggle_class(
          a1,
          "pointer-events-none",
          /*disabled*/
          ctx[6]
        );
        add_location(a1, file2, 146, 10, 3991);
        add_location(li1, file2, 145, 8, 3976);
        attr_dev(span1, "class", "loading loading-dots loading-xs");
        toggle_class(span1, "hidden", !/*isLogOutLoading*/
        ctx[4]);
        add_location(span1, file2, 174, 12, 4884);
        attr_dev(button, "data-focusindex", "2");
        attr_dev(button, "class", "flex gap-2 focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        button.disabled = /*disabled*/
        ctx[6];
        add_location(button, file2, 163, 10, 4546);
        add_location(li2, file2, 162, 8, 4531);
        add_location(ul, file2, 129, 6, 3572);
        attr_dev(div2, "class", "menu bg-base-200 border border-neutral rounded-box absolute right-0");
        add_location(div2, file2, 110, 4, 2996);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div2, anchor);
        append_hydration_dev(div2, div1);
        append_hydration_dev(div1, t0);
        append_hydration_dev(div1, t1);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div0, t2);
        append_hydration_dev(div2, t3);
        append_hydration_dev(div2, ul);
        append_hydration_dev(ul, li0);
        append_hydration_dev(li0, a0);
        mount_component(info, a0, null);
        append_hydration_dev(a0, t4);
        append_hydration_dev(ul, t5);
        append_hydration_dev(ul, li1);
        append_hydration_dev(li1, a1);
        mount_component(settings, a1, null);
        append_hydration_dev(a1, t6);
        append_hydration_dev(a1, span0);
        append_hydration_dev(ul, t7);
        append_hydration_dev(ul, li2);
        append_hydration_dev(li2, button);
        mount_component(logout, button, null);
        append_hydration_dev(button, t8);
        append_hydration_dev(button, span1);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(a0, "click", prevent_default(
              /*showAbout*/
              ctx[8]
            ), false, true, false, false),
            listen_dev(a1, "click", prevent_default(
              /*showSettings*/
              ctx[9]
            ), false, true, false, false),
            listen_dev(
              button,
              "click",
              /*logOutUser*/
              ctx[10],
              false,
              false,
              false,
              false
            ),
            action_destroyer(focusTrap_action = focusTrap.call(null, div2, {
              focusFirstElement: (
                /*focusFirstElement*/
                ctx[7]
              ),
              onEscape: (
                /*focusTrap_function*/
                ctx[14]
              )
            }))
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        if (!current || dirty & /*currentUserEmail*/
        1)
          set_data_dev(
            t0,
            /*currentUserEmail*/
            ctx2[0]
          );
        if (!current || dirty & /*serviceWorkerVersion*/
        2)
          set_data_dev(
            t2,
            /*serviceWorkerVersion*/
            ctx2[1]
          );
        if (!current || dirty & /*serviceWorkerVersion*/
        2) {
          toggle_class(div0, "skeleton", !/*serviceWorkerVersion*/
          ctx2[1]);
        }
        if (!current || dirty & /*isSettingsLoading*/
        32) {
          toggle_class(span0, "hidden", !/*isSettingsLoading*/
          ctx2[5]);
        }
        if (!current || dirty & /*disabled*/
        64) {
          toggle_class(
            a1,
            "pointer-events-none",
            /*disabled*/
            ctx2[6]
          );
        }
        if (!current || dirty & /*isLogOutLoading*/
        16) {
          toggle_class(span1, "hidden", !/*isLogOutLoading*/
          ctx2[4]);
        }
        if (!current || dirty & /*disabled*/
        64) {
          prop_dev(
            button,
            "disabled",
            /*disabled*/
            ctx2[6]
          );
        }
        if (focusTrap_action && is_function(focusTrap_action.update) && dirty & /*focusFirstElement, $openedMenuId*/
        136)
          focusTrap_action.update.call(null, {
            focusFirstElement: (
              /*focusFirstElement*/
              ctx2[7]
            ),
            onEscape: (
              /*focusTrap_function*/
              ctx2[14]
            )
          });
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(info.$$.fragment, local);
        transition_in(settings.$$.fragment, local);
        transition_in(logout.$$.fragment, local);
        if (local) {
          if (!div2_intro) {
            add_render_callback(() => {
              div2_intro = create_in_transition(div2, scale, { duration: 100 });
              div2_intro.start();
            });
          }
        }
        current = true;
      },
      o: function outro(local) {
        transition_out(info.$$.fragment, local);
        transition_out(settings.$$.fragment, local);
        transition_out(logout.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div2);
        }
        destroy_component(info);
        destroy_component(settings);
        destroy_component(logout);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block.name,
      type: "if",
      source: "(95:2) {#if $openedMenuId === accountMenuId}",
      ctx
    });
    return block;
  }
  function create_fragment31(ctx) {
    let div;
    let button;
    let userround;
    let t;
    let div_class_value;
    let current;
    let mounted;
    let dispose;
    userround = new user_round_default({ $$inline: true });
    let if_block = (
      /*$openedMenuId*/
      ctx[3] === accountMenuId && create_if_block(ctx)
    );
    const block = {
      c: function create7() {
        div = element("div");
        button = element("button");
        create_component(userround.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        button = claim_element(div_nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button_nodes = children(button);
        claim_component(userround.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        t = claim_space(div_nodes);
        if (if_block)
          if_block.l(div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button, "class", "my-1 btn btn-circle btn-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button, "aria-label", "Account Menu.");
        attr_dev(button, "title", "Click to open account menu.");
        add_location(button, file2, 92, 2, 2465);
        attr_dev(div, "class", div_class_value = /*menuClass*/
        ctx[2] + " relative");
        add_location(div, file2, 91, 0, 2428);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, button);
        mount_component(userround, button, null);
        append_hydration_dev(div, t);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "click",
              /*click_handler*/
              ctx[12],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              "keydown",
              /*keydown_handler*/
              ctx[13],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*$openedMenuId*/
          ctx2[3] === accountMenuId
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*$openedMenuId*/
            8) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        if (!current || dirty & /*menuClass*/
        4 && div_class_value !== (div_class_value = /*menuClass*/
        ctx2[2] + " relative")) {
          attr_dev(div, "class", div_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(userround.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(userround.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        destroy_component(userround);
        if (if_block)
          if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment31.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var accountMenuId = "account-menu-id";
  function instance31($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $toast;
    let $urlHash;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(3, $openedMenuId = $$value));
    validate_store(toast, "toast");
    component_subscribe($$self, toast, ($$value) => $$invalidate(15, $toast = $$value));
    validate_store(urlHash, "urlHash");
    component_subscribe($$self, urlHash, ($$value) => $$invalidate(16, $urlHash = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("AccountButton", slots, []);
    let { currentUserEmail } = $$props;
    let { serviceWorkerVersion } = $$props;
    let { isClientStateRestored } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let isLogOutLoading = false;
    let isSettingsLoading = false;
    let disabled = false;
    let focusFirstElement = false;
    function showAbout() {
      set_store_value(urlHash, $urlHash = "about", $urlHash);
      history.pushState({}, "", `/app#${$urlHash}`);
      window.scrollTo(0, 0);
    }
    async function showSettings() {
      $$invalidate(6, disabled = true);
      $$invalidate(5, isSettingsLoading = true);
      showTopBar();
      const isConnected = await useIsConnected({});
      if (!isConnected) {
        set_store_value(
          toast,
          $toast = {
            show: true,
            kind: "error",
            title: "Whoops, can't connect to server...",
            msg: "You must be connected to view settings. Please check your connection or try refreshing."
          },
          $toast
        );
        hideTopBar();
        $$invalidate(5, isSettingsLoading = false);
        $$invalidate(6, disabled = false);
        return;
      }
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
      window.location.href = "/users/settings";
    }
    async function logOutUser() {
      $$invalidate(6, disabled = true);
      $$invalidate(4, isLogOutLoading = true);
      showTopBar();
      const isConnected = await useIsConnected({});
      if (!isConnected) {
        set_store_value(
          toast,
          $toast = {
            show: true,
            kind: "error",
            title: "Whoops, can't connect to server...",
            msg: "You must be connected to logout. Please check your connection or try refreshing."
          },
          $toast
        );
        hideTopBar();
        $$invalidate(4, isLogOutLoading = false);
        $$invalidate(6, disabled = false);
        return;
      }
      $$invalidate(11, isClientStateRestored = false);
      clearUserData();
      const logOutLink = document.getElementById("log-out-link");
      try {
        logOutLink.click();
      } catch (error) {
        console.error(error);
        alert("Error logging out. Please try again.");
      }
    }
    $$self.$$.on_mount.push(function() {
      if (currentUserEmail === void 0 && !("currentUserEmail" in $$props || $$self.$$.bound[$$self.$$.props["currentUserEmail"]])) {
        console_13.warn("<AccountButton> was created without expected prop 'currentUserEmail'");
      }
      if (serviceWorkerVersion === void 0 && !("serviceWorkerVersion" in $$props || $$self.$$.bound[$$self.$$.props["serviceWorkerVersion"]])) {
        console_13.warn("<AccountButton> was created without expected prop 'serviceWorkerVersion'");
      }
      if (isClientStateRestored === void 0 && !("isClientStateRestored" in $$props || $$self.$$.bound[$$self.$$.props["isClientStateRestored"]])) {
        console_13.warn("<AccountButton> was created without expected prop 'isClientStateRestored'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console_13.warn("<AccountButton> was created without expected prop 'menuClass'");
      }
    });
    const writable_props = [
      "currentUserEmail",
      "serviceWorkerVersion",
      "isClientStateRestored",
      "menuClass"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console_13.warn(`<AccountButton> was created with unknown prop '${key}'`);
    });
    const click_handler = () => set_store_value(openedMenuId, $openedMenuId = $openedMenuId === accountMenuId ? "" : accountMenuId, $openedMenuId);
    const keydown_handler = (event) => {
      if (event.key === "Enter" || event.key === " ") {
        $$invalidate(7, focusFirstElement = true);
      }
    };
    const focusTrap_function = () => set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    $$self.$$set = ($$props2) => {
      if ("currentUserEmail" in $$props2)
        $$invalidate(0, currentUserEmail = $$props2.currentUserEmail);
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(1, serviceWorkerVersion = $$props2.serviceWorkerVersion);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(11, isClientStateRestored = $$props2.isClientStateRestored);
      if ("menuClass" in $$props2)
        $$invalidate(2, menuClass2 = $$props2.menuClass);
    };
    $$self.$capture_state = () => ({
      scale,
      Info: info_default,
      LogOut: log_out_default,
      Settings: settings_default,
      UserRound: user_round_default,
      focusTrap,
      useIsConnected,
      showTopBar,
      hideTopBar,
      openedMenuId,
      urlHash,
      toast,
      clearUserData,
      currentUserEmail,
      serviceWorkerVersion,
      isClientStateRestored,
      menuClass: menuClass2,
      accountMenuId,
      isLogOutLoading,
      isSettingsLoading,
      disabled,
      focusFirstElement,
      showAbout,
      showSettings,
      logOutUser,
      $openedMenuId,
      $toast,
      $urlHash
    });
    $$self.$inject_state = ($$props2) => {
      if ("currentUserEmail" in $$props2)
        $$invalidate(0, currentUserEmail = $$props2.currentUserEmail);
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(1, serviceWorkerVersion = $$props2.serviceWorkerVersion);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(11, isClientStateRestored = $$props2.isClientStateRestored);
      if ("menuClass" in $$props2)
        $$invalidate(2, menuClass2 = $$props2.menuClass);
      if ("isLogOutLoading" in $$props2)
        $$invalidate(4, isLogOutLoading = $$props2.isLogOutLoading);
      if ("isSettingsLoading" in $$props2)
        $$invalidate(5, isSettingsLoading = $$props2.isSettingsLoading);
      if ("disabled" in $$props2)
        $$invalidate(6, disabled = $$props2.disabled);
      if ("focusFirstElement" in $$props2)
        $$invalidate(7, focusFirstElement = $$props2.focusFirstElement);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*$openedMenuId*/
      8) {
        $:
          if ($openedMenuId !== accountMenuId) {
            $$invalidate(7, focusFirstElement = false);
          }
      }
    };
    return [
      currentUserEmail,
      serviceWorkerVersion,
      menuClass2,
      $openedMenuId,
      isLogOutLoading,
      isSettingsLoading,
      disabled,
      focusFirstElement,
      showAbout,
      showSettings,
      logOutUser,
      isClientStateRestored,
      click_handler,
      keydown_handler,
      focusTrap_function
    ];
  }
  var AccountButton = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance31, create_fragment31, safe_not_equal, {
        currentUserEmail: 0,
        serviceWorkerVersion: 1,
        isClientStateRestored: 11,
        menuClass: 2
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "AccountButton",
        options,
        id: create_fragment31.name
      });
    }
    get currentUserEmail() {
      throw new Error("<AccountButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set currentUserEmail(value) {
      throw new Error("<AccountButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get serviceWorkerVersion() {
      throw new Error("<AccountButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set serviceWorkerVersion(value) {
      throw new Error("<AccountButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isClientStateRestored() {
      throw new Error("<AccountButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isClientStateRestored(value) {
      throw new Error("<AccountButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<AccountButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<AccountButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var AccountButton_default = AccountButton;

  // svelte/App.svelte
  var App_exports = {};
  __export(App_exports, {
    default: () => App_default
  });

  // svelte/AppInfo.svelte
  var AppInfo_exports = {};
  __export(AppInfo_exports, {
    default: () => AppInfo_default
  });

  // node_modules/@fortawesome/free-brands-svg-icons/index.mjs
  var faGithub = {
    prefix: "fab",
    iconName: "github",
    icon: [496, 512, [], "f09b", "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"]
  };

  // node_modules/svelte-fa/dist/utils.js
  function setCustomFontSize(element3, size) {
    if (size && size !== "lg" && size !== "sm" && size !== "xs") {
      element3.style.fontSize = size.replace("x", "em");
    } else {
      element3.style.fontSize = "";
    }
  }
  function getTransform(scale2, translateX, translateY, rotate, flip2, translateTimes = 1, translateUnit = "", rotateUnit = "") {
    let flipX = 1;
    let flipY = 1;
    if (flip2) {
      if (flip2 == "horizontal") {
        flipX = -1;
      } else if (flip2 == "vertical") {
        flipY = -1;
      } else {
        flipX = flipY = -1;
      }
    }
    if (typeof scale2 === "string") {
      scale2 = parseFloat(scale2);
    }
    if (typeof translateX === "string") {
      translateX = parseFloat(translateX);
    }
    if (typeof translateY === "string") {
      translateY = parseFloat(translateY);
    }
    const x = `${translateX * translateTimes}${translateUnit}`;
    const y = `${translateY * translateTimes}${translateUnit}`;
    let output = `translate(${x},${y}) scale(${flipX * scale2},${flipY * scale2})`;
    if (rotate) {
      output += ` rotate(${rotate}${rotateUnit})`;
    }
    return output;
  }

  // node_modules/svelte-fa/dist/fa.svelte
  var file3 = "node_modules/svelte-fa/dist/fa.svelte";
  function add_css(target) {
    append_styles(target, "svelte-bvo74f", ".svelte-fa-base{height:1em;overflow:visible;transform-origin:center;vertical-align:-0.125em}.svelte-fa-fw{text-align:center;width:1.25em}.svelte-fa-pull-left.svelte-bvo74f{float:left}.svelte-fa-pull-right.svelte-bvo74f{float:right}.svelte-fa-size-lg.svelte-bvo74f{font-size:1.33333em;line-height:0.75em;vertical-align:-0.225em}.svelte-fa-size-sm.svelte-bvo74f{font-size:0.875em}.svelte-fa-size-xs.svelte-bvo74f{font-size:0.75em}.spin.svelte-bvo74f{animation:svelte-bvo74f-spin 2s 0s infinite linear}.pulse.svelte-bvo74f{animation:svelte-bvo74f-spin 1s infinite steps(8)}@keyframes svelte-bvo74f-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmEuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQWlGVSxlQUFpQixDQUN2QixNQUFNLENBQUUsR0FBRyxDQUNYLFFBQVEsQ0FBRSxPQUFPLENBQ2pCLGdCQUFnQixDQUFFLE1BQU0sQ0FDeEIsY0FBYyxDQUFFLFFBQ2xCLENBRVEsYUFBZSxDQUNyQixVQUFVLENBQUUsTUFBTSxDQUNsQixLQUFLLENBQUUsTUFDVCxDQUVBLGtDQUFxQixDQUNuQixLQUFLLENBQUUsSUFDVCxDQUVBLG1DQUFzQixDQUNwQixLQUFLLENBQUUsS0FDVCxDQUVBLGdDQUFtQixDQUNqQixTQUFTLENBQUUsU0FBUyxDQUNwQixXQUFXLENBQUUsTUFBTSxDQUNuQixjQUFjLENBQUUsUUFDbEIsQ0FFQSxnQ0FBbUIsQ0FDakIsU0FBUyxDQUFFLE9BQ2IsQ0FFQSxnQ0FBbUIsQ0FDakIsU0FBUyxDQUFFLE1BQ2IsQ0FFQSxtQkFBTSxDQUNKLFNBQVMsQ0FBRSxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQ2pDLENBRUEsb0JBQU8sQ0FDTCxTQUFTLENBQUUsa0JBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUNyQyxDQUVBLFdBQVcsa0JBQUssQ0FDZCxFQUFHLENBQ0QsU0FBUyxDQUFFLE9BQU8sSUFBSSxDQUN4QixDQUNBLElBQUssQ0FDSCxTQUFTLENBQUUsT0FBTyxNQUFNLENBQzFCLENBQ0YiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiZmEuc3ZlbHRlIl19 */");
  }
  function create_if_block2(ctx) {
    let svg;
    let g1;
    let g0;
    let g1_transform_value;
    let g1_transform_origin_value;
    let svg_class_value;
    let svg_viewBox_value;
    function select_block_type(ctx2, dirty) {
      if (typeof /*i*/
      ctx2[16][4] == "string")
        return create_if_block_1;
      return create_else_block;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
      c: function create7() {
        svg = svg_element("svg");
        g1 = svg_element("g");
        g0 = svg_element("g");
        if_block.c();
        this.h();
      },
      l: function claim(nodes) {
        svg = claim_svg_element(nodes, "svg", {
          id: true,
          class: true,
          style: true,
          viewBox: true,
          "aria-hidden": true,
          role: true,
          xmlns: true
        });
        var svg_nodes = children(svg);
        g1 = claim_svg_element(svg_nodes, "g", {
          transform: true,
          "transform-origin": true
        });
        var g1_nodes = children(g1);
        g0 = claim_svg_element(g1_nodes, "g", { transform: true });
        var g0_nodes = children(g0);
        if_block.l(g0_nodes);
        g0_nodes.forEach(detach_dev);
        g1_nodes.forEach(detach_dev);
        svg_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(
          g0,
          "transform",
          /*transform*/
          ctx[15]
        );
        add_location(g0, file3, 53, 6, 1590);
        attr_dev(g1, "transform", g1_transform_value = "translate(" + /*i*/
        ctx[16][0] / 2 + " " + /*i*/
        ctx[16][1] / 2 + ")");
        attr_dev(g1, "transform-origin", g1_transform_origin_value = /*i*/
        ctx[16][0] / 4 + " 0");
        add_location(g1, file3, 52, 4, 1503);
        attr_dev(
          svg,
          "id",
          /*id*/
          ctx[1]
        );
        attr_dev(svg, "class", svg_class_value = "svelte-fa svelte-fa-base " + /*clazz*/
        ctx[0] + " svelte-bvo74f");
        attr_dev(
          svg,
          "style",
          /*style*/
          ctx[2]
        );
        attr_dev(svg, "viewBox", svg_viewBox_value = "0 0 " + /*i*/
        ctx[16][0] + " " + /*i*/
        ctx[16][1]);
        attr_dev(svg, "aria-hidden", "true");
        attr_dev(svg, "role", "img");
        attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
        toggle_class(
          svg,
          "pulse",
          /*pulse*/
          ctx[8]
        );
        toggle_class(
          svg,
          "svelte-fa-size-lg",
          /*size*/
          ctx[3] === "lg"
        );
        toggle_class(
          svg,
          "svelte-fa-size-sm",
          /*size*/
          ctx[3] === "sm"
        );
        toggle_class(
          svg,
          "svelte-fa-size-xs",
          /*size*/
          ctx[3] === "xs"
        );
        toggle_class(
          svg,
          "svelte-fa-fw",
          /*fw*/
          ctx[5]
        );
        toggle_class(
          svg,
          "svelte-fa-pull-left",
          /*pull*/
          ctx[6] === "left"
        );
        toggle_class(
          svg,
          "svelte-fa-pull-right",
          /*pull*/
          ctx[6] === "right"
        );
        toggle_class(
          svg,
          "spin",
          /*spin*/
          ctx[7]
        );
        add_location(svg, file3, 33, 2, 972);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, svg, anchor);
        append_hydration_dev(svg, g1);
        append_hydration_dev(g1, g0);
        if_block.m(g0, null);
        ctx[23](svg);
      },
      p: function update2(ctx2, dirty) {
        if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx2);
          if (if_block) {
            if_block.c();
            if_block.m(g0, null);
          }
        }
        if (dirty & /*transform*/
        32768) {
          attr_dev(
            g0,
            "transform",
            /*transform*/
            ctx2[15]
          );
        }
        if (dirty & /*i*/
        65536 && g1_transform_value !== (g1_transform_value = "translate(" + /*i*/
        ctx2[16][0] / 2 + " " + /*i*/
        ctx2[16][1] / 2 + ")")) {
          attr_dev(g1, "transform", g1_transform_value);
        }
        if (dirty & /*i*/
        65536 && g1_transform_origin_value !== (g1_transform_origin_value = /*i*/
        ctx2[16][0] / 4 + " 0")) {
          attr_dev(g1, "transform-origin", g1_transform_origin_value);
        }
        if (dirty & /*id*/
        2) {
          attr_dev(
            svg,
            "id",
            /*id*/
            ctx2[1]
          );
        }
        if (dirty & /*clazz*/
        1 && svg_class_value !== (svg_class_value = "svelte-fa svelte-fa-base " + /*clazz*/
        ctx2[0] + " svelte-bvo74f")) {
          attr_dev(svg, "class", svg_class_value);
        }
        if (dirty & /*style*/
        4) {
          attr_dev(
            svg,
            "style",
            /*style*/
            ctx2[2]
          );
        }
        if (dirty & /*i*/
        65536 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*i*/
        ctx2[16][0] + " " + /*i*/
        ctx2[16][1])) {
          attr_dev(svg, "viewBox", svg_viewBox_value);
        }
        if (dirty & /*clazz, pulse*/
        257) {
          toggle_class(
            svg,
            "pulse",
            /*pulse*/
            ctx2[8]
          );
        }
        if (dirty & /*clazz, size*/
        9) {
          toggle_class(
            svg,
            "svelte-fa-size-lg",
            /*size*/
            ctx2[3] === "lg"
          );
        }
        if (dirty & /*clazz, size*/
        9) {
          toggle_class(
            svg,
            "svelte-fa-size-sm",
            /*size*/
            ctx2[3] === "sm"
          );
        }
        if (dirty & /*clazz, size*/
        9) {
          toggle_class(
            svg,
            "svelte-fa-size-xs",
            /*size*/
            ctx2[3] === "xs"
          );
        }
        if (dirty & /*clazz, fw*/
        33) {
          toggle_class(
            svg,
            "svelte-fa-fw",
            /*fw*/
            ctx2[5]
          );
        }
        if (dirty & /*clazz, pull*/
        65) {
          toggle_class(
            svg,
            "svelte-fa-pull-left",
            /*pull*/
            ctx2[6] === "left"
          );
        }
        if (dirty & /*clazz, pull*/
        65) {
          toggle_class(
            svg,
            "svelte-fa-pull-right",
            /*pull*/
            ctx2[6] === "right"
          );
        }
        if (dirty & /*clazz, spin*/
        129) {
          toggle_class(
            svg,
            "spin",
            /*spin*/
            ctx2[7]
          );
        }
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(svg);
        }
        if_block.d();
        ctx[23](null);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block2.name,
      type: "if",
      source: "(32:0) {#if i[4]}",
      ctx
    });
    return block;
  }
  function create_else_block(ctx) {
    let path0;
    let path0_d_value;
    let path0_fill_value;
    let path0_fill_opacity_value;
    let path0_transform_value;
    let path1;
    let path1_d_value;
    let path1_fill_value;
    let path1_fill_opacity_value;
    let path1_transform_value;
    const block = {
      c: function create7() {
        path0 = svg_element("path");
        path1 = svg_element("path");
        this.h();
      },
      l: function claim(nodes) {
        path0 = claim_svg_element(nodes, "path", {
          d: true,
          fill: true,
          "fill-opacity": true,
          transform: true
        });
        children(path0).forEach(detach_dev);
        path1 = claim_svg_element(nodes, "path", {
          d: true,
          fill: true,
          "fill-opacity": true,
          transform: true
        });
        children(path1).forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(path0, "d", path0_d_value = /*i*/
        ctx[16][4][0]);
        attr_dev(path0, "fill", path0_fill_value = /*secondaryColor*/
        ctx[10] || /*color*/
        ctx[4] || "currentColor");
        attr_dev(path0, "fill-opacity", path0_fill_opacity_value = /*swapOpacity*/
        ctx[13] != false ? (
          /*primaryOpacity*/
          ctx[11]
        ) : (
          /*secondaryOpacity*/
          ctx[12]
        ));
        attr_dev(path0, "transform", path0_transform_value = "translate(" + /*i*/
        ctx[16][0] / -2 + " " + /*i*/
        ctx[16][1] / -2 + ")");
        add_location(path0, file3, 62, 10, 1871);
        attr_dev(path1, "d", path1_d_value = /*i*/
        ctx[16][4][1]);
        attr_dev(path1, "fill", path1_fill_value = /*primaryColor*/
        ctx[9] || /*color*/
        ctx[4] || "currentColor");
        attr_dev(path1, "fill-opacity", path1_fill_opacity_value = /*swapOpacity*/
        ctx[13] != false ? (
          /*secondaryOpacity*/
          ctx[12]
        ) : (
          /*primaryOpacity*/
          ctx[11]
        ));
        attr_dev(path1, "transform", path1_transform_value = "translate(" + /*i*/
        ctx[16][0] / -2 + " " + /*i*/
        ctx[16][1] / -2 + ")");
        add_location(path1, file3, 68, 10, 2128);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, path0, anchor);
        insert_hydration_dev(target, path1, anchor);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*i*/
        65536 && path0_d_value !== (path0_d_value = /*i*/
        ctx2[16][4][0])) {
          attr_dev(path0, "d", path0_d_value);
        }
        if (dirty & /*secondaryColor, color*/
        1040 && path0_fill_value !== (path0_fill_value = /*secondaryColor*/
        ctx2[10] || /*color*/
        ctx2[4] || "currentColor")) {
          attr_dev(path0, "fill", path0_fill_value);
        }
        if (dirty & /*swapOpacity, primaryOpacity, secondaryOpacity*/
        14336 && path0_fill_opacity_value !== (path0_fill_opacity_value = /*swapOpacity*/
        ctx2[13] != false ? (
          /*primaryOpacity*/
          ctx2[11]
        ) : (
          /*secondaryOpacity*/
          ctx2[12]
        ))) {
          attr_dev(path0, "fill-opacity", path0_fill_opacity_value);
        }
        if (dirty & /*i*/
        65536 && path0_transform_value !== (path0_transform_value = "translate(" + /*i*/
        ctx2[16][0] / -2 + " " + /*i*/
        ctx2[16][1] / -2 + ")")) {
          attr_dev(path0, "transform", path0_transform_value);
        }
        if (dirty & /*i*/
        65536 && path1_d_value !== (path1_d_value = /*i*/
        ctx2[16][4][1])) {
          attr_dev(path1, "d", path1_d_value);
        }
        if (dirty & /*primaryColor, color*/
        528 && path1_fill_value !== (path1_fill_value = /*primaryColor*/
        ctx2[9] || /*color*/
        ctx2[4] || "currentColor")) {
          attr_dev(path1, "fill", path1_fill_value);
        }
        if (dirty & /*swapOpacity, secondaryOpacity, primaryOpacity*/
        14336 && path1_fill_opacity_value !== (path1_fill_opacity_value = /*swapOpacity*/
        ctx2[13] != false ? (
          /*secondaryOpacity*/
          ctx2[12]
        ) : (
          /*primaryOpacity*/
          ctx2[11]
        ))) {
          attr_dev(path1, "fill-opacity", path1_fill_opacity_value);
        }
        if (dirty & /*i*/
        65536 && path1_transform_value !== (path1_transform_value = "translate(" + /*i*/
        ctx2[16][0] / -2 + " " + /*i*/
        ctx2[16][1] / -2 + ")")) {
          attr_dev(path1, "transform", path1_transform_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(path0);
          detach_dev(path1);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block.name,
      type: "else",
      source: "(61:8) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block_1(ctx) {
    let path;
    let path_d_value;
    let path_fill_value;
    let path_transform_value;
    const block = {
      c: function create7() {
        path = svg_element("path");
        this.h();
      },
      l: function claim(nodes) {
        path = claim_svg_element(nodes, "path", { d: true, fill: true, transform: true });
        children(path).forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(path, "d", path_d_value = /*i*/
        ctx[16][4]);
        attr_dev(path, "fill", path_fill_value = /*color*/
        ctx[4] || /*primaryColor*/
        ctx[9] || "currentColor");
        attr_dev(path, "transform", path_transform_value = "translate(" + /*i*/
        ctx[16][0] / -2 + " " + /*i*/
        ctx[16][1] / -2 + ")");
        add_location(path, file3, 55, 10, 1654);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, path, anchor);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*i*/
        65536 && path_d_value !== (path_d_value = /*i*/
        ctx2[16][4])) {
          attr_dev(path, "d", path_d_value);
        }
        if (dirty & /*color, primaryColor*/
        528 && path_fill_value !== (path_fill_value = /*color*/
        ctx2[4] || /*primaryColor*/
        ctx2[9] || "currentColor")) {
          attr_dev(path, "fill", path_fill_value);
        }
        if (dirty & /*i*/
        65536 && path_transform_value !== (path_transform_value = "translate(" + /*i*/
        ctx2[16][0] / -2 + " " + /*i*/
        ctx2[16][1] / -2 + ")")) {
          attr_dev(path, "transform", path_transform_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(path);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_1.name,
      type: "if",
      source: '(55:8) {#if typeof i[4] == \\"string\\"}',
      ctx
    });
    return block;
  }
  function create_fragment32(ctx) {
    let if_block_anchor;
    let if_block = (
      /*i*/
      ctx[16][4] && create_if_block2(ctx)
    );
    const block = {
      c: function create7() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*i*/
          ctx2[16][4]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block2(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment32.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance32($$self, $$props, $$invalidate) {
    let i;
    let transform;
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Fa", slots, []);
    let { class: clazz = void 0 } = $$props;
    let { id: id2 = void 0 } = $$props;
    let { style = void 0 } = $$props;
    let { icon } = $$props;
    let { size = void 0 } = $$props;
    let { color = void 0 } = $$props;
    let { fw = false } = $$props;
    let { pull = void 0 } = $$props;
    let { scale: scale2 = 1 } = $$props;
    let { translateX = 0 } = $$props;
    let { translateY = 0 } = $$props;
    let { rotate = void 0 } = $$props;
    let { flip: flip2 = void 0 } = $$props;
    let { spin = false } = $$props;
    let { pulse = false } = $$props;
    let { primaryColor = "" } = $$props;
    let { secondaryColor = "" } = $$props;
    let { primaryOpacity = 1 } = $$props;
    let { secondaryOpacity = 0.4 } = $$props;
    let { swapOpacity = false } = $$props;
    let svgElement;
    $$self.$$.on_mount.push(function() {
      if (icon === void 0 && !("icon" in $$props || $$self.$$.bound[$$self.$$.props["icon"]])) {
        console.warn("<Fa> was created without expected prop 'icon'");
      }
    });
    const writable_props = [
      "class",
      "id",
      "style",
      "icon",
      "size",
      "color",
      "fw",
      "pull",
      "scale",
      "translateX",
      "translateY",
      "rotate",
      "flip",
      "spin",
      "pulse",
      "primaryColor",
      "secondaryColor",
      "primaryOpacity",
      "secondaryOpacity",
      "swapOpacity"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Fa> was created with unknown prop '${key}'`);
    });
    function svg_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        svgElement = $$value;
        $$invalidate(14, svgElement);
      });
    }
    $$self.$$set = ($$props2) => {
      if ("class" in $$props2)
        $$invalidate(0, clazz = $$props2.class);
      if ("id" in $$props2)
        $$invalidate(1, id2 = $$props2.id);
      if ("style" in $$props2)
        $$invalidate(2, style = $$props2.style);
      if ("icon" in $$props2)
        $$invalidate(17, icon = $$props2.icon);
      if ("size" in $$props2)
        $$invalidate(3, size = $$props2.size);
      if ("color" in $$props2)
        $$invalidate(4, color = $$props2.color);
      if ("fw" in $$props2)
        $$invalidate(5, fw = $$props2.fw);
      if ("pull" in $$props2)
        $$invalidate(6, pull = $$props2.pull);
      if ("scale" in $$props2)
        $$invalidate(18, scale2 = $$props2.scale);
      if ("translateX" in $$props2)
        $$invalidate(19, translateX = $$props2.translateX);
      if ("translateY" in $$props2)
        $$invalidate(20, translateY = $$props2.translateY);
      if ("rotate" in $$props2)
        $$invalidate(21, rotate = $$props2.rotate);
      if ("flip" in $$props2)
        $$invalidate(22, flip2 = $$props2.flip);
      if ("spin" in $$props2)
        $$invalidate(7, spin = $$props2.spin);
      if ("pulse" in $$props2)
        $$invalidate(8, pulse = $$props2.pulse);
      if ("primaryColor" in $$props2)
        $$invalidate(9, primaryColor = $$props2.primaryColor);
      if ("secondaryColor" in $$props2)
        $$invalidate(10, secondaryColor = $$props2.secondaryColor);
      if ("primaryOpacity" in $$props2)
        $$invalidate(11, primaryOpacity = $$props2.primaryOpacity);
      if ("secondaryOpacity" in $$props2)
        $$invalidate(12, secondaryOpacity = $$props2.secondaryOpacity);
      if ("swapOpacity" in $$props2)
        $$invalidate(13, swapOpacity = $$props2.swapOpacity);
    };
    $$self.$capture_state = () => ({
      getTransform,
      setCustomFontSize,
      clazz,
      id: id2,
      style,
      icon,
      size,
      color,
      fw,
      pull,
      scale: scale2,
      translateX,
      translateY,
      rotate,
      flip: flip2,
      spin,
      pulse,
      primaryColor,
      secondaryColor,
      primaryOpacity,
      secondaryOpacity,
      swapOpacity,
      svgElement,
      transform,
      i
    });
    $$self.$inject_state = ($$props2) => {
      if ("clazz" in $$props2)
        $$invalidate(0, clazz = $$props2.clazz);
      if ("id" in $$props2)
        $$invalidate(1, id2 = $$props2.id);
      if ("style" in $$props2)
        $$invalidate(2, style = $$props2.style);
      if ("icon" in $$props2)
        $$invalidate(17, icon = $$props2.icon);
      if ("size" in $$props2)
        $$invalidate(3, size = $$props2.size);
      if ("color" in $$props2)
        $$invalidate(4, color = $$props2.color);
      if ("fw" in $$props2)
        $$invalidate(5, fw = $$props2.fw);
      if ("pull" in $$props2)
        $$invalidate(6, pull = $$props2.pull);
      if ("scale" in $$props2)
        $$invalidate(18, scale2 = $$props2.scale);
      if ("translateX" in $$props2)
        $$invalidate(19, translateX = $$props2.translateX);
      if ("translateY" in $$props2)
        $$invalidate(20, translateY = $$props2.translateY);
      if ("rotate" in $$props2)
        $$invalidate(21, rotate = $$props2.rotate);
      if ("flip" in $$props2)
        $$invalidate(22, flip2 = $$props2.flip);
      if ("spin" in $$props2)
        $$invalidate(7, spin = $$props2.spin);
      if ("pulse" in $$props2)
        $$invalidate(8, pulse = $$props2.pulse);
      if ("primaryColor" in $$props2)
        $$invalidate(9, primaryColor = $$props2.primaryColor);
      if ("secondaryColor" in $$props2)
        $$invalidate(10, secondaryColor = $$props2.secondaryColor);
      if ("primaryOpacity" in $$props2)
        $$invalidate(11, primaryOpacity = $$props2.primaryOpacity);
      if ("secondaryOpacity" in $$props2)
        $$invalidate(12, secondaryOpacity = $$props2.secondaryOpacity);
      if ("swapOpacity" in $$props2)
        $$invalidate(13, swapOpacity = $$props2.swapOpacity);
      if ("svgElement" in $$props2)
        $$invalidate(14, svgElement = $$props2.svgElement);
      if ("transform" in $$props2)
        $$invalidate(15, transform = $$props2.transform);
      if ("i" in $$props2)
        $$invalidate(16, i = $$props2.i);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*svgElement, size*/
      16392) {
        $:
          svgElement && size && setCustomFontSize(svgElement, size);
      }
      if ($$self.$$.dirty & /*icon*/
      131072) {
        $:
          $$invalidate(16, i = icon && icon.icon || [0, 0, "", [], ""]);
      }
      if ($$self.$$.dirty & /*scale, translateX, translateY, rotate, flip*/
      8126464) {
        $:
          $$invalidate(15, transform = getTransform(scale2, translateX, translateY, rotate, flip2, 512));
      }
    };
    return [
      clazz,
      id2,
      style,
      size,
      color,
      fw,
      pull,
      spin,
      pulse,
      primaryColor,
      secondaryColor,
      primaryOpacity,
      secondaryOpacity,
      swapOpacity,
      svgElement,
      transform,
      i,
      icon,
      scale2,
      translateX,
      translateY,
      rotate,
      flip2,
      svg_binding
    ];
  }
  var Fa = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(
        this,
        options,
        instance32,
        create_fragment32,
        safe_not_equal,
        {
          class: 0,
          id: 1,
          style: 2,
          icon: 17,
          size: 3,
          color: 4,
          fw: 5,
          pull: 6,
          scale: 18,
          translateX: 19,
          translateY: 20,
          rotate: 21,
          flip: 22,
          spin: 7,
          pulse: 8,
          primaryColor: 9,
          secondaryColor: 10,
          primaryOpacity: 11,
          secondaryOpacity: 12,
          swapOpacity: 13
        },
        add_css
      );
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Fa",
        options,
        id: create_fragment32.name
      });
    }
    get class() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set class(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get id() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set id(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get style() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set style(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get icon() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set icon(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get size() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set size(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get color() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set color(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get fw() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set fw(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get pull() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set pull(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get scale() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set scale(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get translateX() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set translateX(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get translateY() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set translateY(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get rotate() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set rotate(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get flip() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set flip(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get spin() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set spin(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get pulse() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set pulse(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get primaryColor() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set primaryColor(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get secondaryColor() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set secondaryColor(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get primaryOpacity() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set primaryOpacity(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get secondaryOpacity() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set secondaryOpacity(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get swapOpacity() {
      throw new Error("<Fa>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set swapOpacity(value) {
      throw new Error("<Fa>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var fa_default = Fa;

  // node_modules/svelte-fa/dist/index.js
  var dist_default = fa_default;

  // svelte/Link.svelte
  var Link_exports = {};
  __export(Link_exports, {
    default: () => Link_default
  });
  var file4 = "svelte/Link.svelte";
  function create_fragment33(ctx) {
    let a;
    let a_target_value;
    let a_rel_value;
    let current;
    const default_slot_template = (
      /*#slots*/
      ctx[3].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[2],
      null
    );
    const block = {
      c: function create7() {
        a = element("a");
        if (default_slot)
          default_slot.c();
        this.h();
      },
      l: function claim(nodes) {
        a = claim_element(nodes, "A", {
          href: true,
          target: true,
          rel: true,
          class: true
        });
        var a_nodes = children(a);
        if (default_slot)
          default_slot.l(a_nodes);
        a_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(
          a,
          "href",
          /*href*/
          ctx[0]
        );
        attr_dev(a, "target", a_target_value = /*external*/
        ctx[1] ? "_blank" : void 0);
        attr_dev(a, "rel", a_rel_value = /*external*/
        ctx[1] ? "noopener noreferrer" : void 0);
        attr_dev(a, "class", "font-semibold underline underline-offset-4 hover:no-underline rounded focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(a, file4, 5, 0, 75);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, a, anchor);
        if (default_slot) {
          default_slot.m(a, null);
        }
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[2],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[2]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[2],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*href*/
        1) {
          attr_dev(
            a,
            "href",
            /*href*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*external*/
        2 && a_target_value !== (a_target_value = /*external*/
        ctx2[1] ? "_blank" : void 0)) {
          attr_dev(a, "target", a_target_value);
        }
        if (!current || dirty & /*external*/
        2 && a_rel_value !== (a_rel_value = /*external*/
        ctx2[1] ? "noopener noreferrer" : void 0)) {
          attr_dev(a, "rel", a_rel_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(default_slot, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(a);
        }
        if (default_slot)
          default_slot.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment33.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance33($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Link", slots, ["default"]);
    let { href } = $$props;
    let { external = false } = $$props;
    $$self.$$.on_mount.push(function() {
      if (href === void 0 && !("href" in $$props || $$self.$$.bound[$$self.$$.props["href"]])) {
        console.warn("<Link> was created without expected prop 'href'");
      }
    });
    const writable_props = ["href", "external"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Link> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("href" in $$props2)
        $$invalidate(0, href = $$props2.href);
      if ("external" in $$props2)
        $$invalidate(1, external = $$props2.external);
      if ("$$scope" in $$props2)
        $$invalidate(2, $$scope = $$props2.$$scope);
    };
    $$self.$capture_state = () => ({ href, external });
    $$self.$inject_state = ($$props2) => {
      if ("href" in $$props2)
        $$invalidate(0, href = $$props2.href);
      if ("external" in $$props2)
        $$invalidate(1, external = $$props2.external);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [href, external, $$scope, slots];
  }
  var Link = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance33, create_fragment33, safe_not_equal, { href: 0, external: 1 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Link",
        options,
        id: create_fragment33.name
      });
    }
    get href() {
      throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set href(value) {
      throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get external() {
      throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set external(value) {
      throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var Link_default = Link;

  // svelte/AppInfo.svelte
  var file5 = "svelte/AppInfo.svelte";
  function create_default_slot_18(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Phoenix");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Phoenix");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_18.name,
      type: "slot",
      source: '(14:4) <Link href=\\"https://www.phoenixframework.org/\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_17(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("PWA");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "PWA");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_17.name,
      type: "slot",
      source: '(15:25) <Link       href=\\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps\\"       external     >',
      ctx
    });
    return block;
  }
  function create_if_block3(ctx) {
    let h2;
    let textContent = "Try it out";
    let t1;
    let ul;
    let li0;
    let a0;
    let textContent_1 = "Register";
    let a0_href_value;
    let t3;
    let li1;
    let a1;
    let textContent_2 = "Log in";
    let a1_href_value;
    const block = {
      c: function create7() {
        h2 = element("h2");
        h2.textContent = textContent;
        t1 = space();
        ul = element("ul");
        li0 = element("li");
        a0 = element("a");
        a0.textContent = textContent_1;
        t3 = space();
        li1 = element("li");
        a1 = element("a");
        a1.textContent = textContent_2;
        this.h();
      },
      l: function claim(nodes) {
        h2 = claim_element(nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h2) !== "svelte-179z0bx")
          h2.textContent = textContent;
        t1 = claim_space(nodes);
        ul = claim_element(nodes, "UL", { class: true });
        var ul_nodes = children(ul);
        li0 = claim_element(ul_nodes, "LI", {});
        var li0_nodes = children(li0);
        a0 = claim_element(li0_nodes, "A", {
          href: true,
          class: true,
          ["data-svelte-h"]: true
        });
        if (get_svelte_dataset(a0) !== "svelte-17q6svo")
          a0.textContent = textContent_1;
        li0_nodes.forEach(detach_dev);
        t3 = claim_space(ul_nodes);
        li1 = claim_element(ul_nodes, "LI", {});
        var li1_nodes = children(li1);
        a1 = claim_element(li1_nodes, "A", {
          href: true,
          class: true,
          ["data-svelte-h"]: true
        });
        if (get_svelte_dataset(a1) !== "svelte-r5fsav")
          a1.textContent = textContent_2;
        li1_nodes.forEach(detach_dev);
        ul_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(h2, "class", "text-3xl font-bold my-3");
        add_location(h2, file5, 41, 4, 1143);
        attr_dev(a0, "href", a0_href_value = "/users/register");
        attr_dev(a0, "class", "btn btn-accent border border-neutral");
        add_location(a0, file5, 45, 8, 1243);
        add_location(li0, file5, 44, 6, 1230);
        attr_dev(a1, "href", a1_href_value = "/users/log_in");
        attr_dev(a1, "class", "btn btn-accent border border-neutral");
        add_location(a1, file5, 48, 8, 1360);
        add_location(li1, file5, 47, 6, 1347);
        attr_dev(ul, "class", "flex gap-2");
        add_location(ul, file5, 43, 4, 1200);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, h2, anchor);
        insert_hydration_dev(target, t1, anchor);
        insert_hydration_dev(target, ul, anchor);
        append_hydration_dev(ul, li0);
        append_hydration_dev(li0, a0);
        append_hydration_dev(ul, t3);
        append_hydration_dev(ul, li1);
        append_hydration_dev(li1, a1);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(h2);
          detach_dev(t1);
          detach_dev(ul);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block3.name,
      type: "if",
      source: "(35:2) {#if showAuthLinks}",
      ctx
    });
    return block;
  }
  function create_default_slot_16(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("LiveView");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "LiveView");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_16.name,
      type: "slot",
      source: '(54:8) <Link href=\\"https://github.com/phoenixframework/phoenix_live_view\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_15(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("PubSub");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "PubSub");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_15.name,
      type: "slot",
      source: '(55:8) <Link href=\\"https://hexdocs.pm/phoenix/channels.html#pubsub\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_14(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Ecto");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Ecto");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_14.name,
      type: "slot",
      source: '(56:8) <Link href=\\"https://github.com/elixir-ecto/ecto/tree/v3.11.1\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_13(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("PostgreSQL");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "PostgreSQL");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_13.name,
      type: "slot",
      source: '(56:91) <Link           href=\\"https://www.postgresql.org/\\"           external         >',
      ctx
    });
    return block;
  }
  function create_default_slot_12(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Svelte");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Svelte");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_12.name,
      type: "slot",
      source: '(65:8) <Link href=\\"https://svelte.dev/\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_11(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("live_svelte");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "live_svelte");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_11.name,
      type: "slot",
      source: '(66:13) <Link href=\\"https://github.com/woutdp/live_svelte\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_10(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Service Workers");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Service Workers");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_10.name,
      type: "slot",
      source: '(71:8) <Link href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\\" external           >',
      ctx
    });
    return block;
  }
  function create_default_slot_9(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Web Storage");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Web Storage");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_9.name,
      type: "slot",
      source: '(74:8) <Link href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_8(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("IndexedDB");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "IndexedDB");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_8.name,
      type: "slot",
      source: '(77:8) <Link href=\\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_7(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("y-indexeddb");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "y-indexeddb");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_7.name,
      type: "slot",
      source: '(80:13) <Link href=\\"https://github.com/yjs/y-indexeddb\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_6(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("CRDTs");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "CRDTs");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_6.name,
      type: "slot",
      source: '(85:8) <Link href=\\"https://crdt.tech/\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_5(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Yjs");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Yjs");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_5.name,
      type: "slot",
      source: '(86:13) <Link href=\\"https://github.com/yjs/yjs\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_4(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("LiveSvelte - Render Svelte directly into Phoenix LiveView with E2E reactivity.");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "LiveSvelte - Render Svelte directly into Phoenix LiveView with E2E reactivity.");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_4.name,
      type: "slot",
      source: '(98:8) <Link href=\\"https://www.youtube.com/watch?v=JMkvbW35QvA\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_3(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("E2E Reactivity - using Svelte with Phoenix LiveView");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "E2E Reactivity - using Svelte with Phoenix LiveView");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_3.name,
      type: "slot",
      source: '(105:8) <Link href=\\"https://www.youtube.com/watch?v=asm2TTm035o\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_2(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("SvelteKit: From landing page to offline PWAs");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "SvelteKit: From landing page to offline PWAs");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_2.name,
      type: "slot",
      source: '(112:8) <Link href=\\"https://speakerdeck.com/danirukun/svelte-hololive-fan-booth-project\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot_1(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("Tony Dang");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "Tony Dang");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_1.name,
      type: "slot",
      source: '(123:4) <Link href=\\"https://tonydang.blog\\" external>',
      ctx
    });
    return block;
  }
  function create_default_slot28(ctx) {
    let t;
    const block = {
      c: function create7() {
        t = text("tony@tonydang.blog");
      },
      l: function claim(nodes) {
        t = claim_text(nodes, "tony@tonydang.blog");
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, t, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot28.name,
      type: "slot",
      source: '(125:4) <Link href=\\"mailto:tony@tonydang.blog\\" external>',
      ctx
    });
    return block;
  }
  function create_fragment34(ctx) {
    let div4;
    let h1;
    let textContent = "Local-First LiveView Svelte ToDo App";
    let t1;
    let p;
    let t2;
    let link0;
    let t3;
    let link1;
    let t4;
    let t5;
    let h20;
    let textContent_1 = "Video Walkthrough";
    let t7;
    let iframe;
    let iframe_src_value;
    let t8;
    let t9;
    let div0;
    let h21;
    let textContent_2 = "Technologies used";
    let t11;
    let ul0;
    let li0;
    let t12;
    let link2;
    let t13;
    let link3;
    let t14;
    let link4;
    let t15;
    let link5;
    let t16;
    let t17;
    let li1;
    let link6;
    let t18;
    let link7;
    let t19;
    let t20;
    let li2;
    let link8;
    let t21;
    let link9;
    let t22;
    let link10;
    let t23;
    let link11;
    let t24;
    let t25;
    let li3;
    let link12;
    let t26;
    let link13;
    let t27;
    let t28;
    let div1;
    let h22;
    let textContent_3 = "Inspired by";
    let t30;
    let ul1;
    let li4;
    let t31;
    let link14;
    let t32;
    let li5;
    let t33;
    let link15;
    let t34;
    let li6;
    let t35;
    let link16;
    let t36;
    let div2;
    let h23;
    let textContent_4 = "Contact";
    let t38;
    let link17;
    let t39;
    let link18;
    let t40;
    let t41;
    let div3;
    let h24;
    let textContent_5 = "Source Code";
    let t43;
    let a;
    let fa;
    let current;
    link0 = new Link_default({
      props: {
        href: "https://www.phoenixframework.org/",
        external: true,
        $$slots: { default: [create_default_slot_18] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link1 = new Link_default({
      props: {
        href: "https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps",
        external: true,
        $$slots: { default: [create_default_slot_17] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    let if_block = (
      /*showAuthLinks*/
      ctx[0] && create_if_block3(ctx)
    );
    link2 = new Link_default({
      props: {
        href: "https://github.com/phoenixframework/phoenix_live_view",
        external: true,
        $$slots: { default: [create_default_slot_16] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link3 = new Link_default({
      props: {
        href: "https://hexdocs.pm/phoenix/channels.html#pubsub",
        external: true,
        $$slots: { default: [create_default_slot_15] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link4 = new Link_default({
      props: {
        href: "https://github.com/elixir-ecto/ecto/tree/v3.11.1",
        external: true,
        $$slots: { default: [create_default_slot_14] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link5 = new Link_default({
      props: {
        href: "https://www.postgresql.org/",
        external: true,
        $$slots: { default: [create_default_slot_13] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link6 = new Link_default({
      props: {
        href: "https://svelte.dev/",
        external: true,
        $$slots: { default: [create_default_slot_12] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link7 = new Link_default({
      props: {
        href: "https://github.com/woutdp/live_svelte",
        external: true,
        $$slots: { default: [create_default_slot_11] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link8 = new Link_default({
      props: {
        href: "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",
        external: true,
        $$slots: { default: [create_default_slot_10] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link9 = new Link_default({
      props: {
        href: "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",
        external: true,
        $$slots: { default: [create_default_slot_9] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link10 = new Link_default({
      props: {
        href: "https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",
        external: true,
        $$slots: { default: [create_default_slot_8] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link11 = new Link_default({
      props: {
        href: "https://github.com/yjs/y-indexeddb",
        external: true,
        $$slots: { default: [create_default_slot_7] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link12 = new Link_default({
      props: {
        href: "https://crdt.tech/",
        external: true,
        $$slots: { default: [create_default_slot_6] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link13 = new Link_default({
      props: {
        href: "https://github.com/yjs/yjs",
        external: true,
        $$slots: { default: [create_default_slot_5] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link14 = new Link_default({
      props: {
        href: "https://www.youtube.com/watch?v=JMkvbW35QvA",
        external: true,
        $$slots: { default: [create_default_slot_4] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link15 = new Link_default({
      props: {
        href: "https://www.youtube.com/watch?v=asm2TTm035o",
        external: true,
        $$slots: { default: [create_default_slot_3] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link16 = new Link_default({
      props: {
        href: "https://speakerdeck.com/danirukun/svelte-hololive-fan-booth-project",
        external: true,
        $$slots: { default: [create_default_slot_2] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link17 = new Link_default({
      props: {
        href: "https://tonydang.blog",
        external: true,
        $$slots: { default: [create_default_slot_1] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    link18 = new Link_default({
      props: {
        href: "mailto:tony@tonydang.blog",
        external: true,
        $$slots: { default: [create_default_slot28] },
        $$scope: { ctx }
      },
      $$inline: true
    });
    fa = new dist_default({
      props: { icon: faGithub, size: "3x" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div4 = element("div");
        h1 = element("h1");
        h1.textContent = textContent;
        t1 = space();
        p = element("p");
        t2 = text("This to-do app is a demo of an installable\n    ");
        create_component(link0.$$.fragment);
        t3 = text("\n    Progressive Web App (");
        create_component(link1.$$.fragment);
        t4 = text(") that can sync real-time across multiple devices while also being able to work locally\n    offline.");
        t5 = space();
        h20 = element("h2");
        h20.textContent = textContent_1;
        t7 = space();
        iframe = element("iframe");
        t8 = space();
        if (if_block)
          if_block.c();
        t9 = space();
        div0 = element("div");
        h21 = element("h2");
        h21.textContent = textContent_2;
        t11 = space();
        ul0 = element("ul");
        li0 = element("li");
        t12 = text("Phoenix\n        ");
        create_component(link2.$$.fragment);
        t13 = text(",\n        ");
        create_component(link3.$$.fragment);
        t14 = text(", and\n        ");
        create_component(link4.$$.fragment);
        t15 = text("/");
        create_component(link5.$$.fragment);
        t16 = text(" for real-time syncing and data persistence.");
        t17 = space();
        li1 = element("li");
        create_component(link6.$$.fragment);
        t18 = text("\n        (via ");
        create_component(link7.$$.fragment);
        t19 = text(") for the\n        frontend UI and state management.");
        t20 = space();
        li2 = element("li");
        create_component(link8.$$.fragment);
        t21 = text(",\n        ");
        create_component(link9.$$.fragment);
        t22 = text(", and\n        ");
        create_component(link10.$$.fragment);
        t23 = text("\n        (via ");
        create_component(link11.$$.fragment);
        t24 = text(") for\n        offline support.");
        t25 = space();
        li3 = element("li");
        create_component(link12.$$.fragment);
        t26 = text("\n        (via ");
        create_component(link13.$$.fragment);
        t27 = text(") to resolve conflicts\n        between distributed app states.");
        t28 = space();
        div1 = element("div");
        h22 = element("h2");
        h22.textContent = textContent_3;
        t30 = space();
        ul1 = element("ul");
        li4 = element("li");
        t31 = text("Wout De Puysseleir -\n        ");
        create_component(link14.$$.fragment);
        t32 = space();
        li5 = element("li");
        t33 = text("Ryan Cooke -\n        ");
        create_component(link15.$$.fragment);
        t34 = space();
        li6 = element("li");
        t35 = text("Daniils Petrovs -\n        ");
        create_component(link16.$$.fragment);
        t36 = space();
        div2 = element("div");
        h23 = element("h2");
        h23.textContent = textContent_4;
        t38 = text("\n\n    Created by\n    ");
        create_component(link17.$$.fragment);
        t39 = text(". Please feel free send any\n    questions or feedback to\n    ");
        create_component(link18.$$.fragment);
        t40 = text(".");
        t41 = space();
        div3 = element("div");
        h24 = element("h2");
        h24.textContent = textContent_5;
        t43 = space();
        a = element("a");
        create_component(fa.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div4 = claim_element(nodes, "DIV", { class: true });
        var div4_nodes = children(div4);
        h1 = claim_element(div4_nodes, "H1", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h1) !== "svelte-14zpjxm")
          h1.textContent = textContent;
        t1 = claim_space(div4_nodes);
        p = claim_element(div4_nodes, "P", {});
        var p_nodes = children(p);
        t2 = claim_text(p_nodes, "This to-do app is a demo of an installable\n    ");
        claim_component(link0.$$.fragment, p_nodes);
        t3 = claim_text(p_nodes, "\n    Progressive Web App (");
        claim_component(link1.$$.fragment, p_nodes);
        t4 = claim_text(p_nodes, ") that can sync real-time across multiple devices while also being able to work locally\n    offline.");
        p_nodes.forEach(detach_dev);
        t5 = claim_space(div4_nodes);
        h20 = claim_element(div4_nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h20) !== "svelte-1fpbgn0")
          h20.textContent = textContent_1;
        t7 = claim_space(div4_nodes);
        iframe = claim_element(div4_nodes, "IFRAME", {
          class: true,
          src: true,
          title: true,
          frameborder: true,
          allow: true
        });
        children(iframe).forEach(detach_dev);
        t8 = claim_space(div4_nodes);
        if (if_block)
          if_block.l(div4_nodes);
        t9 = claim_space(div4_nodes);
        div0 = claim_element(div4_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        h21 = claim_element(div0_nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h21) !== "svelte-12kmvz6")
          h21.textContent = textContent_2;
        t11 = claim_space(div0_nodes);
        ul0 = claim_element(div0_nodes, "UL", { class: true });
        var ul0_nodes = children(ul0);
        li0 = claim_element(ul0_nodes, "LI", {});
        var li0_nodes = children(li0);
        t12 = claim_text(li0_nodes, "Phoenix\n        ");
        claim_component(link2.$$.fragment, li0_nodes);
        t13 = claim_text(li0_nodes, ",\n        ");
        claim_component(link3.$$.fragment, li0_nodes);
        t14 = claim_text(li0_nodes, ", and\n        ");
        claim_component(link4.$$.fragment, li0_nodes);
        t15 = claim_text(li0_nodes, "/");
        claim_component(link5.$$.fragment, li0_nodes);
        t16 = claim_text(li0_nodes, " for real-time syncing and data persistence.");
        li0_nodes.forEach(detach_dev);
        t17 = claim_space(ul0_nodes);
        li1 = claim_element(ul0_nodes, "LI", {});
        var li1_nodes = children(li1);
        claim_component(link6.$$.fragment, li1_nodes);
        t18 = claim_text(li1_nodes, "\n        (via ");
        claim_component(link7.$$.fragment, li1_nodes);
        t19 = claim_text(li1_nodes, ") for the\n        frontend UI and state management.");
        li1_nodes.forEach(detach_dev);
        t20 = claim_space(ul0_nodes);
        li2 = claim_element(ul0_nodes, "LI", {});
        var li2_nodes = children(li2);
        claim_component(link8.$$.fragment, li2_nodes);
        t21 = claim_text(li2_nodes, ",\n        ");
        claim_component(link9.$$.fragment, li2_nodes);
        t22 = claim_text(li2_nodes, ", and\n        ");
        claim_component(link10.$$.fragment, li2_nodes);
        t23 = claim_text(li2_nodes, "\n        (via ");
        claim_component(link11.$$.fragment, li2_nodes);
        t24 = claim_text(li2_nodes, ") for\n        offline support.");
        li2_nodes.forEach(detach_dev);
        t25 = claim_space(ul0_nodes);
        li3 = claim_element(ul0_nodes, "LI", {});
        var li3_nodes = children(li3);
        claim_component(link12.$$.fragment, li3_nodes);
        t26 = claim_text(li3_nodes, "\n        (via ");
        claim_component(link13.$$.fragment, li3_nodes);
        t27 = claim_text(li3_nodes, ") to resolve conflicts\n        between distributed app states.");
        li3_nodes.forEach(detach_dev);
        ul0_nodes.forEach(detach_dev);
        div0_nodes.forEach(detach_dev);
        t28 = claim_space(div4_nodes);
        div1 = claim_element(div4_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        h22 = claim_element(div1_nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h22) !== "svelte-ix4mde")
          h22.textContent = textContent_3;
        t30 = claim_space(div1_nodes);
        ul1 = claim_element(div1_nodes, "UL", { class: true });
        var ul1_nodes = children(ul1);
        li4 = claim_element(ul1_nodes, "LI", {});
        var li4_nodes = children(li4);
        t31 = claim_text(li4_nodes, "Wout De Puysseleir -\n        ");
        claim_component(link14.$$.fragment, li4_nodes);
        li4_nodes.forEach(detach_dev);
        t32 = claim_space(ul1_nodes);
        li5 = claim_element(ul1_nodes, "LI", {});
        var li5_nodes = children(li5);
        t33 = claim_text(li5_nodes, "Ryan Cooke -\n        ");
        claim_component(link15.$$.fragment, li5_nodes);
        li5_nodes.forEach(detach_dev);
        t34 = claim_space(ul1_nodes);
        li6 = claim_element(ul1_nodes, "LI", {});
        var li6_nodes = children(li6);
        t35 = claim_text(li6_nodes, "Daniils Petrovs -\n        ");
        claim_component(link16.$$.fragment, li6_nodes);
        li6_nodes.forEach(detach_dev);
        ul1_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        t36 = claim_space(div4_nodes);
        div2 = claim_element(div4_nodes, "DIV", { class: true });
        var div2_nodes = children(div2);
        h23 = claim_element(div2_nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h23) !== "svelte-pezf5j")
          h23.textContent = textContent_4;
        t38 = claim_text(div2_nodes, "\n\n    Created by\n    ");
        claim_component(link17.$$.fragment, div2_nodes);
        t39 = claim_text(div2_nodes, ". Please feel free send any\n    questions or feedback to\n    ");
        claim_component(link18.$$.fragment, div2_nodes);
        t40 = claim_text(div2_nodes, ".");
        div2_nodes.forEach(detach_dev);
        t41 = claim_space(div4_nodes);
        div3 = claim_element(div4_nodes, "DIV", { class: true });
        var div3_nodes = children(div3);
        h24 = claim_element(div3_nodes, "H2", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h24) !== "svelte-don52t")
          h24.textContent = textContent_5;
        t43 = claim_space(div3_nodes);
        a = claim_element(div3_nodes, "A", {
          href: true,
          "aria-label": true,
          target: true,
          rel: true,
          class: true
        });
        var a_nodes = children(a);
        claim_component(fa.$$.fragment, a_nodes);
        a_nodes.forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        div4_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(h1, "class", "text-5xl font-black my-5");
        add_location(h1, file5, 15, 2, 268);
        add_location(p, file5, 17, 2, 350);
        attr_dev(h20, "class", "text-3xl font-bold my-3");
        add_location(h20, file5, 29, 2, 739);
        attr_dev(iframe, "class", "w-full aspect-video my-6");
        if (!src_url_equal(iframe.src, iframe_src_value = "https://www.youtube.com/embed/PX9-lq0LL9Q?si=xdd3inTC72OvVV0G"))
          attr_dev(iframe, "src", iframe_src_value);
        attr_dev(iframe, "title", "YouTube video player");
        attr_dev(iframe, "frameborder", "0");
        attr_dev(iframe, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share");
        iframe.allowFullscreen = true;
        add_location(iframe, file5, 31, 2, 801);
        attr_dev(h21, "class", "text-3xl font-bold my-3");
        add_location(h21, file5, 54, 4, 1498);
        add_location(li0, file5, 57, 6, 1596);
        add_location(li1, file5, 69, 6, 2086);
        add_location(li2, file5, 75, 6, 2317);
        add_location(li3, file5, 89, 6, 2871);
        attr_dev(ul0, "class", "list-disc pl-4");
        add_location(ul0, file5, 56, 4, 1562);
        attr_dev(div0, "class", "my-6");
        add_location(div0, file5, 53, 2, 1475);
        attr_dev(h22, "class", "text-3xl font-bold my-3");
        add_location(h22, file5, 98, 4, 3130);
        add_location(li4, file5, 101, 6, 3222);
        add_location(li5, file5, 108, 6, 3455);
        add_location(li6, file5, 115, 6, 3653);
        attr_dev(ul1, "class", "list-disc pl-4");
        add_location(ul1, file5, 100, 4, 3188);
        attr_dev(div1, "class", "my-6");
        add_location(div1, file5, 97, 2, 3107);
        attr_dev(h23, "class", "text-3xl font-bold my-3");
        add_location(h23, file5, 125, 4, 3911);
        attr_dev(div2, "class", "my-6");
        add_location(div2, file5, 124, 2, 3888);
        attr_dev(h24, "class", "text-3xl font-bold my-3");
        add_location(h24, file5, 134, 4, 4211);
        attr_dev(a, "href", "https://github.com/tonydangblog/liveview-svelte-pwa");
        attr_dev(a, "aria-label", "Github");
        attr_dev(a, "target", "_blank");
        attr_dev(a, "rel", "noopener noreferrer");
        attr_dev(a, "class", "inline-block hover:opacity-75 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(a, file5, 135, 4, 4268);
        attr_dev(div3, "class", "my-6");
        add_location(div3, file5, 133, 2, 4188);
        attr_dev(div4, "class", "max-w-md mx-auto px-4 md:p-0");
        add_location(div4, file5, 14, 0, 223);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div4, anchor);
        append_hydration_dev(div4, h1);
        append_hydration_dev(div4, t1);
        append_hydration_dev(div4, p);
        append_hydration_dev(p, t2);
        mount_component(link0, p, null);
        append_hydration_dev(p, t3);
        mount_component(link1, p, null);
        append_hydration_dev(p, t4);
        append_hydration_dev(div4, t5);
        append_hydration_dev(div4, h20);
        append_hydration_dev(div4, t7);
        append_hydration_dev(div4, iframe);
        append_hydration_dev(div4, t8);
        if (if_block)
          if_block.m(div4, null);
        append_hydration_dev(div4, t9);
        append_hydration_dev(div4, div0);
        append_hydration_dev(div0, h21);
        append_hydration_dev(div0, t11);
        append_hydration_dev(div0, ul0);
        append_hydration_dev(ul0, li0);
        append_hydration_dev(li0, t12);
        mount_component(link2, li0, null);
        append_hydration_dev(li0, t13);
        mount_component(link3, li0, null);
        append_hydration_dev(li0, t14);
        mount_component(link4, li0, null);
        append_hydration_dev(li0, t15);
        mount_component(link5, li0, null);
        append_hydration_dev(li0, t16);
        append_hydration_dev(ul0, t17);
        append_hydration_dev(ul0, li1);
        mount_component(link6, li1, null);
        append_hydration_dev(li1, t18);
        mount_component(link7, li1, null);
        append_hydration_dev(li1, t19);
        append_hydration_dev(ul0, t20);
        append_hydration_dev(ul0, li2);
        mount_component(link8, li2, null);
        append_hydration_dev(li2, t21);
        mount_component(link9, li2, null);
        append_hydration_dev(li2, t22);
        mount_component(link10, li2, null);
        append_hydration_dev(li2, t23);
        mount_component(link11, li2, null);
        append_hydration_dev(li2, t24);
        append_hydration_dev(ul0, t25);
        append_hydration_dev(ul0, li3);
        mount_component(link12, li3, null);
        append_hydration_dev(li3, t26);
        mount_component(link13, li3, null);
        append_hydration_dev(li3, t27);
        append_hydration_dev(div4, t28);
        append_hydration_dev(div4, div1);
        append_hydration_dev(div1, h22);
        append_hydration_dev(div1, t30);
        append_hydration_dev(div1, ul1);
        append_hydration_dev(ul1, li4);
        append_hydration_dev(li4, t31);
        mount_component(link14, li4, null);
        append_hydration_dev(ul1, t32);
        append_hydration_dev(ul1, li5);
        append_hydration_dev(li5, t33);
        mount_component(link15, li5, null);
        append_hydration_dev(ul1, t34);
        append_hydration_dev(ul1, li6);
        append_hydration_dev(li6, t35);
        mount_component(link16, li6, null);
        append_hydration_dev(div4, t36);
        append_hydration_dev(div4, div2);
        append_hydration_dev(div2, h23);
        append_hydration_dev(div2, t38);
        mount_component(link17, div2, null);
        append_hydration_dev(div2, t39);
        mount_component(link18, div2, null);
        append_hydration_dev(div2, t40);
        append_hydration_dev(div4, t41);
        append_hydration_dev(div4, div3);
        append_hydration_dev(div3, h24);
        append_hydration_dev(div3, t43);
        append_hydration_dev(div3, a);
        mount_component(fa, a, null);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const link0_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link0_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link0.$set(link0_changes);
        const link1_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link1_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link1.$set(link1_changes);
        if (
          /*showAuthLinks*/
          ctx2[0]
        ) {
          if (if_block) {
          } else {
            if_block = create_if_block3(ctx2);
            if_block.c();
            if_block.m(div4, t9);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        const link2_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link2_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link2.$set(link2_changes);
        const link3_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link3_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link3.$set(link3_changes);
        const link4_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link4_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link4.$set(link4_changes);
        const link5_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link5_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link5.$set(link5_changes);
        const link6_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link6_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link6.$set(link6_changes);
        const link7_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link7_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link7.$set(link7_changes);
        const link8_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link8_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link8.$set(link8_changes);
        const link9_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link9_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link9.$set(link9_changes);
        const link10_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link10_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link10.$set(link10_changes);
        const link11_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link11_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link11.$set(link11_changes);
        const link12_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link12_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link12.$set(link12_changes);
        const link13_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link13_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link13.$set(link13_changes);
        const link14_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link14_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link14.$set(link14_changes);
        const link15_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link15_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link15.$set(link15_changes);
        const link16_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link16_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link16.$set(link16_changes);
        const link17_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link17_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link17.$set(link17_changes);
        const link18_changes = {};
        if (dirty & /*$$scope*/
        4) {
          link18_changes.$$scope = { dirty, ctx: ctx2 };
        }
        link18.$set(link18_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(link0.$$.fragment, local);
        transition_in(link1.$$.fragment, local);
        transition_in(link2.$$.fragment, local);
        transition_in(link3.$$.fragment, local);
        transition_in(link4.$$.fragment, local);
        transition_in(link5.$$.fragment, local);
        transition_in(link6.$$.fragment, local);
        transition_in(link7.$$.fragment, local);
        transition_in(link8.$$.fragment, local);
        transition_in(link9.$$.fragment, local);
        transition_in(link10.$$.fragment, local);
        transition_in(link11.$$.fragment, local);
        transition_in(link12.$$.fragment, local);
        transition_in(link13.$$.fragment, local);
        transition_in(link14.$$.fragment, local);
        transition_in(link15.$$.fragment, local);
        transition_in(link16.$$.fragment, local);
        transition_in(link17.$$.fragment, local);
        transition_in(link18.$$.fragment, local);
        transition_in(fa.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(link0.$$.fragment, local);
        transition_out(link1.$$.fragment, local);
        transition_out(link2.$$.fragment, local);
        transition_out(link3.$$.fragment, local);
        transition_out(link4.$$.fragment, local);
        transition_out(link5.$$.fragment, local);
        transition_out(link6.$$.fragment, local);
        transition_out(link7.$$.fragment, local);
        transition_out(link8.$$.fragment, local);
        transition_out(link9.$$.fragment, local);
        transition_out(link10.$$.fragment, local);
        transition_out(link11.$$.fragment, local);
        transition_out(link12.$$.fragment, local);
        transition_out(link13.$$.fragment, local);
        transition_out(link14.$$.fragment, local);
        transition_out(link15.$$.fragment, local);
        transition_out(link16.$$.fragment, local);
        transition_out(link17.$$.fragment, local);
        transition_out(link18.$$.fragment, local);
        transition_out(fa.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div4);
        }
        destroy_component(link0);
        destroy_component(link1);
        if (if_block)
          if_block.d();
        destroy_component(link2);
        destroy_component(link3);
        destroy_component(link4);
        destroy_component(link5);
        destroy_component(link6);
        destroy_component(link7);
        destroy_component(link8);
        destroy_component(link9);
        destroy_component(link10);
        destroy_component(link11);
        destroy_component(link12);
        destroy_component(link13);
        destroy_component(link14);
        destroy_component(link15);
        destroy_component(link16);
        destroy_component(link17);
        destroy_component(link18);
        destroy_component(fa);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment34.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance34($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("AppInfo", slots, []);
    let { live = void 0 } = $$props;
    live;
    let { showAuthLinks = false } = $$props;
    const writable_props = ["live", "showAuthLinks"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<AppInfo> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(1, live = $$props2.live);
      if ("showAuthLinks" in $$props2)
        $$invalidate(0, showAuthLinks = $$props2.showAuthLinks);
    };
    $$self.$capture_state = () => ({ faGithub, Fa: dist_default, Link: Link_default, live, showAuthLinks });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(1, live = $$props2.live);
      if ("showAuthLinks" in $$props2)
        $$invalidate(0, showAuthLinks = $$props2.showAuthLinks);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [showAuthLinks, live];
  }
  var AppInfo = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance34, create_fragment34, safe_not_equal, { live: 1, showAuthLinks: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "AppInfo",
        options,
        id: create_fragment34.name
      });
    }
    get live() {
      throw new Error("<AppInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<AppInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get showAuthLinks() {
      throw new Error("<AppInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set showAuthLinks(value) {
      throw new Error("<AppInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var AppInfo_default = AppInfo;

  // svelte/AppSkeleton.svelte
  var AppSkeleton_exports = {};
  __export(AppSkeleton_exports, {
    default: () => AppSkeleton_default
  });
  var file6 = "svelte/AppSkeleton.svelte";
  function create_fragment35(ctx) {
    let div7;
    let div4;
    let div0;
    let t0;
    let div3;
    let div1;
    let t1;
    let div2;
    let t2;
    let div5;
    let t3;
    let div6;
    const block = {
      c: function create7() {
        div7 = element("div");
        div4 = element("div");
        div0 = element("div");
        t0 = space();
        div3 = element("div");
        div1 = element("div");
        t1 = space();
        div2 = element("div");
        t2 = space();
        div5 = element("div");
        t3 = space();
        div6 = element("div");
        this.h();
      },
      l: function claim(nodes) {
        div7 = claim_element(nodes, "DIV", { class: true });
        var div7_nodes = children(div7);
        div4 = claim_element(div7_nodes, "DIV", { class: true });
        var div4_nodes = children(div4);
        div0 = claim_element(div4_nodes, "DIV", { class: true });
        children(div0).forEach(detach_dev);
        t0 = claim_space(div4_nodes);
        div3 = claim_element(div4_nodes, "DIV", { class: true });
        var div3_nodes = children(div3);
        div1 = claim_element(div3_nodes, "DIV", { class: true });
        children(div1).forEach(detach_dev);
        t1 = claim_space(div3_nodes);
        div2 = claim_element(div3_nodes, "DIV", { class: true });
        children(div2).forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        div4_nodes.forEach(detach_dev);
        t2 = claim_space(div7_nodes);
        div5 = claim_element(div7_nodes, "DIV", { class: true });
        children(div5).forEach(detach_dev);
        t3 = claim_space(div7_nodes);
        div6 = claim_element(div7_nodes, "DIV", { class: true });
        children(div6).forEach(detach_dev);
        div7_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div0, "class", "skeleton w-1/3 h-12");
        add_location(div0, file6, 2, 4, 127);
        attr_dev(div1, "class", "skeleton w-12 h-12 rounded-full shrink-0");
        add_location(div1, file6, 4, 6, 202);
        attr_dev(div2, "class", "skeleton w-12 h-12 rounded-full shrink-0");
        add_location(div2, file6, 5, 6, 269);
        attr_dev(div3, "class", "flex gap-2");
        add_location(div3, file6, 3, 4, 171);
        attr_dev(div4, "class", "flex justify-between mt-3 mb-2");
        add_location(div4, file6, 1, 2, 78);
        attr_dev(div5, "class", "skeleton w-full h-16 mb-3");
        add_location(div5, file6, 8, 2, 352);
        attr_dev(div6, "class", "skeleton w-full h-full mb-3");
        add_location(div6, file6, 9, 2, 400);
        attr_dev(div7, "class", "w-screen h-screen max-w-2xl mx-auto flex flex-col px-2 md:p-0");
        add_location(div7, file6, 0, 0, 0);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div7, anchor);
        append_hydration_dev(div7, div4);
        append_hydration_dev(div4, div0);
        append_hydration_dev(div4, t0);
        append_hydration_dev(div4, div3);
        append_hydration_dev(div3, div1);
        append_hydration_dev(div3, t1);
        append_hydration_dev(div3, div2);
        append_hydration_dev(div7, t2);
        append_hydration_dev(div7, div5);
        append_hydration_dev(div7, t3);
        append_hydration_dev(div7, div6);
      },
      p: noop3,
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div7);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment35.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance35($$self, $$props) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("AppSkeleton", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<AppSkeleton> was created with unknown prop '${key}'`);
    });
    return [];
  }
  var AppSkeleton = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance35, create_fragment35, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "AppSkeleton",
        options,
        id: create_fragment35.name
      });
    }
  };
  var AppSkeleton_default = AppSkeleton;

  // svelte/ClickOutsideClassHandler.svelte
  var ClickOutsideClassHandler_exports = {};
  __export(ClickOutsideClassHandler_exports, {
    default: () => ClickOutsideClassHandler_default
  });
  function create_fragment36(ctx) {
    const block = {
      c: noop3,
      l: noop3,
      m: noop3,
      p: noop3,
      i: noop3,
      o: noop3,
      d: noop3
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment36.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance36($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ClickOutsideClassHandler", slots, []);
    let { className } = $$props;
    let { callbackFunction } = $$props;
    function clickOutsideClassHandler(event) {
      if (!(event.target instanceof Node))
        return;
      const elementsToIgnore = document.getElementsByClassName(className);
      for (const element3 of elementsToIgnore) {
        if (element3.contains(event.target)) {
          return;
        }
      }
      callbackFunction(event);
    }
    onMount(() => {
      document.documentElement.addEventListener("click", clickOutsideClassHandler);
      return () => {
        document.documentElement.removeEventListener("click", clickOutsideClassHandler);
      };
    });
    $$self.$$.on_mount.push(function() {
      if (className === void 0 && !("className" in $$props || $$self.$$.bound[$$self.$$.props["className"]])) {
        console.warn("<ClickOutsideClassHandler> was created without expected prop 'className'");
      }
      if (callbackFunction === void 0 && !("callbackFunction" in $$props || $$self.$$.bound[$$self.$$.props["callbackFunction"]])) {
        console.warn("<ClickOutsideClassHandler> was created without expected prop 'callbackFunction'");
      }
    });
    const writable_props = ["className", "callbackFunction"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ClickOutsideClassHandler> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("className" in $$props2)
        $$invalidate(0, className = $$props2.className);
      if ("callbackFunction" in $$props2)
        $$invalidate(1, callbackFunction = $$props2.callbackFunction);
    };
    $$self.$capture_state = () => ({
      onMount,
      className,
      callbackFunction,
      clickOutsideClassHandler
    });
    $$self.$inject_state = ($$props2) => {
      if ("className" in $$props2)
        $$invalidate(0, className = $$props2.className);
      if ("callbackFunction" in $$props2)
        $$invalidate(1, callbackFunction = $$props2.callbackFunction);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [className, callbackFunction];
  }
  var ClickOutsideClassHandler = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance36, create_fragment36, safe_not_equal, { className: 0, callbackFunction: 1 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ClickOutsideClassHandler",
        options,
        id: create_fragment36.name
      });
    }
    get className() {
      throw new Error("<ClickOutsideClassHandler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set className(value) {
      throw new Error("<ClickOutsideClassHandler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get callbackFunction() {
      throw new Error("<ClickOutsideClassHandler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set callbackFunction(value) {
      throw new Error("<ClickOutsideClassHandler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ClickOutsideClassHandler_default = ClickOutsideClassHandler;

  // svelte/ClientOnlyStateManagement.svelte
  var ClientOnlyStateManagement_exports = {};
  __export(ClientOnlyStateManagement_exports, {
    default: () => ClientOnlyStateManagement_default,
    getParsedValueFromLocalStorage: () => getParsedValueFromLocalStorage,
    getParsedValueFromSessionStorage: () => getParsedValueFromSessionStorage
  });
  function create_fragment37(ctx) {
    const block = {
      c: noop3,
      l: noop3,
      m: noop3,
      p: noop3,
      i: noop3,
      o: noop3,
      d: noop3
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment37.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function getParsedValueFromLocalStorage(key, expectedType, defaultValue) {
    const jsonString = localStorage.getItem(key);
    return getParsedValueFromJsonString(jsonString, expectedType, defaultValue);
  }
  function getParsedValueFromSessionStorage(key, expectedType, defaultValue) {
    const jsonString = sessionStorage.getItem(key);
    return getParsedValueFromJsonString(jsonString, expectedType, defaultValue);
  }
  function getParsedValueFromJsonString(jsonString, expectedType, defaultValue) {
    if (!jsonString)
      return defaultValue;
    try {
      const parsedValue = JSON.parse(jsonString);
      return typeof parsedValue === expectedType ? parsedValue : defaultValue;
    } catch (e) {
      return defaultValue;
    }
  }
  function instance37($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $newTodo;
    let $newList;
    let $itemToProcessId;
    let $isTodoOpened;
    let $isListsOpened;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(1, $openedMenuId = $$value));
    validate_store(newTodo, "newTodo");
    component_subscribe($$self, newTodo, ($$value) => $$invalidate(2, $newTodo = $$value));
    validate_store(newList, "newList");
    component_subscribe($$self, newList, ($$value) => $$invalidate(3, $newList = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(4, $itemToProcessId = $$value));
    validate_store(isTodoOpened, "isTodoOpened");
    component_subscribe($$self, isTodoOpened, ($$value) => $$invalidate(5, $isTodoOpened = $$value));
    validate_store(isListsOpened, "isListsOpened");
    component_subscribe($$self, isListsOpened, ($$value) => $$invalidate(6, $isListsOpened = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ClientOnlyStateManagement", slots, []);
    let { isClientStateRestored } = $$props;
    onMount(() => {
      set_store_value(isListsOpened, $isListsOpened = getParsedValueFromSessionStorage("isListsOpened", "boolean", $isListsOpened), $isListsOpened);
      set_store_value(isTodoOpened, $isTodoOpened = getParsedValueFromSessionStorage("isTodoOpened", "boolean", $isTodoOpened), $isTodoOpened);
      set_store_value(itemToProcessId, $itemToProcessId = getParsedValueFromSessionStorage("itemToProcessId", "string", $itemToProcessId), $itemToProcessId);
      set_store_value(newList, $newList = getParsedValueFromSessionStorage("newList", "string", $newList), $newList);
      set_store_value(newTodo, $newTodo = getParsedValueFromSessionStorage("newTodo", "string", $newTodo), $newTodo);
      set_store_value(openedMenuId, $openedMenuId = getParsedValueFromSessionStorage("openedMenuId", "string", $openedMenuId), $openedMenuId);
      $$invalidate(0, isClientStateRestored = true);
    });
    $$self.$$.on_mount.push(function() {
      if (isClientStateRestored === void 0 && !("isClientStateRestored" in $$props || $$self.$$.bound[$$self.$$.props["isClientStateRestored"]])) {
        console.warn("<ClientOnlyStateManagement> was created without expected prop 'isClientStateRestored'");
      }
    });
    const writable_props = ["isClientStateRestored"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ClientOnlyStateManagement> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("isClientStateRestored" in $$props2)
        $$invalidate(0, isClientStateRestored = $$props2.isClientStateRestored);
    };
    $$self.$capture_state = () => ({
      getParsedValueFromLocalStorage,
      getParsedValueFromSessionStorage,
      getParsedValueFromJsonString,
      onMount,
      isListsOpened,
      isTodoOpened,
      itemToProcessId,
      newList,
      newTodo,
      openedMenuId,
      isClientStateRestored,
      $openedMenuId,
      $newTodo,
      $newList,
      $itemToProcessId,
      $isTodoOpened,
      $isListsOpened
    });
    $$self.$inject_state = ($$props2) => {
      if ("isClientStateRestored" in $$props2)
        $$invalidate(0, isClientStateRestored = $$props2.isClientStateRestored);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*isClientStateRestored, $isListsOpened, $isTodoOpened, $itemToProcessId, $newList, $newTodo, $openedMenuId*/
      127) {
        $:
          if (isClientStateRestored) {
            sessionStorage.setItem("isListsOpened", JSON.stringify($isListsOpened));
            sessionStorage.setItem("isTodoOpened", JSON.stringify($isTodoOpened));
            sessionStorage.setItem("itemToProcessId", JSON.stringify($itemToProcessId));
            sessionStorage.setItem("newList", JSON.stringify($newList));
            sessionStorage.setItem("newTodo", JSON.stringify($newTodo));
            sessionStorage.setItem("openedMenuId", JSON.stringify($openedMenuId));
          }
      }
    };
    return [
      isClientStateRestored,
      $openedMenuId,
      $newTodo,
      $newList,
      $itemToProcessId,
      $isTodoOpened,
      $isListsOpened
    ];
  }
  var ClientOnlyStateManagement = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance37, create_fragment37, safe_not_equal, { isClientStateRestored: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ClientOnlyStateManagement",
        options,
        id: create_fragment37.name
      });
    }
    get isClientStateRestored() {
      throw new Error("<ClientOnlyStateManagement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isClientStateRestored(value) {
      throw new Error("<ClientOnlyStateManagement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ClientOnlyStateManagement_default = ClientOnlyStateManagement;

  // svelte/Header.svelte
  var Header_exports = {};
  __export(Header_exports, {
    default: () => Header_default
  });

  // svelte/SessionsBadge.svelte
  var SessionsBadge_exports = {};
  __export(SessionsBadge_exports, {
    default: () => SessionsBadge_default
  });

  // stores/liveViewSocket.ts
  var liveView = writable();
  var serverDocument = writable();
  var sessionCount = writable();

  // stores/syncState.ts
  var syncState = writable("Not Synced");
  window.addEventListener("phx-disconnected", () => {
    syncState.set("Not Synced");
  });

  // svelte/SessionsBadge.svelte
  var file7 = "svelte/SessionsBadge.svelte";
  function create_if_block4(ctx) {
    let div;
    let t0;
    let t1;
    let t2_value = (
      /*$sessionCount*/
      ctx[0] > 1 ? "s" : ""
    );
    let t2;
    const block = {
      c: function create7() {
        div = element("div");
        t0 = text(
          /*$sessionCount*/
          ctx[0]
        );
        t1 = text(" Session");
        t2 = text(t2_value);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { id: true, title: true, class: true });
        var div_nodes = children(div);
        t0 = claim_text(
          div_nodes,
          /*$sessionCount*/
          ctx[0]
        );
        t1 = claim_text(div_nodes, " Session");
        t2 = claim_text(div_nodes, t2_value);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div, "id", "sessions-badge");
        attr_dev(div, "title", "Number of active sessions.");
        attr_dev(div, "class", "badge badge-xs transition-none p-2");
        add_location(div, file7, 6, 2, 180);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, t0);
        append_hydration_dev(div, t1);
        append_hydration_dev(div, t2);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*$sessionCount*/
        1)
          set_data_dev(
            t0,
            /*$sessionCount*/
            ctx2[0]
          );
        if (dirty & /*$sessionCount*/
        1 && t2_value !== (t2_value = /*$sessionCount*/
        ctx2[0] > 1 ? "s" : ""))
          set_data_dev(t2, t2_value);
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block4.name,
      type: "if",
      source: '(5:0) {#if $sessionCount && $syncState === \\"Synced\\"}',
      ctx
    });
    return block;
  }
  function create_fragment38(ctx) {
    let if_block_anchor;
    let if_block = (
      /*$sessionCount*/
      ctx[0] && /*$syncState*/
      ctx[1] === "Synced" && create_if_block4(ctx)
    );
    const block = {
      c: function create7() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*$sessionCount*/
          ctx2[0] && /*$syncState*/
          ctx2[1] === "Synced"
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block4(ctx2);
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment38.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance38($$self, $$props, $$invalidate) {
    let $sessionCount;
    let $syncState;
    validate_store(sessionCount, "sessionCount");
    component_subscribe($$self, sessionCount, ($$value) => $$invalidate(0, $sessionCount = $$value));
    validate_store(syncState, "syncState");
    component_subscribe($$self, syncState, ($$value) => $$invalidate(1, $syncState = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("SessionsBadge", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<SessionsBadge> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = () => ({
      sessionCount,
      syncState,
      $sessionCount,
      $syncState
    });
    return [$sessionCount, $syncState];
  }
  var SessionsBadge = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance38, create_fragment38, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "SessionsBadge",
        options,
        id: create_fragment38.name
      });
    }
  };
  var SessionsBadge_default = SessionsBadge;

  // svelte/ShareButton.svelte
  var ShareButton_exports = {};
  __export(ShareButton_exports, {
    default: () => ShareButton_default
  });
  var file8 = "svelte/ShareButton.svelte";
  function create_fragment39(ctx) {
    let button;
    let div1;
    let div0;
    let input;
    let input_checked_value;
    let t0;
    let share2;
    let t1;
    let check;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    share2 = new share_2_default({
      props: { class: "swap-off" },
      $$inline: true
    });
    check = new check_default({
      props: { class: "swap-on" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        button = element("button");
        div1 = element("div");
        div0 = element("div");
        input = element("input");
        t0 = space();
        create_component(share2.$$.fragment);
        t1 = space();
        create_component(check.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        button = claim_element(nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button_nodes = children(button);
        div1 = claim_element(button_nodes, "DIV", { class: true, "data-tip": true });
        var div1_nodes = children(div1);
        div0 = claim_element(div1_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        input = claim_element(div0_nodes, "INPUT", { type: true, class: true });
        t0 = claim_space(div0_nodes);
        claim_component(share2.$$.fragment, div0_nodes);
        t1 = claim_space(div0_nodes);
        claim_component(check.$$.fragment, div0_nodes);
        div0_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        button_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "type", "checkbox");
        attr_dev(input, "class", "hidden");
        input.checked = input_checked_value = Boolean(
          /*message*/
          ctx[0]
        );
        add_location(input, file8, 39, 6, 910);
        attr_dev(div0, "class", "swap swap-rotate");
        add_location(div0, file8, 38, 4, 873);
        attr_dev(div1, "class", "tooltip-left tooltip-primary");
        attr_dev(
          div1,
          "data-tip",
          /*message*/
          ctx[0]
        );
        toggle_class(div1, "tooltip", Boolean(
          /*message*/
          ctx[0]
        ));
        toggle_class(div1, "tooltip-open", Boolean(
          /*message*/
          ctx[0]
        ));
        add_location(div1, file8, 32, 2, 717);
        attr_dev(button, "class", "my-1 btn btn-circle btn-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button, "aria-label", "Share app link.");
        attr_dev(button, "title", "Click to copy app link.");
        button.disabled = button_disabled_value = Boolean(
          /*message*/
          ctx[0]
        );
        add_location(button, file8, 22, 0, 446);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button, anchor);
        append_hydration_dev(button, div1);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div0, input);
        append_hydration_dev(div0, t0);
        mount_component(share2, div0, null);
        append_hydration_dev(div0, t1);
        mount_component(check, div0, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*copyAppLink*/
            ctx[1],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (!current || dirty & /*message*/
        1 && input_checked_value !== (input_checked_value = Boolean(
          /*message*/
          ctx2[0]
        ))) {
          prop_dev(input, "checked", input_checked_value);
        }
        if (!current || dirty & /*message*/
        1) {
          attr_dev(
            div1,
            "data-tip",
            /*message*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*Boolean, message*/
        1) {
          toggle_class(div1, "tooltip", Boolean(
            /*message*/
            ctx2[0]
          ));
        }
        if (!current || dirty & /*Boolean, message*/
        1) {
          toggle_class(div1, "tooltip-open", Boolean(
            /*message*/
            ctx2[0]
          ));
        }
        if (!current || dirty & /*message*/
        1 && button_disabled_value !== (button_disabled_value = Boolean(
          /*message*/
          ctx2[0]
        ))) {
          prop_dev(button, "disabled", button_disabled_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(share2.$$.fragment, local);
        transition_in(check.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(share2.$$.fragment, local);
        transition_out(check.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button);
        }
        destroy_component(share2);
        destroy_component(check);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment39.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance39($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ShareButton", slots, []);
    let message;
    async function copyAppLink() {
      const url = new URL(window.location.href);
      try {
        await navigator.clipboard.writeText(url.origin);
        $$invalidate(0, message = "App link copied!");
      } catch (e) {
        $$invalidate(0, message = "Copy to clipboard failed.");
      }
      setTimeout(
        () => {
          $$invalidate(0, message = "");
        },
        2e3
      );
    }
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ShareButton> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = () => ({ Check: check_default, Share2: share_2_default, message, copyAppLink });
    $$self.$inject_state = ($$props2) => {
      if ("message" in $$props2)
        $$invalidate(0, message = $$props2.message);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [message, copyAppLink];
  }
  var ShareButton = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance39, create_fragment39, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ShareButton",
        options,
        id: create_fragment39.name
      });
    }
  };
  var ShareButton_default = ShareButton;

  // svelte/SyncStatusBadge.svelte
  var SyncStatusBadge_exports = {};
  __export(SyncStatusBadge_exports, {
    default: () => SyncStatusBadge_default
  });

  // svelte/StateManagement.svelte
  var StateManagement_exports = {};
  __export(StateManagement_exports, {
    default: () => StateManagement_default,
    reconnectLiveViewIfDisconnected: () => reconnectLiveViewIfDisconnected,
    syncDocumentToServer: () => syncDocumentToServer
  });

  // node_modules/js-base64/base64.mjs
  var _hasatob = typeof atob === "function";
  var _hasbtoa = typeof btoa === "function";
  var _hasBuffer = typeof Buffer === "function";
  var _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
  var _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
  var b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var b64chs = Array.prototype.slice.call(b64ch);
  var b64tab = ((a) => {
    let tab = {};
    a.forEach((c, i) => tab[c] = i);
    return tab;
  })(b64chs);
  var b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
  var _fromCC = String.fromCharCode.bind(String);
  var _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));
  var _mkUriSafe = (src) => src.replace(/=/g, "").replace(/[+\/]/g, (m0) => m0 == "+" ? "-" : "_");
  var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, "");
  var btoaPolyfill = (bin) => {
    let u32, c0, c1, c2, asc = "";
    const pad = bin.length % 3;
    for (let i = 0; i < bin.length; ) {
      if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
        throw new TypeError("invalid character found");
      u32 = c0 << 16 | c1 << 8 | c2;
      asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
    }
    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
  };
  var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, "binary").toString("base64") : btoaPolyfill;
  var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString("base64") : (u8a) => {
    const maxargs = 4096;
    let strs = [];
    for (let i = 0, l = u8a.length; i < l; i += maxargs) {
      strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
    }
    return _btoa(strs.join(""));
  };
  var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
  var atobPolyfill = (asc) => {
    asc = asc.replace(/\s+/g, "");
    if (!b64re.test(asc))
      throw new TypeError("malformed base64.");
    asc += "==".slice(2 - (asc.length & 3));
    let u24, bin = "", r1, r2;
    for (let i = 0; i < asc.length; ) {
      u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
      bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }
    return bin;
  };
  var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, "base64").toString("binary") : atobPolyfill;
  var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, "base64")) : (a) => _U8Afrom(_atob(a).split("").map((c) => c.charCodeAt(0)));
  var toUint8Array = (a) => _toUint8Array(_unURI(a));
  var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == "-" ? "+" : "/"));

  // node_modules/yjs/dist/yjs.mjs
  var yjs_exports = {};
  __export(yjs_exports, {
    AbsolutePosition: () => AbsolutePosition,
    AbstractConnector: () => AbstractConnector,
    AbstractStruct: () => AbstractStruct,
    AbstractType: () => AbstractType,
    Array: () => YArray,
    ContentAny: () => ContentAny,
    ContentBinary: () => ContentBinary,
    ContentDeleted: () => ContentDeleted,
    ContentDoc: () => ContentDoc,
    ContentEmbed: () => ContentEmbed,
    ContentFormat: () => ContentFormat,
    ContentJSON: () => ContentJSON,
    ContentString: () => ContentString,
    ContentType: () => ContentType,
    Doc: () => Doc,
    GC: () => GC,
    ID: () => ID,
    Item: () => Item,
    Map: () => YMap,
    PermanentUserData: () => PermanentUserData,
    RelativePosition: () => RelativePosition,
    Skip: () => Skip,
    Snapshot: () => Snapshot,
    Text: () => YText,
    Transaction: () => Transaction,
    UndoManager: () => UndoManager,
    UpdateDecoderV1: () => UpdateDecoderV1,
    UpdateDecoderV2: () => UpdateDecoderV2,
    UpdateEncoderV1: () => UpdateEncoderV1,
    UpdateEncoderV2: () => UpdateEncoderV2,
    XmlElement: () => YXmlElement,
    XmlFragment: () => YXmlFragment,
    XmlHook: () => YXmlHook,
    XmlText: () => YXmlText,
    YArrayEvent: () => YArrayEvent,
    YEvent: () => YEvent,
    YMapEvent: () => YMapEvent,
    YTextEvent: () => YTextEvent,
    YXmlEvent: () => YXmlEvent,
    applyUpdate: () => applyUpdate,
    applyUpdateV2: () => applyUpdateV2,
    cleanupYTextFormatting: () => cleanupYTextFormatting,
    compareIDs: () => compareIDs,
    compareRelativePositions: () => compareRelativePositions,
    convertUpdateFormatV1ToV2: () => convertUpdateFormatV1ToV2,
    convertUpdateFormatV2ToV1: () => convertUpdateFormatV2ToV1,
    createAbsolutePositionFromRelativePosition: () => createAbsolutePositionFromRelativePosition,
    createDeleteSet: () => createDeleteSet,
    createDeleteSetFromStructStore: () => createDeleteSetFromStructStore,
    createDocFromSnapshot: () => createDocFromSnapshot,
    createID: () => createID,
    createRelativePositionFromJSON: () => createRelativePositionFromJSON,
    createRelativePositionFromTypeIndex: () => createRelativePositionFromTypeIndex,
    createSnapshot: () => createSnapshot,
    decodeRelativePosition: () => decodeRelativePosition,
    decodeSnapshot: () => decodeSnapshot,
    decodeSnapshotV2: () => decodeSnapshotV2,
    decodeStateVector: () => decodeStateVector,
    decodeUpdate: () => decodeUpdate,
    decodeUpdateV2: () => decodeUpdateV2,
    diffUpdate: () => diffUpdate,
    diffUpdateV2: () => diffUpdateV2,
    emptySnapshot: () => emptySnapshot,
    encodeRelativePosition: () => encodeRelativePosition,
    encodeSnapshot: () => encodeSnapshot,
    encodeSnapshotV2: () => encodeSnapshotV2,
    encodeStateAsUpdate: () => encodeStateAsUpdate,
    encodeStateAsUpdateV2: () => encodeStateAsUpdateV2,
    encodeStateVector: () => encodeStateVector,
    encodeStateVectorFromUpdate: () => encodeStateVectorFromUpdate,
    encodeStateVectorFromUpdateV2: () => encodeStateVectorFromUpdateV2,
    equalDeleteSets: () => equalDeleteSets,
    equalSnapshots: () => equalSnapshots,
    findIndexSS: () => findIndexSS,
    findRootTypeKey: () => findRootTypeKey,
    getItem: () => getItem,
    getState: () => getState,
    getTypeChildren: () => getTypeChildren,
    isDeleted: () => isDeleted,
    isParentOf: () => isParentOf,
    iterateDeletedStructs: () => iterateDeletedStructs,
    logType: () => logType,
    logUpdate: () => logUpdate,
    logUpdateV2: () => logUpdateV2,
    mergeUpdates: () => mergeUpdates,
    mergeUpdatesV2: () => mergeUpdatesV2,
    obfuscateUpdate: () => obfuscateUpdate,
    obfuscateUpdateV2: () => obfuscateUpdateV2,
    parseUpdateMeta: () => parseUpdateMeta,
    parseUpdateMetaV2: () => parseUpdateMetaV2,
    readUpdate: () => readUpdate,
    readUpdateV2: () => readUpdateV2,
    relativePositionToJSON: () => relativePositionToJSON,
    snapshot: () => snapshot,
    snapshotContainsUpdate: () => snapshotContainsUpdate,
    transact: () => transact,
    tryGc: () => tryGc,
    typeListToArraySnapshot: () => typeListToArraySnapshot,
    typeMapGetAllSnapshot: () => typeMapGetAllSnapshot,
    typeMapGetSnapshot: () => typeMapGetSnapshot
  });

  // node_modules/lib0/map.js
  var create = () => /* @__PURE__ */ new Map();
  var copy = (m) => {
    const r = create();
    m.forEach((v, k) => {
      r.set(k, v);
    });
    return r;
  };
  var setIfUndefined = (map2, key, createT) => {
    let set = map2.get(key);
    if (set === void 0) {
      map2.set(key, set = createT());
    }
    return set;
  };
  var map = (m, f) => {
    const res = [];
    for (const [key, value] of m) {
      res.push(f(value, key));
    }
    return res;
  };
  var any = (m, f) => {
    for (const [key, value] of m) {
      if (f(value, key)) {
        return true;
      }
    }
    return false;
  };

  // node_modules/lib0/set.js
  var create2 = () => /* @__PURE__ */ new Set();

  // node_modules/lib0/array.js
  var last = (arr) => arr[arr.length - 1];
  var appendTo = (dest, src) => {
    for (let i = 0; i < src.length; i++) {
      dest.push(src[i]);
    }
  };
  var from = Array.from;
  var some = (arr, f) => {
    for (let i = 0; i < arr.length; i++) {
      if (f(arr[i], i, arr)) {
        return true;
      }
    }
    return false;
  };
  var unfold = (len, f) => {
    const array = new Array(len);
    for (let i = 0; i < len; i++) {
      array[i] = f(i, array);
    }
    return array;
  };
  var isArray = Array.isArray;

  // node_modules/lib0/observable.js
  var Observable = class {
    constructor() {
      this._observers = create();
    }
    /**
     * @param {N} name
     * @param {function} f
     */
    on(name, f) {
      setIfUndefined(this._observers, name, create2).add(f);
    }
    /**
     * @param {N} name
     * @param {function} f
     */
    once(name, f) {
      const _f = (...args2) => {
        this.off(name, _f);
        f(...args2);
      };
      this.on(name, _f);
    }
    /**
     * @param {N} name
     * @param {function} f
     */
    off(name, f) {
      const observers = this._observers.get(name);
      if (observers !== void 0) {
        observers.delete(f);
        if (observers.size === 0) {
          this._observers.delete(name);
        }
      }
    }
    /**
     * Emit a named event. All registered event listeners that listen to the
     * specified name will receive the event.
     *
     * @todo This should catch exceptions
     *
     * @param {N} name The event name.
     * @param {Array<any>} args The arguments that are applied to the event listener.
     */
    emit(name, args2) {
      return from((this._observers.get(name) || create()).values()).forEach((f) => f(...args2));
    }
    destroy() {
      this._observers = create();
    }
  };

  // node_modules/lib0/math.js
  var floor = Math.floor;
  var abs = Math.abs;
  var min = (a, b) => a < b ? a : b;
  var max = (a, b) => a > b ? a : b;
  var isNaN2 = Number.isNaN;
  var isNegativeZero = (n) => n !== 0 ? n < 0 : 1 / n < 0;

  // node_modules/lib0/binary.js
  var BIT1 = 1;
  var BIT2 = 2;
  var BIT3 = 4;
  var BIT4 = 8;
  var BIT6 = 32;
  var BIT7 = 64;
  var BIT8 = 128;
  var BIT18 = 1 << 17;
  var BIT19 = 1 << 18;
  var BIT20 = 1 << 19;
  var BIT21 = 1 << 20;
  var BIT22 = 1 << 21;
  var BIT23 = 1 << 22;
  var BIT24 = 1 << 23;
  var BIT25 = 1 << 24;
  var BIT26 = 1 << 25;
  var BIT27 = 1 << 26;
  var BIT28 = 1 << 27;
  var BIT29 = 1 << 28;
  var BIT30 = 1 << 29;
  var BIT31 = 1 << 30;
  var BIT32 = 1 << 31;
  var BITS5 = 31;
  var BITS6 = 63;
  var BITS7 = 127;
  var BITS17 = BIT18 - 1;
  var BITS18 = BIT19 - 1;
  var BITS19 = BIT20 - 1;
  var BITS20 = BIT21 - 1;
  var BITS21 = BIT22 - 1;
  var BITS22 = BIT23 - 1;
  var BITS23 = BIT24 - 1;
  var BITS24 = BIT25 - 1;
  var BITS25 = BIT26 - 1;
  var BITS26 = BIT27 - 1;
  var BITS27 = BIT28 - 1;
  var BITS28 = BIT29 - 1;
  var BITS29 = BIT30 - 1;
  var BITS30 = BIT31 - 1;
  var BITS31 = 2147483647;

  // node_modules/lib0/number.js
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
  var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;
  var LOWEST_INT32 = 1 << 31;
  var isInteger = Number.isInteger || ((num) => typeof num === "number" && isFinite(num) && floor(num) === num);
  var isNaN3 = Number.isNaN;
  var parseInt2 = Number.parseInt;

  // node_modules/lib0/string.js
  var fromCharCode = String.fromCharCode;
  var fromCodePoint = String.fromCodePoint;
  var MAX_UTF16_CHARACTER = fromCharCode(65535);
  var toLowerCase = (s) => s.toLowerCase();
  var trimLeftRegex = /^\s*/g;
  var trimLeft = (s) => s.replace(trimLeftRegex, "");
  var fromCamelCaseRegex = /([A-Z])/g;
  var fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, (match) => `${separator}${toLowerCase(match)}`));
  var _encodeUtf8Polyfill = (str) => {
    const encodedString = unescape(encodeURIComponent(str));
    const len = encodedString.length;
    const buf = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      buf[i] = /** @type {number} */
      encodedString.codePointAt(i);
    }
    return buf;
  };
  var utf8TextEncoder = (
    /** @type {TextEncoder} */
    typeof TextEncoder !== "undefined" ? new TextEncoder() : null
  );
  var _encodeUtf8Native = (str) => utf8TextEncoder.encode(str);
  var encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;
  var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8", { fatal: true, ignoreBOM: true });
  if (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {
    utf8TextDecoder = null;
  }
  var repeat = (source, n) => unfold(n, () => source).join("");

  // node_modules/lib0/encoding.js
  var Encoder = class {
    constructor() {
      this.cpos = 0;
      this.cbuf = new Uint8Array(100);
      this.bufs = [];
    }
  };
  var createEncoder = () => new Encoder();
  var length = (encoder) => {
    let len = encoder.cpos;
    for (let i = 0; i < encoder.bufs.length; i++) {
      len += encoder.bufs[i].length;
    }
    return len;
  };
  var toUint8Array2 = (encoder) => {
    const uint8arr = new Uint8Array(length(encoder));
    let curPos = 0;
    for (let i = 0; i < encoder.bufs.length; i++) {
      const d = encoder.bufs[i];
      uint8arr.set(d, curPos);
      curPos += d.length;
    }
    uint8arr.set(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos), curPos);
    return uint8arr;
  };
  var verifyLen = (encoder, len) => {
    const bufferLen = encoder.cbuf.length;
    if (bufferLen - encoder.cpos < len) {
      encoder.bufs.push(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos));
      encoder.cbuf = new Uint8Array(max(bufferLen, len) * 2);
      encoder.cpos = 0;
    }
  };
  var write = (encoder, num) => {
    const bufferLen = encoder.cbuf.length;
    if (encoder.cpos === bufferLen) {
      encoder.bufs.push(encoder.cbuf);
      encoder.cbuf = new Uint8Array(bufferLen * 2);
      encoder.cpos = 0;
    }
    encoder.cbuf[encoder.cpos++] = num;
  };
  var writeUint8 = write;
  var writeVarUint = (encoder, num) => {
    while (num > BITS7) {
      write(encoder, BIT8 | BITS7 & num);
      num = floor(num / 128);
    }
    write(encoder, BITS7 & num);
  };
  var writeVarInt = (encoder, num) => {
    const isNegative = isNegativeZero(num);
    if (isNegative) {
      num = -num;
    }
    write(encoder, (num > BITS6 ? BIT8 : 0) | (isNegative ? BIT7 : 0) | BITS6 & num);
    num = floor(num / 64);
    while (num > 0) {
      write(encoder, (num > BITS7 ? BIT8 : 0) | BITS7 & num);
      num = floor(num / 128);
    }
  };
  var _strBuffer = new Uint8Array(3e4);
  var _maxStrBSize = _strBuffer.length / 3;
  var _writeVarStringNative = (encoder, str) => {
    if (str.length < _maxStrBSize) {
      const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;
      writeVarUint(encoder, written);
      for (let i = 0; i < written; i++) {
        write(encoder, _strBuffer[i]);
      }
    } else {
      writeVarUint8Array(encoder, encodeUtf8(str));
    }
  };
  var _writeVarStringPolyfill = (encoder, str) => {
    const encodedString = unescape(encodeURIComponent(str));
    const len = encodedString.length;
    writeVarUint(encoder, len);
    for (let i = 0; i < len; i++) {
      write(
        encoder,
        /** @type {number} */
        encodedString.codePointAt(i)
      );
    }
  };
  var writeVarString = utf8TextEncoder && /** @type {any} */
  utf8TextEncoder.encodeInto ? _writeVarStringNative : _writeVarStringPolyfill;
  var writeBinaryEncoder = (encoder, append3) => writeUint8Array(encoder, toUint8Array2(append3));
  var writeUint8Array = (encoder, uint8Array) => {
    const bufferLen = encoder.cbuf.length;
    const cpos = encoder.cpos;
    const leftCopyLen = min(bufferLen - cpos, uint8Array.length);
    const rightCopyLen = uint8Array.length - leftCopyLen;
    encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);
    encoder.cpos += leftCopyLen;
    if (rightCopyLen > 0) {
      encoder.bufs.push(encoder.cbuf);
      encoder.cbuf = new Uint8Array(max(bufferLen * 2, rightCopyLen));
      encoder.cbuf.set(uint8Array.subarray(leftCopyLen));
      encoder.cpos = rightCopyLen;
    }
  };
  var writeVarUint8Array = (encoder, uint8Array) => {
    writeVarUint(encoder, uint8Array.byteLength);
    writeUint8Array(encoder, uint8Array);
  };
  var writeOnDataView = (encoder, len) => {
    verifyLen(encoder, len);
    const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);
    encoder.cpos += len;
    return dview;
  };
  var writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false);
  var writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false);
  var writeBigInt64 = (encoder, num) => (
    /** @type {any} */
    writeOnDataView(encoder, 8).setBigInt64(0, num, false)
  );
  var floatTestBed = new DataView(new ArrayBuffer(4));
  var isFloat32 = (num) => {
    floatTestBed.setFloat32(0, num);
    return floatTestBed.getFloat32(0) === num;
  };
  var writeAny = (encoder, data) => {
    switch (typeof data) {
      case "string":
        write(encoder, 119);
        writeVarString(encoder, data);
        break;
      case "number":
        if (isInteger(data) && abs(data) <= BITS31) {
          write(encoder, 125);
          writeVarInt(encoder, data);
        } else if (isFloat32(data)) {
          write(encoder, 124);
          writeFloat32(encoder, data);
        } else {
          write(encoder, 123);
          writeFloat64(encoder, data);
        }
        break;
      case "bigint":
        write(encoder, 122);
        writeBigInt64(encoder, data);
        break;
      case "object":
        if (data === null) {
          write(encoder, 126);
        } else if (isArray(data)) {
          write(encoder, 117);
          writeVarUint(encoder, data.length);
          for (let i = 0; i < data.length; i++) {
            writeAny(encoder, data[i]);
          }
        } else if (data instanceof Uint8Array) {
          write(encoder, 116);
          writeVarUint8Array(encoder, data);
        } else {
          write(encoder, 118);
          const keys2 = Object.keys(data);
          writeVarUint(encoder, keys2.length);
          for (let i = 0; i < keys2.length; i++) {
            const key = keys2[i];
            writeVarString(encoder, key);
            writeAny(encoder, data[key]);
          }
        }
        break;
      case "boolean":
        write(encoder, data ? 120 : 121);
        break;
      default:
        write(encoder, 127);
    }
  };
  var RleEncoder = class extends Encoder {
    /**
     * @param {function(Encoder, T):void} writer
     */
    constructor(writer) {
      super();
      this.w = writer;
      this.s = null;
      this.count = 0;
    }
    /**
     * @param {T} v
     */
    write(v) {
      if (this.s === v) {
        this.count++;
      } else {
        if (this.count > 0) {
          writeVarUint(this, this.count - 1);
        }
        this.count = 1;
        this.w(this, v);
        this.s = v;
      }
    }
  };
  var flushUintOptRleEncoder = (encoder) => {
    if (encoder.count > 0) {
      writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);
      if (encoder.count > 1) {
        writeVarUint(encoder.encoder, encoder.count - 2);
      }
    }
  };
  var UintOptRleEncoder = class {
    constructor() {
      this.encoder = new Encoder();
      this.s = 0;
      this.count = 0;
    }
    /**
     * @param {number} v
     */
    write(v) {
      if (this.s === v) {
        this.count++;
      } else {
        flushUintOptRleEncoder(this);
        this.count = 1;
        this.s = v;
      }
    }
    /**
     * Flush the encoded state and transform this to a Uint8Array.
     *
     * Note that this should only be called once.
     */
    toUint8Array() {
      flushUintOptRleEncoder(this);
      return toUint8Array2(this.encoder);
    }
  };
  var flushIntDiffOptRleEncoder = (encoder) => {
    if (encoder.count > 0) {
      const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);
      writeVarInt(encoder.encoder, encodedDiff);
      if (encoder.count > 1) {
        writeVarUint(encoder.encoder, encoder.count - 2);
      }
    }
  };
  var IntDiffOptRleEncoder = class {
    constructor() {
      this.encoder = new Encoder();
      this.s = 0;
      this.count = 0;
      this.diff = 0;
    }
    /**
     * @param {number} v
     */
    write(v) {
      if (this.diff === v - this.s) {
        this.s = v;
        this.count++;
      } else {
        flushIntDiffOptRleEncoder(this);
        this.count = 1;
        this.diff = v - this.s;
        this.s = v;
      }
    }
    /**
     * Flush the encoded state and transform this to a Uint8Array.
     *
     * Note that this should only be called once.
     */
    toUint8Array() {
      flushIntDiffOptRleEncoder(this);
      return toUint8Array2(this.encoder);
    }
  };
  var StringEncoder = class {
    constructor() {
      this.sarr = [];
      this.s = "";
      this.lensE = new UintOptRleEncoder();
    }
    /**
     * @param {string} string
     */
    write(string) {
      this.s += string;
      if (this.s.length > 19) {
        this.sarr.push(this.s);
        this.s = "";
      }
      this.lensE.write(string.length);
    }
    toUint8Array() {
      const encoder = new Encoder();
      this.sarr.push(this.s);
      this.s = "";
      writeVarString(encoder, this.sarr.join(""));
      writeUint8Array(encoder, this.lensE.toUint8Array());
      return toUint8Array2(encoder);
    }
  };

  // node_modules/lib0/error.js
  var create3 = (s) => new Error(s);
  var methodUnimplemented = () => {
    throw create3("Method unimplemented");
  };
  var unexpectedCase = () => {
    throw create3("Unexpected case");
  };

  // node_modules/lib0/decoding.js
  var errorUnexpectedEndOfArray = create3("Unexpected end of array");
  var errorIntegerOutOfRange = create3("Integer out of Range");
  var Decoder = class {
    /**
     * @param {Uint8Array} uint8Array Binary data to decode
     */
    constructor(uint8Array) {
      this.arr = uint8Array;
      this.pos = 0;
    }
  };
  var createDecoder = (uint8Array) => new Decoder(uint8Array);
  var hasContent = (decoder) => decoder.pos !== decoder.arr.length;
  var readUint8Array = (decoder, len) => {
    const view = new Uint8Array(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);
    decoder.pos += len;
    return view;
  };
  var readVarUint8Array = (decoder) => readUint8Array(decoder, readVarUint(decoder));
  var readUint8 = (decoder) => decoder.arr[decoder.pos++];
  var readVarUint = (decoder) => {
    let num = 0;
    let mult = 1;
    const len = decoder.arr.length;
    while (decoder.pos < len) {
      const r = decoder.arr[decoder.pos++];
      num = num + (r & BITS7) * mult;
      mult *= 128;
      if (r < BIT8) {
        return num;
      }
      if (num > MAX_SAFE_INTEGER) {
        throw errorIntegerOutOfRange;
      }
    }
    throw errorUnexpectedEndOfArray;
  };
  var readVarInt = (decoder) => {
    let r = decoder.arr[decoder.pos++];
    let num = r & BITS6;
    let mult = 64;
    const sign = (r & BIT7) > 0 ? -1 : 1;
    if ((r & BIT8) === 0) {
      return sign * num;
    }
    const len = decoder.arr.length;
    while (decoder.pos < len) {
      r = decoder.arr[decoder.pos++];
      num = num + (r & BITS7) * mult;
      mult *= 128;
      if (r < BIT8) {
        return sign * num;
      }
      if (num > MAX_SAFE_INTEGER) {
        throw errorIntegerOutOfRange;
      }
    }
    throw errorUnexpectedEndOfArray;
  };
  var _readVarStringPolyfill = (decoder) => {
    let remainingLen = readVarUint(decoder);
    if (remainingLen === 0) {
      return "";
    } else {
      let encodedString = String.fromCodePoint(readUint8(decoder));
      if (--remainingLen < 100) {
        while (remainingLen--) {
          encodedString += String.fromCodePoint(readUint8(decoder));
        }
      } else {
        while (remainingLen > 0) {
          const nextLen = remainingLen < 1e4 ? remainingLen : 1e4;
          const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);
          decoder.pos += nextLen;
          encodedString += String.fromCodePoint.apply(
            null,
            /** @type {any} */
            bytes
          );
          remainingLen -= nextLen;
        }
      }
      return decodeURIComponent(escape(encodedString));
    }
  };
  var _readVarStringNative = (decoder) => (
    /** @type any */
    utf8TextDecoder.decode(readVarUint8Array(decoder))
  );
  var readVarString = utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill;
  var readFromDataView = (decoder, len) => {
    const dv = new DataView(decoder.arr.buffer, decoder.arr.byteOffset + decoder.pos, len);
    decoder.pos += len;
    return dv;
  };
  var readFloat32 = (decoder) => readFromDataView(decoder, 4).getFloat32(0, false);
  var readFloat64 = (decoder) => readFromDataView(decoder, 8).getFloat64(0, false);
  var readBigInt64 = (decoder) => (
    /** @type {any} */
    readFromDataView(decoder, 8).getBigInt64(0, false)
  );
  var readAnyLookupTable = [
    (decoder) => void 0,
    // CASE 127: undefined
    (decoder) => null,
    // CASE 126: null
    readVarInt,
    // CASE 125: integer
    readFloat32,
    // CASE 124: float32
    readFloat64,
    // CASE 123: float64
    readBigInt64,
    // CASE 122: bigint
    (decoder) => false,
    // CASE 121: boolean (false)
    (decoder) => true,
    // CASE 120: boolean (true)
    readVarString,
    // CASE 119: string
    (decoder) => {
      const len = readVarUint(decoder);
      const obj = {};
      for (let i = 0; i < len; i++) {
        const key = readVarString(decoder);
        obj[key] = readAny(decoder);
      }
      return obj;
    },
    (decoder) => {
      const len = readVarUint(decoder);
      const arr = [];
      for (let i = 0; i < len; i++) {
        arr.push(readAny(decoder));
      }
      return arr;
    },
    readVarUint8Array
    // CASE 116: Uint8Array
  ];
  var readAny = (decoder) => readAnyLookupTable[127 - readUint8(decoder)](decoder);
  var RleDecoder = class extends Decoder {
    /**
     * @param {Uint8Array} uint8Array
     * @param {function(Decoder):T} reader
     */
    constructor(uint8Array, reader) {
      super(uint8Array);
      this.reader = reader;
      this.s = null;
      this.count = 0;
    }
    read() {
      if (this.count === 0) {
        this.s = this.reader(this);
        if (hasContent(this)) {
          this.count = readVarUint(this) + 1;
        } else {
          this.count = -1;
        }
      }
      this.count--;
      return (
        /** @type {T} */
        this.s
      );
    }
  };
  var UintOptRleDecoder = class extends Decoder {
    /**
     * @param {Uint8Array} uint8Array
     */
    constructor(uint8Array) {
      super(uint8Array);
      this.s = 0;
      this.count = 0;
    }
    read() {
      if (this.count === 0) {
        this.s = readVarInt(this);
        const isNegative = isNegativeZero(this.s);
        this.count = 1;
        if (isNegative) {
          this.s = -this.s;
          this.count = readVarUint(this) + 2;
        }
      }
      this.count--;
      return (
        /** @type {number} */
        this.s
      );
    }
  };
  var IntDiffOptRleDecoder = class extends Decoder {
    /**
     * @param {Uint8Array} uint8Array
     */
    constructor(uint8Array) {
      super(uint8Array);
      this.s = 0;
      this.count = 0;
      this.diff = 0;
    }
    /**
     * @return {number}
     */
    read() {
      if (this.count === 0) {
        const diff = readVarInt(this);
        const hasCount = diff & 1;
        this.diff = floor(diff / 2);
        this.count = 1;
        if (hasCount) {
          this.count = readVarUint(this) + 2;
        }
      }
      this.s += this.diff;
      this.count--;
      return this.s;
    }
  };
  var StringDecoder = class {
    /**
     * @param {Uint8Array} uint8Array
     */
    constructor(uint8Array) {
      this.decoder = new UintOptRleDecoder(uint8Array);
      this.str = readVarString(this.decoder);
      this.spos = 0;
    }
    /**
     * @return {string}
     */
    read() {
      const end = this.spos + this.decoder.read();
      const res = this.str.slice(this.spos, end);
      this.spos = end;
      return res;
    }
  };

  // node_modules/lib0/webcrypto.js
  var subtle = crypto.subtle;
  var getRandomValues = crypto.getRandomValues.bind(crypto);

  // node_modules/lib0/random.js
  var uint32 = () => getRandomValues(new Uint32Array(1))[0];
  var uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11;
  var uuidv4 = () => uuidv4Template.replace(
    /[018]/g,
    /** @param {number} c */
    (c) => (c ^ uint32() & 15 >> c / 4).toString(16)
  );

  // node_modules/lib0/time.js
  var getUnixTime = Date.now;

  // node_modules/lib0/promise.js
  var create4 = (f) => (
    /** @type {Promise<T>} */
    new Promise(f)
  );
  var all = Promise.all.bind(Promise);

  // node_modules/lib0/conditions.js
  var undefinedToNull = (v) => v === void 0 ? null : v;

  // node_modules/lib0/storage.js
  var VarStoragePolyfill = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    /**
     * @param {string} key
     * @param {any} newValue
     */
    setItem(key, newValue) {
      this.map.set(key, newValue);
    }
    /**
     * @param {string} key
     */
    getItem(key) {
      return this.map.get(key);
    }
  };
  var _localStorage = new VarStoragePolyfill();
  var usePolyfill = true;
  try {
    if (typeof localStorage !== "undefined" && localStorage) {
      _localStorage = localStorage;
      usePolyfill = false;
    }
  } catch (e) {
  }
  var varStorage = _localStorage;

  // node_modules/lib0/object.js
  var assign2 = Object.assign;
  var keys = Object.keys;
  var forEach = (obj, f) => {
    for (const key in obj) {
      f(obj[key], key);
    }
  };
  var length2 = (obj) => keys(obj).length;
  var isEmpty2 = (obj) => {
    for (const _k in obj) {
      return false;
    }
    return true;
  };
  var every = (obj, f) => {
    for (const key in obj) {
      if (!f(obj[key], key)) {
        return false;
      }
    }
    return true;
  };
  var hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
  var equalFlat = (a, b) => a === b || length2(a) === length2(b) && every(a, (val, key) => (val !== void 0 || hasProperty(b, key)) && b[key] === val);

  // node_modules/lib0/function.js
  var callAll = (fs, args2, i = 0) => {
    try {
      for (; i < fs.length; i++) {
        fs[i](...args2);
      }
    } finally {
      if (i < fs.length) {
        callAll(fs, args2, i + 1);
      }
    }
  };
  var id = (a) => a;
  var isOneOf = (value, options) => options.includes(value);

  // node_modules/lib0/environment.js
  var isNode = typeof process !== "undefined" && process.release && /node|io\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
  var isMac = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
  var params;
  var args = [];
  var computeParams = () => {
    if (params === void 0) {
      if (isNode) {
        params = create();
        const pargs = process.argv;
        let currParamName = null;
        for (let i = 0; i < pargs.length; i++) {
          const parg = pargs[i];
          if (parg[0] === "-") {
            if (currParamName !== null) {
              params.set(currParamName, "");
            }
            currParamName = parg;
          } else {
            if (currParamName !== null) {
              params.set(currParamName, parg);
              currParamName = null;
            } else {
              args.push(parg);
            }
          }
        }
        if (currParamName !== null) {
          params.set(currParamName, "");
        }
      } else if (typeof location === "object") {
        params = create();
        (location.search || "?").slice(1).split("&").forEach((kv) => {
          if (kv.length !== 0) {
            const [key, value] = kv.split("=");
            params.set(`--${fromCamelCase(key, "-")}`, value);
            params.set(`-${fromCamelCase(key, "-")}`, value);
          }
        });
      } else {
        params = create();
      }
    }
    return params;
  };
  var hasParam = (name) => computeParams().has(name);
  var getVariable = (name) => isNode ? undefinedToNull(process.env[name.toUpperCase()]) : undefinedToNull(varStorage.getItem(name));
  var hasConf = (name) => hasParam("--" + name) || getVariable(name) !== null;
  var production = hasConf("production");
  var forceColor = isNode && isOneOf(process.env.FORCE_COLOR, ["true", "1", "2"]);
  var supportsColor = !hasParam("no-colors") && (!isNode || process.stdout.isTTY || forceColor) && (!isNode || hasParam("color") || forceColor || getVariable("COLORTERM") !== null || (getVariable("TERM") || "").includes("color"));

  // node_modules/lib0/buffer.js
  var createUint8ArrayFromLen = (len) => new Uint8Array(len);
  var copyUint8Array = (uint8Array) => {
    const newBuf = createUint8ArrayFromLen(uint8Array.byteLength);
    newBuf.set(uint8Array);
    return newBuf;
  };

  // node_modules/lib0/pair.js
  var Pair = class {
    /**
     * @param {L} left
     * @param {R} right
     */
    constructor(left, right) {
      this.left = left;
      this.right = right;
    }
  };
  var create5 = (left, right) => new Pair(left, right);

  // node_modules/lib0/dom.js
  var doc2 = (
    /** @type {Document} */
    typeof document !== "undefined" ? document : {}
  );
  var domParser = (
    /** @type {DOMParser} */
    typeof DOMParser !== "undefined" ? new DOMParser() : null
  );
  var mapToStyleString = (m) => map(m, (value, key) => `${key}:${value};`).join("");
  var ELEMENT_NODE2 = doc2.ELEMENT_NODE;
  var TEXT_NODE2 = doc2.TEXT_NODE;
  var CDATA_SECTION_NODE = doc2.CDATA_SECTION_NODE;
  var COMMENT_NODE2 = doc2.COMMENT_NODE;
  var DOCUMENT_NODE = doc2.DOCUMENT_NODE;
  var DOCUMENT_TYPE_NODE = doc2.DOCUMENT_TYPE_NODE;
  var DOCUMENT_FRAGMENT_NODE2 = doc2.DOCUMENT_FRAGMENT_NODE;

  // node_modules/lib0/symbol.js
  var create6 = Symbol;

  // node_modules/lib0/logging.common.js
  var BOLD = create6();
  var UNBOLD = create6();
  var BLUE = create6();
  var GREY = create6();
  var GREEN = create6();
  var RED = create6();
  var PURPLE = create6();
  var ORANGE = create6();
  var UNCOLOR = create6();
  var computeNoColorLoggingArgs = (args2) => {
    const strBuilder = [];
    const logArgs = [];
    let i = 0;
    for (; i < args2.length; i++) {
      const arg = args2[i];
      if (arg.constructor === String || arg.constructor === Number) {
        strBuilder.push(arg);
      } else if (arg.constructor === Object) {
        logArgs.push(JSON.stringify(arg));
      }
    }
    return logArgs;
  };
  var lastLoggingTime = getUnixTime();

  // node_modules/lib0/logging.js
  var _browserStyleMap = {
    [BOLD]: create5("font-weight", "bold"),
    [UNBOLD]: create5("font-weight", "normal"),
    [BLUE]: create5("color", "blue"),
    [GREEN]: create5("color", "green"),
    [GREY]: create5("color", "grey"),
    [RED]: create5("color", "red"),
    [PURPLE]: create5("color", "purple"),
    [ORANGE]: create5("color", "orange"),
    // not well supported in chrome when debugging node with inspector - TODO: deprecate
    [UNCOLOR]: create5("color", "black")
  };
  var computeBrowserLoggingArgs = (args2) => {
    const strBuilder = [];
    const styles = [];
    const currentStyle = create();
    let logArgs = [];
    let i = 0;
    for (; i < args2.length; i++) {
      const arg = args2[i];
      const style = _browserStyleMap[arg];
      if (style !== void 0) {
        currentStyle.set(style.left, style.right);
      } else {
        if (arg.constructor === String || arg.constructor === Number) {
          const style2 = mapToStyleString(currentStyle);
          if (i > 0 || style2.length > 0) {
            strBuilder.push("%c" + arg);
            styles.push(style2);
          } else {
            strBuilder.push(arg);
          }
        } else {
          break;
        }
      }
    }
    if (i > 0) {
      logArgs = styles;
      logArgs.unshift(strBuilder.join(""));
    }
    for (; i < args2.length; i++) {
      const arg = args2[i];
      if (!(arg instanceof Symbol)) {
        logArgs.push(arg);
      }
    }
    return logArgs;
  };
  var computeLoggingArgs = supportsColor ? computeBrowserLoggingArgs : computeNoColorLoggingArgs;
  var print = (...args2) => {
    console.log(...computeLoggingArgs(args2));
    vconsoles.forEach((vc) => vc.print(args2));
  };
  var warn = (...args2) => {
    console.warn(...computeLoggingArgs(args2));
    args2.unshift(ORANGE);
    vconsoles.forEach((vc) => vc.print(args2));
  };
  var vconsoles = create2();

  // node_modules/lib0/iterator.js
  var createIterator = (next2) => ({
    /**
     * @return {IterableIterator<T>}
     */
    [Symbol.iterator]() {
      return this;
    },
    // @ts-ignore
    next: next2
  });
  var iteratorFilter = (iterator, filter) => createIterator(() => {
    let res;
    do {
      res = iterator.next();
    } while (!res.done && !filter(res.value));
    return res;
  });
  var iteratorMap = (iterator, fmap) => createIterator(() => {
    const { done, value } = iterator.next();
    return { done, value: done ? void 0 : fmap(value) };
  });

  // node_modules/yjs/dist/yjs.mjs
  var AbstractConnector = class extends Observable {
    /**
     * @param {Doc} ydoc
     * @param {any} awareness
     */
    constructor(ydoc, awareness) {
      super();
      this.doc = ydoc;
      this.awareness = awareness;
    }
  };
  var DeleteItem = class {
    /**
     * @param {number} clock
     * @param {number} len
     */
    constructor(clock, len) {
      this.clock = clock;
      this.len = len;
    }
  };
  var DeleteSet = class {
    constructor() {
      this.clients = /* @__PURE__ */ new Map();
    }
  };
  var iterateDeletedStructs = (transaction, ds, f) => ds.clients.forEach((deletes, clientid) => {
    const structs = (
      /** @type {Array<GC|Item>} */
      transaction.doc.store.clients.get(clientid)
    );
    for (let i = 0; i < deletes.length; i++) {
      const del2 = deletes[i];
      iterateStructs(transaction, structs, del2.clock, del2.len, f);
    }
  });
  var findIndexDS = (dis, clock) => {
    let left = 0;
    let right = dis.length - 1;
    while (left <= right) {
      const midindex = floor((left + right) / 2);
      const mid = dis[midindex];
      const midclock = mid.clock;
      if (midclock <= clock) {
        if (clock < midclock + mid.len) {
          return midindex;
        }
        left = midindex + 1;
      } else {
        right = midindex - 1;
      }
    }
    return null;
  };
  var isDeleted = (ds, id2) => {
    const dis = ds.clients.get(id2.client);
    return dis !== void 0 && findIndexDS(dis, id2.clock) !== null;
  };
  var sortAndMergeDeleteSet = (ds) => {
    ds.clients.forEach((dels) => {
      dels.sort((a, b) => a.clock - b.clock);
      let i, j;
      for (i = 1, j = 1; i < dels.length; i++) {
        const left = dels[j - 1];
        const right = dels[i];
        if (left.clock + left.len >= right.clock) {
          left.len = max(left.len, right.clock + right.len - left.clock);
        } else {
          if (j < i) {
            dels[j] = right;
          }
          j++;
        }
      }
      dels.length = j;
    });
  };
  var mergeDeleteSets = (dss) => {
    const merged = new DeleteSet();
    for (let dssI = 0; dssI < dss.length; dssI++) {
      dss[dssI].clients.forEach((delsLeft, client) => {
        if (!merged.clients.has(client)) {
          const dels = delsLeft.slice();
          for (let i = dssI + 1; i < dss.length; i++) {
            appendTo(dels, dss[i].clients.get(client) || []);
          }
          merged.clients.set(client, dels);
        }
      });
    }
    sortAndMergeDeleteSet(merged);
    return merged;
  };
  var addToDeleteSet = (ds, client, clock, length3) => {
    setIfUndefined(ds.clients, client, () => (
      /** @type {Array<DeleteItem>} */
      []
    )).push(new DeleteItem(clock, length3));
  };
  var createDeleteSet = () => new DeleteSet();
  var createDeleteSetFromStructStore = (ss) => {
    const ds = createDeleteSet();
    ss.clients.forEach((structs, client) => {
      const dsitems = [];
      for (let i = 0; i < structs.length; i++) {
        const struct = structs[i];
        if (struct.deleted) {
          const clock = struct.id.clock;
          let len = struct.length;
          if (i + 1 < structs.length) {
            for (let next2 = structs[i + 1]; i + 1 < structs.length && next2.deleted; next2 = structs[++i + 1]) {
              len += next2.length;
            }
          }
          dsitems.push(new DeleteItem(clock, len));
        }
      }
      if (dsitems.length > 0) {
        ds.clients.set(client, dsitems);
      }
    });
    return ds;
  };
  var writeDeleteSet = (encoder, ds) => {
    writeVarUint(encoder.restEncoder, ds.clients.size);
    from(ds.clients.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, dsitems]) => {
      encoder.resetDsCurVal();
      writeVarUint(encoder.restEncoder, client);
      const len = dsitems.length;
      writeVarUint(encoder.restEncoder, len);
      for (let i = 0; i < len; i++) {
        const item = dsitems[i];
        encoder.writeDsClock(item.clock);
        encoder.writeDsLen(item.len);
      }
    });
  };
  var readDeleteSet = (decoder) => {
    const ds = new DeleteSet();
    const numClients = readVarUint(decoder.restDecoder);
    for (let i = 0; i < numClients; i++) {
      decoder.resetDsCurVal();
      const client = readVarUint(decoder.restDecoder);
      const numberOfDeletes = readVarUint(decoder.restDecoder);
      if (numberOfDeletes > 0) {
        const dsField = setIfUndefined(ds.clients, client, () => (
          /** @type {Array<DeleteItem>} */
          []
        ));
        for (let i2 = 0; i2 < numberOfDeletes; i2++) {
          dsField.push(new DeleteItem(decoder.readDsClock(), decoder.readDsLen()));
        }
      }
    }
    return ds;
  };
  var readAndApplyDeleteSet = (decoder, transaction, store) => {
    const unappliedDS = new DeleteSet();
    const numClients = readVarUint(decoder.restDecoder);
    for (let i = 0; i < numClients; i++) {
      decoder.resetDsCurVal();
      const client = readVarUint(decoder.restDecoder);
      const numberOfDeletes = readVarUint(decoder.restDecoder);
      const structs = store.clients.get(client) || [];
      const state = getState(store, client);
      for (let i2 = 0; i2 < numberOfDeletes; i2++) {
        const clock = decoder.readDsClock();
        const clockEnd = clock + decoder.readDsLen();
        if (clock < state) {
          if (state < clockEnd) {
            addToDeleteSet(unappliedDS, client, state, clockEnd - state);
          }
          let index = findIndexSS(structs, clock);
          let struct = structs[index];
          if (!struct.deleted && struct.id.clock < clock) {
            structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));
            index++;
          }
          while (index < structs.length) {
            struct = structs[index++];
            if (struct.id.clock < clockEnd) {
              if (!struct.deleted) {
                if (clockEnd < struct.id.clock + struct.length) {
                  structs.splice(index, 0, splitItem(transaction, struct, clockEnd - struct.id.clock));
                }
                struct.delete(transaction);
              }
            } else {
              break;
            }
          }
        } else {
          addToDeleteSet(unappliedDS, client, clock, clockEnd - clock);
        }
      }
    }
    if (unappliedDS.clients.size > 0) {
      const ds = new UpdateEncoderV2();
      writeVarUint(ds.restEncoder, 0);
      writeDeleteSet(ds, unappliedDS);
      return ds.toUint8Array();
    }
    return null;
  };
  var equalDeleteSets = (ds1, ds2) => {
    if (ds1.clients.size !== ds2.clients.size)
      return false;
    for (const [client, deleteItems1] of ds1.clients.entries()) {
      const deleteItems2 = (
        /** @type {Array<import('../internals.js').DeleteItem>} */
        ds2.clients.get(client)
      );
      if (deleteItems2 === void 0 || deleteItems1.length !== deleteItems2.length)
        return false;
      for (let i = 0; i < deleteItems1.length; i++) {
        const di1 = deleteItems1[i];
        const di2 = deleteItems2[i];
        if (di1.clock !== di2.clock || di1.len !== di2.len) {
          return false;
        }
      }
    }
    return true;
  };
  var generateNewClientId = uint32;
  var Doc = class extends Observable {
    /**
     * @param {DocOpts} opts configuration
     */
    constructor({ guid = uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta = null, autoLoad = false, shouldLoad = true } = {}) {
      super();
      this.gc = gc;
      this.gcFilter = gcFilter;
      this.clientID = generateNewClientId();
      this.guid = guid;
      this.collectionid = collectionid;
      this.share = /* @__PURE__ */ new Map();
      this.store = new StructStore();
      this._transaction = null;
      this._transactionCleanups = [];
      this.subdocs = /* @__PURE__ */ new Set();
      this._item = null;
      this.shouldLoad = shouldLoad;
      this.autoLoad = autoLoad;
      this.meta = meta;
      this.isLoaded = false;
      this.isSynced = false;
      this.whenLoaded = create4((resolve) => {
        this.on("load", () => {
          this.isLoaded = true;
          resolve(this);
        });
      });
      const provideSyncedPromise = () => create4((resolve) => {
        const eventHandler = (isSynced) => {
          if (isSynced === void 0 || isSynced === true) {
            this.off("sync", eventHandler);
            resolve();
          }
        };
        this.on("sync", eventHandler);
      });
      this.on("sync", (isSynced) => {
        if (isSynced === false && this.isSynced) {
          this.whenSynced = provideSyncedPromise();
        }
        this.isSynced = isSynced === void 0 || isSynced === true;
        if (this.isSynced && !this.isLoaded) {
          this.emit("load", []);
        }
      });
      this.whenSynced = provideSyncedPromise();
    }
    /**
     * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).
     *
     * `load()` might be used in the future to request any provider to load the most current data.
     *
     * It is safe to call `load()` multiple times.
     */
    load() {
      const item = this._item;
      if (item !== null && !this.shouldLoad) {
        transact(
          /** @type {any} */
          item.parent.doc,
          (transaction) => {
            transaction.subdocsLoaded.add(this);
          },
          null,
          true
        );
      }
      this.shouldLoad = true;
    }
    getSubdocs() {
      return this.subdocs;
    }
    getSubdocGuids() {
      return new Set(from(this.subdocs).map((doc4) => doc4.guid));
    }
    /**
     * Changes that happen inside of a transaction are bundled. This means that
     * the observer fires _after_ the transaction is finished and that all changes
     * that happened inside of the transaction are sent as one message to the
     * other peers.
     *
     * @template T
     * @param {function(Transaction):T} f The function that should be executed as a transaction
     * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin
     * @return T
     *
     * @public
     */
    transact(f, origin = null) {
      return transact(this, f, origin);
    }
    /**
     * Define a shared data type.
     *
     * Multiple calls of `y.get(name, TypeConstructor)` yield the same result
     * and do not overwrite each other. I.e.
     * `y.define(name, Y.Array) === y.define(name, Y.Array)`
     *
     * After this method is called, the type is also available on `y.share.get(name)`.
     *
     * *Best Practices:*
     * Define all types right after the Yjs instance is created and store them in a separate object.
     * Also use the typed methods `getText(name)`, `getArray(name)`, ..
     *
     * @example
     *   const y = new Y(..)
     *   const appState = {
     *     document: y.getText('document')
     *     comments: y.getArray('comments')
     *   }
     *
     * @param {string} name
     * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...
     * @return {AbstractType<any>} The created type. Constructed with TypeConstructor
     *
     * @public
     */
    get(name, TypeConstructor = AbstractType) {
      const type = setIfUndefined(this.share, name, () => {
        const t = new TypeConstructor();
        t._integrate(this, null);
        return t;
      });
      const Constr = type.constructor;
      if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {
        if (Constr === AbstractType) {
          const t = new TypeConstructor();
          t._map = type._map;
          type._map.forEach(
            /** @param {Item?} n */
            (n) => {
              for (; n !== null; n = n.left) {
                n.parent = t;
              }
            }
          );
          t._start = type._start;
          for (let n = t._start; n !== null; n = n.right) {
            n.parent = t;
          }
          t._length = type._length;
          this.share.set(name, t);
          t._integrate(this, null);
          return t;
        } else {
          throw new Error(`Type with the name ${name} has already been defined with a different constructor`);
        }
      }
      return type;
    }
    /**
     * @template T
     * @param {string} [name]
     * @return {YArray<T>}
     *
     * @public
     */
    getArray(name = "") {
      return this.get(name, YArray);
    }
    /**
     * @param {string} [name]
     * @return {YText}
     *
     * @public
     */
    getText(name = "") {
      return this.get(name, YText);
    }
    /**
     * @template T
     * @param {string} [name]
     * @return {YMap<T>}
     *
     * @public
     */
    getMap(name = "") {
      return this.get(name, YMap);
    }
    /**
     * @param {string} [name]
     * @return {YXmlFragment}
     *
     * @public
     */
    getXmlFragment(name = "") {
      return this.get(name, YXmlFragment);
    }
    /**
     * Converts the entire document into a js object, recursively traversing each yjs type
     * Doesn't log types that have not been defined (using ydoc.getType(..)).
     *
     * @deprecated Do not use this method and rather call toJSON directly on the shared types.
     *
     * @return {Object<string, any>}
     */
    toJSON() {
      const doc4 = {};
      this.share.forEach((value, key) => {
        doc4[key] = value.toJSON();
      });
      return doc4;
    }
    /**
     * Emit `destroy` event and unregister all event handlers.
     */
    destroy() {
      from(this.subdocs).forEach((subdoc) => subdoc.destroy());
      const item = this._item;
      if (item !== null) {
        this._item = null;
        const content = (
          /** @type {ContentDoc} */
          item.content
        );
        content.doc = new Doc(__spreadProps(__spreadValues({ guid: this.guid }, content.opts), { shouldLoad: false }));
        content.doc._item = item;
        transact(
          /** @type {any} */
          item.parent.doc,
          (transaction) => {
            const doc4 = content.doc;
            if (!item.deleted) {
              transaction.subdocsAdded.add(doc4);
            }
            transaction.subdocsRemoved.add(this);
          },
          null,
          true
        );
      }
      this.emit("destroyed", [true]);
      this.emit("destroy", [this]);
      super.destroy();
    }
    /**
     * @param {string} eventName
     * @param {function(...any):any} f
     */
    on(eventName, f) {
      super.on(eventName, f);
    }
    /**
     * @param {string} eventName
     * @param {function} f
     */
    off(eventName, f) {
      super.off(eventName, f);
    }
  };
  var DSDecoderV1 = class {
    /**
     * @param {decoding.Decoder} decoder
     */
    constructor(decoder) {
      this.restDecoder = decoder;
    }
    resetDsCurVal() {
    }
    /**
     * @return {number}
     */
    readDsClock() {
      return readVarUint(this.restDecoder);
    }
    /**
     * @return {number}
     */
    readDsLen() {
      return readVarUint(this.restDecoder);
    }
  };
  var UpdateDecoderV1 = class extends DSDecoderV1 {
    /**
     * @return {ID}
     */
    readLeftID() {
      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));
    }
    /**
     * @return {ID}
     */
    readRightID() {
      return createID(readVarUint(this.restDecoder), readVarUint(this.restDecoder));
    }
    /**
     * Read the next client id.
     * Use this in favor of readID whenever possible to reduce the number of objects created.
     */
    readClient() {
      return readVarUint(this.restDecoder);
    }
    /**
     * @return {number} info An unsigned 8-bit integer
     */
    readInfo() {
      return readUint8(this.restDecoder);
    }
    /**
     * @return {string}
     */
    readString() {
      return readVarString(this.restDecoder);
    }
    /**
     * @return {boolean} isKey
     */
    readParentInfo() {
      return readVarUint(this.restDecoder) === 1;
    }
    /**
     * @return {number} info An unsigned 8-bit integer
     */
    readTypeRef() {
      return readVarUint(this.restDecoder);
    }
    /**
     * Write len of a struct - well suited for Opt RLE encoder.
     *
     * @return {number} len
     */
    readLen() {
      return readVarUint(this.restDecoder);
    }
    /**
     * @return {any}
     */
    readAny() {
      return readAny(this.restDecoder);
    }
    /**
     * @return {Uint8Array}
     */
    readBuf() {
      return copyUint8Array(readVarUint8Array(this.restDecoder));
    }
    /**
     * Legacy implementation uses JSON parse. We use any-decoding in v2.
     *
     * @return {any}
     */
    readJSON() {
      return JSON.parse(readVarString(this.restDecoder));
    }
    /**
     * @return {string}
     */
    readKey() {
      return readVarString(this.restDecoder);
    }
  };
  var DSDecoderV2 = class {
    /**
     * @param {decoding.Decoder} decoder
     */
    constructor(decoder) {
      this.dsCurrVal = 0;
      this.restDecoder = decoder;
    }
    resetDsCurVal() {
      this.dsCurrVal = 0;
    }
    /**
     * @return {number}
     */
    readDsClock() {
      this.dsCurrVal += readVarUint(this.restDecoder);
      return this.dsCurrVal;
    }
    /**
     * @return {number}
     */
    readDsLen() {
      const diff = readVarUint(this.restDecoder) + 1;
      this.dsCurrVal += diff;
      return diff;
    }
  };
  var UpdateDecoderV2 = class extends DSDecoderV2 {
    /**
     * @param {decoding.Decoder} decoder
     */
    constructor(decoder) {
      super(decoder);
      this.keys = [];
      readVarUint(decoder);
      this.keyClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.clientDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
      this.leftClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.rightClockDecoder = new IntDiffOptRleDecoder(readVarUint8Array(decoder));
      this.infoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);
      this.stringDecoder = new StringDecoder(readVarUint8Array(decoder));
      this.parentInfoDecoder = new RleDecoder(readVarUint8Array(decoder), readUint8);
      this.typeRefDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
      this.lenDecoder = new UintOptRleDecoder(readVarUint8Array(decoder));
    }
    /**
     * @return {ID}
     */
    readLeftID() {
      return new ID(this.clientDecoder.read(), this.leftClockDecoder.read());
    }
    /**
     * @return {ID}
     */
    readRightID() {
      return new ID(this.clientDecoder.read(), this.rightClockDecoder.read());
    }
    /**
     * Read the next client id.
     * Use this in favor of readID whenever possible to reduce the number of objects created.
     */
    readClient() {
      return this.clientDecoder.read();
    }
    /**
     * @return {number} info An unsigned 8-bit integer
     */
    readInfo() {
      return (
        /** @type {number} */
        this.infoDecoder.read()
      );
    }
    /**
     * @return {string}
     */
    readString() {
      return this.stringDecoder.read();
    }
    /**
     * @return {boolean}
     */
    readParentInfo() {
      return this.parentInfoDecoder.read() === 1;
    }
    /**
     * @return {number} An unsigned 8-bit integer
     */
    readTypeRef() {
      return this.typeRefDecoder.read();
    }
    /**
     * Write len of a struct - well suited for Opt RLE encoder.
     *
     * @return {number}
     */
    readLen() {
      return this.lenDecoder.read();
    }
    /**
     * @return {any}
     */
    readAny() {
      return readAny(this.restDecoder);
    }
    /**
     * @return {Uint8Array}
     */
    readBuf() {
      return readVarUint8Array(this.restDecoder);
    }
    /**
     * This is mainly here for legacy purposes.
     *
     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.
     *
     * @return {any}
     */
    readJSON() {
      return readAny(this.restDecoder);
    }
    /**
     * @return {string}
     */
    readKey() {
      const keyClock = this.keyClockDecoder.read();
      if (keyClock < this.keys.length) {
        return this.keys[keyClock];
      } else {
        const key = this.stringDecoder.read();
        this.keys.push(key);
        return key;
      }
    }
  };
  var DSEncoderV1 = class {
    constructor() {
      this.restEncoder = createEncoder();
    }
    toUint8Array() {
      return toUint8Array2(this.restEncoder);
    }
    resetDsCurVal() {
    }
    /**
     * @param {number} clock
     */
    writeDsClock(clock) {
      writeVarUint(this.restEncoder, clock);
    }
    /**
     * @param {number} len
     */
    writeDsLen(len) {
      writeVarUint(this.restEncoder, len);
    }
  };
  var UpdateEncoderV1 = class extends DSEncoderV1 {
    /**
     * @param {ID} id
     */
    writeLeftID(id2) {
      writeVarUint(this.restEncoder, id2.client);
      writeVarUint(this.restEncoder, id2.clock);
    }
    /**
     * @param {ID} id
     */
    writeRightID(id2) {
      writeVarUint(this.restEncoder, id2.client);
      writeVarUint(this.restEncoder, id2.clock);
    }
    /**
     * Use writeClient and writeClock instead of writeID if possible.
     * @param {number} client
     */
    writeClient(client) {
      writeVarUint(this.restEncoder, client);
    }
    /**
     * @param {number} info An unsigned 8-bit integer
     */
    writeInfo(info) {
      writeUint8(this.restEncoder, info);
    }
    /**
     * @param {string} s
     */
    writeString(s) {
      writeVarString(this.restEncoder, s);
    }
    /**
     * @param {boolean} isYKey
     */
    writeParentInfo(isYKey) {
      writeVarUint(this.restEncoder, isYKey ? 1 : 0);
    }
    /**
     * @param {number} info An unsigned 8-bit integer
     */
    writeTypeRef(info) {
      writeVarUint(this.restEncoder, info);
    }
    /**
     * Write len of a struct - well suited for Opt RLE encoder.
     *
     * @param {number} len
     */
    writeLen(len) {
      writeVarUint(this.restEncoder, len);
    }
    /**
     * @param {any} any
     */
    writeAny(any2) {
      writeAny(this.restEncoder, any2);
    }
    /**
     * @param {Uint8Array} buf
     */
    writeBuf(buf) {
      writeVarUint8Array(this.restEncoder, buf);
    }
    /**
     * @param {any} embed
     */
    writeJSON(embed) {
      writeVarString(this.restEncoder, JSON.stringify(embed));
    }
    /**
     * @param {string} key
     */
    writeKey(key) {
      writeVarString(this.restEncoder, key);
    }
  };
  var DSEncoderV2 = class {
    constructor() {
      this.restEncoder = createEncoder();
      this.dsCurrVal = 0;
    }
    toUint8Array() {
      return toUint8Array2(this.restEncoder);
    }
    resetDsCurVal() {
      this.dsCurrVal = 0;
    }
    /**
     * @param {number} clock
     */
    writeDsClock(clock) {
      const diff = clock - this.dsCurrVal;
      this.dsCurrVal = clock;
      writeVarUint(this.restEncoder, diff);
    }
    /**
     * @param {number} len
     */
    writeDsLen(len) {
      if (len === 0) {
        unexpectedCase();
      }
      writeVarUint(this.restEncoder, len - 1);
      this.dsCurrVal += len;
    }
  };
  var UpdateEncoderV2 = class extends DSEncoderV2 {
    constructor() {
      super();
      this.keyMap = /* @__PURE__ */ new Map();
      this.keyClock = 0;
      this.keyClockEncoder = new IntDiffOptRleEncoder();
      this.clientEncoder = new UintOptRleEncoder();
      this.leftClockEncoder = new IntDiffOptRleEncoder();
      this.rightClockEncoder = new IntDiffOptRleEncoder();
      this.infoEncoder = new RleEncoder(writeUint8);
      this.stringEncoder = new StringEncoder();
      this.parentInfoEncoder = new RleEncoder(writeUint8);
      this.typeRefEncoder = new UintOptRleEncoder();
      this.lenEncoder = new UintOptRleEncoder();
    }
    toUint8Array() {
      const encoder = createEncoder();
      writeVarUint(encoder, 0);
      writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());
      writeVarUint8Array(encoder, toUint8Array2(this.infoEncoder));
      writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());
      writeVarUint8Array(encoder, toUint8Array2(this.parentInfoEncoder));
      writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());
      writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());
      writeUint8Array(encoder, toUint8Array2(this.restEncoder));
      return toUint8Array2(encoder);
    }
    /**
     * @param {ID} id
     */
    writeLeftID(id2) {
      this.clientEncoder.write(id2.client);
      this.leftClockEncoder.write(id2.clock);
    }
    /**
     * @param {ID} id
     */
    writeRightID(id2) {
      this.clientEncoder.write(id2.client);
      this.rightClockEncoder.write(id2.clock);
    }
    /**
     * @param {number} client
     */
    writeClient(client) {
      this.clientEncoder.write(client);
    }
    /**
     * @param {number} info An unsigned 8-bit integer
     */
    writeInfo(info) {
      this.infoEncoder.write(info);
    }
    /**
     * @param {string} s
     */
    writeString(s) {
      this.stringEncoder.write(s);
    }
    /**
     * @param {boolean} isYKey
     */
    writeParentInfo(isYKey) {
      this.parentInfoEncoder.write(isYKey ? 1 : 0);
    }
    /**
     * @param {number} info An unsigned 8-bit integer
     */
    writeTypeRef(info) {
      this.typeRefEncoder.write(info);
    }
    /**
     * Write len of a struct - well suited for Opt RLE encoder.
     *
     * @param {number} len
     */
    writeLen(len) {
      this.lenEncoder.write(len);
    }
    /**
     * @param {any} any
     */
    writeAny(any2) {
      writeAny(this.restEncoder, any2);
    }
    /**
     * @param {Uint8Array} buf
     */
    writeBuf(buf) {
      writeVarUint8Array(this.restEncoder, buf);
    }
    /**
     * This is mainly here for legacy purposes.
     *
     * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.
     *
     * @param {any} embed
     */
    writeJSON(embed) {
      writeAny(this.restEncoder, embed);
    }
    /**
     * Property keys are often reused. For example, in y-prosemirror the key `bold` might
     * occur very often. For a 3d application, the key `position` might occur very often.
     *
     * We cache these keys in a Map and refer to them via a unique number.
     *
     * @param {string} key
     */
    writeKey(key) {
      const clock = this.keyMap.get(key);
      if (clock === void 0) {
        this.keyClockEncoder.write(this.keyClock++);
        this.stringEncoder.write(key);
      } else {
        this.keyClockEncoder.write(clock);
      }
    }
  };
  var writeStructs = (encoder, structs, client, clock) => {
    clock = max(clock, structs[0].id.clock);
    const startNewStructs = findIndexSS(structs, clock);
    writeVarUint(encoder.restEncoder, structs.length - startNewStructs);
    encoder.writeClient(client);
    writeVarUint(encoder.restEncoder, clock);
    const firstStruct = structs[startNewStructs];
    firstStruct.write(encoder, clock - firstStruct.id.clock);
    for (let i = startNewStructs + 1; i < structs.length; i++) {
      structs[i].write(encoder, 0);
    }
  };
  var writeClientsStructs = (encoder, store, _sm) => {
    const sm = /* @__PURE__ */ new Map();
    _sm.forEach((clock, client) => {
      if (getState(store, client) > clock) {
        sm.set(client, clock);
      }
    });
    getStateVector(store).forEach((_clock, client) => {
      if (!_sm.has(client)) {
        sm.set(client, 0);
      }
    });
    writeVarUint(encoder.restEncoder, sm.size);
    from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {
      writeStructs(
        encoder,
        /** @type {Array<GC|Item>} */
        store.clients.get(client),
        client,
        clock
      );
    });
  };
  var readClientsStructRefs = (decoder, doc4) => {
    const clientRefs = create();
    const numOfStateUpdates = readVarUint(decoder.restDecoder);
    for (let i = 0; i < numOfStateUpdates; i++) {
      const numberOfStructs = readVarUint(decoder.restDecoder);
      const refs = new Array(numberOfStructs);
      const client = decoder.readClient();
      let clock = readVarUint(decoder.restDecoder);
      clientRefs.set(client, { i: 0, refs });
      for (let i2 = 0; i2 < numberOfStructs; i2++) {
        const info = decoder.readInfo();
        switch (BITS5 & info) {
          case 0: {
            const len = decoder.readLen();
            refs[i2] = new GC(createID(client, clock), len);
            clock += len;
            break;
          }
          case 10: {
            const len = readVarUint(decoder.restDecoder);
            refs[i2] = new Skip(createID(client, clock), len);
            clock += len;
            break;
          }
          default: {
            const cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0;
            const struct = new Item(
              createID(client, clock),
              null,
              // leftd
              (info & BIT8) === BIT8 ? decoder.readLeftID() : null,
              // origin
              null,
              // right
              (info & BIT7) === BIT7 ? decoder.readRightID() : null,
              // right origin
              cantCopyParentInfo ? decoder.readParentInfo() ? doc4.get(decoder.readString()) : decoder.readLeftID() : null,
              // parent
              cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null,
              // parentSub
              readItemContent(decoder, info)
              // item content
            );
            refs[i2] = struct;
            clock += struct.length;
          }
        }
      }
    }
    return clientRefs;
  };
  var integrateStructs = (transaction, store, clientsStructRefs) => {
    const stack = [];
    let clientsStructRefsIds = from(clientsStructRefs.keys()).sort((a, b) => a - b);
    if (clientsStructRefsIds.length === 0) {
      return null;
    }
    const getNextStructTarget = () => {
      if (clientsStructRefsIds.length === 0) {
        return null;
      }
      let nextStructsTarget = (
        /** @type {{i:number,refs:Array<GC|Item>}} */
        clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1])
      );
      while (nextStructsTarget.refs.length === nextStructsTarget.i) {
        clientsStructRefsIds.pop();
        if (clientsStructRefsIds.length > 0) {
          nextStructsTarget = /** @type {{i:number,refs:Array<GC|Item>}} */
          clientsStructRefs.get(clientsStructRefsIds[clientsStructRefsIds.length - 1]);
        } else {
          return null;
        }
      }
      return nextStructsTarget;
    };
    let curStructsTarget = getNextStructTarget();
    if (curStructsTarget === null) {
      return null;
    }
    const restStructs = new StructStore();
    const missingSV = /* @__PURE__ */ new Map();
    const updateMissingSv = (client, clock) => {
      const mclock = missingSV.get(client);
      if (mclock == null || mclock > clock) {
        missingSV.set(client, clock);
      }
    };
    let stackHead = (
      /** @type {any} */
      curStructsTarget.refs[
        /** @type {any} */
        curStructsTarget.i++
      ]
    );
    const state = /* @__PURE__ */ new Map();
    const addStackToRestSS = () => {
      for (const item of stack) {
        const client = item.id.client;
        const unapplicableItems = clientsStructRefs.get(client);
        if (unapplicableItems) {
          unapplicableItems.i--;
          restStructs.clients.set(client, unapplicableItems.refs.slice(unapplicableItems.i));
          clientsStructRefs.delete(client);
          unapplicableItems.i = 0;
          unapplicableItems.refs = [];
        } else {
          restStructs.clients.set(client, [item]);
        }
        clientsStructRefsIds = clientsStructRefsIds.filter((c) => c !== client);
      }
      stack.length = 0;
    };
    while (true) {
      if (stackHead.constructor !== Skip) {
        const localClock = setIfUndefined(state, stackHead.id.client, () => getState(store, stackHead.id.client));
        const offset = localClock - stackHead.id.clock;
        if (offset < 0) {
          stack.push(stackHead);
          updateMissingSv(stackHead.id.client, stackHead.id.clock - 1);
          addStackToRestSS();
        } else {
          const missing = stackHead.getMissing(transaction, store);
          if (missing !== null) {
            stack.push(stackHead);
            const structRefs = clientsStructRefs.get(
              /** @type {number} */
              missing
            ) || { refs: [], i: 0 };
            if (structRefs.refs.length === structRefs.i) {
              updateMissingSv(
                /** @type {number} */
                missing,
                getState(store, missing)
              );
              addStackToRestSS();
            } else {
              stackHead = structRefs.refs[structRefs.i++];
              continue;
            }
          } else if (offset === 0 || offset < stackHead.length) {
            stackHead.integrate(transaction, offset);
            state.set(stackHead.id.client, stackHead.id.clock + stackHead.length);
          }
        }
      }
      if (stack.length > 0) {
        stackHead = /** @type {GC|Item} */
        stack.pop();
      } else if (curStructsTarget !== null && curStructsTarget.i < curStructsTarget.refs.length) {
        stackHead = /** @type {GC|Item} */
        curStructsTarget.refs[curStructsTarget.i++];
      } else {
        curStructsTarget = getNextStructTarget();
        if (curStructsTarget === null) {
          break;
        } else {
          stackHead = /** @type {GC|Item} */
          curStructsTarget.refs[curStructsTarget.i++];
        }
      }
    }
    if (restStructs.clients.size > 0) {
      const encoder = new UpdateEncoderV2();
      writeClientsStructs(encoder, restStructs, /* @__PURE__ */ new Map());
      writeVarUint(encoder.restEncoder, 0);
      return { missing: missingSV, update: encoder.toUint8Array() };
    }
    return null;
  };
  var writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);
  var readUpdateV2 = (decoder, ydoc, transactionOrigin, structDecoder = new UpdateDecoderV2(decoder)) => transact(ydoc, (transaction) => {
    transaction.local = false;
    let retry = false;
    const doc4 = transaction.doc;
    const store = doc4.store;
    const ss = readClientsStructRefs(structDecoder, doc4);
    const restStructs = integrateStructs(transaction, store, ss);
    const pending = store.pendingStructs;
    if (pending) {
      for (const [client, clock] of pending.missing) {
        if (clock < getState(store, client)) {
          retry = true;
          break;
        }
      }
      if (restStructs) {
        for (const [client, clock] of restStructs.missing) {
          const mclock = pending.missing.get(client);
          if (mclock == null || mclock > clock) {
            pending.missing.set(client, clock);
          }
        }
        pending.update = mergeUpdatesV2([pending.update, restStructs.update]);
      }
    } else {
      store.pendingStructs = restStructs;
    }
    const dsRest = readAndApplyDeleteSet(structDecoder, transaction, store);
    if (store.pendingDs) {
      const pendingDSUpdate = new UpdateDecoderV2(createDecoder(store.pendingDs));
      readVarUint(pendingDSUpdate.restDecoder);
      const dsRest2 = readAndApplyDeleteSet(pendingDSUpdate, transaction, store);
      if (dsRest && dsRest2) {
        store.pendingDs = mergeUpdatesV2([dsRest, dsRest2]);
      } else {
        store.pendingDs = dsRest || dsRest2;
      }
    } else {
      store.pendingDs = dsRest;
    }
    if (retry) {
      const update2 = (
        /** @type {{update: Uint8Array}} */
        store.pendingStructs.update
      );
      store.pendingStructs = null;
      applyUpdateV2(transaction.doc, update2);
    }
  }, transactionOrigin, false);
  var readUpdate = (decoder, ydoc, transactionOrigin) => readUpdateV2(decoder, ydoc, transactionOrigin, new UpdateDecoderV1(decoder));
  var applyUpdateV2 = (ydoc, update2, transactionOrigin, YDecoder = UpdateDecoderV2) => {
    const decoder = createDecoder(update2);
    readUpdateV2(decoder, ydoc, transactionOrigin, new YDecoder(decoder));
  };
  var applyUpdate = (ydoc, update2, transactionOrigin) => applyUpdateV2(ydoc, update2, transactionOrigin, UpdateDecoderV1);
  var writeStateAsUpdate = (encoder, doc4, targetStateVector = /* @__PURE__ */ new Map()) => {
    writeClientsStructs(encoder, doc4.store, targetStateVector);
    writeDeleteSet(encoder, createDeleteSetFromStructStore(doc4.store));
  };
  var encodeStateAsUpdateV2 = (doc4, encodedTargetStateVector = new Uint8Array([0]), encoder = new UpdateEncoderV2()) => {
    const targetStateVector = decodeStateVector(encodedTargetStateVector);
    writeStateAsUpdate(encoder, doc4, targetStateVector);
    const updates = [encoder.toUint8Array()];
    if (doc4.store.pendingDs) {
      updates.push(doc4.store.pendingDs);
    }
    if (doc4.store.pendingStructs) {
      updates.push(diffUpdateV2(doc4.store.pendingStructs.update, encodedTargetStateVector));
    }
    if (updates.length > 1) {
      if (encoder.constructor === UpdateEncoderV1) {
        return mergeUpdates(updates.map((update2, i) => i === 0 ? update2 : convertUpdateFormatV2ToV1(update2)));
      } else if (encoder.constructor === UpdateEncoderV2) {
        return mergeUpdatesV2(updates);
      }
    }
    return updates[0];
  };
  var encodeStateAsUpdate = (doc4, encodedTargetStateVector) => encodeStateAsUpdateV2(doc4, encodedTargetStateVector, new UpdateEncoderV1());
  var readStateVector = (decoder) => {
    const ss = /* @__PURE__ */ new Map();
    const ssLength = readVarUint(decoder.restDecoder);
    for (let i = 0; i < ssLength; i++) {
      const client = readVarUint(decoder.restDecoder);
      const clock = readVarUint(decoder.restDecoder);
      ss.set(client, clock);
    }
    return ss;
  };
  var decodeStateVector = (decodedState) => readStateVector(new DSDecoderV1(createDecoder(decodedState)));
  var writeStateVector = (encoder, sv) => {
    writeVarUint(encoder.restEncoder, sv.size);
    from(sv.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {
      writeVarUint(encoder.restEncoder, client);
      writeVarUint(encoder.restEncoder, clock);
    });
    return encoder;
  };
  var writeDocumentStateVector = (encoder, doc4) => writeStateVector(encoder, getStateVector(doc4.store));
  var encodeStateVectorV2 = (doc4, encoder = new DSEncoderV2()) => {
    if (doc4 instanceof Map) {
      writeStateVector(encoder, doc4);
    } else {
      writeDocumentStateVector(encoder, doc4);
    }
    return encoder.toUint8Array();
  };
  var encodeStateVector = (doc4) => encodeStateVectorV2(doc4, new DSEncoderV1());
  var EventHandler = class {
    constructor() {
      this.l = [];
    }
  };
  var createEventHandler = () => new EventHandler();
  var addEventHandlerListener = (eventHandler, f) => eventHandler.l.push(f);
  var removeEventHandlerListener = (eventHandler, f) => {
    const l = eventHandler.l;
    const len = l.length;
    eventHandler.l = l.filter((g) => f !== g);
    if (len === eventHandler.l.length) {
      console.error("[yjs] Tried to remove event handler that doesn't exist.");
    }
  };
  var callEventHandlerListeners = (eventHandler, arg0, arg1) => callAll(eventHandler.l, [arg0, arg1]);
  var ID = class {
    /**
     * @param {number} client client id
     * @param {number} clock unique per client id, continuous number
     */
    constructor(client, clock) {
      this.client = client;
      this.clock = clock;
    }
  };
  var compareIDs = (a, b) => a === b || a !== null && b !== null && a.client === b.client && a.clock === b.clock;
  var createID = (client, clock) => new ID(client, clock);
  var writeID = (encoder, id2) => {
    writeVarUint(encoder, id2.client);
    writeVarUint(encoder, id2.clock);
  };
  var readID = (decoder) => createID(readVarUint(decoder), readVarUint(decoder));
  var findRootTypeKey = (type) => {
    for (const [key, value] of type.doc.share.entries()) {
      if (value === type) {
        return key;
      }
    }
    throw unexpectedCase();
  };
  var isParentOf = (parent, child) => {
    while (child !== null) {
      if (child.parent === parent) {
        return true;
      }
      child = /** @type {AbstractType<any>} */
      child.parent._item;
    }
    return false;
  };
  var logType = (type) => {
    const res = [];
    let n = type._start;
    while (n) {
      res.push(n);
      n = n.right;
    }
    console.log("Children: ", res);
    console.log("Children content: ", res.filter((m) => !m.deleted).map((m) => m.content));
  };
  var PermanentUserData = class {
    /**
     * @param {Doc} doc
     * @param {YMap<any>} [storeType]
     */
    constructor(doc4, storeType = doc4.getMap("users")) {
      const dss = /* @__PURE__ */ new Map();
      this.yusers = storeType;
      this.doc = doc4;
      this.clients = /* @__PURE__ */ new Map();
      this.dss = dss;
      const initUser = (user, userDescription) => {
        const ds = user.get("ds");
        const ids = user.get("ids");
        const addClientId = (
          /** @param {number} clientid */
          (clientid) => this.clients.set(clientid, userDescription)
        );
        ds.observe(
          /** @param {YArrayEvent<any>} event */
          (event) => {
            event.changes.added.forEach((item) => {
              item.content.getContent().forEach((encodedDs) => {
                if (encodedDs instanceof Uint8Array) {
                  this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(new DSDecoderV1(createDecoder(encodedDs)))]));
                }
              });
            });
          }
        );
        this.dss.set(userDescription, mergeDeleteSets(ds.map((encodedDs) => readDeleteSet(new DSDecoderV1(createDecoder(encodedDs))))));
        ids.observe(
          /** @param {YArrayEvent<any>} event */
          (event) => event.changes.added.forEach((item) => item.content.getContent().forEach(addClientId))
        );
        ids.forEach(addClientId);
      };
      storeType.observe((event) => {
        event.keysChanged.forEach(
          (userDescription) => initUser(storeType.get(userDescription), userDescription)
        );
      });
      storeType.forEach(initUser);
    }
    /**
     * @param {Doc} doc
     * @param {number} clientid
     * @param {string} userDescription
     * @param {Object} conf
     * @param {function(Transaction, DeleteSet):boolean} [conf.filter]
     */
    setUserMapping(doc4, clientid, userDescription, { filter = () => true } = {}) {
      const users = this.yusers;
      let user = users.get(userDescription);
      if (!user) {
        user = new YMap();
        user.set("ids", new YArray());
        user.set("ds", new YArray());
        users.set(userDescription, user);
      }
      user.get("ids").push([clientid]);
      users.observe((_event) => {
        setTimeout(() => {
          const userOverwrite = users.get(userDescription);
          if (userOverwrite !== user) {
            user = userOverwrite;
            this.clients.forEach((_userDescription, clientid2) => {
              if (userDescription === _userDescription) {
                user.get("ids").push([clientid2]);
              }
            });
            const encoder = new DSEncoderV1();
            const ds = this.dss.get(userDescription);
            if (ds) {
              writeDeleteSet(encoder, ds);
              user.get("ds").push([encoder.toUint8Array()]);
            }
          }
        }, 0);
      });
      doc4.on(
        "afterTransaction",
        /** @param {Transaction} transaction */
        (transaction) => {
          setTimeout(() => {
            const yds = user.get("ds");
            const ds = transaction.deleteSet;
            if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {
              const encoder = new DSEncoderV1();
              writeDeleteSet(encoder, ds);
              yds.push([encoder.toUint8Array()]);
            }
          });
        }
      );
    }
    /**
     * @param {number} clientid
     * @return {any}
     */
    getUserByClientId(clientid) {
      return this.clients.get(clientid) || null;
    }
    /**
     * @param {ID} id
     * @return {string | null}
     */
    getUserByDeletedId(id2) {
      for (const [userDescription, ds] of this.dss.entries()) {
        if (isDeleted(ds, id2)) {
          return userDescription;
        }
      }
      return null;
    }
  };
  var RelativePosition = class {
    /**
     * @param {ID|null} type
     * @param {string|null} tname
     * @param {ID|null} item
     * @param {number} assoc
     */
    constructor(type, tname, item, assoc = 0) {
      this.type = type;
      this.tname = tname;
      this.item = item;
      this.assoc = assoc;
    }
  };
  var relativePositionToJSON = (rpos) => {
    const json = {};
    if (rpos.type) {
      json.type = rpos.type;
    }
    if (rpos.tname) {
      json.tname = rpos.tname;
    }
    if (rpos.item) {
      json.item = rpos.item;
    }
    if (rpos.assoc != null) {
      json.assoc = rpos.assoc;
    }
    return json;
  };
  var createRelativePositionFromJSON = (json) => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);
  var AbsolutePosition = class {
    /**
     * @param {AbstractType<any>} type
     * @param {number} index
     * @param {number} [assoc]
     */
    constructor(type, index, assoc = 0) {
      this.type = type;
      this.index = index;
      this.assoc = assoc;
    }
  };
  var createAbsolutePosition = (type, index, assoc = 0) => new AbsolutePosition(type, index, assoc);
  var createRelativePosition = (type, item, assoc) => {
    let typeid = null;
    let tname = null;
    if (type._item === null) {
      tname = findRootTypeKey(type);
    } else {
      typeid = createID(type._item.id.client, type._item.id.clock);
    }
    return new RelativePosition(typeid, tname, item, assoc);
  };
  var createRelativePositionFromTypeIndex = (type, index, assoc = 0) => {
    let t = type._start;
    if (assoc < 0) {
      if (index === 0) {
        return createRelativePosition(type, null, assoc);
      }
      index--;
    }
    while (t !== null) {
      if (!t.deleted && t.countable) {
        if (t.length > index) {
          return createRelativePosition(type, createID(t.id.client, t.id.clock + index), assoc);
        }
        index -= t.length;
      }
      if (t.right === null && assoc < 0) {
        return createRelativePosition(type, t.lastId, assoc);
      }
      t = t.right;
    }
    return createRelativePosition(type, null, assoc);
  };
  var writeRelativePosition = (encoder, rpos) => {
    const { type, tname, item, assoc } = rpos;
    if (item !== null) {
      writeVarUint(encoder, 0);
      writeID(encoder, item);
    } else if (tname !== null) {
      writeUint8(encoder, 1);
      writeVarString(encoder, tname);
    } else if (type !== null) {
      writeUint8(encoder, 2);
      writeID(encoder, type);
    } else {
      throw unexpectedCase();
    }
    writeVarInt(encoder, assoc);
    return encoder;
  };
  var encodeRelativePosition = (rpos) => {
    const encoder = createEncoder();
    writeRelativePosition(encoder, rpos);
    return toUint8Array2(encoder);
  };
  var readRelativePosition = (decoder) => {
    let type = null;
    let tname = null;
    let itemID = null;
    switch (readVarUint(decoder)) {
      case 0:
        itemID = readID(decoder);
        break;
      case 1:
        tname = readVarString(decoder);
        break;
      case 2: {
        type = readID(decoder);
      }
    }
    const assoc = hasContent(decoder) ? readVarInt(decoder) : 0;
    return new RelativePosition(type, tname, itemID, assoc);
  };
  var decodeRelativePosition = (uint8Array) => readRelativePosition(createDecoder(uint8Array));
  var createAbsolutePositionFromRelativePosition = (rpos, doc4) => {
    const store = doc4.store;
    const rightID = rpos.item;
    const typeID = rpos.type;
    const tname = rpos.tname;
    const assoc = rpos.assoc;
    let type = null;
    let index = 0;
    if (rightID !== null) {
      if (getState(store, rightID.client) <= rightID.clock) {
        return null;
      }
      const res = followRedone(store, rightID);
      const right = res.item;
      if (!(right instanceof Item)) {
        return null;
      }
      type = /** @type {AbstractType<any>} */
      right.parent;
      if (type._item === null || !type._item.deleted) {
        index = right.deleted || !right.countable ? 0 : res.diff + (assoc >= 0 ? 0 : 1);
        let n = right.left;
        while (n !== null) {
          if (!n.deleted && n.countable) {
            index += n.length;
          }
          n = n.left;
        }
      }
    } else {
      if (tname !== null) {
        type = doc4.get(tname);
      } else if (typeID !== null) {
        if (getState(store, typeID.client) <= typeID.clock) {
          return null;
        }
        const { item } = followRedone(store, typeID);
        if (item instanceof Item && item.content instanceof ContentType) {
          type = item.content.type;
        } else {
          return null;
        }
      } else {
        throw unexpectedCase();
      }
      if (assoc >= 0) {
        index = type._length;
      } else {
        index = 0;
      }
    }
    return createAbsolutePosition(type, index, rpos.assoc);
  };
  var compareRelativePositions = (a, b) => a === b || a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type) && a.assoc === b.assoc;
  var Snapshot = class {
    /**
     * @param {DeleteSet} ds
     * @param {Map<number,number>} sv state map
     */
    constructor(ds, sv) {
      this.ds = ds;
      this.sv = sv;
    }
  };
  var equalSnapshots = (snap1, snap2) => {
    const ds1 = snap1.ds.clients;
    const ds2 = snap2.ds.clients;
    const sv1 = snap1.sv;
    const sv2 = snap2.sv;
    if (sv1.size !== sv2.size || ds1.size !== ds2.size) {
      return false;
    }
    for (const [key, value] of sv1.entries()) {
      if (sv2.get(key) !== value) {
        return false;
      }
    }
    for (const [client, dsitems1] of ds1.entries()) {
      const dsitems2 = ds2.get(client) || [];
      if (dsitems1.length !== dsitems2.length) {
        return false;
      }
      for (let i = 0; i < dsitems1.length; i++) {
        const dsitem1 = dsitems1[i];
        const dsitem2 = dsitems2[i];
        if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {
          return false;
        }
      }
    }
    return true;
  };
  var encodeSnapshotV2 = (snapshot2, encoder = new DSEncoderV2()) => {
    writeDeleteSet(encoder, snapshot2.ds);
    writeStateVector(encoder, snapshot2.sv);
    return encoder.toUint8Array();
  };
  var encodeSnapshot = (snapshot2) => encodeSnapshotV2(snapshot2, new DSEncoderV1());
  var decodeSnapshotV2 = (buf, decoder = new DSDecoderV2(createDecoder(buf))) => {
    return new Snapshot(readDeleteSet(decoder), readStateVector(decoder));
  };
  var decodeSnapshot = (buf) => decodeSnapshotV2(buf, new DSDecoderV1(createDecoder(buf)));
  var createSnapshot = (ds, sm) => new Snapshot(ds, sm);
  var emptySnapshot = createSnapshot(createDeleteSet(), /* @__PURE__ */ new Map());
  var snapshot = (doc4) => createSnapshot(createDeleteSetFromStructStore(doc4.store), getStateVector(doc4.store));
  var isVisible = (item, snapshot2) => snapshot2 === void 0 ? !item.deleted : snapshot2.sv.has(item.id.client) && (snapshot2.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot2.ds, item.id);
  var splitSnapshotAffectedStructs = (transaction, snapshot2) => {
    const meta = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create2);
    const store = transaction.doc.store;
    if (!meta.has(snapshot2)) {
      snapshot2.sv.forEach((clock, client) => {
        if (clock < getState(store, client)) {
          getItemCleanStart(transaction, createID(client, clock));
        }
      });
      iterateDeletedStructs(transaction, snapshot2.ds, (_item) => {
      });
      meta.add(snapshot2);
    }
  };
  var createDocFromSnapshot = (originDoc, snapshot2, newDoc = new Doc()) => {
    if (originDoc.gc) {
      throw new Error("Garbage-collection must be disabled in `originDoc`!");
    }
    const { sv, ds } = snapshot2;
    const encoder = new UpdateEncoderV2();
    originDoc.transact((transaction) => {
      let size = 0;
      sv.forEach((clock) => {
        if (clock > 0) {
          size++;
        }
      });
      writeVarUint(encoder.restEncoder, size);
      for (const [client, clock] of sv) {
        if (clock === 0) {
          continue;
        }
        if (clock < getState(originDoc.store, client)) {
          getItemCleanStart(transaction, createID(client, clock));
        }
        const structs = originDoc.store.clients.get(client) || [];
        const lastStructIndex = findIndexSS(structs, clock - 1);
        writeVarUint(encoder.restEncoder, lastStructIndex + 1);
        encoder.writeClient(client);
        writeVarUint(encoder.restEncoder, 0);
        for (let i = 0; i <= lastStructIndex; i++) {
          structs[i].write(encoder, 0);
        }
      }
      writeDeleteSet(encoder, ds);
    });
    applyUpdateV2(newDoc, encoder.toUint8Array(), "snapshot");
    return newDoc;
  };
  var snapshotContainsUpdateV2 = (snapshot2, update2, YDecoder = UpdateDecoderV2) => {
    const updateDecoder = new YDecoder(createDecoder(update2));
    const lazyDecoder = new LazyStructReader(updateDecoder, false);
    for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {
      if ((snapshot2.sv.get(curr.id.client) || 0) < curr.id.clock + curr.length) {
        return false;
      }
    }
    const mergedDS = mergeDeleteSets([snapshot2.ds, readDeleteSet(updateDecoder)]);
    return equalDeleteSets(snapshot2.ds, mergedDS);
  };
  var snapshotContainsUpdate = (snapshot2, update2) => snapshotContainsUpdateV2(snapshot2, update2, UpdateDecoderV1);
  var StructStore = class {
    constructor() {
      this.clients = /* @__PURE__ */ new Map();
      this.pendingStructs = null;
      this.pendingDs = null;
    }
  };
  var getStateVector = (store) => {
    const sm = /* @__PURE__ */ new Map();
    store.clients.forEach((structs, client) => {
      const struct = structs[structs.length - 1];
      sm.set(client, struct.id.clock + struct.length);
    });
    return sm;
  };
  var getState = (store, client) => {
    const structs = store.clients.get(client);
    if (structs === void 0) {
      return 0;
    }
    const lastStruct = structs[structs.length - 1];
    return lastStruct.id.clock + lastStruct.length;
  };
  var addStruct = (store, struct) => {
    let structs = store.clients.get(struct.id.client);
    if (structs === void 0) {
      structs = [];
      store.clients.set(struct.id.client, structs);
    } else {
      const lastStruct = structs[structs.length - 1];
      if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {
        throw unexpectedCase();
      }
    }
    structs.push(struct);
  };
  var findIndexSS = (structs, clock) => {
    let left = 0;
    let right = structs.length - 1;
    let mid = structs[right];
    let midclock = mid.id.clock;
    if (midclock === clock) {
      return right;
    }
    let midindex = floor(clock / (midclock + mid.length - 1) * right);
    while (left <= right) {
      mid = structs[midindex];
      midclock = mid.id.clock;
      if (midclock <= clock) {
        if (clock < midclock + mid.length) {
          return midindex;
        }
        left = midindex + 1;
      } else {
        right = midindex - 1;
      }
      midindex = floor((left + right) / 2);
    }
    throw unexpectedCase();
  };
  var find = (store, id2) => {
    const structs = store.clients.get(id2.client);
    return structs[findIndexSS(structs, id2.clock)];
  };
  var getItem = (
    /** @type {function(StructStore,ID):Item} */
    find
  );
  var findIndexCleanStart = (transaction, structs, clock) => {
    const index = findIndexSS(structs, clock);
    const struct = structs[index];
    if (struct.id.clock < clock && struct instanceof Item) {
      structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));
      return index + 1;
    }
    return index;
  };
  var getItemCleanStart = (transaction, id2) => {
    const structs = (
      /** @type {Array<Item>} */
      transaction.doc.store.clients.get(id2.client)
    );
    return structs[findIndexCleanStart(transaction, structs, id2.clock)];
  };
  var getItemCleanEnd = (transaction, store, id2) => {
    const structs = store.clients.get(id2.client);
    const index = findIndexSS(structs, id2.clock);
    const struct = structs[index];
    if (id2.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {
      structs.splice(index + 1, 0, splitItem(transaction, struct, id2.clock - struct.id.clock + 1));
    }
    return struct;
  };
  var replaceStruct = (store, struct, newStruct) => {
    const structs = (
      /** @type {Array<GC|Item>} */
      store.clients.get(struct.id.client)
    );
    structs[findIndexSS(structs, struct.id.clock)] = newStruct;
  };
  var iterateStructs = (transaction, structs, clockStart, len, f) => {
    if (len === 0) {
      return;
    }
    const clockEnd = clockStart + len;
    let index = findIndexCleanStart(transaction, structs, clockStart);
    let struct;
    do {
      struct = structs[index++];
      if (clockEnd < struct.id.clock + struct.length) {
        findIndexCleanStart(transaction, structs, clockEnd);
      }
      f(struct);
    } while (index < structs.length && structs[index].id.clock < clockEnd);
  };
  var Transaction = class {
    /**
     * @param {Doc} doc
     * @param {any} origin
     * @param {boolean} local
     */
    constructor(doc4, origin, local) {
      this.doc = doc4;
      this.deleteSet = new DeleteSet();
      this.beforeState = getStateVector(doc4.store);
      this.afterState = /* @__PURE__ */ new Map();
      this.changed = /* @__PURE__ */ new Map();
      this.changedParentTypes = /* @__PURE__ */ new Map();
      this._mergeStructs = [];
      this.origin = origin;
      this.meta = /* @__PURE__ */ new Map();
      this.local = local;
      this.subdocsAdded = /* @__PURE__ */ new Set();
      this.subdocsRemoved = /* @__PURE__ */ new Set();
      this.subdocsLoaded = /* @__PURE__ */ new Set();
      this._needFormattingCleanup = false;
    }
  };
  var writeUpdateMessageFromTransaction = (encoder, transaction) => {
    if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {
      return false;
    }
    sortAndMergeDeleteSet(transaction.deleteSet);
    writeStructsFromTransaction(encoder, transaction);
    writeDeleteSet(encoder, transaction.deleteSet);
    return true;
  };
  var addChangedTypeToTransaction = (transaction, type, parentSub) => {
    const item = type._item;
    if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) {
      setIfUndefined(transaction.changed, type, create2).add(parentSub);
    }
  };
  var tryToMergeWithLefts = (structs, pos) => {
    let right = structs[pos];
    let left = structs[pos - 1];
    let i = pos;
    for (; i > 0; right = left, left = structs[--i - 1]) {
      if (left.deleted === right.deleted && left.constructor === right.constructor) {
        if (left.mergeWith(right)) {
          if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */
          right.parent._map.get(right.parentSub) === right) {
            right.parent._map.set(
              right.parentSub,
              /** @type {Item} */
              left
            );
          }
          continue;
        }
      }
      break;
    }
    const merged = pos - i;
    if (merged) {
      structs.splice(pos + 1 - merged, merged);
    }
    return merged;
  };
  var tryGcDeleteSet = (ds, store, gcFilter) => {
    for (const [client, deleteItems] of ds.clients.entries()) {
      const structs = (
        /** @type {Array<GC|Item>} */
        store.clients.get(client)
      );
      for (let di = deleteItems.length - 1; di >= 0; di--) {
        const deleteItem = deleteItems[di];
        const endDeleteItemClock = deleteItem.clock + deleteItem.len;
        for (let si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]) {
          const struct2 = structs[si];
          if (deleteItem.clock + deleteItem.len <= struct2.id.clock) {
            break;
          }
          if (struct2 instanceof Item && struct2.deleted && !struct2.keep && gcFilter(struct2)) {
            struct2.gc(store, false);
          }
        }
      }
    }
  };
  var tryMergeDeleteSet = (ds, store) => {
    ds.clients.forEach((deleteItems, client) => {
      const structs = (
        /** @type {Array<GC|Item>} */
        store.clients.get(client)
      );
      for (let di = deleteItems.length - 1; di >= 0; di--) {
        const deleteItem = deleteItems[di];
        const mostRightIndexToCheck = min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));
        for (let si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[si]) {
          si -= 1 + tryToMergeWithLefts(structs, si);
        }
      }
    });
  };
  var tryGc = (ds, store, gcFilter) => {
    tryGcDeleteSet(ds, store, gcFilter);
    tryMergeDeleteSet(ds, store);
  };
  var cleanupTransactions = (transactionCleanups, i) => {
    if (i < transactionCleanups.length) {
      const transaction = transactionCleanups[i];
      const doc4 = transaction.doc;
      const store = doc4.store;
      const ds = transaction.deleteSet;
      const mergeStructs = transaction._mergeStructs;
      try {
        sortAndMergeDeleteSet(ds);
        transaction.afterState = getStateVector(transaction.doc.store);
        doc4.emit("beforeObserverCalls", [transaction, doc4]);
        const fs = [];
        transaction.changed.forEach(
          (subs, itemtype) => fs.push(() => {
            if (itemtype._item === null || !itemtype._item.deleted) {
              itemtype._callObserver(transaction, subs);
            }
          })
        );
        fs.push(() => {
          transaction.changedParentTypes.forEach((events, type) => {
            if (type._dEH.l.length > 0 && (type._item === null || !type._item.deleted)) {
              events = events.filter(
                (event) => event.target._item === null || !event.target._item.deleted
              );
              events.forEach((event) => {
                event.currentTarget = type;
                event._path = null;
              });
              events.sort((event1, event2) => event1.path.length - event2.path.length);
              callEventHandlerListeners(type._dEH, events, transaction);
            }
          });
        });
        fs.push(() => doc4.emit("afterTransaction", [transaction, doc4]));
        callAll(fs, []);
        if (transaction._needFormattingCleanup) {
          cleanupYTextAfterTransaction(transaction);
        }
      } finally {
        if (doc4.gc) {
          tryGcDeleteSet(ds, store, doc4.gcFilter);
        }
        tryMergeDeleteSet(ds, store);
        transaction.afterState.forEach((clock, client) => {
          const beforeClock = transaction.beforeState.get(client) || 0;
          if (beforeClock !== clock) {
            const structs = (
              /** @type {Array<GC|Item>} */
              store.clients.get(client)
            );
            const firstChangePos = max(findIndexSS(structs, beforeClock), 1);
            for (let i2 = structs.length - 1; i2 >= firstChangePos; ) {
              i2 -= 1 + tryToMergeWithLefts(structs, i2);
            }
          }
        });
        for (let i2 = mergeStructs.length - 1; i2 >= 0; i2--) {
          const { client, clock } = mergeStructs[i2].id;
          const structs = (
            /** @type {Array<GC|Item>} */
            store.clients.get(client)
          );
          const replacedStructPos = findIndexSS(structs, clock);
          if (replacedStructPos + 1 < structs.length) {
            if (tryToMergeWithLefts(structs, replacedStructPos + 1) > 1) {
              continue;
            }
          }
          if (replacedStructPos > 0) {
            tryToMergeWithLefts(structs, replacedStructPos);
          }
        }
        if (!transaction.local && transaction.afterState.get(doc4.clientID) !== transaction.beforeState.get(doc4.clientID)) {
          print(ORANGE, BOLD, "[yjs] ", UNBOLD, RED, "Changed the client-id because another client seems to be using it.");
          doc4.clientID = generateNewClientId();
        }
        doc4.emit("afterTransactionCleanup", [transaction, doc4]);
        if (doc4._observers.has("update")) {
          const encoder = new UpdateEncoderV1();
          const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
          if (hasContent2) {
            doc4.emit("update", [encoder.toUint8Array(), transaction.origin, doc4, transaction]);
          }
        }
        if (doc4._observers.has("updateV2")) {
          const encoder = new UpdateEncoderV2();
          const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
          if (hasContent2) {
            doc4.emit("updateV2", [encoder.toUint8Array(), transaction.origin, doc4, transaction]);
          }
        }
        const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;
        if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {
          subdocsAdded.forEach((subdoc) => {
            subdoc.clientID = doc4.clientID;
            if (subdoc.collectionid == null) {
              subdoc.collectionid = doc4.collectionid;
            }
            doc4.subdocs.add(subdoc);
          });
          subdocsRemoved.forEach((subdoc) => doc4.subdocs.delete(subdoc));
          doc4.emit("subdocs", [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc4, transaction]);
          subdocsRemoved.forEach((subdoc) => subdoc.destroy());
        }
        if (transactionCleanups.length <= i + 1) {
          doc4._transactionCleanups = [];
          doc4.emit("afterAllTransactions", [doc4, transactionCleanups]);
        } else {
          cleanupTransactions(transactionCleanups, i + 1);
        }
      }
    }
  };
  var transact = (doc4, f, origin = null, local = true) => {
    const transactionCleanups = doc4._transactionCleanups;
    let initialCall = false;
    let result = null;
    if (doc4._transaction === null) {
      initialCall = true;
      doc4._transaction = new Transaction(doc4, origin, local);
      transactionCleanups.push(doc4._transaction);
      if (transactionCleanups.length === 1) {
        doc4.emit("beforeAllTransactions", [doc4]);
      }
      doc4.emit("beforeTransaction", [doc4._transaction, doc4]);
    }
    try {
      result = f(doc4._transaction);
    } finally {
      if (initialCall) {
        const finishCleanup = doc4._transaction === transactionCleanups[0];
        doc4._transaction = null;
        if (finishCleanup) {
          cleanupTransactions(transactionCleanups, 0);
        }
      }
    }
    return result;
  };
  var StackItem = class {
    /**
     * @param {DeleteSet} deletions
     * @param {DeleteSet} insertions
     */
    constructor(deletions, insertions) {
      this.insertions = insertions;
      this.deletions = deletions;
      this.meta = /* @__PURE__ */ new Map();
    }
  };
  var clearUndoManagerStackItem = (tr, um, stackItem) => {
    iterateDeletedStructs(tr, stackItem.deletions, (item) => {
      if (item instanceof Item && um.scope.some((type) => isParentOf(type, item))) {
        keepItem(item, false);
      }
    });
  };
  var popStackItem = (undoManager, stack, eventType) => {
    let result = null;
    let _tr = null;
    const doc4 = undoManager.doc;
    const scope = undoManager.scope;
    transact(doc4, (transaction) => {
      while (stack.length > 0 && result === null) {
        const store = doc4.store;
        const stackItem = (
          /** @type {StackItem} */
          stack.pop()
        );
        const itemsToRedo = /* @__PURE__ */ new Set();
        const itemsToDelete = [];
        let performedChange = false;
        iterateDeletedStructs(transaction, stackItem.insertions, (struct) => {
          if (struct instanceof Item) {
            if (struct.redone !== null) {
              let { item, diff } = followRedone(store, struct.id);
              if (diff > 0) {
                item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));
              }
              struct = item;
            }
            if (!struct.deleted && scope.some((type) => isParentOf(
              type,
              /** @type {Item} */
              struct
            ))) {
              itemsToDelete.push(struct);
            }
          }
        });
        iterateDeletedStructs(transaction, stackItem.deletions, (struct) => {
          if (struct instanceof Item && scope.some((type) => isParentOf(type, struct)) && // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.
          !isDeleted(stackItem.insertions, struct.id)) {
            itemsToRedo.add(struct);
          }
        });
        itemsToRedo.forEach((struct) => {
          performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges, undoManager) !== null || performedChange;
        });
        for (let i = itemsToDelete.length - 1; i >= 0; i--) {
          const item = itemsToDelete[i];
          if (undoManager.deleteFilter(item)) {
            item.delete(transaction);
            performedChange = true;
          }
        }
        result = performedChange ? stackItem : null;
      }
      transaction.changed.forEach((subProps, type) => {
        if (subProps.has(null) && type._searchMarker) {
          type._searchMarker.length = 0;
        }
      });
      _tr = transaction;
    }, undoManager);
    if (result != null) {
      const changedParentTypes = _tr.changedParentTypes;
      undoManager.emit("stack-item-popped", [{ stackItem: result, type: eventType, changedParentTypes }, undoManager]);
    }
    return result;
  };
  var UndoManager = class extends Observable {
    /**
     * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types
     * @param {UndoManagerOptions} options
     */
    constructor(typeScope, {
      captureTimeout = 500,
      captureTransaction = (_tr) => true,
      deleteFilter = () => true,
      trackedOrigins = /* @__PURE__ */ new Set([null]),
      ignoreRemoteMapChanges = false,
      doc: doc4 = (
        /** @type {Doc} */
        isArray(typeScope) ? typeScope[0].doc : typeScope.doc
      )
    } = {}) {
      super();
      this.scope = [];
      this.doc = doc4;
      this.addToScope(typeScope);
      this.deleteFilter = deleteFilter;
      trackedOrigins.add(this);
      this.trackedOrigins = trackedOrigins;
      this.captureTransaction = captureTransaction;
      this.undoStack = [];
      this.redoStack = [];
      this.undoing = false;
      this.redoing = false;
      this.lastChange = 0;
      this.ignoreRemoteMapChanges = ignoreRemoteMapChanges;
      this.captureTimeout = captureTimeout;
      this.afterTransactionHandler = (transaction) => {
        if (!this.captureTransaction(transaction) || !this.scope.some((type) => transaction.changedParentTypes.has(type)) || !this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor))) {
          return;
        }
        const undoing = this.undoing;
        const redoing = this.redoing;
        const stack = undoing ? this.redoStack : this.undoStack;
        if (undoing) {
          this.stopCapturing();
        } else if (!redoing) {
          this.clear(false, true);
        }
        const insertions = new DeleteSet();
        transaction.afterState.forEach((endClock, client) => {
          const startClock = transaction.beforeState.get(client) || 0;
          const len = endClock - startClock;
          if (len > 0) {
            addToDeleteSet(insertions, client, startClock, len);
          }
        });
        const now2 = getUnixTime();
        let didAdd = false;
        if (this.lastChange > 0 && now2 - this.lastChange < this.captureTimeout && stack.length > 0 && !undoing && !redoing) {
          const lastOp = stack[stack.length - 1];
          lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);
          lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);
        } else {
          stack.push(new StackItem(transaction.deleteSet, insertions));
          didAdd = true;
        }
        if (!undoing && !redoing) {
          this.lastChange = now2;
        }
        iterateDeletedStructs(
          transaction,
          transaction.deleteSet,
          /** @param {Item|GC} item */
          (item) => {
            if (item instanceof Item && this.scope.some((type) => isParentOf(type, item))) {
              keepItem(item, true);
            }
          }
        );
        const changeEvent = [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? "redo" : "undo", changedParentTypes: transaction.changedParentTypes }, this];
        if (didAdd) {
          this.emit("stack-item-added", changeEvent);
        } else {
          this.emit("stack-item-updated", changeEvent);
        }
      };
      this.doc.on("afterTransaction", this.afterTransactionHandler);
      this.doc.on("destroy", () => {
        this.destroy();
      });
    }
    /**
     * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes
     */
    addToScope(ytypes) {
      ytypes = isArray(ytypes) ? ytypes : [ytypes];
      ytypes.forEach((ytype) => {
        if (this.scope.every((yt) => yt !== ytype)) {
          if (ytype.doc !== this.doc)
            warn("[yjs#509] Not same Y.Doc");
          this.scope.push(ytype);
        }
      });
    }
    /**
     * @param {any} origin
     */
    addTrackedOrigin(origin) {
      this.trackedOrigins.add(origin);
    }
    /**
     * @param {any} origin
     */
    removeTrackedOrigin(origin) {
      this.trackedOrigins.delete(origin);
    }
    clear(clearUndoStack = true, clearRedoStack = true) {
      if (clearUndoStack && this.canUndo() || clearRedoStack && this.canRedo()) {
        this.doc.transact((tr) => {
          if (clearUndoStack) {
            this.undoStack.forEach((item) => clearUndoManagerStackItem(tr, this, item));
            this.undoStack = [];
          }
          if (clearRedoStack) {
            this.redoStack.forEach((item) => clearUndoManagerStackItem(tr, this, item));
            this.redoStack = [];
          }
          this.emit("stack-cleared", [{ undoStackCleared: clearUndoStack, redoStackCleared: clearRedoStack }]);
        });
      }
    }
    /**
     * UndoManager merges Undo-StackItem if they are created within time-gap
     * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next
     * StackItem won't be merged.
     *
     *
     * @example
     *     // without stopCapturing
     *     ytext.insert(0, 'a')
     *     ytext.insert(1, 'b')
     *     um.undo()
     *     ytext.toString() // => '' (note that 'ab' was removed)
     *     // with stopCapturing
     *     ytext.insert(0, 'a')
     *     um.stopCapturing()
     *     ytext.insert(0, 'b')
     *     um.undo()
     *     ytext.toString() // => 'a' (note that only 'b' was removed)
     *
     */
    stopCapturing() {
      this.lastChange = 0;
    }
    /**
     * Undo last changes on type.
     *
     * @return {StackItem?} Returns StackItem if a change was applied
     */
    undo() {
      this.undoing = true;
      let res;
      try {
        res = popStackItem(this, this.undoStack, "undo");
      } finally {
        this.undoing = false;
      }
      return res;
    }
    /**
     * Redo last undo operation.
     *
     * @return {StackItem?} Returns StackItem if a change was applied
     */
    redo() {
      this.redoing = true;
      let res;
      try {
        res = popStackItem(this, this.redoStack, "redo");
      } finally {
        this.redoing = false;
      }
      return res;
    }
    /**
     * Are undo steps available?
     *
     * @return {boolean} `true` if undo is possible
     */
    canUndo() {
      return this.undoStack.length > 0;
    }
    /**
     * Are redo steps available?
     *
     * @return {boolean} `true` if redo is possible
     */
    canRedo() {
      return this.redoStack.length > 0;
    }
    destroy() {
      this.trackedOrigins.delete(this);
      this.doc.off("afterTransaction", this.afterTransactionHandler);
      super.destroy();
    }
  };
  function* lazyStructReaderGenerator(decoder) {
    const numOfStateUpdates = readVarUint(decoder.restDecoder);
    for (let i = 0; i < numOfStateUpdates; i++) {
      const numberOfStructs = readVarUint(decoder.restDecoder);
      const client = decoder.readClient();
      let clock = readVarUint(decoder.restDecoder);
      for (let i2 = 0; i2 < numberOfStructs; i2++) {
        const info = decoder.readInfo();
        if (info === 10) {
          const len = readVarUint(decoder.restDecoder);
          yield new Skip(createID(client, clock), len);
          clock += len;
        } else if ((BITS5 & info) !== 0) {
          const cantCopyParentInfo = (info & (BIT7 | BIT8)) === 0;
          const struct = new Item(
            createID(client, clock),
            null,
            // left
            (info & BIT8) === BIT8 ? decoder.readLeftID() : null,
            // origin
            null,
            // right
            (info & BIT7) === BIT7 ? decoder.readRightID() : null,
            // right origin
            // @ts-ignore Force writing a string here.
            cantCopyParentInfo ? decoder.readParentInfo() ? decoder.readString() : decoder.readLeftID() : null,
            // parent
            cantCopyParentInfo && (info & BIT6) === BIT6 ? decoder.readString() : null,
            // parentSub
            readItemContent(decoder, info)
            // item content
          );
          yield struct;
          clock += struct.length;
        } else {
          const len = decoder.readLen();
          yield new GC(createID(client, clock), len);
          clock += len;
        }
      }
    }
  }
  var LazyStructReader = class {
    /**
     * @param {UpdateDecoderV1 | UpdateDecoderV2} decoder
     * @param {boolean} filterSkips
     */
    constructor(decoder, filterSkips) {
      this.gen = lazyStructReaderGenerator(decoder);
      this.curr = null;
      this.done = false;
      this.filterSkips = filterSkips;
      this.next();
    }
    /**
     * @return {Item | GC | Skip |null}
     */
    next() {
      do {
        this.curr = this.gen.next().value || null;
      } while (this.filterSkips && this.curr !== null && this.curr.constructor === Skip);
      return this.curr;
    }
  };
  var logUpdate = (update2) => logUpdateV2(update2, UpdateDecoderV1);
  var logUpdateV2 = (update2, YDecoder = UpdateDecoderV2) => {
    const structs = [];
    const updateDecoder = new YDecoder(createDecoder(update2));
    const lazyDecoder = new LazyStructReader(updateDecoder, false);
    for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {
      structs.push(curr);
    }
    print("Structs: ", structs);
    const ds = readDeleteSet(updateDecoder);
    print("DeleteSet: ", ds);
  };
  var decodeUpdate = (update2) => decodeUpdateV2(update2, UpdateDecoderV1);
  var decodeUpdateV2 = (update2, YDecoder = UpdateDecoderV2) => {
    const structs = [];
    const updateDecoder = new YDecoder(createDecoder(update2));
    const lazyDecoder = new LazyStructReader(updateDecoder, false);
    for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {
      structs.push(curr);
    }
    return {
      structs,
      ds: readDeleteSet(updateDecoder)
    };
  };
  var LazyStructWriter = class {
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     */
    constructor(encoder) {
      this.currClient = 0;
      this.startClock = 0;
      this.written = 0;
      this.encoder = encoder;
      this.clientStructs = [];
    }
  };
  var mergeUpdates = (updates) => mergeUpdatesV2(updates, UpdateDecoderV1, UpdateEncoderV1);
  var encodeStateVectorFromUpdateV2 = (update2, YEncoder = DSEncoderV2, YDecoder = UpdateDecoderV2) => {
    const encoder = new YEncoder();
    const updateDecoder = new LazyStructReader(new YDecoder(createDecoder(update2)), false);
    let curr = updateDecoder.curr;
    if (curr !== null) {
      let size = 0;
      let currClient = curr.id.client;
      let stopCounting = curr.id.clock !== 0;
      let currClock = stopCounting ? 0 : curr.id.clock + curr.length;
      for (; curr !== null; curr = updateDecoder.next()) {
        if (currClient !== curr.id.client) {
          if (currClock !== 0) {
            size++;
            writeVarUint(encoder.restEncoder, currClient);
            writeVarUint(encoder.restEncoder, currClock);
          }
          currClient = curr.id.client;
          currClock = 0;
          stopCounting = curr.id.clock !== 0;
        }
        if (curr.constructor === Skip) {
          stopCounting = true;
        }
        if (!stopCounting) {
          currClock = curr.id.clock + curr.length;
        }
      }
      if (currClock !== 0) {
        size++;
        writeVarUint(encoder.restEncoder, currClient);
        writeVarUint(encoder.restEncoder, currClock);
      }
      const enc = createEncoder();
      writeVarUint(enc, size);
      writeBinaryEncoder(enc, encoder.restEncoder);
      encoder.restEncoder = enc;
      return encoder.toUint8Array();
    } else {
      writeVarUint(encoder.restEncoder, 0);
      return encoder.toUint8Array();
    }
  };
  var encodeStateVectorFromUpdate = (update2) => encodeStateVectorFromUpdateV2(update2, DSEncoderV1, UpdateDecoderV1);
  var parseUpdateMetaV2 = (update2, YDecoder = UpdateDecoderV2) => {
    const from2 = /* @__PURE__ */ new Map();
    const to = /* @__PURE__ */ new Map();
    const updateDecoder = new LazyStructReader(new YDecoder(createDecoder(update2)), false);
    let curr = updateDecoder.curr;
    if (curr !== null) {
      let currClient = curr.id.client;
      let currClock = curr.id.clock;
      from2.set(currClient, currClock);
      for (; curr !== null; curr = updateDecoder.next()) {
        if (currClient !== curr.id.client) {
          to.set(currClient, currClock);
          from2.set(curr.id.client, curr.id.clock);
          currClient = curr.id.client;
        }
        currClock = curr.id.clock + curr.length;
      }
      to.set(currClient, currClock);
    }
    return { from: from2, to };
  };
  var parseUpdateMeta = (update2) => parseUpdateMetaV2(update2, UpdateDecoderV1);
  var sliceStruct = (left, diff) => {
    if (left.constructor === GC) {
      const { client, clock } = left.id;
      return new GC(createID(client, clock + diff), left.length - diff);
    } else if (left.constructor === Skip) {
      const { client, clock } = left.id;
      return new Skip(createID(client, clock + diff), left.length - diff);
    } else {
      const leftItem = (
        /** @type {Item} */
        left
      );
      const { client, clock } = leftItem.id;
      return new Item(
        createID(client, clock + diff),
        null,
        createID(client, clock + diff - 1),
        null,
        leftItem.rightOrigin,
        leftItem.parent,
        leftItem.parentSub,
        leftItem.content.splice(diff)
      );
    }
  };
  var mergeUpdatesV2 = (updates, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {
    if (updates.length === 1) {
      return updates[0];
    }
    const updateDecoders = updates.map((update2) => new YDecoder(createDecoder(update2)));
    let lazyStructDecoders = updateDecoders.map((decoder) => new LazyStructReader(decoder, true));
    let currWrite = null;
    const updateEncoder = new YEncoder();
    const lazyStructEncoder = new LazyStructWriter(updateEncoder);
    while (true) {
      lazyStructDecoders = lazyStructDecoders.filter((dec) => dec.curr !== null);
      lazyStructDecoders.sort(
        /** @type {function(any,any):number} */
        (dec1, dec2) => {
          if (dec1.curr.id.client === dec2.curr.id.client) {
            const clockDiff = dec1.curr.id.clock - dec2.curr.id.clock;
            if (clockDiff === 0) {
              return dec1.curr.constructor === dec2.curr.constructor ? 0 : dec1.curr.constructor === Skip ? 1 : -1;
            } else {
              return clockDiff;
            }
          } else {
            return dec2.curr.id.client - dec1.curr.id.client;
          }
        }
      );
      if (lazyStructDecoders.length === 0) {
        break;
      }
      const currDecoder = lazyStructDecoders[0];
      const firstClient = (
        /** @type {Item | GC} */
        currDecoder.curr.id.client
      );
      if (currWrite !== null) {
        let curr = (
          /** @type {Item | GC | null} */
          currDecoder.curr
        );
        let iterated = false;
        while (curr !== null && curr.id.clock + curr.length <= currWrite.struct.id.clock + currWrite.struct.length && curr.id.client >= currWrite.struct.id.client) {
          curr = currDecoder.next();
          iterated = true;
        }
        if (curr === null || // current decoder is empty
        curr.id.client !== firstClient || // check whether there is another decoder that has has updates from `firstClient`
        iterated && curr.id.clock > currWrite.struct.id.clock + currWrite.struct.length) {
          continue;
        }
        if (firstClient !== currWrite.struct.id.client) {
          writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
          currWrite = { struct: curr, offset: 0 };
          currDecoder.next();
        } else {
          if (currWrite.struct.id.clock + currWrite.struct.length < curr.id.clock) {
            if (currWrite.struct.constructor === Skip) {
              currWrite.struct.length = curr.id.clock + curr.length - currWrite.struct.id.clock;
            } else {
              writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
              const diff = curr.id.clock - currWrite.struct.id.clock - currWrite.struct.length;
              const struct = new Skip(createID(firstClient, currWrite.struct.id.clock + currWrite.struct.length), diff);
              currWrite = { struct, offset: 0 };
            }
          } else {
            const diff = currWrite.struct.id.clock + currWrite.struct.length - curr.id.clock;
            if (diff > 0) {
              if (currWrite.struct.constructor === Skip) {
                currWrite.struct.length -= diff;
              } else {
                curr = sliceStruct(curr, diff);
              }
            }
            if (!currWrite.struct.mergeWith(
              /** @type {any} */
              curr
            )) {
              writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
              currWrite = { struct: curr, offset: 0 };
              currDecoder.next();
            }
          }
        }
      } else {
        currWrite = { struct: (
          /** @type {Item | GC} */
          currDecoder.curr
        ), offset: 0 };
        currDecoder.next();
      }
      for (let next2 = currDecoder.curr; next2 !== null && next2.id.client === firstClient && next2.id.clock === currWrite.struct.id.clock + currWrite.struct.length && next2.constructor !== Skip; next2 = currDecoder.next()) {
        writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
        currWrite = { struct: next2, offset: 0 };
      }
    }
    if (currWrite !== null) {
      writeStructToLazyStructWriter(lazyStructEncoder, currWrite.struct, currWrite.offset);
      currWrite = null;
    }
    finishLazyStructWriting(lazyStructEncoder);
    const dss = updateDecoders.map((decoder) => readDeleteSet(decoder));
    const ds = mergeDeleteSets(dss);
    writeDeleteSet(updateEncoder, ds);
    return updateEncoder.toUint8Array();
  };
  var diffUpdateV2 = (update2, sv, YDecoder = UpdateDecoderV2, YEncoder = UpdateEncoderV2) => {
    const state = decodeStateVector(sv);
    const encoder = new YEncoder();
    const lazyStructWriter = new LazyStructWriter(encoder);
    const decoder = new YDecoder(createDecoder(update2));
    const reader = new LazyStructReader(decoder, false);
    while (reader.curr) {
      const curr = reader.curr;
      const currClient = curr.id.client;
      const svClock = state.get(currClient) || 0;
      if (reader.curr.constructor === Skip) {
        reader.next();
        continue;
      }
      if (curr.id.clock + curr.length > svClock) {
        writeStructToLazyStructWriter(lazyStructWriter, curr, max(svClock - curr.id.clock, 0));
        reader.next();
        while (reader.curr && reader.curr.id.client === currClient) {
          writeStructToLazyStructWriter(lazyStructWriter, reader.curr, 0);
          reader.next();
        }
      } else {
        while (reader.curr && reader.curr.id.client === currClient && reader.curr.id.clock + reader.curr.length <= svClock) {
          reader.next();
        }
      }
    }
    finishLazyStructWriting(lazyStructWriter);
    const ds = readDeleteSet(decoder);
    writeDeleteSet(encoder, ds);
    return encoder.toUint8Array();
  };
  var diffUpdate = (update2, sv) => diffUpdateV2(update2, sv, UpdateDecoderV1, UpdateEncoderV1);
  var flushLazyStructWriter = (lazyWriter) => {
    if (lazyWriter.written > 0) {
      lazyWriter.clientStructs.push({ written: lazyWriter.written, restEncoder: toUint8Array2(lazyWriter.encoder.restEncoder) });
      lazyWriter.encoder.restEncoder = createEncoder();
      lazyWriter.written = 0;
    }
  };
  var writeStructToLazyStructWriter = (lazyWriter, struct, offset) => {
    if (lazyWriter.written > 0 && lazyWriter.currClient !== struct.id.client) {
      flushLazyStructWriter(lazyWriter);
    }
    if (lazyWriter.written === 0) {
      lazyWriter.currClient = struct.id.client;
      lazyWriter.encoder.writeClient(struct.id.client);
      writeVarUint(lazyWriter.encoder.restEncoder, struct.id.clock + offset);
    }
    struct.write(lazyWriter.encoder, offset);
    lazyWriter.written++;
  };
  var finishLazyStructWriting = (lazyWriter) => {
    flushLazyStructWriter(lazyWriter);
    const restEncoder = lazyWriter.encoder.restEncoder;
    writeVarUint(restEncoder, lazyWriter.clientStructs.length);
    for (let i = 0; i < lazyWriter.clientStructs.length; i++) {
      const partStructs = lazyWriter.clientStructs[i];
      writeVarUint(restEncoder, partStructs.written);
      writeUint8Array(restEncoder, partStructs.restEncoder);
    }
  };
  var convertUpdateFormat = (update2, blockTransformer, YDecoder, YEncoder) => {
    const updateDecoder = new YDecoder(createDecoder(update2));
    const lazyDecoder = new LazyStructReader(updateDecoder, false);
    const updateEncoder = new YEncoder();
    const lazyWriter = new LazyStructWriter(updateEncoder);
    for (let curr = lazyDecoder.curr; curr !== null; curr = lazyDecoder.next()) {
      writeStructToLazyStructWriter(lazyWriter, blockTransformer(curr), 0);
    }
    finishLazyStructWriting(lazyWriter);
    const ds = readDeleteSet(updateDecoder);
    writeDeleteSet(updateEncoder, ds);
    return updateEncoder.toUint8Array();
  };
  var createObfuscator = ({ formatting = true, subdocs = true, yxml = true } = {}) => {
    let i = 0;
    const mapKeyCache = create();
    const nodeNameCache = create();
    const formattingKeyCache = create();
    const formattingValueCache = create();
    formattingValueCache.set(null, null);
    return (block) => {
      switch (block.constructor) {
        case GC:
        case Skip:
          return block;
        case Item: {
          const item = (
            /** @type {Item} */
            block
          );
          const content = item.content;
          switch (content.constructor) {
            case ContentDeleted:
              break;
            case ContentType: {
              if (yxml) {
                const type = (
                  /** @type {ContentType} */
                  content.type
                );
                if (type instanceof YXmlElement) {
                  type.nodeName = setIfUndefined(nodeNameCache, type.nodeName, () => "node-" + i);
                }
                if (type instanceof YXmlHook) {
                  type.hookName = setIfUndefined(nodeNameCache, type.hookName, () => "hook-" + i);
                }
              }
              break;
            }
            case ContentAny: {
              const c = (
                /** @type {ContentAny} */
                content
              );
              c.arr = c.arr.map(() => i);
              break;
            }
            case ContentBinary: {
              const c = (
                /** @type {ContentBinary} */
                content
              );
              c.content = new Uint8Array([i]);
              break;
            }
            case ContentDoc: {
              const c = (
                /** @type {ContentDoc} */
                content
              );
              if (subdocs) {
                c.opts = {};
                c.doc.guid = i + "";
              }
              break;
            }
            case ContentEmbed: {
              const c = (
                /** @type {ContentEmbed} */
                content
              );
              c.embed = {};
              break;
            }
            case ContentFormat: {
              const c = (
                /** @type {ContentFormat} */
                content
              );
              if (formatting) {
                c.key = setIfUndefined(formattingKeyCache, c.key, () => i + "");
                c.value = setIfUndefined(formattingValueCache, c.value, () => ({ i }));
              }
              break;
            }
            case ContentJSON: {
              const c = (
                /** @type {ContentJSON} */
                content
              );
              c.arr = c.arr.map(() => i);
              break;
            }
            case ContentString: {
              const c = (
                /** @type {ContentString} */
                content
              );
              c.str = repeat(i % 10 + "", c.str.length);
              break;
            }
            default:
              unexpectedCase();
          }
          if (item.parentSub) {
            item.parentSub = setIfUndefined(mapKeyCache, item.parentSub, () => i + "");
          }
          i++;
          return block;
        }
        default:
          unexpectedCase();
      }
    };
  };
  var obfuscateUpdate = (update2, opts) => convertUpdateFormat(update2, createObfuscator(opts), UpdateDecoderV1, UpdateEncoderV1);
  var obfuscateUpdateV2 = (update2, opts) => convertUpdateFormat(update2, createObfuscator(opts), UpdateDecoderV2, UpdateEncoderV2);
  var convertUpdateFormatV1ToV2 = (update2) => convertUpdateFormat(update2, id, UpdateDecoderV1, UpdateEncoderV2);
  var convertUpdateFormatV2ToV1 = (update2) => convertUpdateFormat(update2, id, UpdateDecoderV2, UpdateEncoderV1);
  var errorComputeChanges = "You must not compute changes after the event-handler fired.";
  var YEvent = class {
    /**
     * @param {T} target The changed type.
     * @param {Transaction} transaction
     */
    constructor(target, transaction) {
      this.target = target;
      this.currentTarget = target;
      this.transaction = transaction;
      this._changes = null;
      this._keys = null;
      this._delta = null;
      this._path = null;
    }
    /**
     * Computes the path from `y` to the changed type.
     *
     * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.
     *
     * The following property holds:
     * @example
     *   let type = y
     *   event.path.forEach(dir => {
     *     type = type.get(dir)
     *   })
     *   type === event.target // => true
     */
    get path() {
      return this._path || (this._path = getPathTo(this.currentTarget, this.target));
    }
    /**
     * Check if a struct is deleted by this event.
     *
     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.
     *
     * @param {AbstractStruct} struct
     * @return {boolean}
     */
    deletes(struct) {
      return isDeleted(this.transaction.deleteSet, struct.id);
    }
    /**
     * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}
     */
    get keys() {
      if (this._keys === null) {
        if (this.transaction.doc._transactionCleanups.length === 0) {
          throw create3(errorComputeChanges);
        }
        const keys2 = /* @__PURE__ */ new Map();
        const target = this.target;
        const changed = (
          /** @type Set<string|null> */
          this.transaction.changed.get(target)
        );
        changed.forEach((key) => {
          if (key !== null) {
            const item = (
              /** @type {Item} */
              target._map.get(key)
            );
            let action;
            let oldValue;
            if (this.adds(item)) {
              let prev = item.left;
              while (prev !== null && this.adds(prev)) {
                prev = prev.left;
              }
              if (this.deletes(item)) {
                if (prev !== null && this.deletes(prev)) {
                  action = "delete";
                  oldValue = last(prev.content.getContent());
                } else {
                  return;
                }
              } else {
                if (prev !== null && this.deletes(prev)) {
                  action = "update";
                  oldValue = last(prev.content.getContent());
                } else {
                  action = "add";
                  oldValue = void 0;
                }
              }
            } else {
              if (this.deletes(item)) {
                action = "delete";
                oldValue = last(
                  /** @type {Item} */
                  item.content.getContent()
                );
              } else {
                return;
              }
            }
            keys2.set(key, { action, oldValue });
          }
        });
        this._keys = keys2;
      }
      return this._keys;
    }
    /**
     * This is a computed property. Note that this can only be safely computed during the
     * event call. Computing this property after other changes happened might result in
     * unexpected behavior (incorrect computation of deltas). A safe way to collect changes
     * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.
     *
     * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}
     */
    get delta() {
      return this.changes.delta;
    }
    /**
     * Check if a struct is added by this event.
     *
     * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.
     *
     * @param {AbstractStruct} struct
     * @return {boolean}
     */
    adds(struct) {
      return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);
    }
    /**
     * This is a computed property. Note that this can only be safely computed during the
     * event call. Computing this property after other changes happened might result in
     * unexpected behavior (incorrect computation of deltas). A safe way to collect changes
     * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.
     *
     * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}
     */
    get changes() {
      let changes = this._changes;
      if (changes === null) {
        if (this.transaction.doc._transactionCleanups.length === 0) {
          throw create3(errorComputeChanges);
        }
        const target = this.target;
        const added = create2();
        const deleted = create2();
        const delta = [];
        changes = {
          added,
          deleted,
          delta,
          keys: this.keys
        };
        const changed = (
          /** @type Set<string|null> */
          this.transaction.changed.get(target)
        );
        if (changed.has(null)) {
          let lastOp = null;
          const packOp = () => {
            if (lastOp) {
              delta.push(lastOp);
            }
          };
          for (let item = target._start; item !== null; item = item.right) {
            if (item.deleted) {
              if (this.deletes(item) && !this.adds(item)) {
                if (lastOp === null || lastOp.delete === void 0) {
                  packOp();
                  lastOp = { delete: 0 };
                }
                lastOp.delete += item.length;
                deleted.add(item);
              }
            } else {
              if (this.adds(item)) {
                if (lastOp === null || lastOp.insert === void 0) {
                  packOp();
                  lastOp = { insert: [] };
                }
                lastOp.insert = lastOp.insert.concat(item.content.getContent());
                added.add(item);
              } else {
                if (lastOp === null || lastOp.retain === void 0) {
                  packOp();
                  lastOp = { retain: 0 };
                }
                lastOp.retain += item.length;
              }
            }
          }
          if (lastOp !== null && lastOp.retain === void 0) {
            packOp();
          }
        }
        this._changes = changes;
      }
      return (
        /** @type {any} */
        changes
      );
    }
  };
  var getPathTo = (parent, child) => {
    const path = [];
    while (child._item !== null && child !== parent) {
      if (child._item.parentSub !== null) {
        path.unshift(child._item.parentSub);
      } else {
        let i = 0;
        let c = (
          /** @type {AbstractType<any>} */
          child._item.parent._start
        );
        while (c !== child._item && c !== null) {
          if (!c.deleted) {
            i++;
          }
          c = c.right;
        }
        path.unshift(i);
      }
      child = /** @type {AbstractType<any>} */
      child._item.parent;
    }
    return path;
  };
  var maxSearchMarker = 80;
  var globalSearchMarkerTimestamp = 0;
  var ArraySearchMarker = class {
    /**
     * @param {Item} p
     * @param {number} index
     */
    constructor(p, index) {
      p.marker = true;
      this.p = p;
      this.index = index;
      this.timestamp = globalSearchMarkerTimestamp++;
    }
  };
  var refreshMarkerTimestamp = (marker) => {
    marker.timestamp = globalSearchMarkerTimestamp++;
  };
  var overwriteMarker = (marker, p, index) => {
    marker.p.marker = false;
    marker.p = p;
    p.marker = true;
    marker.index = index;
    marker.timestamp = globalSearchMarkerTimestamp++;
  };
  var markPosition = (searchMarker, p, index) => {
    if (searchMarker.length >= maxSearchMarker) {
      const marker = searchMarker.reduce((a, b) => a.timestamp < b.timestamp ? a : b);
      overwriteMarker(marker, p, index);
      return marker;
    } else {
      const pm = new ArraySearchMarker(p, index);
      searchMarker.push(pm);
      return pm;
    }
  };
  var findMarker = (yarray, index) => {
    if (yarray._start === null || index === 0 || yarray._searchMarker === null) {
      return null;
    }
    const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a, b) => abs(index - a.index) < abs(index - b.index) ? a : b);
    let p = yarray._start;
    let pindex = 0;
    if (marker !== null) {
      p = marker.p;
      pindex = marker.index;
      refreshMarkerTimestamp(marker);
    }
    while (p.right !== null && pindex < index) {
      if (!p.deleted && p.countable) {
        if (index < pindex + p.length) {
          break;
        }
        pindex += p.length;
      }
      p = p.right;
    }
    while (p.left !== null && pindex > index) {
      p = p.left;
      if (!p.deleted && p.countable) {
        pindex -= p.length;
      }
    }
    while (p.left !== null && p.left.id.client === p.id.client && p.left.id.clock + p.left.length === p.id.clock) {
      p = p.left;
      if (!p.deleted && p.countable) {
        pindex -= p.length;
      }
    }
    if (marker !== null && abs(marker.index - pindex) < /** @type {YText|YArray<any>} */
    p.parent.length / maxSearchMarker) {
      overwriteMarker(marker, p, pindex);
      return marker;
    } else {
      return markPosition(yarray._searchMarker, p, pindex);
    }
  };
  var updateMarkerChanges = (searchMarker, index, len) => {
    for (let i = searchMarker.length - 1; i >= 0; i--) {
      const m = searchMarker[i];
      if (len > 0) {
        let p = m.p;
        p.marker = false;
        while (p && (p.deleted || !p.countable)) {
          p = p.left;
          if (p && !p.deleted && p.countable) {
            m.index -= p.length;
          }
        }
        if (p === null || p.marker === true) {
          searchMarker.splice(i, 1);
          continue;
        }
        m.p = p;
        p.marker = true;
      }
      if (index < m.index || len > 0 && index === m.index) {
        m.index = max(index, m.index + len);
      }
    }
  };
  var getTypeChildren = (t) => {
    let s = t._start;
    const arr = [];
    while (s) {
      arr.push(s);
      s = s.right;
    }
    return arr;
  };
  var callTypeObservers = (type, transaction, event) => {
    const changedType = type;
    const changedParentTypes = transaction.changedParentTypes;
    while (true) {
      setIfUndefined(changedParentTypes, type, () => []).push(event);
      if (type._item === null) {
        break;
      }
      type = /** @type {AbstractType<any>} */
      type._item.parent;
    }
    callEventHandlerListeners(changedType._eH, event, transaction);
  };
  var AbstractType = class {
    constructor() {
      this._item = null;
      this._map = /* @__PURE__ */ new Map();
      this._start = null;
      this.doc = null;
      this._length = 0;
      this._eH = createEventHandler();
      this._dEH = createEventHandler();
      this._searchMarker = null;
    }
    /**
     * @return {AbstractType<any>|null}
     */
    get parent() {
      return this._item ? (
        /** @type {AbstractType<any>} */
        this._item.parent
      ) : null;
    }
    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Doc} y The Yjs instance
     * @param {Item|null} item
     */
    _integrate(y, item) {
      this.doc = y;
      this._item = item;
    }
    /**
     * @return {AbstractType<EventType>}
     */
    _copy() {
      throw methodUnimplemented();
    }
    /**
     * @return {AbstractType<EventType>}
     */
    clone() {
      throw methodUnimplemented();
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder
     */
    _write(_encoder) {
    }
    /**
     * The first non-deleted item
     */
    get _first() {
      let n = this._start;
      while (n !== null && n.deleted) {
        n = n.right;
      }
      return n;
    }
    /**
     * Creates YEvent and calls all type observers.
     * Must be implemented by each type.
     *
     * @param {Transaction} transaction
     * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.
     */
    _callObserver(transaction, _parentSubs) {
      if (!transaction.local && this._searchMarker) {
        this._searchMarker.length = 0;
      }
    }
    /**
     * Observe all events that are created on this type.
     *
     * @param {function(EventType, Transaction):void} f Observer function
     */
    observe(f) {
      addEventHandlerListener(this._eH, f);
    }
    /**
     * Observe all events that are created by this type and its children.
     *
     * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function
     */
    observeDeep(f) {
      addEventHandlerListener(this._dEH, f);
    }
    /**
     * Unregister an observer function.
     *
     * @param {function(EventType,Transaction):void} f Observer function
     */
    unobserve(f) {
      removeEventHandlerListener(this._eH, f);
    }
    /**
     * Unregister an observer function.
     *
     * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function
     */
    unobserveDeep(f) {
      removeEventHandlerListener(this._dEH, f);
    }
    /**
     * @abstract
     * @return {any}
     */
    toJSON() {
    }
  };
  var typeListSlice = (type, start, end) => {
    if (start < 0) {
      start = type._length + start;
    }
    if (end < 0) {
      end = type._length + end;
    }
    let len = end - start;
    const cs = [];
    let n = type._start;
    while (n !== null && len > 0) {
      if (n.countable && !n.deleted) {
        const c = n.content.getContent();
        if (c.length <= start) {
          start -= c.length;
        } else {
          for (let i = start; i < c.length && len > 0; i++) {
            cs.push(c[i]);
            len--;
          }
          start = 0;
        }
      }
      n = n.right;
    }
    return cs;
  };
  var typeListToArray = (type) => {
    const cs = [];
    let n = type._start;
    while (n !== null) {
      if (n.countable && !n.deleted) {
        const c = n.content.getContent();
        for (let i = 0; i < c.length; i++) {
          cs.push(c[i]);
        }
      }
      n = n.right;
    }
    return cs;
  };
  var typeListToArraySnapshot = (type, snapshot2) => {
    const cs = [];
    let n = type._start;
    while (n !== null) {
      if (n.countable && isVisible(n, snapshot2)) {
        const c = n.content.getContent();
        for (let i = 0; i < c.length; i++) {
          cs.push(c[i]);
        }
      }
      n = n.right;
    }
    return cs;
  };
  var typeListForEach = (type, f) => {
    let index = 0;
    let n = type._start;
    while (n !== null) {
      if (n.countable && !n.deleted) {
        const c = n.content.getContent();
        for (let i = 0; i < c.length; i++) {
          f(c[i], index++, type);
        }
      }
      n = n.right;
    }
  };
  var typeListMap = (type, f) => {
    const result = [];
    typeListForEach(type, (c, i) => {
      result.push(f(c, i, type));
    });
    return result;
  };
  var typeListCreateIterator = (type) => {
    let n = type._start;
    let currentContent = null;
    let currentContentIndex = 0;
    return {
      [Symbol.iterator]() {
        return this;
      },
      next: () => {
        if (currentContent === null) {
          while (n !== null && n.deleted) {
            n = n.right;
          }
          if (n === null) {
            return {
              done: true,
              value: void 0
            };
          }
          currentContent = n.content.getContent();
          currentContentIndex = 0;
          n = n.right;
        }
        const value = currentContent[currentContentIndex++];
        if (currentContent.length <= currentContentIndex) {
          currentContent = null;
        }
        return {
          done: false,
          value
        };
      }
    };
  };
  var typeListGet = (type, index) => {
    const marker = findMarker(type, index);
    let n = type._start;
    if (marker !== null) {
      n = marker.p;
      index -= marker.index;
    }
    for (; n !== null; n = n.right) {
      if (!n.deleted && n.countable) {
        if (index < n.length) {
          return n.content.getContent()[index];
        }
        index -= n.length;
      }
    }
  };
  var typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {
    let left = referenceItem;
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    const store = doc4.store;
    const right = referenceItem === null ? parent._start : referenceItem.right;
    let jsonContent = [];
    const packJsonContent = () => {
      if (jsonContent.length > 0) {
        left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));
        left.integrate(transaction, 0);
        jsonContent = [];
      }
    };
    content.forEach((c) => {
      if (c === null) {
        jsonContent.push(c);
      } else {
        switch (c.constructor) {
          case Number:
          case Object:
          case Boolean:
          case Array:
          case String:
            jsonContent.push(c);
            break;
          default:
            packJsonContent();
            switch (c.constructor) {
              case Uint8Array:
              case ArrayBuffer:
                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(
                  /** @type {Uint8Array} */
                  c
                )));
                left.integrate(transaction, 0);
                break;
              case Doc:
                left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentDoc(
                  /** @type {Doc} */
                  c
                ));
                left.integrate(transaction, 0);
                break;
              default:
                if (c instanceof AbstractType) {
                  left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));
                  left.integrate(transaction, 0);
                } else {
                  throw new Error("Unexpected content type in insert operation");
                }
            }
        }
      }
    });
    packJsonContent();
  };
  var lengthExceeded = () => create3("Length exceeded!");
  var typeListInsertGenerics = (transaction, parent, index, content) => {
    if (index > parent._length) {
      throw lengthExceeded();
    }
    if (index === 0) {
      if (parent._searchMarker) {
        updateMarkerChanges(parent._searchMarker, index, content.length);
      }
      return typeListInsertGenericsAfter(transaction, parent, null, content);
    }
    const startIndex = index;
    const marker = findMarker(parent, index);
    let n = parent._start;
    if (marker !== null) {
      n = marker.p;
      index -= marker.index;
      if (index === 0) {
        n = n.prev;
        index += n && n.countable && !n.deleted ? n.length : 0;
      }
    }
    for (; n !== null; n = n.right) {
      if (!n.deleted && n.countable) {
        if (index <= n.length) {
          if (index < n.length) {
            getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));
          }
          break;
        }
        index -= n.length;
      }
    }
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, startIndex, content.length);
    }
    return typeListInsertGenericsAfter(transaction, parent, n, content);
  };
  var typeListPushGenerics = (transaction, parent, content) => {
    const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });
    let n = marker.p;
    if (n) {
      while (n.right) {
        n = n.right;
      }
    }
    return typeListInsertGenericsAfter(transaction, parent, n, content);
  };
  var typeListDelete = (transaction, parent, index, length3) => {
    if (length3 === 0) {
      return;
    }
    const startIndex = index;
    const startLength = length3;
    const marker = findMarker(parent, index);
    let n = parent._start;
    if (marker !== null) {
      n = marker.p;
      index -= marker.index;
    }
    for (; n !== null && index > 0; n = n.right) {
      if (!n.deleted && n.countable) {
        if (index < n.length) {
          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));
        }
        index -= n.length;
      }
    }
    while (length3 > 0 && n !== null) {
      if (!n.deleted) {
        if (length3 < n.length) {
          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length3));
        }
        n.delete(transaction);
        length3 -= n.length;
      }
      n = n.right;
    }
    if (length3 > 0) {
      throw lengthExceeded();
    }
    if (parent._searchMarker) {
      updateMarkerChanges(
        parent._searchMarker,
        startIndex,
        -startLength + length3
        /* in case we remove the above exception */
      );
    }
  };
  var typeMapDelete = (transaction, parent, key) => {
    const c = parent._map.get(key);
    if (c !== void 0) {
      c.delete(transaction);
    }
  };
  var typeMapSet = (transaction, parent, key, value) => {
    const left = parent._map.get(key) || null;
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    let content;
    if (value == null) {
      content = new ContentAny([value]);
    } else {
      switch (value.constructor) {
        case Number:
        case Object:
        case Boolean:
        case Array:
        case String:
          content = new ContentAny([value]);
          break;
        case Uint8Array:
          content = new ContentBinary(
            /** @type {Uint8Array} */
            value
          );
          break;
        case Doc:
          content = new ContentDoc(
            /** @type {Doc} */
            value
          );
          break;
        default:
          if (value instanceof AbstractType) {
            content = new ContentType(value);
          } else {
            throw new Error("Unexpected content type");
          }
      }
    }
    new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);
  };
  var typeMapGet = (parent, key) => {
    const val = parent._map.get(key);
    return val !== void 0 && !val.deleted ? val.content.getContent()[val.length - 1] : void 0;
  };
  var typeMapGetAll = (parent) => {
    const res = {};
    parent._map.forEach((value, key) => {
      if (!value.deleted) {
        res[key] = value.content.getContent()[value.length - 1];
      }
    });
    return res;
  };
  var typeMapHas = (parent, key) => {
    const val = parent._map.get(key);
    return val !== void 0 && !val.deleted;
  };
  var typeMapGetSnapshot = (parent, key, snapshot2) => {
    let v = parent._map.get(key) || null;
    while (v !== null && (!snapshot2.sv.has(v.id.client) || v.id.clock >= (snapshot2.sv.get(v.id.client) || 0))) {
      v = v.left;
    }
    return v !== null && isVisible(v, snapshot2) ? v.content.getContent()[v.length - 1] : void 0;
  };
  var typeMapGetAllSnapshot = (parent, snapshot2) => {
    const res = {};
    parent._map.forEach((value, key) => {
      let v = value;
      while (v !== null && (!snapshot2.sv.has(v.id.client) || v.id.clock >= (snapshot2.sv.get(v.id.client) || 0))) {
        v = v.left;
      }
      if (v !== null && isVisible(v, snapshot2)) {
        res[key] = v.content.getContent()[v.length - 1];
      }
    });
    return res;
  };
  var createMapIterator = (map2) => iteratorFilter(
    map2.entries(),
    /** @param {any} entry */
    (entry) => !entry[1].deleted
  );
  var YArrayEvent = class extends YEvent {
    /**
     * @param {YArray<T>} yarray The changed type
     * @param {Transaction} transaction The transaction object
     */
    constructor(yarray, transaction) {
      super(yarray, transaction);
      this._transaction = transaction;
    }
  };
  var YArray = class extends AbstractType {
    constructor() {
      super();
      this._prelimContent = [];
      this._searchMarker = [];
    }
    /**
     * Construct a new YArray containing the specified items.
     * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T
     * @param {Array<T>} items
     * @return {YArray<T>}
     */
    static from(items) {
      const a = new YArray();
      a.push(items);
      return a;
    }
    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Doc} y The Yjs instance
     * @param {Item} item
     */
    _integrate(y, item) {
      super._integrate(y, item);
      this.insert(
        0,
        /** @type {Array<any>} */
        this._prelimContent
      );
      this._prelimContent = null;
    }
    /**
     * @return {YArray<T>}
     */
    _copy() {
      return new YArray();
    }
    /**
     * @return {YArray<T>}
     */
    clone() {
      const arr = new YArray();
      arr.insert(0, this.toArray().map(
        (el) => el instanceof AbstractType ? (
          /** @type {typeof el} */
          el.clone()
        ) : el
      ));
      return arr;
    }
    get length() {
      return this._prelimContent === null ? this._length : this._prelimContent.length;
    }
    /**
     * Creates YArrayEvent and calls observers.
     *
     * @param {Transaction} transaction
     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
     */
    _callObserver(transaction, parentSubs) {
      super._callObserver(transaction, parentSubs);
      callTypeObservers(this, transaction, new YArrayEvent(this, transaction));
    }
    /**
     * Inserts new content at an index.
     *
     * Important: This function expects an array of content. Not just a content
     * object. The reason for this "weirdness" is that inserting several elements
     * is very efficient when it is done as a single operation.
     *
     * @example
     *  // Insert character 'a' at position 0
     *  yarray.insert(0, ['a'])
     *  // Insert numbers 1, 2 at position 1
     *  yarray.insert(1, [1, 2])
     *
     * @param {number} index The index to insert content at.
     * @param {Array<T>} content The array of content
     */
    insert(index, content) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeListInsertGenerics(
            transaction,
            this,
            index,
            /** @type {any} */
            content
          );
        });
      } else {
        this._prelimContent.splice(index, 0, ...content);
      }
    }
    /**
     * Appends content to this YArray.
     *
     * @param {Array<T>} content Array of content to append.
     *
     * @todo Use the following implementation in all types.
     */
    push(content) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeListPushGenerics(
            transaction,
            this,
            /** @type {any} */
            content
          );
        });
      } else {
        this._prelimContent.push(...content);
      }
    }
    /**
     * Preppends content to this YArray.
     *
     * @param {Array<T>} content Array of content to preppend.
     */
    unshift(content) {
      this.insert(0, content);
    }
    /**
     * Deletes elements starting from an index.
     *
     * @param {number} index Index at which to start deleting elements
     * @param {number} length The number of elements to remove. Defaults to 1.
     */
    delete(index, length3 = 1) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeListDelete(transaction, this, index, length3);
        });
      } else {
        this._prelimContent.splice(index, length3);
      }
    }
    /**
     * Returns the i-th element from a YArray.
     *
     * @param {number} index The index of the element to return from the YArray
     * @return {T}
     */
    get(index) {
      return typeListGet(this, index);
    }
    /**
     * Transforms this YArray to a JavaScript Array.
     *
     * @return {Array<T>}
     */
    toArray() {
      return typeListToArray(this);
    }
    /**
     * Transforms this YArray to a JavaScript Array.
     *
     * @param {number} [start]
     * @param {number} [end]
     * @return {Array<T>}
     */
    slice(start = 0, end = this.length) {
      return typeListSlice(this, start, end);
    }
    /**
     * Transforms this Shared Type to a JSON object.
     *
     * @return {Array<any>}
     */
    toJSON() {
      return this.map((c) => c instanceof AbstractType ? c.toJSON() : c);
    }
    /**
     * Returns an Array with the result of calling a provided function on every
     * element of this YArray.
     *
     * @template M
     * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array
     * @return {Array<M>} A new array with each element being the result of the
     *                 callback function
     */
    map(f) {
      return typeListMap(
        this,
        /** @type {any} */
        f
      );
    }
    /**
     * Executes a provided function once on overy element of this YArray.
     *
     * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.
     */
    forEach(f) {
      typeListForEach(this, f);
    }
    /**
     * @return {IterableIterator<T>}
     */
    [Symbol.iterator]() {
      return typeListCreateIterator(this);
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     */
    _write(encoder) {
      encoder.writeTypeRef(YArrayRefID);
    }
  };
  var readYArray = (_decoder) => new YArray();
  var YMapEvent = class extends YEvent {
    /**
     * @param {YMap<T>} ymap The YArray that changed.
     * @param {Transaction} transaction
     * @param {Set<any>} subs The keys that changed.
     */
    constructor(ymap, transaction, subs) {
      super(ymap, transaction);
      this.keysChanged = subs;
    }
  };
  var YMap = class extends AbstractType {
    /**
     *
     * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap
     */
    constructor(entries) {
      super();
      this._prelimContent = null;
      if (entries === void 0) {
        this._prelimContent = /* @__PURE__ */ new Map();
      } else {
        this._prelimContent = new Map(entries);
      }
    }
    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Doc} y The Yjs instance
     * @param {Item} item
     */
    _integrate(y, item) {
      super._integrate(y, item);
      this._prelimContent.forEach((value, key) => {
        this.set(key, value);
      });
      this._prelimContent = null;
    }
    /**
     * @return {YMap<MapType>}
     */
    _copy() {
      return new YMap();
    }
    /**
     * @return {YMap<MapType>}
     */
    clone() {
      const map2 = new YMap();
      this.forEach((value, key) => {
        map2.set(key, value instanceof AbstractType ? (
          /** @type {typeof value} */
          value.clone()
        ) : value);
      });
      return map2;
    }
    /**
     * Creates YMapEvent and calls observers.
     *
     * @param {Transaction} transaction
     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
     */
    _callObserver(transaction, parentSubs) {
      callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));
    }
    /**
     * Transforms this Shared Type to a JSON object.
     *
     * @return {Object<string,any>}
     */
    toJSON() {
      const map2 = {};
      this._map.forEach((item, key) => {
        if (!item.deleted) {
          const v = item.content.getContent()[item.length - 1];
          map2[key] = v instanceof AbstractType ? v.toJSON() : v;
        }
      });
      return map2;
    }
    /**
     * Returns the size of the YMap (count of key/value pairs)
     *
     * @return {number}
     */
    get size() {
      return [...createMapIterator(this._map)].length;
    }
    /**
     * Returns the keys for each element in the YMap Type.
     *
     * @return {IterableIterator<string>}
     */
    keys() {
      return iteratorMap(
        createMapIterator(this._map),
        /** @param {any} v */
        (v) => v[0]
      );
    }
    /**
     * Returns the values for each element in the YMap Type.
     *
     * @return {IterableIterator<MapType>}
     */
    values() {
      return iteratorMap(
        createMapIterator(this._map),
        /** @param {any} v */
        (v) => v[1].content.getContent()[v[1].length - 1]
      );
    }
    /**
     * Returns an Iterator of [key, value] pairs
     *
     * @return {IterableIterator<[string, MapType]>}
     */
    entries() {
      return iteratorMap(
        createMapIterator(this._map),
        /** @param {any} v */
        (v) => (
          /** @type {any} */
          [v[0], v[1].content.getContent()[v[1].length - 1]]
        )
      );
    }
    /**
     * Executes a provided function on once on every key-value pair.
     *
     * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.
     */
    forEach(f) {
      this._map.forEach((item, key) => {
        if (!item.deleted) {
          f(item.content.getContent()[item.length - 1], key, this);
        }
      });
    }
    /**
     * Returns an Iterator of [key, value] pairs
     *
     * @return {IterableIterator<[string, MapType]>}
     */
    [Symbol.iterator]() {
      return this.entries();
    }
    /**
     * Remove a specified element from this YMap.
     *
     * @param {string} key The key of the element to remove.
     */
    delete(key) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, key);
        });
      } else {
        this._prelimContent.delete(key);
      }
    }
    /**
     * Adds or updates an element with a specified key and value.
     * @template {MapType} VAL
     *
     * @param {string} key The key of the element to add to this YMap
     * @param {VAL} value The value of the element to add
     * @return {VAL}
     */
    set(key, value) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(
            transaction,
            this,
            key,
            /** @type {any} */
            value
          );
        });
      } else {
        this._prelimContent.set(key, value);
      }
      return value;
    }
    /**
     * Returns a specified element from this YMap.
     *
     * @param {string} key
     * @return {MapType|undefined}
     */
    get(key) {
      return (
        /** @type {any} */
        typeMapGet(this, key)
      );
    }
    /**
     * Returns a boolean indicating whether the specified key exists or not.
     *
     * @param {string} key The key to test.
     * @return {boolean}
     */
    has(key) {
      return typeMapHas(this, key);
    }
    /**
     * Removes all elements from this YMap.
     */
    clear() {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          this.forEach(function(_value, key, map2) {
            typeMapDelete(transaction, map2, key);
          });
        });
      } else {
        this._prelimContent.clear();
      }
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     */
    _write(encoder) {
      encoder.writeTypeRef(YMapRefID);
    }
  };
  var readYMap = (_decoder) => new YMap();
  var equalAttrs = (a, b) => a === b || typeof a === "object" && typeof b === "object" && a && b && equalFlat(a, b);
  var ItemTextListPosition = class {
    /**
     * @param {Item|null} left
     * @param {Item|null} right
     * @param {number} index
     * @param {Map<string,any>} currentAttributes
     */
    constructor(left, right, index, currentAttributes) {
      this.left = left;
      this.right = right;
      this.index = index;
      this.currentAttributes = currentAttributes;
    }
    /**
     * Only call this if you know that this.right is defined
     */
    forward() {
      if (this.right === null) {
        unexpectedCase();
      }
      switch (this.right.content.constructor) {
        case ContentFormat:
          if (!this.right.deleted) {
            updateCurrentAttributes(
              this.currentAttributes,
              /** @type {ContentFormat} */
              this.right.content
            );
          }
          break;
        default:
          if (!this.right.deleted) {
            this.index += this.right.length;
          }
          break;
      }
      this.left = this.right;
      this.right = this.right.right;
    }
  };
  var findNextPosition = (transaction, pos, count2) => {
    while (pos.right !== null && count2 > 0) {
      switch (pos.right.content.constructor) {
        case ContentFormat:
          if (!pos.right.deleted) {
            updateCurrentAttributes(
              pos.currentAttributes,
              /** @type {ContentFormat} */
              pos.right.content
            );
          }
          break;
        default:
          if (!pos.right.deleted) {
            if (count2 < pos.right.length) {
              getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count2));
            }
            pos.index += pos.right.length;
            count2 -= pos.right.length;
          }
          break;
      }
      pos.left = pos.right;
      pos.right = pos.right.right;
    }
    return pos;
  };
  var findPosition = (transaction, parent, index, useSearchMarker) => {
    const currentAttributes = /* @__PURE__ */ new Map();
    const marker = useSearchMarker ? findMarker(parent, index) : null;
    if (marker) {
      const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);
      return findNextPosition(transaction, pos, index - marker.index);
    } else {
      const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);
      return findNextPosition(transaction, pos, index);
    }
  };
  var insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {
    while (currPos.right !== null && (currPos.right.deleted === true || currPos.right.content.constructor === ContentFormat && equalAttrs(
      negatedAttributes.get(
        /** @type {ContentFormat} */
        currPos.right.content.key
      ),
      /** @type {ContentFormat} */
      currPos.right.content.value
    ))) {
      if (!currPos.right.deleted) {
        negatedAttributes.delete(
          /** @type {ContentFormat} */
          currPos.right.content.key
        );
      }
      currPos.forward();
    }
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    negatedAttributes.forEach((val, key) => {
      const left = currPos.left;
      const right = currPos.right;
      const nextFormat = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));
      nextFormat.integrate(transaction, 0);
      currPos.right = nextFormat;
      currPos.forward();
    });
  };
  var updateCurrentAttributes = (currentAttributes, format) => {
    const { key, value } = format;
    if (value === null) {
      currentAttributes.delete(key);
    } else {
      currentAttributes.set(key, value);
    }
  };
  var minimizeAttributeChanges = (currPos, attributes) => {
    while (true) {
      if (currPos.right === null) {
        break;
      } else if (currPos.right.deleted || currPos.right.content.constructor === ContentFormat && equalAttrs(
        attributes[
          /** @type {ContentFormat} */
          currPos.right.content.key
        ] || null,
        /** @type {ContentFormat} */
        currPos.right.content.value
      ))
        ;
      else {
        break;
      }
      currPos.forward();
    }
  };
  var insertAttributes = (transaction, parent, currPos, attributes) => {
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    const negatedAttributes = /* @__PURE__ */ new Map();
    for (const key in attributes) {
      const val = attributes[key];
      const currentVal = currPos.currentAttributes.get(key) || null;
      if (!equalAttrs(currentVal, val)) {
        negatedAttributes.set(key, currentVal);
        const { left, right } = currPos;
        currPos.right = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));
        currPos.right.integrate(transaction, 0);
        currPos.forward();
      }
    }
    return negatedAttributes;
  };
  var insertText = (transaction, parent, currPos, text3, attributes) => {
    currPos.currentAttributes.forEach((_val, key) => {
      if (attributes[key] === void 0) {
        attributes[key] = null;
      }
    });
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    minimizeAttributeChanges(currPos, attributes);
    const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
    const content = text3.constructor === String ? new ContentString(
      /** @type {string} */
      text3
    ) : text3 instanceof AbstractType ? new ContentType(text3) : new ContentEmbed(text3);
    let { left, right, index } = currPos;
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, currPos.index, content.getLength());
    }
    right = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);
    right.integrate(transaction, 0);
    currPos.right = right;
    currPos.index = index;
    currPos.forward();
    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
  };
  var formatText = (transaction, parent, currPos, length3, attributes) => {
    const doc4 = transaction.doc;
    const ownClientId = doc4.clientID;
    minimizeAttributeChanges(currPos, attributes);
    const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
    iterationLoop:
      while (currPos.right !== null && (length3 > 0 || negatedAttributes.size > 0 && (currPos.right.deleted || currPos.right.content.constructor === ContentFormat))) {
        if (!currPos.right.deleted) {
          switch (currPos.right.content.constructor) {
            case ContentFormat: {
              const { key, value } = (
                /** @type {ContentFormat} */
                currPos.right.content
              );
              const attr2 = attributes[key];
              if (attr2 !== void 0) {
                if (equalAttrs(attr2, value)) {
                  negatedAttributes.delete(key);
                } else {
                  if (length3 === 0) {
                    break iterationLoop;
                  }
                  negatedAttributes.set(key, value);
                }
                currPos.right.delete(transaction);
              } else {
                currPos.currentAttributes.set(key, value);
              }
              break;
            }
            default:
              if (length3 < currPos.right.length) {
                getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length3));
              }
              length3 -= currPos.right.length;
              break;
          }
        }
        currPos.forward();
      }
    if (length3 > 0) {
      let newlines = "";
      for (; length3 > 0; length3--) {
        newlines += "\n";
      }
      currPos.right = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));
      currPos.right.integrate(transaction, 0);
      currPos.forward();
    }
    insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
  };
  var cleanupFormattingGap = (transaction, start, curr, startAttributes, currAttributes) => {
    let end = start;
    const endFormats = create();
    while (end && (!end.countable || end.deleted)) {
      if (!end.deleted && end.content.constructor === ContentFormat) {
        const cf = (
          /** @type {ContentFormat} */
          end.content
        );
        endFormats.set(cf.key, cf);
      }
      end = end.right;
    }
    let cleanups = 0;
    let reachedCurr = false;
    while (start !== end) {
      if (curr === start) {
        reachedCurr = true;
      }
      if (!start.deleted) {
        const content = start.content;
        switch (content.constructor) {
          case ContentFormat: {
            const { key, value } = (
              /** @type {ContentFormat} */
              content
            );
            const startAttrValue = startAttributes.get(key) || null;
            if (endFormats.get(key) !== content || startAttrValue === value) {
              start.delete(transaction);
              cleanups++;
              if (!reachedCurr && (currAttributes.get(key) || null) === value && startAttrValue !== value) {
                if (startAttrValue === null) {
                  currAttributes.delete(key);
                } else {
                  currAttributes.set(key, startAttrValue);
                }
              }
            }
            if (!reachedCurr && !start.deleted) {
              updateCurrentAttributes(
                currAttributes,
                /** @type {ContentFormat} */
                content
              );
            }
            break;
          }
        }
      }
      start = /** @type {Item} */
      start.right;
    }
    return cleanups;
  };
  var cleanupContextlessFormattingGap = (transaction, item) => {
    while (item && item.right && (item.right.deleted || !item.right.countable)) {
      item = item.right;
    }
    const attrs = /* @__PURE__ */ new Set();
    while (item && (item.deleted || !item.countable)) {
      if (!item.deleted && item.content.constructor === ContentFormat) {
        const key = (
          /** @type {ContentFormat} */
          item.content.key
        );
        if (attrs.has(key)) {
          item.delete(transaction);
        } else {
          attrs.add(key);
        }
      }
      item = item.left;
    }
  };
  var cleanupYTextFormatting = (type) => {
    let res = 0;
    transact(
      /** @type {Doc} */
      type.doc,
      (transaction) => {
        let start = (
          /** @type {Item} */
          type._start
        );
        let end = type._start;
        let startAttributes = create();
        const currentAttributes = copy(startAttributes);
        while (end) {
          if (end.deleted === false) {
            switch (end.content.constructor) {
              case ContentFormat:
                updateCurrentAttributes(
                  currentAttributes,
                  /** @type {ContentFormat} */
                  end.content
                );
                break;
              default:
                res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);
                startAttributes = copy(currentAttributes);
                start = end;
                break;
            }
          }
          end = end.right;
        }
      }
    );
    return res;
  };
  var cleanupYTextAfterTransaction = (transaction) => {
    const needFullCleanup = /* @__PURE__ */ new Set();
    const doc4 = transaction.doc;
    for (const [client, afterClock] of transaction.afterState.entries()) {
      const clock = transaction.beforeState.get(client) || 0;
      if (afterClock === clock) {
        continue;
      }
      iterateStructs(
        transaction,
        /** @type {Array<Item|GC>} */
        doc4.store.clients.get(client),
        clock,
        afterClock,
        (item) => {
          if (!item.deleted && /** @type {Item} */
          item.content.constructor === ContentFormat && item.constructor !== GC) {
            needFullCleanup.add(
              /** @type {any} */
              item.parent
            );
          }
        }
      );
    }
    transact(doc4, (t) => {
      iterateDeletedStructs(transaction, transaction.deleteSet, (item) => {
        if (item instanceof GC || !/** @type {YText} */
        item.parent._hasFormatting || needFullCleanup.has(
          /** @type {YText} */
          item.parent
        )) {
          return;
        }
        const parent = (
          /** @type {YText} */
          item.parent
        );
        if (item.content.constructor === ContentFormat) {
          needFullCleanup.add(parent);
        } else {
          cleanupContextlessFormattingGap(t, item);
        }
      });
      for (const yText of needFullCleanup) {
        cleanupYTextFormatting(yText);
      }
    });
  };
  var deleteText = (transaction, currPos, length3) => {
    const startLength = length3;
    const startAttrs = copy(currPos.currentAttributes);
    const start = currPos.right;
    while (length3 > 0 && currPos.right !== null) {
      if (currPos.right.deleted === false) {
        switch (currPos.right.content.constructor) {
          case ContentType:
          case ContentEmbed:
          case ContentString:
            if (length3 < currPos.right.length) {
              getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length3));
            }
            length3 -= currPos.right.length;
            currPos.right.delete(transaction);
            break;
        }
      }
      currPos.forward();
    }
    if (start) {
      cleanupFormattingGap(transaction, start, currPos.right, startAttrs, currPos.currentAttributes);
    }
    const parent = (
      /** @type {AbstractType<any>} */
      /** @type {Item} */
      (currPos.left || currPos.right).parent
    );
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length3);
    }
    return currPos;
  };
  var YTextEvent = class extends YEvent {
    /**
     * @param {YText} ytext
     * @param {Transaction} transaction
     * @param {Set<any>} subs The keys that changed
     */
    constructor(ytext, transaction, subs) {
      super(ytext, transaction);
      this.childListChanged = false;
      this.keysChanged = /* @__PURE__ */ new Set();
      subs.forEach((sub) => {
        if (sub === null) {
          this.childListChanged = true;
        } else {
          this.keysChanged.add(sub);
        }
      });
    }
    /**
     * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}
     */
    get changes() {
      if (this._changes === null) {
        const changes = {
          keys: this.keys,
          delta: this.delta,
          added: /* @__PURE__ */ new Set(),
          deleted: /* @__PURE__ */ new Set()
        };
        this._changes = changes;
      }
      return (
        /** @type {any} */
        this._changes
      );
    }
    /**
     * Compute the changes in the delta format.
     * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.
     *
     * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}
     *
     * @public
     */
    get delta() {
      if (this._delta === null) {
        const y = (
          /** @type {Doc} */
          this.target.doc
        );
        const delta = [];
        transact(y, (transaction) => {
          const currentAttributes = /* @__PURE__ */ new Map();
          const oldAttributes = /* @__PURE__ */ new Map();
          let item = this.target._start;
          let action = null;
          const attributes = {};
          let insert3 = "";
          let retain = 0;
          let deleteLen = 0;
          const addOp = () => {
            if (action !== null) {
              let op = null;
              switch (action) {
                case "delete":
                  if (deleteLen > 0) {
                    op = { delete: deleteLen };
                  }
                  deleteLen = 0;
                  break;
                case "insert":
                  if (typeof insert3 === "object" || insert3.length > 0) {
                    op = { insert: insert3 };
                    if (currentAttributes.size > 0) {
                      op.attributes = {};
                      currentAttributes.forEach((value, key) => {
                        if (value !== null) {
                          op.attributes[key] = value;
                        }
                      });
                    }
                  }
                  insert3 = "";
                  break;
                case "retain":
                  if (retain > 0) {
                    op = { retain };
                    if (!isEmpty2(attributes)) {
                      op.attributes = assign2({}, attributes);
                    }
                  }
                  retain = 0;
                  break;
              }
              if (op)
                delta.push(op);
              action = null;
            }
          };
          while (item !== null) {
            switch (item.content.constructor) {
              case ContentType:
              case ContentEmbed:
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    addOp();
                    action = "insert";
                    insert3 = item.content.getContent()[0];
                    addOp();
                  }
                } else if (this.deletes(item)) {
                  if (action !== "delete") {
                    addOp();
                    action = "delete";
                  }
                  deleteLen += 1;
                } else if (!item.deleted) {
                  if (action !== "retain") {
                    addOp();
                    action = "retain";
                  }
                  retain += 1;
                }
                break;
              case ContentString:
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    if (action !== "insert") {
                      addOp();
                      action = "insert";
                    }
                    insert3 += /** @type {ContentString} */
                    item.content.str;
                  }
                } else if (this.deletes(item)) {
                  if (action !== "delete") {
                    addOp();
                    action = "delete";
                  }
                  deleteLen += item.length;
                } else if (!item.deleted) {
                  if (action !== "retain") {
                    addOp();
                    action = "retain";
                  }
                  retain += item.length;
                }
                break;
              case ContentFormat: {
                const { key, value } = (
                  /** @type {ContentFormat} */
                  item.content
                );
                if (this.adds(item)) {
                  if (!this.deletes(item)) {
                    const curVal = currentAttributes.get(key) || null;
                    if (!equalAttrs(curVal, value)) {
                      if (action === "retain") {
                        addOp();
                      }
                      if (equalAttrs(value, oldAttributes.get(key) || null)) {
                        delete attributes[key];
                      } else {
                        attributes[key] = value;
                      }
                    } else if (value !== null) {
                      item.delete(transaction);
                    }
                  }
                } else if (this.deletes(item)) {
                  oldAttributes.set(key, value);
                  const curVal = currentAttributes.get(key) || null;
                  if (!equalAttrs(curVal, value)) {
                    if (action === "retain") {
                      addOp();
                    }
                    attributes[key] = curVal;
                  }
                } else if (!item.deleted) {
                  oldAttributes.set(key, value);
                  const attr2 = attributes[key];
                  if (attr2 !== void 0) {
                    if (!equalAttrs(attr2, value)) {
                      if (action === "retain") {
                        addOp();
                      }
                      if (value === null) {
                        delete attributes[key];
                      } else {
                        attributes[key] = value;
                      }
                    } else if (attr2 !== null) {
                      item.delete(transaction);
                    }
                  }
                }
                if (!item.deleted) {
                  if (action === "insert") {
                    addOp();
                  }
                  updateCurrentAttributes(
                    currentAttributes,
                    /** @type {ContentFormat} */
                    item.content
                  );
                }
                break;
              }
            }
            item = item.right;
          }
          addOp();
          while (delta.length > 0) {
            const lastOp = delta[delta.length - 1];
            if (lastOp.retain !== void 0 && lastOp.attributes === void 0) {
              delta.pop();
            } else {
              break;
            }
          }
        });
        this._delta = delta;
      }
      return (
        /** @type {any} */
        this._delta
      );
    }
  };
  var YText = class extends AbstractType {
    /**
     * @param {String} [string] The initial value of the YText.
     */
    constructor(string) {
      super();
      this._pending = string !== void 0 ? [() => this.insert(0, string)] : [];
      this._searchMarker = [];
      this._hasFormatting = false;
    }
    /**
     * Number of characters of this text type.
     *
     * @type {number}
     */
    get length() {
      return this._length;
    }
    /**
     * @param {Doc} y
     * @param {Item} item
     */
    _integrate(y, item) {
      super._integrate(y, item);
      try {
        this._pending.forEach((f) => f());
      } catch (e) {
        console.error(e);
      }
      this._pending = null;
    }
    _copy() {
      return new YText();
    }
    /**
     * @return {YText}
     */
    clone() {
      const text3 = new YText();
      text3.applyDelta(this.toDelta());
      return text3;
    }
    /**
     * Creates YTextEvent and calls observers.
     *
     * @param {Transaction} transaction
     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
     */
    _callObserver(transaction, parentSubs) {
      super._callObserver(transaction, parentSubs);
      const event = new YTextEvent(this, transaction, parentSubs);
      callTypeObservers(this, transaction, event);
      if (!transaction.local && this._hasFormatting) {
        transaction._needFormattingCleanup = true;
      }
    }
    /**
     * Returns the unformatted string representation of this YText type.
     *
     * @public
     */
    toString() {
      let str = "";
      let n = this._start;
      while (n !== null) {
        if (!n.deleted && n.countable && n.content.constructor === ContentString) {
          str += /** @type {ContentString} */
          n.content.str;
        }
        n = n.right;
      }
      return str;
    }
    /**
     * Returns the unformatted string representation of this YText type.
     *
     * @return {string}
     * @public
     */
    toJSON() {
      return this.toString();
    }
    /**
     * Apply a {@link Delta} on this shared YText type.
     *
     * @param {any} delta The changes to apply on this element.
     * @param {object}  opts
     * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.
     *
     *
     * @public
     */
    applyDelta(delta, { sanitize = true } = {}) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const currPos = new ItemTextListPosition(null, this._start, 0, /* @__PURE__ */ new Map());
          for (let i = 0; i < delta.length; i++) {
            const op = delta[i];
            if (op.insert !== void 0) {
              const ins = !sanitize && typeof op.insert === "string" && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === "\n" ? op.insert.slice(0, -1) : op.insert;
              if (typeof ins !== "string" || ins.length > 0) {
                insertText(transaction, this, currPos, ins, op.attributes || {});
              }
            } else if (op.retain !== void 0) {
              formatText(transaction, this, currPos, op.retain, op.attributes || {});
            } else if (op.delete !== void 0) {
              deleteText(transaction, currPos, op.delete);
            }
          }
        });
      } else {
        this._pending.push(() => this.applyDelta(delta));
      }
    }
    /**
     * Returns the Delta representation of this YText type.
     *
     * @param {Snapshot} [snapshot]
     * @param {Snapshot} [prevSnapshot]
     * @param {function('removed' | 'added', ID):any} [computeYChange]
     * @return {any} The Delta representation of this type.
     *
     * @public
     */
    toDelta(snapshot2, prevSnapshot, computeYChange) {
      const ops = [];
      const currentAttributes = /* @__PURE__ */ new Map();
      const doc4 = (
        /** @type {Doc} */
        this.doc
      );
      let str = "";
      let n = this._start;
      function packStr() {
        if (str.length > 0) {
          const attributes = {};
          let addAttributes = false;
          currentAttributes.forEach((value, key) => {
            addAttributes = true;
            attributes[key] = value;
          });
          const op = { insert: str };
          if (addAttributes) {
            op.attributes = attributes;
          }
          ops.push(op);
          str = "";
        }
      }
      const computeDelta = () => {
        while (n !== null) {
          if (isVisible(n, snapshot2) || prevSnapshot !== void 0 && isVisible(n, prevSnapshot)) {
            switch (n.content.constructor) {
              case ContentString: {
                const cur = currentAttributes.get("ychange");
                if (snapshot2 !== void 0 && !isVisible(n, snapshot2)) {
                  if (cur === void 0 || cur.user !== n.id.client || cur.type !== "removed") {
                    packStr();
                    currentAttributes.set("ychange", computeYChange ? computeYChange("removed", n.id) : { type: "removed" });
                  }
                } else if (prevSnapshot !== void 0 && !isVisible(n, prevSnapshot)) {
                  if (cur === void 0 || cur.user !== n.id.client || cur.type !== "added") {
                    packStr();
                    currentAttributes.set("ychange", computeYChange ? computeYChange("added", n.id) : { type: "added" });
                  }
                } else if (cur !== void 0) {
                  packStr();
                  currentAttributes.delete("ychange");
                }
                str += /** @type {ContentString} */
                n.content.str;
                break;
              }
              case ContentType:
              case ContentEmbed: {
                packStr();
                const op = {
                  insert: n.content.getContent()[0]
                };
                if (currentAttributes.size > 0) {
                  const attrs = (
                    /** @type {Object<string,any>} */
                    {}
                  );
                  op.attributes = attrs;
                  currentAttributes.forEach((value, key) => {
                    attrs[key] = value;
                  });
                }
                ops.push(op);
                break;
              }
              case ContentFormat:
                if (isVisible(n, snapshot2)) {
                  packStr();
                  updateCurrentAttributes(
                    currentAttributes,
                    /** @type {ContentFormat} */
                    n.content
                  );
                }
                break;
            }
          }
          n = n.right;
        }
        packStr();
      };
      if (snapshot2 || prevSnapshot) {
        transact(doc4, (transaction) => {
          if (snapshot2) {
            splitSnapshotAffectedStructs(transaction, snapshot2);
          }
          if (prevSnapshot) {
            splitSnapshotAffectedStructs(transaction, prevSnapshot);
          }
          computeDelta();
        }, "cleanup");
      } else {
        computeDelta();
      }
      return ops;
    }
    /**
     * Insert text at a given index.
     *
     * @param {number} index The index at which to start inserting.
     * @param {String} text The text to insert at the specified position.
     * @param {TextAttributes} [attributes] Optionally define some formatting
     *                                    information to apply on the inserted
     *                                    Text.
     * @public
     */
    insert(index, text3, attributes) {
      if (text3.length <= 0) {
        return;
      }
      const y = this.doc;
      if (y !== null) {
        transact(y, (transaction) => {
          const pos = findPosition(transaction, this, index, !attributes);
          if (!attributes) {
            attributes = {};
            pos.currentAttributes.forEach((v, k) => {
              attributes[k] = v;
            });
          }
          insertText(transaction, this, pos, text3, attributes);
        });
      } else {
        this._pending.push(() => this.insert(index, text3, attributes));
      }
    }
    /**
     * Inserts an embed at a index.
     *
     * @param {number} index The index to insert the embed at.
     * @param {Object | AbstractType<any>} embed The Object that represents the embed.
     * @param {TextAttributes} [attributes] Attribute information to apply on the
     *                                    embed
     *
     * @public
     */
    insertEmbed(index, embed, attributes) {
      const y = this.doc;
      if (y !== null) {
        transact(y, (transaction) => {
          const pos = findPosition(transaction, this, index, !attributes);
          insertText(transaction, this, pos, embed, attributes || {});
        });
      } else {
        this._pending.push(() => this.insertEmbed(index, embed, attributes || {}));
      }
    }
    /**
     * Deletes text starting from an index.
     *
     * @param {number} index Index at which to start deleting.
     * @param {number} length The number of characters to remove. Defaults to 1.
     *
     * @public
     */
    delete(index, length3) {
      if (length3 === 0) {
        return;
      }
      const y = this.doc;
      if (y !== null) {
        transact(y, (transaction) => {
          deleteText(transaction, findPosition(transaction, this, index, true), length3);
        });
      } else {
        this._pending.push(() => this.delete(index, length3));
      }
    }
    /**
     * Assigns properties to a range of text.
     *
     * @param {number} index The position where to start formatting.
     * @param {number} length The amount of characters to assign properties to.
     * @param {TextAttributes} attributes Attribute information to apply on the
     *                                    text.
     *
     * @public
     */
    format(index, length3, attributes) {
      if (length3 === 0) {
        return;
      }
      const y = this.doc;
      if (y !== null) {
        transact(y, (transaction) => {
          const pos = findPosition(transaction, this, index, false);
          if (pos.right === null) {
            return;
          }
          formatText(transaction, this, pos, length3, attributes);
        });
      } else {
        this._pending.push(() => this.format(index, length3, attributes));
      }
    }
    /**
     * Removes an attribute.
     *
     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
     *
     * @param {String} attributeName The attribute name that is to be removed.
     *
     * @public
     */
    removeAttribute(attributeName) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, attributeName);
        });
      } else {
        this._pending.push(() => this.removeAttribute(attributeName));
      }
    }
    /**
     * Sets or updates an attribute.
     *
     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
     *
     * @param {String} attributeName The attribute name that is to be set.
     * @param {any} attributeValue The attribute value that is to be set.
     *
     * @public
     */
    setAttribute(attributeName, attributeValue) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(transaction, this, attributeName, attributeValue);
        });
      } else {
        this._pending.push(() => this.setAttribute(attributeName, attributeValue));
      }
    }
    /**
     * Returns an attribute value that belongs to the attribute name.
     *
     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
     *
     * @param {String} attributeName The attribute name that identifies the
     *                               queried value.
     * @return {any} The queried attribute value.
     *
     * @public
     */
    getAttribute(attributeName) {
      return (
        /** @type {any} */
        typeMapGet(this, attributeName)
      );
    }
    /**
     * Returns all attribute name/value pairs in a JSON Object.
     *
     * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
     *
     * @return {Object<string, any>} A JSON Object that describes the attributes.
     *
     * @public
     */
    getAttributes() {
      return typeMapGetAll(this);
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     */
    _write(encoder) {
      encoder.writeTypeRef(YTextRefID);
    }
  };
  var readYText = (_decoder) => new YText();
  var YXmlTreeWalker = class {
    /**
     * @param {YXmlFragment | YXmlElement} root
     * @param {function(AbstractType<any>):boolean} [f]
     */
    constructor(root, f = () => true) {
      this._filter = f;
      this._root = root;
      this._currentNode = /** @type {Item} */
      root._start;
      this._firstCall = true;
    }
    [Symbol.iterator]() {
      return this;
    }
    /**
     * Get the next node.
     *
     * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.
     *
     * @public
     */
    next() {
      let n = this._currentNode;
      let type = n && n.content && /** @type {any} */
      n.content.type;
      if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) {
        do {
          type = /** @type {any} */
          n.content.type;
          if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {
            n = type._start;
          } else {
            while (n !== null) {
              if (n.right !== null) {
                n = n.right;
                break;
              } else if (n.parent === this._root) {
                n = null;
              } else {
                n = /** @type {AbstractType<any>} */
                n.parent._item;
              }
            }
          }
        } while (n !== null && (n.deleted || !this._filter(
          /** @type {ContentType} */
          n.content.type
        )));
      }
      this._firstCall = false;
      if (n === null) {
        return { value: void 0, done: true };
      }
      this._currentNode = n;
      return { value: (
        /** @type {any} */
        n.content.type
      ), done: false };
    }
  };
  var YXmlFragment = class extends AbstractType {
    constructor() {
      super();
      this._prelimContent = [];
    }
    /**
     * @type {YXmlElement|YXmlText|null}
     */
    get firstChild() {
      const first = this._first;
      return first ? first.content.getContent()[0] : null;
    }
    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Doc} y The Yjs instance
     * @param {Item} item
     */
    _integrate(y, item) {
      super._integrate(y, item);
      this.insert(
        0,
        /** @type {Array<any>} */
        this._prelimContent
      );
      this._prelimContent = null;
    }
    _copy() {
      return new YXmlFragment();
    }
    /**
     * @return {YXmlFragment}
     */
    clone() {
      const el = new YXmlFragment();
      el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
      return el;
    }
    get length() {
      return this._prelimContent === null ? this._length : this._prelimContent.length;
    }
    /**
     * Create a subtree of childNodes.
     *
     * @example
     * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')
     * for (let node in walker) {
     *   // `node` is a div node
     *   nop(node)
     * }
     *
     * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and
     *                          returns a Boolean indicating whether the child
     *                          is to be included in the subtree.
     * @return {YXmlTreeWalker} A subtree and a position within it.
     *
     * @public
     */
    createTreeWalker(filter) {
      return new YXmlTreeWalker(this, filter);
    }
    /**
     * Returns the first YXmlElement that matches the query.
     * Similar to DOM's {@link querySelector}.
     *
     * Query support:
     *   - tagname
     * TODO:
     *   - id
     *   - attribute
     *
     * @param {CSS_Selector} query The query on the children.
     * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.
     *
     * @public
     */
    querySelector(query) {
      query = query.toUpperCase();
      const iterator = new YXmlTreeWalker(this, (element3) => element3.nodeName && element3.nodeName.toUpperCase() === query);
      const next2 = iterator.next();
      if (next2.done) {
        return null;
      } else {
        return next2.value;
      }
    }
    /**
     * Returns all YXmlElements that match the query.
     * Similar to Dom's {@link querySelectorAll}.
     *
     * @todo Does not yet support all queries. Currently only query by tagName.
     *
     * @param {CSS_Selector} query The query on the children
     * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.
     *
     * @public
     */
    querySelectorAll(query) {
      query = query.toUpperCase();
      return from(new YXmlTreeWalker(this, (element3) => element3.nodeName && element3.nodeName.toUpperCase() === query));
    }
    /**
     * Creates YXmlEvent and calls observers.
     *
     * @param {Transaction} transaction
     * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
     */
    _callObserver(transaction, parentSubs) {
      callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));
    }
    /**
     * Get the string representation of all the children of this YXmlFragment.
     *
     * @return {string} The string representation of all children.
     */
    toString() {
      return typeListMap(this, (xml) => xml.toString()).join("");
    }
    /**
     * @return {string}
     */
    toJSON() {
      return this.toString();
    }
    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {any} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type.
     * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDOM(_document = document, hooks = {}, binding) {
      const fragment = _document.createDocumentFragment();
      if (binding !== void 0) {
        binding._createAssociation(fragment, this);
      }
      typeListForEach(this, (xmlType) => {
        fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);
      });
      return fragment;
    }
    /**
     * Inserts new content at an index.
     *
     * @example
     *  // Insert character 'a' at position 0
     *  xml.insert(0, [new Y.XmlText('text')])
     *
     * @param {number} index The index to insert content at
     * @param {Array<YXmlElement|YXmlText>} content The array of content
     */
    insert(index, content) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeListInsertGenerics(transaction, this, index, content);
        });
      } else {
        this._prelimContent.splice(index, 0, ...content);
      }
    }
    /**
     * Inserts new content at an index.
     *
     * @example
     *  // Insert character 'a' at position 0
     *  xml.insert(0, [new Y.XmlText('text')])
     *
     * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at
     * @param {Array<YXmlElement|YXmlText>} content The array of content
     */
    insertAfter(ref, content) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          const refItem = ref && ref instanceof AbstractType ? ref._item : ref;
          typeListInsertGenericsAfter(transaction, this, refItem, content);
        });
      } else {
        const pc = (
          /** @type {Array<any>} */
          this._prelimContent
        );
        const index = ref === null ? 0 : pc.findIndex((el) => el === ref) + 1;
        if (index === 0 && ref !== null) {
          throw create3("Reference item not found");
        }
        pc.splice(index, 0, ...content);
      }
    }
    /**
     * Deletes elements starting from an index.
     *
     * @param {number} index Index at which to start deleting elements
     * @param {number} [length=1] The number of elements to remove. Defaults to 1.
     */
    delete(index, length3 = 1) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeListDelete(transaction, this, index, length3);
        });
      } else {
        this._prelimContent.splice(index, length3);
      }
    }
    /**
     * Transforms this YArray to a JavaScript Array.
     *
     * @return {Array<YXmlElement|YXmlText|YXmlHook>}
     */
    toArray() {
      return typeListToArray(this);
    }
    /**
     * Appends content to this YArray.
     *
     * @param {Array<YXmlElement|YXmlText>} content Array of content to append.
     */
    push(content) {
      this.insert(this.length, content);
    }
    /**
     * Preppends content to this YArray.
     *
     * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.
     */
    unshift(content) {
      this.insert(0, content);
    }
    /**
     * Returns the i-th element from a YArray.
     *
     * @param {number} index The index of the element to return from the YArray
     * @return {YXmlElement|YXmlText}
     */
    get(index) {
      return typeListGet(this, index);
    }
    /**
     * Transforms this YArray to a JavaScript Array.
     *
     * @param {number} [start]
     * @param {number} [end]
     * @return {Array<YXmlElement|YXmlText>}
     */
    slice(start = 0, end = this.length) {
      return typeListSlice(this, start, end);
    }
    /**
     * Executes a provided function on once on overy child element.
     *
     * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.
     */
    forEach(f) {
      typeListForEach(this, f);
    }
    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
     */
    _write(encoder) {
      encoder.writeTypeRef(YXmlFragmentRefID);
    }
  };
  var readYXmlFragment = (_decoder) => new YXmlFragment();
  var YXmlElement = class extends YXmlFragment {
    constructor(nodeName = "UNDEFINED") {
      super();
      this.nodeName = nodeName;
      this._prelimAttrs = /* @__PURE__ */ new Map();
    }
    /**
     * @type {YXmlElement|YXmlText|null}
     */
    get nextSibling() {
      const n = this._item ? this._item.next : null;
      return n ? (
        /** @type {YXmlElement|YXmlText} */
        /** @type {ContentType} */
        n.content.type
      ) : null;
    }
    /**
     * @type {YXmlElement|YXmlText|null}
     */
    get prevSibling() {
      const n = this._item ? this._item.prev : null;
      return n ? (
        /** @type {YXmlElement|YXmlText} */
        /** @type {ContentType} */
        n.content.type
      ) : null;
    }
    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Doc} y The Yjs instance
     * @param {Item} item
     */
    _integrate(y, item) {
      super._integrate(y, item);
      /** @type {Map<string, any>} */
      this._prelimAttrs.forEach((value, key) => {
        this.setAttribute(key, value);
      });
      this._prelimAttrs = null;
    }
    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @return {YXmlElement}
     */
    _copy() {
      return new YXmlElement(this.nodeName);
    }
    /**
     * @return {YXmlElement<KV>}
     */
    clone() {
      const el = new YXmlElement(this.nodeName);
      const attrs = this.getAttributes();
      forEach(attrs, (value, key) => {
        if (typeof value === "string") {
          el.setAttribute(key, value);
        }
      });
      el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
      return el;
    }
    /**
     * Returns the XML serialization of this YXmlElement.
     * The attributes are ordered by attribute-name, so you can easily use this
     * method to compare YXmlElements
     *
     * @return {string} The string representation of this type.
     *
     * @public
     */
    toString() {
      const attrs = this.getAttributes();
      const stringBuilder = [];
      const keys2 = [];
      for (const key in attrs) {
        keys2.push(key);
      }
      keys2.sort();
      const keysLen = keys2.length;
      for (let i = 0; i < keysLen; i++) {
        const key = keys2[i];
        stringBuilder.push(key + '="' + attrs[key] + '"');
      }
      const nodeName = this.nodeName.toLocaleLowerCase();
      const attrsString = stringBuilder.length > 0 ? " " + stringBuilder.join(" ") : "";
      return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`;
    }
    /**
     * Removes an attribute from this YXmlElement.
     *
     * @param {string} attributeName The attribute name that is to be removed.
     *
     * @public
     */
    removeAttribute(attributeName) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapDelete(transaction, this, attributeName);
        });
      } else {
        this._prelimAttrs.delete(attributeName);
      }
    }
    /**
     * Sets or updates an attribute.
     *
     * @template {keyof KV & string} KEY
     *
     * @param {KEY} attributeName The attribute name that is to be set.
     * @param {KV[KEY]} attributeValue The attribute value that is to be set.
     *
     * @public
     */
    setAttribute(attributeName, attributeValue) {
      if (this.doc !== null) {
        transact(this.doc, (transaction) => {
          typeMapSet(transaction, this, attributeName, attributeValue);
        });
      } else {
        this._prelimAttrs.set(attributeName, attributeValue);
      }
    }
    /**
     * Returns an attribute value that belongs to the attribute name.
     *
     * @template {keyof KV & string} KEY
     *
     * @param {KEY} attributeName The attribute name that identifies the
     *                               queried value.
     * @return {KV[KEY]|undefined} The queried attribute value.
     *
     * @public
     */
    getAttribute(attributeName) {
      return (
        /** @type {any} */
        typeMapGet(this, attributeName)
      );
    }
    /**
     * Returns whether an attribute exists
     *
     * @param {string} attributeName The attribute name to check for existence.
     * @return {boolean} whether the attribute exists.
     *
     * @public
     */
    hasAttribute(attributeName) {
      return (
        /** @type {any} */
        typeMapHas(this, attributeName)
      );
    }
    /**
     * Returns all attribute name/value pairs in a JSON Object.
     *
     * @param {Snapshot} [snapshot]
     * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.
     *
     * @public
     */
    getAttributes(snapshot2) {
      return (
        /** @type {any} */
        snapshot2 ? typeMapGetAllSnapshot(this, snapshot2) : typeMapGetAll(this)
      );
    }
    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {any} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type.
     * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDOM(_document = document, hooks = {}, binding) {
      const dom = _document.createElement(this.nodeName);
      const attrs = this.getAttributes();
      for (const key in attrs) {
        const value = attrs[key];
        if (typeof value === "string") {
          dom.setAttribute(key, value);
        }
      }
      typeListForEach(this, (yxml) => {
        dom.appendChild(yxml.toDOM(_document, hooks, binding));
      });
      if (binding !== void 0) {
        binding._createAssociation(dom, this);
      }
      return dom;
    }
    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
     */
    _write(encoder) {
      encoder.writeTypeRef(YXmlElementRefID);
      encoder.writeKey(this.nodeName);
    }
  };
  var readYXmlElement = (decoder) => new YXmlElement(decoder.readKey());
  var YXmlEvent = class extends YEvent {
    /**
     * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.
     * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the
     *                   child list changed.
     * @param {Transaction} transaction The transaction instance with wich the
     *                                  change was created.
     */
    constructor(target, subs, transaction) {
      super(target, transaction);
      this.childListChanged = false;
      this.attributesChanged = /* @__PURE__ */ new Set();
      subs.forEach((sub) => {
        if (sub === null) {
          this.childListChanged = true;
        } else {
          this.attributesChanged.add(sub);
        }
      });
    }
  };
  var YXmlHook = class extends YMap {
    /**
     * @param {string} hookName nodeName of the Dom Node.
     */
    constructor(hookName) {
      super();
      this.hookName = hookName;
    }
    /**
     * Creates an Item with the same effect as this Item (without position effect)
     */
    _copy() {
      return new YXmlHook(this.hookName);
    }
    /**
     * @return {YXmlHook}
     */
    clone() {
      const el = new YXmlHook(this.hookName);
      this.forEach((value, key) => {
        el.set(key, value);
      });
      return el;
    }
    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object.<string, any>} [hooks] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {any} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type
     * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDOM(_document = document, hooks = {}, binding) {
      const hook = hooks[this.hookName];
      let dom;
      if (hook !== void 0) {
        dom = hook.createDom(this);
      } else {
        dom = document.createElement(this.hookName);
      }
      dom.setAttribute("data-yjs-hook", this.hookName);
      if (binding !== void 0) {
        binding._createAssociation(dom, this);
      }
      return dom;
    }
    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
     */
    _write(encoder) {
      encoder.writeTypeRef(YXmlHookRefID);
      encoder.writeKey(this.hookName);
    }
  };
  var readYXmlHook = (decoder) => new YXmlHook(decoder.readKey());
  var YXmlText = class extends YText {
    /**
     * @type {YXmlElement|YXmlText|null}
     */
    get nextSibling() {
      const n = this._item ? this._item.next : null;
      return n ? (
        /** @type {YXmlElement|YXmlText} */
        /** @type {ContentType} */
        n.content.type
      ) : null;
    }
    /**
     * @type {YXmlElement|YXmlText|null}
     */
    get prevSibling() {
      const n = this._item ? this._item.prev : null;
      return n ? (
        /** @type {YXmlElement|YXmlText} */
        /** @type {ContentType} */
        n.content.type
      ) : null;
    }
    _copy() {
      return new YXmlText();
    }
    /**
     * @return {YXmlText}
     */
    clone() {
      const text3 = new YXmlText();
      text3.applyDelta(this.toDelta());
      return text3;
    }
    /**
     * Creates a Dom Element that mirrors this YXmlText.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object<string, any>} [hooks] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {any} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type.
     * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDOM(_document = document, hooks, binding) {
      const dom = _document.createTextNode(this.toString());
      if (binding !== void 0) {
        binding._createAssociation(dom, this);
      }
      return dom;
    }
    toString() {
      return this.toDelta().map((delta) => {
        const nestedNodes = [];
        for (const nodeName in delta.attributes) {
          const attrs = [];
          for (const key in delta.attributes[nodeName]) {
            attrs.push({ key, value: delta.attributes[nodeName][key] });
          }
          attrs.sort((a, b) => a.key < b.key ? -1 : 1);
          nestedNodes.push({ nodeName, attrs });
        }
        nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1);
        let str = "";
        for (let i = 0; i < nestedNodes.length; i++) {
          const node = nestedNodes[i];
          str += `<${node.nodeName}`;
          for (let j = 0; j < node.attrs.length; j++) {
            const attr2 = node.attrs[j];
            str += ` ${attr2.key}="${attr2.value}"`;
          }
          str += ">";
        }
        str += delta.insert;
        for (let i = nestedNodes.length - 1; i >= 0; i--) {
          str += `</${nestedNodes[i].nodeName}>`;
        }
        return str;
      }).join("");
    }
    /**
     * @return {string}
     */
    toJSON() {
      return this.toString();
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     */
    _write(encoder) {
      encoder.writeTypeRef(YXmlTextRefID);
    }
  };
  var readYXmlText = (decoder) => new YXmlText();
  var AbstractStruct = class {
    /**
     * @param {ID} id
     * @param {number} length
     */
    constructor(id2, length3) {
      this.id = id2;
      this.length = length3;
    }
    /**
     * @type {boolean}
     */
    get deleted() {
      throw methodUnimplemented();
    }
    /**
     * Merge this struct with the item to the right.
     * This method is already assuming that `this.id.clock + this.length === this.id.clock`.
     * Also this method does *not* remove right from StructStore!
     * @param {AbstractStruct} right
     * @return {boolean} wether this merged with right
     */
    mergeWith(right) {
      return false;
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
     * @param {number} offset
     * @param {number} encodingRef
     */
    write(encoder, offset, encodingRef) {
      throw methodUnimplemented();
    }
    /**
     * @param {Transaction} transaction
     * @param {number} offset
     */
    integrate(transaction, offset) {
      throw methodUnimplemented();
    }
  };
  var structGCRefNumber = 0;
  var GC = class extends AbstractStruct {
    get deleted() {
      return true;
    }
    delete() {
    }
    /**
     * @param {GC} right
     * @return {boolean}
     */
    mergeWith(right) {
      if (this.constructor !== right.constructor) {
        return false;
      }
      this.length += right.length;
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {number} offset
     */
    integrate(transaction, offset) {
      if (offset > 0) {
        this.id.clock += offset;
        this.length -= offset;
      }
      addStruct(transaction.doc.store, this);
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeInfo(structGCRefNumber);
      encoder.writeLen(this.length - offset);
    }
    /**
     * @param {Transaction} transaction
     * @param {StructStore} store
     * @return {null | number}
     */
    getMissing(transaction, store) {
      return null;
    }
  };
  var ContentBinary = class {
    /**
     * @param {Uint8Array} content
     */
    constructor(content) {
      this.content = content;
    }
    /**
     * @return {number}
     */
    getLength() {
      return 1;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [this.content];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentBinary}
     */
    copy() {
      return new ContentBinary(this.content);
    }
    /**
     * @param {number} offset
     * @return {ContentBinary}
     */
    splice(offset) {
      throw methodUnimplemented();
    }
    /**
     * @param {ContentBinary} right
     * @return {boolean}
     */
    mergeWith(right) {
      return false;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeBuf(this.content);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 3;
    }
  };
  var readContentBinary = (decoder) => new ContentBinary(decoder.readBuf());
  var ContentDeleted = class {
    /**
     * @param {number} len
     */
    constructor(len) {
      this.len = len;
    }
    /**
     * @return {number}
     */
    getLength() {
      return this.len;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return false;
    }
    /**
     * @return {ContentDeleted}
     */
    copy() {
      return new ContentDeleted(this.len);
    }
    /**
     * @param {number} offset
     * @return {ContentDeleted}
     */
    splice(offset) {
      const right = new ContentDeleted(this.len - offset);
      this.len = offset;
      return right;
    }
    /**
     * @param {ContentDeleted} right
     * @return {boolean}
     */
    mergeWith(right) {
      this.len += right.len;
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
      addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);
      item.markDeleted();
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeLen(this.len - offset);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 1;
    }
  };
  var readContentDeleted = (decoder) => new ContentDeleted(decoder.readLen());
  var createDocFromOpts = (guid, opts) => new Doc(__spreadProps(__spreadValues({ guid }, opts), { shouldLoad: opts.shouldLoad || opts.autoLoad || false }));
  var ContentDoc = class {
    /**
     * @param {Doc} doc
     */
    constructor(doc4) {
      if (doc4._item) {
        console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid.");
      }
      this.doc = doc4;
      const opts = {};
      this.opts = opts;
      if (!doc4.gc) {
        opts.gc = false;
      }
      if (doc4.autoLoad) {
        opts.autoLoad = true;
      }
      if (doc4.meta !== null) {
        opts.meta = doc4.meta;
      }
    }
    /**
     * @return {number}
     */
    getLength() {
      return 1;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [this.doc];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentDoc}
     */
    copy() {
      return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts));
    }
    /**
     * @param {number} offset
     * @return {ContentDoc}
     */
    splice(offset) {
      throw methodUnimplemented();
    }
    /**
     * @param {ContentDoc} right
     * @return {boolean}
     */
    mergeWith(right) {
      return false;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
      this.doc._item = item;
      transaction.subdocsAdded.add(this.doc);
      if (this.doc.shouldLoad) {
        transaction.subdocsLoaded.add(this.doc);
      }
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
      if (transaction.subdocsAdded.has(this.doc)) {
        transaction.subdocsAdded.delete(this.doc);
      } else {
        transaction.subdocsRemoved.add(this.doc);
      }
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeString(this.doc.guid);
      encoder.writeAny(this.opts);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 9;
    }
  };
  var readContentDoc = (decoder) => new ContentDoc(createDocFromOpts(decoder.readString(), decoder.readAny()));
  var ContentEmbed = class {
    /**
     * @param {Object} embed
     */
    constructor(embed) {
      this.embed = embed;
    }
    /**
     * @return {number}
     */
    getLength() {
      return 1;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [this.embed];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentEmbed}
     */
    copy() {
      return new ContentEmbed(this.embed);
    }
    /**
     * @param {number} offset
     * @return {ContentEmbed}
     */
    splice(offset) {
      throw methodUnimplemented();
    }
    /**
     * @param {ContentEmbed} right
     * @return {boolean}
     */
    mergeWith(right) {
      return false;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeJSON(this.embed);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 5;
    }
  };
  var readContentEmbed = (decoder) => new ContentEmbed(decoder.readJSON());
  var ContentFormat = class {
    /**
     * @param {string} key
     * @param {Object} value
     */
    constructor(key, value) {
      this.key = key;
      this.value = value;
    }
    /**
     * @return {number}
     */
    getLength() {
      return 1;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return false;
    }
    /**
     * @return {ContentFormat}
     */
    copy() {
      return new ContentFormat(this.key, this.value);
    }
    /**
     * @param {number} _offset
     * @return {ContentFormat}
     */
    splice(_offset) {
      throw methodUnimplemented();
    }
    /**
     * @param {ContentFormat} _right
     * @return {boolean}
     */
    mergeWith(_right) {
      return false;
    }
    /**
     * @param {Transaction} _transaction
     * @param {Item} item
     */
    integrate(_transaction, item) {
      const p = (
        /** @type {YText} */
        item.parent
      );
      p._searchMarker = null;
      p._hasFormatting = true;
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeKey(this.key);
      encoder.writeJSON(this.value);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 6;
    }
  };
  var readContentFormat = (decoder) => new ContentFormat(decoder.readKey(), decoder.readJSON());
  var ContentJSON = class {
    /**
     * @param {Array<any>} arr
     */
    constructor(arr) {
      this.arr = arr;
    }
    /**
     * @return {number}
     */
    getLength() {
      return this.arr.length;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return this.arr;
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentJSON}
     */
    copy() {
      return new ContentJSON(this.arr);
    }
    /**
     * @param {number} offset
     * @return {ContentJSON}
     */
    splice(offset) {
      const right = new ContentJSON(this.arr.slice(offset));
      this.arr = this.arr.slice(0, offset);
      return right;
    }
    /**
     * @param {ContentJSON} right
     * @return {boolean}
     */
    mergeWith(right) {
      this.arr = this.arr.concat(right.arr);
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      const len = this.arr.length;
      encoder.writeLen(len - offset);
      for (let i = offset; i < len; i++) {
        const c = this.arr[i];
        encoder.writeString(c === void 0 ? "undefined" : JSON.stringify(c));
      }
    }
    /**
     * @return {number}
     */
    getRef() {
      return 2;
    }
  };
  var readContentJSON = (decoder) => {
    const len = decoder.readLen();
    const cs = [];
    for (let i = 0; i < len; i++) {
      const c = decoder.readString();
      if (c === "undefined") {
        cs.push(void 0);
      } else {
        cs.push(JSON.parse(c));
      }
    }
    return new ContentJSON(cs);
  };
  var ContentAny = class {
    /**
     * @param {Array<any>} arr
     */
    constructor(arr) {
      this.arr = arr;
    }
    /**
     * @return {number}
     */
    getLength() {
      return this.arr.length;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return this.arr;
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentAny}
     */
    copy() {
      return new ContentAny(this.arr);
    }
    /**
     * @param {number} offset
     * @return {ContentAny}
     */
    splice(offset) {
      const right = new ContentAny(this.arr.slice(offset));
      this.arr = this.arr.slice(0, offset);
      return right;
    }
    /**
     * @param {ContentAny} right
     * @return {boolean}
     */
    mergeWith(right) {
      this.arr = this.arr.concat(right.arr);
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      const len = this.arr.length;
      encoder.writeLen(len - offset);
      for (let i = offset; i < len; i++) {
        const c = this.arr[i];
        encoder.writeAny(c);
      }
    }
    /**
     * @return {number}
     */
    getRef() {
      return 8;
    }
  };
  var readContentAny = (decoder) => {
    const len = decoder.readLen();
    const cs = [];
    for (let i = 0; i < len; i++) {
      cs.push(decoder.readAny());
    }
    return new ContentAny(cs);
  };
  var ContentString = class {
    /**
     * @param {string} str
     */
    constructor(str) {
      this.str = str;
    }
    /**
     * @return {number}
     */
    getLength() {
      return this.str.length;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return this.str.split("");
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentString}
     */
    copy() {
      return new ContentString(this.str);
    }
    /**
     * @param {number} offset
     * @return {ContentString}
     */
    splice(offset) {
      const right = new ContentString(this.str.slice(offset));
      this.str = this.str.slice(0, offset);
      const firstCharCode = this.str.charCodeAt(offset - 1);
      if (firstCharCode >= 55296 && firstCharCode <= 56319) {
        this.str = this.str.slice(0, offset - 1) + "\uFFFD";
        right.str = "\uFFFD" + right.str.slice(1);
      }
      return right;
    }
    /**
     * @param {ContentString} right
     * @return {boolean}
     */
    mergeWith(right) {
      this.str += right.str;
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeString(offset === 0 ? this.str : this.str.slice(offset));
    }
    /**
     * @return {number}
     */
    getRef() {
      return 4;
    }
  };
  var readContentString = (decoder) => new ContentString(decoder.readString());
  var typeRefs = [
    readYArray,
    readYMap,
    readYText,
    readYXmlElement,
    readYXmlFragment,
    readYXmlHook,
    readYXmlText
  ];
  var YArrayRefID = 0;
  var YMapRefID = 1;
  var YTextRefID = 2;
  var YXmlElementRefID = 3;
  var YXmlFragmentRefID = 4;
  var YXmlHookRefID = 5;
  var YXmlTextRefID = 6;
  var ContentType = class {
    /**
     * @param {AbstractType<any>} type
     */
    constructor(type) {
      this.type = type;
    }
    /**
     * @return {number}
     */
    getLength() {
      return 1;
    }
    /**
     * @return {Array<any>}
     */
    getContent() {
      return [this.type];
    }
    /**
     * @return {boolean}
     */
    isCountable() {
      return true;
    }
    /**
     * @return {ContentType}
     */
    copy() {
      return new ContentType(this.type._copy());
    }
    /**
     * @param {number} offset
     * @return {ContentType}
     */
    splice(offset) {
      throw methodUnimplemented();
    }
    /**
     * @param {ContentType} right
     * @return {boolean}
     */
    mergeWith(right) {
      return false;
    }
    /**
     * @param {Transaction} transaction
     * @param {Item} item
     */
    integrate(transaction, item) {
      this.type._integrate(transaction.doc, item);
    }
    /**
     * @param {Transaction} transaction
     */
    delete(transaction) {
      let item = this.type._start;
      while (item !== null) {
        if (!item.deleted) {
          item.delete(transaction);
        } else if (item.id.clock < (transaction.beforeState.get(item.id.client) || 0)) {
          transaction._mergeStructs.push(item);
        }
        item = item.right;
      }
      this.type._map.forEach((item2) => {
        if (!item2.deleted) {
          item2.delete(transaction);
        } else if (item2.id.clock < (transaction.beforeState.get(item2.id.client) || 0)) {
          transaction._mergeStructs.push(item2);
        }
      });
      transaction.changed.delete(this.type);
    }
    /**
     * @param {StructStore} store
     */
    gc(store) {
      let item = this.type._start;
      while (item !== null) {
        item.gc(store, true);
        item = item.right;
      }
      this.type._start = null;
      this.type._map.forEach(
        /** @param {Item | null} item */
        (item2) => {
          while (item2 !== null) {
            item2.gc(store, true);
            item2 = item2.left;
          }
        }
      );
      this.type._map = /* @__PURE__ */ new Map();
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      this.type._write(encoder);
    }
    /**
     * @return {number}
     */
    getRef() {
      return 7;
    }
  };
  var readContentType = (decoder) => new ContentType(typeRefs[decoder.readTypeRef()](decoder));
  var followRedone = (store, id2) => {
    let nextID = id2;
    let diff = 0;
    let item;
    do {
      if (diff > 0) {
        nextID = createID(nextID.client, nextID.clock + diff);
      }
      item = getItem(store, nextID);
      diff = nextID.clock - item.id.clock;
      nextID = item.redone;
    } while (nextID !== null && item instanceof Item);
    return {
      item,
      diff
    };
  };
  var keepItem = (item, keep) => {
    while (item !== null && item.keep !== keep) {
      item.keep = keep;
      item = /** @type {AbstractType<any>} */
      item.parent._item;
    }
  };
  var splitItem = (transaction, leftItem, diff) => {
    const { client, clock } = leftItem.id;
    const rightItem = new Item(
      createID(client, clock + diff),
      leftItem,
      createID(client, clock + diff - 1),
      leftItem.right,
      leftItem.rightOrigin,
      leftItem.parent,
      leftItem.parentSub,
      leftItem.content.splice(diff)
    );
    if (leftItem.deleted) {
      rightItem.markDeleted();
    }
    if (leftItem.keep) {
      rightItem.keep = true;
    }
    if (leftItem.redone !== null) {
      rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);
    }
    leftItem.right = rightItem;
    if (rightItem.right !== null) {
      rightItem.right.left = rightItem;
    }
    transaction._mergeStructs.push(rightItem);
    if (rightItem.parentSub !== null && rightItem.right === null) {
      rightItem.parent._map.set(rightItem.parentSub, rightItem);
    }
    leftItem.length = diff;
    return rightItem;
  };
  var isDeletedByUndoStack = (stack, id2) => some(
    stack,
    /** @param {StackItem} s */
    (s) => isDeleted(s.deletions, id2)
  );
  var redoItem = (transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) => {
    const doc4 = transaction.doc;
    const store = doc4.store;
    const ownClientID = doc4.clientID;
    const redone = item.redone;
    if (redone !== null) {
      return getItemCleanStart(transaction, redone);
    }
    let parentItem = (
      /** @type {AbstractType<any>} */
      item.parent._item
    );
    let left = null;
    let right;
    if (parentItem !== null && parentItem.deleted === true) {
      if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) === null)) {
        return null;
      }
      while (parentItem.redone !== null) {
        parentItem = getItemCleanStart(transaction, parentItem.redone);
      }
    }
    const parentType = parentItem === null ? (
      /** @type {AbstractType<any>} */
      item.parent
    ) : (
      /** @type {ContentType} */
      parentItem.content.type
    );
    if (item.parentSub === null) {
      left = item.left;
      right = item;
      while (left !== null) {
        let leftTrace = left;
        while (leftTrace !== null && /** @type {AbstractType<any>} */
        leftTrace.parent._item !== parentItem) {
          leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);
        }
        if (leftTrace !== null && /** @type {AbstractType<any>} */
        leftTrace.parent._item === parentItem) {
          left = leftTrace;
          break;
        }
        left = left.left;
      }
      while (right !== null) {
        let rightTrace = right;
        while (rightTrace !== null && /** @type {AbstractType<any>} */
        rightTrace.parent._item !== parentItem) {
          rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);
        }
        if (rightTrace !== null && /** @type {AbstractType<any>} */
        rightTrace.parent._item === parentItem) {
          right = rightTrace;
          break;
        }
        right = right.right;
      }
    } else {
      right = null;
      if (item.right && !ignoreRemoteMapChanges) {
        left = item;
        while (left !== null && left.right !== null && (left.right.redone || isDeleted(itemsToDelete, left.right.id) || isDeletedByUndoStack(um.undoStack, left.right.id) || isDeletedByUndoStack(um.redoStack, left.right.id))) {
          left = left.right;
          while (left.redone)
            left = getItemCleanStart(transaction, left.redone);
        }
        if (left && left.right !== null) {
          return null;
        }
      } else {
        left = parentType._map.get(item.parentSub) || null;
      }
    }
    const nextClock = getState(store, ownClientID);
    const nextId = createID(ownClientID, nextClock);
    const redoneItem = new Item(
      nextId,
      left,
      left && left.lastId,
      right,
      right && right.id,
      parentType,
      item.parentSub,
      item.content.copy()
    );
    item.redone = nextId;
    keepItem(redoneItem, true);
    redoneItem.integrate(transaction, 0);
    return redoneItem;
  };
  var Item = class extends AbstractStruct {
    /**
     * @param {ID} id
     * @param {Item | null} left
     * @param {ID | null} origin
     * @param {Item | null} right
     * @param {ID | null} rightOrigin
     * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.
     * @param {string | null} parentSub
     * @param {AbstractContent} content
     */
    constructor(id2, left, origin, right, rightOrigin, parent, parentSub, content) {
      super(id2, content.getLength());
      this.origin = origin;
      this.left = left;
      this.right = right;
      this.rightOrigin = rightOrigin;
      this.parent = parent;
      this.parentSub = parentSub;
      this.redone = null;
      this.content = content;
      this.info = this.content.isCountable() ? BIT2 : 0;
    }
    /**
     * This is used to mark the item as an indexed fast-search marker
     *
     * @type {boolean}
     */
    set marker(isMarked) {
      if ((this.info & BIT4) > 0 !== isMarked) {
        this.info ^= BIT4;
      }
    }
    get marker() {
      return (this.info & BIT4) > 0;
    }
    /**
     * If true, do not garbage collect this Item.
     */
    get keep() {
      return (this.info & BIT1) > 0;
    }
    set keep(doKeep) {
      if (this.keep !== doKeep) {
        this.info ^= BIT1;
      }
    }
    get countable() {
      return (this.info & BIT2) > 0;
    }
    /**
     * Whether this item was deleted or not.
     * @type {Boolean}
     */
    get deleted() {
      return (this.info & BIT3) > 0;
    }
    set deleted(doDelete) {
      if (this.deleted !== doDelete) {
        this.info ^= BIT3;
      }
    }
    markDeleted() {
      this.info |= BIT3;
    }
    /**
     * Return the creator clientID of the missing op or define missing items and return null.
     *
     * @param {Transaction} transaction
     * @param {StructStore} store
     * @return {null | number}
     */
    getMissing(transaction, store) {
      if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {
        return this.origin.client;
      }
      if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {
        return this.rightOrigin.client;
      }
      if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {
        return this.parent.client;
      }
      if (this.origin) {
        this.left = getItemCleanEnd(transaction, store, this.origin);
        this.origin = this.left.lastId;
      }
      if (this.rightOrigin) {
        this.right = getItemCleanStart(transaction, this.rightOrigin);
        this.rightOrigin = this.right.id;
      }
      if (this.left && this.left.constructor === GC || this.right && this.right.constructor === GC) {
        this.parent = null;
      } else if (!this.parent) {
        if (this.left && this.left.constructor === Item) {
          this.parent = this.left.parent;
          this.parentSub = this.left.parentSub;
        }
        if (this.right && this.right.constructor === Item) {
          this.parent = this.right.parent;
          this.parentSub = this.right.parentSub;
        }
      } else if (this.parent.constructor === ID) {
        const parentItem = getItem(store, this.parent);
        if (parentItem.constructor === GC) {
          this.parent = null;
        } else {
          this.parent = /** @type {ContentType} */
          parentItem.content.type;
        }
      }
      return null;
    }
    /**
     * @param {Transaction} transaction
     * @param {number} offset
     */
    integrate(transaction, offset) {
      if (offset > 0) {
        this.id.clock += offset;
        this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));
        this.origin = this.left.lastId;
        this.content = this.content.splice(offset);
        this.length -= offset;
      }
      if (this.parent) {
        if (!this.left && (!this.right || this.right.left !== null) || this.left && this.left.right !== this.right) {
          let left = this.left;
          let o;
          if (left !== null) {
            o = left.right;
          } else if (this.parentSub !== null) {
            o = /** @type {AbstractType<any>} */
            this.parent._map.get(this.parentSub) || null;
            while (o !== null && o.left !== null) {
              o = o.left;
            }
          } else {
            o = /** @type {AbstractType<any>} */
            this.parent._start;
          }
          const conflictingItems = /* @__PURE__ */ new Set();
          const itemsBeforeOrigin = /* @__PURE__ */ new Set();
          while (o !== null && o !== this.right) {
            itemsBeforeOrigin.add(o);
            conflictingItems.add(o);
            if (compareIDs(this.origin, o.origin)) {
              if (o.id.client < this.id.client) {
                left = o;
                conflictingItems.clear();
              } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {
                break;
              }
            } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) {
              if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {
                left = o;
                conflictingItems.clear();
              }
            } else {
              break;
            }
            o = o.right;
          }
          this.left = left;
        }
        if (this.left !== null) {
          const right = this.left.right;
          this.right = right;
          this.left.right = this;
        } else {
          let r;
          if (this.parentSub !== null) {
            r = /** @type {AbstractType<any>} */
            this.parent._map.get(this.parentSub) || null;
            while (r !== null && r.left !== null) {
              r = r.left;
            }
          } else {
            r = /** @type {AbstractType<any>} */
            this.parent._start;
            this.parent._start = this;
          }
          this.right = r;
        }
        if (this.right !== null) {
          this.right.left = this;
        } else if (this.parentSub !== null) {
          this.parent._map.set(this.parentSub, this);
          if (this.left !== null) {
            this.left.delete(transaction);
          }
        }
        if (this.parentSub === null && this.countable && !this.deleted) {
          this.parent._length += this.length;
        }
        addStruct(transaction.doc.store, this);
        this.content.integrate(transaction, this);
        addChangedTypeToTransaction(
          transaction,
          /** @type {AbstractType<any>} */
          this.parent,
          this.parentSub
        );
        if (
          /** @type {AbstractType<any>} */
          this.parent._item !== null && /** @type {AbstractType<any>} */
          this.parent._item.deleted || this.parentSub !== null && this.right !== null
        ) {
          this.delete(transaction);
        }
      } else {
        new GC(this.id, this.length).integrate(transaction, 0);
      }
    }
    /**
     * Returns the next non-deleted item
     */
    get next() {
      let n = this.right;
      while (n !== null && n.deleted) {
        n = n.right;
      }
      return n;
    }
    /**
     * Returns the previous non-deleted item
     */
    get prev() {
      let n = this.left;
      while (n !== null && n.deleted) {
        n = n.left;
      }
      return n;
    }
    /**
     * Computes the last content address of this Item.
     */
    get lastId() {
      return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);
    }
    /**
     * Try to merge two items
     *
     * @param {Item} right
     * @return {boolean}
     */
    mergeWith(right) {
      if (this.constructor === right.constructor && compareIDs(right.origin, this.lastId) && this.right === right && compareIDs(this.rightOrigin, right.rightOrigin) && this.id.client === right.id.client && this.id.clock + this.length === right.id.clock && this.deleted === right.deleted && this.redone === null && right.redone === null && this.content.constructor === right.content.constructor && this.content.mergeWith(right.content)) {
        const searchMarker = (
          /** @type {AbstractType<any>} */
          this.parent._searchMarker
        );
        if (searchMarker) {
          searchMarker.forEach((marker) => {
            if (marker.p === right) {
              marker.p = this;
              if (!this.deleted && this.countable) {
                marker.index -= this.length;
              }
            }
          });
        }
        if (right.keep) {
          this.keep = true;
        }
        this.right = right.right;
        if (this.right !== null) {
          this.right.left = this;
        }
        this.length += right.length;
        return true;
      }
      return false;
    }
    /**
     * Mark this Item as deleted.
     *
     * @param {Transaction} transaction
     */
    delete(transaction) {
      if (!this.deleted) {
        const parent = (
          /** @type {AbstractType<any>} */
          this.parent
        );
        if (this.countable && this.parentSub === null) {
          parent._length -= this.length;
        }
        this.markDeleted();
        addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);
        addChangedTypeToTransaction(transaction, parent, this.parentSub);
        this.content.delete(transaction);
      }
    }
    /**
     * @param {StructStore} store
     * @param {boolean} parentGCd
     */
    gc(store, parentGCd) {
      if (!this.deleted) {
        throw unexpectedCase();
      }
      this.content.gc(store);
      if (parentGCd) {
        replaceStruct(store, this, new GC(this.id, this.length));
      } else {
        this.content = new ContentDeleted(this.length);
      }
    }
    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
     * @param {number} offset
     */
    write(encoder, offset) {
      const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;
      const rightOrigin = this.rightOrigin;
      const parentSub = this.parentSub;
      const info = this.content.getRef() & BITS5 | (origin === null ? 0 : BIT8) | // origin is defined
      (rightOrigin === null ? 0 : BIT7) | // right origin is defined
      (parentSub === null ? 0 : BIT6);
      encoder.writeInfo(info);
      if (origin !== null) {
        encoder.writeLeftID(origin);
      }
      if (rightOrigin !== null) {
        encoder.writeRightID(rightOrigin);
      }
      if (origin === null && rightOrigin === null) {
        const parent = (
          /** @type {AbstractType<any>} */
          this.parent
        );
        if (parent._item !== void 0) {
          const parentItem = parent._item;
          if (parentItem === null) {
            const ykey = findRootTypeKey(parent);
            encoder.writeParentInfo(true);
            encoder.writeString(ykey);
          } else {
            encoder.writeParentInfo(false);
            encoder.writeLeftID(parentItem.id);
          }
        } else if (parent.constructor === String) {
          encoder.writeParentInfo(true);
          encoder.writeString(parent);
        } else if (parent.constructor === ID) {
          encoder.writeParentInfo(false);
          encoder.writeLeftID(parent);
        } else {
          unexpectedCase();
        }
        if (parentSub !== null) {
          encoder.writeString(parentSub);
        }
      }
      this.content.write(encoder, offset);
    }
  };
  var readItemContent = (decoder, info) => contentRefs[info & BITS5](decoder);
  var contentRefs = [
    () => {
      unexpectedCase();
    },
    // GC is not ItemContent
    readContentDeleted,
    // 1
    readContentJSON,
    // 2
    readContentBinary,
    // 3
    readContentString,
    // 4
    readContentEmbed,
    // 5
    readContentFormat,
    // 6
    readContentType,
    // 7
    readContentAny,
    // 8
    readContentDoc,
    // 9
    () => {
      unexpectedCase();
    }
    // 10 - Skip is not ItemContent
  ];
  var structSkipRefNumber = 10;
  var Skip = class extends AbstractStruct {
    get deleted() {
      return true;
    }
    delete() {
    }
    /**
     * @param {Skip} right
     * @return {boolean}
     */
    mergeWith(right) {
      if (this.constructor !== right.constructor) {
        return false;
      }
      this.length += right.length;
      return true;
    }
    /**
     * @param {Transaction} transaction
     * @param {number} offset
     */
    integrate(transaction, offset) {
      unexpectedCase();
    }
    /**
     * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
     * @param {number} offset
     */
    write(encoder, offset) {
      encoder.writeInfo(structSkipRefNumber);
      writeVarUint(encoder.restEncoder, this.length - offset);
    }
    /**
     * @param {Transaction} transaction
     * @param {StructStore} store
     * @return {null | number}
     */
    getMissing(transaction, store) {
      return null;
    }
  };
  var glo = (
    /** @type {any} */
    typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {}
  );
  var importIdentifier = "__ $YJS$ __";
  if (glo[importIdentifier] === true) {
    console.error("Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438");
  }
  glo[importIdentifier] = true;

  // node_modules/lib0/indexeddb.js
  var rtop = (request) => create4((resolve, reject) => {
    request.onerror = (event) => reject(new Error(event.target.error));
    request.onsuccess = (event) => resolve(event.target.result);
  });
  var openDB = (name, initDB) => create4((resolve, reject) => {
    const request = indexedDB.open(name);
    request.onupgradeneeded = (event) => initDB(event.target.result);
    request.onerror = (event) => reject(create3(event.target.error));
    request.onsuccess = (event) => {
      const db = event.target.result;
      db.onversionchange = () => {
        db.close();
      };
      resolve(db);
    };
  });
  var deleteDB = (name) => rtop(indexedDB.deleteDatabase(name));
  var createStores = (db, definitions) => definitions.forEach(
    (d) => (
      // @ts-ignore
      db.createObjectStore.apply(db, d)
    )
  );
  var transact2 = (db, stores, access = "readwrite") => {
    const transaction = db.transaction(stores, access);
    return stores.map((store) => getStore(transaction, store));
  };
  var count = (store, range2) => rtop(store.count(range2));
  var get = (store, key) => rtop(store.get(key));
  var del = (store, key) => rtop(store.delete(key));
  var put = (store, item, key) => rtop(store.put(item, key));
  var addAutoKey = (store, item) => rtop(store.add(item));
  var getAll = (store, range2, limit) => rtop(store.getAll(range2, limit));
  var queryFirst = (store, query, direction) => {
    let first = null;
    return iterateKeys(store, query, (key) => {
      first = key;
      return false;
    }, direction).then(() => first);
  };
  var getLastKey = (store, range2 = null) => queryFirst(store, range2, "prev");
  var iterateOnRequest = (request, f) => create4((resolve, reject) => {
    request.onerror = reject;
    request.onsuccess = async (event) => {
      const cursor = event.target.result;
      if (cursor === null || await f(cursor) === false) {
        return resolve();
      }
      cursor.continue();
    };
  });
  var iterateKeys = (store, keyrange, f, direction = "next") => iterateOnRequest(store.openKeyCursor(keyrange, direction), (cursor) => f(cursor.key));
  var getStore = (t, store) => t.objectStore(store);
  var createIDBKeyRangeUpperBound = (upper, upperOpen) => IDBKeyRange.upperBound(upper, upperOpen);
  var createIDBKeyRangeLowerBound = (lower, lowerOpen) => IDBKeyRange.lowerBound(lower, lowerOpen);

  // node_modules/y-indexeddb/src/y-indexeddb.js
  var customStoreName = "custom";
  var updatesStoreName = "updates";
  var PREFERRED_TRIM_SIZE = 500;
  var fetchUpdates = (idbPersistence, beforeApplyUpdatesCallback = () => {
  }, afterApplyUpdatesCallback = () => {
  }) => {
    const [updatesStore] = transact2(
      /** @type {IDBDatabase} */
      idbPersistence.db,
      [updatesStoreName]
    );
    return getAll(updatesStore, createIDBKeyRangeLowerBound(idbPersistence._dbref, false)).then((updates) => {
      if (!idbPersistence._destroyed) {
        beforeApplyUpdatesCallback(updatesStore);
        transact(idbPersistence.doc, () => {
          updates.forEach((val) => applyUpdate(idbPersistence.doc, val));
        }, idbPersistence, false);
        afterApplyUpdatesCallback(updatesStore);
      }
    }).then(() => getLastKey(updatesStore).then((lastKey) => {
      idbPersistence._dbref = lastKey + 1;
    })).then(() => count(updatesStore).then((cnt) => {
      idbPersistence._dbsize = cnt;
    })).then(() => updatesStore);
  };
  var storeState = (idbPersistence, forceStore = true) => fetchUpdates(idbPersistence).then((updatesStore) => {
    if (forceStore || idbPersistence._dbsize >= PREFERRED_TRIM_SIZE) {
      addAutoKey(updatesStore, encodeStateAsUpdate(idbPersistence.doc)).then(() => del(updatesStore, createIDBKeyRangeUpperBound(idbPersistence._dbref, true))).then(() => count(updatesStore).then((cnt) => {
        idbPersistence._dbsize = cnt;
      }));
    }
  });
  var IndexeddbPersistence = class extends Observable {
    /**
     * @param {string} name
     * @param {Y.Doc} doc
     */
    constructor(name, doc4) {
      super();
      this.doc = doc4;
      this.name = name;
      this._dbref = 0;
      this._dbsize = 0;
      this._destroyed = false;
      this.db = null;
      this.synced = false;
      this._db = openDB(
        name,
        (db) => createStores(db, [
          ["updates", { autoIncrement: true }],
          ["custom"]
        ])
      );
      this.whenSynced = create4((resolve) => this.on("synced", () => resolve(this)));
      this._db.then((db) => {
        this.db = db;
        const beforeApplyUpdatesCallback = (updatesStore) => addAutoKey(updatesStore, encodeStateAsUpdate(doc4));
        const afterApplyUpdatesCallback = () => {
          if (this._destroyed)
            return this;
          this.synced = true;
          this.emit("synced", [this]);
        };
        fetchUpdates(this, beforeApplyUpdatesCallback, afterApplyUpdatesCallback);
      });
      this._storeTimeout = 1e3;
      this._storeTimeoutId = null;
      this._storeUpdate = (update2, origin) => {
        if (this.db && origin !== this) {
          const [updatesStore] = transact2(
            /** @type {IDBDatabase} */
            this.db,
            [updatesStoreName]
          );
          addAutoKey(updatesStore, update2);
          if (++this._dbsize >= PREFERRED_TRIM_SIZE) {
            if (this._storeTimeoutId !== null) {
              clearTimeout(this._storeTimeoutId);
            }
            this._storeTimeoutId = setTimeout(() => {
              storeState(this, false);
              this._storeTimeoutId = null;
            }, this._storeTimeout);
          }
        }
      };
      doc4.on("update", this._storeUpdate);
      this.destroy = this.destroy.bind(this);
      doc4.on("destroy", this.destroy);
    }
    destroy() {
      if (this._storeTimeoutId) {
        clearTimeout(this._storeTimeoutId);
      }
      this.doc.off("update", this._storeUpdate);
      this.doc.off("destroy", this.destroy);
      this._destroyed = true;
      return this._db.then((db) => {
        db.close();
      });
    }
    /**
     * Destroys this instance and removes all data from indexeddb.
     *
     * @return {Promise<void>}
     */
    clearData() {
      return this.destroy().then(() => {
        deleteDB(this.name);
      });
    }
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @return {Promise<String | number | ArrayBuffer | Date | any>}
     */
    get(key) {
      return this._db.then((db) => {
        const [custom] = transact2(db, [customStoreName], "readonly");
        return get(custom, key);
      });
    }
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @param {String | number | ArrayBuffer | Date} value
     * @return {Promise<String | number | ArrayBuffer | Date>}
     */
    set(key, value) {
      return this._db.then((db) => {
        const [custom] = transact2(db, [customStoreName]);
        return put(custom, value, key);
      });
    }
    /**
     * @param {String | number | ArrayBuffer | Date} key
     * @return {Promise<undefined>}
     */
    del(key) {
      return this._db.then((db) => {
        const [custom] = transact2(db, [customStoreName]);
        return del(custom, key);
      });
    }
  };

  // stores/crdtState.ts
  function isTodoItem(item) {
    return "listId" in item && typeof item.listId === "string";
  }
  var todoLists = writable();
  var todoItems = writable();
  var yTodoLists = writable();
  var yTodoItems = writable();

  // svelte/StateManagement.svelte
  var { window: window_1 } = globals;
  function create_fragment40(ctx) {
    let mounted;
    let dispose;
    const block = {
      c: noop3,
      l: noop3,
      m: function mount(target, anchor) {
        if (!mounted) {
          dispose = [
            listen_dev(
              window_1,
              "popstate",
              /*syncAppStateWithUrl*/
              ctx[3],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              window_1,
              "storage",
              /*storage_handler*/
              ctx[7],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: noop3,
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment40.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var doc3 = new Doc();
  var clientDocumentUpdatedKey = "clientDocumentUpdated";
  function getBase64Document() {
    const binaryDocument = encodeStateAsUpdate(doc3);
    const base64Document = fromUint8Array(binaryDocument);
    return base64Document;
  }
  function notifyUserSyncingIsInProgress() {
    syncState.set("Syncing");
    setTimeout(
      () => {
        if (get_store_value(syncState) !== "Synced") {
          syncState.set("Not Synced");
        }
      },
      1e3
    );
  }
  async function reconnectLiveViewIfDisconnected() {
    const connected = await useIsConnected({});
    if (!connected) {
      syncState.set("Not Synced");
      return;
    }
    const live = get_store_value(liveView);
    if (!live || live.__isDisconnected) {
      window.location.reload();
    }
  }
  function confirmSynced(response) {
    if (response.ok) {
      syncState.set("Synced");
    }
  }
  async function syncDocumentToServer(live) {
    todoLists.set(get_store_value(yTodoLists).toJSON());
    todoItems.set(get_store_value(yTodoItems).toJSON());
    notifyUserSyncingIsInProgress();
    localStorage.setItem(clientDocumentUpdatedKey, JSON.stringify(Date.now()));
    live == null ? void 0 : live.pushEvent("client_document_updated", { document: getBase64Document() }, confirmSynced);
    reconnectLiveViewIfDisconnected();
  }
  var syncStateKey = "syncState";
  function instance40($$self, $$props, $$invalidate) {
    let $syncState;
    let $selectedListId;
    let $urlHash;
    let $todoLists;
    let $serverDocument;
    let $liveView;
    let $yTodoItems;
    let $todoItems;
    let $yTodoLists;
    validate_store(syncState, "syncState");
    component_subscribe($$self, syncState, ($$value) => $$invalidate(0, $syncState = $$value));
    validate_store(selectedListId, "selectedListId");
    component_subscribe($$self, selectedListId, ($$value) => $$invalidate(8, $selectedListId = $$value));
    validate_store(urlHash, "urlHash");
    component_subscribe($$self, urlHash, ($$value) => $$invalidate(9, $urlHash = $$value));
    validate_store(todoLists, "todoLists");
    component_subscribe($$self, todoLists, ($$value) => $$invalidate(10, $todoLists = $$value));
    validate_store(serverDocument, "serverDocument");
    component_subscribe($$self, serverDocument, ($$value) => $$invalidate(5, $serverDocument = $$value));
    validate_store(liveView, "liveView");
    component_subscribe($$self, liveView, ($$value) => $$invalidate(6, $liveView = $$value));
    validate_store(yTodoItems, "yTodoItems");
    component_subscribe($$self, yTodoItems, ($$value) => $$invalidate(11, $yTodoItems = $$value));
    validate_store(todoItems, "todoItems");
    component_subscribe($$self, todoItems, ($$value) => $$invalidate(12, $todoItems = $$value));
    validate_store(yTodoLists, "yTodoLists");
    component_subscribe($$self, yTodoLists, ($$value) => $$invalidate(13, $yTodoLists = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("StateManagement", slots, []);
    let { isSyncedToIndexedDb } = $$props;
    const stateMap = doc3.getMap();
    let indexedDbProvider;
    function syncWithIndexedDb() {
      $$invalidate(1, indexedDbProvider = new IndexeddbPersistence(indexedDBName, doc3));
      indexedDbProvider.on("synced", () => {
        set_store_value(yTodoLists, $yTodoLists = stateMap.get("lists"), $yTodoLists);
        set_store_value(yTodoItems, $yTodoItems = stateMap.get("todos"), $yTodoItems);
        set_store_value(todoLists, $todoLists = $yTodoLists ? $yTodoLists.toJSON() : [], $todoLists);
        set_store_value(todoItems, $todoItems = $yTodoItems ? $yTodoItems.toJSON() : [], $todoItems);
        $$invalidate(4, isSyncedToIndexedDb = true);
      });
    }
    function syncServerToClient({ event, document: document2 }) {
      if (event === "mount")
        return;
      if (!document2) {
        if (!$yTodoLists && !$yTodoItems) {
          set_store_value(yTodoLists, $yTodoLists = new YArray(), $yTodoLists);
          stateMap.set("lists", $yTodoLists);
          set_store_value(yTodoItems, $yTodoItems = new YArray(), $yTodoItems);
          stateMap.set("todos", $yTodoItems);
        }
        $liveView.pushEvent("create_server_document", { document: getBase64Document() }, confirmSynced);
        return;
      }
      applyUpdate(doc3, toUint8Array(document2));
      set_store_value(yTodoLists, $yTodoLists = stateMap.get("lists"), $yTodoLists);
      set_store_value(yTodoItems, $yTodoItems = stateMap.get("todos"), $yTodoItems);
      set_store_value(todoLists, $todoLists = $yTodoLists.toJSON(), $todoLists);
      set_store_value(todoItems, $todoItems = $yTodoItems.toJSON(), $todoItems);
      if (event === "request_server_document") {
        syncDocumentToServer($liveView);
      }
      syncAppStateWithUrl();
    }
    onMount(() => {
      const previousSyncState = getParsedValueFromLocalStorage(syncStateKey, "string", $syncState);
      set_store_value(
        syncState,
        $syncState = previousSyncState === "Syncing" ? "Not Synced" : previousSyncState,
        $syncState
      );
    });
    onMount(() => {
      syncWithIndexedDb();
    });
    function syncAppStateWithUrl() {
      const url = new URL(window.location.href);
      const hash2 = url.hash;
      switch (hash2) {
        case "#about":
          set_store_value(urlHash, $urlHash = "about", $urlHash);
          set_store_value(selectedListId, $selectedListId = "", $selectedListId);
          history.replaceState({}, "", "/app");
          history.pushState({}, "", "/app#about");
          break;
        default:
          const listId = hash2.replace("#", "");
          const list = $todoLists.find((list2) => list2.id === listId);
          if (list) {
            set_store_value(urlHash, $urlHash = "listId", $urlHash);
            set_store_value(selectedListId, $selectedListId = listId, $selectedListId);
            history.replaceState({}, "", "/app");
            history.pushState({}, "", `/app#${listId}`);
          } else {
            set_store_value(urlHash, $urlHash = "", $urlHash);
            set_store_value(selectedListId, $selectedListId = "", $selectedListId);
            history.replaceState({}, "", "/app");
          }
          break;
      }
    }
    $$self.$$.on_mount.push(function() {
      if (isSyncedToIndexedDb === void 0 && !("isSyncedToIndexedDb" in $$props || $$self.$$.bound[$$self.$$.props["isSyncedToIndexedDb"]])) {
        console.warn("<StateManagement> was created without expected prop 'isSyncedToIndexedDb'");
      }
    });
    const writable_props = ["isSyncedToIndexedDb"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<StateManagement> was created with unknown prop '${key}'`);
    });
    const storage_handler = async ({ key, newValue }) => {
      switch (key) {
        case clientDocumentUpdatedKey:
          await indexedDbProvider.destroy();
          syncWithIndexedDb();
          break;
        case syncStateKey:
          set_store_value(syncState, $syncState = JSON.parse(newValue), $syncState);
          break;
      }
    };
    $$self.$$set = ($$props2) => {
      if ("isSyncedToIndexedDb" in $$props2)
        $$invalidate(4, isSyncedToIndexedDb = $$props2.isSyncedToIndexedDb);
    };
    $$self.$capture_state = () => ({
      get: get_store_value,
      fromUint8Array,
      useIsConnected,
      doc: doc3,
      clientDocumentUpdatedKey,
      getBase64Document,
      notifyUserSyncingIsInProgress,
      reconnectLiveViewIfDisconnected,
      confirmSynced,
      syncDocumentToServer,
      onMount,
      toUint8Array,
      IndexeddbPersistence,
      Y: yjs_exports,
      selectedListId,
      urlHash,
      todoLists,
      todoItems,
      yTodoLists,
      yTodoItems,
      liveView,
      serverDocument,
      syncState,
      getParsedValueFromLocalStorage,
      indexedDBName,
      isSyncedToIndexedDb,
      stateMap,
      syncStateKey,
      indexedDbProvider,
      syncWithIndexedDb,
      syncServerToClient,
      syncAppStateWithUrl,
      $syncState,
      $selectedListId,
      $urlHash,
      $todoLists,
      $serverDocument,
      $liveView,
      $yTodoItems,
      $todoItems,
      $yTodoLists
    });
    $$self.$inject_state = ($$props2) => {
      if ("isSyncedToIndexedDb" in $$props2)
        $$invalidate(4, isSyncedToIndexedDb = $$props2.isSyncedToIndexedDb);
      if ("indexedDbProvider" in $$props2)
        $$invalidate(1, indexedDbProvider = $$props2.indexedDbProvider);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*isSyncedToIndexedDb, $liveView*/
      80) {
        $:
          if (isSyncedToIndexedDb && $liveView) {
            $liveView.pushEvent("request_server_document");
          }
      }
      if ($$self.$$.dirty & /*isSyncedToIndexedDb, $liveView, $serverDocument*/
      112) {
        $:
          if (isSyncedToIndexedDb && $liveView) {
            syncServerToClient($serverDocument);
          }
      }
      if ($$self.$$.dirty & /*isSyncedToIndexedDb*/
      16) {
        $:
          if (isSyncedToIndexedDb)
            syncAppStateWithUrl();
      }
      if ($$self.$$.dirty & /*isSyncedToIndexedDb*/
      16) {
        $:
          if (isSyncedToIndexedDb)
            history.scrollRestoration = "auto";
      }
      if ($$self.$$.dirty & /*isSyncedToIndexedDb, $syncState*/
      17) {
        $:
          if (isSyncedToIndexedDb) {
            localStorage.setItem(syncStateKey, JSON.stringify($syncState));
          }
      }
    };
    return [
      $syncState,
      indexedDbProvider,
      syncWithIndexedDb,
      syncAppStateWithUrl,
      isSyncedToIndexedDb,
      $serverDocument,
      $liveView,
      storage_handler
    ];
  }
  var StateManagement = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance40, create_fragment40, safe_not_equal, { isSyncedToIndexedDb: 4 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "StateManagement",
        options,
        id: create_fragment40.name
      });
    }
    get isSyncedToIndexedDb() {
      throw new Error("<StateManagement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isSyncedToIndexedDb(value) {
      throw new Error("<StateManagement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var StateManagement_default = StateManagement;

  // svelte/SyncStatusBadge.svelte
  var file9 = "svelte/SyncStatusBadge.svelte";
  function create_else_block2(ctx) {
    let circlealert;
    let current;
    circlealert = new circle_alert_default({
      props: { class: "w-3 h-3" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(circlealert.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(circlealert.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(circlealert, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(circlealert.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(circlealert.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(circlealert, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block2.name,
      type: "else",
      source: "(25:4) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block_12(ctx) {
    let refreshcw;
    let current;
    refreshcw = new refresh_cw_default({
      props: { class: "w-3 h-3 animate-spin" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(refreshcw.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(refreshcw.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(refreshcw, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(refreshcw.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(refreshcw.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(refreshcw, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_12.name,
      type: "if",
      source: "(23:39) ",
      ctx
    });
    return block;
  }
  function create_if_block5(ctx) {
    let circlecheckbig;
    let current;
    circlecheckbig = new circle_check_big_default({
      props: { class: "w-3 h-3" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(circlecheckbig.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(circlecheckbig.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(circlecheckbig, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(circlecheckbig.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(circlecheckbig.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(circlecheckbig, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block5.name,
      type: "if",
      source: '(21:4) {#if $syncState === \\"Synced\\"}',
      ctx
    });
    return block;
  }
  function create_fragment41(ctx) {
    let button;
    let div;
    let current_block_type_index;
    let if_block;
    let t0;
    let t1;
    let button_disabled_value;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block5, create_if_block_12, create_else_block2];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*$syncState*/
        ctx2[0] === "Synced"
      )
        return 0;
      if (
        /*$syncState*/
        ctx2[0] === "Syncing"
      )
        return 1;
      return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
      c: function create7() {
        button = element("button");
        div = element("div");
        if_block.c();
        t0 = space();
        t1 = text(
          /*$syncState*/
          ctx[0]
        );
        this.h();
      },
      l: function claim(nodes) {
        button = claim_element(nodes, "BUTTON", {
          "aria-label": true,
          title: true,
          class: true
        });
        var button_nodes = children(button);
        div = claim_element(button_nodes, "DIV", { class: true });
        var div_nodes = children(div);
        if_block.l(div_nodes);
        t0 = claim_space(div_nodes);
        t1 = claim_text(
          div_nodes,
          /*$syncState*/
          ctx[0]
        );
        div_nodes.forEach(detach_dev);
        button_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div, "class", "flex gap-[5px] items-center");
        add_location(div, file9, 21, 2, 719);
        attr_dev(button, "aria-label", "Sync Status.");
        attr_dev(button, "title", "Click to force sync.");
        attr_dev(button, "class", "badge w-[113px] border border-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        button.disabled = button_disabled_value = /*$syncState*/
        ctx[0] === "Syncing";
        toggle_class(
          button,
          "badge-accent",
          /*$syncState*/
          ctx[0] === "Synced"
        );
        toggle_class(
          button,
          "badge-primary",
          /*$syncState*/
          ctx[0] === "Syncing"
        );
        toggle_class(
          button,
          "badge-secondary",
          /*$syncState*/
          ctx[0] === "Not Synced"
        );
        add_location(button, file9, 8, 0, 264);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button, anchor);
        append_hydration_dev(button, div);
        if_blocks[current_block_type_index].m(div, null);
        append_hydration_dev(div, t0);
        append_hydration_dev(div, t1);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[2],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index !== previous_block_index) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
          }
          transition_in(if_block, 1);
          if_block.m(div, t0);
        }
        if (!current || dirty & /*$syncState*/
        1)
          set_data_dev(
            t1,
            /*$syncState*/
            ctx2[0]
          );
        if (!current || dirty & /*$syncState*/
        1 && button_disabled_value !== (button_disabled_value = /*$syncState*/
        ctx2[0] === "Syncing")) {
          prop_dev(button, "disabled", button_disabled_value);
        }
        if (!current || dirty & /*$syncState*/
        1) {
          toggle_class(
            button,
            "badge-accent",
            /*$syncState*/
            ctx2[0] === "Synced"
          );
        }
        if (!current || dirty & /*$syncState*/
        1) {
          toggle_class(
            button,
            "badge-primary",
            /*$syncState*/
            ctx2[0] === "Syncing"
          );
        }
        if (!current || dirty & /*$syncState*/
        1) {
          toggle_class(
            button,
            "badge-secondary",
            /*$syncState*/
            ctx2[0] === "Not Synced"
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button);
        }
        if_blocks[current_block_type_index].d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment41.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance41($$self, $$props, $$invalidate) {
    let $syncState;
    let $liveView;
    validate_store(syncState, "syncState");
    component_subscribe($$self, syncState, ($$value) => $$invalidate(0, $syncState = $$value));
    validate_store(liveView, "liveView");
    component_subscribe($$self, liveView, ($$value) => $$invalidate(1, $liveView = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("SyncStatusBadge", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<SyncStatusBadge> was created with unknown prop '${key}'`);
    });
    const click_handler = () => syncDocumentToServer($liveView);
    $$self.$capture_state = () => ({
      CircleAlert: circle_alert_default,
      CircleCheckBig: circle_check_big_default,
      RefreshCw: refresh_cw_default,
      liveView,
      syncState,
      syncDocumentToServer,
      $syncState,
      $liveView
    });
    return [$syncState, $liveView, click_handler];
  }
  var SyncStatusBadge = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance41, create_fragment41, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "SyncStatusBadge",
        options,
        id: create_fragment41.name
      });
    }
  };
  var SyncStatusBadge_default = SyncStatusBadge;

  // svelte/ThemeButton.svelte
  var ThemeButton_exports = {};
  __export(ThemeButton_exports, {
    default: () => ThemeButton_default
  });

  // stores/currentTheme.ts
  var currentTheme = writable("system");

  // svelte/ThemeChoiceButton.svelte
  var ThemeChoiceButton_exports = {};
  __export(ThemeChoiceButton_exports, {
    default: () => ThemeChoiceButton_default,
    setTheme: () => setTheme
  });
  var file10 = "svelte/ThemeChoiceButton.svelte";
  function create_if_block_3(ctx) {
    let moon;
    let current;
    moon = new moon_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(moon.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(moon.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(moon, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(moon.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(moon.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(moon, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_3.name,
      type: "if",
      source: "(29:31) ",
      ctx
    });
    return block;
  }
  function create_if_block_2(ctx) {
    let sun;
    let current;
    sun = new sun_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(sun.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(sun.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(sun, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(sun.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(sun.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(sun, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_2.name,
      type: "if",
      source: "(27:32) ",
      ctx
    });
    return block;
  }
  function create_if_block_13(ctx) {
    let laptop;
    let current;
    laptop = new laptop_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(laptop.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(laptop.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(laptop, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(laptop.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(laptop.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(laptop, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_13.name,
      type: "if",
      source: '(25:4) {#if theme === \\"system\\"}',
      ctx
    });
    return block;
  }
  function create_if_block6(ctx) {
    let check;
    let current;
    check = new check_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(check.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(check.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(check, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(check.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(check.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(check, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block6.name,
      type: "if",
      source: "(35:4) {#if theme === $currentTheme}",
      ctx
    });
    return block;
  }
  function create_fragment42(ctx) {
    let li;
    let button;
    let current_block_type_index;
    let if_block0;
    let t0;
    let span;
    let t1;
    let t2;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block_13, create_if_block_2, create_if_block_3];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*theme*/
        ctx2[1] === "system"
      )
        return 0;
      if (
        /*theme*/
        ctx2[1] === "light"
      )
        return 1;
      if (
        /*theme*/
        ctx2[1] === "dark"
      )
        return 2;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, -1))) {
      if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    let if_block1 = (
      /*theme*/
      ctx[1] === /*$currentTheme*/
      ctx[2] && create_if_block6(ctx)
    );
    const block = {
      c: function create7() {
        li = element("li");
        button = element("button");
        if (if_block0)
          if_block0.c();
        t0 = space();
        span = element("span");
        t1 = text(
          /*theme*/
          ctx[1]
        );
        t2 = space();
        if (if_block1)
          if_block1.c();
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", {});
        var li_nodes = children(li);
        button = claim_element(li_nodes, "BUTTON", { "data-focusindex": true, class: true });
        var button_nodes = children(button);
        if (if_block0)
          if_block0.l(button_nodes);
        t0 = claim_space(button_nodes);
        span = claim_element(button_nodes, "SPAN", { class: true });
        var span_nodes = children(span);
        t1 = claim_text(
          span_nodes,
          /*theme*/
          ctx[1]
        );
        span_nodes.forEach(detach_dev);
        t2 = claim_space(button_nodes);
        if (if_block1)
          if_block1.l(button_nodes);
        button_nodes.forEach(detach_dev);
        li_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(span, "class", "first-letter:capitalize");
        add_location(span, file10, 37, 4, 961);
        attr_dev(
          button,
          "data-focusindex",
          /*focusIndex*/
          ctx[0]
        );
        attr_dev(button, "class", "focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100");
        add_location(button, file10, 24, 2, 579);
        add_location(li, file10, 23, 0, 572);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
        append_hydration_dev(li, button);
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(button, null);
        }
        append_hydration_dev(button, t0);
        append_hydration_dev(button, span);
        append_hydration_dev(span, t1);
        append_hydration_dev(button, t2);
        if (if_block1)
          if_block1.m(button, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[3],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index !== previous_block_index) {
          if (if_block0) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block0 = if_blocks[current_block_type_index];
            if (!if_block0) {
              if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block0.c();
            } else {
            }
            transition_in(if_block0, 1);
            if_block0.m(button, t0);
          } else {
            if_block0 = null;
          }
        }
        if (!current || dirty & /*theme*/
        2)
          set_data_dev(
            t1,
            /*theme*/
            ctx2[1]
          );
        if (
          /*theme*/
          ctx2[1] === /*$currentTheme*/
          ctx2[2]
        ) {
          if (if_block1) {
            if (dirty & /*theme, $currentTheme*/
            6) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block6(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(button, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        if (!current || dirty & /*focusIndex*/
        1) {
          attr_dev(
            button,
            "data-focusindex",
            /*focusIndex*/
            ctx2[0]
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d();
        }
        if (if_block1)
          if_block1.d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment42.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function setTheme(theme) {
    currentTheme.set(theme);
    if (theme === "system") {
      document.documentElement.removeAttribute("data-theme");
      localStorage.removeItem("theme");
      return;
    }
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", JSON.stringify(theme));
  }
  function instance42($$self, $$props, $$invalidate) {
    let $currentTheme;
    validate_store(currentTheme, "currentTheme");
    component_subscribe($$self, currentTheme, ($$value) => $$invalidate(2, $currentTheme = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ThemeChoiceButton", slots, []);
    let { focusIndex } = $$props;
    let { theme } = $$props;
    $$self.$$.on_mount.push(function() {
      if (focusIndex === void 0 && !("focusIndex" in $$props || $$self.$$.bound[$$self.$$.props["focusIndex"]])) {
        console.warn("<ThemeChoiceButton> was created without expected prop 'focusIndex'");
      }
      if (theme === void 0 && !("theme" in $$props || $$self.$$.bound[$$self.$$.props["theme"]])) {
        console.warn("<ThemeChoiceButton> was created without expected prop 'theme'");
      }
    });
    const writable_props = ["focusIndex", "theme"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ThemeChoiceButton> was created with unknown prop '${key}'`);
    });
    const click_handler = () => setTheme(theme);
    $$self.$$set = ($$props2) => {
      if ("focusIndex" in $$props2)
        $$invalidate(0, focusIndex = $$props2.focusIndex);
      if ("theme" in $$props2)
        $$invalidate(1, theme = $$props2.theme);
    };
    $$self.$capture_state = () => ({
      setTheme,
      Check: check_default,
      Laptop: laptop_default,
      Moon: moon_default,
      Sun: sun_default,
      currentTheme,
      focusIndex,
      theme,
      $currentTheme
    });
    $$self.$inject_state = ($$props2) => {
      if ("focusIndex" in $$props2)
        $$invalidate(0, focusIndex = $$props2.focusIndex);
      if ("theme" in $$props2)
        $$invalidate(1, theme = $$props2.theme);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [focusIndex, theme, $currentTheme, click_handler];
  }
  var ThemeChoiceButton = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance42, create_fragment42, safe_not_equal, { focusIndex: 0, theme: 1 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ThemeChoiceButton",
        options,
        id: create_fragment42.name
      });
    }
    get focusIndex() {
      throw new Error("<ThemeChoiceButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set focusIndex(value) {
      throw new Error("<ThemeChoiceButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get theme() {
      throw new Error("<ThemeChoiceButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set theme(value) {
      throw new Error("<ThemeChoiceButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ThemeChoiceButton_default = ThemeChoiceButton;

  // svelte/ThemeButton.svelte
  var file11 = "svelte/ThemeButton.svelte";
  function create_if_block7(ctx) {
    let div;
    let p;
    let textContent = "Theme";
    let t1;
    let ul;
    let themechoicebutton0;
    let t2;
    let themechoicebutton1;
    let t3;
    let themechoicebutton2;
    let focusTrap_action;
    let div_intro;
    let current;
    let mounted;
    let dispose;
    themechoicebutton0 = new ThemeChoiceButton_default({
      props: { focusIndex: 0, theme: "system" },
      $$inline: true
    });
    themechoicebutton1 = new ThemeChoiceButton_default({
      props: { focusIndex: 1, theme: "light" },
      $$inline: true
    });
    themechoicebutton2 = new ThemeChoiceButton_default({
      props: { focusIndex: 2, theme: "dark" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div = element("div");
        p = element("p");
        p.textContent = textContent;
        t1 = space();
        ul = element("ul");
        create_component(themechoicebutton0.$$.fragment);
        t2 = space();
        create_component(themechoicebutton1.$$.fragment);
        t3 = space();
        create_component(themechoicebutton2.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        p = claim_element(div_nodes, "P", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(p) !== "svelte-z8k99v")
          p.textContent = textContent;
        t1 = claim_space(div_nodes);
        ul = claim_element(div_nodes, "UL", { class: true });
        var ul_nodes = children(ul);
        claim_component(themechoicebutton0.$$.fragment, ul_nodes);
        t2 = claim_space(ul_nodes);
        claim_component(themechoicebutton1.$$.fragment, ul_nodes);
        t3 = claim_space(ul_nodes);
        claim_component(themechoicebutton2.$$.fragment, ul_nodes);
        ul_nodes.forEach(detach_dev);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(p, "class", "px-4 py-2 font-bold border-b border-neutral rounded-none mb-1.5");
        add_location(p, file11, 58, 6, 1524);
        attr_dev(ul, "class", "w-32");
        add_location(ul, file11, 60, 6, 1616);
        attr_dev(div, "class", "menu bg-base-200 border border-neutral rounded-box absolute right-0");
        add_location(div, file11, 50, 4, 1285);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, p);
        append_hydration_dev(div, t1);
        append_hydration_dev(div, ul);
        mount_component(themechoicebutton0, ul, null);
        append_hydration_dev(ul, t2);
        mount_component(themechoicebutton1, ul, null);
        append_hydration_dev(ul, t3);
        mount_component(themechoicebutton2, ul, null);
        current = true;
        if (!mounted) {
          dispose = action_destroyer(focusTrap_action = focusTrap.call(null, div, {
            focusFirstElement: (
              /*focusFirstElement*/
              ctx[2]
            ),
            onEscape: (
              /*focusTrap_function*/
              ctx[5]
            )
          }));
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        if (focusTrap_action && is_function(focusTrap_action.update) && dirty & /*focusFirstElement, $openedMenuId*/
        6)
          focusTrap_action.update.call(null, {
            focusFirstElement: (
              /*focusFirstElement*/
              ctx2[2]
            ),
            onEscape: (
              /*focusTrap_function*/
              ctx2[5]
            )
          });
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(themechoicebutton0.$$.fragment, local);
        transition_in(themechoicebutton1.$$.fragment, local);
        transition_in(themechoicebutton2.$$.fragment, local);
        if (local) {
          if (!div_intro) {
            add_render_callback(() => {
              div_intro = create_in_transition(div, scale, { duration: 100 });
              div_intro.start();
            });
          }
        }
        current = true;
      },
      o: function outro(local) {
        transition_out(themechoicebutton0.$$.fragment, local);
        transition_out(themechoicebutton1.$$.fragment, local);
        transition_out(themechoicebutton2.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        destroy_component(themechoicebutton0);
        destroy_component(themechoicebutton1);
        destroy_component(themechoicebutton2);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block7.name,
      type: "if",
      source: "(43:2) {#if $openedMenuId === themeMenuId}",
      ctx
    });
    return block;
  }
  function create_fragment43(ctx) {
    let div;
    let button;
    let swatchbook;
    let t;
    let div_class_value;
    let current;
    let mounted;
    let dispose;
    swatchbook = new swatch_book_default({ $$inline: true });
    let if_block = (
      /*$openedMenuId*/
      ctx[1] === themeMenuId && create_if_block7(ctx)
    );
    const block = {
      c: function create7() {
        div = element("div");
        button = element("button");
        create_component(swatchbook.$$.fragment);
        t = space();
        if (if_block)
          if_block.c();
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        button = claim_element(div_nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button_nodes = children(button);
        claim_component(swatchbook.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        t = claim_space(div_nodes);
        if (if_block)
          if_block.l(div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button, "class", "my-1 btn btn-circle btn-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button, "aria-label", "Theme Selector.");
        attr_dev(button, "title", "Click to change the theme.");
        add_location(button, file11, 32, 2, 758);
        attr_dev(div, "class", div_class_value = /*menuClass*/
        ctx[0] + " relative");
        add_location(div, file11, 31, 0, 721);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, button);
        mount_component(swatchbook, button, null);
        append_hydration_dev(div, t);
        if (if_block)
          if_block.m(div, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "click",
              /*click_handler*/
              ctx[3],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              "keydown",
              /*keydown_handler*/
              ctx[4],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*$openedMenuId*/
          ctx2[1] === themeMenuId
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*$openedMenuId*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block7(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        if (!current || dirty & /*menuClass*/
        1 && div_class_value !== (div_class_value = /*menuClass*/
        ctx2[0] + " relative")) {
          attr_dev(div, "class", div_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(swatchbook.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(swatchbook.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        destroy_component(swatchbook);
        if (if_block)
          if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment43.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var themeMenuId = "theme-menu-id";
  function instance43($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $currentTheme;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(1, $openedMenuId = $$value));
    validate_store(currentTheme, "currentTheme");
    component_subscribe($$self, currentTheme, ($$value) => $$invalidate(6, $currentTheme = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ThemeButton", slots, []);
    let { menuClass: menuClass2 } = $$props;
    let focusFirstElement = false;
    onMount(() => {
      const theme = JSON.parse(localStorage.getItem("theme"));
      if (!theme) {
        set_store_value(currentTheme, $currentTheme = "system", $currentTheme);
      } else {
        set_store_value(currentTheme, $currentTheme = theme, $currentTheme);
      }
    });
    $$self.$$.on_mount.push(function() {
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<ThemeButton> was created without expected prop 'menuClass'");
      }
    });
    const writable_props = ["menuClass"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ThemeButton> was created with unknown prop '${key}'`);
    });
    const click_handler = () => set_store_value(openedMenuId, $openedMenuId = $openedMenuId === themeMenuId ? "" : themeMenuId, $openedMenuId);
    const keydown_handler = (event) => {
      if (event.key === "Enter" || event.key === " ") {
        $$invalidate(2, focusFirstElement = true);
      }
    };
    const focusTrap_function = () => set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    $$self.$$set = ($$props2) => {
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
    };
    $$self.$capture_state = () => ({
      onMount,
      scale,
      SwatchBook: swatch_book_default,
      focusTrap,
      openedMenuId,
      currentTheme,
      ThemeChoiceButton: ThemeChoiceButton_default,
      menuClass: menuClass2,
      themeMenuId,
      focusFirstElement,
      $openedMenuId,
      $currentTheme
    });
    $$self.$inject_state = ($$props2) => {
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
      if ("focusFirstElement" in $$props2)
        $$invalidate(2, focusFirstElement = $$props2.focusFirstElement);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*$openedMenuId*/
      2) {
        $:
          if ($openedMenuId !== themeMenuId) {
            $$invalidate(2, focusFirstElement = false);
          }
      }
    };
    return [
      menuClass2,
      $openedMenuId,
      focusFirstElement,
      click_handler,
      keydown_handler,
      focusTrap_function
    ];
  }
  var ThemeButton = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance43, create_fragment43, safe_not_equal, { menuClass: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ThemeButton",
        options,
        id: create_fragment43.name
      });
    }
    get menuClass() {
      throw new Error("<ThemeButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<ThemeButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ThemeButton_default = ThemeButton;

  // svelte/Header.svelte
  var file12 = "svelte/Header.svelte";
  function create_fragment44(ctx) {
    let scrolling = false;
    let clear_scrolling = () => {
      scrolling = false;
    };
    let scrolling_timeout;
    let div3;
    let div2;
    let div0;
    let syncstatusbadge;
    let t0;
    let sessionsbadge;
    let t1;
    let div1;
    let sharebutton;
    let t2;
    let themebutton;
    let t3;
    let accountbutton;
    let updating_isClientStateRestored;
    let current;
    let mounted;
    let dispose;
    add_render_callback(
      /*onwindowscroll*/
      ctx[5]
    );
    syncstatusbadge = new SyncStatusBadge_default({ $$inline: true });
    sessionsbadge = new SessionsBadge_default({ $$inline: true });
    sharebutton = new ShareButton_default({ $$inline: true });
    themebutton = new ThemeButton_default({
      props: { menuClass: (
        /*menuClass*/
        ctx[3]
      ) },
      $$inline: true
    });
    function accountbutton_isClientStateRestored_binding(value) {
      ctx[6](value);
    }
    let accountbutton_props = {
      currentUserEmail: (
        /*currentUserEmail*/
        ctx[1]
      ),
      serviceWorkerVersion: (
        /*serviceWorkerVersion*/
        ctx[2]
      ),
      menuClass: (
        /*menuClass*/
        ctx[3]
      )
    };
    if (
      /*isClientStateRestored*/
      ctx[0] !== void 0
    ) {
      accountbutton_props.isClientStateRestored = /*isClientStateRestored*/
      ctx[0];
    }
    accountbutton = new AccountButton_default({
      props: accountbutton_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(accountbutton, "isClientStateRestored", accountbutton_isClientStateRestored_binding));
    const block = {
      c: function create7() {
        div3 = element("div");
        div2 = element("div");
        div0 = element("div");
        create_component(syncstatusbadge.$$.fragment);
        t0 = space();
        create_component(sessionsbadge.$$.fragment);
        t1 = space();
        div1 = element("div");
        create_component(sharebutton.$$.fragment);
        t2 = space();
        create_component(themebutton.$$.fragment);
        t3 = space();
        create_component(accountbutton.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div3 = claim_element(nodes, "DIV", { class: true });
        var div3_nodes = children(div3);
        div2 = claim_element(div3_nodes, "DIV", { class: true });
        var div2_nodes = children(div2);
        div0 = claim_element(div2_nodes, "DIV", {});
        var div0_nodes = children(div0);
        claim_component(syncstatusbadge.$$.fragment, div0_nodes);
        t0 = claim_space(div0_nodes);
        claim_component(sessionsbadge.$$.fragment, div0_nodes);
        div0_nodes.forEach(detach_dev);
        t1 = claim_space(div2_nodes);
        div1 = claim_element(div2_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        claim_component(sharebutton.$$.fragment, div1_nodes);
        t2 = claim_space(div1_nodes);
        claim_component(themebutton.$$.fragment, div1_nodes);
        t3 = claim_space(div1_nodes);
        claim_component(accountbutton.$$.fragment, div1_nodes);
        div1_nodes.forEach(detach_dev);
        div2_nodes.forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        add_location(div0, file12, 22, 4, 655);
        attr_dev(div1, "class", "flex items-center gap-3");
        add_location(div1, file12, 27, 4, 727);
        attr_dev(div2, "class", "max-w-2xl mx-auto px-2 md:p-0 flex justify-between items-center gap-3");
        add_location(div2, file12, 21, 2, 567);
        attr_dev(div3, "class", "sticky top-0 left-0 w-full pt-2 pb-1 z-10 bg-base-100 border-neutral");
        toggle_class(
          div3,
          "border-b",
          /*scrollY*/
          ctx[4] > 0
        );
        add_location(div3, file12, 17, 0, 448);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div3, anchor);
        append_hydration_dev(div3, div2);
        append_hydration_dev(div2, div0);
        mount_component(syncstatusbadge, div0, null);
        append_hydration_dev(div0, t0);
        mount_component(sessionsbadge, div0, null);
        append_hydration_dev(div2, t1);
        append_hydration_dev(div2, div1);
        mount_component(sharebutton, div1, null);
        append_hydration_dev(div1, t2);
        mount_component(themebutton, div1, null);
        append_hydration_dev(div1, t3);
        mount_component(accountbutton, div1, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(window, "scroll", () => {
            scrolling = true;
            clearTimeout(scrolling_timeout);
            scrolling_timeout = setTimeout(clear_scrolling, 100);
            ctx[5]();
          });
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*scrollY*/
        16 && !scrolling) {
          scrolling = true;
          clearTimeout(scrolling_timeout);
          scrollTo(
            window.pageXOffset,
            /*scrollY*/
            ctx2[4]
          );
          scrolling_timeout = setTimeout(clear_scrolling, 100);
        }
        const themebutton_changes = {};
        if (dirty & /*menuClass*/
        8)
          themebutton_changes.menuClass = /*menuClass*/
          ctx2[3];
        themebutton.$set(themebutton_changes);
        const accountbutton_changes = {};
        if (dirty & /*currentUserEmail*/
        2)
          accountbutton_changes.currentUserEmail = /*currentUserEmail*/
          ctx2[1];
        if (dirty & /*serviceWorkerVersion*/
        4)
          accountbutton_changes.serviceWorkerVersion = /*serviceWorkerVersion*/
          ctx2[2];
        if (dirty & /*menuClass*/
        8)
          accountbutton_changes.menuClass = /*menuClass*/
          ctx2[3];
        if (!updating_isClientStateRestored && dirty & /*isClientStateRestored*/
        1) {
          updating_isClientStateRestored = true;
          accountbutton_changes.isClientStateRestored = /*isClientStateRestored*/
          ctx2[0];
          add_flush_callback(() => updating_isClientStateRestored = false);
        }
        accountbutton.$set(accountbutton_changes);
        if (!current || dirty & /*scrollY*/
        16) {
          toggle_class(
            div3,
            "border-b",
            /*scrollY*/
            ctx2[4] > 0
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(syncstatusbadge.$$.fragment, local);
        transition_in(sessionsbadge.$$.fragment, local);
        transition_in(sharebutton.$$.fragment, local);
        transition_in(themebutton.$$.fragment, local);
        transition_in(accountbutton.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(syncstatusbadge.$$.fragment, local);
        transition_out(sessionsbadge.$$.fragment, local);
        transition_out(sharebutton.$$.fragment, local);
        transition_out(themebutton.$$.fragment, local);
        transition_out(accountbutton.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div3);
        }
        destroy_component(syncstatusbadge);
        destroy_component(sessionsbadge);
        destroy_component(sharebutton);
        destroy_component(themebutton);
        destroy_component(accountbutton);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment44.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance44($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Header", slots, []);
    let { currentUserEmail } = $$props;
    let { serviceWorkerVersion } = $$props;
    let { isClientStateRestored } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let scrollY;
    $$self.$$.on_mount.push(function() {
      if (currentUserEmail === void 0 && !("currentUserEmail" in $$props || $$self.$$.bound[$$self.$$.props["currentUserEmail"]])) {
        console.warn("<Header> was created without expected prop 'currentUserEmail'");
      }
      if (serviceWorkerVersion === void 0 && !("serviceWorkerVersion" in $$props || $$self.$$.bound[$$self.$$.props["serviceWorkerVersion"]])) {
        console.warn("<Header> was created without expected prop 'serviceWorkerVersion'");
      }
      if (isClientStateRestored === void 0 && !("isClientStateRestored" in $$props || $$self.$$.bound[$$self.$$.props["isClientStateRestored"]])) {
        console.warn("<Header> was created without expected prop 'isClientStateRestored'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<Header> was created without expected prop 'menuClass'");
      }
    });
    const writable_props = [
      "currentUserEmail",
      "serviceWorkerVersion",
      "isClientStateRestored",
      "menuClass"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Header> was created with unknown prop '${key}'`);
    });
    function onwindowscroll() {
      $$invalidate(4, scrollY = window.pageYOffset);
    }
    function accountbutton_isClientStateRestored_binding(value) {
      isClientStateRestored = value;
      $$invalidate(0, isClientStateRestored);
    }
    $$self.$$set = ($$props2) => {
      if ("currentUserEmail" in $$props2)
        $$invalidate(1, currentUserEmail = $$props2.currentUserEmail);
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(2, serviceWorkerVersion = $$props2.serviceWorkerVersion);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(0, isClientStateRestored = $$props2.isClientStateRestored);
      if ("menuClass" in $$props2)
        $$invalidate(3, menuClass2 = $$props2.menuClass);
    };
    $$self.$capture_state = () => ({
      AccountButton: AccountButton_default,
      SessionsBadge: SessionsBadge_default,
      ShareButton: ShareButton_default,
      SyncStatusBadge: SyncStatusBadge_default,
      ThemeButton: ThemeButton_default,
      currentUserEmail,
      serviceWorkerVersion,
      isClientStateRestored,
      menuClass: menuClass2,
      scrollY
    });
    $$self.$inject_state = ($$props2) => {
      if ("currentUserEmail" in $$props2)
        $$invalidate(1, currentUserEmail = $$props2.currentUserEmail);
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(2, serviceWorkerVersion = $$props2.serviceWorkerVersion);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(0, isClientStateRestored = $$props2.isClientStateRestored);
      if ("menuClass" in $$props2)
        $$invalidate(3, menuClass2 = $$props2.menuClass);
      if ("scrollY" in $$props2)
        $$invalidate(4, scrollY = $$props2.scrollY);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      isClientStateRestored,
      currentUserEmail,
      serviceWorkerVersion,
      menuClass2,
      scrollY,
      onwindowscroll,
      accountbutton_isClientStateRestored_binding
    ];
  }
  var Header = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance44, create_fragment44, safe_not_equal, {
        currentUserEmail: 1,
        serviceWorkerVersion: 2,
        isClientStateRestored: 0,
        menuClass: 3
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Header",
        options,
        id: create_fragment44.name
      });
    }
    get currentUserEmail() {
      throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set currentUserEmail(value) {
      throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get serviceWorkerVersion() {
      throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set serviceWorkerVersion(value) {
      throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isClientStateRestored() {
      throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isClientStateRestored(value) {
      throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var Header_default = Header;

  // svelte/ScrollPositionRestorer.svelte
  var ScrollPositionRestorer_exports = {};
  __export(ScrollPositionRestorer_exports, {
    default: () => ScrollPositionRestorer_default
  });
  var { console: console_14, setTimeout: setTimeout_1, window: window_12 } = globals;
  function create_fragment45(ctx) {
    let scrolling = false;
    let clear_scrolling = () => {
      scrolling = false;
    };
    let scrolling_timeout;
    let mounted;
    let dispose;
    add_render_callback(
      /*onwindowscroll*/
      ctx[5]
    );
    const block = {
      c: noop3,
      l: noop3,
      m: function mount(target, anchor) {
        if (!mounted) {
          dispose = listen_dev(window_12, "scroll", () => {
            scrolling = true;
            clearTimeout(scrolling_timeout);
            scrolling_timeout = setTimeout_1(clear_scrolling, 100);
            ctx[5]();
          });
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*scrollX, scrollY*/
        3 && !scrolling) {
          scrolling = true;
          clearTimeout(scrolling_timeout);
          scrollTo(
            /*scrollX*/
            ctx2[0],
            /*scrollY*/
            ctx2[1]
          );
          scrolling_timeout = setTimeout_1(clear_scrolling, 100);
        }
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment45.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var scrollPositionKey = "scrollPosition";
  function restoreScrollPosition() {
    const scrollPosition = sessionStorage.getItem(scrollPositionKey);
    if (!scrollPosition)
      return;
    try {
      const { x, y } = JSON.parse(scrollPosition);
      if (typeof x !== "number" || typeof y !== "number")
        return;
      window.scrollTo(x, y);
    } catch (error) {
      console.error("Error restoring scroll position.", error);
    }
  }
  function instance45($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ScrollPositionRestorer", slots, []);
    let { isSyncedToIndexedDb } = $$props;
    let { isClientStateRestored } = $$props;
    let { isScrollPositionRestored } = $$props;
    let scrollX;
    let scrollY;
    $$self.$$.on_mount.push(function() {
      if (isSyncedToIndexedDb === void 0 && !("isSyncedToIndexedDb" in $$props || $$self.$$.bound[$$self.$$.props["isSyncedToIndexedDb"]])) {
        console_14.warn("<ScrollPositionRestorer> was created without expected prop 'isSyncedToIndexedDb'");
      }
      if (isClientStateRestored === void 0 && !("isClientStateRestored" in $$props || $$self.$$.bound[$$self.$$.props["isClientStateRestored"]])) {
        console_14.warn("<ScrollPositionRestorer> was created without expected prop 'isClientStateRestored'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console_14.warn("<ScrollPositionRestorer> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = ["isSyncedToIndexedDb", "isClientStateRestored", "isScrollPositionRestored"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console_14.warn(`<ScrollPositionRestorer> was created with unknown prop '${key}'`);
    });
    function onwindowscroll() {
      $$invalidate(0, scrollX = window_12.pageXOffset);
      $$invalidate(1, scrollY = window_12.pageYOffset);
    }
    $$self.$$set = ($$props2) => {
      if ("isSyncedToIndexedDb" in $$props2)
        $$invalidate(3, isSyncedToIndexedDb = $$props2.isSyncedToIndexedDb);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(4, isClientStateRestored = $$props2.isClientStateRestored);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(2, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    $$self.$capture_state = () => ({
      isSyncedToIndexedDb,
      isClientStateRestored,
      isScrollPositionRestored,
      scrollPositionKey,
      scrollX,
      scrollY,
      restoreScrollPosition
    });
    $$self.$inject_state = ($$props2) => {
      if ("isSyncedToIndexedDb" in $$props2)
        $$invalidate(3, isSyncedToIndexedDb = $$props2.isSyncedToIndexedDb);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(4, isClientStateRestored = $$props2.isClientStateRestored);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(2, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("scrollX" in $$props2)
        $$invalidate(0, scrollX = $$props2.scrollX);
      if ("scrollY" in $$props2)
        $$invalidate(1, scrollY = $$props2.scrollY);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*isSyncedToIndexedDb, isClientStateRestored*/
      24) {
        $:
          if (isSyncedToIndexedDb && isClientStateRestored) {
            setTimeout(
              () => {
                restoreScrollPosition();
                $$invalidate(2, isScrollPositionRestored = true);
              },
              0
            );
          }
      }
      if ($$self.$$.dirty & /*isScrollPositionRestored, scrollX, scrollY*/
      7) {
        $:
          if (isScrollPositionRestored) {
            sessionStorage.setItem(scrollPositionKey, JSON.stringify({ x: scrollX, y: scrollY }));
          }
      }
    };
    return [
      scrollX,
      scrollY,
      isScrollPositionRestored,
      isSyncedToIndexedDb,
      isClientStateRestored,
      onwindowscroll
    ];
  }
  var ScrollPositionRestorer = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance45, create_fragment45, safe_not_equal, {
        isSyncedToIndexedDb: 3,
        isClientStateRestored: 4,
        isScrollPositionRestored: 2
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ScrollPositionRestorer",
        options,
        id: create_fragment45.name
      });
    }
    get isSyncedToIndexedDb() {
      throw new Error("<ScrollPositionRestorer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isSyncedToIndexedDb(value) {
      throw new Error("<ScrollPositionRestorer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isClientStateRestored() {
      throw new Error("<ScrollPositionRestorer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isClientStateRestored(value) {
      throw new Error("<ScrollPositionRestorer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error("<ScrollPositionRestorer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error("<ScrollPositionRestorer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ScrollPositionRestorer_default = ScrollPositionRestorer;

  // svelte/StickyHeader.svelte
  var StickyHeader_exports = {};
  __export(StickyHeader_exports, {
    default: () => StickyHeader_default
  });

  // svelte/Back.svelte
  var Back_exports = {};
  __export(Back_exports, {
    default: () => Back_default
  });
  var file13 = "svelte/Back.svelte";
  function create_else_block3(ctx) {
    let button;
    let arrowleft;
    let current;
    let mounted;
    let dispose;
    arrowleft = new arrow_left_default({
      props: { class: "h-10 w-10", strokeWidth: 1.75 },
      $$inline: true
    });
    const block = {
      c: function create7() {
        button = element("button");
        create_component(arrowleft.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        button = claim_element(nodes, "BUTTON", {
          "aria-label": true,
          title: true,
          class: true
        });
        var button_nodes = children(button);
        claim_component(arrowleft.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(
          button,
          "aria-label",
          /*ariaLabel*/
          ctx[1]
        );
        attr_dev(
          button,
          "title",
          /*ariaLabel*/
          ctx[1]
        );
        attr_dev(button, "class", "flex rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(button, file13, 27, 2, 506);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button, anchor);
        mount_component(arrowleft, button, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[4],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        if (!current || dirty & /*ariaLabel*/
        2) {
          attr_dev(
            button,
            "aria-label",
            /*ariaLabel*/
            ctx2[1]
          );
        }
        if (!current || dirty & /*ariaLabel*/
        2) {
          attr_dev(
            button,
            "title",
            /*ariaLabel*/
            ctx2[1]
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(arrowleft.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(arrowleft.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button);
        }
        destroy_component(arrowleft);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block3.name,
      type: "else",
      source: "(21:0) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block8(ctx) {
    let a;
    let arrowleft;
    let current;
    arrowleft = new arrow_left_default({
      props: { class: "h-10 w-10", strokeWidth: 1.75 },
      $$inline: true
    });
    const block = {
      c: function create7() {
        a = element("a");
        create_component(arrowleft.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        a = claim_element(nodes, "A", {
          href: true,
          "aria-label": true,
          class: true
        });
        var a_nodes = children(a);
        claim_component(arrowleft.$$.fragment, a_nodes);
        a_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(
          a,
          "href",
          /*href*/
          ctx[0]
        );
        attr_dev(
          a,
          "aria-label",
          /*ariaLabel*/
          ctx[1]
        );
        attr_dev(a, "class", "flex rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(a, file13, 16, 2, 258);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, a, anchor);
        mount_component(arrowleft, a, null);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (!current || dirty & /*href*/
        1) {
          attr_dev(
            a,
            "href",
            /*href*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*ariaLabel*/
        2) {
          attr_dev(
            a,
            "aria-label",
            /*ariaLabel*/
            ctx2[1]
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(arrowleft.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(arrowleft.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(a);
        }
        destroy_component(arrowleft);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block8.name,
      type: "if",
      source: "(10:0) {#if href}",
      ctx
    });
    return block;
  }
  function create_fragment46(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [create_if_block8, create_else_block3];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*href*/
        ctx2[0]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
      c: function create7() {
        if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(if_block_anchor);
        }
        if_blocks[current_block_type_index].d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment46.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance46($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Back", slots, []);
    let { live = void 0 } = $$props;
    live;
    let { href = void 0 } = $$props;
    let { ariaLabel = "Back" } = $$props;
    let { showTopBarOnNav = false } = $$props;
    const writable_props = ["live", "href", "ariaLabel", "showTopBarOnNav"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Back> was created with unknown prop '${key}'`);
    });
    const click_handler = () => {
      if (showTopBarOnNav) {
        showTopBar();
      }
      if (history.length === 1) {
        window.location.replace("/app");
      } else {
        history.back();
      }
    };
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(3, live = $$props2.live);
      if ("href" in $$props2)
        $$invalidate(0, href = $$props2.href);
      if ("ariaLabel" in $$props2)
        $$invalidate(1, ariaLabel = $$props2.ariaLabel);
      if ("showTopBarOnNav" in $$props2)
        $$invalidate(2, showTopBarOnNav = $$props2.showTopBarOnNav);
    };
    $$self.$capture_state = () => ({
      ArrowLeft: arrow_left_default,
      showTopBar,
      live,
      href,
      ariaLabel,
      showTopBarOnNav
    });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(3, live = $$props2.live);
      if ("href" in $$props2)
        $$invalidate(0, href = $$props2.href);
      if ("ariaLabel" in $$props2)
        $$invalidate(1, ariaLabel = $$props2.ariaLabel);
      if ("showTopBarOnNav" in $$props2)
        $$invalidate(2, showTopBarOnNav = $$props2.showTopBarOnNav);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [href, ariaLabel, showTopBarOnNav, live, click_handler];
  }
  var Back = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance46, create_fragment46, safe_not_equal, {
        live: 3,
        href: 0,
        ariaLabel: 1,
        showTopBarOnNav: 2
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Back",
        options,
        id: create_fragment46.name
      });
    }
    get live() {
      throw new Error("<Back>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<Back>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get href() {
      throw new Error("<Back>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set href(value) {
      throw new Error("<Back>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get ariaLabel() {
      throw new Error("<Back>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set ariaLabel(value) {
      throw new Error("<Back>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get showTopBarOnNav() {
      throw new Error("<Back>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set showTopBarOnNav(value) {
      throw new Error("<Back>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var Back_default = Back;

  // svelte/StickyHeader.svelte
  var file14 = "svelte/StickyHeader.svelte";
  function create_fragment47(ctx) {
    let scrolling = false;
    let clear_scrolling = () => {
      scrolling = false;
    };
    let scrolling_timeout;
    let div1;
    let div0;
    let back;
    let current;
    let mounted;
    let dispose;
    add_render_callback(
      /*onwindowscroll*/
      ctx[1]
    );
    back = new Back_default({ $$inline: true });
    const block = {
      c: function create7() {
        div1 = element("div");
        div0 = element("div");
        create_component(back.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div1 = claim_element(nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        div0 = claim_element(div1_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        claim_component(back.$$.fragment, div0_nodes);
        div0_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div0, "class", "max-w-2xl mx-auto px-2 md:p-0 h-full flex items-center");
        add_location(div0, file14, 12, 2, 228);
        attr_dev(div1, "class", "sticky top-0 left-0 w-full z-10 backdrop-blur border-neutral h-[68px]");
        toggle_class(
          div1,
          "border-b",
          /*scrollY*/
          ctx[0] > 0
        );
        add_location(div1, file14, 8, 0, 108);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div1, anchor);
        append_hydration_dev(div1, div0);
        mount_component(back, div0, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(window, "scroll", () => {
            scrolling = true;
            clearTimeout(scrolling_timeout);
            scrolling_timeout = setTimeout(clear_scrolling, 100);
            ctx[1]();
          });
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*scrollY*/
        1 && !scrolling) {
          scrolling = true;
          clearTimeout(scrolling_timeout);
          scrollTo(
            window.pageXOffset,
            /*scrollY*/
            ctx2[0]
          );
          scrolling_timeout = setTimeout(clear_scrolling, 100);
        }
        if (!current || dirty & /*scrollY*/
        1) {
          toggle_class(
            div1,
            "border-b",
            /*scrollY*/
            ctx2[0] > 0
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(back.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(back.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div1);
        }
        destroy_component(back);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment47.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance47($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("StickyHeader", slots, []);
    let scrollY;
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<StickyHeader> was created with unknown prop '${key}'`);
    });
    function onwindowscroll() {
      $$invalidate(0, scrollY = window.pageYOffset);
    }
    $$self.$capture_state = () => ({ Back: Back_default, scrollY });
    $$self.$inject_state = ($$props2) => {
      if ("scrollY" in $$props2)
        $$invalidate(0, scrollY = $$props2.scrollY);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [scrollY, onwindowscroll];
  }
  var StickyHeader = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance47, create_fragment47, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "StickyHeader",
        options,
        id: create_fragment47.name
      });
    }
  };
  var StickyHeader_default = StickyHeader;

  // svelte/ThemeSyncManager.svelte
  var ThemeSyncManager_exports = {};
  __export(ThemeSyncManager_exports, {
    default: () => ThemeSyncManager_default
  });
  function create_fragment48(ctx) {
    let mounted;
    let dispose;
    const block = {
      c: noop3,
      l: noop3,
      m: function mount(target, anchor) {
        if (!mounted) {
          dispose = listen_dev(
            window,
            "storage",
            /*storage_handler*/
            ctx[1],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: noop3,
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment48.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance48($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ThemeSyncManager", slots, []);
    let { live = void 0 } = $$props;
    live;
    const writable_props = ["live"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ThemeSyncManager> was created with unknown prop '${key}'`);
    });
    const storage_handler = ({ key, newValue }) => {
      if (key !== "theme")
        return;
      const theme = JSON.parse(newValue) || "system";
      setTheme(theme);
    };
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    $$self.$capture_state = () => ({ setTheme, live });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [live, storage_handler];
  }
  var ThemeSyncManager = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance48, create_fragment48, safe_not_equal, { live: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ThemeSyncManager",
        options,
        id: create_fragment48.name
      });
    }
    get live() {
      throw new Error("<ThemeSyncManager>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<ThemeSyncManager>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ThemeSyncManager_default = ThemeSyncManager;

  // svelte/Toast.svelte
  var Toast_exports = {};
  __export(Toast_exports, {
    default: () => Toast_default
  });

  // lib/actions/clickOutside.ts
  function clickOutside(element3, callbackFunction) {
    function clickOutsideHandler(event) {
      if (!(event.target instanceof Node))
        return;
      if (!element3.contains(event.target)) {
        callbackFunction(event);
      }
    }
    setTimeout(() => {
      document.documentElement.addEventListener("click", clickOutsideHandler);
    }, 0);
    return {
      update(newCallbackFunction) {
        callbackFunction = newCallbackFunction;
      },
      destroy() {
        document.documentElement.removeEventListener("click", clickOutsideHandler);
      }
    };
  }

  // svelte/Toast.svelte
  var file15 = "svelte/Toast.svelte";
  function create_if_block9(ctx) {
    let div;
    let p0;
    let current_block_type_index;
    let if_block;
    let t0;
    let t1_value = (
      /*$toast*/
      ctx[0].title + ""
    );
    let t1;
    let t2;
    let p1;
    let t3_value = (
      /*$toast*/
      ctx[0].msg + ""
    );
    let t3;
    let t4;
    let button;
    let x;
    let div_class_value;
    let clickOutside_action;
    let div_transition;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block_14, create_if_block_22];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*$toast*/
        ctx2[0].kind === "info"
      )
        return 0;
      if (
        /*$toast*/
        ctx2[0].kind === "error"
      )
        return 1;
      return -1;
    }
    if (~(current_block_type_index = select_block_type(ctx, -1))) {
      if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    }
    x = new x_default({
      props: { class: "w-5 h-5" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div = element("div");
        p0 = element("p");
        if (if_block)
          if_block.c();
        t0 = space();
        t1 = text(t1_value);
        t2 = space();
        p1 = element("p");
        t3 = text(t3_value);
        t4 = space();
        button = element("button");
        create_component(x.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { role: true, class: true });
        var div_nodes = children(div);
        p0 = claim_element(div_nodes, "P", { class: true });
        var p0_nodes = children(p0);
        if (if_block)
          if_block.l(p0_nodes);
        t0 = claim_space(p0_nodes);
        t1 = claim_text(p0_nodes, t1_value);
        p0_nodes.forEach(detach_dev);
        t2 = claim_space(div_nodes);
        p1 = claim_element(div_nodes, "P", { class: true });
        var p1_nodes = children(p1);
        t3 = claim_text(p1_nodes, t3_value);
        p1_nodes.forEach(detach_dev);
        t4 = claim_space(div_nodes);
        button = claim_element(div_nodes, "BUTTON", { class: true, "aria-label": true });
        var button_nodes = children(button);
        claim_component(x.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(p0, "class", "flex items-center gap-1.5 text-sm font-semibold leading-6");
        add_location(p0, file15, 29, 4, 722);
        attr_dev(p1, "class", "mt-2 text-sm leading-5");
        add_location(p1, file15, 39, 4, 991);
        attr_dev(button, "class", "group absolute top-1 right-1 p-2");
        attr_dev(button, "aria-label", "close");
        add_location(button, file15, 41, 4, 1047);
        attr_dev(div, "role", "alert");
        attr_dev(div, "class", div_class_value = `
      fixed top-2 right-2 mr-2 w-80 sm:w-96 z-50 rounded-lg p-3 shadow-md
      ${/*$toast*/
        ctx[0].kind === "info" && "bg-success text-success-content fill-success"}
      ${/*$toast*/
        ctx[0].kind === "error" && "bg-error text-error-content fill-error"}
    `);
        add_location(div, file15, 19, 2, 372);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, p0);
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(p0, null);
        }
        append_hydration_dev(p0, t0);
        append_hydration_dev(p0, t1);
        append_hydration_dev(div, t2);
        append_hydration_dev(div, p1);
        append_hydration_dev(p1, t3);
        append_hydration_dev(div, t4);
        append_hydration_dev(div, button);
        mount_component(x, button, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "click",
              /*dismissToast*/
              ctx[1],
              false,
              false,
              false,
              false
            ),
            action_destroyer(clickOutside_action = clickOutside.call(
              null,
              div,
              /*dismissToast*/
              ctx[1]
            ))
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index !== previous_block_index) {
          if (if_block) {
            group_outros();
            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null;
            });
            check_outros();
          }
          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index];
            if (!if_block) {
              if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
              if_block.c();
            } else {
            }
            transition_in(if_block, 1);
            if_block.m(p0, t0);
          } else {
            if_block = null;
          }
        }
        if ((!current || dirty & /*$toast*/
        1) && t1_value !== (t1_value = /*$toast*/
        ctx2[0].title + ""))
          set_data_dev(t1, t1_value);
        if ((!current || dirty & /*$toast*/
        1) && t3_value !== (t3_value = /*$toast*/
        ctx2[0].msg + ""))
          set_data_dev(t3, t3_value);
        if (!current || dirty & /*$toast*/
        1 && div_class_value !== (div_class_value = `
      fixed top-2 right-2 mr-2 w-80 sm:w-96 z-50 rounded-lg p-3 shadow-md
      ${/*$toast*/
        ctx2[0].kind === "info" && "bg-success text-success-content fill-success"}
      ${/*$toast*/
        ctx2[0].kind === "error" && "bg-error text-error-content fill-error"}
    `)) {
          attr_dev(div, "class", div_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        transition_in(x.$$.fragment, local);
        if (local) {
          add_render_callback(() => {
            if (!current)
              return;
            if (!div_transition)
              div_transition = create_bidirectional_transition(div, fly, { x: 50 }, true);
            div_transition.run(1);
          });
        }
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        transition_out(x.$$.fragment, local);
        if (local) {
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, fly, { x: 50 }, false);
          div_transition.run(0);
        }
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d();
        }
        destroy_component(x);
        if (detaching && div_transition)
          div_transition.end();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block9.name,
      type: "if",
      source: "(15:0) {#if $toast.show}",
      ctx
    });
    return block;
  }
  function create_if_block_22(ctx) {
    let trianglealert;
    let current;
    trianglealert = new triangle_alert_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(trianglealert.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(trianglealert.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(trianglealert, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(trianglealert.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(trianglealert.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(trianglealert, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_22.name,
      type: "if",
      source: "(29:40) ",
      ctx
    });
    return block;
  }
  function create_if_block_14(ctx) {
    let info;
    let current;
    info = new info_default({
      props: { class: "h-4 w-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(info.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(info.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(info, target, anchor);
        current = true;
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(info.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(info.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(info, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_14.name,
      type: "if",
      source: '(27:6) {#if $toast.kind === \\"info\\"}',
      ctx
    });
    return block;
  }
  function create_fragment49(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*$toast*/
      ctx[0].show && create_if_block9(ctx)
    );
    const block = {
      c: function create7() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*$toast*/
          ctx2[0].show
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*$toast*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block9(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment49.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance49($$self, $$props, $$invalidate) {
    let $toast;
    validate_store(toast, "toast");
    component_subscribe($$self, toast, ($$value) => $$invalidate(0, $toast = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Toast", slots, []);
    function dismissToast() {
      set_store_value(
        toast,
        $toast = {
          show: false,
          kind: "info",
          title: "",
          msg: ""
        },
        $toast
      );
    }
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Toast> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = () => ({
      fly,
      Info: info_default,
      TriangleAlert: triangle_alert_default,
      X: x_default,
      clickOutside,
      toast,
      dismissToast,
      $toast
    });
    return [$toast, dismissToast];
  }
  var Toast = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance49, create_fragment49, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Toast",
        options,
        id: create_fragment49.name
      });
    }
  };
  var Toast_default = Toast;

  // svelte/TodoApp.svelte
  var TodoApp_exports = {};
  __export(TodoApp_exports, {
    default: () => TodoApp_default
  });

  // node_modules/svelte-dnd-action/dist/index.mjs
  function ownKeys(object, enumerableOnly) {
    var keys2 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys2.push.apply(keys2, symbols);
    }
    return keys2;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        var F = function() {
        };
        return {
          s: F,
          n: function() {
            if (i >= o.length)
              return {
                done: true
              };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function(e) {
            throw e;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null)
            it.return();
        } finally {
          if (didErr)
            throw err;
        }
      }
    };
  }
  var FINALIZE_EVENT_NAME = "finalize";
  var CONSIDER_EVENT_NAME = "consider";
  function dispatchFinalizeEvent(el, items, info) {
    el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
      detail: {
        items,
        info
      }
    }));
  }
  function dispatchConsiderEvent(el, items, info) {
    el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
      detail: {
        items,
        info
      }
    }));
  }
  var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
  var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
  var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
  var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
  var DRAGGED_LEFT_TYPES = {
    LEFT_FOR_ANOTHER: "leftForAnother",
    OUTSIDE_OF_ANY: "outsideOfAny"
  };
  function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
    containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
      detail: {
        indexObj,
        draggedEl: draggedEl2
      }
    }));
  }
  function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
    containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: {
        draggedEl: draggedEl2,
        type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
        theOtherDz
      }
    }));
  }
  function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
    containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
      detail: {
        draggedEl: draggedEl2,
        type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
      }
    }));
  }
  function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
    containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
      detail: {
        indexObj,
        draggedEl: draggedEl2
      }
    }));
  }
  function dispatchDraggedLeftDocument(draggedEl2) {
    window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
      detail: {
        draggedEl: draggedEl2
      }
    }));
  }
  var TRIGGERS = {
    DRAG_STARTED: "dragStarted",
    DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
    DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
    DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
    DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
    DRAGGED_LEFT_ALL: "draggedLeftAll",
    DROPPED_INTO_ZONE: "droppedIntoZone",
    DROPPED_INTO_ANOTHER: "droppedIntoAnother",
    DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
    DRAG_STOPPED: "dragStopped"
  };
  var SOURCES = {
    POINTER: "pointer",
    KEYBOARD: "keyboard"
  };
  var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
  var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-internal";
  var SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item-hint";
  var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
  var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
  var ITEM_ID_KEY = "id";
  var activeDndZoneCount = 0;
  function incrementActiveDropZoneCount() {
    activeDndZoneCount++;
  }
  function decrementActiveDropZoneCount() {
    if (activeDndZoneCount === 0) {
      throw new Error("Bug! trying to decrement when there are no dropzones");
    }
    activeDndZoneCount--;
  }
  var isOnServer = typeof window === "undefined";
  var printDebug = function printDebug2() {
  };
  function getBoundingRectNoTransforms(el) {
    var ta;
    var rect = el.getBoundingClientRect();
    var style = getComputedStyle(el);
    var tx = style.transform;
    if (tx) {
      var sx, sy, dx, dy;
      if (tx.startsWith("matrix3d(")) {
        ta = tx.slice(9, -1).split(/, /);
        sx = +ta[0];
        sy = +ta[5];
        dx = +ta[12];
        dy = +ta[13];
      } else if (tx.startsWith("matrix(")) {
        ta = tx.slice(7, -1).split(/, /);
        sx = +ta[0];
        sy = +ta[3];
        dx = +ta[4];
        dy = +ta[5];
      } else {
        return rect;
      }
      var to = style.transformOrigin;
      var x = rect.x - dx - (1 - sx) * parseFloat(to);
      var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
      var w = sx ? rect.width / sx : el.offsetWidth;
      var h = sy ? rect.height / sy : el.offsetHeight;
      return {
        x,
        y,
        width: w,
        height: h,
        top: y,
        right: x + w,
        bottom: y + h,
        left: x
      };
    } else {
      return rect;
    }
  }
  function getAbsoluteRectNoTransforms(el) {
    var rect = getBoundingRectNoTransforms(el);
    return {
      top: rect.top + window.scrollY,
      bottom: rect.bottom + window.scrollY,
      left: rect.left + window.scrollX,
      right: rect.right + window.scrollX
    };
  }
  function getAbsoluteRect(el) {
    var rect = el.getBoundingClientRect();
    return {
      top: rect.top + window.scrollY,
      bottom: rect.bottom + window.scrollY,
      left: rect.left + window.scrollX,
      right: rect.right + window.scrollX
    };
  }
  function findCenter(rect) {
    return {
      x: (rect.left + rect.right) / 2,
      y: (rect.top + rect.bottom) / 2
    };
  }
  function calcDistance(pointA, pointB) {
    return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
  }
  function isPointInsideRect(point, rect) {
    return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
  }
  function findCenterOfElement(el) {
    return findCenter(getAbsoluteRect(el));
  }
  function isCenterOfAInsideB(elA, elB) {
    var centerOfA = findCenterOfElement(elA);
    var rectOfB = getAbsoluteRectNoTransforms(elB);
    return isPointInsideRect(centerOfA, rectOfB);
  }
  function calcDistanceBetweenCenters(elA, elB) {
    var centerOfA = findCenterOfElement(elA);
    var centerOfB = findCenterOfElement(elB);
    return calcDistance(centerOfA, centerOfB);
  }
  function isElementOffDocument(el) {
    var rect = getAbsoluteRect(el);
    return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
  }
  var dzToShadowIndexToRect;
  function resetIndexesCache() {
    printDebug(function() {
      return "resetting indexes cache";
    });
    dzToShadowIndexToRect = /* @__PURE__ */ new Map();
  }
  resetIndexesCache();
  function cacheShadowRect(dz) {
    var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
      return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
    });
    if (shadowElIndex >= 0) {
      if (!dzToShadowIndexToRect.has(dz)) {
        dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
      }
      dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
      return shadowElIndex;
    }
    return void 0;
  }
  function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
    if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
      return null;
    }
    var children2 = collectionBelowEl.children;
    if (children2.length === 0) {
      return {
        index: 0,
        isProximityBased: true
      };
    }
    var shadowElIndex = cacheShadowRect(collectionBelowEl);
    for (var i = 0; i < children2.length; i++) {
      if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
        var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
        if (cachedShadowRect) {
          if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
            return {
              index: shadowElIndex,
              isProximityBased: false
            };
          }
        }
        return {
          index: i,
          isProximityBased: false
        };
      }
    }
    var minDistanceSoFar = Number.MAX_VALUE;
    var indexOfMin = void 0;
    for (var _i = 0; _i < children2.length; _i++) {
      var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
      if (distance < minDistanceSoFar) {
        minDistanceSoFar = distance;
        indexOfMin = _i;
      }
    }
    return {
      index: indexOfMin,
      isProximityBased: true
    };
  }
  function toString(object) {
    return JSON.stringify(object, null, 2);
  }
  function getDepth(node) {
    if (!node) {
      throw new Error("cannot get depth of a falsy node");
    }
    return _getDepth(node, 0);
  }
  function _getDepth(node) {
    var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    if (!node.parentElement) {
      return countSoFar - 1;
    }
    return _getDepth(node.parentElement, countSoFar + 1);
  }
  function areObjectsShallowEqual(objA, objB) {
    if (Object.keys(objA).length !== Object.keys(objB).length) {
      return false;
    }
    for (var keyA in objA) {
      if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
        return false;
      }
    }
    return true;
  }
  function areArraysShallowEqualSameOrder(arrA, arrB) {
    if (arrA.length !== arrB.length) {
      return false;
    }
    for (var i = 0; i < arrA.length; i++) {
      if (arrA[i] !== arrB[i]) {
        return false;
      }
    }
    return true;
  }
  var INTERVAL_MS = 200;
  var TOLERANCE_PX = 10;
  var next;
  function observe(draggedEl2, dropZones) {
    var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
    var multiScroller2 = arguments.length > 3 ? arguments[3] : void 0;
    var lastDropZoneFound;
    var lastIndexFound;
    var lastIsDraggedInADropZone = false;
    var lastCentrePositionOfDragged;
    var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
      return getDepth(dz2) - getDepth(dz1);
    });
    function andNow() {
      var currentCenterOfDragged = findCenterOfElement(draggedEl2);
      var scrolled = multiScroller2.multiScrollIfNeeded();
      if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
        next = window.setTimeout(andNow, intervalMs);
        return;
      }
      if (isElementOffDocument(draggedEl2)) {
        printDebug(function() {
          return "off document";
        });
        dispatchDraggedLeftDocument(draggedEl2);
        return;
      }
      lastCentrePositionOfDragged = currentCenterOfDragged;
      var isDraggedInADropZone = false;
      var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var dz = _step.value;
          if (scrolled)
            resetIndexesCache();
          var indexObj = findWouldBeIndex(draggedEl2, dz);
          if (indexObj === null) {
            continue;
          }
          var index = indexObj.index;
          isDraggedInADropZone = true;
          if (dz !== lastDropZoneFound) {
            lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
            dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
            lastDropZoneFound = dz;
          } else if (index !== lastIndexFound) {
            dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
            lastIndexFound = index;
          }
          break;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
        dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
        lastDropZoneFound = void 0;
        lastIndexFound = void 0;
        lastIsDraggedInADropZone = false;
      } else {
        lastIsDraggedInADropZone = true;
      }
      next = window.setTimeout(andNow, intervalMs);
    }
    andNow();
  }
  function unobserve() {
    printDebug(function() {
      return "unobserving";
    });
    clearTimeout(next);
    resetIndexesCache();
  }
  var SCROLL_ZONE_PX = 30;
  function makeScroller() {
    var scrollingInfo;
    function resetScrolling() {
      scrollingInfo = {
        directionObj: void 0,
        stepPx: 0
      };
    }
    resetScrolling();
    function scrollContainer(containerEl) {
      var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
      if (directionObj) {
        containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
        window.requestAnimationFrame(function() {
          return scrollContainer(containerEl);
        });
      }
    }
    function calcScrollStepPx(distancePx) {
      return SCROLL_ZONE_PX - distancePx;
    }
    function scrollIfNeeded(pointer, elementToScroll) {
      if (!elementToScroll) {
        return false;
      }
      var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
      var isAlreadyScrolling = !!scrollingInfo.directionObj;
      if (distances === null) {
        if (isAlreadyScrolling)
          resetScrolling();
        return false;
      }
      var scrollingVertically = false, scrollingHorizontally = false;
      if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
        if (distances.bottom < SCROLL_ZONE_PX) {
          scrollingVertically = true;
          scrollingInfo.directionObj = {
            x: 0,
            y: 1
          };
          scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
        } else if (distances.top < SCROLL_ZONE_PX) {
          scrollingVertically = true;
          scrollingInfo.directionObj = {
            x: 0,
            y: -1
          };
          scrollingInfo.stepPx = calcScrollStepPx(distances.top);
        }
        if (!isAlreadyScrolling && scrollingVertically) {
          scrollContainer(elementToScroll);
          return true;
        }
      }
      if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
        if (distances.right < SCROLL_ZONE_PX) {
          scrollingHorizontally = true;
          scrollingInfo.directionObj = {
            x: 1,
            y: 0
          };
          scrollingInfo.stepPx = calcScrollStepPx(distances.right);
        } else if (distances.left < SCROLL_ZONE_PX) {
          scrollingHorizontally = true;
          scrollingInfo.directionObj = {
            x: -1,
            y: 0
          };
          scrollingInfo.stepPx = calcScrollStepPx(distances.left);
        }
        if (!isAlreadyScrolling && scrollingHorizontally) {
          scrollContainer(elementToScroll);
          return true;
        }
      }
      resetScrolling();
      return false;
    }
    return {
      scrollIfNeeded,
      resetScrolling
    };
  }
  function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
    var rect = el === document.scrollingElement ? {
      top: 0,
      bottom: window.innerHeight,
      left: 0,
      right: window.innerWidth
    } : el.getBoundingClientRect();
    if (!isPointInsideRect(point, rect)) {
      return null;
    }
    return {
      top: point.y - rect.top,
      bottom: rect.bottom - point.y,
      left: point.x - rect.left,
      right: rect.right - point.x
    };
  }
  function createMultiScroller() {
    var baseElementsForScrolling = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var getPointerPosition = arguments.length > 1 ? arguments[1] : void 0;
    printDebug(function() {
      return "creating multi-scroller";
    });
    var scrollingContainersSet = findRelevantScrollContainers(baseElementsForScrolling);
    var scrollingContainersDeepToShallow = Array.from(scrollingContainersSet).sort(function(dz1, dz2) {
      return getDepth(dz2) - getDepth(dz1);
    });
    var _makeScroller = makeScroller(), scrollIfNeeded = _makeScroller.scrollIfNeeded, resetScrolling = _makeScroller.resetScrolling;
    function tick2() {
      var mousePosition = getPointerPosition();
      if (!mousePosition || !scrollingContainersDeepToShallow) {
        return false;
      }
      var scrollContainersUnderCursor = scrollingContainersDeepToShallow.filter(function(el) {
        return isPointInsideRect(mousePosition, el.getBoundingClientRect()) || el === document.scrollingElement;
      });
      for (var i = 0; i < scrollContainersUnderCursor.length; i++) {
        var scrolled = scrollIfNeeded(mousePosition, scrollContainersUnderCursor[i]);
        if (scrolled) {
          return true;
        }
      }
      return false;
    }
    return {
      multiScrollIfNeeded: scrollingContainersSet.size > 0 ? tick2 : function() {
        return false;
      },
      destroy: function destroy() {
        return resetScrolling();
      }
    };
  }
  function findScrollableParents(element3) {
    if (!element3) {
      return [];
    }
    var scrollableContainers = [];
    var parent = element3;
    while (parent) {
      var _window$getComputedSt = window.getComputedStyle(parent), overflow = _window$getComputedSt.overflow;
      if (overflow.split(" ").some(function(o) {
        return o.includes("auto") || o.includes("scroll");
      })) {
        scrollableContainers.push(parent);
      }
      parent = parent.parentElement;
    }
    return scrollableContainers;
  }
  function findRelevantScrollContainers(dropZones) {
    var scrollingContainers = /* @__PURE__ */ new Set();
    var _iterator = _createForOfIteratorHelper(dropZones), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        findScrollableParents(dz).forEach(function(container) {
          return scrollingContainers.add(container);
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (document.scrollingElement.scrollHeight > document.scrollingElement.clientHeight || document.scrollingElement.scrollWidth > document.scrollingElement.clientHeight) {
      scrollingContainers.add(document.scrollingElement);
    }
    return scrollingContainers;
  }
  function svelteNodeClone(el) {
    var cloned = el.cloneNode(true);
    var values = [];
    var elIsSelect = el.tagName === "SELECT";
    var selects = elIsSelect ? [el] : _toConsumableArray(el.querySelectorAll("select"));
    var _iterator = _createForOfIteratorHelper(selects), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var _select = _step.value;
        values.push(_select.value);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (selects.length > 0) {
      var clonedSelects = elIsSelect ? [cloned] : _toConsumableArray(cloned.querySelectorAll("select"));
      for (var i = 0; i < clonedSelects.length; i++) {
        var select = clonedSelects[i];
        var value = values[i];
        var optionEl = select.querySelector('option[value="'.concat(value, '"'));
        if (optionEl) {
          optionEl.setAttribute("selected", true);
        }
      }
    }
    var elIsCanvas = el.tagName === "CANVAS";
    var canvases = elIsCanvas ? [el] : _toConsumableArray(el.querySelectorAll("canvas"));
    if (canvases.length > 0) {
      var clonedCanvases = elIsCanvas ? [cloned] : _toConsumableArray(cloned.querySelectorAll("canvas"));
      for (var _i = 0; _i < clonedCanvases.length; _i++) {
        var canvas = canvases[_i];
        var clonedCanvas = clonedCanvases[_i];
        clonedCanvas.width = canvas.width;
        clonedCanvas.height = canvas.height;
        clonedCanvas.getContext("2d").drawImage(canvas, 0, 0);
      }
    }
    return cloned;
  }
  var FEATURE_FLAG_NAMES = Object.freeze({
    // This flag exists as a workaround for issue 454 (basically a browser bug) - seems like these rect values take time to update when in grid layout. Setting it to true can cause strange behaviour in the REPL for non-grid zones, see issue 470
    USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT: "USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT"
  });
  var featureFlagsMap = _defineProperty({}, FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT, false);
  function getFeatureFlag(flagName) {
    if (!FEATURE_FLAG_NAMES[flagName])
      throw new Error("Can't get non existing feature flag ".concat(flagName, "! Supported flags: ").concat(Object.keys(FEATURE_FLAG_NAMES)));
    return featureFlagsMap[flagName];
  }
  var TRANSITION_DURATION_SECONDS = 0.2;
  function trs(property) {
    return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
  }
  function createDraggedElementFrom(originalElement, positionCenterOnXY) {
    var rect = originalElement.getBoundingClientRect();
    var draggedEl2 = svelteNodeClone(originalElement);
    copyStylesFromTo(originalElement, draggedEl2);
    draggedEl2.id = DRAGGED_ELEMENT_ID;
    draggedEl2.style.position = "fixed";
    var elTopPx = rect.top;
    var elLeftPx = rect.left;
    draggedEl2.style.top = "".concat(elTopPx, "px");
    draggedEl2.style.left = "".concat(elLeftPx, "px");
    if (positionCenterOnXY) {
      var center = findCenter(rect);
      elTopPx -= center.y - positionCenterOnXY.y;
      elLeftPx -= center.x - positionCenterOnXY.x;
      window.setTimeout(function() {
        draggedEl2.style.top = "".concat(elTopPx, "px");
        draggedEl2.style.left = "".concat(elLeftPx, "px");
      }, 0);
    }
    draggedEl2.style.margin = "0";
    draggedEl2.style.boxSizing = "border-box";
    draggedEl2.style.height = "".concat(rect.height, "px");
    draggedEl2.style.width = "".concat(rect.width, "px");
    draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
    window.setTimeout(function() {
      return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
    }, 0);
    draggedEl2.style.zIndex = "9999";
    draggedEl2.style.cursor = "grabbing";
    return draggedEl2;
  }
  function moveDraggedElementToWasDroppedState(draggedEl2) {
    draggedEl2.style.cursor = "grab";
  }
  function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY) {
    copyStylesFromTo(copyFromEl, draggedEl2);
    var newRect = copyFromEl.getBoundingClientRect();
    var draggedElRect = draggedEl2.getBoundingClientRect();
    var widthChange = newRect.width - draggedElRect.width;
    var heightChange = newRect.height - draggedElRect.height;
    if (widthChange || heightChange) {
      var relativeDistanceOfMousePointerFromDraggedSides = {
        left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
        top: (currentMouseY - draggedElRect.top) / draggedElRect.height
      };
      if (!getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT)) {
        draggedEl2.style.height = "".concat(newRect.height, "px");
        draggedEl2.style.width = "".concat(newRect.width, "px");
      }
      draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
      draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
    }
  }
  function copyStylesFromTo(copyFromEl, copyToEl) {
    var computedStyle = window.getComputedStyle(copyFromEl);
    Array.from(computedStyle).filter(function(s) {
      return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type" || // copying with and height to make up for rect update timing issues in some browsers
      getFeatureFlag(FEATURE_FLAG_NAMES.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT) && (s === "width" || s === "height");
    }).forEach(function(s) {
      return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
    });
  }
  function styleDraggable(draggableEl, dragDisabled) {
    draggableEl.draggable = false;
    draggableEl.ondragstart = function() {
      return false;
    };
    if (!dragDisabled) {
      draggableEl.style.userSelect = "none";
      draggableEl.style.WebkitUserSelect = "none";
      draggableEl.style.cursor = "grab";
    } else {
      draggableEl.style.userSelect = "";
      draggableEl.style.WebkitUserSelect = "";
      draggableEl.style.cursor = "";
    }
  }
  function hideElement(dragTarget) {
    dragTarget.style.display = "none";
    dragTarget.style.position = "fixed";
    dragTarget.style.zIndex = "-5";
  }
  function decorateShadowEl(shadowEl) {
    shadowEl.style.visibility = "hidden";
    shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
  }
  function unDecorateShadowElement(shadowEl) {
    shadowEl.style.visibility = "";
    shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  }
  function styleActiveDropZones(dropZones) {
    var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
    };
    var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
      return [];
    };
    dropZones.forEach(function(dz) {
      var styles = getStyles(dz);
      Object.keys(styles).forEach(function(style) {
        dz.style[style] = styles[style];
      });
      getClasses(dz).forEach(function(c) {
        return dz.classList.add(c);
      });
    });
  }
  function styleInactiveDropZones(dropZones) {
    var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
    };
    var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
      return [];
    };
    dropZones.forEach(function(dz) {
      var styles = getStyles(dz);
      Object.keys(styles).forEach(function(style) {
        dz.style[style] = "";
      });
      getClasses(dz).forEach(function(c) {
        return dz.classList.contains(c) && dz.classList.remove(c);
      });
    });
  }
  function preventShrinking(el) {
    var originalMinHeight = el.style.minHeight;
    el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
    var originalMinWidth = el.style.minWidth;
    el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
    return function undo() {
      el.style.minHeight = originalMinHeight;
      el.style.minWidth = originalMinWidth;
    };
  }
  var DEFAULT_DROP_ZONE_TYPE = "--any--";
  var MIN_OBSERVATION_INTERVAL_MS = 100;
  var DISABLED_OBSERVATION_INTERVAL_MS = 20;
  var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
  var DEFAULT_DROP_TARGET_STYLE = {
    outline: "rgba(255, 255, 102, 0.7) solid 2px"
  };
  var ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE = "data-is-dnd-original-dragged-item";
  var originalDragTarget;
  var draggedEl;
  var draggedElData;
  var draggedElType;
  var originDropZone;
  var originIndex;
  var shadowElData;
  var shadowElDropZone;
  var dragStartMousePosition;
  var currentMousePosition;
  var isWorkingOnPreviousDrag = false;
  var finalizingPreviousDrag = false;
  var unlockOriginDzMinDimensions;
  var isDraggedOutsideOfAnyDz = false;
  var scheduledForRemovalAfterDrop = [];
  var multiScroller;
  var typeToDropZones = /* @__PURE__ */ new Map();
  var dzToConfig = /* @__PURE__ */ new Map();
  var elToMouseDownListener = /* @__PURE__ */ new WeakMap();
  function registerDropZone(dropZoneEl, type) {
    printDebug(function() {
      return "registering drop-zone if absent";
    });
    if (!typeToDropZones.has(type)) {
      typeToDropZones.set(type, /* @__PURE__ */ new Set());
    }
    if (!typeToDropZones.get(type).has(dropZoneEl)) {
      typeToDropZones.get(type).add(dropZoneEl);
      incrementActiveDropZoneCount();
    }
  }
  function unregisterDropZone(dropZoneEl, type) {
    typeToDropZones.get(type)["delete"](dropZoneEl);
    decrementActiveDropZoneCount();
    if (typeToDropZones.get(type).size === 0) {
      typeToDropZones["delete"](type);
    }
  }
  function watchDraggedElement() {
    printDebug(function() {
      return "watching dragged element";
    });
    var dropZones = typeToDropZones.get(draggedElType);
    var _iterator = _createForOfIteratorHelper(dropZones), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
        dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
        dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
    var setIntervalMs = Math.max.apply(Math, _toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
      return dzToConfig.get(dz2).dropAnimationDurationMs;
    })));
    var observationIntervalMs = setIntervalMs === 0 ? DISABLED_OBSERVATION_INTERVAL_MS : Math.max(setIntervalMs, MIN_OBSERVATION_INTERVAL_MS);
    multiScroller = createMultiScroller(dropZones, function() {
      return currentMousePosition;
    });
    observe(draggedEl, dropZones, observationIntervalMs * 1.07, multiScroller);
  }
  function unWatchDraggedElement() {
    printDebug(function() {
      return "unwatching dragged element";
    });
    var dropZones = typeToDropZones.get(draggedElType);
    var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
        var dz = _step2.value;
        dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
        dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
        dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
    multiScroller.destroy();
    multiScroller = void 0;
    unobserve();
  }
  function findShadowElementIdx(items) {
    return items.findIndex(function(item) {
      return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
  }
  function createShadowElData(draggedElData2) {
    var _objectSpread2$1;
    return _objectSpread2(_objectSpread2({}, draggedElData2), {}, (_objectSpread2$1 = {}, _defineProperty(_objectSpread2$1, SHADOW_ITEM_MARKER_PROPERTY_NAME, true), _defineProperty(_objectSpread2$1, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID), _objectSpread2$1));
  }
  function handleDraggedEntered(e) {
    printDebug(function() {
      return ["dragged entered", e.currentTarget, e.detail];
    });
    var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
      printDebug(function() {
        return "ignoring dragged entered because drop is currently disabled";
      });
      return;
    }
    isDraggedOutsideOfAnyDz = false;
    items = items.filter(function(item) {
      return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
    });
    printDebug(function() {
      return "dragged entered items ".concat(toString(items));
    });
    if (originDropZone !== e.currentTarget) {
      var originZoneItems = dzToConfig.get(originDropZone).items;
      var newOriginZoneItems = originZoneItems.filter(function(item) {
        return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
      });
      dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
        trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
    var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
    shadowElDropZone = e.currentTarget;
    items.splice(shadowElIdx, 0, shadowElData);
    dispatchConsiderEvent(e.currentTarget, items, {
      trigger: TRIGGERS.DRAGGED_ENTERED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  function handleDraggedLeft(e) {
    if (!isWorkingOnPreviousDrag)
      return;
    printDebug(function() {
      return ["dragged left", e.currentTarget, e.detail];
    });
    var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), originalItems = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
      printDebug(function() {
        return "drop is currently disabled";
      });
      return;
    }
    var items = _toConsumableArray(originalItems);
    var shadowElIdx = findShadowElementIdx(items);
    if (shadowElIdx !== -1) {
      items.splice(shadowElIdx, 1);
    }
    var origShadowDz = shadowElDropZone;
    shadowElDropZone = void 0;
    var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
    if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
      printDebug(function() {
        return "dragged left all, putting shadow element back in the origin dz";
      });
      isDraggedOutsideOfAnyDz = true;
      shadowElDropZone = originDropZone;
      var originZoneItems = origShadowDz === originDropZone ? items : _toConsumableArray(dzToConfig.get(originDropZone).items);
      originZoneItems.splice(originIndex, 0, shadowElData);
      dispatchConsiderEvent(originDropZone, originZoneItems, {
        trigger: TRIGGERS.DRAGGED_LEFT_ALL,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    dispatchConsiderEvent(e.currentTarget, items, {
      trigger: TRIGGERS.DRAGGED_LEFT,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  function handleDraggedIsOverIndex(e) {
    printDebug(function() {
      return ["dragged is over index", e.currentTarget, e.detail];
    });
    var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), originalItems = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
    if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
      printDebug(function() {
        return "drop is currently disabled";
      });
      return;
    }
    var items = _toConsumableArray(originalItems);
    isDraggedOutsideOfAnyDz = false;
    var index = e.detail.indexObj.index;
    var shadowElIdx = findShadowElementIdx(items);
    if (shadowElIdx !== -1) {
      items.splice(shadowElIdx, 1);
    }
    items.splice(index, 0, shadowElData);
    dispatchConsiderEvent(e.currentTarget, items, {
      trigger: TRIGGERS.DRAGGED_OVER_INDEX,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  function handleMouseMove(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
  }
  function handleDrop() {
    printDebug(function() {
      return "dropped";
    });
    finalizingPreviousDrag = true;
    window.removeEventListener("mousemove", handleMouseMove);
    window.removeEventListener("touchmove", handleMouseMove);
    window.removeEventListener("mouseup", handleDrop);
    window.removeEventListener("touchend", handleDrop);
    unWatchDraggedElement();
    moveDraggedElementToWasDroppedState(draggedEl);
    if (!shadowElDropZone) {
      printDebug(function() {
        return "element was dropped right after it left origin but before entering somewhere else";
      });
      shadowElDropZone = originDropZone;
    }
    printDebug(function() {
      return ["dropped in dz", shadowElDropZone];
    });
    var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
    styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    var shadowElIdx = findShadowElementIdx(items);
    if (shadowElIdx === -1) {
      if (shadowElDropZone === originDropZone) {
        shadowElIdx = originIndex;
      }
    }
    items = items.map(function(item) {
      return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
    });
    function finalizeWithinZone() {
      unlockOriginDzMinDimensions();
      dispatchFinalizeEvent(shadowElDropZone, items, {
        trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
      if (shadowElDropZone !== originDropZone) {
        dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
          trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
          id: draggedElData[ITEM_ID_KEY],
          source: SOURCES.POINTER
        });
      }
      if (shadowElIdx !== -1)
        unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
      cleanupPostDrop();
    }
    animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
  }
  function animateDraggedToFinalPosition(shadowElIdx, callback) {
    var shadowElRect = shadowElIdx > -1 ? getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]) : getBoundingRectNoTransforms(shadowElDropZone);
    var newTransform = {
      x: shadowElRect.left - parseFloat(draggedEl.style.left),
      y: shadowElRect.top - parseFloat(draggedEl.style.top)
    };
    var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
    var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
    draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
    draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
    window.setTimeout(callback, dropAnimationDurationMs);
  }
  function scheduleDZForRemovalAfterDrop(dz, destroy) {
    scheduledForRemovalAfterDrop.push({
      dz,
      destroy
    });
    window.requestAnimationFrame(function() {
      hideElement(dz);
      document.body.appendChild(dz);
    });
  }
  function cleanupPostDrop() {
    draggedEl.remove();
    originalDragTarget.remove();
    if (scheduledForRemovalAfterDrop.length) {
      printDebug(function() {
        return ["will destroy zones that were removed during drag", scheduledForRemovalAfterDrop];
      });
      scheduledForRemovalAfterDrop.forEach(function(_ref) {
        var dz = _ref.dz, destroy = _ref.destroy;
        destroy();
        dz.remove();
      });
      scheduledForRemovalAfterDrop = [];
    }
    draggedEl = void 0;
    originalDragTarget = void 0;
    draggedElData = void 0;
    draggedElType = void 0;
    originDropZone = void 0;
    originIndex = void 0;
    shadowElData = void 0;
    shadowElDropZone = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
    isWorkingOnPreviousDrag = false;
    finalizingPreviousDrag = false;
    unlockOriginDzMinDimensions = void 0;
    isDraggedOutsideOfAnyDz = false;
  }
  function dndzone(node, options) {
    var initialized = false;
    var config = {
      items: void 0,
      type: void 0,
      flipDurationMs: 0,
      dragDisabled: false,
      morphDisabled: false,
      dropFromOthersDisabled: false,
      dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
      dropTargetClasses: [],
      transformDraggedElement: function transformDraggedElement() {
      },
      centreDraggedOnCursor: false
    };
    printDebug(function() {
      return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
        node
      }];
    });
    var elToIdx = /* @__PURE__ */ new Map();
    function addMaybeListeners() {
      window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
        passive: false
      });
      window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
        passive: false,
        capture: false
      });
      window.addEventListener("mouseup", handleFalseAlarm, {
        passive: false
      });
      window.addEventListener("touchend", handleFalseAlarm, {
        passive: false
      });
    }
    function removeMaybeListeners() {
      window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
      window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
      window.removeEventListener("mouseup", handleFalseAlarm);
      window.removeEventListener("touchend", handleFalseAlarm);
    }
    function handleFalseAlarm(e) {
      removeMaybeListeners();
      originalDragTarget = void 0;
      dragStartMousePosition = void 0;
      currentMousePosition = void 0;
      if (e.type === "touchend") {
        e.target.click();
      }
    }
    function handleMouseMoveMaybeDragStart(e) {
      e.preventDefault();
      var c = e.touches ? e.touches[0] : e;
      currentMousePosition = {
        x: c.clientX,
        y: c.clientY
      };
      if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
        removeMaybeListeners();
        handleDragStart();
      }
    }
    function handleMouseDown(e) {
      if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
        printDebug(function() {
          return "won't initiate drag on a nested input element";
        });
        return;
      }
      if (e.button) {
        printDebug(function() {
          return "ignoring none left click button: ".concat(e.button);
        });
        return;
      }
      if (isWorkingOnPreviousDrag) {
        printDebug(function() {
          return "cannot start a new drag before finalizing previous one";
        });
        return;
      }
      e.preventDefault();
      e.stopPropagation();
      var c = e.touches ? e.touches[0] : e;
      dragStartMousePosition = {
        x: c.clientX,
        y: c.clientY
      };
      currentMousePosition = _objectSpread2({}, dragStartMousePosition);
      originalDragTarget = e.currentTarget;
      addMaybeListeners();
    }
    function handleDragStart() {
      printDebug(function() {
        return ["drag start config: ".concat(toString(config)), originalDragTarget];
      });
      isWorkingOnPreviousDrag = true;
      var currentIdx = elToIdx.get(originalDragTarget);
      originIndex = currentIdx;
      originDropZone = originalDragTarget.parentElement;
      var rootNode = originDropZone.closest("dialog") || originDropZone.getRootNode();
      var originDropZoneRoot = rootNode.body || rootNode;
      var originalItems = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
      var items = _toConsumableArray(originalItems);
      draggedElData = items[currentIdx];
      draggedElType = type;
      shadowElData = createShadowElData(draggedElData);
      draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
      originalDragTarget.setAttribute(ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE, true);
      function keepOriginalElementInDom() {
        if (!draggedEl.parentElement) {
          originDropZoneRoot.appendChild(draggedEl);
          draggedEl.focus();
          watchDraggedElement();
          hideElement(originalDragTarget);
          originDropZoneRoot.appendChild(originalDragTarget);
          shadowElData[ITEM_ID_KEY] = draggedElData[ITEM_ID_KEY];
        } else {
          window.requestAnimationFrame(keepOriginalElementInDom);
        }
      }
      window.requestAnimationFrame(keepOriginalElementInDom);
      styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
        return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
      }), function(dz) {
        return dzToConfig.get(dz).dropTargetStyle;
      }, function(dz) {
        return dzToConfig.get(dz).dropTargetClasses;
      });
      items.splice(currentIdx, 1, shadowElData);
      unlockOriginDzMinDimensions = preventShrinking(originDropZone);
      dispatchConsiderEvent(originDropZone, items, {
        trigger: TRIGGERS.DRAG_STARTED,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
      window.addEventListener("mousemove", handleMouseMove, {
        passive: false
      });
      window.addEventListener("touchmove", handleMouseMove, {
        passive: false,
        capture: false
      });
      window.addEventListener("mouseup", handleDrop, {
        passive: false
      });
      window.addEventListener("touchend", handleDrop, {
        passive: false
      });
    }
    function configure(_ref2) {
      var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? void 0 : _ref2$items, _ref2$flipDurationMs = _ref2.flipDurationMs, dropAnimationDurationMs = _ref2$flipDurationMs === void 0 ? 0 : _ref2$flipDurationMs, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$morphDisabled = _ref2.morphDisabled, morphDisabled = _ref2$morphDisabled === void 0 ? false : _ref2$morphDisabled, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$transformDragge = _ref2.transformDraggedElement, transformDraggedElement = _ref2$transformDragge === void 0 ? function() {
      } : _ref2$transformDragge, _ref2$centreDraggedOn = _ref2.centreDraggedOnCursor, centreDraggedOnCursor = _ref2$centreDraggedOn === void 0 ? false : _ref2$centreDraggedOn;
      config.dropAnimationDurationMs = dropAnimationDurationMs;
      if (config.type && newType !== config.type) {
        unregisterDropZone(node, config.type);
      }
      config.type = newType;
      config.items = _toConsumableArray(items);
      config.dragDisabled = dragDisabled;
      config.morphDisabled = morphDisabled;
      config.transformDraggedElement = transformDraggedElement;
      config.centreDraggedOnCursor = centreDraggedOnCursor;
      if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
        styleInactiveDropZones([node], function() {
          return config.dropTargetStyle;
        }, function() {
          return dropTargetClasses;
        });
        styleActiveDropZones([node], function() {
          return dropTargetStyle;
        }, function() {
          return dropTargetClasses;
        });
      }
      config.dropTargetStyle = dropTargetStyle;
      config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
      function getConfigProp(dz, propName) {
        return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
      }
      if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
        if (dropFromOthersDisabled) {
          styleInactiveDropZones([node], function(dz) {
            return getConfigProp(dz, "dropTargetStyle");
          }, function(dz) {
            return getConfigProp(dz, "dropTargetClasses");
          });
        } else {
          styleActiveDropZones([node], function(dz) {
            return getConfigProp(dz, "dropTargetStyle");
          }, function(dz) {
            return getConfigProp(dz, "dropTargetClasses");
          });
        }
      }
      config.dropFromOthersDisabled = dropFromOthersDisabled;
      dzToConfig.set(node, config);
      registerDropZone(node, newType);
      var shadowElIdx = findShadowElementIdx(config.items);
      for (var idx = 0; idx < node.children.length; idx++) {
        var draggableEl = node.children[idx];
        styleDraggable(draggableEl, dragDisabled);
        if (idx === shadowElIdx) {
          if (!morphDisabled) {
            morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y);
          }
          config.transformDraggedElement(draggedEl, draggedElData, idx);
          decorateShadowEl(draggableEl);
          continue;
        }
        draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
        draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
        if (!dragDisabled) {
          draggableEl.addEventListener("mousedown", handleMouseDown);
          draggableEl.addEventListener("touchstart", handleMouseDown);
          elToMouseDownListener.set(draggableEl, handleMouseDown);
        }
        elToIdx.set(draggableEl, idx);
        if (!initialized) {
          initialized = true;
        }
      }
    }
    configure(options);
    return {
      update: function update2(newOptions) {
        printDebug(function() {
          return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
        });
        configure(newOptions);
      },
      destroy: function destroy() {
        function destroyDz() {
          printDebug(function() {
            return "pointer dndzone will destroy";
          });
          unregisterDropZone(node, dzToConfig.get(node).type);
          dzToConfig["delete"](node);
        }
        if (isWorkingOnPreviousDrag && !node.closest("[".concat(ORIGINAL_DRAGGED_ITEM_MARKER_ATTRIBUTE, "]"))) {
          printDebug(function() {
            return "pointer dndzone will be scheduled for destruction";
          });
          scheduleDZForRemovalAfterDrop(node, destroyDz);
        } else {
          destroyDz();
        }
      }
    };
  }
  var _ID_TO_INSTRUCTION;
  var INSTRUCTION_IDs = {
    DND_ZONE_ACTIVE: "dnd-zone-active",
    DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
  };
  var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
  var ALERT_DIV_ID = "dnd-action-aria-alert";
  var alertsDiv;
  function initAriaOnBrowser() {
    if (alertsDiv) {
      return;
    }
    alertsDiv = document.createElement("div");
    (function initAlertsDiv() {
      alertsDiv.id = ALERT_DIV_ID;
      alertsDiv.style.position = "fixed";
      alertsDiv.style.bottom = "0";
      alertsDiv.style.left = "0";
      alertsDiv.style.zIndex = "-5";
      alertsDiv.style.opacity = "0";
      alertsDiv.style.height = "0";
      alertsDiv.style.width = "0";
      alertsDiv.setAttribute("role", "alert");
    })();
    document.body.prepend(alertsDiv);
    Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), id2 = _ref2[0], txt = _ref2[1];
      return document.body.prepend(instructionToHiddenDiv(id2, txt));
    });
  }
  function initAria() {
    if (isOnServer)
      return null;
    if (document.readyState === "complete") {
      initAriaOnBrowser();
    } else {
      window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
    }
    return _objectSpread2({}, INSTRUCTION_IDs);
  }
  function destroyAria() {
    if (isOnServer || !alertsDiv)
      return;
    Object.keys(ID_TO_INSTRUCTION).forEach(function(id2) {
      var _document$getElementB;
      return (_document$getElementB = document.getElementById(id2)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();
    });
    alertsDiv.remove();
    alertsDiv = void 0;
  }
  function instructionToHiddenDiv(id2, txt) {
    var div = document.createElement("div");
    div.id = id2;
    div.innerHTML = "<p>".concat(txt, "</p>");
    div.style.display = "none";
    div.style.position = "fixed";
    div.style.zIndex = "-5";
    return div;
  }
  function alertToScreenReader(txt) {
    if (isOnServer)
      return;
    if (!alertsDiv) {
      initAriaOnBrowser();
    }
    alertsDiv.innerHTML = "";
    var alertText = document.createTextNode(txt);
    alertsDiv.appendChild(alertText);
    alertsDiv.style.display = "none";
    alertsDiv.style.display = "inline";
  }
  var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
  var DEFAULT_DROP_TARGET_STYLE$1 = {
    outline: "rgba(255, 255, 102, 0.7) solid 2px"
  };
  var isDragging = false;
  var draggedItemType;
  var focusedDz;
  var focusedDzLabel = "";
  var focusedItem;
  var focusedItemId;
  var focusedItemLabel = "";
  var allDragTargets = /* @__PURE__ */ new WeakSet();
  var elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
  var elToFocusListeners = /* @__PURE__ */ new WeakMap();
  var dzToHandles = /* @__PURE__ */ new Map();
  var dzToConfig$1 = /* @__PURE__ */ new Map();
  var typeToDropZones$1 = /* @__PURE__ */ new Map();
  var INSTRUCTION_IDs$1;
  function registerDropZone$1(dropZoneEl, type) {
    printDebug(function() {
      return "registering drop-zone if absent";
    });
    if (typeToDropZones$1.size === 0) {
      printDebug(function() {
        return "adding global keydown and click handlers";
      });
      INSTRUCTION_IDs$1 = initAria();
      window.addEventListener("keydown", globalKeyDownHandler);
      window.addEventListener("click", globalClickHandler);
    }
    if (!typeToDropZones$1.has(type)) {
      typeToDropZones$1.set(type, /* @__PURE__ */ new Set());
    }
    if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
      typeToDropZones$1.get(type).add(dropZoneEl);
      incrementActiveDropZoneCount();
    }
  }
  function unregisterDropZone$1(dropZoneEl, type) {
    printDebug(function() {
      return "unregistering drop-zone";
    });
    if (focusedDz === dropZoneEl) {
      handleDrop$1();
    }
    typeToDropZones$1.get(type)["delete"](dropZoneEl);
    decrementActiveDropZoneCount();
    if (typeToDropZones$1.get(type).size === 0) {
      typeToDropZones$1["delete"](type);
    }
    if (typeToDropZones$1.size === 0) {
      printDebug(function() {
        return "removing global keydown and click handlers";
      });
      window.removeEventListener("keydown", globalKeyDownHandler);
      window.removeEventListener("click", globalClickHandler);
      INSTRUCTION_IDs$1 = void 0;
      destroyAria();
    }
  }
  function globalKeyDownHandler(e) {
    if (!isDragging)
      return;
    switch (e.key) {
      case "Escape": {
        handleDrop$1();
        break;
      }
    }
  }
  function globalClickHandler() {
    if (!isDragging)
      return;
    if (!allDragTargets.has(document.activeElement)) {
      printDebug(function() {
        return "clicked outside of any draggable";
      });
      handleDrop$1();
    }
  }
  function handleZoneFocus(e) {
    printDebug(function() {
      return "zone focus";
    });
    if (!isDragging)
      return;
    var newlyFocusedDz = e.currentTarget;
    if (newlyFocusedDz === focusedDz)
      return;
    focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
    var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
    var originItem = originItems.find(function(item) {
      return item[ITEM_ID_KEY] === focusedItemId;
    });
    var originIdx = originItems.indexOf(originItem);
    var itemToMove = originItems.splice(originIdx, 1)[0];
    var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
    if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
      targetItems.push(itemToMove);
      if (!autoAriaDisabled) {
        alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
      }
    } else {
      targetItems.unshift(itemToMove);
      if (!autoAriaDisabled) {
        alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
      }
    }
    var dzFrom = focusedDz;
    dispatchFinalizeEvent(dzFrom, originItems, {
      trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
      trigger: TRIGGERS.DROPPED_INTO_ZONE,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    focusedDz = newlyFocusedDz;
  }
  function triggerAllDzsUpdate() {
    dzToHandles.forEach(function(_ref, dz) {
      var update2 = _ref.update;
      return update2(dzToConfig$1.get(dz));
    });
  }
  function handleDrop$1() {
    var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    printDebug(function() {
      return "drop";
    });
    if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
      alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
    }
    if (allDragTargets.has(document.activeElement)) {
      document.activeElement.blur();
    }
    if (dispatchConsider) {
      dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
        trigger: TRIGGERS.DRAG_STOPPED,
        id: focusedItemId,
        source: SOURCES.KEYBOARD
      });
    }
    styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    focusedItem = null;
    focusedItemId = null;
    focusedItemLabel = "";
    draggedItemType = null;
    focusedDz = null;
    focusedDzLabel = "";
    isDragging = false;
    triggerAllDzsUpdate();
  }
  function dndzone$1(node, options) {
    var config = {
      items: void 0,
      type: void 0,
      dragDisabled: false,
      zoneTabIndex: 0,
      zoneItemTabIndex: 0,
      dropFromOthersDisabled: false,
      dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
      dropTargetClasses: [],
      autoAriaDisabled: false
    };
    function swap(arr, i, j) {
      if (arr.length <= 1)
        return;
      arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
    }
    function handleKeyDown(e) {
      printDebug(function() {
        return ["handling key down", e.key];
      });
      switch (e.key) {
        case "Enter":
        case " ": {
          if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          if (isDragging) {
            handleDrop$1();
          } else {
            handleDragStart(e);
          }
          break;
        }
        case "ArrowDown":
        case "ArrowRight": {
          if (!isDragging)
            return;
          e.preventDefault();
          e.stopPropagation();
          var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
          var children2 = Array.from(node.children);
          var idx = children2.indexOf(e.currentTarget);
          printDebug(function() {
            return ["arrow down", idx];
          });
          if (idx < children2.length - 1) {
            if (!config.autoAriaDisabled) {
              alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
            }
            swap(items, idx, idx + 1);
            dispatchFinalizeEvent(node, items, {
              trigger: TRIGGERS.DROPPED_INTO_ZONE,
              id: focusedItemId,
              source: SOURCES.KEYBOARD
            });
          }
          break;
        }
        case "ArrowUp":
        case "ArrowLeft": {
          if (!isDragging)
            return;
          e.preventDefault();
          e.stopPropagation();
          var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
          var _children = Array.from(node.children);
          var _idx = _children.indexOf(e.currentTarget);
          printDebug(function() {
            return ["arrow up", _idx];
          });
          if (_idx > 0) {
            if (!config.autoAriaDisabled) {
              alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
            }
            swap(_items, _idx, _idx - 1);
            dispatchFinalizeEvent(node, _items, {
              trigger: TRIGGERS.DROPPED_INTO_ZONE,
              id: focusedItemId,
              source: SOURCES.KEYBOARD
            });
          }
          break;
        }
      }
    }
    function handleDragStart(e) {
      printDebug(function() {
        return "drag start";
      });
      setCurrentFocusedItem(e.currentTarget);
      focusedDz = node;
      draggedItemType = config.type;
      isDragging = true;
      var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
        return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
      });
      styleActiveDropZones(dropTargets, function(dz) {
        return dzToConfig$1.get(dz).dropTargetStyle;
      }, function(dz) {
        return dzToConfig$1.get(dz).dropTargetClasses;
      });
      if (!config.autoAriaDisabled) {
        var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
        if (dropTargets.length > 1) {
          msg += ", or tab to another list in order to move the item into it";
        }
        alertToScreenReader(msg);
      }
      dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
        trigger: TRIGGERS.DRAG_STARTED,
        id: focusedItemId,
        source: SOURCES.KEYBOARD
      });
      triggerAllDzsUpdate();
    }
    function handleClick(e) {
      if (!isDragging)
        return;
      if (e.currentTarget === focusedItem)
        return;
      e.stopPropagation();
      handleDrop$1(false);
      handleDragStart(e);
    }
    function setCurrentFocusedItem(draggableEl) {
      var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
      var children2 = Array.from(node.children);
      var focusedItemIdx = children2.indexOf(draggableEl);
      focusedItem = draggableEl;
      focusedItem.tabIndex = config.zoneItemTabIndex;
      focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
      focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
    }
    function configure(_ref2) {
      var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$zoneItemTabInde = _ref2.zoneItemTabIndex, zoneItemTabIndex = _ref2$zoneItemTabInde === void 0 ? 0 : _ref2$zoneItemTabInde, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
      config.items = _toConsumableArray(items);
      config.dragDisabled = dragDisabled;
      config.dropFromOthersDisabled = dropFromOthersDisabled;
      config.zoneTabIndex = zoneTabIndex;
      config.zoneItemTabIndex = zoneItemTabIndex;
      config.dropTargetStyle = dropTargetStyle;
      config.dropTargetClasses = dropTargetClasses;
      config.autoAriaDisabled = autoAriaDisabled;
      if (config.type && newType !== config.type) {
        unregisterDropZone$1(node, config.type);
      }
      config.type = newType;
      registerDropZone$1(node, newType);
      if (!autoAriaDisabled) {
        node.setAttribute("aria-disabled", dragDisabled);
        node.setAttribute("role", "list");
        node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
      }
      dzToConfig$1.set(node, config);
      if (isDragging) {
        node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
      } else {
        node.tabIndex = config.zoneTabIndex;
      }
      node.addEventListener("focus", handleZoneFocus);
      var _loop = function _loop2(i2) {
        var draggableEl = node.children[i2];
        allDragTargets.add(draggableEl);
        draggableEl.tabIndex = isDragging ? -1 : config.zoneItemTabIndex;
        if (!autoAriaDisabled) {
          draggableEl.setAttribute("role", "listitem");
        }
        draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
        draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
        if (!dragDisabled) {
          draggableEl.addEventListener("keydown", handleKeyDown);
          elToKeyDownListeners.set(draggableEl, handleKeyDown);
          draggableEl.addEventListener("click", handleClick);
          elToFocusListeners.set(draggableEl, handleClick);
        }
        if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
          printDebug(function() {
            return ["focusing on", {
              i: i2,
              focusedItemId
            }];
          });
          focusedItem = draggableEl;
          focusedItem.tabIndex = config.zoneItemTabIndex;
          draggableEl.focus();
        }
      };
      for (var i = 0; i < node.children.length; i++) {
        _loop(i);
      }
    }
    configure(options);
    var handles = {
      update: function update2(newOptions) {
        printDebug(function() {
          return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
        });
        configure(newOptions);
      },
      destroy: function destroy() {
        printDebug(function() {
          return "keyboard dndzone will destroy";
        });
        unregisterDropZone$1(node, config.type);
        dzToConfig$1["delete"](node);
        dzToHandles["delete"](node);
      }
    };
    dzToHandles.set(node, handles);
    return handles;
  }
  var _excluded = ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "zoneItemTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"];
  function dndzone$2(node, options) {
    if (shouldIgnoreZone(node)) {
      return {
        update: function update2() {
        },
        destroy: function destroy() {
        }
      };
    }
    validateOptions(options);
    var pointerZone = dndzone(node, options);
    var keyboardZone = dndzone$1(node, options);
    return {
      update: function update2(newOptions) {
        validateOptions(newOptions);
        pointerZone.update(newOptions);
        keyboardZone.update(newOptions);
      },
      destroy: function destroy() {
        pointerZone.destroy();
        keyboardZone.destroy();
      }
    };
  }
  function shouldIgnoreZone(node) {
    return !!node.closest("[".concat(SHADOW_ELEMENT_HINT_ATTRIBUTE_NAME, '="true"]'));
  }
  function validateOptions(options) {
    var items = options.items, flipDurationMs2 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, zoneItemTabIndex = options.zoneItemTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, _excluded);
    if (Object.keys(rest).length > 0) {
      console.warn("dndzone will ignore unknown options", rest);
    }
    if (!items) {
      throw new Error("no 'items' key provided to dndzone");
    }
    var itemWithMissingId = items.find(function(item) {
      return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
    });
    if (itemWithMissingId) {
      throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
    }
    if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
      throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
    }
    if (zoneTabIndex && !isInt(zoneTabIndex)) {
      throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
    }
    if (zoneItemTabIndex && !isInt(zoneItemTabIndex)) {
      throw new Error("zoneItemTabIndex should be a number but instead it is a ".concat(_typeof(zoneItemTabIndex), ", ").concat(toString(zoneItemTabIndex)));
    }
  }
  function isInt(value) {
    return !isNaN(value) && function(x) {
      return (x | 0) === x;
    }(parseFloat(value));
  }
  function createStore(initialValue) {
    var _val = initialValue;
    var subs = /* @__PURE__ */ new Set();
    return {
      get: function get2() {
        return _val;
      },
      set: function set(newVal) {
        _val = newVal;
        Array.from(subs).forEach(function(cb) {
          return cb(_val);
        });
      },
      subscribe: function subscribe2(cb) {
        subs.add(cb);
        cb(_val);
      },
      unsubscribe: function unsubscribe(cb) {
        subs["delete"](cb);
      }
    };
  }
  var isItemsDragDisabled = createStore(true);

  // svelte/ConfirmDeletionModal.svelte
  var ConfirmDeletionModal_exports = {};
  __export(ConfirmDeletionModal_exports, {
    default: () => ConfirmDeletionModal_default
  });
  var file16 = "svelte/ConfirmDeletionModal.svelte";
  function create_fragment50(ctx) {
    let dialog_1;
    let div1;
    let p;
    let textContent = "Confirm Deletion";
    let t1;
    let div0;
    let button0;
    let textContent_1 = "Cancel";
    let t3;
    let button1;
    let textContent_2 = "Delete";
    let clickOutside_action;
    let focusTrap_action;
    let dialog_1_class_value;
    let mounted;
    let dispose;
    const block = {
      c: function create7() {
        dialog_1 = element("dialog");
        div1 = element("div");
        p = element("p");
        p.textContent = textContent;
        t1 = space();
        div0 = element("div");
        button0 = element("button");
        button0.textContent = textContent_1;
        t3 = space();
        button1 = element("button");
        button1.textContent = textContent_2;
        this.h();
      },
      l: function claim(nodes) {
        dialog_1 = claim_element(nodes, "DIALOG", { class: true });
        var dialog_1_nodes = children(dialog_1);
        div1 = claim_element(dialog_1_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        p = claim_element(div1_nodes, "P", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(p) !== "svelte-5h1eb4")
          p.textContent = textContent;
        t1 = claim_space(div1_nodes);
        div0 = claim_element(div1_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        button0 = claim_element(div0_nodes, "BUTTON", {
          "data-focusindex": true,
          class: true,
          ["data-svelte-h"]: true
        });
        if (get_svelte_dataset(button0) !== "svelte-1yakxl7")
          button0.textContent = textContent_1;
        t3 = claim_space(div0_nodes);
        button1 = claim_element(div0_nodes, "BUTTON", {
          "data-focusindex": true,
          class: true,
          ["data-svelte-h"]: true
        });
        if (get_svelte_dataset(button1) !== "svelte-tpdj9t")
          button1.textContent = textContent_2;
        div0_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        dialog_1_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(p, "class", "px-4 py-2 font-bold border-b border-neutral rounded-none mb-2");
        add_location(p, file16, 40, 4, 802);
        attr_dev(button0, "data-focusindex", "0");
        attr_dev(button0, "class", "btn border border-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(button0, file16, 43, 6, 941);
        attr_dev(button1, "data-focusindex", "1");
        attr_dev(button1, "class", "btn btn-error border border-neutral");
        add_location(button1, file16, 54, 6, 1214);
        attr_dev(div0, "class", "flex justify-around");
        add_location(div0, file16, 42, 4, 901);
        attr_dev(div1, "class", "text-lg");
        add_location(div1, file16, 32, 2, 628);
        attr_dev(dialog_1, "class", dialog_1_class_value = /*menuClass*/
        ctx[1] + " menu bg-base-200 border border-neutral rounded-box");
        add_location(dialog_1, file16, 24, 0, 446);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, dialog_1, anchor);
        append_hydration_dev(dialog_1, div1);
        append_hydration_dev(div1, p);
        append_hydration_dev(div1, t1);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div0, button0);
        append_hydration_dev(div0, t3);
        append_hydration_dev(div0, button1);
        ctx[11](dialog_1);
        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              "click",
              /*click_handler*/
              ctx[7],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              "click",
              /*click_handler_1*/
              ctx[8],
              false,
              false,
              false,
              false
            ),
            action_destroyer(clickOutside_action = clickOutside.call(
              null,
              div1,
              /*clickOutside_function*/
              ctx[9]
            )),
            action_destroyer(focusTrap_action = focusTrap.call(null, div1, {
              focusFirstElement: true,
              onEscape: (
                /*focusTrap_function*/
                ctx[10]
              )
            })),
            listen_dev(
              dialog_1,
              "close",
              /*close_handler*/
              ctx[12],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (clickOutside_action && is_function(clickOutside_action.update) && dirty & /*dialog*/
        8)
          clickOutside_action.update.call(
            null,
            /*clickOutside_function*/
            ctx2[9]
          );
        if (focusTrap_action && is_function(focusTrap_action.update) && dirty & /*dialog*/
        8)
          focusTrap_action.update.call(null, {
            focusFirstElement: true,
            onEscape: (
              /*focusTrap_function*/
              ctx2[10]
            )
          });
        if (dirty & /*menuClass*/
        2 && dialog_1_class_value !== (dialog_1_class_value = /*menuClass*/
        ctx2[1] + " menu bg-base-200 border border-neutral rounded-box")) {
          attr_dev(dialog_1, "class", dialog_1_class_value);
        }
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(dialog_1);
        }
        ctx[11](null);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment50.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance50($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $itemToProcessId;
    let $todoLists;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(4, $openedMenuId = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(5, $itemToProcessId = $$value));
    validate_store(todoLists, "todoLists");
    component_subscribe($$self, todoLists, ($$value) => $$invalidate(6, $todoLists = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ConfirmDeletionModal", slots, []);
    let { listId } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let { deleteItem } = $$props;
    let dialog;
    onMount(() => {
      dialog.showModal();
      return () => dialog.close();
    });
    $$self.$$.on_mount.push(function() {
      if (listId === void 0 && !("listId" in $$props || $$self.$$.bound[$$self.$$.props["listId"]])) {
        console.warn("<ConfirmDeletionModal> was created without expected prop 'listId'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<ConfirmDeletionModal> was created without expected prop 'menuClass'");
      }
      if (deleteItem === void 0 && !("deleteItem" in $$props || $$self.$$.bound[$$self.$$.props["deleteItem"]])) {
        console.warn("<ConfirmDeletionModal> was created without expected prop 'deleteItem'");
      }
    });
    const writable_props = ["listId", "menuClass", "deleteItem"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ConfirmDeletionModal> was created with unknown prop '${key}'`);
    });
    const click_handler = () => dialog.close();
    const click_handler_1 = () => {
      const list = $todoLists.find((list2) => list2.id === listId);
      deleteItem(list);
      dialog.close();
    };
    const clickOutside_function = () => dialog.close();
    const focusTrap_function = () => dialog.close();
    function dialog_1_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        dialog = $$value;
        $$invalidate(3, dialog);
      });
    }
    const close_handler = () => {
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
      set_store_value(itemToProcessId, $itemToProcessId = "", $itemToProcessId);
    };
    $$self.$$set = ($$props2) => {
      if ("listId" in $$props2)
        $$invalidate(0, listId = $$props2.listId);
      if ("menuClass" in $$props2)
        $$invalidate(1, menuClass2 = $$props2.menuClass);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
    };
    $$self.$capture_state = () => ({
      onMount,
      focusTrap,
      clickOutside,
      itemToProcessId,
      openedMenuId,
      todoLists,
      listId,
      menuClass: menuClass2,
      deleteItem,
      dialog,
      $openedMenuId,
      $itemToProcessId,
      $todoLists
    });
    $$self.$inject_state = ($$props2) => {
      if ("listId" in $$props2)
        $$invalidate(0, listId = $$props2.listId);
      if ("menuClass" in $$props2)
        $$invalidate(1, menuClass2 = $$props2.menuClass);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
      if ("dialog" in $$props2)
        $$invalidate(3, dialog = $$props2.dialog);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      listId,
      menuClass2,
      deleteItem,
      dialog,
      $openedMenuId,
      $itemToProcessId,
      $todoLists,
      click_handler,
      click_handler_1,
      clickOutside_function,
      focusTrap_function,
      dialog_1_binding,
      close_handler
    ];
  }
  var ConfirmDeletionModal = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance50, create_fragment50, safe_not_equal, { listId: 0, menuClass: 1, deleteItem: 2 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ConfirmDeletionModal",
        options,
        id: create_fragment50.name
      });
    }
    get listId() {
      throw new Error("<ConfirmDeletionModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set listId(value) {
      throw new Error("<ConfirmDeletionModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<ConfirmDeletionModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<ConfirmDeletionModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deleteItem() {
      throw new Error("<ConfirmDeletionModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deleteItem(value) {
      throw new Error("<ConfirmDeletionModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ConfirmDeletionModal_default = ConfirmDeletionModal;

  // svelte/ItemsContainer.svelte
  var ItemsContainer_exports = {};
  __export(ItemsContainer_exports, {
    default: () => ItemsContainer_default
  });
  var file17 = "svelte/ItemsContainer.svelte";
  function create_if_block10(ctx) {
    let div;
    let t_value = (
      /*emoticons*/
      ctx[6][
        /*emoticonIndex*/
        ctx[5]
      ] + ""
    );
    let t;
    let div_intro;
    const block = {
      c: function create7() {
        div = element("div");
        t = text(t_value);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        t = claim_text(div_nodes, t_value);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div, "class", "text-center text-6xl xs:text-7xl sm:text-8xl opacity-90");
        add_location(div, file17, 84, 2, 2050);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        append_hydration_dev(div, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*emoticonIndex*/
        32 && t_value !== (t_value = /*emoticons*/
        ctx2[6][
          /*emoticonIndex*/
          ctx2[5]
        ] + ""))
          set_data_dev(t, t_value);
      },
      i: function intro(local) {
        if (local) {
          if (!div_intro) {
            add_render_callback(() => {
              div_intro = create_in_transition(div, fade, { easing: sineIn });
              div_intro.start();
            });
          }
        }
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block10.name,
      type: "if",
      source: "(79:0) {#if !isDropdownOpened}",
      ctx
    });
    return block;
  }
  function create_fragment51(ctx) {
    let div3;
    let div1;
    let div0;
    let span0;
    let t0;
    let t1;
    let span1;
    let t2_value = (
      /*uncompletedCount*/
      (ctx[3] !== void 0 ? `${/*uncompletedCount*/
      ctx[3]} / ${/*totalCount*/
      ctx[2]}` : (
        /*totalCount*/
        ctx[2]
      )) + ""
    );
    let t2;
    let span1_title_value;
    let t3;
    let button;
    let chevrondown;
    let t4;
    let chevronup;
    let t5;
    let div2;
    let t6;
    let if_block_anchor;
    let current;
    let mounted;
    let dispose;
    chevrondown = new chevron_down_default({
      props: { class: "swap-off" },
      $$inline: true
    });
    chevronup = new chevron_up_default({
      props: { class: "swap-on" },
      $$inline: true
    });
    const default_slot_template = (
      /*#slots*/
      ctx[8].default
    );
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/
      ctx[7],
      null
    );
    let if_block = !/*isDropdownOpened*/
    ctx[0] && create_if_block10(ctx);
    const block = {
      c: function create7() {
        div3 = element("div");
        div1 = element("div");
        div0 = element("div");
        span0 = element("span");
        t0 = text(
          /*title*/
          ctx[1]
        );
        t1 = space();
        span1 = element("span");
        t2 = text(t2_value);
        t3 = space();
        button = element("button");
        create_component(chevrondown.$$.fragment);
        t4 = space();
        create_component(chevronup.$$.fragment);
        t5 = space();
        div2 = element("div");
        if (default_slot)
          default_slot.c();
        t6 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        this.h();
      },
      l: function claim(nodes) {
        div3 = claim_element(nodes, "DIV", { class: true });
        var div3_nodes = children(div3);
        div1 = claim_element(div3_nodes, "DIV", { class: true, style: true });
        var div1_nodes = children(div1);
        div0 = claim_element(div1_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        span0 = claim_element(div0_nodes, "SPAN", { style: true });
        var span0_nodes = children(span0);
        t0 = claim_text(
          span0_nodes,
          /*title*/
          ctx[1]
        );
        span0_nodes.forEach(detach_dev);
        t1 = claim_space(div0_nodes);
        span1 = claim_element(div0_nodes, "SPAN", { title: true, class: true });
        var span1_nodes = children(span1);
        t2 = claim_text(span1_nodes, t2_value);
        span1_nodes.forEach(detach_dev);
        div0_nodes.forEach(detach_dev);
        t3 = claim_space(div1_nodes);
        button = claim_element(div1_nodes, "BUTTON", {
          title: true,
          "aria-label": true,
          class: true
        });
        var button_nodes = children(button);
        claim_component(chevrondown.$$.fragment, button_nodes);
        t4 = claim_space(button_nodes);
        claim_component(chevronup.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        t5 = claim_space(div3_nodes);
        div2 = claim_element(div3_nodes, "DIV", { class: true });
        var div2_nodes = children(div2);
        if (default_slot)
          default_slot.l(div2_nodes);
        div2_nodes.forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        t6 = claim_space(nodes);
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
        this.h();
      },
      h: function hydrate() {
        set_style(span0, "word-break", "break-word");
        add_location(span0, file17, 50, 6, 1077);
        attr_dev(span1, "title", span1_title_value = /*uncompletedCount*/
        ctx[3] !== void 0 ? `${/*uncompletedCount*/
        ctx[3]} Uncompleted / ${/*totalCount*/
        ctx[2]} Total` : `${/*totalCount*/
        ctx[2]} Lists`);
        attr_dev(span1, "class", "badge badge-neutral shrink-0");
        add_location(span1, file17, 52, 6, 1137);
        attr_dev(div0, "class", "flex gap-2 items-center text-xl font-medium mr-5");
        add_location(div0, file17, 49, 4, 1008);
        attr_dev(button, "title", "Toggle collapse.");
        attr_dev(button, "aria-label", "Toggle collapse.");
        attr_dev(button, "class", "swap swap-rotate absolute top-[18px] right-5 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        toggle_class(
          button,
          "swap-active",
          /*isDropdownOpened*/
          ctx[0]
        );
        add_location(button, file17, 63, 4, 1499);
        attr_dev(div1, "class", "collapse-title relative");
        set_style(div1, "cursor", "default");
        add_location(div1, file17, 48, 2, 941);
        attr_dev(div2, "class", "collapse-content");
        add_location(div2, file17, 78, 2, 1963);
        attr_dev(div3, "class", "collapse border border-neutral mt-2 mb-20 overflow-visible");
        toggle_class(
          div3,
          "collapse-open",
          /*isDropdownOpened*/
          ctx[0]
        );
        set_style(
          div3,
          "visibility",
          /*isScrollPositionRestored*/
          ctx[4] ? "visible" : "hidden"
        );
        add_location(div3, file17, 42, 0, 726);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div3, anchor);
        append_hydration_dev(div3, div1);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div0, span0);
        append_hydration_dev(span0, t0);
        append_hydration_dev(div0, t1);
        append_hydration_dev(div0, span1);
        append_hydration_dev(span1, t2);
        append_hydration_dev(div1, t3);
        append_hydration_dev(div1, button);
        mount_component(chevrondown, button, null);
        append_hydration_dev(button, t4);
        mount_component(chevronup, button, null);
        append_hydration_dev(div3, t5);
        append_hydration_dev(div3, div2);
        if (default_slot) {
          default_slot.m(div2, null);
        }
        insert_hydration_dev(target, t6, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[9],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (!current || dirty & /*title*/
        2)
          set_data_dev(
            t0,
            /*title*/
            ctx2[1]
          );
        if ((!current || dirty & /*uncompletedCount, totalCount*/
        12) && t2_value !== (t2_value = /*uncompletedCount*/
        (ctx2[3] !== void 0 ? `${/*uncompletedCount*/
        ctx2[3]} / ${/*totalCount*/
        ctx2[2]}` : (
          /*totalCount*/
          ctx2[2]
        )) + ""))
          set_data_dev(t2, t2_value);
        if (!current || dirty & /*uncompletedCount, totalCount*/
        12 && span1_title_value !== (span1_title_value = /*uncompletedCount*/
        ctx2[3] !== void 0 ? `${/*uncompletedCount*/
        ctx2[3]} Uncompleted / ${/*totalCount*/
        ctx2[2]} Total` : `${/*totalCount*/
        ctx2[2]} Lists`)) {
          attr_dev(span1, "title", span1_title_value);
        }
        if (!current || dirty & /*isDropdownOpened*/
        1) {
          toggle_class(
            button,
            "swap-active",
            /*isDropdownOpened*/
            ctx2[0]
          );
        }
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/
          128)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx2,
              /*$$scope*/
              ctx2[7],
              !current ? get_all_dirty_from_scope(
                /*$$scope*/
                ctx2[7]
              ) : get_slot_changes(
                default_slot_template,
                /*$$scope*/
                ctx2[7],
                dirty,
                null
              ),
              null
            );
          }
        }
        if (!current || dirty & /*isDropdownOpened*/
        1) {
          toggle_class(
            div3,
            "collapse-open",
            /*isDropdownOpened*/
            ctx2[0]
          );
        }
        if (dirty & /*isScrollPositionRestored*/
        16) {
          set_style(
            div3,
            "visibility",
            /*isScrollPositionRestored*/
            ctx2[4] ? "visible" : "hidden"
          );
        }
        if (!/*isDropdownOpened*/
        ctx2[0]) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*isDropdownOpened*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block10(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(chevrondown.$$.fragment, local);
        transition_in(chevronup.$$.fragment, local);
        transition_in(default_slot, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(chevrondown.$$.fragment, local);
        transition_out(chevronup.$$.fragment, local);
        transition_out(default_slot, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div3);
          detach_dev(t6);
          detach_dev(if_block_anchor);
        }
        destroy_component(chevrondown);
        destroy_component(chevronup);
        if (default_slot)
          default_slot.d(detaching);
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment51.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance51($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ItemsContainer", slots, ["default"]);
    let { title } = $$props;
    let { totalCount } = $$props;
    let { uncompletedCount = void 0 } = $$props;
    let { isDropdownOpened } = $$props;
    let { isScrollPositionRestored } = $$props;
    const emoticons = [
      "(\u25D5\u203F\u25D5)",
      "(\uFF3E\u25BD\uFF3E)",
      "\u25C9\u203F\u25C9",
      "\u2256\u203F\u2256",
      "\u0D2E\u25E1\u0D2E",
      "\u2570(\u2594\u2200\u2594)\u256F",
      "\u2299\u25BD\u2299",
      "\u020F.\u032E\u020F",
      "\u25D9\u203F\u25D9",
      "(^\u4EBA^)",
      "\u0669(\u25D5\u203F\u25D5\uFF61)\u06F6",
      "\u0D2E\u25E1\u0D2E",
      "(*^\u203F^*)",
      "( \u203E\u0301 \u25E1 \u203E\u0301 )",
      "(\uFFE3\u4E2A\uFFE3)",
      "(*\uA4A6\u0EB4\uA4B3\uA4A6\u0EB5)",
      "(\xAC\u203F\xAC)",
      "(\u2022\u203F\u2022)"
    ];
    let emoticonIndex = 0;
    $$self.$$.on_mount.push(function() {
      if (title === void 0 && !("title" in $$props || $$self.$$.bound[$$self.$$.props["title"]])) {
        console.warn("<ItemsContainer> was created without expected prop 'title'");
      }
      if (totalCount === void 0 && !("totalCount" in $$props || $$self.$$.bound[$$self.$$.props["totalCount"]])) {
        console.warn("<ItemsContainer> was created without expected prop 'totalCount'");
      }
      if (isDropdownOpened === void 0 && !("isDropdownOpened" in $$props || $$self.$$.bound[$$self.$$.props["isDropdownOpened"]])) {
        console.warn("<ItemsContainer> was created without expected prop 'isDropdownOpened'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console.warn("<ItemsContainer> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = [
      "title",
      "totalCount",
      "uncompletedCount",
      "isDropdownOpened",
      "isScrollPositionRestored"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ItemsContainer> was created with unknown prop '${key}'`);
    });
    const click_handler = () => $$invalidate(0, isDropdownOpened = !isDropdownOpened);
    $$self.$$set = ($$props2) => {
      if ("title" in $$props2)
        $$invalidate(1, title = $$props2.title);
      if ("totalCount" in $$props2)
        $$invalidate(2, totalCount = $$props2.totalCount);
      if ("uncompletedCount" in $$props2)
        $$invalidate(3, uncompletedCount = $$props2.uncompletedCount);
      if ("isDropdownOpened" in $$props2)
        $$invalidate(0, isDropdownOpened = $$props2.isDropdownOpened);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(4, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("$$scope" in $$props2)
        $$invalidate(7, $$scope = $$props2.$$scope);
    };
    $$self.$capture_state = () => ({
      sineIn,
      fade,
      ChevronDown: chevron_down_default,
      ChevronUp: chevron_up_default,
      title,
      totalCount,
      uncompletedCount,
      isDropdownOpened,
      isScrollPositionRestored,
      emoticons,
      emoticonIndex
    });
    $$self.$inject_state = ($$props2) => {
      if ("title" in $$props2)
        $$invalidate(1, title = $$props2.title);
      if ("totalCount" in $$props2)
        $$invalidate(2, totalCount = $$props2.totalCount);
      if ("uncompletedCount" in $$props2)
        $$invalidate(3, uncompletedCount = $$props2.uncompletedCount);
      if ("isDropdownOpened" in $$props2)
        $$invalidate(0, isDropdownOpened = $$props2.isDropdownOpened);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(4, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("emoticonIndex" in $$props2)
        $$invalidate(5, emoticonIndex = $$props2.emoticonIndex);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*isDropdownOpened, emoticonIndex*/
      33) {
        $:
          if (isDropdownOpened) {
            $$invalidate(5, emoticonIndex++, emoticonIndex);
            if (emoticonIndex >= emoticons.length) {
              $$invalidate(5, emoticonIndex = 0);
            }
          }
      }
    };
    return [
      isDropdownOpened,
      title,
      totalCount,
      uncompletedCount,
      isScrollPositionRestored,
      emoticonIndex,
      emoticons,
      $$scope,
      slots,
      click_handler
    ];
  }
  var ItemsContainer = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance51, create_fragment51, safe_not_equal, {
        title: 1,
        totalCount: 2,
        uncompletedCount: 3,
        isDropdownOpened: 0,
        isScrollPositionRestored: 4
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ItemsContainer",
        options,
        id: create_fragment51.name
      });
    }
    get title() {
      throw new Error("<ItemsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set title(value) {
      throw new Error("<ItemsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get totalCount() {
      throw new Error("<ItemsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set totalCount(value) {
      throw new Error("<ItemsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get uncompletedCount() {
      throw new Error("<ItemsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set uncompletedCount(value) {
      throw new Error("<ItemsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isDropdownOpened() {
      throw new Error("<ItemsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isDropdownOpened(value) {
      throw new Error("<ItemsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error("<ItemsContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error("<ItemsContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ItemsContainer_default = ItemsContainer;

  // svelte/MoveTodoMenu.svelte
  var MoveTodoMenu_exports = {};
  __export(MoveTodoMenu_exports, {
    default: () => MoveTodoMenu_default
  });
  var file18 = "svelte/MoveTodoMenu.svelte";
  function get_each_context2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    child_ctx[15] = i;
    return child_ctx;
  }
  function create_each_block2(key_1, ctx) {
    let li;
    let button;
    let input;
    let input_checked_value;
    let t0;
    let t1_value = (
      /*list*/
      ctx[13].name + ""
    );
    let t1;
    let button_data_focusindex_value;
    let t2;
    let mounted;
    let dispose;
    function click_handler_1() {
      return (
        /*click_handler_1*/
        ctx[8](
          /*list*/
          ctx[13]
        )
      );
    }
    const block = {
      key: key_1,
      first: null,
      c: function create7() {
        li = element("li");
        button = element("button");
        input = element("input");
        t0 = space();
        t1 = text(t1_value);
        t2 = space();
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", {});
        var li_nodes = children(li);
        button = claim_element(li_nodes, "BUTTON", {
          "data-focusindex": true,
          title: true,
          class: true,
          style: true
        });
        var button_nodes = children(button);
        input = claim_element(button_nodes, "INPUT", {
          "aria-hidden": true,
          tabindex: true,
          type: true,
          class: true
        });
        t0 = claim_space(button_nodes);
        t1 = claim_text(button_nodes, t1_value);
        button_nodes.forEach(detach_dev);
        t2 = claim_space(li_nodes);
        li_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "aria-hidden", "true");
        attr_dev(input, "tabindex", "-1");
        attr_dev(input, "type", "radio");
        attr_dev(input, "class", "radio bg-transparent");
        input.checked = input_checked_value = /*list*/
        ctx[13].id === /*itemToMove*/
        ctx[0].listId;
        toggle_class(
          input,
          "radio-accent",
          /*list*/
          ctx[13].id === /*itemToMove*/
          ctx[0].listId
        );
        add_location(input, file18, 72, 12, 1807);
        attr_dev(button, "data-focusindex", button_data_focusindex_value = /*index*/
        ctx[15] + 1);
        attr_dev(button, "title", "Move to this list.");
        attr_dev(button, "class", "flex items-center gap-3 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        set_style(button, "word-break", "break-word");
        add_location(button, file18, 59, 10, 1350);
        add_location(li, file18, 58, 8, 1335);
        this.first = li;
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
        append_hydration_dev(li, button);
        append_hydration_dev(button, input);
        append_hydration_dev(button, t0);
        append_hydration_dev(button, t1);
        append_hydration_dev(li, t2);
        if (!mounted) {
          dispose = listen_dev(button, "click", click_handler_1, false, false, false, false);
          mounted = true;
        }
      },
      p: function update2(new_ctx, dirty) {
        ctx = new_ctx;
        if (dirty & /*$todoLists, itemToMove*/
        65 && input_checked_value !== (input_checked_value = /*list*/
        ctx[13].id === /*itemToMove*/
        ctx[0].listId)) {
          prop_dev(input, "checked", input_checked_value);
        }
        if (dirty & /*$todoLists, itemToMove*/
        65) {
          toggle_class(
            input,
            "radio-accent",
            /*list*/
            ctx[13].id === /*itemToMove*/
            ctx[0].listId
          );
        }
        if (dirty & /*$todoLists*/
        64 && t1_value !== (t1_value = /*list*/
        ctx[13].name + ""))
          set_data_dev(t1, t1_value);
        if (dirty & /*$todoLists*/
        64 && button_data_focusindex_value !== (button_data_focusindex_value = /*index*/
        ctx[15] + 1)) {
          attr_dev(button, "data-focusindex", button_data_focusindex_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_each_block2.name,
      type: "each",
      source: "(49:6) {#each $todoLists as list, index (list.id)}",
      ctx
    });
    return block;
  }
  function create_fragment52(ctx) {
    let dialog_1;
    let div;
    let p;
    let textContent = "Select List";
    let t1;
    let button;
    let x;
    let t2;
    let ul;
    let each_blocks = [];
    let each_1_lookup = /* @__PURE__ */ new Map();
    let clickOutside_action;
    let focusTrap_action;
    let dialog_1_class_value;
    let current;
    let mounted;
    let dispose;
    x = new x_default({
      props: { class: "w-5 h-5" },
      $$inline: true
    });
    let each_value = ensure_array_like_dev(
      /*$todoLists*/
      ctx[6]
    );
    const get_key = (ctx2) => (
      /*list*/
      ctx2[13].id
    );
    validate_each_keys(ctx, each_value, get_each_context2, get_key);
    for (let i = 0; i < each_value.length; i += 1) {
      let child_ctx = get_each_context2(ctx, each_value, i);
      let key = get_key(child_ctx);
      each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
    }
    const block = {
      c: function create7() {
        dialog_1 = element("dialog");
        div = element("div");
        p = element("p");
        p.textContent = textContent;
        t1 = space();
        button = element("button");
        create_component(x.$$.fragment);
        t2 = space();
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        this.h();
      },
      l: function claim(nodes) {
        dialog_1 = claim_element(nodes, "DIALOG", { class: true });
        var dialog_1_nodes = children(dialog_1);
        div = claim_element(dialog_1_nodes, "DIV", { class: true });
        var div_nodes = children(div);
        p = claim_element(div_nodes, "P", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(p) !== "svelte-pcffu")
          p.textContent = textContent;
        t1 = claim_space(div_nodes);
        button = claim_element(div_nodes, "BUTTON", {
          "data-focusindex": true,
          class: true,
          "aria-label": true,
          title: true
        });
        var button_nodes = children(button);
        claim_component(x.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        t2 = claim_space(div_nodes);
        ul = claim_element(div_nodes, "UL", {});
        var ul_nodes = children(ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].l(ul_nodes);
        }
        ul_nodes.forEach(detach_dev);
        div_nodes.forEach(detach_dev);
        dialog_1_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(p, "class", "pl-4 pr-14 py-2 font-bold border-b border-neutral rounded-none mb-1.5");
        add_location(p, file18, 41, 4, 839);
        attr_dev(button, "data-focusindex", "0");
        attr_dev(button, "class", "absolute top-3.5 right-3 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button, "aria-label", "Close.");
        attr_dev(button, "title", "Close.");
        add_location(button, file18, 43, 4, 941);
        add_location(ul, file18, 56, 4, 1272);
        attr_dev(div, "class", "text-lg");
        add_location(div, file18, 33, 2, 665);
        attr_dev(dialog_1, "class", dialog_1_class_value = /*menuClass*/
        ctx[1] + " menu bg-base-200 border border-neutral rounded-box");
        add_location(dialog_1, file18, 25, 0, 483);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, dialog_1, anchor);
        append_hydration_dev(dialog_1, div);
        append_hydration_dev(div, p);
        append_hydration_dev(div, t1);
        append_hydration_dev(div, button);
        mount_component(x, button, null);
        append_hydration_dev(div, t2);
        append_hydration_dev(div, ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
        ctx[11](dialog_1);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "click",
              /*click_handler*/
              ctx[7],
              false,
              false,
              false,
              false
            ),
            action_destroyer(clickOutside_action = clickOutside.call(
              null,
              div,
              /*clickOutside_function*/
              ctx[9]
            )),
            action_destroyer(focusTrap_action = focusTrap.call(null, div, {
              focusFirstElement: true,
              onEscape: (
                /*focusTrap_function*/
                ctx[10]
              )
            })),
            listen_dev(
              dialog_1,
              "close",
              /*close_handler*/
              ctx[12],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*$todoLists, moveTodo, itemToMove, dialog*/
        77) {
          each_value = ensure_array_like_dev(
            /*$todoLists*/
            ctx2[6]
          );
          validate_each_keys(ctx2, each_value, get_each_context2, get_key);
          each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, ul, destroy_block, create_each_block2, null, get_each_context2);
        }
        if (clickOutside_action && is_function(clickOutside_action.update) && dirty & /*dialog*/
        8)
          clickOutside_action.update.call(
            null,
            /*clickOutside_function*/
            ctx2[9]
          );
        if (focusTrap_action && is_function(focusTrap_action.update) && dirty & /*dialog*/
        8)
          focusTrap_action.update.call(null, {
            focusFirstElement: true,
            onEscape: (
              /*focusTrap_function*/
              ctx2[10]
            )
          });
        if (!current || dirty & /*menuClass*/
        2 && dialog_1_class_value !== (dialog_1_class_value = /*menuClass*/
        ctx2[1] + " menu bg-base-200 border border-neutral rounded-box")) {
          attr_dev(dialog_1, "class", dialog_1_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(x.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(x.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(dialog_1);
        }
        destroy_component(x);
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].d();
        }
        ctx[11](null);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment52.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance52($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $itemToProcessId;
    let $todoLists;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(4, $openedMenuId = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(5, $itemToProcessId = $$value));
    validate_store(todoLists, "todoLists");
    component_subscribe($$self, todoLists, ($$value) => $$invalidate(6, $todoLists = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("MoveTodoMenu", slots, []);
    let { itemToMove } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let { moveTodo } = $$props;
    let dialog;
    onMount(() => {
      dialog.showModal();
      return () => dialog.close();
    });
    $$self.$$.on_mount.push(function() {
      if (itemToMove === void 0 && !("itemToMove" in $$props || $$self.$$.bound[$$self.$$.props["itemToMove"]])) {
        console.warn("<MoveTodoMenu> was created without expected prop 'itemToMove'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<MoveTodoMenu> was created without expected prop 'menuClass'");
      }
      if (moveTodo === void 0 && !("moveTodo" in $$props || $$self.$$.bound[$$self.$$.props["moveTodo"]])) {
        console.warn("<MoveTodoMenu> was created without expected prop 'moveTodo'");
      }
    });
    const writable_props = ["itemToMove", "menuClass", "moveTodo"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<MoveTodoMenu> was created with unknown prop '${key}'`);
    });
    const click_handler = () => dialog.close();
    const click_handler_1 = (list) => {
      moveTodo(itemToMove, list.id);
      dialog.close();
    };
    const clickOutside_function = () => dialog.close();
    const focusTrap_function = () => dialog.close();
    function dialog_1_binding($$value) {
      binding_callbacks[$$value ? "unshift" : "push"](() => {
        dialog = $$value;
        $$invalidate(3, dialog);
      });
    }
    const close_handler = () => {
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
      set_store_value(itemToProcessId, $itemToProcessId = "", $itemToProcessId);
    };
    $$self.$$set = ($$props2) => {
      if ("itemToMove" in $$props2)
        $$invalidate(0, itemToMove = $$props2.itemToMove);
      if ("menuClass" in $$props2)
        $$invalidate(1, menuClass2 = $$props2.menuClass);
      if ("moveTodo" in $$props2)
        $$invalidate(2, moveTodo = $$props2.moveTodo);
    };
    $$self.$capture_state = () => ({
      onMount,
      X: x_default,
      focusTrap,
      clickOutside,
      itemToProcessId,
      openedMenuId,
      todoLists,
      itemToMove,
      menuClass: menuClass2,
      moveTodo,
      dialog,
      $openedMenuId,
      $itemToProcessId,
      $todoLists
    });
    $$self.$inject_state = ($$props2) => {
      if ("itemToMove" in $$props2)
        $$invalidate(0, itemToMove = $$props2.itemToMove);
      if ("menuClass" in $$props2)
        $$invalidate(1, menuClass2 = $$props2.menuClass);
      if ("moveTodo" in $$props2)
        $$invalidate(2, moveTodo = $$props2.moveTodo);
      if ("dialog" in $$props2)
        $$invalidate(3, dialog = $$props2.dialog);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      itemToMove,
      menuClass2,
      moveTodo,
      dialog,
      $openedMenuId,
      $itemToProcessId,
      $todoLists,
      click_handler,
      click_handler_1,
      clickOutside_function,
      focusTrap_function,
      dialog_1_binding,
      close_handler
    ];
  }
  var MoveTodoMenu = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance52, create_fragment52, safe_not_equal, { itemToMove: 0, menuClass: 1, moveTodo: 2 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "MoveTodoMenu",
        options,
        id: create_fragment52.name
      });
    }
    get itemToMove() {
      throw new Error("<MoveTodoMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set itemToMove(value) {
      throw new Error("<MoveTodoMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<MoveTodoMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<MoveTodoMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get moveTodo() {
      throw new Error("<MoveTodoMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set moveTodo(value) {
      throw new Error("<MoveTodoMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var MoveTodoMenu_default = MoveTodoMenu;

  // svelte/NewItemForm.svelte
  var NewItemForm_exports = {};
  __export(NewItemForm_exports, {
    default: () => NewItemForm_default
  });
  var file19 = "svelte/NewItemForm.svelte";
  function create_if_block11(ctx) {
    let p;
    let t;
    let p_intro;
    const block = {
      c: function create7() {
        p = element("p");
        t = text(
          /*error*/
          ctx[5]
        );
        this.h();
      },
      l: function claim(nodes) {
        p = claim_element(nodes, "P", { style: true, class: true });
        var p_nodes = children(p);
        t = claim_text(
          p_nodes,
          /*error*/
          ctx[5]
        );
        p_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        set_style(p, "word-break", "break-word");
        attr_dev(p, "class", "text-error");
        add_location(p, file19, 55, 2, 1181);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, p, anchor);
        append_hydration_dev(p, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*error*/
        32)
          set_data_dev(
            t,
            /*error*/
            ctx2[5]
          );
      },
      i: function intro(local) {
        if (local) {
          if (!p_intro) {
            add_render_callback(() => {
              p_intro = create_in_transition(p, fly, { y: -10 });
              p_intro.start();
            });
          }
        }
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(p);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block11.name,
      type: "if",
      source: "(48:0) {#if error}",
      ctx
    });
    return block;
  }
  function create_fragment53(ctx) {
    let form;
    let input;
    let t0;
    let button;
    let t1;
    let t2;
    let if_block_anchor;
    let mounted;
    let dispose;
    let if_block = (
      /*error*/
      ctx[5] && create_if_block11(ctx)
    );
    const block = {
      c: function create7() {
        form = element("form");
        input = element("input");
        t0 = space();
        button = element("button");
        t1 = text(
          /*submitButtonText*/
          ctx[2]
        );
        t2 = space();
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
        this.h();
      },
      l: function claim(nodes) {
        form = claim_element(nodes, "FORM", { class: true });
        var form_nodes = children(form);
        input = claim_element(form_nodes, "INPUT", {
          type: true,
          placeholder: true,
          class: true
        });
        t0 = claim_space(form_nodes);
        button = claim_element(form_nodes, "BUTTON", { class: true, title: true });
        var button_nodes = children(button);
        t1 = claim_text(
          button_nodes,
          /*submitButtonText*/
          ctx[2]
        );
        button_nodes.forEach(detach_dev);
        form_nodes.forEach(detach_dev);
        t2 = claim_space(nodes);
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "type", "text");
        attr_dev(
          input,
          "placeholder",
          /*placeholder*/
          ctx[1]
        );
        attr_dev(input, "class", "input input-bordered border-neutral w-full join-item focus:outline-none focus:ring-1 focus:ring-accent focus:ring-inset ");
        input.required = true;
        add_location(input, file19, 37, 2, 772);
        attr_dev(button, "class", "btn btn-accent join-item border border-neutral");
        attr_dev(
          button,
          "title",
          /*submitButtonTitle*/
          ctx[3]
        );
        add_location(button, file19, 49, 2, 1033);
        attr_dev(form, "class", "join my-1 w-full");
        set_style(
          form,
          "visibility",
          /*isScrollPositionRestored*/
          ctx[4] ? "visible" : "hidden"
        );
        add_location(form, file19, 32, 0, 624);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, form, anchor);
        append_hydration_dev(form, input);
        set_input_value(
          input,
          /*value*/
          ctx[0]
        );
        append_hydration_dev(form, t0);
        append_hydration_dev(form, button);
        append_hydration_dev(button, t1);
        insert_hydration_dev(target, t2, anchor);
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        if (!mounted) {
          dispose = [
            listen_dev(
              input,
              "input",
              /*input_input_handler*/
              ctx[8]
            ),
            listen_dev(
              input,
              "input",
              /*input_handler*/
              ctx[9],
              false,
              false,
              false,
              false
            ),
            listen_dev(form, "submit", prevent_default(
              /*handleSubmit*/
              ctx[6]
            ), false, true, false, false)
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*placeholder*/
        2) {
          attr_dev(
            input,
            "placeholder",
            /*placeholder*/
            ctx2[1]
          );
        }
        if (dirty & /*value*/
        1 && input.value !== /*value*/
        ctx2[0]) {
          set_input_value(
            input,
            /*value*/
            ctx2[0]
          );
        }
        if (dirty & /*submitButtonText*/
        4)
          set_data_dev(
            t1,
            /*submitButtonText*/
            ctx2[2]
          );
        if (dirty & /*submitButtonTitle*/
        8) {
          attr_dev(
            button,
            "title",
            /*submitButtonTitle*/
            ctx2[3]
          );
        }
        if (dirty & /*isScrollPositionRestored*/
        16) {
          set_style(
            form,
            "visibility",
            /*isScrollPositionRestored*/
            ctx2[4] ? "visible" : "hidden"
          );
        }
        if (
          /*error*/
          ctx2[5]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*error*/
            32) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block11(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: function intro(local) {
        transition_in(if_block);
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(form);
          detach_dev(t2);
          detach_dev(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment53.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance53($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("NewItemForm", slots, []);
    let { addItemCallback } = $$props;
    let { value } = $$props;
    let { placeholder } = $$props;
    let { submitButtonText } = $$props;
    let { submitButtonTitle } = $$props;
    let { isScrollPositionRestored } = $$props;
    let error = "";
    function handleSubmit() {
      $$invalidate(0, value = value.replace(/\s+/g, " ").trim());
      if (value === "") {
        $$invalidate(5, error = "Cannot be blank!");
        return;
      }
      if (value.length > 500) {
        $$invalidate(5, error = "Cannot be over 500 characters!");
        return;
      }
      addItemCallback();
    }
    $$self.$$.on_mount.push(function() {
      if (addItemCallback === void 0 && !("addItemCallback" in $$props || $$self.$$.bound[$$self.$$.props["addItemCallback"]])) {
        console.warn("<NewItemForm> was created without expected prop 'addItemCallback'");
      }
      if (value === void 0 && !("value" in $$props || $$self.$$.bound[$$self.$$.props["value"]])) {
        console.warn("<NewItemForm> was created without expected prop 'value'");
      }
      if (placeholder === void 0 && !("placeholder" in $$props || $$self.$$.bound[$$self.$$.props["placeholder"]])) {
        console.warn("<NewItemForm> was created without expected prop 'placeholder'");
      }
      if (submitButtonText === void 0 && !("submitButtonText" in $$props || $$self.$$.bound[$$self.$$.props["submitButtonText"]])) {
        console.warn("<NewItemForm> was created without expected prop 'submitButtonText'");
      }
      if (submitButtonTitle === void 0 && !("submitButtonTitle" in $$props || $$self.$$.bound[$$self.$$.props["submitButtonTitle"]])) {
        console.warn("<NewItemForm> was created without expected prop 'submitButtonTitle'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console.warn("<NewItemForm> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = [
      "addItemCallback",
      "value",
      "placeholder",
      "submitButtonText",
      "submitButtonTitle",
      "isScrollPositionRestored"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<NewItemForm> was created with unknown prop '${key}'`);
    });
    function input_input_handler() {
      value = this.value;
      $$invalidate(0, value);
    }
    const input_handler = () => $$invalidate(5, error = "");
    $$self.$$set = ($$props2) => {
      if ("addItemCallback" in $$props2)
        $$invalidate(7, addItemCallback = $$props2.addItemCallback);
      if ("value" in $$props2)
        $$invalidate(0, value = $$props2.value);
      if ("placeholder" in $$props2)
        $$invalidate(1, placeholder = $$props2.placeholder);
      if ("submitButtonText" in $$props2)
        $$invalidate(2, submitButtonText = $$props2.submitButtonText);
      if ("submitButtonTitle" in $$props2)
        $$invalidate(3, submitButtonTitle = $$props2.submitButtonTitle);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(4, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    $$self.$capture_state = () => ({
      fly,
      addItemCallback,
      value,
      placeholder,
      submitButtonText,
      submitButtonTitle,
      isScrollPositionRestored,
      error,
      handleSubmit
    });
    $$self.$inject_state = ($$props2) => {
      if ("addItemCallback" in $$props2)
        $$invalidate(7, addItemCallback = $$props2.addItemCallback);
      if ("value" in $$props2)
        $$invalidate(0, value = $$props2.value);
      if ("placeholder" in $$props2)
        $$invalidate(1, placeholder = $$props2.placeholder);
      if ("submitButtonText" in $$props2)
        $$invalidate(2, submitButtonText = $$props2.submitButtonText);
      if ("submitButtonTitle" in $$props2)
        $$invalidate(3, submitButtonTitle = $$props2.submitButtonTitle);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(4, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("error" in $$props2)
        $$invalidate(5, error = $$props2.error);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      value,
      placeholder,
      submitButtonText,
      submitButtonTitle,
      isScrollPositionRestored,
      error,
      handleSubmit,
      addItemCallback,
      input_input_handler,
      input_handler
    ];
  }
  var NewItemForm = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance53, create_fragment53, safe_not_equal, {
        addItemCallback: 7,
        value: 0,
        placeholder: 1,
        submitButtonText: 2,
        submitButtonTitle: 3,
        isScrollPositionRestored: 4
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "NewItemForm",
        options,
        id: create_fragment53.name
      });
    }
    get addItemCallback() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set addItemCallback(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get value() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set value(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get placeholder() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set placeholder(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get submitButtonText() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set submitButtonText(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get submitButtonTitle() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set submitButtonTitle(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error("<NewItemForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error("<NewItemForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var NewItemForm_default = NewItemForm;

  // svelte/TodoCheckList.svelte
  var TodoCheckList_exports = {};
  __export(TodoCheckList_exports, {
    default: () => TodoCheckList_default
  });

  // node_modules/svelte/src/runtime/animate/index.js
  function flip(node, { from: from2, to }, params2 = {}) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
    const dx = from2.left + from2.width * ox / to.width - (to.left + ox);
    const dy = from2.top + from2.height * oy / to.height - (to.top + oy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params2;
    return {
      delay,
      duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
      easing,
      css: (t, u) => {
        const x = u * dx;
        const y = u * dy;
        const sx = t + u * from2.width / to.width;
        const sy = t + u * from2.height / to.height;
        return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
      }
    };
  }

  // lib/actions/onKeydown.ts
  function onKeydown(element3, callbackFunction) {
    function onKeydownHandler(event) {
      callbackFunction(event);
    }
    element3.addEventListener("keydown", onKeydownHandler);
    return {
      update(newCallbackFunction) {
        callbackFunction = newCallbackFunction;
      },
      destroy() {
        element3.removeEventListener("keydown", onKeydownHandler);
      }
    };
  }

  // lib/hooks/useHasTouchScreen.ts
  function useHasTouchScreen() {
    const navigatorExtended = navigator;
    let hasTouchScreen = false;
    if ("maxTouchPoints" in navigator) {
      hasTouchScreen = navigator.maxTouchPoints > 0;
    } else if ("msMaxTouchPoints" in navigator && navigatorExtended.msMaxTouchPoints) {
      hasTouchScreen = navigatorExtended.msMaxTouchPoints > 0;
    } else {
      const mQ = matchMedia == null ? void 0 : matchMedia("(pointer:coarse)");
      if ((mQ == null ? void 0 : mQ.media) === "(pointer:coarse)") {
        hasTouchScreen = !!mQ.matches;
      } else if ("orientation" in window) {
        hasTouchScreen = true;
      } else {
        const UA = navigatorExtended.userAgent;
        hasTouchScreen = /\b(BlackBerry|webOS|iPhone|IEMobile)\b/i.test(UA) || /\b(Android|Windows Phone|iPad|iPod)\b/i.test(UA);
      }
    }
    return hasTouchScreen;
  }

  // svelte/DragHandle.svelte
  var DragHandle_exports = {};
  __export(DragHandle_exports, {
    default: () => DragHandle_default
  });
  var file20 = "svelte/DragHandle.svelte";
  function create_fragment54(ctx) {
    let button;
    let griphorizontal;
    let current;
    let mounted;
    let dispose;
    griphorizontal = new grip_horizontal_default({
      props: { class: "w-6 h-6" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        button = element("button");
        create_component(griphorizontal.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        button = claim_element(nodes, "BUTTON", {
          title: true,
          "aria-label": true,
          class: true,
          tabindex: true
        });
        var button_nodes = children(button);
        claim_component(griphorizontal.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button, "title", "Drag to reorder.");
        attr_dev(button, "aria-label", "Drag to reorder.");
        attr_dev(button, "class", "rounded-lg focus:outline-none focus-visible:ring ring-accent ");
        attr_dev(button, "tabindex", "-1");
        toggle_class(
          button,
          "cursor-grab",
          /*dragDisabled*/
          ctx[0]
        );
        toggle_class(button, "cursor-grabbing", !/*dragDisabled*/
        ctx[0]);
        add_location(button, file20, 18, 0, 460);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button, anchor);
        mount_component(griphorizontal, button, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "mousedown",
              /*handleStartDrag*/
              ctx[1],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              "touchstart",
              /*handleStartDrag*/
              ctx[1],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              "click",
              /*click_handler*/
              ctx[3],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (!current || dirty & /*dragDisabled*/
        1) {
          toggle_class(
            button,
            "cursor-grab",
            /*dragDisabled*/
            ctx2[0]
          );
        }
        if (!current || dirty & /*dragDisabled*/
        1) {
          toggle_class(button, "cursor-grabbing", !/*dragDisabled*/
          ctx2[0]);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(griphorizontal.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(griphorizontal.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button);
        }
        destroy_component(griphorizontal);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment54.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance54($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $itemToProcessId;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(4, $openedMenuId = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(5, $itemToProcessId = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("DragHandle", slots, []);
    let { dragDisabled } = $$props;
    let { itemId } = $$props;
    function handleStartDrag(event) {
      event.preventDefault();
      set_store_value(itemToProcessId, $itemToProcessId = itemId, $itemToProcessId);
      $$invalidate(0, dragDisabled = false);
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    }
    $$self.$$.on_mount.push(function() {
      if (dragDisabled === void 0 && !("dragDisabled" in $$props || $$self.$$.bound[$$self.$$.props["dragDisabled"]])) {
        console.warn("<DragHandle> was created without expected prop 'dragDisabled'");
      }
      if (itemId === void 0 && !("itemId" in $$props || $$self.$$.bound[$$self.$$.props["itemId"]])) {
        console.warn("<DragHandle> was created without expected prop 'itemId'");
      }
    });
    const writable_props = ["dragDisabled", "itemId"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<DragHandle> was created with unknown prop '${key}'`);
    });
    const click_handler = () => $$invalidate(0, dragDisabled = true);
    $$self.$$set = ($$props2) => {
      if ("dragDisabled" in $$props2)
        $$invalidate(0, dragDisabled = $$props2.dragDisabled);
      if ("itemId" in $$props2)
        $$invalidate(2, itemId = $$props2.itemId);
    };
    $$self.$capture_state = () => ({
      GripHorizontal: grip_horizontal_default,
      itemToProcessId,
      openedMenuId,
      dragDisabled,
      itemId,
      handleStartDrag,
      $openedMenuId,
      $itemToProcessId
    });
    $$self.$inject_state = ($$props2) => {
      if ("dragDisabled" in $$props2)
        $$invalidate(0, dragDisabled = $$props2.dragDisabled);
      if ("itemId" in $$props2)
        $$invalidate(2, itemId = $$props2.itemId);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [dragDisabled, handleStartDrag, itemId, click_handler];
  }
  var DragHandle = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance54, create_fragment54, safe_not_equal, { dragDisabled: 0, itemId: 2 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "DragHandle",
        options,
        id: create_fragment54.name
      });
    }
    get dragDisabled() {
      throw new Error("<DragHandle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set dragDisabled(value) {
      throw new Error("<DragHandle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get itemId() {
      throw new Error("<DragHandle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set itemId(value) {
      throw new Error("<DragHandle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var DragHandle_default = DragHandle;

  // svelte/EditForm.svelte
  var EditForm_exports = {};
  __export(EditForm_exports, {
    default: () => EditForm_default
  });
  var file21 = "svelte/EditForm.svelte";
  function create_if_block12(ctx) {
    let p;
    let t;
    let p_intro;
    const block = {
      c: function create7() {
        p = element("p");
        t = text(
          /*error*/
          ctx[2]
        );
        this.h();
      },
      l: function claim(nodes) {
        p = claim_element(nodes, "P", { style: true, class: true });
        var p_nodes = children(p);
        t = claim_text(
          p_nodes,
          /*error*/
          ctx[2]
        );
        p_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        set_style(p, "word-break", "break-word");
        attr_dev(p, "class", "text-error mt-1 text-sm");
        add_location(p, file21, 135, 4, 2883);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, p, anchor);
        append_hydration_dev(p, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*error*/
        4)
          set_data_dev(
            t,
            /*error*/
            ctx2[2]
          );
      },
      i: function intro(local) {
        if (local) {
          if (!p_intro) {
            add_render_callback(() => {
              p_intro = create_in_transition(p, fly, { y: -10 });
              p_intro.start();
            });
          }
        }
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(p);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block12.name,
      type: "if",
      source: "(117:2) {#if error}",
      ctx
    });
    return block;
  }
  function create_fragment55(ctx) {
    let form;
    let div;
    let input;
    let t0;
    let button;
    let check;
    let t1;
    let form_class_value;
    let clickOutside_action;
    let focusTrap_action;
    let current;
    let mounted;
    let dispose;
    check = new check_default({
      props: { class: "w-5 h-5" },
      $$inline: true
    });
    let if_block = (
      /*error*/
      ctx[2] && create_if_block12(ctx)
    );
    const block = {
      c: function create7() {
        form = element("form");
        div = element("div");
        input = element("input");
        t0 = space();
        button = element("button");
        create_component(check.$$.fragment);
        t1 = space();
        if (if_block)
          if_block.c();
        this.h();
      },
      l: function claim(nodes) {
        form = claim_element(nodes, "FORM", { class: true });
        var form_nodes = children(form);
        div = claim_element(form_nodes, "DIV", { class: true });
        var div_nodes = children(div);
        input = claim_element(div_nodes, "INPUT", {
          "data-focusindex": true,
          type: true,
          class: true
        });
        t0 = claim_space(div_nodes);
        button = claim_element(div_nodes, "BUTTON", {
          "data-focusindex": true,
          class: true,
          "aria-label": true
        });
        var button_nodes = children(button);
        claim_component(check.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        div_nodes.forEach(detach_dev);
        t1 = claim_space(form_nodes);
        if (if_block)
          if_block.l(form_nodes);
        form_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "data-focusindex", "0");
        attr_dev(input, "type", "text");
        attr_dev(input, "class", "input input-bordered border-neutral w-full join-item focus:outline-none focus:ring-1 focus:ring-accent focus:ring-inset ");
        add_location(input, file21, 114, 4, 2399);
        attr_dev(button, "data-focusindex", "1");
        attr_dev(button, "class", "btn btn-accent join-item border border-neutral");
        attr_dev(button, "aria-label", "Update item.");
        add_location(button, file21, 125, 4, 2676);
        attr_dev(div, "class", "w-full join");
        add_location(div, file21, 113, 2, 2369);
        attr_dev(form, "class", form_class_value = /*menuClass*/
        ctx[0] + " w-full");
        add_location(form, file21, 104, 0, 2173);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, form, anchor);
        append_hydration_dev(form, div);
        append_hydration_dev(div, input);
        set_input_value(
          input,
          /*newName*/
          ctx[1]
        );
        append_hydration_dev(div, t0);
        append_hydration_dev(div, button);
        mount_component(check, button, null);
        append_hydration_dev(form, t1);
        if (if_block)
          if_block.m(form, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              input,
              "input",
              /*input_input_handler*/
              ctx[8]
            ),
            listen_dev(
              input,
              "input",
              /*handleInput*/
              ctx[5],
              false,
              false,
              false,
              false
            ),
            listen_dev(form, "submit", prevent_default(
              /*handleSubmit*/
              ctx[3]
            ), false, true, false, false),
            action_destroyer(clickOutside_action = clickOutside.call(
              null,
              form,
              /*handleSubmit*/
              ctx[3]
            )),
            action_destroyer(focusTrap_action = focusTrap.call(null, form, {
              focusFirstElement: true,
              onEscape: (
                /*handleEscape*/
                ctx[4]
              )
            }))
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*newName*/
        2 && input.value !== /*newName*/
        ctx2[1]) {
          set_input_value(
            input,
            /*newName*/
            ctx2[1]
          );
        }
        if (
          /*error*/
          ctx2[2]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*error*/
            4) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block12(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(form, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (!current || dirty & /*menuClass*/
        1 && form_class_value !== (form_class_value = /*menuClass*/
        ctx2[0] + " w-full")) {
          attr_dev(form, "class", form_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(check.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(check.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(form);
        }
        destroy_component(check);
        if (if_block)
          if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment55.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance55($$self, $$props, $$invalidate) {
    let $openedMenuId;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(9, $openedMenuId = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("EditForm", slots, []);
    let { item } = $$props;
    let { updateItem } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let newName = item.newName;
    let error = "";
    function commitEdits() {
      if (isTodoItem(item)) {
        updateItem({
          id: item.id,
          name: newName,
          completed: item.completed,
          listId: item.listId
        });
      } else {
        updateItem({ id: item.id, name: newName });
      }
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    }
    function discardEdits() {
      if (isTodoItem(item)) {
        updateItem({
          id: item.id,
          name: item.name,
          completed: item.completed,
          listId: item.listId
        });
      } else {
        updateItem({ id: item.id, name: item.name });
      }
      set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    }
    function handleSubmit() {
      $$invalidate(1, newName = newName.replace(/\s+/g, " ").trim());
      if (["", item.name].includes(newName)) {
        discardEdits();
        return;
      }
      if (item.name.toLowerCase() === newName.toLowerCase()) {
        commitEdits();
        return;
      }
      if (newName.length > 500) {
        $$invalidate(2, error = "Cannot be over 500 characters!");
        return;
      }
      commitEdits();
    }
    function handleEscape() {
      $$invalidate(1, newName = "");
      handleSubmit();
    }
    function handleInput() {
      updateItem(__spreadProps(__spreadValues({}, item), { newName }));
      $$invalidate(2, error = "");
    }
    $$self.$$.on_mount.push(function() {
      if (item === void 0 && !("item" in $$props || $$self.$$.bound[$$self.$$.props["item"]])) {
        console.warn("<EditForm> was created without expected prop 'item'");
      }
      if (updateItem === void 0 && !("updateItem" in $$props || $$self.$$.bound[$$self.$$.props["updateItem"]])) {
        console.warn("<EditForm> was created without expected prop 'updateItem'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<EditForm> was created without expected prop 'menuClass'");
      }
    });
    const writable_props = ["item", "updateItem", "menuClass"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<EditForm> was created with unknown prop '${key}'`);
    });
    function input_input_handler() {
      newName = this.value;
      $$invalidate(1, newName);
    }
    $$self.$$set = ($$props2) => {
      if ("item" in $$props2)
        $$invalidate(6, item = $$props2.item);
      if ("updateItem" in $$props2)
        $$invalidate(7, updateItem = $$props2.updateItem);
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
    };
    $$self.$capture_state = () => ({
      fly,
      Check: check_default,
      focusTrap,
      clickOutside,
      openedMenuId,
      isTodoItem,
      item,
      updateItem,
      menuClass: menuClass2,
      newName,
      error,
      commitEdits,
      discardEdits,
      handleSubmit,
      handleEscape,
      handleInput,
      $openedMenuId
    });
    $$self.$inject_state = ($$props2) => {
      if ("item" in $$props2)
        $$invalidate(6, item = $$props2.item);
      if ("updateItem" in $$props2)
        $$invalidate(7, updateItem = $$props2.updateItem);
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
      if ("newName" in $$props2)
        $$invalidate(1, newName = $$props2.newName);
      if ("error" in $$props2)
        $$invalidate(2, error = $$props2.error);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      menuClass2,
      newName,
      error,
      handleSubmit,
      handleEscape,
      handleInput,
      item,
      updateItem,
      input_input_handler
    ];
  }
  var EditForm = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance55, create_fragment55, safe_not_equal, { item: 6, updateItem: 7, menuClass: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "EditForm",
        options,
        id: create_fragment55.name
      });
    }
    get item() {
      throw new Error("<EditForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set item(value) {
      throw new Error("<EditForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get updateItem() {
      throw new Error("<EditForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set updateItem(value) {
      throw new Error("<EditForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<EditForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<EditForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var EditForm_default = EditForm;

  // svelte/OptionsMenu.svelte
  var OptionsMenu_exports = {};
  __export(OptionsMenu_exports, {
    default: () => OptionsMenu_default
  });
  var file22 = "svelte/OptionsMenu.svelte";
  function create_if_block13(ctx) {
    let ul;
    let li0;
    let button0;
    let trash2;
    let t0;
    let t1;
    let t2;
    let li1;
    let button1;
    let pencil;
    let t3;
    let focusTrap_action;
    let ul_intro;
    let current;
    let mounted;
    let dispose;
    trash2 = new trash_2_default({
      props: { class: "w-4 h-4" },
      $$inline: true
    });
    let if_block = (
      /*moveTodoMenuId*/
      ctx[4] && create_if_block_15(ctx)
    );
    pencil = new pencil_default({
      props: { class: "w-4 h-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        ul = element("ul");
        li0 = element("li");
        button0 = element("button");
        create_component(trash2.$$.fragment);
        t0 = text("\n          Delete");
        t1 = space();
        if (if_block)
          if_block.c();
        t2 = space();
        li1 = element("li");
        button1 = element("button");
        create_component(pencil.$$.fragment);
        t3 = text("\n          Edit");
        this.h();
      },
      l: function claim(nodes) {
        ul = claim_element(nodes, "UL", { class: true });
        var ul_nodes = children(ul);
        li0 = claim_element(ul_nodes, "LI", {});
        var li0_nodes = children(li0);
        button0 = claim_element(li0_nodes, "BUTTON", { "data-focusindex": true, class: true });
        var button0_nodes = children(button0);
        claim_component(trash2.$$.fragment, button0_nodes);
        t0 = claim_text(button0_nodes, "\n          Delete");
        button0_nodes.forEach(detach_dev);
        li0_nodes.forEach(detach_dev);
        t1 = claim_space(ul_nodes);
        if (if_block)
          if_block.l(ul_nodes);
        t2 = claim_space(ul_nodes);
        li1 = claim_element(ul_nodes, "LI", {});
        var li1_nodes = children(li1);
        button1 = claim_element(li1_nodes, "BUTTON", { "data-focusindex": true, class: true });
        var button1_nodes = children(button1);
        claim_component(pencil.$$.fragment, button1_nodes);
        t3 = claim_text(button1_nodes, "\n          Edit");
        button1_nodes.forEach(detach_dev);
        li1_nodes.forEach(detach_dev);
        ul_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button0, "data-focusindex", "2");
        attr_dev(button0, "class", "flex items-center gap-1.5 p-2 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(button0, file22, 57, 8, 1571);
        add_location(li0, file22, 56, 6, 1558);
        attr_dev(button1, "data-focusindex", "0");
        attr_dev(button1, "class", "flex items-center gap-1.5 p-2 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(button1, file22, 99, 8, 2876);
        add_location(li1, file22, 98, 6, 2863);
        attr_dev(ul, "class", "absolute right-8 -bottom-1 menu bg-base-200 border border-neutral rounded-box");
        add_location(ul, file22, 48, 4, 1310);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, ul, anchor);
        append_hydration_dev(ul, li0);
        append_hydration_dev(li0, button0);
        mount_component(trash2, button0, null);
        append_hydration_dev(button0, t0);
        append_hydration_dev(ul, t1);
        if (if_block)
          if_block.m(ul, null);
        append_hydration_dev(ul, t2);
        append_hydration_dev(ul, li1);
        append_hydration_dev(li1, button1);
        mount_component(pencil, button1, null);
        append_hydration_dev(button1, t3);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              "click",
              /*click_handler_1*/
              ctx[11],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              "click",
              /*click_handler_3*/
              ctx[13],
              false,
              false,
              false,
              false
            ),
            action_destroyer(focusTrap_action = focusTrap.call(null, ul, {
              focusFirstElement: (
                /*focusFirstElement*/
                ctx[7]
              ),
              onEscape: (
                /*focusTrap_function*/
                ctx[14]
              )
            }))
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        if (
          /*moveTodoMenuId*/
          ctx2[4]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*moveTodoMenuId*/
            16) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_15(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(ul, t2);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        if (focusTrap_action && is_function(focusTrap_action.update) && dirty & /*focusFirstElement, $openedMenuId*/
        192)
          focusTrap_action.update.call(null, {
            focusFirstElement: (
              /*focusFirstElement*/
              ctx2[7]
            ),
            onEscape: (
              /*focusTrap_function*/
              ctx2[14]
            )
          });
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(trash2.$$.fragment, local);
        transition_in(if_block);
        transition_in(pencil.$$.fragment, local);
        if (local) {
          if (!ul_intro) {
            add_render_callback(() => {
              ul_intro = create_in_transition(ul, scale, { duration: 100 });
              ul_intro.start();
            });
          }
        }
        current = true;
      },
      o: function outro(local) {
        transition_out(trash2.$$.fragment, local);
        transition_out(if_block);
        transition_out(pencil.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(ul);
        }
        destroy_component(trash2);
        if (if_block)
          if_block.d();
        destroy_component(pencil);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block13.name,
      type: "if",
      source: "(39:2) {#if $openedMenuId === item.id}",
      ctx
    });
    return block;
  }
  function create_if_block_15(ctx) {
    let li;
    let button;
    let moveright;
    let t;
    let current;
    let mounted;
    let dispose;
    moveright = new move_right_default({
      props: { class: "w-4 h-4" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        li = element("li");
        button = element("button");
        create_component(moveright.$$.fragment);
        t = text("\n            Move");
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", {});
        var li_nodes = children(li);
        button = claim_element(li_nodes, "BUTTON", { "data-focusindex": true, class: true });
        var button_nodes = children(button);
        claim_component(moveright.$$.fragment, button_nodes);
        t = claim_text(button_nodes, "\n            Move");
        button_nodes.forEach(detach_dev);
        li_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button, "data-focusindex", "1");
        attr_dev(button, "class", "flex items-center gap-1.5 p-2 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(button, file22, 80, 10, 2279);
        add_location(li, file22, 79, 8, 2264);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
        append_hydration_dev(li, button);
        mount_component(moveright, button, null);
        append_hydration_dev(button, t);
        current = true;
        if (!mounted) {
          dispose = listen_dev(
            button,
            "click",
            /*click_handler_2*/
            ctx[12],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: noop3,
      i: function intro(local) {
        if (current)
          return;
        transition_in(moveright.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(moveright.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
        destroy_component(moveright);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_15.name,
      type: "if",
      source: "(70:6) {#if moveTodoMenuId}",
      ctx
    });
    return block;
  }
  function create_fragment56(ctx) {
    let div1;
    let button;
    let div0;
    let input;
    let input_checked_value;
    let t0;
    let circleellipsis;
    let t1;
    let circlex;
    let t2;
    let div1_class_value;
    let current;
    let mounted;
    let dispose;
    circleellipsis = new circle_ellipsis_default({
      props: { class: "swap-off" },
      $$inline: true
    });
    circlex = new circle_x_default({
      props: { class: "swap-on" },
      $$inline: true
    });
    let if_block = (
      /*$openedMenuId*/
      ctx[6] === /*item*/
      ctx[0].id && create_if_block13(ctx)
    );
    const block = {
      c: function create7() {
        div1 = element("div");
        button = element("button");
        div0 = element("div");
        input = element("input");
        t0 = space();
        create_component(circleellipsis.$$.fragment);
        t1 = space();
        create_component(circlex.$$.fragment);
        t2 = space();
        if (if_block)
          if_block.c();
        this.h();
      },
      l: function claim(nodes) {
        div1 = claim_element(nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        button = claim_element(div1_nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button_nodes = children(button);
        div0 = claim_element(button_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        input = claim_element(div0_nodes, "INPUT", { type: true, class: true });
        t0 = claim_space(div0_nodes);
        claim_component(circleellipsis.$$.fragment, div0_nodes);
        t1 = claim_space(div0_nodes);
        claim_component(circlex.$$.fragment, div0_nodes);
        div0_nodes.forEach(detach_dev);
        button_nodes.forEach(detach_dev);
        t2 = claim_space(div1_nodes);
        if (if_block)
          if_block.l(div1_nodes);
        div1_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "type", "checkbox");
        attr_dev(input, "class", "hidden");
        input.checked = input_checked_value = /*$openedMenuId*/
        ctx[6] === /*item*/
        ctx[0].id;
        add_location(input, file22, 41, 6, 1095);
        attr_dev(div0, "class", "swap swap-rotate");
        add_location(div0, file22, 40, 4, 1058);
        attr_dev(button, "class", "flex items-center rounded-full focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button, "aria-label", "Options menu.");
        attr_dev(button, "title", "Click to toggle options menu.");
        add_location(button, file22, 26, 2, 609);
        attr_dev(div1, "class", div1_class_value = /*menuClass*/
        ctx[3] + " relative pointer-events-auto");
        add_location(div1, file22, 25, 0, 552);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div1, anchor);
        append_hydration_dev(div1, button);
        append_hydration_dev(button, div0);
        append_hydration_dev(div0, input);
        append_hydration_dev(div0, t0);
        mount_component(circleellipsis, div0, null);
        append_hydration_dev(div0, t1);
        mount_component(circlex, div0, null);
        append_hydration_dev(div1, t2);
        if (if_block)
          if_block.m(div1, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              "click",
              /*click_handler*/
              ctx[9],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              "keydown",
              /*keydown_handler*/
              ctx[10],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (!current || dirty & /*$openedMenuId, item*/
        65 && input_checked_value !== (input_checked_value = /*$openedMenuId*/
        ctx2[6] === /*item*/
        ctx2[0].id)) {
          prop_dev(input, "checked", input_checked_value);
        }
        if (
          /*$openedMenuId*/
          ctx2[6] === /*item*/
          ctx2[0].id
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*$openedMenuId, item*/
            65) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block13(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(div1, null);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
        if (!current || dirty & /*menuClass*/
        8 && div1_class_value !== (div1_class_value = /*menuClass*/
        ctx2[3] + " relative pointer-events-auto")) {
          attr_dev(div1, "class", div1_class_value);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(circleellipsis.$$.fragment, local);
        transition_in(circlex.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(circleellipsis.$$.fragment, local);
        transition_out(circlex.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div1);
        }
        destroy_component(circleellipsis);
        destroy_component(circlex);
        if (if_block)
          if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment56.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance56($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $itemToProcessId;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(6, $openedMenuId = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(8, $itemToProcessId = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("OptionsMenu", slots, []);
    let { item } = $$props;
    let { updateItem } = $$props;
    let { deleteItem } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let { moveTodoMenuId: moveTodoMenuId2 = void 0 } = $$props;
    let { confirmDeletionModalId: confirmDeletionModalId2 = void 0 } = $$props;
    let focusFirstElement = false;
    $$self.$$.on_mount.push(function() {
      if (item === void 0 && !("item" in $$props || $$self.$$.bound[$$self.$$.props["item"]])) {
        console.warn("<OptionsMenu> was created without expected prop 'item'");
      }
      if (updateItem === void 0 && !("updateItem" in $$props || $$self.$$.bound[$$self.$$.props["updateItem"]])) {
        console.warn("<OptionsMenu> was created without expected prop 'updateItem'");
      }
      if (deleteItem === void 0 && !("deleteItem" in $$props || $$self.$$.bound[$$self.$$.props["deleteItem"]])) {
        console.warn("<OptionsMenu> was created without expected prop 'deleteItem'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<OptionsMenu> was created without expected prop 'menuClass'");
      }
    });
    const writable_props = [
      "item",
      "updateItem",
      "deleteItem",
      "menuClass",
      "moveTodoMenuId",
      "confirmDeletionModalId"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<OptionsMenu> was created with unknown prop '${key}'`);
    });
    const click_handler = () => set_store_value(openedMenuId, $openedMenuId = $openedMenuId === item.id ? "" : item.id, $openedMenuId);
    const keydown_handler = (event) => {
      if (event.key === "Enter" || event.key === " ") {
        $$invalidate(7, focusFirstElement = true);
      }
    };
    const click_handler_1 = (e) => {
      if (confirmDeletionModalId2) {
        e.stopPropagation();
        set_store_value(itemToProcessId, $itemToProcessId = item.id, $itemToProcessId);
        set_store_value(openedMenuId, $openedMenuId = confirmDeletionModalId2, $openedMenuId);
      } else {
        deleteItem(item);
      }
    };
    const click_handler_2 = (e) => {
      e.stopPropagation();
      set_store_value(itemToProcessId, $itemToProcessId = item.id, $itemToProcessId);
      set_store_value(openedMenuId, $openedMenuId = moveTodoMenuId2, $openedMenuId);
    };
    const click_handler_3 = (e) => {
      e.stopPropagation();
      set_store_value(openedMenuId, $openedMenuId = "edit-form-id", $openedMenuId);
      updateItem(__spreadProps(__spreadValues({}, item), {
        newName: item.name,
        isEditing: true
      }));
    };
    const focusTrap_function = () => set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    $$self.$$set = ($$props2) => {
      if ("item" in $$props2)
        $$invalidate(0, item = $$props2.item);
      if ("updateItem" in $$props2)
        $$invalidate(1, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
      if ("menuClass" in $$props2)
        $$invalidate(3, menuClass2 = $$props2.menuClass);
      if ("moveTodoMenuId" in $$props2)
        $$invalidate(4, moveTodoMenuId2 = $$props2.moveTodoMenuId);
      if ("confirmDeletionModalId" in $$props2)
        $$invalidate(5, confirmDeletionModalId2 = $$props2.confirmDeletionModalId);
    };
    $$self.$capture_state = () => ({
      scale,
      CircleEllipsis: circle_ellipsis_default,
      CircleX: circle_x_default,
      MoveRight: move_right_default,
      Pencil: pencil_default,
      Trash2: trash_2_default,
      focusTrap,
      itemToProcessId,
      openedMenuId,
      item,
      updateItem,
      deleteItem,
      menuClass: menuClass2,
      moveTodoMenuId: moveTodoMenuId2,
      confirmDeletionModalId: confirmDeletionModalId2,
      focusFirstElement,
      $openedMenuId,
      $itemToProcessId
    });
    $$self.$inject_state = ($$props2) => {
      if ("item" in $$props2)
        $$invalidate(0, item = $$props2.item);
      if ("updateItem" in $$props2)
        $$invalidate(1, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
      if ("menuClass" in $$props2)
        $$invalidate(3, menuClass2 = $$props2.menuClass);
      if ("moveTodoMenuId" in $$props2)
        $$invalidate(4, moveTodoMenuId2 = $$props2.moveTodoMenuId);
      if ("confirmDeletionModalId" in $$props2)
        $$invalidate(5, confirmDeletionModalId2 = $$props2.confirmDeletionModalId);
      if ("focusFirstElement" in $$props2)
        $$invalidate(7, focusFirstElement = $$props2.focusFirstElement);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*$openedMenuId, item*/
      65) {
        $:
          if ($openedMenuId !== item.id) {
            $$invalidate(7, focusFirstElement = false);
          }
      }
    };
    return [
      item,
      updateItem,
      deleteItem,
      menuClass2,
      moveTodoMenuId2,
      confirmDeletionModalId2,
      $openedMenuId,
      focusFirstElement,
      $itemToProcessId,
      click_handler,
      keydown_handler,
      click_handler_1,
      click_handler_2,
      click_handler_3,
      focusTrap_function
    ];
  }
  var OptionsMenu = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance56, create_fragment56, safe_not_equal, {
        item: 0,
        updateItem: 1,
        deleteItem: 2,
        menuClass: 3,
        moveTodoMenuId: 4,
        confirmDeletionModalId: 5
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "OptionsMenu",
        options,
        id: create_fragment56.name
      });
    }
    get item() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set item(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get updateItem() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set updateItem(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deleteItem() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deleteItem(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get moveTodoMenuId() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set moveTodoMenuId(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get confirmDeletionModalId() {
      throw new Error("<OptionsMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set confirmDeletionModalId(value) {
      throw new Error("<OptionsMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var OptionsMenu_default = OptionsMenu;

  // svelte/TodoCheckList.svelte
  var file23 = "svelte/TodoCheckList.svelte";
  function get_each_context3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[25] = list[i];
    return child_ctx;
  }
  function create_else_block_1(ctx) {
    let li;
    let textContent = "This list is looking lonely! Add some items?\n    ";
    let li_intro;
    const block = {
      c: function create7() {
        li = element("li");
        li.textContent = textContent;
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(li) !== "svelte-1fv7iaw")
          li.textContent = textContent;
        this.h();
      },
      h: function hydrate() {
        attr_dev(li, "class", "flex items-center h-10 px-2 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(li, file23, 136, 4, 4252);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
      },
      p: noop3,
      i: function intro(local) {
        if (local) {
          if (!li_intro) {
            add_render_callback(() => {
              li_intro = create_in_transition(li, fade, { delay: 250 });
              li_intro.start();
            });
          }
        }
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block_1.name,
      type: "else",
      source: "(119:2) {:else}",
      ctx
    });
    return block;
  }
  function create_else_block4(ctx) {
    let label;
    let input;
    let input_checked_value;
    let t0;
    let span;
    let t1_value = (
      /*item*/
      ctx[25].name + ""
    );
    let t1;
    let t2;
    let div;
    let optionsmenu;
    let t3;
    let draghandle;
    let updating_dragDisabled;
    let current;
    let mounted;
    let dispose;
    function change_handler() {
      return (
        /*change_handler*/
        ctx[17](
          /*item*/
          ctx[25]
        )
      );
    }
    function keydown_handler(...args2) {
      return (
        /*keydown_handler*/
        ctx[18](
          /*item*/
          ctx[25],
          ...args2
        )
      );
    }
    optionsmenu = new OptionsMenu_default({
      props: {
        item: (
          /*item*/
          ctx[25]
        ),
        updateItem: (
          /*updateItem*/
          ctx[4]
        ),
        deleteItem: (
          /*deleteItem*/
          ctx[5]
        ),
        menuClass: (
          /*menuClass*/
          ctx[10]
        ),
        moveTodoMenuId: (
          /*moveTodoMenuId*/
          ctx[11]
        )
      },
      $$inline: true
    });
    function draghandle_dragDisabled_binding(value) {
      ctx[19](value);
    }
    let draghandle_props = { itemId: (
      /*item*/
      ctx[25].id
    ) };
    if (
      /*dragDisabled*/
      ctx[1] !== void 0
    ) {
      draghandle_props.dragDisabled = /*dragDisabled*/
      ctx[1];
    }
    draghandle = new DragHandle_default({ props: draghandle_props, $$inline: true });
    binding_callbacks.push(() => bind(draghandle, "dragDisabled", draghandle_dragDisabled_binding));
    const block = {
      c: function create7() {
        label = element("label");
        input = element("input");
        t0 = space();
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        div = element("div");
        create_component(optionsmenu.$$.fragment);
        t3 = space();
        create_component(draghandle.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        label = claim_element(nodes, "LABEL", { title: true, class: true });
        var label_nodes = children(label);
        input = claim_element(label_nodes, "INPUT", { type: true, class: true });
        t0 = claim_space(label_nodes);
        span = claim_element(label_nodes, "SPAN", { style: true });
        var span_nodes = children(span);
        t1 = claim_text(span_nodes, t1_value);
        span_nodes.forEach(detach_dev);
        label_nodes.forEach(detach_dev);
        t2 = claim_space(nodes);
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        claim_component(optionsmenu.$$.fragment, div_nodes);
        t3 = claim_space(div_nodes);
        claim_component(draghandle.$$.fragment, div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(input, "type", "checkbox");
        attr_dev(input, "class", "checkbox bg-transparent pointer-events-auto focus:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-transparent ");
        input.checked = input_checked_value = /*item*/
        ctx[25].completed;
        add_location(input, file23, 108, 10, 3370);
        set_style(span, "word-break", "break-word");
        toggle_class(
          span,
          "line-through",
          /*item*/
          ctx[25].completed
        );
        add_location(span, file23, 123, 10, 3884);
        attr_dev(label, "title", "Click to toggle completed.");
        attr_dev(label, "class", "flex items-center gap-3 grow px-2 py-1.5 mr-5 rounded-lg text-lg cursor-pointer active:bg-base-300");
        toggle_class(
          label,
          "opacity-50",
          /*item*/
          ctx[25].completed
        );
        toggle_class(
          label,
          "pointer-events-none",
          /*$openedMenuId*/
          ctx[13]
        );
        toggle_class(label, "hover:bg-base-200", !/*hasTouchScreen*/
        ctx[14]);
        add_location(label, file23, 99, 8, 3008);
        attr_dev(div, "class", "flex gap-1");
        add_location(div, file23, 128, 8, 4027);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, label, anchor);
        append_hydration_dev(label, input);
        append_hydration_dev(label, t0);
        append_hydration_dev(label, span);
        append_hydration_dev(span, t1);
        insert_hydration_dev(target, t2, anchor);
        insert_hydration_dev(target, div, anchor);
        mount_component(optionsmenu, div, null);
        append_hydration_dev(div, t3);
        mount_component(draghandle, div, null);
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(input, "change", change_handler, false, false, false, false),
            listen_dev(input, "keydown", keydown_handler, false, false, false, false)
          ];
          mounted = true;
        }
      },
      p: function update2(new_ctx, dirty) {
        ctx = new_ctx;
        if (!current || dirty & /*items*/
        1 && input_checked_value !== (input_checked_value = /*item*/
        ctx[25].completed)) {
          prop_dev(input, "checked", input_checked_value);
        }
        if ((!current || dirty & /*items*/
        1) && t1_value !== (t1_value = /*item*/
        ctx[25].name + ""))
          set_data_dev(t1, t1_value);
        if (!current || dirty & /*items*/
        1) {
          toggle_class(
            span,
            "line-through",
            /*item*/
            ctx[25].completed
          );
        }
        if (!current || dirty & /*items*/
        1) {
          toggle_class(
            label,
            "opacity-50",
            /*item*/
            ctx[25].completed
          );
        }
        if (!current || dirty & /*$openedMenuId*/
        8192) {
          toggle_class(
            label,
            "pointer-events-none",
            /*$openedMenuId*/
            ctx[13]
          );
        }
        const optionsmenu_changes = {};
        if (dirty & /*items*/
        1)
          optionsmenu_changes.item = /*item*/
          ctx[25];
        if (dirty & /*updateItem*/
        16)
          optionsmenu_changes.updateItem = /*updateItem*/
          ctx[4];
        if (dirty & /*deleteItem*/
        32)
          optionsmenu_changes.deleteItem = /*deleteItem*/
          ctx[5];
        if (dirty & /*menuClass*/
        1024)
          optionsmenu_changes.menuClass = /*menuClass*/
          ctx[10];
        if (dirty & /*moveTodoMenuId*/
        2048)
          optionsmenu_changes.moveTodoMenuId = /*moveTodoMenuId*/
          ctx[11];
        optionsmenu.$set(optionsmenu_changes);
        const draghandle_changes = {};
        if (dirty & /*items*/
        1)
          draghandle_changes.itemId = /*item*/
          ctx[25].id;
        if (!updating_dragDisabled && dirty & /*dragDisabled*/
        2) {
          updating_dragDisabled = true;
          draghandle_changes.dragDisabled = /*dragDisabled*/
          ctx[1];
          add_flush_callback(() => updating_dragDisabled = false);
        }
        draghandle.$set(draghandle_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(optionsmenu.$$.fragment, local);
        transition_in(draghandle.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(optionsmenu.$$.fragment, local);
        transition_out(draghandle.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(label);
          detach_dev(t2);
          detach_dev(div);
        }
        destroy_component(optionsmenu);
        destroy_component(draghandle);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block4.name,
      type: "else",
      source: "(82:6) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block14(ctx) {
    let editform;
    let current;
    editform = new EditForm_default({
      props: {
        item: (
          /*item*/
          ctx[25]
        ),
        updateItem: (
          /*updateItem*/
          ctx[4]
        ),
        menuClass: (
          /*menuClass*/
          ctx[10]
        )
      },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(editform.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(editform.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(editform, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const editform_changes = {};
        if (dirty & /*items*/
        1)
          editform_changes.item = /*item*/
          ctx2[25];
        if (dirty & /*updateItem*/
        16)
          editform_changes.updateItem = /*updateItem*/
          ctx2[4];
        if (dirty & /*menuClass*/
        1024)
          editform_changes.menuClass = /*menuClass*/
          ctx2[10];
        editform.$set(editform_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(editform.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(editform.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(editform, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block14.name,
      type: "if",
      source: "(80:6) {#if item.isEditing}",
      ctx
    });
    return block;
  }
  function create_each_block3(key_1, ctx) {
    let li;
    let current_block_type_index;
    let if_block;
    let t;
    let li_aria_label_value;
    let onKeydown_action;
    let rect;
    let stop_animation = noop3;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block14, create_else_block4];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*item*/
        ctx2[25].isEditing
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    function onKeydown_function(...args2) {
      return (
        /*onKeydown_function*/
        ctx[20](
          /*item*/
          ctx[25],
          ...args2
        )
      );
    }
    const block = {
      key: key_1,
      first: null,
      c: function create7() {
        li = element("li");
        if_block.c();
        t = space();
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", { class: true, "aria-label": true });
        var li_nodes = children(li);
        if_block.l(li_nodes);
        t = claim_space(li_nodes);
        li_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(li, "class", "flex items-center justify-between rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(li, "aria-label", li_aria_label_value = /*item*/
        ctx[25].name);
        add_location(li, file23, 87, 4, 2582);
        this.first = li;
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
        if_blocks[current_block_type_index].m(li, null);
        append_hydration_dev(li, t);
        current = true;
        if (!mounted) {
          dispose = action_destroyer(onKeydown_action = onKeydown.call(null, li, onKeydown_function));
          mounted = true;
        }
      },
      p: function update2(new_ctx, dirty) {
        ctx = new_ctx;
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          } else {
            if_block.p(ctx, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(li, t);
        }
        if (!current || dirty & /*items*/
        1 && li_aria_label_value !== (li_aria_label_value = /*item*/
        ctx[25].name)) {
          attr_dev(li, "aria-label", li_aria_label_value);
        }
        if (onKeydown_action && is_function(onKeydown_action.update) && dirty & /*handleDragKeyDown, items*/
        257)
          onKeydown_action.update.call(null, onKeydown_function);
      },
      r: function measure() {
        rect = li.getBoundingClientRect();
      },
      f: function fix() {
        fix_position(li);
        stop_animation();
      },
      a: function animate() {
        stop_animation();
        stop_animation = create_animation(li, rect, flip, { duration: (
          /*flipDurationMs*/
          ctx[9]
        ) });
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
        if_blocks[current_block_type_index].d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_each_block3.name,
      type: "each",
      source: "(70:2) {#each items as item (item.id)}",
      ctx
    });
    return block;
  }
  function create_fragment57(ctx) {
    let ul;
    let each_blocks = [];
    let each_1_lookup = /* @__PURE__ */ new Map();
    let dndzone_action;
    let current;
    let mounted;
    let dispose;
    let each_value = ensure_array_like_dev(
      /*items*/
      ctx[0]
    );
    const get_key = (ctx2) => (
      /*item*/
      ctx2[25].id
    );
    validate_each_keys(ctx, each_value, get_each_context3, get_key);
    for (let i = 0; i < each_value.length; i += 1) {
      let child_ctx = get_each_context3(ctx, each_value, i);
      let key = get_key(child_ctx);
      each_1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
    }
    let each_1_else = null;
    if (!each_value.length) {
      each_1_else = create_else_block_1(ctx);
    }
    const block = {
      c: function create7() {
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        if (each_1_else) {
          each_1_else.c();
        }
        this.h();
      },
      l: function claim(nodes) {
        ul = claim_element(nodes, "UL", { class: true, "aria-label": true });
        var ul_nodes = children(ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].l(ul_nodes);
        }
        if (each_1_else) {
          each_1_else.l(ul_nodes);
        }
        ul_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(ul, "class", "min-h-[40px] rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(
          ul,
          "aria-label",
          /*title*/
          ctx[2]
        );
        set_style(
          ul,
          "visibility",
          /*isScrollPositionRestored*/
          ctx[12] ? "visible" : "hidden"
        );
        add_location(ul, file23, 68, 0, 1973);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, ul, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
        if (each_1_else) {
          each_1_else.m(ul, null);
        }
        current = true;
        if (!mounted) {
          dispose = [
            action_destroyer(dndzone_action = dndzone$2.call(null, ul, {
              items: (
                /*items*/
                ctx[0]
              ),
              flipDurationMs: (
                /*flipDurationMs*/
                ctx[9]
              ),
              dragDisabled: (
                /*dragDisabled*/
                ctx[1]
              ),
              morphDisabled: true,
              dropTargetStyle: {},
              dropTargetClasses: ["border-2", "border-dashed", "rounded-lg", "border-accent"]
            })),
            listen_dev(
              ul,
              "consider",
              /*consider_handler*/
              ctx[21],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              ul,
              "finalize",
              /*finalize_handler*/
              ctx[22],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*items, handleDragKeyDown, updateItem, menuClass, dragDisabled, deleteItem, moveTodoMenuId, $openedMenuId, hasTouchScreen, toggleCompleted*/
        27963) {
          each_value = ensure_array_like_dev(
            /*items*/
            ctx2[0]
          );
          group_outros();
          for (let i = 0; i < each_blocks.length; i += 1)
            each_blocks[i].r();
          validate_each_keys(ctx2, each_value, get_each_context3, get_key);
          each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block3, null, get_each_context3);
          for (let i = 0; i < each_blocks.length; i += 1)
            each_blocks[i].a();
          check_outros();
          if (!each_value.length && each_1_else) {
            each_1_else.p(ctx2, dirty);
          } else if (!each_value.length) {
            each_1_else = create_else_block_1(ctx2);
            each_1_else.c();
            transition_in(each_1_else, 1);
            each_1_else.m(ul, null);
          } else if (each_1_else) {
            each_1_else.d(1);
            each_1_else = null;
          }
        }
        if (!current || dirty & /*title*/
        4) {
          attr_dev(
            ul,
            "aria-label",
            /*title*/
            ctx2[2]
          );
        }
        if (dndzone_action && is_function(dndzone_action.update) && dirty & /*items, flipDurationMs, dragDisabled*/
        515)
          dndzone_action.update.call(null, {
            items: (
              /*items*/
              ctx2[0]
            ),
            flipDurationMs: (
              /*flipDurationMs*/
              ctx2[9]
            ),
            dragDisabled: (
              /*dragDisabled*/
              ctx2[1]
            ),
            morphDisabled: true,
            dropTargetStyle: {},
            dropTargetClasses: ["border-2", "border-dashed", "rounded-lg", "border-accent"]
          });
        if (dirty & /*isScrollPositionRestored*/
        4096) {
          set_style(
            ul,
            "visibility",
            /*isScrollPositionRestored*/
            ctx2[12] ? "visible" : "hidden"
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o: function outro(local) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(ul);
        }
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].d();
        }
        if (each_1_else)
          each_1_else.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment57.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance57($$self, $$props, $$invalidate) {
    let $yTodoItems;
    let $itemToProcessId;
    let $openedMenuId;
    validate_store(yTodoItems, "yTodoItems");
    component_subscribe($$self, yTodoItems, ($$value) => $$invalidate(23, $yTodoItems = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(24, $itemToProcessId = $$value));
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(13, $openedMenuId = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("TodoCheckList", slots, []);
    let { title } = $$props;
    let { items } = $$props;
    let { toggleCompleted } = $$props;
    let { updateItem } = $$props;
    let { deleteItem } = $$props;
    let { handleConsider } = $$props;
    let { handleFinalize } = $$props;
    let { handleDragKeyDown } = $$props;
    let { dragDisabled } = $$props;
    let { flipDurationMs: flipDurationMs2 } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let { moveTodoMenuId: moveTodoMenuId2 } = $$props;
    let { isScrollPositionRestored } = $$props;
    const hasTouchScreen = useHasTouchScreen();
    function updateUiOnConsider(newItems) {
      $$invalidate(0, items = newItems);
    }
    function updateUiOnFinalize(newItems) {
      const oldIndex = $yTodoItems.toArray().findIndex((yMap) => yMap.get("id") === $itemToProcessId);
      const oldItem = $yTodoItems.get(oldIndex);
      const newItem = new YMap();
      newItem.set("id", oldItem.get("id"));
      newItem.set("name", oldItem.get("name"));
      newItem.set("completed", oldItem.get("completed"));
      newItem.set("listId", oldItem.get("listId"));
      $yTodoItems.doc.transact(() => {
        $yTodoItems.delete(oldIndex);
        const indexInNewItems = newItems.findIndex((list) => list.id === $itemToProcessId);
        const prevItemId = indexInNewItems === 0 ? null : newItems[indexInNewItems - 1].id;
        if (!prevItemId) {
          $yTodoItems.unshift([newItem]);
          return;
        }
        const index = $yTodoItems.toArray().findIndex((yMap) => yMap.get("id") === prevItemId) + 1;
        $yTodoItems.insert(index, [newItem]);
      });
    }
    $$self.$$.on_mount.push(function() {
      if (title === void 0 && !("title" in $$props || $$self.$$.bound[$$self.$$.props["title"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'title'");
      }
      if (items === void 0 && !("items" in $$props || $$self.$$.bound[$$self.$$.props["items"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'items'");
      }
      if (toggleCompleted === void 0 && !("toggleCompleted" in $$props || $$self.$$.bound[$$self.$$.props["toggleCompleted"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'toggleCompleted'");
      }
      if (updateItem === void 0 && !("updateItem" in $$props || $$self.$$.bound[$$self.$$.props["updateItem"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'updateItem'");
      }
      if (deleteItem === void 0 && !("deleteItem" in $$props || $$self.$$.bound[$$self.$$.props["deleteItem"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'deleteItem'");
      }
      if (handleConsider === void 0 && !("handleConsider" in $$props || $$self.$$.bound[$$self.$$.props["handleConsider"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'handleConsider'");
      }
      if (handleFinalize === void 0 && !("handleFinalize" in $$props || $$self.$$.bound[$$self.$$.props["handleFinalize"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'handleFinalize'");
      }
      if (handleDragKeyDown === void 0 && !("handleDragKeyDown" in $$props || $$self.$$.bound[$$self.$$.props["handleDragKeyDown"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'handleDragKeyDown'");
      }
      if (dragDisabled === void 0 && !("dragDisabled" in $$props || $$self.$$.bound[$$self.$$.props["dragDisabled"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'dragDisabled'");
      }
      if (flipDurationMs2 === void 0 && !("flipDurationMs" in $$props || $$self.$$.bound[$$self.$$.props["flipDurationMs"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'flipDurationMs'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'menuClass'");
      }
      if (moveTodoMenuId2 === void 0 && !("moveTodoMenuId" in $$props || $$self.$$.bound[$$self.$$.props["moveTodoMenuId"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'moveTodoMenuId'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console.warn("<TodoCheckList> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = [
      "title",
      "items",
      "toggleCompleted",
      "updateItem",
      "deleteItem",
      "handleConsider",
      "handleFinalize",
      "handleDragKeyDown",
      "dragDisabled",
      "flipDurationMs",
      "menuClass",
      "moveTodoMenuId",
      "isScrollPositionRestored"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<TodoCheckList> was created with unknown prop '${key}'`);
    });
    const change_handler = (item) => toggleCompleted(item.id);
    const keydown_handler = (item, event) => {
      if (event.key === "Enter") {
        toggleCompleted(item.id);
      }
    };
    function draghandle_dragDisabled_binding(value) {
      dragDisabled = value;
      $$invalidate(1, dragDisabled);
    }
    const onKeydown_function = (item, event) => handleDragKeyDown(event, item.id);
    const consider_handler = (event) => handleConsider(event, updateUiOnConsider);
    const finalize_handler = (event) => handleFinalize(event, updateUiOnFinalize);
    $$self.$$set = ($$props2) => {
      if ("title" in $$props2)
        $$invalidate(2, title = $$props2.title);
      if ("items" in $$props2)
        $$invalidate(0, items = $$props2.items);
      if ("toggleCompleted" in $$props2)
        $$invalidate(3, toggleCompleted = $$props2.toggleCompleted);
      if ("updateItem" in $$props2)
        $$invalidate(4, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(5, deleteItem = $$props2.deleteItem);
      if ("handleConsider" in $$props2)
        $$invalidate(6, handleConsider = $$props2.handleConsider);
      if ("handleFinalize" in $$props2)
        $$invalidate(7, handleFinalize = $$props2.handleFinalize);
      if ("handleDragKeyDown" in $$props2)
        $$invalidate(8, handleDragKeyDown = $$props2.handleDragKeyDown);
      if ("dragDisabled" in $$props2)
        $$invalidate(1, dragDisabled = $$props2.dragDisabled);
      if ("flipDurationMs" in $$props2)
        $$invalidate(9, flipDurationMs2 = $$props2.flipDurationMs);
      if ("menuClass" in $$props2)
        $$invalidate(10, menuClass2 = $$props2.menuClass);
      if ("moveTodoMenuId" in $$props2)
        $$invalidate(11, moveTodoMenuId2 = $$props2.moveTodoMenuId);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(12, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    $$self.$capture_state = () => ({
      flip,
      fade,
      dndzone: dndzone$2,
      Y: yjs_exports,
      onKeydown,
      useHasTouchScreen,
      itemToProcessId,
      openedMenuId,
      yTodoItems,
      DragHandle: DragHandle_default,
      EditForm: EditForm_default,
      OptionsMenu: OptionsMenu_default,
      title,
      items,
      toggleCompleted,
      updateItem,
      deleteItem,
      handleConsider,
      handleFinalize,
      handleDragKeyDown,
      dragDisabled,
      flipDurationMs: flipDurationMs2,
      menuClass: menuClass2,
      moveTodoMenuId: moveTodoMenuId2,
      isScrollPositionRestored,
      hasTouchScreen,
      updateUiOnConsider,
      updateUiOnFinalize,
      $yTodoItems,
      $itemToProcessId,
      $openedMenuId
    });
    $$self.$inject_state = ($$props2) => {
      if ("title" in $$props2)
        $$invalidate(2, title = $$props2.title);
      if ("items" in $$props2)
        $$invalidate(0, items = $$props2.items);
      if ("toggleCompleted" in $$props2)
        $$invalidate(3, toggleCompleted = $$props2.toggleCompleted);
      if ("updateItem" in $$props2)
        $$invalidate(4, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(5, deleteItem = $$props2.deleteItem);
      if ("handleConsider" in $$props2)
        $$invalidate(6, handleConsider = $$props2.handleConsider);
      if ("handleFinalize" in $$props2)
        $$invalidate(7, handleFinalize = $$props2.handleFinalize);
      if ("handleDragKeyDown" in $$props2)
        $$invalidate(8, handleDragKeyDown = $$props2.handleDragKeyDown);
      if ("dragDisabled" in $$props2)
        $$invalidate(1, dragDisabled = $$props2.dragDisabled);
      if ("flipDurationMs" in $$props2)
        $$invalidate(9, flipDurationMs2 = $$props2.flipDurationMs);
      if ("menuClass" in $$props2)
        $$invalidate(10, menuClass2 = $$props2.menuClass);
      if ("moveTodoMenuId" in $$props2)
        $$invalidate(11, moveTodoMenuId2 = $$props2.moveTodoMenuId);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(12, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      items,
      dragDisabled,
      title,
      toggleCompleted,
      updateItem,
      deleteItem,
      handleConsider,
      handleFinalize,
      handleDragKeyDown,
      flipDurationMs2,
      menuClass2,
      moveTodoMenuId2,
      isScrollPositionRestored,
      $openedMenuId,
      hasTouchScreen,
      updateUiOnConsider,
      updateUiOnFinalize,
      change_handler,
      keydown_handler,
      draghandle_dragDisabled_binding,
      onKeydown_function,
      consider_handler,
      finalize_handler
    ];
  }
  var TodoCheckList = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance57, create_fragment57, safe_not_equal, {
        title: 2,
        items: 0,
        toggleCompleted: 3,
        updateItem: 4,
        deleteItem: 5,
        handleConsider: 6,
        handleFinalize: 7,
        handleDragKeyDown: 8,
        dragDisabled: 1,
        flipDurationMs: 9,
        menuClass: 10,
        moveTodoMenuId: 11,
        isScrollPositionRestored: 12
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "TodoCheckList",
        options,
        id: create_fragment57.name
      });
    }
    get title() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set title(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get items() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set items(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get toggleCompleted() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set toggleCompleted(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get updateItem() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set updateItem(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deleteItem() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deleteItem(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleConsider() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleConsider(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleFinalize() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleFinalize(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleDragKeyDown() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleDragKeyDown(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get dragDisabled() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set dragDisabled(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get flipDurationMs() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set flipDurationMs(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get moveTodoMenuId() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set moveTodoMenuId(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error("<TodoCheckList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error("<TodoCheckList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var TodoCheckList_default = TodoCheckList;

  // svelte/TodoListSelector.svelte
  var TodoListSelector_exports = {};
  __export(TodoListSelector_exports, {
    default: () => TodoListSelector_default
  });
  var { Error: Error_1 } = globals;
  var file24 = "svelte/TodoListSelector.svelte";
  function get_each_context4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[26] = list[i];
    const constants_0 = (
      /*$todoItems*/
      child_ctx[11].filter(function func(...args2) {
        return (
          /*func*/
          ctx[21](
            /*list*/
            child_ctx[26],
            ...args2
          )
        );
      })
    );
    child_ctx[27] = constants_0;
    const constants_1 = (
      /*listItems*/
      child_ctx[27].filter((item) => !item.completed)
    );
    child_ctx[28] = constants_1;
    return child_ctx;
  }
  function create_else_block_12(ctx) {
    let li;
    let textContent = "No lists yet. Please create a list to get started.\n    ";
    let li_intro;
    const block = {
      c: function create7() {
        li = element("li");
        li.textContent = textContent;
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(li) !== "svelte-8m9muu")
          li.textContent = textContent;
        this.h();
      },
      h: function hydrate() {
        attr_dev(li, "class", "flex items-center h-10 px-2 rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        add_location(li, file24, 134, 4, 4261);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
      },
      p: noop3,
      i: function intro(local) {
        if (local) {
          if (!li_intro) {
            add_render_callback(() => {
              li_intro = create_in_transition(li, fade, { delay: 250 });
              li_intro.start();
            });
          }
        }
      },
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block_12.name,
      type: "else",
      source: "(117:2) {:else}",
      ctx
    });
    return block;
  }
  function create_else_block5(ctx) {
    let button;
    let span1;
    let t0_value = (
      /*list*/
      ctx[26].name + ""
    );
    let t0;
    let t1;
    let span0;
    let t2_value = (
      /*uncompletedItems*/
      ctx[28].length + ""
    );
    let t2;
    let t3;
    let t4_value = (
      /*listItems*/
      ctx[27].length + ""
    );
    let t4;
    let t5;
    let chevronright;
    let t6;
    let div;
    let optionsmenu;
    let t7;
    let draghandle;
    let updating_dragDisabled;
    let current;
    let mounted;
    let dispose;
    chevronright = new chevron_right_default({
      props: { class: "shrink-0 w-4 h-4" },
      $$inline: true
    });
    function click_handler() {
      return (
        /*click_handler*/
        ctx[18](
          /*list*/
          ctx[26]
        )
      );
    }
    optionsmenu = new OptionsMenu_default({
      props: {
        item: (
          /*list*/
          ctx[26]
        ),
        updateItem: (
          /*updateItem*/
          ctx[1]
        ),
        deleteItem: (
          /*deleteItem*/
          ctx[2]
        ),
        menuClass: (
          /*menuClass*/
          ctx[7]
        ),
        confirmDeletionModalId: (
          /*confirmDeletionModalId*/
          ctx[8]
        )
      },
      $$inline: true
    });
    function draghandle_dragDisabled_binding(value) {
      ctx[19](value);
    }
    let draghandle_props = { itemId: (
      /*list*/
      ctx[26].id
    ) };
    if (
      /*dragDisabled*/
      ctx[0] !== void 0
    ) {
      draghandle_props.dragDisabled = /*dragDisabled*/
      ctx[0];
    }
    draghandle = new DragHandle_default({ props: draghandle_props, $$inline: true });
    binding_callbacks.push(() => bind(draghandle, "dragDisabled", draghandle_dragDisabled_binding));
    const block = {
      c: function create7() {
        button = element("button");
        span1 = element("span");
        t0 = text(t0_value);
        t1 = space();
        span0 = element("span");
        t2 = text(t2_value);
        t3 = text(" / ");
        t4 = text(t4_value);
        t5 = space();
        create_component(chevronright.$$.fragment);
        t6 = space();
        div = element("div");
        create_component(optionsmenu.$$.fragment);
        t7 = space();
        create_component(draghandle.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        button = claim_element(nodes, "BUTTON", { title: true, class: true });
        var button_nodes = children(button);
        span1 = claim_element(button_nodes, "SPAN", { style: true });
        var span1_nodes = children(span1);
        t0 = claim_text(span1_nodes, t0_value);
        t1 = claim_space(span1_nodes);
        span0 = claim_element(span1_nodes, "SPAN", { class: true });
        var span0_nodes = children(span0);
        t2 = claim_text(span0_nodes, t2_value);
        t3 = claim_text(span0_nodes, " / ");
        t4 = claim_text(span0_nodes, t4_value);
        span0_nodes.forEach(detach_dev);
        span1_nodes.forEach(detach_dev);
        t5 = claim_space(button_nodes);
        claim_component(chevronright.$$.fragment, button_nodes);
        button_nodes.forEach(detach_dev);
        t6 = claim_space(nodes);
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        claim_component(optionsmenu.$$.fragment, div_nodes);
        t7 = claim_space(div_nodes);
        claim_component(draghandle.$$.fragment, div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(span0, "class", "badge badge-xs transition-none p-2");
        add_location(span0, file24, 118, 12, 3794);
        set_style(span1, "word-break", "break-word");
        add_location(span1, file24, 115, 10, 3718);
        attr_dev(button, "title", "Click to view list.");
        attr_dev(button, "class", "flex items-center gap-1 grow px-2 py-1.5 mr-5 rounded-lg text-lg text-left active:bg-base-300 focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        toggle_class(
          button,
          "pointer-events-none",
          /*$openedMenuId*/
          ctx[12]
        );
        toggle_class(button, "hover:bg-base-200", !/*hasTouchScreen*/
        ctx[15]);
        add_location(button, file24, 99, 8, 3097);
        attr_dev(div, "class", "flex gap-1");
        add_location(div, file24, 126, 8, 4023);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button, anchor);
        append_hydration_dev(button, span1);
        append_hydration_dev(span1, t0);
        append_hydration_dev(span1, t1);
        append_hydration_dev(span1, span0);
        append_hydration_dev(span0, t2);
        append_hydration_dev(span0, t3);
        append_hydration_dev(span0, t4);
        append_hydration_dev(button, t5);
        mount_component(chevronright, button, null);
        insert_hydration_dev(target, t6, anchor);
        insert_hydration_dev(target, div, anchor);
        mount_component(optionsmenu, div, null);
        append_hydration_dev(div, t7);
        mount_component(draghandle, div, null);
        current = true;
        if (!mounted) {
          dispose = listen_dev(button, "click", click_handler, false, false, false, false);
          mounted = true;
        }
      },
      p: function update2(new_ctx, dirty) {
        ctx = new_ctx;
        if ((!current || dirty & /*$todoLists*/
        1024) && t0_value !== (t0_value = /*list*/
        ctx[26].name + ""))
          set_data_dev(t0, t0_value);
        if ((!current || dirty & /*$todoItems, $todoLists*/
        3072) && t2_value !== (t2_value = /*uncompletedItems*/
        ctx[28].length + ""))
          set_data_dev(t2, t2_value);
        if ((!current || dirty & /*$todoItems, $todoLists*/
        3072) && t4_value !== (t4_value = /*listItems*/
        ctx[27].length + ""))
          set_data_dev(t4, t4_value);
        if (!current || dirty & /*$openedMenuId*/
        4096) {
          toggle_class(
            button,
            "pointer-events-none",
            /*$openedMenuId*/
            ctx[12]
          );
        }
        const optionsmenu_changes = {};
        if (dirty & /*$todoLists*/
        1024)
          optionsmenu_changes.item = /*list*/
          ctx[26];
        if (dirty & /*updateItem*/
        2)
          optionsmenu_changes.updateItem = /*updateItem*/
          ctx[1];
        if (dirty & /*deleteItem*/
        4)
          optionsmenu_changes.deleteItem = /*deleteItem*/
          ctx[2];
        if (dirty & /*menuClass*/
        128)
          optionsmenu_changes.menuClass = /*menuClass*/
          ctx[7];
        if (dirty & /*confirmDeletionModalId*/
        256)
          optionsmenu_changes.confirmDeletionModalId = /*confirmDeletionModalId*/
          ctx[8];
        optionsmenu.$set(optionsmenu_changes);
        const draghandle_changes = {};
        if (dirty & /*$todoLists*/
        1024)
          draghandle_changes.itemId = /*list*/
          ctx[26].id;
        if (!updating_dragDisabled && dirty & /*dragDisabled*/
        1) {
          updating_dragDisabled = true;
          draghandle_changes.dragDisabled = /*dragDisabled*/
          ctx[0];
          add_flush_callback(() => updating_dragDisabled = false);
        }
        draghandle.$set(draghandle_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(chevronright.$$.fragment, local);
        transition_in(optionsmenu.$$.fragment, local);
        transition_in(draghandle.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(chevronright.$$.fragment, local);
        transition_out(optionsmenu.$$.fragment, local);
        transition_out(draghandle.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button);
          detach_dev(t6);
          detach_dev(div);
        }
        destroy_component(chevronright);
        destroy_component(optionsmenu);
        destroy_component(draghandle);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block5.name,
      type: "else",
      source: "(82:6) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block15(ctx) {
    let editform;
    let current;
    editform = new EditForm_default({
      props: {
        item: (
          /*list*/
          ctx[26]
        ),
        updateItem: (
          /*updateItem*/
          ctx[1]
        ),
        menuClass: (
          /*menuClass*/
          ctx[7]
        )
      },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(editform.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(editform.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(editform, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const editform_changes = {};
        if (dirty & /*$todoLists*/
        1024)
          editform_changes.item = /*list*/
          ctx2[26];
        if (dirty & /*updateItem*/
        2)
          editform_changes.updateItem = /*updateItem*/
          ctx2[1];
        if (dirty & /*menuClass*/
        128)
          editform_changes.menuClass = /*menuClass*/
          ctx2[7];
        editform.$set(editform_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(editform.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(editform.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(editform, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block15.name,
      type: "if",
      source: "(80:6) {#if list.isEditing}",
      ctx
    });
    return block;
  }
  function create_each_block4(key_1, ctx) {
    let li;
    let current_block_type_index;
    let if_block;
    let t;
    let li_aria_label_value;
    let onKeydown_action;
    let rect;
    let stop_animation = noop3;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [create_if_block15, create_else_block5];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*list*/
        ctx2[26].isEditing
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    function onKeydown_function(...args2) {
      return (
        /*onKeydown_function*/
        ctx[20](
          /*list*/
          ctx[26],
          ...args2
        )
      );
    }
    const block = {
      key: key_1,
      first: null,
      c: function create7() {
        li = element("li");
        if_block.c();
        t = space();
        this.h();
      },
      l: function claim(nodes) {
        li = claim_element(nodes, "LI", { class: true, "aria-label": true });
        var li_nodes = children(li);
        if_block.l(li_nodes);
        t = claim_space(li_nodes);
        li_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(li, "class", "flex items-center justify-between rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(li, "aria-label", li_aria_label_value = /*list*/
        ctx[26].name);
        add_location(li, file24, 87, 4, 2666);
        this.first = li;
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, li, anchor);
        if_blocks[current_block_type_index].m(li, null);
        append_hydration_dev(li, t);
        current = true;
        if (!mounted) {
          dispose = action_destroyer(onKeydown_action = onKeydown.call(null, li, onKeydown_function));
          mounted = true;
        }
      },
      p: function update2(new_ctx, dirty) {
        ctx = new_ctx;
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          } else {
            if_block.p(ctx, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(li, t);
        }
        if (!current || dirty & /*$todoLists*/
        1024 && li_aria_label_value !== (li_aria_label_value = /*list*/
        ctx[26].name)) {
          attr_dev(li, "aria-label", li_aria_label_value);
        }
        if (onKeydown_action && is_function(onKeydown_action.update) && dirty & /*handleDragKeyDown, $todoLists*/
        1056)
          onKeydown_action.update.call(null, onKeydown_function);
      },
      r: function measure() {
        rect = li.getBoundingClientRect();
      },
      f: function fix() {
        fix_position(li);
        stop_animation();
      },
      a: function animate() {
        stop_animation();
        stop_animation = create_animation(li, rect, flip, { duration: (
          /*flipDurationMs*/
          ctx[6]
        ) });
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(li);
        }
        if_blocks[current_block_type_index].d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_each_block4.name,
      type: "each",
      source: "(68:2) {#each $todoLists as list (list.id)}",
      ctx
    });
    return block;
  }
  function create_fragment58(ctx) {
    let ul;
    let each_blocks = [];
    let each_1_lookup = /* @__PURE__ */ new Map();
    let dndzone_action;
    let current;
    let mounted;
    let dispose;
    let each_value = ensure_array_like_dev(
      /*$todoLists*/
      ctx[10]
    );
    const get_key = (ctx2) => (
      /*list*/
      ctx2[26].id
    );
    validate_each_keys(ctx, each_value, get_each_context4, get_key);
    for (let i = 0; i < each_value.length; i += 1) {
      let child_ctx = get_each_context4(ctx, each_value, i);
      let key = get_key(child_ctx);
      each_1_lookup.set(key, each_blocks[i] = create_each_block4(key, child_ctx));
    }
    let each_1_else = null;
    if (!each_value.length) {
      each_1_else = create_else_block_12(ctx);
    }
    const block = {
      c: function create7() {
        ul = element("ul");
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c();
        }
        if (each_1_else) {
          each_1_else.c();
        }
        this.h();
      },
      l: function claim(nodes) {
        ul = claim_element(nodes, "UL", { class: true, "aria-label": true });
        var ul_nodes = children(ul);
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].l(ul_nodes);
        }
        if (each_1_else) {
          each_1_else.l(ul_nodes);
        }
        ul_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(ul, "class", "min-h-[40px] rounded-lg focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(ul, "aria-label", "Lists");
        set_style(
          ul,
          "visibility",
          /*isScrollPositionRestored*/
          ctx[9] ? "visible" : "hidden"
        );
        add_location(ul, file24, 66, 0, 1886);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, ul, anchor);
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul, null);
          }
        }
        if (each_1_else) {
          each_1_else.m(ul, null);
        }
        current = true;
        if (!mounted) {
          dispose = [
            action_destroyer(dndzone_action = dndzone$2.call(null, ul, {
              items: (
                /*$todoLists*/
                ctx[10]
              ),
              flipDurationMs: (
                /*flipDurationMs*/
                ctx[6]
              ),
              dragDisabled: (
                /*dragDisabled*/
                ctx[0]
              ),
              morphDisabled: true,
              dropTargetStyle: {},
              dropTargetClasses: ["border-2", "border-dashed", "rounded-lg", "border-accent"]
            })),
            listen_dev(
              ul,
              "consider",
              /*consider_handler*/
              ctx[22],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              ul,
              "finalize",
              /*finalize_handler*/
              ctx[23],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*$todoLists, handleDragKeyDown, updateItem, menuClass, dragDisabled, deleteItem, confirmDeletionModalId, $openedMenuId, hasTouchScreen, $urlHash, $selectedListId, history, window, $todoItems*/
        64935) {
          each_value = ensure_array_like_dev(
            /*$todoLists*/
            ctx2[10]
          );
          group_outros();
          for (let i = 0; i < each_blocks.length; i += 1)
            each_blocks[i].r();
          validate_each_keys(ctx2, each_value, get_each_context4, get_key);
          each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block4, null, get_each_context4);
          for (let i = 0; i < each_blocks.length; i += 1)
            each_blocks[i].a();
          check_outros();
          if (!each_value.length && each_1_else) {
            each_1_else.p(ctx2, dirty);
          } else if (!each_value.length) {
            each_1_else = create_else_block_12(ctx2);
            each_1_else.c();
            transition_in(each_1_else, 1);
            each_1_else.m(ul, null);
          } else if (each_1_else) {
            each_1_else.d(1);
            each_1_else = null;
          }
        }
        if (dndzone_action && is_function(dndzone_action.update) && dirty & /*$todoLists, flipDurationMs, dragDisabled*/
        1089)
          dndzone_action.update.call(null, {
            items: (
              /*$todoLists*/
              ctx2[10]
            ),
            flipDurationMs: (
              /*flipDurationMs*/
              ctx2[6]
            ),
            dragDisabled: (
              /*dragDisabled*/
              ctx2[0]
            ),
            morphDisabled: true,
            dropTargetStyle: {},
            dropTargetClasses: ["border-2", "border-dashed", "rounded-lg", "border-accent"]
          });
        if (dirty & /*isScrollPositionRestored*/
        512) {
          set_style(
            ul,
            "visibility",
            /*isScrollPositionRestored*/
            ctx2[9] ? "visible" : "hidden"
          );
        }
      },
      i: function intro(local) {
        if (current)
          return;
        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i]);
        }
        current = true;
      },
      o: function outro(local) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i]);
        }
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(ul);
        }
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].d();
        }
        if (each_1_else)
          each_1_else.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment58.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance58($$self, $$props, $$invalidate) {
    let $yTodoLists;
    let $itemToProcessId;
    let $todoLists;
    let $todoItems;
    let $openedMenuId;
    let $urlHash;
    let $selectedListId;
    validate_store(yTodoLists, "yTodoLists");
    component_subscribe($$self, yTodoLists, ($$value) => $$invalidate(24, $yTodoLists = $$value));
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(25, $itemToProcessId = $$value));
    validate_store(todoLists, "todoLists");
    component_subscribe($$self, todoLists, ($$value) => $$invalidate(10, $todoLists = $$value));
    validate_store(todoItems, "todoItems");
    component_subscribe($$self, todoItems, ($$value) => $$invalidate(11, $todoItems = $$value));
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(12, $openedMenuId = $$value));
    validate_store(urlHash, "urlHash");
    component_subscribe($$self, urlHash, ($$value) => $$invalidate(13, $urlHash = $$value));
    validate_store(selectedListId, "selectedListId");
    component_subscribe($$self, selectedListId, ($$value) => $$invalidate(14, $selectedListId = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("TodoListSelector", slots, []);
    let { updateItem } = $$props;
    let { deleteItem } = $$props;
    let { handleConsider } = $$props;
    let { handleFinalize } = $$props;
    let { handleDragKeyDown } = $$props;
    let { dragDisabled } = $$props;
    let { flipDurationMs: flipDurationMs2 } = $$props;
    let { menuClass: menuClass2 } = $$props;
    let { confirmDeletionModalId: confirmDeletionModalId2 } = $$props;
    let { isScrollPositionRestored } = $$props;
    const hasTouchScreen = useHasTouchScreen();
    function updateUiOnConsider(newItems) {
      set_store_value(todoLists, $todoLists = newItems, $todoLists);
    }
    function updateUiOnFinalize(newItems) {
      const oldIndex = $yTodoLists.toArray().findIndex((yMap) => yMap.get("id") === $itemToProcessId);
      const oldList = $yTodoLists.get(oldIndex);
      const newList2 = new YMap();
      let oldListId = oldList.get("id");
      if (typeof oldListId !== "string") {
        throw new Error("The list ID must be a string.");
      }
      let oldListName = oldList.get("name");
      if (typeof oldListName !== "string") {
        throw new Error("The list name must be a string.");
      }
      newList2.set("id", oldListId);
      newList2.set("name", oldListName);
      $yTodoLists.doc.transact(() => {
        $yTodoLists.delete(oldIndex);
        const index = newItems.findIndex((list) => list.id === $itemToProcessId);
        $yTodoLists.insert(index, [newList2]);
      });
    }
    $$self.$$.on_mount.push(function() {
      if (updateItem === void 0 && !("updateItem" in $$props || $$self.$$.bound[$$self.$$.props["updateItem"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'updateItem'");
      }
      if (deleteItem === void 0 && !("deleteItem" in $$props || $$self.$$.bound[$$self.$$.props["deleteItem"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'deleteItem'");
      }
      if (handleConsider === void 0 && !("handleConsider" in $$props || $$self.$$.bound[$$self.$$.props["handleConsider"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'handleConsider'");
      }
      if (handleFinalize === void 0 && !("handleFinalize" in $$props || $$self.$$.bound[$$self.$$.props["handleFinalize"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'handleFinalize'");
      }
      if (handleDragKeyDown === void 0 && !("handleDragKeyDown" in $$props || $$self.$$.bound[$$self.$$.props["handleDragKeyDown"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'handleDragKeyDown'");
      }
      if (dragDisabled === void 0 && !("dragDisabled" in $$props || $$self.$$.bound[$$self.$$.props["dragDisabled"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'dragDisabled'");
      }
      if (flipDurationMs2 === void 0 && !("flipDurationMs" in $$props || $$self.$$.bound[$$self.$$.props["flipDurationMs"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'flipDurationMs'");
      }
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'menuClass'");
      }
      if (confirmDeletionModalId2 === void 0 && !("confirmDeletionModalId" in $$props || $$self.$$.bound[$$self.$$.props["confirmDeletionModalId"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'confirmDeletionModalId'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console.warn("<TodoListSelector> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = [
      "updateItem",
      "deleteItem",
      "handleConsider",
      "handleFinalize",
      "handleDragKeyDown",
      "dragDisabled",
      "flipDurationMs",
      "menuClass",
      "confirmDeletionModalId",
      "isScrollPositionRestored"
    ];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<TodoListSelector> was created with unknown prop '${key}'`);
    });
    const click_handler = (list) => {
      set_store_value(urlHash, $urlHash = "listId", $urlHash);
      set_store_value(selectedListId, $selectedListId = list.id, $selectedListId);
      history.pushState({}, "", `/app#${list.id}`);
      window.scrollTo(0, 0);
    };
    function draghandle_dragDisabled_binding(value) {
      dragDisabled = value;
      $$invalidate(0, dragDisabled);
    }
    const onKeydown_function = (list, event) => handleDragKeyDown(event, list.id);
    const func = (list, item) => item.listId === list.id;
    const consider_handler = (event) => handleConsider(event, updateUiOnConsider);
    const finalize_handler = (event) => handleFinalize(event, updateUiOnFinalize);
    $$self.$$set = ($$props2) => {
      if ("updateItem" in $$props2)
        $$invalidate(1, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
      if ("handleConsider" in $$props2)
        $$invalidate(3, handleConsider = $$props2.handleConsider);
      if ("handleFinalize" in $$props2)
        $$invalidate(4, handleFinalize = $$props2.handleFinalize);
      if ("handleDragKeyDown" in $$props2)
        $$invalidate(5, handleDragKeyDown = $$props2.handleDragKeyDown);
      if ("dragDisabled" in $$props2)
        $$invalidate(0, dragDisabled = $$props2.dragDisabled);
      if ("flipDurationMs" in $$props2)
        $$invalidate(6, flipDurationMs2 = $$props2.flipDurationMs);
      if ("menuClass" in $$props2)
        $$invalidate(7, menuClass2 = $$props2.menuClass);
      if ("confirmDeletionModalId" in $$props2)
        $$invalidate(8, confirmDeletionModalId2 = $$props2.confirmDeletionModalId);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(9, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    $$self.$capture_state = () => ({
      flip,
      fade,
      ChevronRight: chevron_right_default,
      dndzone: dndzone$2,
      Y: yjs_exports,
      onKeydown,
      useHasTouchScreen,
      itemToProcessId,
      openedMenuId,
      selectedListId,
      urlHash,
      todoLists,
      todoItems,
      yTodoLists,
      DragHandle: DragHandle_default,
      EditForm: EditForm_default,
      OptionsMenu: OptionsMenu_default,
      updateItem,
      deleteItem,
      handleConsider,
      handleFinalize,
      handleDragKeyDown,
      dragDisabled,
      flipDurationMs: flipDurationMs2,
      menuClass: menuClass2,
      confirmDeletionModalId: confirmDeletionModalId2,
      isScrollPositionRestored,
      hasTouchScreen,
      updateUiOnConsider,
      updateUiOnFinalize,
      $yTodoLists,
      $itemToProcessId,
      $todoLists,
      $todoItems,
      $openedMenuId,
      $urlHash,
      $selectedListId
    });
    $$self.$inject_state = ($$props2) => {
      if ("updateItem" in $$props2)
        $$invalidate(1, updateItem = $$props2.updateItem);
      if ("deleteItem" in $$props2)
        $$invalidate(2, deleteItem = $$props2.deleteItem);
      if ("handleConsider" in $$props2)
        $$invalidate(3, handleConsider = $$props2.handleConsider);
      if ("handleFinalize" in $$props2)
        $$invalidate(4, handleFinalize = $$props2.handleFinalize);
      if ("handleDragKeyDown" in $$props2)
        $$invalidate(5, handleDragKeyDown = $$props2.handleDragKeyDown);
      if ("dragDisabled" in $$props2)
        $$invalidate(0, dragDisabled = $$props2.dragDisabled);
      if ("flipDurationMs" in $$props2)
        $$invalidate(6, flipDurationMs2 = $$props2.flipDurationMs);
      if ("menuClass" in $$props2)
        $$invalidate(7, menuClass2 = $$props2.menuClass);
      if ("confirmDeletionModalId" in $$props2)
        $$invalidate(8, confirmDeletionModalId2 = $$props2.confirmDeletionModalId);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(9, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      dragDisabled,
      updateItem,
      deleteItem,
      handleConsider,
      handleFinalize,
      handleDragKeyDown,
      flipDurationMs2,
      menuClass2,
      confirmDeletionModalId2,
      isScrollPositionRestored,
      $todoLists,
      $todoItems,
      $openedMenuId,
      $urlHash,
      $selectedListId,
      hasTouchScreen,
      updateUiOnConsider,
      updateUiOnFinalize,
      click_handler,
      draghandle_dragDisabled_binding,
      onKeydown_function,
      func,
      consider_handler,
      finalize_handler
    ];
  }
  var TodoListSelector = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance58, create_fragment58, safe_not_equal, {
        updateItem: 1,
        deleteItem: 2,
        handleConsider: 3,
        handleFinalize: 4,
        handleDragKeyDown: 5,
        dragDisabled: 0,
        flipDurationMs: 6,
        menuClass: 7,
        confirmDeletionModalId: 8,
        isScrollPositionRestored: 9
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "TodoListSelector",
        options,
        id: create_fragment58.name
      });
    }
    get updateItem() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set updateItem(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deleteItem() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deleteItem(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleConsider() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleConsider(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleFinalize() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleFinalize(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get handleDragKeyDown() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set handleDragKeyDown(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get dragDisabled() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set dragDisabled(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get flipDurationMs() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set flipDurationMs(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get menuClass() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get confirmDeletionModalId() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set confirmDeletionModalId(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error_1("<TodoListSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error_1("<TodoListSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var TodoListSelector_default = TodoListSelector;

  // svelte/TodoApp.svelte
  function create_if_block_23(ctx) {
    let confirmdeletionmodal;
    let current;
    confirmdeletionmodal = new ConfirmDeletionModal_default({
      props: {
        listId: (
          /*$itemToProcessId*/
          ctx[3]
        ),
        menuClass: (
          /*menuClass*/
          ctx[0]
        ),
        deleteItem: (
          /*deleteItem*/
          ctx[20]
        )
      },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(confirmdeletionmodal.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(confirmdeletionmodal.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(confirmdeletionmodal, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const confirmdeletionmodal_changes = {};
        if (dirty[0] & /*$itemToProcessId*/
        8)
          confirmdeletionmodal_changes.listId = /*$itemToProcessId*/
          ctx2[3];
        if (dirty[0] & /*menuClass*/
        1)
          confirmdeletionmodal_changes.menuClass = /*menuClass*/
          ctx2[0];
        confirmdeletionmodal.$set(confirmdeletionmodal_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(confirmdeletionmodal.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(confirmdeletionmodal.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(confirmdeletionmodal, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_23.name,
      type: "if",
      source: "(214:0) {#if $itemToProcessId && $openedMenuId === confirmDeletionModalId}",
      ctx
    });
    return block;
  }
  function create_if_block_16(ctx) {
    let movetodomenu;
    let current;
    movetodomenu = new MoveTodoMenu_default({
      props: {
        itemToMove: (
          /*itemToMove*/
          ctx[6]
        ),
        menuClass: (
          /*menuClass*/
          ctx[0]
        ),
        moveTodo: (
          /*moveTodo*/
          ctx[18]
        )
      },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(movetodomenu.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(movetodomenu.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(movetodomenu, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const movetodomenu_changes = {};
        if (dirty[0] & /*itemToMove*/
        64)
          movetodomenu_changes.itemToMove = /*itemToMove*/
          ctx2[6];
        if (dirty[0] & /*menuClass*/
        1)
          movetodomenu_changes.menuClass = /*menuClass*/
          ctx2[0];
        movetodomenu.$set(movetodomenu_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(movetodomenu.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(movetodomenu.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(movetodomenu, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_16.name,
      type: "if",
      source: "(218:0) {#if itemToMove && $openedMenuId === moveTodoMenuId}",
      ctx
    });
    return block;
  }
  function create_else_block6(ctx) {
    let newitemform;
    let updating_value;
    let t;
    let itemscontainer;
    let updating_isDropdownOpened;
    let current;
    function newitemform_value_binding_1(value) {
      ctx[28](value);
    }
    let newitemform_props = {
      addItemCallback: (
        /*addList*/
        ctx[15]
      ),
      placeholder: "Enter new list name",
      submitButtonText: "Create",
      submitButtonTitle: "Create new list.",
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      )
    };
    if (
      /*$newList*/
      ctx[11] !== void 0
    ) {
      newitemform_props.value = /*$newList*/
      ctx[11];
    }
    newitemform = new NewItemForm_default({ props: newitemform_props, $$inline: true });
    binding_callbacks.push(() => bind(newitemform, "value", newitemform_value_binding_1));
    function itemscontainer_isDropdownOpened_binding_1(value) {
      ctx[30](value);
    }
    let itemscontainer_props = {
      title: "Lists",
      totalCount: (
        /*$todoLists*/
        ctx[9].length
      ),
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot_19] },
      $$scope: { ctx }
    };
    if (
      /*$isListsOpened*/
      ctx[14] !== void 0
    ) {
      itemscontainer_props.isDropdownOpened = /*$isListsOpened*/
      ctx[14];
    }
    itemscontainer = new ItemsContainer_default({
      props: itemscontainer_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(itemscontainer, "isDropdownOpened", itemscontainer_isDropdownOpened_binding_1));
    const block = {
      c: function create7() {
        create_component(newitemform.$$.fragment);
        t = space();
        create_component(itemscontainer.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(newitemform.$$.fragment, nodes);
        t = claim_space(nodes);
        claim_component(itemscontainer.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(newitemform, target, anchor);
        insert_hydration_dev(target, t, anchor);
        mount_component(itemscontainer, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const newitemform_changes = {};
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          newitemform_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (!updating_value && dirty[0] & /*$newList*/
        2048) {
          updating_value = true;
          newitemform_changes.value = /*$newList*/
          ctx2[11];
          add_flush_callback(() => updating_value = false);
        }
        newitemform.$set(newitemform_changes);
        const itemscontainer_changes = {};
        if (dirty[0] & /*$todoLists*/
        512)
          itemscontainer_changes.totalCount = /*$todoLists*/
          ctx2[9].length;
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          itemscontainer_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (dirty[0] & /*menuClass, isScrollPositionRestored, dragDisabled*/
        35 | dirty[1] & /*$$scope*/
        32) {
          itemscontainer_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_isDropdownOpened && dirty[0] & /*$isListsOpened*/
        16384) {
          updating_isDropdownOpened = true;
          itemscontainer_changes.isDropdownOpened = /*$isListsOpened*/
          ctx2[14];
          add_flush_callback(() => updating_isDropdownOpened = false);
        }
        itemscontainer.$set(itemscontainer_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(newitemform.$$.fragment, local);
        transition_in(itemscontainer.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(newitemform.$$.fragment, local);
        transition_out(itemscontainer.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
        destroy_component(newitemform, detaching);
        destroy_component(itemscontainer, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block6.name,
      type: "else",
      source: "(255:0) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block16(ctx) {
    let newitemform;
    let updating_value;
    let t;
    let itemscontainer;
    let updating_isDropdownOpened;
    let current;
    function newitemform_value_binding(value) {
      ctx[25](value);
    }
    let newitemform_props = {
      addItemCallback: (
        /*addTodo*/
        ctx[16]
      ),
      placeholder: "Enter new item name",
      submitButtonText: "Add",
      submitButtonTitle: "Add item to list.",
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      )
    };
    if (
      /*$newTodo*/
      ctx[10] !== void 0
    ) {
      newitemform_props.value = /*$newTodo*/
      ctx[10];
    }
    newitemform = new NewItemForm_default({ props: newitemform_props, $$inline: true });
    binding_callbacks.push(() => bind(newitemform, "value", newitemform_value_binding));
    function itemscontainer_isDropdownOpened_binding(value) {
      ctx[27](value);
    }
    let itemscontainer_props = {
      title: (
        /*selectedListName*/
        ctx[8]
      ),
      totalCount: (
        /*selectedListTodoItems*/
        ctx[2].length
      ),
      uncompletedCount: (
        /*selectedListUncompletedItems*/
        ctx[7].length
      ),
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      ),
      $$slots: { default: [create_default_slot29] },
      $$scope: { ctx }
    };
    if (
      /*$isTodoOpened*/
      ctx[13] !== void 0
    ) {
      itemscontainer_props.isDropdownOpened = /*$isTodoOpened*/
      ctx[13];
    }
    itemscontainer = new ItemsContainer_default({
      props: itemscontainer_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(itemscontainer, "isDropdownOpened", itemscontainer_isDropdownOpened_binding));
    const block = {
      c: function create7() {
        create_component(newitemform.$$.fragment);
        t = space();
        create_component(itemscontainer.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(newitemform.$$.fragment, nodes);
        t = claim_space(nodes);
        claim_component(itemscontainer.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(newitemform, target, anchor);
        insert_hydration_dev(target, t, anchor);
        mount_component(itemscontainer, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const newitemform_changes = {};
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          newitemform_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (!updating_value && dirty[0] & /*$newTodo*/
        1024) {
          updating_value = true;
          newitemform_changes.value = /*$newTodo*/
          ctx2[10];
          add_flush_callback(() => updating_value = false);
        }
        newitemform.$set(newitemform_changes);
        const itemscontainer_changes = {};
        if (dirty[0] & /*selectedListName*/
        256)
          itemscontainer_changes.title = /*selectedListName*/
          ctx2[8];
        if (dirty[0] & /*selectedListTodoItems*/
        4)
          itemscontainer_changes.totalCount = /*selectedListTodoItems*/
          ctx2[2].length;
        if (dirty[0] & /*selectedListUncompletedItems*/
        128)
          itemscontainer_changes.uncompletedCount = /*selectedListUncompletedItems*/
          ctx2[7].length;
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          itemscontainer_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (dirty[0] & /*selectedListName, selectedListTodoItems, menuClass, isScrollPositionRestored, dragDisabled*/
        295 | dirty[1] & /*$$scope*/
        32) {
          itemscontainer_changes.$$scope = { dirty, ctx: ctx2 };
        }
        if (!updating_isDropdownOpened && dirty[0] & /*$isTodoOpened*/
        8192) {
          updating_isDropdownOpened = true;
          itemscontainer_changes.isDropdownOpened = /*$isTodoOpened*/
          ctx2[13];
          add_flush_callback(() => updating_isDropdownOpened = false);
        }
        itemscontainer.$set(itemscontainer_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(newitemform.$$.fragment, local);
        transition_in(itemscontainer.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(newitemform.$$.fragment, local);
        transition_out(itemscontainer.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t);
        }
        destroy_component(newitemform, detaching);
        destroy_component(itemscontainer, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block16.name,
      type: "if",
      source: "(222:0) {#if $selectedListId}",
      ctx
    });
    return block;
  }
  function create_default_slot_19(ctx) {
    let todolistselector;
    let updating_dragDisabled;
    let current;
    function todolistselector_dragDisabled_binding(value) {
      ctx[29](value);
    }
    let todolistselector_props = {
      updateItem: (
        /*updateItem*/
        ctx[19]
      ),
      deleteItem: (
        /*deleteItem*/
        ctx[20]
      ),
      handleConsider: (
        /*handleConsider*/
        ctx[21]
      ),
      handleFinalize: (
        /*handleFinalize*/
        ctx[22]
      ),
      handleDragKeyDown: (
        /*handleDragKeyDown*/
        ctx[23]
      ),
      flipDurationMs,
      menuClass: (
        /*menuClass*/
        ctx[0]
      ),
      confirmDeletionModalId,
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      )
    };
    if (
      /*dragDisabled*/
      ctx[5] !== void 0
    ) {
      todolistselector_props.dragDisabled = /*dragDisabled*/
      ctx[5];
    }
    todolistselector = new TodoListSelector_default({
      props: todolistselector_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(todolistselector, "dragDisabled", todolistselector_dragDisabled_binding));
    const block = {
      c: function create7() {
        create_component(todolistselector.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(todolistselector.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(todolistselector, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const todolistselector_changes = {};
        if (dirty[0] & /*menuClass*/
        1)
          todolistselector_changes.menuClass = /*menuClass*/
          ctx2[0];
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          todolistselector_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (!updating_dragDisabled && dirty[0] & /*dragDisabled*/
        32) {
          updating_dragDisabled = true;
          todolistselector_changes.dragDisabled = /*dragDisabled*/
          ctx2[5];
          add_flush_callback(() => updating_dragDisabled = false);
        }
        todolistselector.$set(todolistselector_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(todolistselector.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(todolistselector.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(todolistselector, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot_19.name,
      type: "slot",
      source: '(265:2) <ItemsContainer     title=\\"Lists\\"     totalCount={$todoLists.length}     bind:isDropdownOpened={$isListsOpened}     {isScrollPositionRestored}   >',
      ctx
    });
    return block;
  }
  function create_default_slot29(ctx) {
    let todochecklist;
    let updating_dragDisabled;
    let current;
    function todochecklist_dragDisabled_binding(value) {
      ctx[26](value);
    }
    let todochecklist_props = {
      title: (
        /*selectedListName*/
        ctx[8]
      ),
      items: (
        /*selectedListTodoItems*/
        ctx[2]
      ),
      toggleCompleted: (
        /*toggleCompleted*/
        ctx[17]
      ),
      updateItem: (
        /*updateItem*/
        ctx[19]
      ),
      deleteItem: (
        /*deleteItem*/
        ctx[20]
      ),
      handleConsider: (
        /*handleConsider*/
        ctx[21]
      ),
      handleFinalize: (
        /*handleFinalize*/
        ctx[22]
      ),
      handleDragKeyDown: (
        /*handleDragKeyDown*/
        ctx[23]
      ),
      flipDurationMs,
      menuClass: (
        /*menuClass*/
        ctx[0]
      ),
      moveTodoMenuId,
      isScrollPositionRestored: (
        /*isScrollPositionRestored*/
        ctx[1]
      )
    };
    if (
      /*dragDisabled*/
      ctx[5] !== void 0
    ) {
      todochecklist_props.dragDisabled = /*dragDisabled*/
      ctx[5];
    }
    todochecklist = new TodoCheckList_default({
      props: todochecklist_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(todochecklist, "dragDisabled", todochecklist_dragDisabled_binding));
    const block = {
      c: function create7() {
        create_component(todochecklist.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(todochecklist.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(todochecklist, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const todochecklist_changes = {};
        if (dirty[0] & /*selectedListName*/
        256)
          todochecklist_changes.title = /*selectedListName*/
          ctx2[8];
        if (dirty[0] & /*selectedListTodoItems*/
        4)
          todochecklist_changes.items = /*selectedListTodoItems*/
          ctx2[2];
        if (dirty[0] & /*menuClass*/
        1)
          todochecklist_changes.menuClass = /*menuClass*/
          ctx2[0];
        if (dirty[0] & /*isScrollPositionRestored*/
        2)
          todochecklist_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[1];
        if (!updating_dragDisabled && dirty[0] & /*dragDisabled*/
        32) {
          updating_dragDisabled = true;
          todochecklist_changes.dragDisabled = /*dragDisabled*/
          ctx2[5];
          add_flush_callback(() => updating_dragDisabled = false);
        }
        todochecklist.$set(todochecklist_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(todochecklist.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(todochecklist.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(todochecklist, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_default_slot29.name,
      type: "slot",
      source: "(232:2) <ItemsContainer     title={selectedListName}     totalCount={selectedListTodoItems.length}     uncompletedCount={selectedListUncompletedItems.length}     bind:isDropdownOpened={$isTodoOpened}     {isScrollPositionRestored}   >",
      ctx
    });
    return block;
  }
  function create_fragment59(ctx) {
    let t0;
    let t1;
    let current_block_type_index;
    let if_block2;
    let if_block2_anchor;
    let current;
    let if_block0 = (
      /*$itemToProcessId*/
      ctx[3] && /*$openedMenuId*/
      ctx[12] === confirmDeletionModalId && create_if_block_23(ctx)
    );
    let if_block1 = (
      /*itemToMove*/
      ctx[6] && /*$openedMenuId*/
      ctx[12] === moveTodoMenuId && create_if_block_16(ctx)
    );
    const if_block_creators = [create_if_block16, create_else_block6];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*$selectedListId*/
        ctx2[4]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, [-1, -1]);
    if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
      c: function create7() {
        if (if_block0)
          if_block0.c();
        t0 = space();
        if (if_block1)
          if_block1.c();
        t1 = space();
        if_block2.c();
        if_block2_anchor = empty();
      },
      l: function claim(nodes) {
        if (if_block0)
          if_block0.l(nodes);
        t0 = claim_space(nodes);
        if (if_block1)
          if_block1.l(nodes);
        t1 = claim_space(nodes);
        if_block2.l(nodes);
        if_block2_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block0)
          if_block0.m(target, anchor);
        insert_hydration_dev(target, t0, anchor);
        if (if_block1)
          if_block1.m(target, anchor);
        insert_hydration_dev(target, t1, anchor);
        if_blocks[current_block_type_index].m(target, anchor);
        insert_hydration_dev(target, if_block2_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        if (
          /*$itemToProcessId*/
          ctx2[3] && /*$openedMenuId*/
          ctx2[12] === confirmDeletionModalId
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
            if (dirty[0] & /*$itemToProcessId, $openedMenuId*/
            4104) {
              transition_in(if_block0, 1);
            }
          } else {
            if_block0 = create_if_block_23(ctx2);
            if_block0.c();
            transition_in(if_block0, 1);
            if_block0.m(t0.parentNode, t0);
          }
        } else if (if_block0) {
          group_outros();
          transition_out(if_block0, 1, 1, () => {
            if_block0 = null;
          });
          check_outros();
        }
        if (
          /*itemToMove*/
          ctx2[6] && /*$openedMenuId*/
          ctx2[12] === moveTodoMenuId
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
            if (dirty[0] & /*itemToMove, $openedMenuId*/
            4160) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block_16(ctx2);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(t1.parentNode, t1);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, () => {
            if_block1 = null;
          });
          check_outros();
        }
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block2 = if_blocks[current_block_type_index];
          if (!if_block2) {
            if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block2.c();
          } else {
            if_block2.p(ctx2, dirty);
          }
          transition_in(if_block2, 1);
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block0);
        transition_in(if_block1);
        transition_in(if_block2);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block0);
        transition_out(if_block1);
        transition_out(if_block2);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t0);
          detach_dev(t1);
          detach_dev(if_block2_anchor);
        }
        if (if_block0)
          if_block0.d(detaching);
        if (if_block1)
          if_block1.d(detaching);
        if_blocks[current_block_type_index].d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment59.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var confirmDeletionModalId = "confirm-deletion-modal-id";
  var moveTodoMenuId = "move-todo-menu-id";
  var flipDurationMs = 100;
  function filterDuplicates(items) {
    const ids = [];
    return items.filter((item) => {
      if (!ids.includes(item.id)) {
        ids.push(item.id);
        return true;
      }
      return false;
    });
  }
  function instance59($$self, $$props, $$invalidate) {
    let selectedListName;
    let selectedListTodoItems;
    let selectedListUncompletedItems;
    let itemToMove;
    let $itemToProcessId;
    let $todoItems;
    let $selectedListId;
    let $todoLists;
    let $liveView;
    let $yTodoItems;
    let $yTodoLists;
    let $newTodo;
    let $newList;
    let $openedMenuId;
    let $isTodoOpened;
    let $isListsOpened;
    validate_store(itemToProcessId, "itemToProcessId");
    component_subscribe($$self, itemToProcessId, ($$value) => $$invalidate(3, $itemToProcessId = $$value));
    validate_store(todoItems, "todoItems");
    component_subscribe($$self, todoItems, ($$value) => $$invalidate(24, $todoItems = $$value));
    validate_store(selectedListId, "selectedListId");
    component_subscribe($$self, selectedListId, ($$value) => $$invalidate(4, $selectedListId = $$value));
    validate_store(todoLists, "todoLists");
    component_subscribe($$self, todoLists, ($$value) => $$invalidate(9, $todoLists = $$value));
    validate_store(liveView, "liveView");
    component_subscribe($$self, liveView, ($$value) => $$invalidate(31, $liveView = $$value));
    validate_store(yTodoItems, "yTodoItems");
    component_subscribe($$self, yTodoItems, ($$value) => $$invalidate(32, $yTodoItems = $$value));
    validate_store(yTodoLists, "yTodoLists");
    component_subscribe($$self, yTodoLists, ($$value) => $$invalidate(33, $yTodoLists = $$value));
    validate_store(newTodo, "newTodo");
    component_subscribe($$self, newTodo, ($$value) => $$invalidate(10, $newTodo = $$value));
    validate_store(newList, "newList");
    component_subscribe($$self, newList, ($$value) => $$invalidate(11, $newList = $$value));
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(12, $openedMenuId = $$value));
    validate_store(isTodoOpened, "isTodoOpened");
    component_subscribe($$self, isTodoOpened, ($$value) => $$invalidate(13, $isTodoOpened = $$value));
    validate_store(isListsOpened, "isListsOpened");
    component_subscribe($$self, isListsOpened, ($$value) => $$invalidate(14, $isListsOpened = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("TodoApp", slots, []);
    let { menuClass: menuClass2 } = $$props;
    let { isScrollPositionRestored } = $$props;
    let dragDisabled = true;
    function addList() {
      const list = new YMap();
      list.set("id", crypto.randomUUID());
      list.set("name", $newList);
      $yTodoLists.unshift([list]);
      set_store_value(newList, $newList = "", $newList);
      syncDocumentToServer($liveView);
    }
    function addTodo() {
      const todo = new YMap();
      todo.set("id", crypto.randomUUID());
      todo.set("name", $newTodo);
      todo.set("completed", false);
      todo.set("listId", $selectedListId);
      $yTodoItems.unshift([todo]);
      set_store_value(newTodo, $newTodo = "", $newTodo);
      syncDocumentToServer($liveView);
    }
    function toggleCompleted(itemId) {
      for (const yTodo of $yTodoItems) {
        if (yTodo.get("id") === itemId) {
          yTodo.set("completed", !yTodo.get("completed"));
          syncDocumentToServer($liveView);
          return;
        }
      }
    }
    function moveTodo(itemToMove2, newListId) {
      if (itemToMove2.listId === newListId) {
        return;
      }
      const index = $yTodoItems.toArray().findIndex((yTodo) => yTodo.get("id") === itemToMove2.id);
      const todo = new YMap();
      todo.set("id", itemToMove2.id);
      todo.set("name", itemToMove2.name);
      todo.set("completed", itemToMove2.completed);
      todo.set("listId", newListId);
      $yTodoItems.doc.transact(() => {
        $yTodoItems.delete(index);
        $yTodoItems.unshift([todo]);
      });
      syncDocumentToServer($liveView);
    }
    const updateItem = (newItem) => {
      if (isTodoItem(newItem)) {
        for (const yTodo of $yTodoItems) {
          if (yTodo.get("id") === newItem.id) {
            $yTodoItems.doc.transact(() => {
              yTodo.set("name", newItem.name);
              yTodo.set("completed", newItem.completed);
              yTodo.set("listId", newItem.listId);
              newItem.newName === void 0 ? yTodo.delete("newName") : yTodo.set("newName", newItem.newName);
              newItem.isEditing === void 0 ? yTodo.delete("isEditing") : yTodo.set("isEditing", newItem.isEditing);
            });
            syncDocumentToServer($liveView);
            return;
          }
        }
      } else {
        for (const yList of $yTodoLists) {
          if (yList.get("id") === newItem.id) {
            $yTodoLists.doc.transact(() => {
              yList.set("name", newItem.name);
              newItem.newName === void 0 ? yList.delete("newName") : yList.set("newName", newItem.newName);
              newItem.isEditing === void 0 ? yList.delete("isEditing") : yList.set("isEditing", newItem.isEditing);
            });
            syncDocumentToServer($liveView);
            return;
          }
        }
      }
    };
    const deleteItem = (item) => {
      let index = 0;
      if (isTodoItem(item)) {
        for (const yTodo of $yTodoItems) {
          if (yTodo.get("id") === item.id) {
            $yTodoItems.delete(index);
            syncDocumentToServer($liveView);
            return;
          }
          index++;
        }
      } else {
        for (const yList of $yTodoLists) {
          if (yList.get("id") === item.id) {
            $yTodoLists.doc.transact(() => {
              $yTodoLists.delete(index);
              cleanOrphanedTodos(item.id);
            });
            syncDocumentToServer($liveView);
            return;
          }
          index++;
        }
      }
    };
    function cleanOrphanedTodos(listId) {
      const oldTodoListIds = $todoLists.map((list) => list.id);
      const newTodoListIds = oldTodoListIds.filter((id2) => id2 !== listId);
      let index = 0;
      $yTodoItems.forEach((yMap) => {
        let yMapListId = yMap.get("listId");
        yMapListId = typeof yMapListId === "string" ? yMapListId : "";
        if (!newTodoListIds.includes(yMapListId)) {
          $yTodoItems.delete(index);
          return;
        }
        index++;
      });
    }
    const handleConsider = (event, updateUiOnConsider) => {
      const newItems = filterDuplicates(event.detail.items);
      updateUiOnConsider(newItems);
      const { source, trigger } = event.detail.info;
      if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
        $$invalidate(5, dragDisabled = true);
      }
    };
    const handleFinalize = (event, updateUiOnFinalize) => {
      const newItems = filterDuplicates(event.detail.items);
      updateUiOnFinalize(newItems);
      const { source } = event.detail.info;
      if (source === SOURCES.POINTER) {
        $$invalidate(5, dragDisabled = true);
      }
      syncDocumentToServer($liveView);
    };
    function handleDragKeyDown(event, itemId) {
      if ((event.key === "Enter" || event.key === " ") && dragDisabled) {
        $$invalidate(5, dragDisabled = false);
        set_store_value(itemToProcessId, $itemToProcessId = itemId, $itemToProcessId);
      }
    }
    function setSelectedListName(listId) {
      var _a2, _b;
      return (_b = (_a2 = $todoLists.find((list) => list.id === listId)) == null ? void 0 : _a2.name) != null ? _b : "";
    }
    $$self.$$.on_mount.push(function() {
      if (menuClass2 === void 0 && !("menuClass" in $$props || $$self.$$.bound[$$self.$$.props["menuClass"]])) {
        console.warn("<TodoApp> was created without expected prop 'menuClass'");
      }
      if (isScrollPositionRestored === void 0 && !("isScrollPositionRestored" in $$props || $$self.$$.bound[$$self.$$.props["isScrollPositionRestored"]])) {
        console.warn("<TodoApp> was created without expected prop 'isScrollPositionRestored'");
      }
    });
    const writable_props = ["menuClass", "isScrollPositionRestored"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<TodoApp> was created with unknown prop '${key}'`);
    });
    function newitemform_value_binding(value) {
      $newTodo = value;
      newTodo.set($newTodo);
    }
    function todochecklist_dragDisabled_binding(value) {
      dragDisabled = value;
      $$invalidate(5, dragDisabled);
    }
    function itemscontainer_isDropdownOpened_binding(value) {
      $isTodoOpened = value;
      isTodoOpened.set($isTodoOpened);
    }
    function newitemform_value_binding_1(value) {
      $newList = value;
      newList.set($newList);
    }
    function todolistselector_dragDisabled_binding(value) {
      dragDisabled = value;
      $$invalidate(5, dragDisabled);
    }
    function itemscontainer_isDropdownOpened_binding_1(value) {
      $isListsOpened = value;
      isListsOpened.set($isListsOpened);
    }
    $$self.$$set = ($$props2) => {
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(1, isScrollPositionRestored = $$props2.isScrollPositionRestored);
    };
    $$self.$capture_state = () => ({
      SOURCES,
      TRIGGERS,
      Y: yjs_exports,
      isListsOpened,
      isTodoOpened,
      itemToProcessId,
      newList,
      newTodo,
      openedMenuId,
      selectedListId,
      todoLists,
      todoItems,
      yTodoLists,
      yTodoItems,
      isTodoItem,
      liveView,
      syncDocumentToServer,
      ConfirmDeletionModal: ConfirmDeletionModal_default,
      ItemsContainer: ItemsContainer_default,
      MoveTodoMenu: MoveTodoMenu_default,
      NewItemForm: NewItemForm_default,
      TodoCheckList: TodoCheckList_default,
      TodoListSelector: TodoListSelector_default,
      menuClass: menuClass2,
      isScrollPositionRestored,
      confirmDeletionModalId,
      moveTodoMenuId,
      flipDurationMs,
      dragDisabled,
      addList,
      addTodo,
      toggleCompleted,
      moveTodo,
      updateItem,
      deleteItem,
      cleanOrphanedTodos,
      handleConsider,
      handleFinalize,
      filterDuplicates,
      handleDragKeyDown,
      setSelectedListName,
      itemToMove,
      selectedListTodoItems,
      selectedListUncompletedItems,
      selectedListName,
      $itemToProcessId,
      $todoItems,
      $selectedListId,
      $todoLists,
      $liveView,
      $yTodoItems,
      $yTodoLists,
      $newTodo,
      $newList,
      $openedMenuId,
      $isTodoOpened,
      $isListsOpened
    });
    $$self.$inject_state = ($$props2) => {
      if ("menuClass" in $$props2)
        $$invalidate(0, menuClass2 = $$props2.menuClass);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(1, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("dragDisabled" in $$props2)
        $$invalidate(5, dragDisabled = $$props2.dragDisabled);
      if ("itemToMove" in $$props2)
        $$invalidate(6, itemToMove = $$props2.itemToMove);
      if ("selectedListTodoItems" in $$props2)
        $$invalidate(2, selectedListTodoItems = $$props2.selectedListTodoItems);
      if ("selectedListUncompletedItems" in $$props2)
        $$invalidate(7, selectedListUncompletedItems = $$props2.selectedListUncompletedItems);
      if ("selectedListName" in $$props2)
        $$invalidate(8, selectedListName = $$props2.selectedListName);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty[0] & /*$selectedListId*/
      16) {
        $:
          $$invalidate(8, selectedListName = setSelectedListName($selectedListId));
      }
      if ($$self.$$.dirty[0] & /*$todoItems, $selectedListId*/
      16777232) {
        $:
          $$invalidate(2, selectedListTodoItems = $todoItems.filter((item) => item.listId === $selectedListId));
      }
      if ($$self.$$.dirty[0] & /*selectedListTodoItems*/
      4) {
        $:
          $$invalidate(7, selectedListUncompletedItems = selectedListTodoItems.filter((item) => !item.completed));
      }
      if ($$self.$$.dirty[0] & /*$todoItems, $itemToProcessId*/
      16777224) {
        $:
          $$invalidate(6, itemToMove = $todoItems.find((item) => item.id === $itemToProcessId));
      }
    };
    return [
      menuClass2,
      isScrollPositionRestored,
      selectedListTodoItems,
      $itemToProcessId,
      $selectedListId,
      dragDisabled,
      itemToMove,
      selectedListUncompletedItems,
      selectedListName,
      $todoLists,
      $newTodo,
      $newList,
      $openedMenuId,
      $isTodoOpened,
      $isListsOpened,
      addList,
      addTodo,
      toggleCompleted,
      moveTodo,
      updateItem,
      deleteItem,
      handleConsider,
      handleFinalize,
      handleDragKeyDown,
      $todoItems,
      newitemform_value_binding,
      todochecklist_dragDisabled_binding,
      itemscontainer_isDropdownOpened_binding,
      newitemform_value_binding_1,
      todolistselector_dragDisabled_binding,
      itemscontainer_isDropdownOpened_binding_1
    ];
  }
  var TodoApp = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(
        this,
        options,
        instance59,
        create_fragment59,
        safe_not_equal,
        {
          menuClass: 0,
          isScrollPositionRestored: 1
        },
        null,
        [-1, -1]
      );
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "TodoApp",
        options,
        id: create_fragment59.name
      });
    }
    get menuClass() {
      throw new Error("<TodoApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set menuClass(value) {
      throw new Error("<TodoApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get isScrollPositionRestored() {
      throw new Error("<TodoApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set isScrollPositionRestored(value) {
      throw new Error("<TodoApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var TodoApp_default = TodoApp;

  // svelte/UpdateAlert.svelte
  var UpdateAlert_exports = {};
  __export(UpdateAlert_exports, {
    default: () => UpdateAlert_default
  });
  var file25 = "svelte/UpdateAlert.svelte";
  function create_if_block17(ctx) {
    let div3;
    let info;
    let t0;
    let div1;
    let h3;
    let textContent = "Update Available";
    let t2;
    let div0;
    let textContent_1 = "Reload to update?";
    let t4;
    let div2;
    let button0;
    let textContent_2 = "Later";
    let t6;
    let button1;
    let textContent_3 = "Update";
    let div3_resize_listener;
    let div3_transition;
    let current;
    let mounted;
    let dispose;
    info = new info_default({ $$inline: true });
    const block = {
      c: function create7() {
        div3 = element("div");
        create_component(info.$$.fragment);
        t0 = space();
        div1 = element("div");
        h3 = element("h3");
        h3.textContent = textContent;
        t2 = space();
        div0 = element("div");
        div0.textContent = textContent_1;
        t4 = space();
        div2 = element("div");
        button0 = element("button");
        button0.textContent = textContent_2;
        t6 = space();
        button1 = element("button");
        button1.textContent = textContent_3;
        this.h();
      },
      l: function claim(nodes) {
        div3 = claim_element(nodes, "DIV", { role: true, class: true });
        var div3_nodes = children(div3);
        claim_component(info.$$.fragment, div3_nodes);
        t0 = claim_space(div3_nodes);
        div1 = claim_element(div3_nodes, "DIV", {});
        var div1_nodes = children(div1);
        h3 = claim_element(div1_nodes, "H3", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(h3) !== "svelte-a6jdo6")
          h3.textContent = textContent;
        t2 = claim_space(div1_nodes);
        div0 = claim_element(div1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(div0) !== "svelte-128f0ll")
          div0.textContent = textContent_1;
        div1_nodes.forEach(detach_dev);
        t4 = claim_space(div3_nodes);
        div2 = claim_element(div3_nodes, "DIV", {});
        var div2_nodes = children(div2);
        button0 = claim_element(div2_nodes, "BUTTON", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(button0) !== "svelte-1xraj9s")
          button0.textContent = textContent_2;
        t6 = claim_space(div2_nodes);
        button1 = claim_element(div2_nodes, "BUTTON", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(button1) !== "svelte-1haycr6")
          button1.textContent = textContent_3;
        div2_nodes.forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(h3, "class", "font-bold");
        add_location(h3, file25, 68, 6, 1707);
        attr_dev(div0, "class", "text-sm");
        add_location(div0, file25, 69, 6, 1757);
        add_location(div1, file25, 67, 4, 1695);
        attr_dev(button0, "class", "btn btn-sm border border-neutral transition-none");
        add_location(button0, file25, 73, 6, 1830);
        attr_dev(button1, "class", "btn btn-sm btn-accent border border-neutral");
        add_location(button1, file25, 80, 6, 1993);
        add_location(div2, file25, 72, 4, 1818);
        attr_dev(div3, "role", "alert");
        attr_dev(div3, "class", "fixed left-1/2 max-w-[90vw] xs:max-w-sm z-40 alert shadow-lg border border-neutral m-2 ");
        add_render_callback(() => (
          /*div3_elementresize_handler*/
          ctx[7].call(div3)
        ));
        set_style(div3, "margin-left", `-${/*width*/
        ctx[2] / 2}px`);
        add_location(div3, file25, 55, 2, 1415);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div3, anchor);
        mount_component(info, div3, null);
        append_hydration_dev(div3, t0);
        append_hydration_dev(div3, div1);
        append_hydration_dev(div1, h3);
        append_hydration_dev(div1, t2);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div3, t4);
        append_hydration_dev(div3, div2);
        append_hydration_dev(div2, button0);
        append_hydration_dev(div2, t6);
        append_hydration_dev(div2, button1);
        div3_resize_listener = add_iframe_resize_listener(
          div3,
          /*div3_elementresize_handler*/
          ctx[7].bind(div3)
        );
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              "click",
              /*click_handler*/
              ctx[5],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              "click",
              /*click_handler_1*/
              ctx[6],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*width*/
        4) {
          set_style(div3, "margin-left", `-${/*width*/
          ctx2[2] / 2}px`);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(info.$$.fragment, local);
        if (local) {
          add_render_callback(() => {
            if (!current)
              return;
            if (!div3_transition)
              div3_transition = create_bidirectional_transition(div3, fly, { y: -100, duration: 750 }, true);
            div3_transition.run(1);
          });
        }
        current = true;
      },
      o: function outro(local) {
        transition_out(info.$$.fragment, local);
        if (local) {
          if (!div3_transition)
            div3_transition = create_bidirectional_transition(div3, fly, { y: -100, duration: 750 }, false);
          div3_transition.run(0);
        }
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div3);
        }
        destroy_component(info);
        div3_resize_listener();
        if (detaching && div3_transition)
          div3_transition.end();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block17.name,
      type: "if",
      source: "(46:0) {#if showAlert}",
      ctx
    });
    return block;
  }
  function create_fragment60(ctx) {
    let if_block_anchor;
    let current;
    let if_block = (
      /*showAlert*/
      ctx[1] && create_if_block17(ctx)
    );
    const block = {
      c: function create7() {
        if (if_block)
          if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        if (if_block)
          if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (if_block)
          if_block.m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*showAlert*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
            if (dirty & /*showAlert*/
            2) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block17(ctx2);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, () => {
            if_block = null;
          });
          check_outros();
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(if_block_anchor);
        }
        if (if_block)
          if_block.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment60.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance60($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("UpdateAlert", slots, []);
    let newSW;
    let showAlert = false;
    let isSWUpdateAvailable = false;
    let isSWUpdateConfirmed = false;
    let width;
    async function detectSWUpdate() {
      const registration = await navigator.serviceWorker.ready;
      $$invalidate(3, newSW = registration.waiting);
      if (newSW) {
        $$invalidate(4, isSWUpdateAvailable = true);
        return;
      }
      registration.addEventListener("updatefound", () => {
        $$invalidate(3, newSW = registration.installing);
        newSW == null ? void 0 : newSW.addEventListener("statechange", () => {
          if (newSW.state === "installed") {
            $$invalidate(4, isSWUpdateAvailable = true);
          }
        });
      });
    }
    onMount(() => {
      detectSWUpdate();
    });
    const writable_props = [];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<UpdateAlert> was created with unknown prop '${key}'`);
    });
    const click_handler = () => $$invalidate(1, showAlert = false);
    const click_handler_1 = () => {
      $$invalidate(0, isSWUpdateConfirmed = true);
      $$invalidate(1, showAlert = false);
    };
    function div3_elementresize_handler() {
      width = this.clientWidth;
      $$invalidate(2, width);
    }
    $$self.$capture_state = () => ({
      onMount,
      fly,
      Info: info_default,
      useIsConnected,
      newSW,
      showAlert,
      isSWUpdateAvailable,
      isSWUpdateConfirmed,
      width,
      detectSWUpdate
    });
    $$self.$inject_state = ($$props2) => {
      if ("newSW" in $$props2)
        $$invalidate(3, newSW = $$props2.newSW);
      if ("showAlert" in $$props2)
        $$invalidate(1, showAlert = $$props2.showAlert);
      if ("isSWUpdateAvailable" in $$props2)
        $$invalidate(4, isSWUpdateAvailable = $$props2.isSWUpdateAvailable);
      if ("isSWUpdateConfirmed" in $$props2)
        $$invalidate(0, isSWUpdateConfirmed = $$props2.isSWUpdateConfirmed);
      if ("width" in $$props2)
        $$invalidate(2, width = $$props2.width);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*isSWUpdateAvailable*/
      16) {
        $:
          if (isSWUpdateAvailable) {
            useIsConnected({ timeout: 1e4 }).then((isConnected) => {
              if (isConnected) {
                $$invalidate(1, showAlert = true);
              }
            });
          }
      }
      if ($$self.$$.dirty & /*isSWUpdateConfirmed, newSW*/
      9) {
        $:
          if (isSWUpdateConfirmed) {
            newSW.postMessage({ type: "request_skip_waiting" });
          }
      }
    };
    return [
      isSWUpdateConfirmed,
      showAlert,
      width,
      newSW,
      isSWUpdateAvailable,
      click_handler,
      click_handler_1,
      div3_elementresize_handler
    ];
  }
  var UpdateAlert = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance60, create_fragment60, safe_not_equal, {});
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "UpdateAlert",
        options,
        id: create_fragment60.name
      });
    }
  };
  var UpdateAlert_default = UpdateAlert;

  // svelte/App.svelte
  var file26 = "svelte/App.svelte";
  function create_else_block_2(ctx) {
    let appskeleton;
    let current;
    appskeleton = new AppSkeleton_default({ $$inline: true });
    const block = {
      c: function create7() {
        create_component(appskeleton.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(appskeleton.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(appskeleton, target, anchor);
        current = true;
      },
      p: noop3,
      i: function intro(local) {
        if (current)
          return;
        transition_in(appskeleton.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(appskeleton.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(appskeleton, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block_2.name,
      type: "else",
      source: "(54:0) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block18(ctx) {
    let toast2;
    let t0;
    let updatealert;
    let t1;
    let current_block_type_index;
    let if_block0;
    let t2;
    let current_block_type_index_1;
    let if_block1;
    let if_block1_anchor;
    let current;
    toast2 = new Toast_default({ $$inline: true });
    updatealert = new UpdateAlert_default({ $$inline: true });
    const if_block_creators = [create_if_block_24, create_else_block_13];
    const if_blocks = [];
    function select_block_type_1(ctx2, dirty) {
      if (
        /*$urlHash*/
        ctx2[6] === ""
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type_1(ctx, -1);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const if_block_creators_1 = [create_if_block_17, create_else_block7];
    const if_blocks_1 = [];
    function select_block_type_2(ctx2, dirty) {
      if (
        /*$urlHash*/
        ctx2[6] === "about"
      )
        return 0;
      return 1;
    }
    current_block_type_index_1 = select_block_type_2(ctx, -1);
    if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    const block = {
      c: function create7() {
        create_component(toast2.$$.fragment);
        t0 = space();
        create_component(updatealert.$$.fragment);
        t1 = space();
        if_block0.c();
        t2 = space();
        if_block1.c();
        if_block1_anchor = empty();
      },
      l: function claim(nodes) {
        claim_component(toast2.$$.fragment, nodes);
        t0 = claim_space(nodes);
        claim_component(updatealert.$$.fragment, nodes);
        t1 = claim_space(nodes);
        if_block0.l(nodes);
        t2 = claim_space(nodes);
        if_block1.l(nodes);
        if_block1_anchor = empty();
      },
      m: function mount(target, anchor) {
        mount_component(toast2, target, anchor);
        insert_hydration_dev(target, t0, anchor);
        mount_component(updatealert, target, anchor);
        insert_hydration_dev(target, t1, anchor);
        if_blocks[current_block_type_index].m(target, anchor);
        insert_hydration_dev(target, t2, anchor);
        if_blocks_1[current_block_type_index_1].m(target, anchor);
        insert_hydration_dev(target, if_block1_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type_1(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          } else {
            if_block0.p(ctx2, dirty);
          }
          transition_in(if_block0, 1);
          if_block0.m(t2.parentNode, t2);
        }
        let previous_block_index_1 = current_block_type_index_1;
        current_block_type_index_1 = select_block_type_2(ctx2, dirty);
        if (current_block_type_index_1 === previous_block_index_1) {
          if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
            if_blocks_1[previous_block_index_1] = null;
          });
          check_outros();
          if_block1 = if_blocks_1[current_block_type_index_1];
          if (!if_block1) {
            if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(toast2.$$.fragment, local);
        transition_in(updatealert.$$.fragment, local);
        transition_in(if_block0);
        transition_in(if_block1);
        current = true;
      },
      o: function outro(local) {
        transition_out(toast2.$$.fragment, local);
        transition_out(updatealert.$$.fragment, local);
        transition_out(if_block0);
        transition_out(if_block1);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t0);
          detach_dev(t1);
          detach_dev(t2);
          detach_dev(if_block1_anchor);
        }
        destroy_component(toast2, detaching);
        destroy_component(updatealert, detaching);
        if_blocks[current_block_type_index].d(detaching);
        if_blocks_1[current_block_type_index_1].d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block18.name,
      type: "if",
      source: "(37:0) {#if isSyncedToIndexedDb && isClientStateRestored}",
      ctx
    });
    return block;
  }
  function create_else_block_13(ctx) {
    let stickyheader;
    let current;
    stickyheader = new StickyHeader_default({ $$inline: true });
    const block = {
      c: function create7() {
        create_component(stickyheader.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(stickyheader.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(stickyheader, target, anchor);
        current = true;
      },
      p: noop3,
      i: function intro(local) {
        if (current)
          return;
        transition_in(stickyheader.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(stickyheader.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(stickyheader, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block_13.name,
      type: "else",
      source: "(43:2) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block_24(ctx) {
    let header;
    let updating_isClientStateRestored;
    let current;
    function header_isClientStateRestored_binding(value) {
      ctx[13](value);
    }
    let header_props = {
      currentUserEmail: (
        /*currentUserEmail*/
        ctx[0]
      ),
      serviceWorkerVersion: (
        /*serviceWorkerVersion*/
        ctx[4]
      ),
      menuClass
    };
    if (
      /*isClientStateRestored*/
      ctx[1] !== void 0
    ) {
      header_props.isClientStateRestored = /*isClientStateRestored*/
      ctx[1];
    }
    header = new Header_default({ props: header_props, $$inline: true });
    binding_callbacks.push(() => bind(header, "isClientStateRestored", header_isClientStateRestored_binding));
    const block = {
      c: function create7() {
        create_component(header.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(header.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(header, target, anchor);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const header_changes = {};
        if (dirty & /*currentUserEmail*/
        1)
          header_changes.currentUserEmail = /*currentUserEmail*/
          ctx2[0];
        if (dirty & /*serviceWorkerVersion*/
        16)
          header_changes.serviceWorkerVersion = /*serviceWorkerVersion*/
          ctx2[4];
        if (!updating_isClientStateRestored && dirty & /*isClientStateRestored*/
        2) {
          updating_isClientStateRestored = true;
          header_changes.isClientStateRestored = /*isClientStateRestored*/
          ctx2[1];
          add_flush_callback(() => updating_isClientStateRestored = false);
        }
        header.$set(header_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(header.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(header.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(header, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_24.name,
      type: "if",
      source: '(41:2) {#if $urlHash === \\"\\"}',
      ctx
    });
    return block;
  }
  function create_else_block7(ctx) {
    let div;
    let todoapp;
    let current;
    todoapp = new TodoApp_default({
      props: {
        menuClass,
        isScrollPositionRestored: (
          /*isScrollPositionRestored*/
          ctx[3]
        )
      },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div = element("div");
        create_component(todoapp.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        claim_component(todoapp.$$.fragment, div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div, "class", "max-w-2xl mx-auto px-2 md:p-0");
        add_location(div, file26, 56, 4, 1672);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        mount_component(todoapp, div, null);
        current = true;
      },
      p: function update2(ctx2, dirty) {
        const todoapp_changes = {};
        if (dirty & /*isScrollPositionRestored*/
        8)
          todoapp_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[3];
        todoapp.$set(todoapp_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(todoapp.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(todoapp.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        destroy_component(todoapp);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_else_block7.name,
      type: "else",
      source: "(49:2) {:else}",
      ctx
    });
    return block;
  }
  function create_if_block_17(ctx) {
    let appinfo;
    let current;
    appinfo = new AppInfo_default({ $$inline: true });
    const block = {
      c: function create7() {
        create_component(appinfo.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(appinfo.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(appinfo, target, anchor);
        current = true;
      },
      p: noop3,
      i: function intro(local) {
        if (current)
          return;
        transition_in(appinfo.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(appinfo.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(appinfo, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_17.name,
      type: "if",
      source: '(47:2) {#if $urlHash === \\"about\\"}',
      ctx
    });
    return block;
  }
  function create_fragment61(ctx) {
    let statemanagement;
    let updating_isSyncedToIndexedDb;
    let t0;
    let clientonlystatemanagement;
    let updating_isClientStateRestored;
    let t1;
    let scrollpositionrestorer;
    let updating_isScrollPositionRestored;
    let t2;
    let serviceworker;
    let updating_serviceWorkerVersion;
    let t3;
    let themesyncmanager;
    let t4;
    let clickoutsideclasshandler;
    let t5;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    function statemanagement_isSyncedToIndexedDb_binding(value) {
      ctx[8](value);
    }
    let statemanagement_props = {};
    if (
      /*isSyncedToIndexedDb*/
      ctx[2] !== void 0
    ) {
      statemanagement_props.isSyncedToIndexedDb = /*isSyncedToIndexedDb*/
      ctx[2];
    }
    statemanagement = new StateManagement_default({
      props: statemanagement_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(statemanagement, "isSyncedToIndexedDb", statemanagement_isSyncedToIndexedDb_binding));
    function clientonlystatemanagement_isClientStateRestored_binding(value) {
      ctx[9](value);
    }
    let clientonlystatemanagement_props = {};
    if (
      /*isClientStateRestored*/
      ctx[1] !== void 0
    ) {
      clientonlystatemanagement_props.isClientStateRestored = /*isClientStateRestored*/
      ctx[1];
    }
    clientonlystatemanagement = new ClientOnlyStateManagement_default({
      props: clientonlystatemanagement_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(clientonlystatemanagement, "isClientStateRestored", clientonlystatemanagement_isClientStateRestored_binding));
    function scrollpositionrestorer_isScrollPositionRestored_binding(value) {
      ctx[10](value);
    }
    let scrollpositionrestorer_props = {
      isSyncedToIndexedDb: (
        /*isSyncedToIndexedDb*/
        ctx[2]
      ),
      isClientStateRestored: (
        /*isClientStateRestored*/
        ctx[1]
      )
    };
    if (
      /*isScrollPositionRestored*/
      ctx[3] !== void 0
    ) {
      scrollpositionrestorer_props.isScrollPositionRestored = /*isScrollPositionRestored*/
      ctx[3];
    }
    scrollpositionrestorer = new ScrollPositionRestorer_default({
      props: scrollpositionrestorer_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(scrollpositionrestorer, "isScrollPositionRestored", scrollpositionrestorer_isScrollPositionRestored_binding));
    function serviceworker_serviceWorkerVersion_binding(value) {
      ctx[11](value);
    }
    let serviceworker_props = {};
    if (
      /*serviceWorkerVersion*/
      ctx[4] !== void 0
    ) {
      serviceworker_props.serviceWorkerVersion = /*serviceWorkerVersion*/
      ctx[4];
    }
    serviceworker = new ServiceWorker_default({
      props: serviceworker_props,
      $$inline: true
    });
    binding_callbacks.push(() => bind(serviceworker, "serviceWorkerVersion", serviceworker_serviceWorkerVersion_binding));
    themesyncmanager = new ThemeSyncManager_default({ $$inline: true });
    clickoutsideclasshandler = new ClickOutsideClassHandler_default({
      props: {
        className: menuClass,
        callbackFunction: (
          /*func*/
          ctx[12]
        )
      },
      $$inline: true
    });
    const if_block_creators = [create_if_block18, create_else_block_2];
    const if_blocks = [];
    function select_block_type(ctx2, dirty) {
      if (
        /*isSyncedToIndexedDb*/
        ctx2[2] && /*isClientStateRestored*/
        ctx2[1]
      )
        return 0;
      return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
      c: function create7() {
        create_component(statemanagement.$$.fragment);
        t0 = space();
        create_component(clientonlystatemanagement.$$.fragment);
        t1 = space();
        create_component(scrollpositionrestorer.$$.fragment);
        t2 = space();
        create_component(serviceworker.$$.fragment);
        t3 = space();
        create_component(themesyncmanager.$$.fragment);
        t4 = space();
        create_component(clickoutsideclasshandler.$$.fragment);
        t5 = space();
        if_block.c();
        if_block_anchor = empty();
      },
      l: function claim(nodes) {
        claim_component(statemanagement.$$.fragment, nodes);
        t0 = claim_space(nodes);
        claim_component(clientonlystatemanagement.$$.fragment, nodes);
        t1 = claim_space(nodes);
        claim_component(scrollpositionrestorer.$$.fragment, nodes);
        t2 = claim_space(nodes);
        claim_component(serviceworker.$$.fragment, nodes);
        t3 = claim_space(nodes);
        claim_component(themesyncmanager.$$.fragment, nodes);
        t4 = claim_space(nodes);
        claim_component(clickoutsideclasshandler.$$.fragment, nodes);
        t5 = claim_space(nodes);
        if_block.l(nodes);
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        mount_component(statemanagement, target, anchor);
        insert_hydration_dev(target, t0, anchor);
        mount_component(clientonlystatemanagement, target, anchor);
        insert_hydration_dev(target, t1, anchor);
        mount_component(scrollpositionrestorer, target, anchor);
        insert_hydration_dev(target, t2, anchor);
        mount_component(serviceworker, target, anchor);
        insert_hydration_dev(target, t3, anchor);
        mount_component(themesyncmanager, target, anchor);
        insert_hydration_dev(target, t4, anchor);
        mount_component(clickoutsideclasshandler, target, anchor);
        insert_hydration_dev(target, t5, anchor);
        if_blocks[current_block_type_index].m(target, anchor);
        insert_hydration_dev(target, if_block_anchor, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const statemanagement_changes = {};
        if (!updating_isSyncedToIndexedDb && dirty & /*isSyncedToIndexedDb*/
        4) {
          updating_isSyncedToIndexedDb = true;
          statemanagement_changes.isSyncedToIndexedDb = /*isSyncedToIndexedDb*/
          ctx2[2];
          add_flush_callback(() => updating_isSyncedToIndexedDb = false);
        }
        statemanagement.$set(statemanagement_changes);
        const clientonlystatemanagement_changes = {};
        if (!updating_isClientStateRestored && dirty & /*isClientStateRestored*/
        2) {
          updating_isClientStateRestored = true;
          clientonlystatemanagement_changes.isClientStateRestored = /*isClientStateRestored*/
          ctx2[1];
          add_flush_callback(() => updating_isClientStateRestored = false);
        }
        clientonlystatemanagement.$set(clientonlystatemanagement_changes);
        const scrollpositionrestorer_changes = {};
        if (dirty & /*isSyncedToIndexedDb*/
        4)
          scrollpositionrestorer_changes.isSyncedToIndexedDb = /*isSyncedToIndexedDb*/
          ctx2[2];
        if (dirty & /*isClientStateRestored*/
        2)
          scrollpositionrestorer_changes.isClientStateRestored = /*isClientStateRestored*/
          ctx2[1];
        if (!updating_isScrollPositionRestored && dirty & /*isScrollPositionRestored*/
        8) {
          updating_isScrollPositionRestored = true;
          scrollpositionrestorer_changes.isScrollPositionRestored = /*isScrollPositionRestored*/
          ctx2[3];
          add_flush_callback(() => updating_isScrollPositionRestored = false);
        }
        scrollpositionrestorer.$set(scrollpositionrestorer_changes);
        const serviceworker_changes = {};
        if (!updating_serviceWorkerVersion && dirty & /*serviceWorkerVersion*/
        16) {
          updating_serviceWorkerVersion = true;
          serviceworker_changes.serviceWorkerVersion = /*serviceWorkerVersion*/
          ctx2[4];
          add_flush_callback(() => updating_serviceWorkerVersion = false);
        }
        serviceworker.$set(serviceworker_changes);
        const clickoutsideclasshandler_changes = {};
        if (dirty & /*$openedMenuId*/
        32)
          clickoutsideclasshandler_changes.callbackFunction = /*func*/
          ctx2[12];
        clickoutsideclasshandler.$set(clickoutsideclasshandler_changes);
        let previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx2, dirty);
        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(statemanagement.$$.fragment, local);
        transition_in(clientonlystatemanagement.$$.fragment, local);
        transition_in(scrollpositionrestorer.$$.fragment, local);
        transition_in(serviceworker.$$.fragment, local);
        transition_in(themesyncmanager.$$.fragment, local);
        transition_in(clickoutsideclasshandler.$$.fragment, local);
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(statemanagement.$$.fragment, local);
        transition_out(clientonlystatemanagement.$$.fragment, local);
        transition_out(scrollpositionrestorer.$$.fragment, local);
        transition_out(serviceworker.$$.fragment, local);
        transition_out(themesyncmanager.$$.fragment, local);
        transition_out(clickoutsideclasshandler.$$.fragment, local);
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(t0);
          detach_dev(t1);
          detach_dev(t2);
          detach_dev(t3);
          detach_dev(t4);
          detach_dev(t5);
          detach_dev(if_block_anchor);
        }
        destroy_component(statemanagement, detaching);
        destroy_component(clientonlystatemanagement, detaching);
        destroy_component(scrollpositionrestorer, detaching);
        destroy_component(serviceworker, detaching);
        destroy_component(themesyncmanager, detaching);
        destroy_component(clickoutsideclasshandler, detaching);
        if_blocks[current_block_type_index].d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment61.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  var menuClass = "menu-class";
  function instance61($$self, $$props, $$invalidate) {
    let $openedMenuId;
    let $urlHash;
    validate_store(openedMenuId, "openedMenuId");
    component_subscribe($$self, openedMenuId, ($$value) => $$invalidate(5, $openedMenuId = $$value));
    validate_store(urlHash, "urlHash");
    component_subscribe($$self, urlHash, ($$value) => $$invalidate(6, $urlHash = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("App", slots, []);
    let { live } = $$props;
    live;
    let { currentUserEmail } = $$props;
    let isClientStateRestored = false;
    let isSyncedToIndexedDb = false;
    let isScrollPositionRestored = false;
    let serviceWorkerVersion;
    $$self.$$.on_mount.push(function() {
      if (live === void 0 && !("live" in $$props || $$self.$$.bound[$$self.$$.props["live"]])) {
        console.warn("<App> was created without expected prop 'live'");
      }
      if (currentUserEmail === void 0 && !("currentUserEmail" in $$props || $$self.$$.bound[$$self.$$.props["currentUserEmail"]])) {
        console.warn("<App> was created without expected prop 'currentUserEmail'");
      }
    });
    const writable_props = ["live", "currentUserEmail"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<App> was created with unknown prop '${key}'`);
    });
    function statemanagement_isSyncedToIndexedDb_binding(value) {
      isSyncedToIndexedDb = value;
      $$invalidate(2, isSyncedToIndexedDb);
    }
    function clientonlystatemanagement_isClientStateRestored_binding(value) {
      isClientStateRestored = value;
      $$invalidate(1, isClientStateRestored);
    }
    function scrollpositionrestorer_isScrollPositionRestored_binding(value) {
      isScrollPositionRestored = value;
      $$invalidate(3, isScrollPositionRestored);
    }
    function serviceworker_serviceWorkerVersion_binding(value) {
      serviceWorkerVersion = value;
      $$invalidate(4, serviceWorkerVersion);
    }
    const func = () => set_store_value(openedMenuId, $openedMenuId = "", $openedMenuId);
    function header_isClientStateRestored_binding(value) {
      isClientStateRestored = value;
      $$invalidate(1, isClientStateRestored);
    }
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(7, live = $$props2.live);
      if ("currentUserEmail" in $$props2)
        $$invalidate(0, currentUserEmail = $$props2.currentUserEmail);
    };
    $$self.$capture_state = () => ({
      openedMenuId,
      urlHash,
      AppInfo: AppInfo_default,
      AppSkeleton: AppSkeleton_default,
      ClickOutsideClassHandler: ClickOutsideClassHandler_default,
      ClientOnlyStateManagement: ClientOnlyStateManagement_default,
      Header: Header_default,
      ScrollPositionRestorer: ScrollPositionRestorer_default,
      ServiceWorker: ServiceWorker_default,
      StateManagement: StateManagement_default,
      StickyHeader: StickyHeader_default,
      ThemeSyncManager: ThemeSyncManager_default,
      Toast: Toast_default,
      TodoApp: TodoApp_default,
      UpdateAlert: UpdateAlert_default,
      live,
      currentUserEmail,
      menuClass,
      isClientStateRestored,
      isSyncedToIndexedDb,
      isScrollPositionRestored,
      serviceWorkerVersion,
      $openedMenuId,
      $urlHash
    });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(7, live = $$props2.live);
      if ("currentUserEmail" in $$props2)
        $$invalidate(0, currentUserEmail = $$props2.currentUserEmail);
      if ("isClientStateRestored" in $$props2)
        $$invalidate(1, isClientStateRestored = $$props2.isClientStateRestored);
      if ("isSyncedToIndexedDb" in $$props2)
        $$invalidate(2, isSyncedToIndexedDb = $$props2.isSyncedToIndexedDb);
      if ("isScrollPositionRestored" in $$props2)
        $$invalidate(3, isScrollPositionRestored = $$props2.isScrollPositionRestored);
      if ("serviceWorkerVersion" in $$props2)
        $$invalidate(4, serviceWorkerVersion = $$props2.serviceWorkerVersion);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [
      currentUserEmail,
      isClientStateRestored,
      isSyncedToIndexedDb,
      isScrollPositionRestored,
      serviceWorkerVersion,
      $openedMenuId,
      $urlHash,
      live,
      statemanagement_isSyncedToIndexedDb_binding,
      clientonlystatemanagement_isClientStateRestored_binding,
      scrollpositionrestorer_isScrollPositionRestored_binding,
      serviceworker_serviceWorkerVersion_binding,
      func,
      header_isClientStateRestored_binding
    ];
  }
  var App = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance61, create_fragment61, safe_not_equal, { live: 7, currentUserEmail: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "App",
        options,
        id: create_fragment61.name
      });
    }
    get live() {
      throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get currentUserEmail() {
      throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set currentUserEmail(value) {
      throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var App_default = App;

  // svelte/ErrorLayout.svelte
  var ErrorLayout_exports = {};
  __export(ErrorLayout_exports, {
    default: () => ErrorLayout_default
  });
  var file27 = "svelte/ErrorLayout.svelte";
  function create_if_block19(ctx) {
    let p;
    let t;
    const block = {
      c: function create7() {
        p = element("p");
        t = text(
          /*subtitle*/
          ctx[1]
        );
        this.h();
      },
      l: function claim(nodes) {
        p = claim_element(nodes, "P", { class: true });
        var p_nodes = children(p);
        t = claim_text(
          p_nodes,
          /*subtitle*/
          ctx[1]
        );
        p_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(p, "class", "my-2");
        add_location(p, file27, 21, 8, 433);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, p, anchor);
        append_hydration_dev(p, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*subtitle*/
        2)
          set_data_dev(
            t,
            /*subtitle*/
            ctx2[1]
          );
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(p);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block19.name,
      type: "if",
      source: "(16:6) {#if subtitle}",
      ctx
    });
    return block;
  }
  function create_fragment62(ctx) {
    let div3;
    let div2;
    let div1;
    let div0;
    let textContent = "(\u25D1_\u25D1)";
    let t1;
    let h1;
    let t2;
    let t3;
    let t4;
    let a;
    let t5;
    let mounted;
    let dispose;
    let if_block = (
      /*subtitle*/
      ctx[1] && create_if_block19(ctx)
    );
    const block = {
      c: function create7() {
        div3 = element("div");
        div2 = element("div");
        div1 = element("div");
        div0 = element("div");
        div0.textContent = textContent;
        t1 = space();
        h1 = element("h1");
        t2 = text(
          /*title*/
          ctx[0]
        );
        t3 = space();
        if (if_block)
          if_block.c();
        t4 = space();
        a = element("a");
        t5 = text(
          /*linkText*/
          ctx[3]
        );
        this.h();
      },
      l: function claim(nodes) {
        div3 = claim_element(nodes, "DIV", { class: true });
        var div3_nodes = children(div3);
        div2 = claim_element(div3_nodes, "DIV", { class: true });
        var div2_nodes = children(div2);
        div1 = claim_element(div2_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        div0 = claim_element(div1_nodes, "DIV", { class: true, ["data-svelte-h"]: true });
        if (get_svelte_dataset(div0) !== "svelte-1oiihev")
          div0.textContent = textContent;
        t1 = claim_space(div1_nodes);
        h1 = claim_element(div1_nodes, "H1", { class: true });
        var h1_nodes = children(h1);
        t2 = claim_text(
          h1_nodes,
          /*title*/
          ctx[0]
        );
        h1_nodes.forEach(detach_dev);
        t3 = claim_space(div1_nodes);
        if (if_block)
          if_block.l(div1_nodes);
        t4 = claim_space(div1_nodes);
        a = claim_element(div1_nodes, "A", { class: true, href: true });
        var a_nodes = children(a);
        t5 = claim_text(
          a_nodes,
          /*linkText*/
          ctx[3]
        );
        a_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        div2_nodes.forEach(detach_dev);
        div3_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div0, "class", "mx-auto text-8xl mb-10");
        add_location(div0, file27, 17, 6, 301);
        attr_dev(h1, "class", "text-xl font-bold my-3");
        add_location(h1, file27, 18, 6, 355);
        attr_dev(a, "class", "btn btn-accent my-2");
        attr_dev(
          a,
          "href",
          /*href*/
          ctx[2]
        );
        add_location(a, file27, 24, 6, 483);
        attr_dev(div1, "class", "max-w-md");
        add_location(div1, file27, 16, 4, 272);
        attr_dev(div2, "class", "hero-content text-center");
        add_location(div2, file27, 15, 2, 229);
        attr_dev(div3, "class", "hero min-h-screen");
        add_location(div3, file27, 14, 0, 195);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div3, anchor);
        append_hydration_dev(div3, div2);
        append_hydration_dev(div2, div1);
        append_hydration_dev(div1, div0);
        append_hydration_dev(div1, t1);
        append_hydration_dev(div1, h1);
        append_hydration_dev(h1, t2);
        append_hydration_dev(div1, t3);
        if (if_block)
          if_block.m(div1, null);
        append_hydration_dev(div1, t4);
        append_hydration_dev(div1, a);
        append_hydration_dev(a, t5);
        if (!mounted) {
          dispose = listen_dev(a, "click", prevent_default(
            /*click_handler*/
            ctx[5]
          ), false, true, false, false);
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*title*/
        1)
          set_data_dev(
            t2,
            /*title*/
            ctx2[0]
          );
        if (
          /*subtitle*/
          ctx2[1]
        ) {
          if (if_block) {
            if_block.p(ctx2, dirty);
          } else {
            if_block = create_if_block19(ctx2);
            if_block.c();
            if_block.m(div1, t4);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
        if (dirty & /*linkText*/
        8)
          set_data_dev(
            t5,
            /*linkText*/
            ctx2[3]
          );
        if (dirty & /*href*/
        4) {
          attr_dev(
            a,
            "href",
            /*href*/
            ctx2[2]
          );
        }
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div3);
        }
        if (if_block)
          if_block.d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment62.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance62($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ErrorLayout", slots, []);
    let { live = void 0 } = $$props;
    live;
    let { title } = $$props;
    let { subtitle = void 0 } = $$props;
    let { href } = $$props;
    let { linkText } = $$props;
    $$self.$$.on_mount.push(function() {
      if (title === void 0 && !("title" in $$props || $$self.$$.bound[$$self.$$.props["title"]])) {
        console.warn("<ErrorLayout> was created without expected prop 'title'");
      }
      if (href === void 0 && !("href" in $$props || $$self.$$.bound[$$self.$$.props["href"]])) {
        console.warn("<ErrorLayout> was created without expected prop 'href'");
      }
      if (linkText === void 0 && !("linkText" in $$props || $$self.$$.bound[$$self.$$.props["linkText"]])) {
        console.warn("<ErrorLayout> was created without expected prop 'linkText'");
      }
    });
    const writable_props = ["live", "title", "subtitle", "href", "linkText"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ErrorLayout> was created with unknown prop '${key}'`);
    });
    const click_handler = () => {
      showTopBar();
      window.location.replace(href);
    };
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(4, live = $$props2.live);
      if ("title" in $$props2)
        $$invalidate(0, title = $$props2.title);
      if ("subtitle" in $$props2)
        $$invalidate(1, subtitle = $$props2.subtitle);
      if ("href" in $$props2)
        $$invalidate(2, href = $$props2.href);
      if ("linkText" in $$props2)
        $$invalidate(3, linkText = $$props2.linkText);
    };
    $$self.$capture_state = () => ({
      showTopBar,
      live,
      title,
      subtitle,
      href,
      linkText
    });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(4, live = $$props2.live);
      if ("title" in $$props2)
        $$invalidate(0, title = $$props2.title);
      if ("subtitle" in $$props2)
        $$invalidate(1, subtitle = $$props2.subtitle);
      if ("href" in $$props2)
        $$invalidate(2, href = $$props2.href);
      if ("linkText" in $$props2)
        $$invalidate(3, linkText = $$props2.linkText);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [title, subtitle, href, linkText, live, click_handler];
  }
  var ErrorLayout = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance62, create_fragment62, safe_not_equal, {
        live: 4,
        title: 0,
        subtitle: 1,
        href: 2,
        linkText: 3
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ErrorLayout",
        options,
        id: create_fragment62.name
      });
    }
    get live() {
      throw new Error("<ErrorLayout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<ErrorLayout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get title() {
      throw new Error("<ErrorLayout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set title(value) {
      throw new Error("<ErrorLayout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get subtitle() {
      throw new Error("<ErrorLayout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set subtitle(value) {
      throw new Error("<ErrorLayout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get href() {
      throw new Error("<ErrorLayout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set href(value) {
      throw new Error("<ErrorLayout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get linkText() {
      throw new Error("<ErrorLayout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set linkText(value) {
      throw new Error("<ErrorLayout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ErrorLayout_default = ErrorLayout;

  // svelte/ExampleSvelteComponent.svelte
  var ExampleSvelteComponent_exports = {};
  __export(ExampleSvelteComponent_exports, {
    default: () => ExampleSvelteComponent_default
  });
  var file28 = "svelte/ExampleSvelteComponent.svelte";
  function add_css2(target) {
    append_styles(target, "svelte-1s69lyn", "button.svelte-1s69lyn{margin:10px;padding:10px;display:block;border:1px solid #ccc}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhhbXBsZVN2ZWx0ZUNvbXBvbmVudC5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBZUUscUJBQU8sQ0FDTCxNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxJQUFJLENBQ2IsT0FBTyxDQUFFLEtBQUssQ0FDZCxNQUFNLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUNwQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJFeGFtcGxlU3ZlbHRlQ29tcG9uZW50LnN2ZWx0ZSJdfQ== */");
  }
  function create_fragment63(ctx) {
    let button0;
    let t0;
    let t1;
    let button1;
    let t2;
    let mounted;
    let dispose;
    const block = {
      c: function create7() {
        button0 = element("button");
        t0 = text(
          /*count*/
          ctx[0]
        );
        t1 = space();
        button1 = element("button");
        t2 = text(
          /*clientOnlyCount*/
          ctx[1]
        );
        this.h();
      },
      l: function claim(nodes) {
        button0 = claim_element(nodes, "BUTTON", { "phx-click": true, class: true });
        var button0_nodes = children(button0);
        t0 = claim_text(
          button0_nodes,
          /*count*/
          ctx[0]
        );
        button0_nodes.forEach(detach_dev);
        t1 = claim_space(nodes);
        button1 = claim_element(nodes, "BUTTON", { class: true });
        var button1_nodes = children(button1);
        t2 = claim_text(
          button1_nodes,
          /*clientOnlyCount*/
          ctx[1]
        );
        button1_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button0, "phx-click", "increment");
        attr_dev(button0, "class", "svelte-1s69lyn");
        add_location(button0, file28, 6, 0, 72);
        attr_dev(button1, "class", "svelte-1s69lyn");
        add_location(button1, file28, 10, 0, 124);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, button0, anchor);
        append_hydration_dev(button0, t0);
        insert_hydration_dev(target, t1, anchor);
        insert_hydration_dev(target, button1, anchor);
        append_hydration_dev(button1, t2);
        if (!mounted) {
          dispose = listen_dev(
            button1,
            "click",
            /*click_handler*/
            ctx[2],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (dirty & /*count*/
        1)
          set_data_dev(
            t0,
            /*count*/
            ctx2[0]
          );
        if (dirty & /*clientOnlyCount*/
        2)
          set_data_dev(
            t2,
            /*clientOnlyCount*/
            ctx2[1]
          );
      },
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(button0);
          detach_dev(t1);
          detach_dev(button1);
        }
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment63.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance63($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("ExampleSvelteComponent", slots, []);
    let { count: count2 } = $$props;
    let clientOnlyCount = count2;
    $$self.$$.on_mount.push(function() {
      if (count2 === void 0 && !("count" in $$props || $$self.$$.bound[$$self.$$.props["count"]])) {
        console.warn("<ExampleSvelteComponent> was created without expected prop 'count'");
      }
    });
    const writable_props = ["count"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<ExampleSvelteComponent> was created with unknown prop '${key}'`);
    });
    const click_handler = () => $$invalidate(1, clientOnlyCount++, clientOnlyCount);
    $$self.$$set = ($$props2) => {
      if ("count" in $$props2)
        $$invalidate(0, count2 = $$props2.count);
    };
    $$self.$capture_state = () => ({ count: count2, clientOnlyCount });
    $$self.$inject_state = ($$props2) => {
      if ("count" in $$props2)
        $$invalidate(0, count2 = $$props2.count);
      if ("clientOnlyCount" in $$props2)
        $$invalidate(1, clientOnlyCount = $$props2.clientOnlyCount);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [count2, clientOnlyCount, click_handler];
  }
  var ExampleSvelteComponent = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance63, create_fragment63, safe_not_equal, { count: 0 }, add_css2);
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "ExampleSvelteComponent",
        options,
        id: create_fragment63.name
      });
    }
    get count() {
      throw new Error("<ExampleSvelteComponent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set count(value) {
      throw new Error("<ExampleSvelteComponent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var ExampleSvelteComponent_default = ExampleSvelteComponent;

  // svelte/LiveViewSocket.svelte
  var LiveViewSocket_exports = {};
  __export(LiveViewSocket_exports, {
    default: () => LiveViewSocket_default
  });

  // svelte/VisibilityChangeTracker.svelte
  var VisibilityChangeTracker_exports = {};
  __export(VisibilityChangeTracker_exports, {
    default: () => VisibilityChangeTracker_default
  });
  function create_fragment64(ctx) {
    let mounted;
    let dispose;
    const block = {
      c: noop3,
      l: noop3,
      m: function mount(target, anchor) {
        if (!mounted) {
          dispose = listen_dev(
            window,
            "visibilitychange",
            /*visibilitychange_handler*/
            ctx[2],
            false,
            false,
            false,
            false
          );
          mounted = true;
        }
      },
      p: noop3,
      i: noop3,
      o: noop3,
      d: function destroy(detaching) {
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment64.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance64($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("VisibilityChangeTracker", slots, []);
    let { live } = $$props;
    function pushVisibilityChangeEvent() {
      const sessionIdKey = "sessionId";
      let sessionId = sessionStorage.getItem(sessionIdKey);
      if (!sessionId) {
        sessionId = crypto.randomUUID();
        sessionStorage.setItem(sessionIdKey, sessionId);
      }
      live == null ? void 0 : live.pushEvent("visibility_change", {
        sessionId,
        visibilityState: document.visibilityState
      });
    }
    onMount(() => {
      pushVisibilityChangeEvent();
    });
    $$self.$$.on_mount.push(function() {
      if (live === void 0 && !("live" in $$props || $$self.$$.bound[$$self.$$.props["live"]])) {
        console.warn("<VisibilityChangeTracker> was created without expected prop 'live'");
      }
    });
    const writable_props = ["live"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<VisibilityChangeTracker> was created with unknown prop '${key}'`);
    });
    const visibilitychange_handler = () => {
      pushVisibilityChangeEvent();
    };
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(1, live = $$props2.live);
    };
    $$self.$capture_state = () => ({ onMount, live, pushVisibilityChangeEvent });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(1, live = $$props2.live);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [pushVisibilityChangeEvent, live, visibilitychange_handler];
  }
  var VisibilityChangeTracker = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance64, create_fragment64, safe_not_equal, { live: 1 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "VisibilityChangeTracker",
        options,
        id: create_fragment64.name
      });
    }
    get live() {
      throw new Error("<VisibilityChangeTracker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<VisibilityChangeTracker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var VisibilityChangeTracker_default = VisibilityChangeTracker;

  // svelte/LiveViewSocket.svelte
  function create_fragment65(ctx) {
    let visibilitychangetracker;
    let current;
    visibilitychangetracker = new VisibilityChangeTracker_default({
      props: { live: (
        /*live*/
        ctx[0]
      ) },
      $$inline: true
    });
    const block = {
      c: function create7() {
        create_component(visibilitychangetracker.$$.fragment);
      },
      l: function claim(nodes) {
        claim_component(visibilitychangetracker.$$.fragment, nodes);
      },
      m: function mount(target, anchor) {
        mount_component(visibilitychangetracker, target, anchor);
        current = true;
      },
      p: function update2(ctx2, [dirty]) {
        const visibilitychangetracker_changes = {};
        if (dirty & /*live*/
        1)
          visibilitychangetracker_changes.live = /*live*/
          ctx2[0];
        visibilitychangetracker.$set(visibilitychangetracker_changes);
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(visibilitychangetracker.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(visibilitychangetracker.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        destroy_component(visibilitychangetracker, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment65.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance65($$self, $$props, $$invalidate) {
    let $sessionCount;
    let $serverDocument;
    let $liveView;
    validate_store(sessionCount, "sessionCount");
    component_subscribe($$self, sessionCount, ($$value) => $$invalidate(3, $sessionCount = $$value));
    validate_store(serverDocument, "serverDocument");
    component_subscribe($$self, serverDocument, ($$value) => $$invalidate(4, $serverDocument = $$value));
    validate_store(liveView, "liveView");
    component_subscribe($$self, liveView, ($$value) => $$invalidate(5, $liveView = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("LiveViewSocket", slots, []);
    let { live } = $$props;
    set_store_value(liveView, $liveView = live, $liveView);
    let { server_document } = $$props;
    let { session_count } = $$props;
    $$self.$$.on_mount.push(function() {
      if (live === void 0 && !("live" in $$props || $$self.$$.bound[$$self.$$.props["live"]])) {
        console.warn("<LiveViewSocket> was created without expected prop 'live'");
      }
      if (server_document === void 0 && !("server_document" in $$props || $$self.$$.bound[$$self.$$.props["server_document"]])) {
        console.warn("<LiveViewSocket> was created without expected prop 'server_document'");
      }
      if (session_count === void 0 && !("session_count" in $$props || $$self.$$.bound[$$self.$$.props["session_count"]])) {
        console.warn("<LiveViewSocket> was created without expected prop 'session_count'");
      }
    });
    const writable_props = ["live", "server_document", "session_count"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<LiveViewSocket> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
      if ("server_document" in $$props2)
        $$invalidate(1, server_document = $$props2.server_document);
      if ("session_count" in $$props2)
        $$invalidate(2, session_count = $$props2.session_count);
    };
    $$self.$capture_state = () => ({
      liveView,
      serverDocument,
      sessionCount,
      VisibilityChangeTracker: VisibilityChangeTracker_default,
      live,
      server_document,
      session_count,
      $sessionCount,
      $serverDocument,
      $liveView
    });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
      if ("server_document" in $$props2)
        $$invalidate(1, server_document = $$props2.server_document);
      if ("session_count" in $$props2)
        $$invalidate(2, session_count = $$props2.session_count);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*server_document*/
      2) {
        $:
          set_store_value(serverDocument, $serverDocument = server_document, $serverDocument);
      }
      if ($$self.$$.dirty & /*session_count*/
      4) {
        $:
          set_store_value(sessionCount, $sessionCount = session_count, $sessionCount);
      }
    };
    return [live, server_document, session_count];
  }
  var LiveViewSocket = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance65, create_fragment65, safe_not_equal, {
        live: 0,
        server_document: 1,
        session_count: 2
      });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "LiveViewSocket",
        options,
        id: create_fragment65.name
      });
    }
    get live() {
      throw new Error("<LiveViewSocket>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<LiveViewSocket>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get server_document() {
      throw new Error("<LiveViewSocket>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set server_document(value) {
      throw new Error("<LiveViewSocket>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get session_count() {
      throw new Error("<LiveViewSocket>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set session_count(value) {
      throw new Error("<LiveViewSocket>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var LiveViewSocket_default = LiveViewSocket;

  // svelte/Logo.svelte
  var Logo_exports = {};
  __export(Logo_exports, {
    default: () => Logo_default
  });
  var file29 = "svelte/Logo.svelte";
  function create_fragment66(ctx) {
    let div;
    let check;
    let current;
    check = new check_default({
      props: { color: "#2a323c", class: "h-96 w-96" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div = element("div");
        create_component(check.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div = claim_element(nodes, "DIV", { class: true });
        var div_nodes = children(div);
        claim_component(check.$$.fragment, div_nodes);
        div_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(div, "class", "h-screen w-screen bg-accent flex justify-center items-center");
        add_location(div, file29, 9, 0, 103);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div, anchor);
        mount_component(check, div, null);
        current = true;
      },
      p: noop3,
      i: function intro(local) {
        if (current)
          return;
        transition_in(check.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(check.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div);
        }
        destroy_component(check);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment66.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance66($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("Logo", slots, []);
    let { live = void 0 } = $$props;
    live;
    const writable_props = ["live"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console.warn(`<Logo> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    $$self.$capture_state = () => ({ Check: check_default, live });
    $$self.$inject_state = ($$props2) => {
      if ("live" in $$props2)
        $$invalidate(0, live = $$props2.live);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    return [live];
  }
  var Logo = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance66, create_fragment66, safe_not_equal, { live: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "Logo",
        options,
        id: create_fragment66.name
      });
    }
    get live() {
      throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set live(value) {
      throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var Logo_default = Logo;

  // svelte/UndoButtons.svelte
  var UndoButtons_exports = {};
  __export(UndoButtons_exports, {
    default: () => UndoButtons_default
  });
  var { console: console_15 } = globals;
  var file30 = "svelte/UndoButtons.svelte";
  function create_if_block_18(ctx) {
    let span;
    let t;
    const block = {
      c: function create7() {
        span = element("span");
        t = text(
          /*undoCount*/
          ctx[2]
        );
        this.h();
      },
      l: function claim(nodes) {
        span = claim_element(nodes, "SPAN", { class: true });
        var span_nodes = children(span);
        t = claim_text(
          span_nodes,
          /*undoCount*/
          ctx[2]
        );
        span_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(span, "class", "indicator-item badge badge-sm");
        add_location(span, file30, 36, 6, 872);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, span, anchor);
        append_hydration_dev(span, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*undoCount*/
        4)
          set_data_dev(
            t,
            /*undoCount*/
            ctx2[2]
          );
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(span);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block_18.name,
      type: "if",
      source: "(28:4) {#if undoCount > 0}",
      ctx
    });
    return block;
  }
  function create_if_block20(ctx) {
    let span;
    let t;
    const block = {
      c: function create7() {
        span = element("span");
        t = text(
          /*redoCount*/
          ctx[3]
        );
        this.h();
      },
      l: function claim(nodes) {
        span = claim_element(nodes, "SPAN", { class: true });
        var span_nodes = children(span);
        t = claim_text(
          span_nodes,
          /*redoCount*/
          ctx[3]
        );
        span_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(span, "class", "indicator-item badge badge-sm");
        add_location(span, file30, 58, 6, 1438);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, span, anchor);
        append_hydration_dev(span, t);
      },
      p: function update2(ctx2, dirty) {
        if (dirty & /*redoCount*/
        8)
          set_data_dev(
            t,
            /*redoCount*/
            ctx2[3]
          );
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(span);
        }
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_if_block20.name,
      type: "if",
      source: "(50:4) {#if redoCount > 0}",
      ctx
    });
    return block;
  }
  function create_fragment67(ctx) {
    let div2;
    let div0;
    let t0;
    let button0;
    let undo2;
    let button0_disabled_value;
    let t1;
    let div1;
    let t2;
    let button1;
    let redo2;
    let button1_disabled_value;
    let div2_resize_listener;
    let current;
    let mounted;
    let dispose;
    let if_block0 = (
      /*undoCount*/
      ctx[2] > 0 && create_if_block_18(ctx)
    );
    undo2 = new undo_2_default({
      props: { className: "w-6 h-6" },
      $$inline: true
    });
    let if_block1 = (
      /*redoCount*/
      ctx[3] > 0 && create_if_block20(ctx)
    );
    redo2 = new redo_2_default({
      props: { className: "w-6 h-6" },
      $$inline: true
    });
    const block = {
      c: function create7() {
        div2 = element("div");
        div0 = element("div");
        if (if_block0)
          if_block0.c();
        t0 = space();
        button0 = element("button");
        create_component(undo2.$$.fragment);
        t1 = space();
        div1 = element("div");
        if (if_block1)
          if_block1.c();
        t2 = space();
        button1 = element("button");
        create_component(redo2.$$.fragment);
        this.h();
      },
      l: function claim(nodes) {
        div2 = claim_element(nodes, "DIV", { style: true, class: true });
        var div2_nodes = children(div2);
        div0 = claim_element(div2_nodes, "DIV", { class: true });
        var div0_nodes = children(div0);
        if (if_block0)
          if_block0.l(div0_nodes);
        t0 = claim_space(div0_nodes);
        button0 = claim_element(div0_nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button0_nodes = children(button0);
        claim_component(undo2.$$.fragment, button0_nodes);
        button0_nodes.forEach(detach_dev);
        div0_nodes.forEach(detach_dev);
        t1 = claim_space(div2_nodes);
        div1 = claim_element(div2_nodes, "DIV", { class: true });
        var div1_nodes = children(div1);
        if (if_block1)
          if_block1.l(div1_nodes);
        t2 = claim_space(div1_nodes);
        button1 = claim_element(div1_nodes, "BUTTON", {
          class: true,
          "aria-label": true,
          title: true
        });
        var button1_nodes = children(button1);
        claim_component(redo2.$$.fragment, button1_nodes);
        button1_nodes.forEach(detach_dev);
        div1_nodes.forEach(detach_dev);
        div2_nodes.forEach(detach_dev);
        this.h();
      },
      h: function hydrate() {
        attr_dev(button0, "class", "my-1 btn btn-circle btn-neutral shadow-2xl focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button0, "aria-label", "Undo.");
        attr_dev(button0, "title", "Undo last action.");
        button0.disabled = button0_disabled_value = /*undoCount*/
        ctx[2] === 0;
        add_location(button0, file30, 39, 4, 950);
        attr_dev(div0, "class", "indicator");
        add_location(div0, file30, 34, 2, 818);
        attr_dev(button1, "class", "my-1 btn btn-circle btn-neutral focus:outline-none focus-visible:ring ring-accent ring-offset-1 ring-offset-base-100 ");
        attr_dev(button1, "aria-label", "Redo.");
        attr_dev(button1, "title", "Redo last action.");
        button1.disabled = button1_disabled_value = /*redoCount*/
        ctx[3] === 0;
        add_location(button1, file30, 61, 4, 1516);
        attr_dev(div1, "class", "indicator");
        add_location(div1, file30, 56, 2, 1384);
        set_style(div2, "scrollbar-gutter", "stable");
        attr_dev(div2, "class", "flex gap-2 fixed left-1/2 bottom-0 z-40 m-2");
        add_render_callback(() => (
          /*div2_elementresize_handler*/
          ctx[7].call(div2)
        ));
        set_style(div2, "margin-left", `-${/*width*/
        ctx[1] / 2}px`);
        add_location(div2, file30, 28, 0, 652);
      },
      m: function mount(target, anchor) {
        insert_hydration_dev(target, div2, anchor);
        append_hydration_dev(div2, div0);
        if (if_block0)
          if_block0.m(div0, null);
        append_hydration_dev(div0, t0);
        append_hydration_dev(div0, button0);
        mount_component(undo2, button0, null);
        append_hydration_dev(div2, t1);
        append_hydration_dev(div2, div1);
        if (if_block1)
          if_block1.m(div1, null);
        append_hydration_dev(div1, t2);
        append_hydration_dev(div1, button1);
        mount_component(redo2, button1, null);
        div2_resize_listener = add_iframe_resize_listener(
          div2,
          /*div2_elementresize_handler*/
          ctx[7].bind(div2)
        );
        current = true;
        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              "click",
              /*click_handler*/
              ctx[5],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              "click",
              /*click_handler_1*/
              ctx[6],
              false,
              false,
              false,
              false
            )
          ];
          mounted = true;
        }
      },
      p: function update2(ctx2, [dirty]) {
        if (
          /*undoCount*/
          ctx2[2] > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx2, dirty);
          } else {
            if_block0 = create_if_block_18(ctx2);
            if_block0.c();
            if_block0.m(div0, t0);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }
        if (!current || dirty & /*undoCount*/
        4 && button0_disabled_value !== (button0_disabled_value = /*undoCount*/
        ctx2[2] === 0)) {
          prop_dev(button0, "disabled", button0_disabled_value);
        }
        if (
          /*redoCount*/
          ctx2[3] > 0
        ) {
          if (if_block1) {
            if_block1.p(ctx2, dirty);
          } else {
            if_block1 = create_if_block20(ctx2);
            if_block1.c();
            if_block1.m(div1, t2);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
        if (!current || dirty & /*redoCount*/
        8 && button1_disabled_value !== (button1_disabled_value = /*redoCount*/
        ctx2[3] === 0)) {
          prop_dev(button1, "disabled", button1_disabled_value);
        }
        if (dirty & /*width*/
        2) {
          set_style(div2, "margin-left", `-${/*width*/
          ctx2[1] / 2}px`);
        }
      },
      i: function intro(local) {
        if (current)
          return;
        transition_in(undo2.$$.fragment, local);
        transition_in(redo2.$$.fragment, local);
        current = true;
      },
      o: function outro(local) {
        transition_out(undo2.$$.fragment, local);
        transition_out(redo2.$$.fragment, local);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) {
          detach_dev(div2);
        }
        if (if_block0)
          if_block0.d();
        destroy_component(undo2);
        if (if_block1)
          if_block1.d();
        destroy_component(redo2);
        div2_resize_listener();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block,
      id: create_fragment67.name,
      type: "component",
      source: "",
      ctx
    });
    return block;
  }
  function instance67($$self, $$props, $$invalidate) {
    let $liveView;
    validate_store(liveView, "liveView");
    component_subscribe($$self, liveView, ($$value) => $$invalidate(4, $liveView = $$value));
    let { $$slots: slots = {}, $$scope } = $$props;
    validate_slots("UndoButtons", slots, []);
    let { undoManager } = $$props;
    let width;
    let undoCount = 0;
    let redoCount = 0;
    $$self.$$.on_mount.push(function() {
      if (undoManager === void 0 && !("undoManager" in $$props || $$self.$$.bound[$$self.$$.props["undoManager"]])) {
        console_15.warn("<UndoButtons> was created without expected prop 'undoManager'");
      }
    });
    const writable_props = ["undoManager"];
    Object.keys($$props).forEach((key) => {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
        console_15.warn(`<UndoButtons> was created with unknown prop '${key}'`);
    });
    const click_handler = () => {
      undoManager.undo();
      syncDocumentToServer($liveView);
    };
    const click_handler_1 = () => {
      undoManager.redo();
      syncDocumentToServer($liveView);
    };
    function div2_elementresize_handler() {
      width = this.clientWidth;
      $$invalidate(1, width);
    }
    $$self.$$set = ($$props2) => {
      if ("undoManager" in $$props2)
        $$invalidate(0, undoManager = $$props2.undoManager);
    };
    $$self.$capture_state = () => ({
      Redo2: redo_2_default,
      Undo2: undo_2_default,
      liveView,
      syncDocumentToServer,
      undoManager,
      width,
      undoCount,
      redoCount,
      $liveView
    });
    $$self.$inject_state = ($$props2) => {
      if ("undoManager" in $$props2)
        $$invalidate(0, undoManager = $$props2.undoManager);
      if ("width" in $$props2)
        $$invalidate(1, width = $$props2.width);
      if ("undoCount" in $$props2)
        $$invalidate(2, undoCount = $$props2.undoCount);
      if ("redoCount" in $$props2)
        $$invalidate(3, redoCount = $$props2.redoCount);
    };
    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }
    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*undoManager*/
      1) {
        $:
          if (undoManager) {
            undoManager.on("stack-item-added", (event) => {
              console.log("add event:", event);
              $$invalidate(2, undoCount = undoManager.undoStack.length);
              $$invalidate(3, redoCount = undoManager.redoStack.length);
            });
            undoManager.on("stack-item-popped", (event) => {
              console.log("pop event:", event);
            });
          }
      }
    };
    return [
      undoManager,
      width,
      undoCount,
      redoCount,
      $liveView,
      click_handler,
      click_handler_1,
      div2_elementresize_handler
    ];
  }
  var UndoButtons = class extends SvelteComponentDev {
    constructor(options) {
      super(options);
      init(this, options, instance67, create_fragment67, safe_not_equal, { undoManager: 0 });
      dispatch_dev("SvelteRegisterComponent", {
        component: this,
        tagName: "UndoButtons",
        options,
        id: create_fragment67.name
      });
    }
    get undoManager() {
      throw new Error("<UndoButtons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set undoManager(value) {
      throw new Error("<UndoButtons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
  };
  var UndoButtons_default = UndoButtons;

  // import-glob:../svelte/**/*.svelte
  var modules = [AccountButton_exports, App_exports, AppInfo_exports, AppSkeleton_exports, Back_exports, ClickOutsideClassHandler_exports, ClientOnlyStateManagement_exports, ConfirmDeletionModal_exports, DataClearer_exports, DragHandle_exports, EditForm_exports, ErrorLayout_exports, ExampleSvelteComponent_exports, Header_exports, ItemsContainer_exports, Link_exports, LiveViewSocket_exports, Logo_exports, MoveTodoMenu_exports, NewItemForm_exports, OptionsMenu_exports, ScrollPositionRestorer_exports, ServiceWorker_exports, SessionsBadge_exports, ShareButton_exports, StateManagement_exports, StickyHeader_exports, SyncStatusBadge_exports, ThemeButton_exports, ThemeChoiceButton_exports, ThemeSyncManager_exports, Toast_exports, TodoApp_exports, TodoCheckList_exports, TodoListSelector_exports, UndoButtons_exports, UpdateAlert_exports, VisibilityChangeTracker_exports];
  var __default = modules;
  var filenames = ["../svelte/AccountButton.svelte", "../svelte/App.svelte", "../svelte/AppInfo.svelte", "../svelte/AppSkeleton.svelte", "../svelte/Back.svelte", "../svelte/ClickOutsideClassHandler.svelte", "../svelte/ClientOnlyStateManagement.svelte", "../svelte/ConfirmDeletionModal.svelte", "../svelte/DataClearer.svelte", "../svelte/DragHandle.svelte", "../svelte/EditForm.svelte", "../svelte/ErrorLayout.svelte", "../svelte/ExampleSvelteComponent.svelte", "../svelte/Header.svelte", "../svelte/ItemsContainer.svelte", "../svelte/Link.svelte", "../svelte/LiveViewSocket.svelte", "../svelte/Logo.svelte", "../svelte/MoveTodoMenu.svelte", "../svelte/NewItemForm.svelte", "../svelte/OptionsMenu.svelte", "../svelte/ScrollPositionRestorer.svelte", "../svelte/ServiceWorker.svelte", "../svelte/SessionsBadge.svelte", "../svelte/ShareButton.svelte", "../svelte/StateManagement.svelte", "../svelte/StickyHeader.svelte", "../svelte/SyncStatusBadge.svelte", "../svelte/ThemeButton.svelte", "../svelte/ThemeChoiceButton.svelte", "../svelte/ThemeSyncManager.svelte", "../svelte/Toast.svelte", "../svelte/TodoApp.svelte", "../svelte/TodoCheckList.svelte", "../svelte/TodoListSelector.svelte", "../svelte/UndoButtons.svelte", "../svelte/UpdateAlert.svelte", "../svelte/VisibilityChangeTracker.svelte"];

  // lib/hooks/useRegisterServiceWorker.ts
  var DEBUG = false;
  function useRegisterServiceWorker(serviceWorkerPath) {
    if ("serviceWorker" in navigator) {
      window.addEventListener("load", async () => {
        try {
          const registration = await navigator.serviceWorker.register(serviceWorkerPath, {
            type: "module",
            // Allow ES module imports in sw.
            updateViaCache: "none"
            // Always update sw imports from network to prevent caching issues.
          });
          DEBUG && console.log("[Service Worker] Registered.", registration);
        } catch (error) {
          console.error("[Service Worker] Registration Failed.", error);
        }
      });
    } else {
      console.error("[Service Worker] Not Supported.");
    }
  }

  // lib/topbar/initTopBar.ts
  var import_topbar4 = __toESM(require_topbar());
  function initTopBar() {
    import_topbar4.default.config({ barColors: { 0: "#00c7b5" }, shadowColor: "rgba(0, 0, 0, .3)" });
    window.addEventListener(LOADING_START_EVENT, (_e) => import_topbar4.default.show(300));
    window.addEventListener(LOADING_STOP_EVENT, (_e) => import_topbar4.default.hide());
  }

  // js/app.ts
  useRegisterServiceWorker("/sw.js");
  initTopBar();
  var _a;
  var csrfToken = (_a = document.querySelector("meta[name='csrf-token']")) == null ? void 0 : _a.getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, {
    hooks: getHooks(__exports),
    params: { _csrf_token: csrfToken }
  });
  liveSocket.connect();
  window.liveSocket = liveSocket;
  liveSocket.getSocket().onOpen(async () => {
    try {
      const url = new URL(window.location.href);
      url.searchParams.set("bypass_service_worker", Date.now().toString());
      const response = await fetch(url);
      if (response.redirected) {
        window.location.replace(response.url);
      }
    } catch (error) {
      console.error("Error while checking for redirection on LiveView socket connection.", error);
    }
  });
  window.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      reconnectLiveViewIfDisconnected();
    }
  });
  var originalConsoleLog = console.log;
  console.log = function(message) {
    originalConsoleLog.apply(console, arguments);
    if (message.includes("Falling back to page request")) {
      setTimeout(() => window.location.reload(), 2e3);
    }
  };
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

lucide-svelte/dist/defaultAttributes.js:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/arrow-left.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/check.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/chevron-down.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/chevron-right.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/chevron-up.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/circle-alert.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/circle-check-big.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/circle-ellipsis.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/circle-x.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/grip-horizontal.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/info.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/laptop.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/log-out.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/moon.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/move-right.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/pencil.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/redo-2.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/refresh-cw.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/settings.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/share-2.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/sun.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/swatch-book.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/trash-2.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/triangle-alert.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/undo-2.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/user-round.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/x.svelte:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-svelte/dist/icons/index.js:
  (**
   * @license lucide-svelte v0.365.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC91dGlscy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9wdXNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC90aW1lci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY2hhbm5lbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvYWpheC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvbG9uZ3BvbGwuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3ByZXNlbmNlLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zZXJpYWxpemVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zb2NrZXQuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2VudHJ5X3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3VwbG9hZF9lbnRyeS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2FyaWEuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvaG9va3MuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvbm9kZV9tb2R1bGVzL21vcnBoZG9tL2Rpc3QvbW9ycGhkb20tZXNtLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbV9wYXRjaC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9yZW5kZXJlZC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3X2hvb2suanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvanMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdmlldy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3NvY2tldC5qcyIsICIuLi8uLi8uLi9kZXBzL2xpdmVfc3ZlbHRlL2Fzc2V0cy9qcy9saXZlX3N2ZWx0ZS91dGlscy5qcyIsICIuLi8uLi8uLi9kZXBzL2xpdmVfc3ZlbHRlL2Fzc2V0cy9qcy9saXZlX3N2ZWx0ZS9yZW5kZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9saXZlX3N2ZWx0ZS9hc3NldHMvanMvbGl2ZV9zdmVsdGUvaG9va3MuanMiLCAiaW1wb3J0LWdsb2I6Li4vc3ZlbHRlLyoqLyouc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL3V0aWxzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2Vudmlyb25tZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2xvb3AuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZ2xvYmFscy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9kb20uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvc3R5bGVfbWFuYWdlci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9hbmltYXRpb25zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL2ludGVybmFsL2xpZmVjeWNsZS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9zY2hlZHVsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvdHJhbnNpdGlvbnMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZWFjaC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9zcHJlYWQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3NoYXJlZC9ib29sZWFuX2F0dHJpYnV0ZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvQ29tcG9uZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9zaGFyZWQvdmVyc2lvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9pbnRlcm5hbC9kZXYuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvaW50ZXJuYWwvZGlzY2xvc2UtdmVyc2lvbi9pbmRleC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9lYXNpbmcvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3J1bnRpbWUvdHJhbnNpdGlvbi9pbmRleC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9kZWZhdWx0QXR0cmlidXRlcy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9JY29uLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9hcnJvdy1sZWZ0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaGVjay5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvY2hldnJvbi1kb3duLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaGV2cm9uLXJpZ2h0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaGV2cm9uLXVwLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9jaXJjbGUtYWxlcnQuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL2NpcmNsZS1jaGVjay1iaWcuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL2NpcmNsZS1lbGxpcHNpcy5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvY2lyY2xlLXguc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL2dyaXAtaG9yaXpvbnRhbC5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvaW5mby5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvbGFwdG9wLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9sb2ctb3V0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9tb29uLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9tb3ZlLXJpZ2h0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy9wZW5jaWwuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3JlZG8tMi5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvcmVmcmVzaC1jdy5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvc2V0dGluZ3Muc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3NoYXJlLTIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3N1bi5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9sdWNpZGUtc3ZlbHRlL2Rpc3QvaWNvbnMvc3dhdGNoLWJvb2suc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3RyYXNoLTIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3RyaWFuZ2xlLWFsZXJ0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2x1Y2lkZS1zdmVsdGUvZGlzdC9pY29ucy91bmRvLTIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3VzZXItcm91bmQuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbHVjaWRlLXN2ZWx0ZS9kaXN0L2ljb25zL3guc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9saWIvYWN0aW9ucy9mb2N1c1RyYXAudHMiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi9ob29rcy91c2VJc0Nvbm5lY3RlZC50cyIsICIuLi8uLi8uLi9hc3NldHMvbGliL3RvcGJhci9saWIvZXZlbnRzLnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9ydW50aW1lL3N0b3JlL2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdG9yZXMvY2xpZW50T25seVN0YXRlLnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdG9yZXMvdG9hc3QudHMiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi9hc3NldHMudHMiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9TZXJ2aWNlV29ya2VyLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0FjY291bnRCdXR0b24uc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZyZWUtYnJhbmRzLXN2Zy1pY29ucy9pbmRleC5tanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9zdmVsdGUtZmEvZGlzdC91dGlscy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1mYS9kaXN0L2ZhLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1mYS9kaXN0L2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvTGluay5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9BcHBJbmZvLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0FwcFNrZWxldG9uLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0NsaWVudE9ubHlTdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdG9yZXMvbGl2ZVZpZXdTb2NrZXQudHMiLCAiLi4vLi4vLi4vYXNzZXRzL3N0b3Jlcy9zeW5jU3RhdGUudHMiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9TZXNzaW9uc0JhZGdlLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL1NoYXJlQnV0dG9uLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2pzLWJhc2U2NC9iYXNlNjQubWpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9tYXAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL3NldC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvYXJyYXkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL29ic2VydmFibGUuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL21hdGguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2JpbmFyeS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvbnVtYmVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9zdHJpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2VuY29kaW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9lcnJvci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvZGVjb2RpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL3dlYmNyeXB0by5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvcmFuZG9tLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC90aW1lLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9wcm9taXNlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9jb25kaXRpb25zLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9zdG9yYWdlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9vYmplY3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2Z1bmN0aW9uLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9lbnZpcm9ubWVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvYnVmZmVyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9wYWlyLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMvbGliMC9kb20uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL3N5bWJvbC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL2xpYjAvbG9nZ2luZy5jb21tb24uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2xvZ2dpbmcuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2l0ZXJhdG9yLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9BYnN0cmFjdENvbm5lY3Rvci5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvdXRpbHMvRGVsZXRlU2V0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9Eb2MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL1VwZGF0ZURlY29kZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL1VwZGF0ZUVuY29kZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL2VuY29kaW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9FdmVudEhhbmRsZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL0lELmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9pc1BhcmVudE9mLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9sb2dnaW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9QZXJtYW5lbnRVc2VyRGF0YS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvdXRpbHMvUmVsYXRpdmVQb3NpdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvdXRpbHMvU25hcHNob3QuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL1N0cnVjdFN0b3JlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy91dGlscy9UcmFuc2FjdGlvbi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvdXRpbHMvVW5kb01hbmFnZXIuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL3VwZGF0ZXMuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3V0aWxzL1lFdmVudC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvdHlwZXMvQWJzdHJhY3RUeXBlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy90eXBlcy9ZQXJyYXkuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3R5cGVzL1lNYXAuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3R5cGVzL1lUZXh0LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy90eXBlcy9ZWG1sRnJhZ21lbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3R5cGVzL1lYbWxFbGVtZW50LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy90eXBlcy9ZWG1sRXZlbnQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3R5cGVzL1lYbWxIb29rLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy90eXBlcy9ZWG1sVGV4dC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvc3RydWN0cy9BYnN0cmFjdFN0cnVjdC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvc3RydWN0cy9HQy5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvc3RydWN0cy9Db250ZW50QmluYXJ5LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy9zdHJ1Y3RzL0NvbnRlbnREZWxldGVkLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy9zdHJ1Y3RzL0NvbnRlbnREb2MuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3N0cnVjdHMvQ29udGVudEVtYmVkLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy9zdHJ1Y3RzL0NvbnRlbnRGb3JtYXQuanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3N0cnVjdHMvQ29udGVudEpTT04uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3N0cnVjdHMvQ29udGVudEFueS5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvc3RydWN0cy9Db250ZW50U3RyaW5nLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy9zdHJ1Y3RzL0NvbnRlbnRUeXBlLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9ub2RlX21vZHVsZXMveWpzL3NyYy9zdHJ1Y3RzL0l0ZW0uanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy95anMvc3JjL3N0cnVjdHMvU2tpcC5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3lqcy9zcmMvaW5kZXguanMiLCAiLi4vLi4vLi4vYXNzZXRzL25vZGVfbW9kdWxlcy9saWIwL2luZGV4ZWRkYi5qcyIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3ktaW5kZXhlZGRiL3NyYy95LWluZGV4ZWRkYi5qcyIsICIuLi8uLi8uLi9hc3NldHMvc3RvcmVzL2NyZHRTdGF0ZS50cyIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL1N0YXRlTWFuYWdlbWVudC5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9TeW5jU3RhdHVzQmFkZ2Uuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdG9yZXMvY3VycmVudFRoZW1lLnRzIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVGhlbWVDaG9pY2VCdXR0b24uc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVGhlbWVCdXR0b24uc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvSGVhZGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL1Njcm9sbFBvc2l0aW9uUmVzdG9yZXIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvQmFjay5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9TdGlja3lIZWFkZXIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVGhlbWVTeW5jTWFuYWdlci5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi9hY3Rpb25zL2NsaWNrT3V0c2lkZS50cyIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL1RvYXN0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1kbmQtYWN0aW9uL2Rpc3QvaW5kZXgubWpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvQ29uZmlybURlbGV0aW9uTW9kYWwuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvSXRlbXNDb250YWluZXIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvTW92ZVRvZG9NZW51LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL05ld0l0ZW1Gb3JtLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvcnVudGltZS9hbmltYXRlL2luZGV4LmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9saWIvYWN0aW9ucy9vbktleWRvd24udHMiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi9ob29rcy91c2VIYXNUb3VjaFNjcmVlbi50cyIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0RyYWdIYW5kbGUuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvRWRpdEZvcm0uc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvT3B0aW9uc01lbnUuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVG9kb0NoZWNrTGlzdC5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9Ub2RvTGlzdFNlbGVjdG9yLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL1RvZG9BcHAuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVXBkYXRlQWxlcnQuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvQXBwLnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0Vycm9yTGF5b3V0LnN2ZWx0ZSIsICIuLi8uLi8uLi9hc3NldHMvc3ZlbHRlL0V4YW1wbGVTdmVsdGVDb21wb25lbnQuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvVmlzaWJpbGl0eUNoYW5nZVRyYWNrZXIuc3ZlbHRlIiwgIi4uLy4uLy4uL2Fzc2V0cy9zdmVsdGUvTG9nby5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL3N2ZWx0ZS9VbmRvQnV0dG9ucy5zdmVsdGUiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi9ob29rcy91c2VSZWdpc3RlclNlcnZpY2VXb3JrZXIudHMiLCAiLi4vLi4vLi4vYXNzZXRzL2xpYi90b3BiYXIvaW5pdFRvcEJhci50cyIsICIuLi8uLi8uLi9hc3NldHMvanMvYXBwLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlIE1JVFxuICogdG9wYmFyIDIuMC4wLCAyMDIzLTAyLTA0XG4gKiBodHRwczovL2J1dW5ndXllbi5naXRodWIuaW8vdG9wYmFyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgQnV1IE5ndXllblxuICovXG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzE1Nzk2NzFcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHZhciB2ZW5kb3JzID0gW1wibXNcIiwgXCJtb3pcIiwgXCJ3ZWJraXRcIiwgXCJvXCJdO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl0gfHxcbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcbiAgICB9XG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZWxlbWVudCkge1xuICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xuICAgICAgICB9LCB0aW1lVG9DYWxsKTtcbiAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH07XG4gICAgaWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgdmFyIGNhbnZhcyxcbiAgICBjdXJyZW50UHJvZ3Jlc3MsXG4gICAgc2hvd2luZyxcbiAgICBwcm9ncmVzc1RpbWVySWQgPSBudWxsLFxuICAgIGZhZGVUaW1lcklkID0gbnVsbCxcbiAgICBkZWxheVRpbWVySWQgPSBudWxsLFxuICAgIGFkZEV2ZW50ID0gZnVuY3Rpb24gKGVsZW0sIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtLmFkZEV2ZW50TGlzdGVuZXIpIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICBlbHNlIGlmIChlbGVtLmF0dGFjaEV2ZW50KSBlbGVtLmF0dGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgZWxzZSBlbGVtW1wib25cIiArIHR5cGVdID0gaGFuZGxlcjtcbiAgICB9LFxuICAgIG9wdGlvbnMgPSB7XG4gICAgICBhdXRvUnVuOiB0cnVlLFxuICAgICAgYmFyVGhpY2tuZXNzOiAzLFxuICAgICAgYmFyQ29sb3JzOiB7XG4gICAgICAgIDA6IFwicmdiYSgyNiwgIDE4OCwgMTU2LCAuOSlcIixcbiAgICAgICAgXCIuMjVcIjogXCJyZ2JhKDUyLCAgMTUyLCAyMTksIC45KVwiLFxuICAgICAgICBcIi41MFwiOiBcInJnYmEoMjQxLCAxOTYsIDE1LCAgLjkpXCIsXG4gICAgICAgIFwiLjc1XCI6IFwicmdiYSgyMzAsIDEyNiwgMzQsICAuOSlcIixcbiAgICAgICAgXCIxLjBcIjogXCJyZ2JhKDIxMSwgODQsICAwLCAgIC45KVwiLFxuICAgICAgfSxcbiAgICAgIHNoYWRvd0JsdXI6IDEwLFxuICAgICAgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAgIDAsICAgMCwgICAuNilcIixcbiAgICAgIGNsYXNzTmFtZTogbnVsbCxcbiAgICB9LFxuICAgIHJlcGFpbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmJhclRoaWNrbmVzcyAqIDU7IC8vIG5lZWQgc3BhY2UgZm9yIHNoYWRvd1xuXG4gICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGN0eC5zaGFkb3dCbHVyID0gb3B0aW9ucy5zaGFkb3dCbHVyO1xuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5zaGFkb3dDb2xvcjtcblxuICAgICAgdmFyIGxpbmVHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xuICAgICAgZm9yICh2YXIgc3RvcCBpbiBvcHRpb25zLmJhckNvbG9ycylcbiAgICAgICAgbGluZUdyYWRpZW50LmFkZENvbG9yU3RvcChzdG9wLCBvcHRpb25zLmJhckNvbG9yc1tzdG9wXSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKDAsIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMik7XG4gICAgICBjdHgubGluZVRvKFxuICAgICAgICBNYXRoLmNlaWwoY3VycmVudFByb2dyZXNzICogY2FudmFzLndpZHRoKSxcbiAgICAgICAgb3B0aW9ucy5iYXJUaGlja25lc3MgLyAyXG4gICAgICApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGluZUdyYWRpZW50O1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH0sXG4gICAgY3JlYXRlQ2FudmFzID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgIHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcbiAgICAgIHN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgICAgc3R5bGUudG9wID0gc3R5bGUubGVmdCA9IHN0eWxlLnJpZ2h0ID0gc3R5bGUubWFyZ2luID0gc3R5bGUucGFkZGluZyA9IDA7XG4gICAgICBzdHlsZS56SW5kZXggPSAxMDAwMDE7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBpZiAob3B0aW9ucy5jbGFzc05hbWUpIGNhbnZhcy5jbGFzc0xpc3QuYWRkKG9wdGlvbnMuY2xhc3NOYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgXCJyZXNpemVcIiwgcmVwYWludCk7XG4gICAgfSxcbiAgICB0b3BiYXIgPSB7XG4gICAgICBjb25maWc6IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIG9wdGlvbnNba2V5XSA9IG9wdHNba2V5XTtcbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiAoZGVsYXkpIHtcbiAgICAgICAgaWYgKHNob3dpbmcpIHJldHVybjtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgaWYgKGRlbGF5VGltZXJJZCkgcmV0dXJuO1xuICAgICAgICAgIGRlbGF5VGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4gdG9wYmFyLnNob3coKSwgZGVsYXkpO1xuICAgICAgICB9IGVsc2UgIHtcbiAgICAgICAgICBzaG93aW5nID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWVySWQgIT09IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShmYWRlVGltZXJJZCk7XG4gICAgICAgICAgaWYgKCFjYW52YXMpIGNyZWF0ZUNhbnZhcygpO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICB0b3BiYXIucHJvZ3Jlc3MoMCk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1J1bikge1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICAgIHRvcGJhci5wcm9ncmVzcyhcbiAgICAgICAgICAgICAgICBcIitcIiArIDAuMDUgKiBNYXRoLnBvdygxIC0gTWF0aC5zcXJ0KGN1cnJlbnRQcm9ncmVzcyksIDIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRvID1cbiAgICAgICAgICAgICh0by5pbmRleE9mKFwiK1wiKSA+PSAwIHx8IHRvLmluZGV4T2YoXCItXCIpID49IDBcbiAgICAgICAgICAgICAgPyBjdXJyZW50UHJvZ3Jlc3NcbiAgICAgICAgICAgICAgOiAwKSArIHBhcnNlRmxvYXQodG8pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQcm9ncmVzcyA9IHRvID4gMSA/IDEgOiB0bztcbiAgICAgICAgcmVwYWludCgpO1xuICAgICAgICByZXR1cm4gY3VycmVudFByb2dyZXNzO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXJJZCk7XG4gICAgICAgIGRlbGF5VGltZXJJZCA9IG51bGw7XG4gICAgICAgIGlmICghc2hvd2luZykgcmV0dXJuO1xuICAgICAgICBzaG93aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChwcm9ncmVzc1RpbWVySWQgIT0gbnVsbCkge1xuICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShwcm9ncmVzc1RpbWVySWQpO1xuICAgICAgICAgIHByb2dyZXNzVGltZXJJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AoKSB7XG4gICAgICAgICAgaWYgKHRvcGJhci5wcm9ncmVzcyhcIisuMVwiKSA+PSAxKSB7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSAtPSAwLjA1O1xuICAgICAgICAgICAgaWYgKGNhbnZhcy5zdHlsZS5vcGFjaXR5IDw9IDAuMDUpIHtcbiAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgZmFkZVRpbWVySWQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZhZGVUaW1lcklkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0sXG4gICAgfTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRvcGJhcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdG9wYmFyO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudG9wYmFyID0gdG9wYmFyO1xuICB9XG59LmNhbGwodGhpcywgd2luZG93LCBkb2N1bWVudCkpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHN1Ym1pdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcbiAgICAgICAgdGFyZ2V0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIik7XG5cbiAgICBmb3JtLm1ldGhvZCA9IChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpID09PSBcImdldFwiKSA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgICBmb3JtLmFjdGlvbiA9IHRvO1xuICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICAvLyBJbnNlcnQgYSBidXR0b24gYW5kIGNsaWNrIGl0IGluc3RlYWQgb2YgdXNpbmcgYGZvcm0uc3VibWl0YFxuICAgIC8vIGJlY2F1c2UgdGhlIGBzdWJtaXRgIGZ1bmN0aW9uIGRvZXMgbm90IGVtaXQgYSBgc3VibWl0YCBldmVudC5cbiAgICBzdWJtaXQudHlwZSA9IFwic3VibWl0XCI7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXQpO1xuICAgIHN1Ym1pdC5jbGljaygpO1xuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG5cbiAgICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgdmFyIHBob2VuaXhMaW5rRXZlbnQgPSBuZXcgUG9seWZpbGxFdmVudCgncGhvZW5peC5saW5rLmNsaWNrJywge1xuICAgICAgICBcImJ1YmJsZXNcIjogdHJ1ZSwgXCJjYW5jZWxhYmxlXCI6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWVsZW1lbnQuZGlzcGF0Y2hFdmVudChwaG9lbml4TGlua0V2ZW50KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpIHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZWxlbWVudCwgZS5tZXRhS2V5IHx8IGUuc2hpZnRLZXkpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LCBmYWxzZSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Bob2VuaXgubGluay5jbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbmZpcm1cIik7XG4gICAgaWYobWVzc2FnZSAmJiAhd2luZG93LmNvbmZpcm0obWVzc2FnZSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbn0pKCk7XG4iLCAiLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWx1ZSkgPT4ge1xuICBpZih0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIil7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH0gZWxzZSB7XG4gICAgbGV0IGNsb3N1cmUgPSBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbHVlIH1cbiAgICByZXR1cm4gY2xvc3VyZVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IGdsb2JhbFNlbGYgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiBudWxsXG5leHBvcnQgY29uc3QgcGh4V2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG51bGxcbmV4cG9ydCBjb25zdCBnbG9iYWwgPSBnbG9iYWxTZWxmIHx8IHBoeFdpbmRvdyB8fCBnbG9iYWxcbmV4cG9ydCBjb25zdCBERUZBVUxUX1ZTTiA9IFwiMi4wLjBcIlxuZXhwb3J0IGNvbnN0IFNPQ0tFVF9TVEFURVMgPSB7Y29ubmVjdGluZzogMCwgb3BlbjogMSwgY2xvc2luZzogMiwgY2xvc2VkOiAzfVxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVElNRU9VVCA9IDEwMDAwXG5leHBvcnQgY29uc3QgV1NfQ0xPU0VfTk9STUFMID0gMTAwMFxuZXhwb3J0IGNvbnN0IENIQU5ORUxfU1RBVEVTID0ge1xuICBjbG9zZWQ6IFwiY2xvc2VkXCIsXG4gIGVycm9yZWQ6IFwiZXJyb3JlZFwiLFxuICBqb2luZWQ6IFwiam9pbmVkXCIsXG4gIGpvaW5pbmc6IFwiam9pbmluZ1wiLFxuICBsZWF2aW5nOiBcImxlYXZpbmdcIixcbn1cbmV4cG9ydCBjb25zdCBDSEFOTkVMX0VWRU5UUyA9IHtcbiAgY2xvc2U6IFwicGh4X2Nsb3NlXCIsXG4gIGVycm9yOiBcInBoeF9lcnJvclwiLFxuICBqb2luOiBcInBoeF9qb2luXCIsXG4gIHJlcGx5OiBcInBoeF9yZXBseVwiLFxuICBsZWF2ZTogXCJwaHhfbGVhdmVcIlxufVxuXG5leHBvcnQgY29uc3QgVFJBTlNQT1JUUyA9IHtcbiAgbG9uZ3BvbGw6IFwibG9uZ3BvbGxcIixcbiAgd2Vic29ja2V0OiBcIndlYnNvY2tldFwiXG59XG5leHBvcnQgY29uc3QgWEhSX1NUQVRFUyA9IHtcbiAgY29tcGxldGU6IDRcbn1cbiIsICIvKipcbiAqIEluaXRpYWxpemVzIHRoZSBQdXNoXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50LCBmb3IgZXhhbXBsZSBgXCJwaHhfam9pblwiYFxuICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWQgLSBUaGUgcGF5bG9hZCwgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiAxMjN9YFxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgLSBUaGUgcHVzaCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdXNoIHtcbiAgY29uc3RydWN0b3IoY2hhbm5lbCwgZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQpe1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnRcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkIHx8IGZ1bmN0aW9uICgpeyByZXR1cm4ge30gfVxuICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbFxuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLnJlY0hvb2tzID0gW11cbiAgICB0aGlzLnNlbnQgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gICAqL1xuICByZXNlbmQodGltZW91dCl7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMucmVzZXQoKVxuICAgIHRoaXMuc2VuZCgpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHNlbmQoKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKFwidGltZW91dFwiKSl7IHJldHVybiB9XG4gICAgdGhpcy5zdGFydFRpbWVvdXQoKVxuICAgIHRoaXMuc2VudCA9IHRydWVcbiAgICB0aGlzLmNoYW5uZWwuc29ja2V0LnB1c2goe1xuICAgICAgdG9waWM6IHRoaXMuY2hhbm5lbC50b3BpYyxcbiAgICAgIGV2ZW50OiB0aGlzLmV2ZW50LFxuICAgICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkKCksXG4gICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgam9pbl9yZWY6IHRoaXMuY2hhbm5lbC5qb2luUmVmKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gc3RhdHVzXG4gICAqIEBwYXJhbSB7Kn0gY2FsbGJhY2tcbiAgICovXG4gIHJlY2VpdmUoc3RhdHVzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5oYXNSZWNlaXZlZChzdGF0dXMpKXtcbiAgICAgIGNhbGxiYWNrKHRoaXMucmVjZWl2ZWRSZXNwLnJlc3BvbnNlKVxuICAgIH1cblxuICAgIHRoaXMucmVjSG9va3MucHVzaCh7c3RhdHVzLCBjYWxsYmFja30pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVzZXQoKXtcbiAgICB0aGlzLmNhbmNlbFJlZkV2ZW50KClcbiAgICB0aGlzLnJlZiA9IG51bGxcbiAgICB0aGlzLnJlZkV2ZW50ID0gbnVsbFxuICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbFxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1hdGNoUmVjZWl2ZSh7c3RhdHVzLCByZXNwb25zZSwgX3JlZn0pe1xuICAgIHRoaXMucmVjSG9va3MuZmlsdGVyKGggPT4gaC5zdGF0dXMgPT09IHN0YXR1cylcbiAgICAgIC5mb3JFYWNoKGggPT4gaC5jYWxsYmFjayhyZXNwb25zZSkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbmNlbFJlZkV2ZW50KCl7XG4gICAgaWYoIXRoaXMucmVmRXZlbnQpeyByZXR1cm4gfVxuICAgIHRoaXMuY2hhbm5lbC5vZmYodGhpcy5yZWZFdmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRUaW1lcilcbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhcnRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy50aW1lb3V0VGltZXIpeyB0aGlzLmNhbmNlbFRpbWVvdXQoKSB9XG4gICAgdGhpcy5yZWYgPSB0aGlzLmNoYW5uZWwuc29ja2V0Lm1ha2VSZWYoKVxuICAgIHRoaXMucmVmRXZlbnQgPSB0aGlzLmNoYW5uZWwucmVwbHlFdmVudE5hbWUodGhpcy5yZWYpXG5cbiAgICB0aGlzLmNoYW5uZWwub24odGhpcy5yZWZFdmVudCwgcGF5bG9hZCA9PiB7XG4gICAgICB0aGlzLmNhbmNlbFJlZkV2ZW50KClcbiAgICAgIHRoaXMuY2FuY2VsVGltZW91dCgpXG4gICAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IHBheWxvYWRcbiAgICAgIHRoaXMubWF0Y2hSZWNlaXZlKHBheWxvYWQpXG4gICAgfSlcblxuICAgIHRoaXMudGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJ0aW1lb3V0XCIsIHt9KVxuICAgIH0sIHRoaXMudGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFzUmVjZWl2ZWQoc3RhdHVzKXtcbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3AgJiYgdGhpcy5yZWNlaXZlZFJlc3Auc3RhdHVzID09PSBzdGF0dXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihzdGF0dXMsIHJlc3BvbnNlKXtcbiAgICB0aGlzLmNoYW5uZWwudHJpZ2dlcih0aGlzLnJlZkV2ZW50LCB7c3RhdHVzLCByZXNwb25zZX0pXG4gIH1cbn1cbiIsICIvKipcbiAqXG4gKiBDcmVhdGVzIGEgdGltZXIgdGhhdCBhY2NlcHRzIGEgYHRpbWVyQ2FsY2AgZnVuY3Rpb24gdG8gcGVyZm9ybVxuICogY2FsY3VsYXRlZCB0aW1lb3V0IHJldHJpZXMsIHN1Y2ggYXMgZXhwb25lbnRpYWwgYmFja29mZi5cbiAqXG4gKiBAZXhhbXBsZVxuICogbGV0IHJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHRoaXMuY29ubmVjdCgpLCBmdW5jdGlvbih0cmllcyl7XG4gKiAgIHJldHVybiBbMTAwMCwgNTAwMCwgMTAwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH0pXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciA1MDAwXG4gKiByZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gKiByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciAxMDAwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRpbWVyQ2FsY1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lciB7XG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCB0aW1lckNhbGMpe1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHRoaXMudGltZXJDYWxjID0gdGltZXJDYWxjXG4gICAgdGhpcy50aW1lciA9IG51bGxcbiAgICB0aGlzLnRyaWVzID0gMFxuICB9XG5cbiAgcmVzZXQoKXtcbiAgICB0aGlzLnRyaWVzID0gMFxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYW55IHByZXZpb3VzIHNjaGVkdWxlVGltZW91dCBhbmQgc2NoZWR1bGVzIGNhbGxiYWNrXG4gICAqL1xuICBzY2hlZHVsZVRpbWVvdXQoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcblxuICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZXMgPSB0aGlzLnRyaWVzICsgMVxuICAgICAgdGhpcy5jYWxsYmFjaygpXG4gICAgfSwgdGhpcy50aW1lckNhbGModGhpcy50cmllcyArIDEpKVxuICB9XG59XG4iLCAiaW1wb3J0IHtjbG9zdXJlfSBmcm9tIFwiLi91dGlsc1wiXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UUyxcbiAgQ0hBTk5FTF9TVEFURVMsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBQdXNoIGZyb20gXCIuL3B1c2hcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBwYXJhbXNcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhbm5lbCB7XG4gIGNvbnN0cnVjdG9yKHRvcGljLCBwYXJhbXMsIHNvY2tldCl7XG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgIHRoaXMudG9waWMgPSB0b3BpY1xuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShwYXJhbXMgfHwge30pXG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXRcbiAgICB0aGlzLmJpbmRpbmdzID0gW11cbiAgICB0aGlzLmJpbmRpbmdSZWYgPSAwXG4gICAgdGhpcy50aW1lb3V0ID0gdGhpcy5zb2NrZXQudGltZW91dFxuICAgIHRoaXMuam9pbmVkT25jZSA9IGZhbHNlXG4gICAgdGhpcy5qb2luUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmpvaW4sIHRoaXMucGFyYW1zLCB0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy5wdXNoQnVmZmVyID0gW11cbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcyA9IFtdXG5cbiAgICB0aGlzLnJlam9pblRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pbigpIH1cbiAgICB9LCB0aGlzLnNvY2tldC5yZWpvaW5BZnRlck1zKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzLnB1c2godGhpcy5zb2NrZXQub25FcnJvcigoKSA9PiB0aGlzLnJlam9pblRpbWVyLnJlc2V0KCkpKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzLnB1c2godGhpcy5zb2NrZXQub25PcGVuKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5pc0Vycm9yZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0pXG4gICAgKVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcIm9rXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luZWRcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyLmZvckVhY2gocHVzaEV2ZW50ID0+IHB1c2hFdmVudC5zZW5kKCkpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMub25DbG9zZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBjbG9zZSAke3RoaXMudG9waWN9ICR7dGhpcy5qb2luUmVmKCl9YClcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWRcbiAgICAgIHRoaXMuc29ja2V0LnJlbW92ZSh0aGlzKVxuICAgIH0pXG4gICAgdGhpcy5vbkVycm9yKHJlYXNvbiA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgZXJyb3IgJHt0aGlzLnRvcGljfWAsIHJlYXNvbilcbiAgICAgIGlmKHRoaXMuaXNKb2luaW5nKCkpeyB0aGlzLmpvaW5QdXNoLnJlc2V0KCkgfVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYHRpbWVvdXQgJHt0aGlzLnRvcGljfSAoJHt0aGlzLmpvaW5SZWYoKX0pYCwgdGhpcy5qb2luUHVzaC50aW1lb3V0KVxuICAgICAgbGV0IGxlYXZlUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmxlYXZlLCBjbG9zdXJlKHt9KSwgdGhpcy50aW1lb3V0KVxuICAgICAgbGVhdmVQdXNoLnNlbmQoKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmVycm9yZWRcbiAgICAgIHRoaXMuam9pblB1c2gucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5yZXBseSwgKHBheWxvYWQsIHJlZikgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKHRoaXMucmVwbHlFdmVudE5hbWUocmVmKSwgcGF5bG9hZClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEpvaW4gdGhlIGNoYW5uZWxcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSB0aW1lb3V0XG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmpvaW5lZE9uY2Upe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJpZWQgdG8gam9pbiBtdWx0aXBsZSB0aW1lcy4gJ2pvaW4nIGNhbiBvbmx5IGJlIGNhbGxlZCBhIHNpbmdsZSB0aW1lIHBlciBjaGFubmVsIGluc3RhbmNlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICAgIHRoaXMuam9pbmVkT25jZSA9IHRydWVcbiAgICAgIHRoaXMucmVqb2luKClcbiAgICAgIHJldHVybiB0aGlzLmpvaW5QdXNoXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGNsb3NlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlKGNhbGxiYWNrKXtcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLmNsb3NlLCBjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIGludG8gY2hhbm5lbCBlcnJvcnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2spe1xuICAgIHJldHVybiB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLmVycm9yLCByZWFzb24gPT4gY2FsbGJhY2socmVhc29uKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIG9uIGNoYW5uZWwgZXZlbnRzXG4gICAqXG4gICAqIFN1YnNjcmlwdGlvbiByZXR1cm5zIGEgcmVmIGNvdW50ZXIsIHdoaWNoIGNhbiBiZSB1c2VkIGxhdGVyIHRvXG4gICAqIHVuc3Vic2NyaWJlIHRoZSBleGFjdCBldmVudCBsaXN0ZW5lclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCByZWYxID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX3N0dWZmKVxuICAgKiBjb25zdCByZWYyID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX290aGVyX3N0dWZmKVxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIsIHJlZjEpXG4gICAqIC8vIFNpbmNlIHVuc3Vic2NyaXB0aW9uLCBkb19zdHVmZiB3b24ndCBmaXJlLFxuICAgKiAvLyB3aGlsZSBkb19vdGhlcl9zdHVmZiB3aWxsIGtlZXAgZmlyaW5nIG9uIHRoZSBcImV2ZW50XCJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9uKGV2ZW50LCBjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMuYmluZGluZ1JlZisrXG4gICAgdGhpcy5iaW5kaW5ncy5wdXNoKHtldmVudCwgcmVmLCBjYWxsYmFja30pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlcyBvZmYgb2YgY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogVXNlIHRoZSByZWYgcmV0dXJuZWQgZnJvbSBhIGNoYW5uZWwub24oKSB0byB1bnN1YnNjcmliZSBvbmVcbiAgICogaGFuZGxlciwgb3IgcGFzcyBub3RoaW5nIGZvciB0aGUgcmVmIHRvIHVuc3Vic2NyaWJlIGFsbFxuICAgKiBoYW5kbGVycyBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBVbnN1YnNjcmliZSB0aGUgZG9fc3R1ZmYgaGFuZGxlclxuICAgKiBjb25zdCByZWYxID0gY2hhbm5lbC5vbihcImV2ZW50XCIsIGRvX3N0dWZmKVxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIsIHJlZjEpXG4gICAqXG4gICAqIC8vIFVuc3Vic2NyaWJlIGFsbCBoYW5kbGVycyBmcm9tIGV2ZW50XG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIilcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcmVmXG4gICAqL1xuICBvZmYoZXZlbnQsIHJlZil7XG4gICAgdGhpcy5iaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuZmlsdGVyKChiaW5kKSA9PiB7XG4gICAgICByZXR1cm4gIShiaW5kLmV2ZW50ID09PSBldmVudCAmJiAodHlwZW9mIHJlZiA9PT0gXCJ1bmRlZmluZWRcIiB8fCByZWYgPT09IGJpbmQucmVmKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5QdXNoKCl7IHJldHVybiB0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuaXNKb2luZWQoKSB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgbWVzc2FnZSBgZXZlbnRgIHRvIHBob2VuaXggd2l0aCB0aGUgcGF5bG9hZCBgcGF5bG9hZGAuXG4gICAqIFBob2VuaXggcmVjZWl2ZXMgdGhpcyBpbiB0aGUgYGhhbmRsZV9pbihldmVudCwgcGF5bG9hZCwgc29ja2V0KWBcbiAgICogZnVuY3Rpb24uIGlmIHBob2VuaXggcmVwbGllcyBvciBpdCB0aW1lcyBvdXQgKGRlZmF1bHQgMTAwMDBtcyksXG4gICAqIHRoZW4gb3B0aW9uYWxseSB0aGUgcmVwbHkgY2FuIGJlIHJlY2VpdmVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLnB1c2goXCJldmVudFwiKVxuICAgKiAgIC5yZWNlaXZlKFwib2tcIiwgcGF5bG9hZCA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggcmVwbGllZDpcIiwgcGF5bG9hZCkpXG4gICAqICAgLnJlY2VpdmUoXCJlcnJvclwiLCBlcnIgPT4gY29uc29sZS5sb2coXCJwaG9lbml4IGVycm9yZWRcIiwgZXJyKSlcbiAgICogICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gY29uc29sZS5sb2coXCJ0aW1lZCBvdXQgcHVzaGluZ1wiKSlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZW91dF1cbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBwdXNoKGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBwYXlsb2FkID0gcGF5bG9hZCB8fCB7fVxuICAgIGlmKCF0aGlzLmpvaW5lZE9uY2Upe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmllZCB0byBwdXNoICcke2V2ZW50fScgdG8gJyR7dGhpcy50b3BpY30nIGJlZm9yZSBqb2luaW5nLiBVc2UgY2hhbm5lbC5qb2luKCkgYmVmb3JlIHB1c2hpbmcgZXZlbnRzYClcbiAgICB9XG4gICAgbGV0IHB1c2hFdmVudCA9IG5ldyBQdXNoKHRoaXMsIGV2ZW50LCBmdW5jdGlvbiAoKXsgcmV0dXJuIHBheWxvYWQgfSwgdGltZW91dClcbiAgICBpZih0aGlzLmNhblB1c2goKSl7XG4gICAgICBwdXNoRXZlbnQuc2VuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2hFdmVudC5zdGFydFRpbWVvdXQoKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyLnB1c2gocHVzaEV2ZW50KVxuICAgIH1cblxuICAgIHJldHVybiBwdXNoRXZlbnRcbiAgfVxuXG4gIC8qKiBMZWF2ZXMgdGhlIGNoYW5uZWxcbiAgICpcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gc2VydmVyIGV2ZW50cywgYW5kXG4gICAqIGluc3RydWN0cyBjaGFubmVsIHRvIHRlcm1pbmF0ZSBvbiBzZXJ2ZXJcbiAgICpcbiAgICogVHJpZ2dlcnMgb25DbG9zZSgpIGhvb2tzXG4gICAqXG4gICAqIFRvIHJlY2VpdmUgbGVhdmUgYWNrbm93bGVkZ2VtZW50cywgdXNlIHRoZSBgcmVjZWl2ZWBcbiAgICogaG9vayB0byBiaW5kIHRvIHRoZSBzZXJ2ZXIgYWNrLCBpZTpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2hhbm5lbC5sZWF2ZSgpLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBhbGVydChcImxlZnQhXCIpIClcbiAgICpcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSB0aW1lb3V0XG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgbGVhdmUodGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgdGhpcy5qb2luUHVzaC5jYW5jZWxUaW1lb3V0KClcblxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nXG4gICAgbGV0IG9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgbGVhdmUgJHt0aGlzLnRvcGljfWApXG4gICAgICB0aGlzLnRyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIFwibGVhdmVcIilcbiAgICB9XG4gICAgbGV0IGxlYXZlUHVzaCA9IG5ldyBQdXNoKHRoaXMsIENIQU5ORUxfRVZFTlRTLmxlYXZlLCBjbG9zdXJlKHt9KSwgdGltZW91dClcbiAgICBsZWF2ZVB1c2gucmVjZWl2ZShcIm9rXCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBvbkNsb3NlKCkpXG4gICAgbGVhdmVQdXNoLnNlbmQoKVxuICAgIGlmKCF0aGlzLmNhblB1c2goKSl7IGxlYXZlUHVzaC50cmlnZ2VyKFwib2tcIiwge30pIH1cblxuICAgIHJldHVybiBsZWF2ZVB1c2hcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkYWJsZSBtZXNzYWdlIGhvb2tcbiAgICpcbiAgICogUmVjZWl2ZXMgYWxsIGV2ZW50cyBmb3Igc3BlY2lhbGl6ZWQgbWVzc2FnZSBoYW5kbGluZ1xuICAgKiBiZWZvcmUgZGlzcGF0Y2hpbmcgdG8gdGhlIGNoYW5uZWwgY2FsbGJhY2tzLlxuICAgKlxuICAgKiBNdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIG9uTWVzc2FnZShfZXZlbnQsIHBheWxvYWQsIF9yZWYpeyByZXR1cm4gcGF5bG9hZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc01lbWJlcih0b3BpYywgZXZlbnQsIHBheWxvYWQsIGpvaW5SZWYpe1xuICAgIGlmKHRoaXMudG9waWMgIT09IHRvcGljKXsgcmV0dXJuIGZhbHNlIH1cblxuICAgIGlmKGpvaW5SZWYgJiYgam9pblJlZiAhPT0gdGhpcy5qb2luUmVmKCkpe1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgXCJkcm9wcGluZyBvdXRkYXRlZCBtZXNzYWdlXCIsIHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIGpvaW5SZWZ9KVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBqb2luUmVmKCl7IHJldHVybiB0aGlzLmpvaW5QdXNoLnJlZiB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZWpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgaWYodGhpcy5pc0xlYXZpbmcoKSl7IHJldHVybiB9XG4gICAgdGhpcy5zb2NrZXQubGVhdmVPcGVuVG9waWModGhpcy50b3BpYylcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuam9pbmluZ1xuICAgIHRoaXMuam9pblB1c2gucmVzZW5kKHRpbWVvdXQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pblJlZil7XG4gICAgbGV0IGhhbmRsZWRQYXlsb2FkID0gdGhpcy5vbk1lc3NhZ2UoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pblJlZilcbiAgICBpZihwYXlsb2FkICYmICFoYW5kbGVkUGF5bG9hZCl7IHRocm93IG5ldyBFcnJvcihcImNoYW5uZWwgb25NZXNzYWdlIGNhbGxiYWNrcyBtdXN0IHJldHVybiB0aGUgcGF5bG9hZCwgbW9kaWZpZWQgb3IgdW5tb2RpZmllZFwiKSB9XG5cbiAgICBsZXQgZXZlbnRCaW5kaW5ncyA9IHRoaXMuYmluZGluZ3MuZmlsdGVyKGJpbmQgPT4gYmluZC5ldmVudCA9PT0gZXZlbnQpXG5cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZXZlbnRCaW5kaW5ncy5sZW5ndGg7IGkrKyl7XG4gICAgICBsZXQgYmluZCA9IGV2ZW50QmluZGluZ3NbaV1cbiAgICAgIGJpbmQuY2FsbGJhY2soaGFuZGxlZFBheWxvYWQsIHJlZiwgam9pblJlZiB8fCB0aGlzLmpvaW5SZWYoKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlcGx5RXZlbnROYW1lKHJlZil7IHJldHVybiBgY2hhbl9yZXBseV8ke3JlZn1gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzQ2xvc2VkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5jbG9zZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNFcnJvcmVkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzSm9pbmVkKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5qb2luZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luaW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTGVhdmluZygpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMubGVhdmluZyB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZ2xvYmFsLFxuICBYSFJfU1RBVEVTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFqYXgge1xuXG4gIHN0YXRpYyByZXF1ZXN0KG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgaWYoZ2xvYmFsLlhEb21haW5SZXF1ZXN0KXtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhEb21haW5SZXF1ZXN0KCkgLy8gSUU4LCBJRTlcbiAgICAgIHJldHVybiB0aGlzLnhkb21haW5SZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKSAvLyBJRTcrLCBGaXJlZm94LCBDaHJvbWUsIE9wZXJhLCBTYWZhcmlcbiAgICAgIHJldHVybiB0aGlzLnhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHhkb21haW5SZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLm9wZW4obWV0aG9kLCBlbmRQb2ludClcbiAgICByZXEub25sb2FkID0gKCkgPT4ge1xuICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIC8vIFdvcmsgYXJvdW5kIGJ1ZyBpbiBJRTkgdGhhdCByZXF1aXJlcyBhbiBhdHRhY2hlZCBvbnByb2dyZXNzIGhhbmRsZXJcbiAgICByZXEub25wcm9ncmVzcyA9ICgpID0+IHsgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgICByZXR1cm4gcmVxXG4gIH1cblxuICBzdGF0aWMgeGhyUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgcmVxLm9wZW4obWV0aG9kLCBlbmRQb2ludCwgdHJ1ZSlcbiAgICByZXEudGltZW91dCA9IHRpbWVvdXRcbiAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBhY2NlcHQpXG4gICAgcmVxLm9uZXJyb3IgPSAoKSA9PiBjYWxsYmFjayAmJiBjYWxsYmFjayhudWxsKVxuICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZihyZXEucmVhZHlTdGF0ZSA9PT0gWEhSX1NUQVRFUy5jb21wbGV0ZSAmJiBjYWxsYmFjayl7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgICAgfVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gICAgcmV0dXJuIHJlcVxuICB9XG5cbiAgc3RhdGljIHBhcnNlSlNPTihyZXNwKXtcbiAgICBpZighcmVzcCB8fCByZXNwID09PSBcIlwiKXsgcmV0dXJuIG51bGwgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3ApXG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIHBhcnNlIEpTT04gcmVzcG9uc2VcIiwgcmVzcClcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZShvYmosIHBhcmVudEtleSl7XG4gICAgbGV0IHF1ZXJ5U3RyID0gW11cbiAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgaWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpeyBjb250aW51ZSB9XG4gICAgICBsZXQgcGFyYW1LZXkgPSBwYXJlbnRLZXkgPyBgJHtwYXJlbnRLZXl9WyR7a2V5fV1gIDoga2V5XG4gICAgICBsZXQgcGFyYW1WYWwgPSBvYmpba2V5XVxuICAgICAgaWYodHlwZW9mIHBhcmFtVmFsID09PSBcIm9iamVjdFwiKXtcbiAgICAgICAgcXVlcnlTdHIucHVzaCh0aGlzLnNlcmlhbGl6ZShwYXJhbVZhbCwgcGFyYW1LZXkpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVlcnlTdHIucHVzaChlbmNvZGVVUklDb21wb25lbnQocGFyYW1LZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1WYWwpKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnlTdHIuam9pbihcIiZcIilcbiAgfVxuXG4gIHN0YXRpYyBhcHBlbmRQYXJhbXModXJsLCBwYXJhbXMpe1xuICAgIGlmKE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID09PSAwKXsgcmV0dXJuIHVybCB9XG5cbiAgICBsZXQgcHJlZml4ID0gdXJsLm1hdGNoKC9cXD8vKSA/IFwiJlwiIDogXCI/XCJcbiAgICByZXR1cm4gYCR7dXJsfSR7cHJlZml4fSR7dGhpcy5zZXJpYWxpemUocGFyYW1zKX1gXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBTT0NLRVRfU1RBVEVTLFxuICBUUkFOU1BPUlRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBBamF4IGZyb20gXCIuL2FqYXhcIlxuXG5sZXQgYXJyYXlCdWZmZXJUb0Jhc2U2NCA9IChidWZmZXIpID0+IHtcbiAgbGV0IGJpbmFyeSA9IFwiXCJcbiAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuICBsZXQgbGVuID0gYnl0ZXMuYnl0ZUxlbmd0aFxuICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspeyBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSkgfVxuICByZXR1cm4gYnRvYShiaW5hcnkpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvbmdQb2xsIHtcblxuICBjb25zdHJ1Y3RvcihlbmRQb2ludCl7XG4gICAgdGhpcy5lbmRQb2ludCA9IG51bGxcbiAgICB0aGlzLnRva2VuID0gbnVsbFxuICAgIHRoaXMuc2tpcEhlYXJ0YmVhdCA9IHRydWVcbiAgICB0aGlzLnJlcXMgPSBuZXcgU2V0KClcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25tZXNzYWdlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLnBvbGxFbmRwb2ludCA9IHRoaXMubm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nXG4gICAgdGhpcy5wb2xsKClcbiAgfVxuXG4gIG5vcm1hbGl6ZUVuZHBvaW50KGVuZFBvaW50KXtcbiAgICByZXR1cm4gKGVuZFBvaW50XG4gICAgICAucmVwbGFjZShcIndzOi8vXCIsIFwiaHR0cDovL1wiKVxuICAgICAgLnJlcGxhY2UoXCJ3c3M6Ly9cIiwgXCJodHRwczovL1wiKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChcIiguKilcXC9cIiArIFRSQU5TUE9SVFMud2Vic29ja2V0KSwgXCIkMS9cIiArIFRSQU5TUE9SVFMubG9uZ3BvbGwpKVxuICB9XG5cbiAgZW5kcG9pbnRVUkwoKXtcbiAgICByZXR1cm4gQWpheC5hcHBlbmRQYXJhbXModGhpcy5wb2xsRW5kcG9pbnQsIHt0b2tlbjogdGhpcy50b2tlbn0pXG4gIH1cblxuICBjbG9zZUFuZFJldHJ5KGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIHRoaXMuY2xvc2UoY29kZSwgcmVhc29uLCB3YXNDbGVhbilcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgfVxuXG4gIG9udGltZW91dCgpe1xuICAgIHRoaXMub25lcnJvcihcInRpbWVvdXRcIilcbiAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAwNSwgXCJ0aW1lb3V0XCIsIGZhbHNlKVxuICB9XG5cbiAgaXNBY3RpdmUoKXsgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5vcGVuIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nIH1cblxuICBwb2xsKCl7XG4gICAgdGhpcy5hamF4KFwiR0VUXCIsIFwiYXBwbGljYXRpb24vanNvblwiLCBudWxsLCAoKSA9PiB0aGlzLm9udGltZW91dCgpLCByZXNwID0+IHtcbiAgICAgIGlmKHJlc3Ape1xuICAgICAgICB2YXIge3N0YXR1cywgdG9rZW4sIG1lc3NhZ2VzfSA9IHJlc3BcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaChzdGF0dXMpe1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAvLyBUYXNrcyBhcmUgd2hhdCB0aGluZ3MgbGlrZSBldmVudCBoYW5kbGVycywgc2V0VGltZW91dCBjYWxsYmFja3MsXG4gICAgICAgICAgICAvLyBwcm9taXNlIHJlc29sdmVzIGFuZCBtb3JlIGFyZSBydW4gd2l0aGluLlxuICAgICAgICAgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZiB0YXNrcyxcbiAgICAgICAgICAgIC8vIG1pY3JvdGFza3MgYW5kIG1hY3JvdGFza3MuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFyZSBtYWlubHkgdXNlZCBmb3IgUHJvbWlzZXMsIHdoaWxlIG1hY3JvdGFza3MgYXJlXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFsd2F5cyBoYXZlIHByaW9yaXR5IG92ZXIgbWFjcm90YXNrcy4gSWYgdGhlIEpTIGVuZ2luZVxuICAgICAgICAgICAgLy8gaXMgbG9va2luZyBmb3IgYSB0YXNrIHRvIHJ1biwgaXQgd2lsbCBhbHdheXMgdHJ5IHRvIGVtcHR5IHRoZVxuICAgICAgICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJ1biBhbnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gbWFjcm90YXNrIHF1ZXVlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCwgbWVzc2FnZXMgYWx3YXlzIGFycml2ZSBpbiB0aGVpciBvd25cbiAgICAgICAgICAgIC8vIGV2ZW50LiBUaGlzIG1lYW5zIHRoYXQgaWYgYW55IHByb21pc2VzIGFyZSByZXNvbHZlZCBmcm9tIHdpdGhpbixcbiAgICAgICAgICAgIC8vIHRoZWlyIGNhbGxiYWNrcyB3aWxsIGFsd2F5cyBmaW5pc2ggZXhlY3V0aW9uIGJ5IHRoZSB0aW1lIHRoZVxuICAgICAgICAgICAgLy8gbmV4dCBtZXNzYWdlIGV2ZW50IGhhbmRsZXIgaXMgcnVuLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVtdWxhdGUgdGhpcyBiZWhhdmlvdXIsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGVhY2hcbiAgICAgICAgICAgIC8vIG9ubWVzc2FnZSBoYW5kbGVyIGlzIHJ1biB3aXRoaW4gaXRzIG93biBtYWNyb3Rhc2suXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25tZXNzYWdlKHtkYXRhOiBtc2d9KSwgMClcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQxMDpcbiAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLm9wZW5cbiAgICAgICAgICB0aGlzLm9ub3Blbih7fSlcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDAzOlxuICAgICAgICAgIHRoaXMub25lcnJvcig0MDMpXG4gICAgICAgICAgdGhpcy5jbG9zZSgxMDA4LCBcImZvcmJpZGRlblwiLCBmYWxzZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgIHRoaXMub25lcnJvcig1MDApXG4gICAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIDUwMClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYHVuaGFuZGxlZCBwb2xsIHN0YXR1cyAke3N0YXR1c31gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyB3ZSBjb2xsZWN0IGFsbCBwdXNoZXMgd2l0aGluIHRoZSBjdXJyZW50IGV2ZW50IGxvb3AgYnlcbiAgLy8gc2V0VGltZW91dCAwLCB3aGljaCBvcHRpbWl6ZXMgYmFjay10by1iYWNrIHByb2NlZHVyYWxcbiAgLy8gcHVzaGVzIGFnYWluc3QgYW4gZW1wdHkgYnVmZmVyXG5cbiAgc2VuZChib2R5KXtcbiAgICBpZih0eXBlb2YoYm9keSkgIT09IFwic3RyaW5nXCIpeyBib2R5ID0gYXJyYXlCdWZmZXJUb0Jhc2U2NChib2R5KSB9XG4gICAgaWYodGhpcy5jdXJyZW50QmF0Y2gpe1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2gucHVzaChib2R5KVxuICAgIH0gZWxzZSBpZih0aGlzLmF3YWl0aW5nQmF0Y2hBY2spe1xuICAgICAgdGhpcy5iYXRjaEJ1ZmZlci5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gW2JvZHldXG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuY3VycmVudEJhdGNoKVxuICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IG51bGxcbiAgICAgIH0sIDApXG4gICAgfVxuICB9XG5cbiAgYmF0Y2hTZW5kKG1lc3NhZ2VzKXtcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSB0cnVlXG4gICAgdGhpcy5hamF4KFwiUE9TVFwiLCBcImFwcGxpY2F0aW9uL3gtbmRqc29uXCIsIG1lc3NhZ2VzLmpvaW4oXCJcXG5cIiksICgpID0+IHRoaXMub25lcnJvcihcInRpbWVvdXRcIiksIHJlc3AgPT4ge1xuICAgICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gZmFsc2VcbiAgICAgIGlmKCFyZXNwIHx8IHJlc3Auc3RhdHVzICE9PSAyMDApe1xuICAgICAgICB0aGlzLm9uZXJyb3IocmVzcCAmJiByZXNwLnN0YXR1cylcbiAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmKHRoaXMuYmF0Y2hCdWZmZXIubGVuZ3RoID4gMCl7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuYmF0Y2hCdWZmZXIpXG4gICAgICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKXtcbiAgICBmb3IobGV0IHJlcSBvZiB0aGlzLnJlcXMpeyByZXEuYWJvcnQoKSB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jbG9zZWRcbiAgICBsZXQgb3B0cyA9IE9iamVjdC5hc3NpZ24oe2NvZGU6IDEwMDAsIHJlYXNvbjogdW5kZWZpbmVkLCB3YXNDbGVhbjogdHJ1ZX0sIHtjb2RlLCByZWFzb24sIHdhc0NsZWFufSlcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICBjbGVhclRpbWVvdXQodGhpcy5jdXJyZW50QmF0Y2hUaW1lcilcbiAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gbnVsbFxuICAgIGlmKHR5cGVvZihDbG9zZUV2ZW50KSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICB0aGlzLm9uY2xvc2UobmV3IENsb3NlRXZlbnQoXCJjbG9zZVwiLCBvcHRzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbmNsb3NlKG9wdHMpXG4gICAgfVxuICB9XG5cbiAgYWpheChtZXRob2QsIGNvbnRlbnRUeXBlLCBib2R5LCBvbkNhbGxlclRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVxXG4gICAgbGV0IG9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVxcy5kZWxldGUocmVxKVxuICAgICAgb25DYWxsZXJUaW1lb3V0KClcbiAgICB9XG4gICAgcmVxID0gQWpheC5yZXF1ZXN0KG1ldGhvZCwgdGhpcy5lbmRwb2ludFVSTCgpLCBjb250ZW50VHlwZSwgYm9keSwgdGhpcy50aW1lb3V0LCBvbnRpbWVvdXQsIHJlc3AgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBpZih0aGlzLmlzQWN0aXZlKCkpeyBjYWxsYmFjayhyZXNwKSB9XG4gICAgfSlcbiAgICB0aGlzLnJlcXMuYWRkKHJlcSlcbiAgfVxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFByZXNlbmNlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyxcbiAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiBcInN0YXRlXCIsIGRpZmY6IFwiZGlmZlwifX1gXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXNlbmNlIHtcblxuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzID0ge30pe1xuICAgIGxldCBldmVudHMgPSBvcHRzLmV2ZW50cyB8fCB7c3RhdGU6IFwicHJlc2VuY2Vfc3RhdGVcIiwgZGlmZjogXCJwcmVzZW5jZV9kaWZmXCJ9XG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmpvaW5SZWYgPSBudWxsXG4gICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICBvbkpvaW46IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvblN5bmM6IGZ1bmN0aW9uICgpeyB9XG4gICAgfVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5zdGF0ZSwgbmV3U3RhdGUgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpXG5cbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZGlmZiA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgICAgb25TeW5jKClcbiAgICB9KVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5kaWZmLCBkaWZmID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgaWYodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSl7XG4gICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICAgIG9uU3luYygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbihjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrIH1cblxuICBvbkxlYXZlKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrIH1cblxuICBvblN5bmMoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vblN5bmMgPSBjYWxsYmFjayB9XG5cbiAgbGlzdChieSl7IHJldHVybiBQcmVzZW5jZS5saXN0KHRoaXMuc3RhdGUsIGJ5KSB9XG5cbiAgaW5QZW5kaW5nU3luY1N0YXRlKCl7XG4gICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgKHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8vIGxvd2VyLWxldmVsIHB1YmxpYyBzdGF0aWMgQVBJXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlclxuICAgKiB3aXRoIHRoZSBjbGllbnQncyBzdGF0ZS4gQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW5cbiAgICogYmUgcHJvdmlkZWQgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNsb25lKGN1cnJlbnRTdGF0ZSlcbiAgICBsZXQgam9pbnMgPSB7fVxuICAgIGxldCBsZWF2ZXMgPSB7fVxuXG4gICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICBpZighbmV3U3RhdGVba2V5XSl7XG4gICAgICAgIGxlYXZlc1trZXldID0gcHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMubWFwKG5ld1N0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBuZXdSZWZzID0gbmV3UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyUmVmcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBqb2luZWRNZXRhcyA9IG5ld1ByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGN1clJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgbGV0IGxlZnRNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBuZXdSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGlmKGpvaW5lZE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgICAgIGpvaW5zW2tleV0ubWV0YXMgPSBqb2luZWRNZXRhc1xuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZWF2ZXNba2V5XSA9IHRoaXMuY2xvbmUoY3VycmVudFByZXNlbmNlKVxuICAgICAgICAgIGxlYXZlc1trZXldLm1ldGFzID0gbGVmdE1ldGFzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHtqb2luczogam9pbnMsIGxlYXZlczogbGVhdmVzfSwgb25Kb2luLCBvbkxlYXZlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmVcbiAgICogZXZlbnRzIGZyb20gdGhlIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmBcbiAgICogYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXJcbiAgICogam9pbmluZyBvciBsZWF2aW5nIGZyb20gYSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQge2pvaW5zLCBsZWF2ZXN9ID0gdGhpcy5jbG9uZShkaWZmKVxuICAgIGlmKCFvbkpvaW4peyBvbkpvaW4gPSBmdW5jdGlvbiAoKXsgfSB9XG4gICAgaWYoIW9uTGVhdmUpeyBvbkxlYXZlID0gZnVuY3Rpb24gKCl7IH0gfVxuXG4gICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmUobmV3UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgam9pbmVkUmVmcyA9IHN0YXRlW2tleV0ubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyTWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gam9pbmVkUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBzdGF0ZVtrZXldLm1ldGFzLnVuc2hpZnQoLi4uY3VyTWV0YXMpXG4gICAgICB9XG4gICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2UsIG5ld1ByZXNlbmNlKVxuICAgIH0pXG4gICAgdGhpcy5tYXAobGVhdmVzLCAoa2V5LCBsZWZ0UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZighY3VycmVudFByZXNlbmNlKXsgcmV0dXJuIH1cbiAgICAgIGxldCByZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgY3VycmVudFByZXNlbmNlLm1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnNUb1JlbW92ZS5pbmRleE9mKHAucGh4X3JlZikgPCAwXG4gICAgICB9KVxuICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZSwgbGVmdFByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlLm1ldGFzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcmVzZW5jZXMsIHdpdGggc2VsZWN0ZWQgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZW5jZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hvb3NlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgbGlzdChwcmVzZW5jZXMsIGNob29zZXIpe1xuICAgIGlmKCFjaG9vc2VyKXsgY2hvb3NlciA9IGZ1bmN0aW9uIChrZXksIHByZXMpeyByZXR1cm4gcHJlcyB9IH1cblxuICAgIHJldHVybiB0aGlzLm1hcChwcmVzZW5jZXMsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICByZXR1cm4gY2hvb3NlcihrZXksIHByZXNlbmNlKVxuICAgIH0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgc3RhdGljIG1hcChvYmosIGZ1bmMpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcChrZXkgPT4gZnVuYyhrZXksIG9ialtrZXldKSlcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShvYmopeyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG59XG4iLCAiLyogVGhlIGRlZmF1bHQgc2VyaWFsaXplciBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIG1lc3NhZ2VzICovXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEhFQURFUl9MRU5HVEg6IDEsXG4gIE1FVEFfTEVOR1RIOiA0LFxuICBLSU5EUzoge3B1c2g6IDAsIHJlcGx5OiAxLCBicm9hZGNhc3Q6IDJ9LFxuXG4gIGVuY29kZShtc2csIGNhbGxiYWNrKXtcbiAgICBpZihtc2cucGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RW5jb2RlKG1zZykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkID0gW21zZy5qb2luX3JlZiwgbXNnLnJlZiwgbXNnLnRvcGljLCBtc2cuZXZlbnQsIG1zZy5wYXlsb2FkXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spe1xuICAgIGlmKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeURlY29kZShyYXdQYXlsb2FkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWRdID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWR9KVxuICAgIH1cbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgYmluYXJ5RW5jb2RlKG1lc3NhZ2Upe1xuICAgIGxldCB7am9pbl9yZWYsIHJlZiwgZXZlbnQsIHRvcGljLCBwYXlsb2FkfSA9IG1lc3NhZ2VcbiAgICBsZXQgbWV0YUxlbmd0aCA9IHRoaXMuTUVUQV9MRU5HVEggKyBqb2luX3JlZi5sZW5ndGggKyByZWYubGVuZ3RoICsgdG9waWMubGVuZ3RoICsgZXZlbnQubGVuZ3RoXG4gICAgbGV0IGhlYWRlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLkhFQURFUl9MRU5HVEggKyBtZXRhTGVuZ3RoKVxuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGhlYWRlcilcbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdGhpcy5LSU5EUy5wdXNoKSAvLyBraW5kXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgam9pbl9yZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHJlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdG9waWMubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGV2ZW50Lmxlbmd0aClcbiAgICBBcnJheS5mcm9tKGpvaW5fcmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShyZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHRvcGljLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShldmVudCwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuXG4gICAgdmFyIGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGggKyBwYXlsb2FkLmJ5dGVMZW5ndGgpXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlciksIDApXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KHBheWxvYWQpLCBoZWFkZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiBjb21iaW5lZC5idWZmZXJcbiAgfSxcblxuICBiaW5hcnlEZWNvZGUoYnVmZmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgbGV0IGtpbmQgPSB2aWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5wdXNoOiByZXR1cm4gdGhpcy5kZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5yZXBseTogcmV0dXJuIHRoaXMuZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLmJyb2FkY2FzdDogcmV0dXJuIHRoaXMuZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEggLSAxIC8vIHB1c2hlcyBoYXZlIG5vIHJlZlxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfSxcblxuICBkZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgcmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDQpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEhcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCByZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyByZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyByZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgbGV0IHBheWxvYWQgPSB7c3RhdHVzOiBldmVudCwgcmVzcG9uc2U6IGRhdGF9XG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiByZWYsIHRvcGljOiB0b3BpYywgZXZlbnQ6IENIQU5ORUxfRVZFTlRTLnJlcGx5LCBwYXlsb2FkOiBwYXlsb2FkfVxuICB9LFxuXG4gIGRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMlxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIHtqb2luX3JlZjogbnVsbCwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgcGh4V2luZG93LFxuICBDSEFOTkVMX0VWRU5UUyxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX1ZTTixcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUUyxcbiAgV1NfQ0xPU0VfTk9STUFMXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb3N1cmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcbmltcG9ydCBDaGFubmVsIGZyb20gXCIuL2NoYW5uZWxcIlxuaW1wb3J0IExvbmdQb2xsIGZyb20gXCIuL2xvbmdwb2xsXCJcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gXCIuL3NlcmlhbGl6ZXJcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQgKlxuICpcbiAqIEZvciBJRTggc3VwcG9ydCB1c2UgYW4gRVM1LXNoaW0gKGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIndzczovL2V4YW1wbGUuY29tXCJgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL3NvY2tldFwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy50cmFuc3BvcnRdIC0gVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldCBvciBQaG9lbml4LkxvbmdQb2xsLlxuICpcbiAqIERlZmF1bHRzIHRvIFdlYlNvY2tldCB3aXRoIGF1dG9tYXRpYyBMb25nUG9sbCBmYWxsYmFjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmVuY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZW5jb2RlIG91dGdvaW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT04gZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5kZWNvZGVdIC0gVGhlIGZ1bmN0aW9uIHRvIGRlY29kZSBpbmNvbWluZyBtZXNzYWdlcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBKU09OOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIChwYXlsb2FkLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soSlNPTi5wYXJzZShwYXlsb2FkKSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lb3V0XSAtIFRoZSBkZWZhdWx0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgcHVzaCB0aW1lb3V0cy5cbiAqXG4gKiBEZWZhdWx0cyBgREVGQVVMVF9USU1FT1VUYFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmhlYXJ0YmVhdEludGVydmFsTXNdIC0gVGhlIG1pbGxpc2VjIGludGVydmFsIHRvIHNlbmQgYSBoZWFydGJlYXQgbWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnJlY29ubmVjdEFmdGVyTXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbGlzZWNcbiAqIHNvY2tldCByZWNvbm5lY3QgaW50ZXJ2YWwuXG4gKlxuICogRGVmYXVsdHMgdG8gc3RlcHBlZCBiYWNrb2ZmIG9mOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVqb2luQWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogcmVqb2luIGludGVydmFsIGZvciBpbmRpdmlkdWFsIGNoYW5uZWxzLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9XG4gKiBgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubG9nZ2VyXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZywgaWU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24oa2luZCwgbXNnLCBkYXRhKSB7XG4gKiAgIGNvbnNvbGUubG9nKGAke2tpbmR9OiAke21zZ31gLCBkYXRhKVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmxvbmdwb2xsZXJUaW1lb3V0XSAtIFRoZSBtYXhpbXVtIHRpbWVvdXQgb2YgYSBsb25nIHBvbGwgQUpBWCByZXF1ZXN0LlxuICpcbiAqIERlZmF1bHRzIHRvIDIwcyAoZG91YmxlIHRoZSBzZXJ2ZXIgbG9uZyBwb2xsIHRpbWVyKS5cbiAqXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBbb3B0cy5wYXJhbXNdIC0gVGhlIG9wdGlvbmFsIHBhcmFtcyB0byBwYXNzIHdoZW4gY29ubmVjdGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmFyeVR5cGVdIC0gVGhlIGJpbmFyeSB0eXBlIHRvIHVzZSBmb3IgYmluYXJ5IFdlYlNvY2tldCBmcmFtZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gXCJhcnJheWJ1ZmZlclwiXG4gKlxuICogQHBhcmFtIHt2c259IFtvcHRzLnZzbl0gLSBUaGUgc2VyaWFsaXplcidzIHByb3RvY29sIHZlcnNpb24gdG8gc2VuZCBvbiBjb25uZWN0LlxuICpcbiAqIERlZmF1bHRzIHRvIERFRkFVTFRfVlNOLlxuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50LCBvcHRzID0ge30pe1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB7b3BlbjogW10sIGNsb3NlOiBbXSwgZXJyb3I6IFtdLCBtZXNzYWdlOiBbXX1cbiAgICB0aGlzLmNoYW5uZWxzID0gW11cbiAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IG9wdHMudGltZW91dCB8fCBERUZBVUxUX1RJTUVPVVRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG9wdHMudHJhbnNwb3J0IHx8IGdsb2JhbC5XZWJTb2NrZXQgfHwgTG9uZ1BvbGxcbiAgICB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnMgPSAwXG4gICAgdGhpcy5kZWZhdWx0RW5jb2RlciA9IFNlcmlhbGl6ZXIuZW5jb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmRlZmF1bHREZWNvZGVyID0gU2VyaWFsaXplci5kZWNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5iaW5hcnlUeXBlID0gb3B0cy5iaW5hcnlUeXBlIHx8IFwiYXJyYXlidWZmZXJcIlxuICAgIHRoaXMuY29ubmVjdENsb2NrID0gMVxuICAgIGlmKHRoaXMudHJhbnNwb3J0ICE9PSBMb25nUG9sbCl7XG4gICAgICB0aGlzLmVuY29kZSA9IG9wdHMuZW5jb2RlIHx8IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gb3B0cy5kZWNvZGUgfHwgdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuY29kZSA9IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH1cbiAgICBsZXQgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICBpZihwaHhXaW5kb3cgJiYgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe1xuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfZSA9PiB7XG4gICAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gdGhpcy5jb25uZWN0Q2xvY2tcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZXNob3dcIiwgX2UgPT4ge1xuICAgICAgICBpZihhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID09PSB0aGlzLmNvbm5lY3RDbG9jayl7XG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICAgICAgICB0aGlzLmNvbm5lY3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMgPSBvcHRzLmhlYXJ0YmVhdEludGVydmFsTXMgfHwgMzAwMDBcbiAgICB0aGlzLnJlam9pbkFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVqb2luQWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlam9pbkFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWNvbm5lY3RBZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlY29ubmVjdEFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWNvbm5lY3RBZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dnZXIgPSBvcHRzLmxvZ2dlciB8fCBudWxsXG4gICAgdGhpcy5sb25ncG9sbGVyVGltZW91dCA9IG9wdHMubG9uZ3BvbGxlclRpbWVvdXQgfHwgMjAwMDBcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUob3B0cy5wYXJhbXMgfHwge30pXG4gICAgdGhpcy5lbmRQb2ludCA9IGAke2VuZFBvaW50fS8ke1RSQU5TUE9SVFMud2Vic29ja2V0fWBcbiAgICB0aGlzLnZzbiA9IG9wdHMudnNuIHx8IERFRkFVTFRfVlNOXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IG51bGxcbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICB0aGlzLnRlYXJkb3duKCgpID0+IHRoaXMuY29ubmVjdCgpKVxuICAgIH0sIHRoaXMucmVjb25uZWN0QWZ0ZXJNcylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBMb25nUG9sbCB0cmFuc3BvcnQgcmVmZXJlbmNlXG4gICAqL1xuICBnZXRMb25nUG9sbFRyYW5zcG9ydCgpeyByZXR1cm4gTG9uZ1BvbGwgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyBhbmQgcmVwbGFjZXMgdGhlIGFjdGl2ZSB0cmFuc3BvcnRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3VHJhbnNwb3J0IC0gVGhlIG5ldyB0cmFuc3BvcnQgY2xhc3MgdG8gaW5zdGFudGlhdGVcbiAgICpcbiAgICovXG4gIHJlcGxhY2VUcmFuc3BvcnQobmV3VHJhbnNwb3J0KXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgaWYodGhpcy5jb25uKXtcbiAgICAgIHRoaXMuY29ubi5jbG9zZSgpXG4gICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgfVxuICAgIHRoaXMudHJhbnNwb3J0ID0gbmV3VHJhbnNwb3J0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc29ja2V0IHByb3RvY29sXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBwcm90b2NvbCgpeyByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwcy8pID8gXCJ3c3NcIiA6IFwid3NcIiB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdWxseSBxdWFsaWZpZWQgc29ja2V0IHVybFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZW5kUG9pbnRVUkwoKXtcbiAgICBsZXQgdXJpID0gQWpheC5hcHBlbmRQYXJhbXMoXG4gICAgICBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLmVuZFBvaW50LCB0aGlzLnBhcmFtcygpKSwge3ZzbjogdGhpcy52c259KVxuICAgIGlmKHVyaS5jaGFyQXQoMCkgIT09IFwiL1wiKXsgcmV0dXJuIHVyaSB9XG4gICAgaWYodXJpLmNoYXJBdCgxKSA9PT0gXCIvXCIpeyByZXR1cm4gYCR7dGhpcy5wcm90b2NvbCgpfToke3VyaX1gIH1cblxuICAgIHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9Oi8vJHtsb2NhdGlvbi5ob3N0fSR7dXJpfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0XG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2xvc2VFdmVudCNTdGF0dXNfY29kZXMgZm9yIHZhbGlkIHN0YXR1cyBjb2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgc29ja2V0IGlzIGRpc2Nvbm5lY3RlZC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBjb2RlIC0gQSBzdGF0dXMgY29kZSBmb3IgZGlzY29ubmVjdGlvbiAoT3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gQSB0ZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSByZWFzb24gdG8gZGlzY29ubmVjdC4gKE9wdGlvbmFsKVxuICAgKi9cbiAgZGlzY29ubmVjdChjYWxsYmFjaywgY29kZSwgcmVhc29uKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMudGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbilcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gVGhlIHBhcmFtcyB0byBzZW5kIHdoZW4gY29ubmVjdGluZywgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiB1c2VyVG9rZW59YFxuICAgKlxuICAgKiBQYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQ7IHBhc3MgdGhlbSBpbiB0aGUgU29ja2V0IGNvbnN0cnVjdG9yIGluc3RlYWQ6XG4gICAqIGBuZXcgU29ja2V0KFwiL3NvY2tldFwiLCB7cGFyYW1zOiB7dXNlcl9pZDogdXNlclRva2VufX0pYC5cbiAgICovXG4gIGNvbm5lY3QocGFyYW1zKXtcbiAgICBpZihwYXJhbXMpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcInBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCBwYXNzIDpwYXJhbXMgdG8gdGhlIFNvY2tldCBjb25zdHJ1Y3RvclwiKVxuICAgICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcylcbiAgICB9XG4gICAgaWYodGhpcy5jb25uKXsgcmV0dXJuIH1cblxuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuY29ubiA9IG5ldyB0aGlzLnRyYW5zcG9ydCh0aGlzLmVuZFBvaW50VVJMKCkpXG4gICAgdGhpcy5jb25uLmJpbmFyeVR5cGUgPSB0aGlzLmJpbmFyeVR5cGVcbiAgICB0aGlzLmNvbm4udGltZW91dCA9IHRoaXMubG9uZ3BvbGxlclRpbWVvdXRcbiAgICB0aGlzLmNvbm4ub25vcGVuID0gKCkgPT4gdGhpcy5vbkNvbm5PcGVuKClcbiAgICB0aGlzLmNvbm4ub25lcnJvciA9IGVycm9yID0+IHRoaXMub25Db25uRXJyb3IoZXJyb3IpXG4gICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGV2ZW50ID0+IHRoaXMub25Db25uTWVzc2FnZShldmVudClcbiAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGV2ZW50ID0+IHRoaXMub25Db25uQ2xvc2UoZXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogTG9ncyB0aGUgbWVzc2FnZS4gT3ZlcnJpZGUgYHRoaXMubG9nZ2VyYCBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZy4gbm9vcHMgYnkgZGVmYXVsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBsb2coa2luZCwgbXNnLCBkYXRhKXsgdGhpcy5sb2dnZXIoa2luZCwgbXNnLCBkYXRhKSB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhIGxvZ2dlciBoYXMgYmVlbiBzZXQgb24gdGhpcyBzb2NrZXQuXG4gICAqL1xuICBoYXNMb2dnZXIoKXsgcmV0dXJuIHRoaXMubG9nZ2VyICE9PSBudWxsIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBvcGVuIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25PcGVuKGZ1bmN0aW9uKCl7IGNvbnNvbGUuaW5mbyhcInRoZSBzb2NrZXQgd2FzIG9wZW5lZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm9wZW4ucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gY2xvc2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGVycm9yIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25FcnJvcihmdW5jdGlvbihlcnJvcil7IGFsZXJ0KFwiQW4gZXJyb3Igb2NjdXJyZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gbWVzc2FnZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uTWVzc2FnZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBQaW5ncyB0aGUgc2VydmVyIGFuZCBpbnZva2VzIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBSVFQgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGluZyB3YXMgcHVzaGVkIG9yIGZhbHNlIGlmIHVuYWJsZSB0byBiZSBwdXNoZWQuXG4gICAqL1xuICBwaW5nKGNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICBsZXQgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgIHRoaXMucHVzaCh7dG9waWM6IFwicGhvZW5peFwiLCBldmVudDogXCJoZWFydGJlYXRcIiwgcGF5bG9hZDoge30sIHJlZjogcmVmfSlcbiAgICBsZXQgb25Nc2dSZWYgPSB0aGlzLm9uTWVzc2FnZShtc2cgPT4ge1xuICAgICAgaWYobXNnLnJlZiA9PT0gcmVmKXtcbiAgICAgICAgdGhpcy5vZmYoW29uTXNnUmVmXSlcbiAgICAgICAgY2FsbGJhY2soRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgY2xlYXJIZWFydGJlYXRzKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKVxuICB9XG5cbiAgb25Db25uT3Blbigpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBjb25uZWN0ZWQgdG8gJHt0aGlzLmVuZFBvaW50VVJMKCl9YClcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucysrXG4gICAgdGhpcy5mbHVzaFNlbmRCdWZmZXIoKVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMucmVzZXRIZWFydGJlYXQoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgaGVhcnRiZWF0VGltZW91dCgpe1xuICAgIGlmKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKXsgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJoZWFydGJlYXQgdGltZW91dC4gQXR0ZW1wdGluZyB0byByZS1lc3RhYmxpc2ggY29ubmVjdGlvblwiKSB9XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSwgV1NfQ0xPU0VfTk9STUFMLCBcImhlYXJ0YmVhdCB0aW1lb3V0XCIpXG4gICAgfVxuICB9XG5cbiAgcmVzZXRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLmNvbm4gJiYgdGhpcy5jb25uLnNraXBIZWFydGJlYXQpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgfVxuXG4gIHRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIGlmKCF0aGlzLmNvbm4pe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgIGlmKGNvZGUpeyB0aGlzLmNvbm4uY2xvc2UoY29kZSwgcmVhc29uIHx8IFwiXCIpIH0gZWxzZSB7IHRoaXMuY29ubi5jbG9zZSgpIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmNvbm4ub25vcGVuID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uY2xvc2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uID0gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgd2FpdEZvckJ1ZmZlckRvbmUoY2FsbGJhY2ssIHRyaWVzID0gMSl7XG4gICAgaWYodHJpZXMgPT09IDUgfHwgIXRoaXMuY29ubiB8fCAhdGhpcy5jb25uLmJ1ZmZlcmVkQW1vdW50KXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgd2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8IHRoaXMuY29ubi5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNsb3NlZCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMud2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgb25Db25uQ2xvc2UoZXZlbnQpe1xuICAgIGxldCBjbG9zZUNvZGUgPSBldmVudCAmJiBldmVudC5jb2RlXG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJjbG9zZVwiLCBldmVudClcbiAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICBpZighdGhpcy5jbG9zZVdhc0NsZWFuICYmIGNsb3NlQ29kZSAhPT0gMTAwMCl7XG4gICAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpXG4gICAgfVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiBjYWxsYmFjayhldmVudCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ29ubkVycm9yKGVycm9yKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBlcnJvcilcbiAgICBsZXQgdHJhbnNwb3J0QmVmb3JlID0gdGhpcy50cmFuc3BvcnRcbiAgICBsZXQgZXN0YWJsaXNoZWRCZWZvcmUgPSB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnNcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4ge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIHRyYW5zcG9ydEJlZm9yZSwgZXN0YWJsaXNoZWRCZWZvcmUpXG4gICAgfSlcbiAgICBpZih0cmFuc3BvcnRCZWZvcmUgPT09IHRoaXMudHJhbnNwb3J0IHx8IGVzdGFibGlzaGVkQmVmb3JlID4gMCl7XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlckNoYW5FcnJvcigpe1xuICAgIHRoaXMuY2hhbm5lbHMuZm9yRWFjaChjaGFubmVsID0+IHtcbiAgICAgIGlmKCEoY2hhbm5lbC5pc0Vycm9yZWQoKSB8fCBjaGFubmVsLmlzTGVhdmluZygpIHx8IGNoYW5uZWwuaXNDbG9zZWQoKSkpe1xuICAgICAgICBjaGFubmVsLnRyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgY29ubmVjdGlvblN0YXRlKCl7XG4gICAgc3dpdGNoKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4ucmVhZHlTdGF0ZSl7XG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZzogcmV0dXJuIFwiY29ubmVjdGluZ1wiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMub3BlbjogcmV0dXJuIFwib3BlblwiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY2xvc2luZzogcmV0dXJuIFwiY2xvc2luZ1wiXG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJjbG9zZWRcIlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNvbm5lY3Rpb25TdGF0ZSgpID09PSBcIm9wZW5cIiB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Q2hhbm5lbH1cbiAgICovXG4gIHJlbW92ZShjaGFubmVsKXtcbiAgICB0aGlzLm9mZihjaGFubmVsLnN0YXRlQ2hhbmdlUmVmcylcbiAgICB0aGlzLmNoYW5uZWxzID0gdGhpcy5jaGFubmVscy5maWx0ZXIoYyA9PiBjLmpvaW5SZWYoKSAhPT0gY2hhbm5lbC5qb2luUmVmKCkpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYCByZWdpc3RyYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3JlZnN9IC0gbGlzdCBvZiByZWZzIHJldHVybmVkIGJ5IGNhbGxzIHRvXG4gICAqICAgICAgICAgICAgICAgICBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYFxuICAgKi9cbiAgb2ZmKHJlZnMpe1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mpe1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldLmZpbHRlcigoW3JlZl0pID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnMuaW5kZXhPZihyZWYpID09PSAtMVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGVzIGEgbmV3IGNoYW5uZWwgZm9yIHRoZSBnaXZlbiB0b3BpY1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5QYXJhbXMgLSBQYXJhbWV0ZXJzIGZvciB0aGUgY2hhbm5lbFxuICAgKiBAcmV0dXJucyB7Q2hhbm5lbH1cbiAgICovXG4gIGNoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMgPSB7fSl7XG4gICAgbGV0IGNoYW4gPSBuZXcgQ2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcywgdGhpcylcbiAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbilcbiAgICByZXR1cm4gY2hhblxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBwdXNoKGRhdGEpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpe1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gZGF0YVxuICAgICAgdGhpcy5sb2coXCJwdXNoXCIsIGAke3RvcGljfSAke2V2ZW50fSAoJHtqb2luX3JlZn0sICR7cmVmfSlgLCBwYXlsb2FkKVxuICAgIH1cblxuICAgIGlmKHRoaXMuaXNDb25uZWN0ZWQoKSl7XG4gICAgICB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2goKCkgPT4gdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG5leHQgbWVzc2FnZSByZWYsIGFjY291bnRpbmcgZm9yIG92ZXJmbG93c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgbWFrZVJlZigpe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZiArIDFcbiAgICBpZihuZXdSZWYgPT09IHRoaXMucmVmKXsgdGhpcy5yZWYgPSAwIH0gZWxzZSB7IHRoaXMucmVmID0gbmV3UmVmIH1cblxuICAgIHJldHVybiB0aGlzLnJlZi50b1N0cmluZygpXG4gIH1cblxuICBzZW5kSGVhcnRiZWF0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmICYmICF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWZ9KVxuICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgZmx1c2hTZW5kQnVmZmVyKCl7XG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpXG4gICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIH1cbiAgfVxuXG4gIG9uQ29ubk1lc3NhZ2UocmF3TWVzc2FnZSl7XG4gICAgdGhpcy5kZWNvZGUocmF3TWVzc2FnZS5kYXRhLCBtc2cgPT4ge1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gbXNnXG4gICAgICBpZihyZWYgJiYgcmVmID09PSB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJyZWNlaXZlXCIsIGAke3BheWxvYWQuc3RhdHVzIHx8IFwiXCJ9ICR7dG9waWN9ICR7ZXZlbnR9ICR7cmVmICYmIFwiKFwiICsgcmVmICsgXCIpXCIgfHwgXCJcIn1gLCBwYXlsb2FkKVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFubmVscy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldXG4gICAgICAgIGlmKCFjaGFubmVsLmlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pbl9yZWYpKXsgY29udGludWUgfVxuICAgICAgICBjaGFubmVsLnRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWYpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgWywgY2FsbGJhY2tdID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlW2ldXG4gICAgICAgIGNhbGxiYWNrKG1zZylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGVhdmVPcGVuVG9waWModG9waWMpe1xuICAgIGxldCBkdXBDaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGMgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuaXNKb2luZWQoKSB8fCBjLmlzSm9pbmluZygpKSlcbiAgICBpZihkdXBDaGFubmVsKXtcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBsZWF2aW5nIGR1cGxpY2F0ZSB0b3BpYyBcIiR7dG9waWN9XCJgKVxuICAgICAgZHVwQ2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IENPTlNFQ1VUSVZFX1JFTE9BRFMgPSBcImNvbnNlY3V0aXZlLXJlbG9hZHNcIlxuZXhwb3J0IGNvbnN0IE1BWF9SRUxPQURTID0gMTBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01JTiA9IDUwMDBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01BWCA9IDEwMDAwXG5leHBvcnQgY29uc3QgRkFJTFNBRkVfSklUVEVSID0gMzAwMDBcbmV4cG9ydCBjb25zdCBQSFhfRVZFTlRfQ0xBU1NFUyA9IFtcbiAgXCJwaHgtY2xpY2stbG9hZGluZ1wiLCBcInBoeC1jaGFuZ2UtbG9hZGluZ1wiLCBcInBoeC1zdWJtaXQtbG9hZGluZ1wiLFxuICBcInBoeC1rZXlkb3duLWxvYWRpbmdcIiwgXCJwaHgta2V5dXAtbG9hZGluZ1wiLCBcInBoeC1ibHVyLWxvYWRpbmdcIiwgXCJwaHgtZm9jdXMtbG9hZGluZ1wiXG5dXG5leHBvcnQgY29uc3QgUEhYX0NPTVBPTkVOVCA9IFwiZGF0YS1waHgtY29tcG9uZW50XCJcbmV4cG9ydCBjb25zdCBQSFhfTElWRV9MSU5LID0gXCJkYXRhLXBoeC1saW5rXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfU1RBVElDID0gXCJ0cmFjay1zdGF0aWNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSU5LX1NUQVRFID0gXCJkYXRhLXBoeC1saW5rLXN0YXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGID0gXCJkYXRhLXBoeC1yZWZcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfU1JDID0gXCJkYXRhLXBoeC1yZWYtc3JjXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfVVBMT0FEUyA9IFwidHJhY2stdXBsb2Fkc1wiXG5leHBvcnQgY29uc3QgUEhYX1VQTE9BRF9SRUYgPSBcImRhdGEtcGh4LXVwbG9hZC1yZWZcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUkVGTElHSFRFRF9SRUZTID0gXCJkYXRhLXBoeC1wcmVmbGlnaHRlZC1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfRE9ORV9SRUZTID0gXCJkYXRhLXBoeC1kb25lLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9EUk9QX1RBUkdFVCA9IFwiZHJvcC10YXJnZXRcIlxuZXhwb3J0IGNvbnN0IFBIWF9BQ1RJVkVfRU5UUllfUkVGUyA9IFwiZGF0YS1waHgtYWN0aXZlLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCA9IFwicGh4OmxpdmUtZmlsZTp1cGRhdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfU0tJUCA9IFwiZGF0YS1waHgtc2tpcFwiXG5leHBvcnQgY29uc3QgUEhYX01BR0lDX0lEID0gXCJkYXRhLXBoeC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX1BSVU5FID0gXCJkYXRhLXBoeC1wcnVuZVwiXG5leHBvcnQgY29uc3QgUEhYX1BBR0VfTE9BRElORyA9IFwicGFnZS1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfQ09OTkVDVEVEX0NMQVNTID0gXCJwaHgtY29ubmVjdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfTE9BRElOR19DTEFTUyA9IFwicGh4LWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9OT19GRUVEQkFDS19DTEFTUyA9IFwicGh4LW5vLWZlZWRiYWNrXCJcbmV4cG9ydCBjb25zdCBQSFhfRVJST1JfQ0xBU1MgPSBcInBoeC1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX0NMSUVOVF9FUlJPUl9DTEFTUyA9IFwicGh4LWNsaWVudC1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX1NFUlZFUl9FUlJPUl9DTEFTUyA9IFwicGh4LXNlcnZlci1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX1BBUkVOVF9JRCA9IFwiZGF0YS1waHgtcGFyZW50LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfTUFJTiA9IFwiZGF0YS1waHgtbWFpblwiXG5leHBvcnQgY29uc3QgUEhYX1JPT1RfSUQgPSBcImRhdGEtcGh4LXJvb3QtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9WSUVXUE9SVF9UT1AgPSBcInZpZXdwb3J0LXRvcFwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdQT1JUX0JPVFRPTSA9IFwidmlld3BvcnQtYm90dG9tXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJJR0dFUl9BQ1RJT04gPSBcInRyaWdnZXItYWN0aW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfRkVFREJBQ0tfRk9SID0gXCJmZWVkYmFjay1mb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfRk9DVVNFRCA9IFwicGh4LWhhcy1mb2N1c2VkXCJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfSU5QVVRTID0gW1widGV4dFwiLCBcInRleHRhcmVhXCIsIFwibnVtYmVyXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwiZGF0ZXRpbWUtbG9jYWxcIiwgXCJjb2xvclwiLCBcInJhbmdlXCJdXG5leHBvcnQgY29uc3QgQ0hFQ0tBQkxFX0lOUFVUUyA9IFtcImNoZWNrYm94XCIsIFwicmFkaW9cIl1cbmV4cG9ydCBjb25zdCBQSFhfSEFTX1NVQk1JVFRFRCA9IFwicGh4LWhhcy1zdWJtaXR0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVNTSU9OID0gXCJkYXRhLXBoeC1zZXNzaW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV19TRUxFQ1RPUiA9IGBbJHtQSFhfU0VTU0lPTn1dYFxuZXhwb3J0IGNvbnN0IFBIWF9TVElDS1kgPSBcImRhdGEtcGh4LXN0aWNreVwiXG5leHBvcnQgY29uc3QgUEhYX1NUQVRJQyA9IFwiZGF0YS1waHgtc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVBRE9OTFkgPSBcImRhdGEtcGh4LXJlYWRvbmx5XCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRUQgPSBcImRhdGEtcGh4LWRpc2FibGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIID0gXCJkaXNhYmxlLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSA9IFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9IT09LID0gXCJob29rXCJcbmV4cG9ydCBjb25zdCBQSFhfREVCT1VOQ0UgPSBcImRlYm91bmNlXCJcbmV4cG9ydCBjb25zdCBQSFhfVEhST1RUTEUgPSBcInRocm90dGxlXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU0gPSBcInN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX1NUUkVBTV9SRUYgPSBcImRhdGEtcGh4LXN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBQSFhfTU9VTlRFRCA9IFwibW91bnRlZFwiXG5leHBvcnQgY29uc3QgTE9BREVSX1RJTUVPVVQgPSAxXG5leHBvcnQgY29uc3QgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCA9IDIwMFxuZXhwb3J0IGNvbnN0IEJJTkRJTkdfUFJFRklYID0gXCJwaHgtXCJcbmV4cG9ydCBjb25zdCBQVVNIX1RJTUVPVVQgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IExJTktfSEVBREVSID0gXCJ4LXJlcXVlc3RlZC13aXRoXCJcbmV4cG9ydCBjb25zdCBSRVNQT05TRV9VUkxfSEVBREVSID0gXCJ4LXJlc3BvbnNlLXVybFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfVFJJR0dFUiA9IFwiZGVib3VuY2UtdHJpZ2dlclwiXG5leHBvcnQgY29uc3QgVEhST1RUTEVEID0gXCJ0aHJvdHRsZWRcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1BSRVZfS0VZID0gXCJkZWJvdW5jZS1wcmV2LWtleVwiXG5leHBvcnQgY29uc3QgREVGQVVMVFMgPSB7XG4gIGRlYm91bmNlOiAzMDAsXG4gIHRocm90dGxlOiAzMDBcbn1cblxuLy8gUmVuZGVyZWRcbmV4cG9ydCBjb25zdCBEWU5BTUlDUyA9IFwiZFwiXG5leHBvcnQgY29uc3QgU1RBVElDID0gXCJzXCJcbmV4cG9ydCBjb25zdCBST09UID0gXCJyXCJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gXCJjXCJcbmV4cG9ydCBjb25zdCBFVkVOVFMgPSBcImVcIlxuZXhwb3J0IGNvbnN0IFJFUExZID0gXCJyXCJcbmV4cG9ydCBjb25zdCBUSVRMRSA9IFwidFwiXG5leHBvcnQgY29uc3QgVEVNUExBVEVTID0gXCJwXCJcbmV4cG9ydCBjb25zdCBTVFJFQU0gPSBcInN0cmVhbVwiIiwgImltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlVcGxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKGVudHJ5LCBjaHVua1NpemUsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmVudHJ5ID0gZW50cnlcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZVxuICAgIHRoaXMuY2h1bmtUaW1lciA9IG51bGxcbiAgICB0aGlzLmVycm9yZWQgPSBmYWxzZVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbCA9IGxpdmVTb2NrZXQuY2hhbm5lbChgbHZ1OiR7ZW50cnkucmVmfWAsIHt0b2tlbjogZW50cnkubWV0YWRhdGEoKX0pXG4gIH1cblxuICBlcnJvcihyZWFzb24pe1xuICAgIGlmKHRoaXMuZXJyb3JlZCl7IHJldHVybiB9XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmxlYXZlKClcbiAgICB0aGlzLmVycm9yZWQgPSB0cnVlXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2h1bmtUaW1lcilcbiAgICB0aGlzLmVudHJ5LmVycm9yKHJlYXNvbilcbiAgfVxuXG4gIHVwbG9hZCgpe1xuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmpvaW4oKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBfZGF0YSA9PiB0aGlzLnJlYWROZXh0Q2h1bmsoKSlcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgcmVhc29uID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5vZmZzZXQgPj0gdGhpcy5lbnRyeS5maWxlLnNpemUgfVxuXG4gIHJlYWROZXh0Q2h1bmsoKXtcbiAgICBsZXQgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyKClcbiAgICBsZXQgYmxvYiA9IHRoaXMuZW50cnkuZmlsZS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5jaHVua1NpemUgKyB0aGlzLm9mZnNldClcbiAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgIGlmKGUudGFyZ2V0LmVycm9yID09PSBudWxsKXtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gZS50YXJnZXQucmVzdWx0LmJ5dGVMZW5ndGhcbiAgICAgICAgdGhpcy5wdXNoQ2h1bmsoZS50YXJnZXQucmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvZ0Vycm9yKFwiUmVhZCBlcnJvcjogXCIgKyBlLnRhcmdldC5lcnJvcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIH1cblxuICBwdXNoQ2h1bmsoY2h1bmspe1xuICAgIGlmKCF0aGlzLnVwbG9hZENoYW5uZWwuaXNKb2luZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLnB1c2goXCJjaHVua1wiLCBjaHVuaylcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmVudHJ5LnByb2dyZXNzKCh0aGlzLm9mZnNldCAvIHRoaXMuZW50cnkuZmlsZS5zaXplKSAqIDEwMClcbiAgICAgICAgaWYoIXRoaXMuaXNEb25lKCkpe1xuICAgICAgICAgIHRoaXMuY2h1bmtUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWFkTmV4dENodW5rKCksIHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKCkgfHwgMClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgKHtyZWFzb259KSA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfVklFV19TRUxFQ1RPUlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRW50cnlVcGxvYWRlciBmcm9tIFwiLi9lbnRyeV91cGxvYWRlclwiXG5cbmV4cG9ydCBsZXQgbG9nRXJyb3IgPSAobXNnLCBvYmopID0+IGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvcihtc2csIG9iailcblxuZXhwb3J0IGxldCBpc0NpZCA9IChjaWQpID0+IHtcbiAgbGV0IHR5cGUgPSB0eXBlb2YoY2lkKVxuICByZXR1cm4gdHlwZSA9PT0gXCJudW1iZXJcIiB8fCAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAvXigwfFsxLTldXFxkKikkLy50ZXN0KGNpZCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3REdXBsaWNhdGVJZHMoKXtcbiAgbGV0IGlkcyA9IG5ldyBTZXQoKVxuICBsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKltpZF1cIilcbiAgZm9yKGxldCBpID0gMCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgIGlmKGlkcy5oYXMoZWxlbXNbaV0uaWQpKXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpcGxlIElEcyBkZXRlY3RlZDogJHtlbGVtc1tpXS5pZH0uIEVuc3VyZSB1bmlxdWUgZWxlbWVudCBpZHMuYClcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzLmFkZChlbGVtc1tpXS5pZClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGxldCBkZWJ1ZyA9ICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4ge1xuICBpZih2aWV3LmxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICB9XG59XG5cbi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwgOiBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbCB9XG5cbmV4cG9ydCBsZXQgY2xvbmUgPSAob2JqKSA9PiB7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cblxuZXhwb3J0IGxldCBjbG9zZXN0UGh4QmluZGluZyA9IChlbCwgYmluZGluZywgYm9yZGVyRWwpID0+IHtcbiAgZG8ge1xuICAgIGlmKGVsLm1hdGNoZXMoYFske2JpbmRpbmd9XWApICYmICFlbC5kaXNhYmxlZCl7IHJldHVybiBlbCB9XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGVcbiAgfSB3aGlsZShlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSAmJiAhKChib3JkZXJFbCAmJiBib3JkZXJFbC5pc1NhbWVOb2RlKGVsKSkgfHwgZWwubWF0Y2hlcyhQSFhfVklFV19TRUxFQ1RPUikpKVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgbGV0IGlzT2JqZWN0ID0gKG9iaikgPT4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgIShvYmogaW5zdGFuY2VvZiBBcnJheSlcbn1cblxuZXhwb3J0IGxldCBpc0VxdWFsT2JqID0gKG9iajEsIG9iajIpID0+IEpTT04uc3RyaW5naWZ5KG9iajEpID09PSBKU09OLnN0cmluZ2lmeShvYmoyKVxuXG5leHBvcnQgbGV0IGlzRW1wdHkgPSAob2JqKSA9PiB7XG4gIGZvcihsZXQgeCBpbiBvYmopeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgbGV0IG1heWJlID0gKGVsLCBjYWxsYmFjaykgPT4gZWwgJiYgY2FsbGJhY2soZWwpXG5cbmV4cG9ydCBsZXQgY2hhbm5lbFVwbG9hZGVyID0gZnVuY3Rpb24gKGVudHJpZXMsIG9uRXJyb3IsIHJlc3AsIGxpdmVTb2NrZXQpe1xuICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgIGxldCBlbnRyeVVwbG9hZGVyID0gbmV3IEVudHJ5VXBsb2FkZXIoZW50cnksIHJlc3AuY29uZmlnLmNodW5rX3NpemUsIGxpdmVTb2NrZXQpXG4gICAgZW50cnlVcGxvYWRlci51cGxvYWQoKVxuICB9KVxufVxuIiwgImxldCBCcm93c2VyID0ge1xuICBjYW5QdXNoU3RhdGUoKXsgcmV0dXJuICh0eXBlb2YgKGhpc3RvcnkucHVzaFN0YXRlKSAhPT0gXCJ1bmRlZmluZWRcIikgfSxcblxuICBkcm9wTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKVxuICB9LFxuXG4gIHVwZGF0ZUxvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXksIGluaXRpYWwsIGZ1bmMpe1xuICAgIGxldCBjdXJyZW50ID0gdGhpcy5nZXRMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBrZXkgPSB0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBuZXdWYWwgPSBjdXJyZW50ID09PSBudWxsID8gaW5pdGlhbCA6IGZ1bmMoY3VycmVudClcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG5ld1ZhbCkpXG4gICAgcmV0dXJuIG5ld1ZhbFxuICB9LFxuXG4gIGdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpe1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKSlcbiAgfSxcblxuICB1cGRhdGVDdXJyZW50U3RhdGUoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjYWxsYmFjayhoaXN0b3J5LnN0YXRlIHx8IHt9KSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gIH0sXG5cbiAgcHVzaFN0YXRlKGtpbmQsIG1ldGEsIHRvKXtcbiAgICBpZih0aGlzLmNhblB1c2hTdGF0ZSgpKXtcbiAgICAgIGlmKHRvICE9PSB3aW5kb3cubG9jYXRpb24uaHJlZil7XG4gICAgICAgIGlmKG1ldGEudHlwZSA9PSBcInJlZGlyZWN0XCIgJiYgbWV0YS5zY3JvbGwpe1xuICAgICAgICAgIC8vIElmIHdlJ3JlIHJlZGlyZWN0aW5nIHN0b3JlIHRoZSBjdXJyZW50IHNjcm9sbFkgZm9yIHRoZSBjdXJyZW50IGhpc3Rvcnkgc3RhdGUuXG4gICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9IGhpc3Rvcnkuc3RhdGUgfHwge31cbiAgICAgICAgICBjdXJyZW50U3RhdGUuc2Nyb2xsID0gbWV0YS5zY3JvbGxcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjdXJyZW50U3RhdGUsIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIG1ldGEuc2Nyb2xsIC8vIE9ubHkgc3RvcmUgdGhlIHNjcm9sbCBpbiB0aGUgcmVkaXJlY3QgY2FzZS5cbiAgICAgICAgaGlzdG9yeVtraW5kICsgXCJTdGF0ZVwiXShtZXRhLCBcIlwiLCB0byB8fCBudWxsKSAvLyBJRSB3aWxsIGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG4gICAgICAgIGxldCBoYXNoRWwgPSB0aGlzLmdldEhhc2hUYXJnZXRFbCh3aW5kb3cubG9jYXRpb24uaGFzaClcblxuICAgICAgICBpZihoYXNoRWwpe1xuICAgICAgICAgIGhhc2hFbC5zY3JvbGxJbnRvVmlldygpXG4gICAgICAgIH0gZWxzZSBpZihtZXRhLnR5cGUgPT09IFwicmVkaXJlY3RcIil7XG4gICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVkaXJlY3QodG8pXG4gICAgfVxuICB9LFxuXG4gIHNldENvb2tpZShuYW1lLCB2YWx1ZSl7XG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHt2YWx1ZX1gXG4gIH0sXG5cbiAgZ2V0Q29va2llKG5hbWUpe1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUucmVwbGFjZShuZXcgUmVnRXhwKGAoPzooPzpefC4qO1xccyopJHtuYW1lfVxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJGApLCBcIiQxXCIpXG4gIH0sXG5cbiAgcmVkaXJlY3QodG9VUkwsIGZsYXNoKXtcbiAgICBpZihmbGFzaCl7IEJyb3dzZXIuc2V0Q29va2llKFwiX19waG9lbml4X2ZsYXNoX19cIiwgZmxhc2ggKyBcIjsgbWF4LWFnZT02MDAwMDsgcGF0aD0vXCIpIH1cbiAgICB3aW5kb3cubG9jYXRpb24gPSB0b1VSTFxuICB9LFxuXG4gIGxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KXsgcmV0dXJuIGAke25hbWVzcGFjZX0tJHtzdWJrZXl9YCB9LFxuXG4gIGdldEhhc2hUYXJnZXRFbChtYXliZUhhc2gpe1xuICAgIGxldCBoYXNoID0gbWF5YmVIYXNoLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpXG4gICAgaWYoaGFzaCA9PT0gXCJcIil7IHJldHVybiB9XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbbmFtZT1cIiR7aGFzaH1cIl1gKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJcbiIsICJpbXBvcnQge1xuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBERUJPVU5DRV9QUkVWX0tFWSxcbiAgREVCT1VOQ0VfVFJJR0dFUixcbiAgRk9DVVNBQkxFX0lOUFVUUyxcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9NQUlOLFxuICBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MsXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUklWQVRFLFxuICBQSFhfUkVGLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9TVElDS1ksXG4gIFRIUk9UVExFRFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBsb2dFcnJvclxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmxldCBET00gPSB7XG4gIGJ5SWQoaWQpeyByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGxvZ0Vycm9yKGBubyBpZCBmb3VuZCBmb3IgJHtpZH1gKSB9LFxuXG4gIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpe1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKVxuICAgIGlmKGVsLmNsYXNzTGlzdC5sZW5ndGggPT09IDApeyBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKSB9XG4gIH0sXG5cbiAgYWxsKG5vZGUsIHF1ZXJ5LCBjYWxsYmFjayl7XG4gICAgaWYoIW5vZGUpeyByZXR1cm4gW10gfVxuICAgIGxldCBhcnJheSA9IEFycmF5LmZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSlcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBhcnJheS5mb3JFYWNoKGNhbGxiYWNrKSA6IGFycmF5XG4gIH0sXG5cbiAgY2hpbGROb2RlTGVuZ3RoKGh0bWwpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZEVsZW1lbnRDb3VudFxuICB9LFxuXG4gIGlzVXBsb2FkSW5wdXQoZWwpeyByZXR1cm4gZWwudHlwZSA9PT0gXCJmaWxlXCIgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSAhPT0gbnVsbCB9LFxuXG4gIGlzQXV0b1VwbG9hZChpbnB1dEVsKXsgcmV0dXJuIGlucHV0RWwuaGFzQXR0cmlidXRlKFwiZGF0YS1waHgtYXV0by11cGxvYWRcIikgfSxcblxuICBmaW5kVXBsb2FkSW5wdXRzKG5vZGUpeyByZXR1cm4gdGhpcy5hbGwobm9kZSwgYGlucHV0W3R5cGU9XCJmaWxlXCJdWyR7UEhYX1VQTE9BRF9SRUZ9XWApIH0sXG5cbiAgZmluZENvbXBvbmVudE5vZGVMaXN0KG5vZGUsIGNpZCl7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIGBbJHtQSFhfQ09NUE9ORU5UfT1cIiR7Y2lkfVwiXWApLCBub2RlKVxuICB9LFxuXG4gIGlzUGh4RGVzdHJveWVkKG5vZGUpe1xuICAgIHJldHVybiBub2RlLmlkICYmIERPTS5wcml2YXRlKG5vZGUsIFwiZGVzdHJveWVkXCIpID8gdHJ1ZSA6IGZhbHNlXG4gIH0sXG5cbiAgd2FudHNOZXdUYWIoZSl7XG4gICAgbGV0IHdhbnRzTmV3VGFiID0gZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkgfHwgZS5tZXRhS2V5IHx8IChlLmJ1dHRvbiAmJiBlLmJ1dHRvbiA9PT0gMSlcbiAgICBsZXQgaXNEb3dubG9hZCA9IChlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ICYmIGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRvd25sb2FkXCIpKVxuICAgIGxldCBpc1RhcmdldEJsYW5rID0gZS50YXJnZXQuaGFzQXR0cmlidXRlKFwidGFyZ2V0XCIpICYmIGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKS50b0xvd2VyQ2FzZSgpID09PSBcIl9ibGFua1wiXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGlzVGFyZ2V0QmxhbmsgfHwgaXNEb3dubG9hZFxuICB9LFxuXG4gIGlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSl7XG4gICAgLy8gSWdub3JlIGZvcm0gc3VibWlzc2lvbnMgaW50ZW5kZWQgdG8gY2xvc2UgYSBuYXRpdmUgPGRpYWxvZz4gZWxlbWVudFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kaWFsb2cjdXNhZ2Vfbm90ZXNcbiAgICBsZXQgaXNEaWFsb2dTdWJtaXQgPSAoZS50YXJnZXQgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpID09PSBcImRpYWxvZ1wiKSB8fFxuICAgICAgKGUuc3VibWl0dGVyICYmIGUuc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgPT09IFwiZGlhbG9nXCIpXG5cbiAgICBpZihpc0RpYWxvZ1N1Ym1pdCl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXRoaXMud2FudHNOZXdUYWIoZSlcbiAgICB9XG4gIH0sXG5cbiAgaXNOZXdQYWdlQ2xpY2soZSwgY3VycmVudExvY2F0aW9uKXtcbiAgICBsZXQgaHJlZiA9IGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgPyBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpIDogbnVsbFxuICAgIGxldCB1cmxcblxuICAgIGlmKGUuZGVmYXVsdFByZXZlbnRlZCB8fCBocmVmID09PSBudWxsIHx8IHRoaXMud2FudHNOZXdUYWIoZSkpeyByZXR1cm4gZmFsc2UgfVxuICAgIGlmKGhyZWYuc3RhcnRzV2l0aChcIm1haWx0bzpcIikgfHwgaHJlZi5zdGFydHNXaXRoKFwidGVsOlwiKSl7IHJldHVybiBmYWxzZSB9XG4gICAgaWYoZS50YXJnZXQuaXNDb250ZW50RWRpdGFibGUpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHVybCA9IG5ldyBVUkwoaHJlZilcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHVybCA9IG5ldyBVUkwoaHJlZiwgY3VycmVudExvY2F0aW9uKVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIC8vIGJhZCBVUkwsIGZhbGxiYWNrIHRvIGxldCBicm93c2VyIHRyeSBpdCBhcyBleHRlcm5hbFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHVybC5ob3N0ID09PSBjdXJyZW50TG9jYXRpb24uaG9zdCAmJiB1cmwucHJvdG9jb2wgPT09IGN1cnJlbnRMb2NhdGlvbi5wcm90b2NvbCl7XG4gICAgICBpZih1cmwucGF0aG5hbWUgPT09IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSAmJiB1cmwuc2VhcmNoID09PSBjdXJyZW50TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgICAgcmV0dXJuIHVybC5oYXNoID09PSBcIlwiICYmICF1cmwuaHJlZi5lbmRzV2l0aChcIiNcIilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybC5wcm90b2NvbC5zdGFydHNXaXRoKFwiaHR0cFwiKVxuICB9LFxuXG4gIG1hcmtQaHhDaGlsZERlc3Ryb3llZChlbCl7XG4gICAgaWYodGhpcy5pc1BoeENoaWxkKGVsKSl7IGVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgXCJcIikgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJkZXN0cm95ZWRcIiwgdHJ1ZSlcbiAgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHBhcmVudElkKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRoaXMuZmluZFBoeENoaWxkcmVuKHRlbXBsYXRlLmNvbnRlbnQsIHBhcmVudElkKVxuICB9LFxuXG4gIGlzSWdub3JlZChlbCwgcGh4VXBkYXRlKXtcbiAgICByZXR1cm4gKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpIHx8IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwZGF0ZVwiKSkgPT09IFwiaWdub3JlXCJcbiAgfSxcblxuICBpc1BoeFVwZGF0ZShlbCwgcGh4VXBkYXRlLCB1cGRhdGVUeXBlcyl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiB1cGRhdGVUeXBlcy5pbmRleE9mKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSA+PSAwXG4gIH0sXG5cbiAgZmluZFBoeFN0aWNreShlbCl7IHJldHVybiB0aGlzLmFsbChlbCwgYFske1BIWF9TVElDS1l9XWApIH0sXG5cbiAgZmluZFBoeENoaWxkcmVuKGVsLCBwYXJlbnRJZCl7XG4gICAgcmV0dXJuIHRoaXMuYWxsKGVsLCBgJHtQSFhfVklFV19TRUxFQ1RPUn1bJHtQSFhfUEFSRU5UX0lEfT1cIiR7cGFyZW50SWR9XCJdYClcbiAgfSxcblxuICBmaW5kUGFyZW50Q0lEcyhub2RlLCBjaWRzKXtcbiAgICBsZXQgaW5pdGlhbCA9IG5ldyBTZXQoY2lkcylcbiAgICBsZXQgcGFyZW50Q2lkcyA9XG4gICAgICBjaWRzLnJlZHVjZSgoYWNjLCBjaWQpID0+IHtcbiAgICAgICAgbGV0IHNlbGVjdG9yID0gYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdIFske1BIWF9DT01QT05FTlR9XWBcblxuICAgICAgICB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBzZWxlY3RvciksIG5vZGUpXG4gICAgICAgICAgLm1hcChlbCA9PiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkpKVxuICAgICAgICAgIC5mb3JFYWNoKGNoaWxkQ0lEID0+IGFjYy5kZWxldGUoY2hpbGRDSUQpKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIGluaXRpYWwpXG5cbiAgICByZXR1cm4gcGFyZW50Q2lkcy5zaXplID09PSAwID8gbmV3IFNldChjaWRzKSA6IHBhcmVudENpZHNcbiAgfSxcblxuICBmaWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcobm9kZXMsIHBhcmVudCl7XG4gICAgaWYocGFyZW50LnF1ZXJ5U2VsZWN0b3IoUEhYX1ZJRVdfU0VMRUNUT1IpKXtcbiAgICAgIHJldHVybiBub2Rlcy5maWx0ZXIoZWwgPT4gdGhpcy53aXRoaW5TYW1lTGl2ZVZpZXcoZWwsIHBhcmVudCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfSxcblxuICB3aXRoaW5TYW1lTGl2ZVZpZXcobm9kZSwgcGFyZW50KXtcbiAgICB3aGlsZShub2RlID0gbm9kZS5wYXJlbnROb2RlKXtcbiAgICAgIGlmKG5vZGUuaXNTYW1lTm9kZShwYXJlbnQpKXsgcmV0dXJuIHRydWUgfVxuICAgICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsKXsgcmV0dXJuIGZhbHNlIH1cbiAgICB9XG4gIH0sXG5cbiAgcHJpdmF0ZShlbCwga2V5KXsgcmV0dXJuIGVsW1BIWF9QUklWQVRFXSAmJiBlbFtQSFhfUFJJVkFURV1ba2V5XSB9LFxuXG4gIGRlbGV0ZVByaXZhdGUoZWwsIGtleSl7IGVsW1BIWF9QUklWQVRFXSAmJiBkZWxldGUgKGVsW1BIWF9QUklWQVRFXVtrZXldKSB9LFxuXG4gIHB1dFByaXZhdGUoZWwsIGtleSwgdmFsdWUpe1xuICAgIGlmKCFlbFtQSFhfUFJJVkFURV0peyBlbFtQSFhfUFJJVkFURV0gPSB7fSB9XG4gICAgZWxbUEhYX1BSSVZBVEVdW2tleV0gPSB2YWx1ZVxuICB9LFxuXG4gIHVwZGF0ZVByaXZhdGUoZWwsIGtleSwgZGVmYXVsdFZhbCwgdXBkYXRlRnVuYyl7XG4gICAgbGV0IGV4aXN0aW5nID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhkZWZhdWx0VmFsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHVwZGF0ZUZ1bmMoZXhpc3RpbmcpKVxuICAgIH1cbiAgfSxcblxuICBjb3B5UHJpdmF0ZXModGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtQSFhfUFJJVkFURV0pe1xuICAgICAgdGFyZ2V0W1BIWF9QUklWQVRFXSA9IHNvdXJjZVtQSFhfUFJJVkFURV1cbiAgICB9XG4gIH0sXG5cbiAgcHV0VGl0bGUoc3RyKXtcbiAgICBsZXQgdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgIGlmKHRpdGxlRWwpe1xuICAgICAgbGV0IHtwcmVmaXgsIHN1ZmZpeH0gPSB0aXRsZUVsLmRhdGFzZXRcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYCR7cHJlZml4IHx8IFwiXCJ9JHtzdHJ9JHtzdWZmaXggfHwgXCJcIn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gc3RyXG4gICAgfVxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsIGNhbGxiYWNrKXtcbiAgICBsZXQgZGVib3VuY2UgPSBlbC5nZXRBdHRyaWJ1dGUocGh4RGVib3VuY2UpXG4gICAgbGV0IHRocm90dGxlID0gZWwuZ2V0QXR0cmlidXRlKHBoeFRocm90dGxlKVxuXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgbGV0IHRyaWdnZXIgPSAoKSA9PiB0aHJvdHRsZSA/IHRoaXMuZGVsZXRlUHJpdmF0ZShlbCwgVEhST1RUTEVEKSA6IGNhbGxiYWNrKClcbiAgICAgICAgbGV0IGN1cnJlbnRDeWNsZSA9IHRoaXMuaW5jQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIHRyaWdnZXIpXG4gICAgICAgIGlmKGlzTmFOKHRpbWVvdXQpKXsgcmV0dXJuIGxvZ0Vycm9yKGBpbnZhbGlkIHRocm90dGxlL2RlYm91bmNlIHZhbHVlOiAke3ZhbHVlfWApIH1cbiAgICAgICAgaWYodGhyb3R0bGUpe1xuICAgICAgICAgIGxldCBuZXdLZXlEb3duID0gZmFsc2VcbiAgICAgICAgICBpZihldmVudC50eXBlID09PSBcImtleWRvd25cIil7XG4gICAgICAgICAgICBsZXQgcHJldktleSA9IHRoaXMucHJpdmF0ZShlbCwgREVCT1VOQ0VfUFJFVl9LRVkpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZLCBldmVudC5rZXkpXG4gICAgICAgICAgICBuZXdLZXlEb3duID0gcHJldktleSAhPT0gZXZlbnQua2V5XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIW5ld0tleURvd24gJiYgdGhpcy5wcml2YXRlKGVsLCBUSFJPVFRMRUQpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdHJ1ZSlcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCBjdXJyZW50Q3ljbGUpIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm0gPSBlbC5mb3JtXG4gICAgICAgIGlmKGZvcm0gJiYgdGhpcy5vbmNlKGZvcm0sIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oKG5ldyBGb3JtRGF0YShmb3JtKSkuZW50cmllcygpLCAoW25hbWVdKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBpbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYClcbiAgICAgICAgICAgICAgdGhpcy5pbmNDeWNsZShpbnB1dCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBUSFJPVFRMRUQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImJpbmQtZGVib3VuY2VcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSKSlcbiAgICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyQ3ljbGUoZWwsIGtleSwgY3VycmVudEN5Y2xlKXtcbiAgICBsZXQgW2N5Y2xlLCB0cmlnZ2VyXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KVxuICAgIGlmKCFjdXJyZW50Q3ljbGUpeyBjdXJyZW50Q3ljbGUgPSBjeWNsZSB9XG4gICAgaWYoY3VycmVudEN5Y2xlID09PSBjeWNsZSl7XG4gICAgICB0aGlzLmluY0N5Y2xlKGVsLCBrZXkpXG4gICAgICB0cmlnZ2VyKClcbiAgICB9XG4gIH0sXG5cbiAgb25jZShlbCwga2V5KXtcbiAgICBpZih0aGlzLnByaXZhdGUoZWwsIGtleSkgPT09IHRydWUpeyByZXR1cm4gZmFsc2UgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB0cnVlKVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgaW5jQ3ljbGUoZWwsIGtleSwgdHJpZ2dlciA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICBsZXQgW2N1cnJlbnRDeWNsZV0gPSB0aGlzLnByaXZhdGUoZWwsIGtleSkgfHwgWzAsIHRyaWdnZXJdXG4gICAgY3VycmVudEN5Y2xlKytcbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgW2N1cnJlbnRDeWNsZSwgdHJpZ2dlcl0pXG4gICAgcmV0dXJuIGN1cnJlbnRDeWNsZVxuICB9LFxuXG4gIG1heWJlQWRkUHJpdmF0ZUhvb2tzKGVsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pe1xuICAgIGlmKGVsLmhhc0F0dHJpYnV0ZSAmJiAoZWwuaGFzQXR0cmlidXRlKHBoeFZpZXdwb3J0VG9wKSB8fCBlbC5oYXNBdHRyaWJ1dGUocGh4Vmlld3BvcnRCb3R0b20pKSl7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1ob29rXCIsIFwiUGhvZW5peC5JbmZpbml0ZVNjcm9sbFwiKVxuICAgIH1cbiAgfSxcblxuICBtYXliZUhpZGVGZWVkYmFjayhjb250YWluZXIsIGlucHV0cywgcGh4RmVlZGJhY2tGb3Ipe1xuICAgIGxldCBmZWVkYmFja3MgPSBbXVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKCEodGhpcy5wcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IHRoaXMucHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQpKSl7XG4gICAgICAgIGZlZWRiYWNrcy5wdXNoKGlucHV0Lm5hbWUpXG4gICAgICAgIGlmKGlucHV0Lm5hbWUuZW5kc1dpdGgoXCJbXVwiKSl7IGZlZWRiYWNrcy5wdXNoKGlucHV0Lm5hbWUuc2xpY2UoMCwgLTIpKSB9XG4gICAgICB9XG4gICAgfSlcbiAgICBpZihmZWVkYmFja3MubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgc2VsZWN0b3IgPSBmZWVkYmFja3MubWFwKGYgPT4gYFske3BoeEZlZWRiYWNrRm9yfT1cIiR7Zn1cIl1gKS5qb2luKFwiLCBcIilcbiAgICAgIERPTS5hbGwoY29udGFpbmVyLCBzZWxlY3RvciwgZWwgPT4gZWwuY2xhc3NMaXN0LmFkZChQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpKVxuICAgIH1cbiAgfSxcblxuICByZXNldEZvcm0oZm9ybSwgcGh4RmVlZGJhY2tGb3Ipe1xuICAgIEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICBsZXQgcXVlcnkgPSBgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dC5pZH1cIl0sXG4gICAgICAgICAgICAgICAgICAgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dC5uYW1lfVwiXSxcbiAgICAgICAgICAgICAgICAgICBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0Lm5hbWUucmVwbGFjZSgvXFxbXFxdJC8sIFwiXCIpfVwiXWBcblxuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpXG4gICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKVxuICAgICAgdGhpcy5hbGwoZG9jdW1lbnQsIHF1ZXJ5LCBmZWVkYmFja0VsID0+IHtcbiAgICAgICAgZmVlZGJhY2tFbC5jbGFzc0xpc3QuYWRkKFBIWF9OT19GRUVEQkFDS19DTEFTUylcbiAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBzaG93RXJyb3IoaW5wdXRFbCwgcGh4RmVlZGJhY2tGb3Ipe1xuICAgIGlmKGlucHV0RWwuaWQgfHwgaW5wdXRFbC5uYW1lKXtcbiAgICAgIHRoaXMuYWxsKGlucHV0RWwuZm9ybSwgYFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXRFbC5pZH1cIl0sIFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXRFbC5uYW1lfVwiXWAsIChlbCkgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKGVsLCBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICBpc1BoeENoaWxkKG5vZGUpe1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKVxuICB9LFxuXG4gIGlzUGh4U3RpY2t5KG5vZGUpe1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfU1RJQ0tZKSAhPT0gbnVsbFxuICB9LFxuXG4gIGZpcnN0UGh4Q2hpbGQoZWwpe1xuICAgIHJldHVybiB0aGlzLmlzUGh4Q2hpbGQoZWwpID8gZWwgOiB0aGlzLmFsbChlbCwgYFske1BIWF9QQVJFTlRfSUR9XWApWzBdXG4gIH0sXG5cbiAgZGlzcGF0Y2hFdmVudCh0YXJnZXQsIG5hbWUsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGJ1YmJsZXMgPSBvcHRzLmJ1YmJsZXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIW9wdHMuYnViYmxlc1xuICAgIGxldCBldmVudE9wdHMgPSB7YnViYmxlczogYnViYmxlcywgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsOiBvcHRzLmRldGFpbCB8fCB7fX1cbiAgICBsZXQgZXZlbnQgPSBuYW1lID09PSBcImNsaWNrXCIgPyBuZXcgTW91c2VFdmVudChcImNsaWNrXCIsIGV2ZW50T3B0cykgOiBuZXcgQ3VzdG9tRXZlbnQobmFtZSwgZXZlbnRPcHRzKVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9LFxuXG4gIGNsb25lTm9kZShub2RlLCBodG1sKXtcbiAgICBpZih0eXBlb2YgKGh0bWwpID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2xvbmVkID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICBjbG9uZWQuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmV0dXJuIGNsb25lZFxuICAgIH1cbiAgfSxcblxuICBtZXJnZUF0dHJzKHRhcmdldCwgc291cmNlLCBvcHRzID0ge30pe1xuICAgIGxldCBleGNsdWRlID0gb3B0cy5leGNsdWRlIHx8IFtdXG4gICAgbGV0IGlzSWdub3JlZCA9IG9wdHMuaXNJZ25vcmVkXG4gICAgbGV0IHNvdXJjZUF0dHJzID0gc291cmNlLmF0dHJpYnV0ZXNcbiAgICBmb3IobGV0IGkgPSBzb3VyY2VBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICBsZXQgbmFtZSA9IHNvdXJjZUF0dHJzW2ldLm5hbWVcbiAgICAgIGlmKGV4Y2x1ZGUuaW5kZXhPZihuYW1lKSA8IDApeyB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSkpIH1cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0QXR0cnMgPSB0YXJnZXQuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHRhcmdldEF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gdGFyZ2V0QXR0cnNbaV0ubmFtZVxuICAgICAgaWYoaXNJZ25vcmVkKXtcbiAgICAgICAgaWYobmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgJiYgIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkgJiYgIVtQSFhfUkVGLCBQSFhfUkVGX1NSQ10uaW5jbHVkZXMobmFtZSkpeyB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKG5hbWUpIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKCFzb3VyY2UuaGFzQXR0cmlidXRlKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG1lcmdlRm9jdXNlZElucHV0KHRhcmdldCwgc291cmNlKXtcbiAgICAvLyBza2lwIHNlbGVjdHMgYmVjYXVzZSBGRiB3aWxsIHJlc2V0IGhpZ2hsaWdodGVkIGluZGV4IGZvciBhbnkgc2V0QXR0cmlidXRlXG4gICAgaWYoISh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpeyBET00ubWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwge2V4Y2x1ZGU6IFtcInZhbHVlXCJdfSkgfVxuICAgIGlmKHNvdXJjZS5yZWFkT25seSl7XG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIiwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpXG4gICAgfVxuICB9LFxuXG4gIGhhc1NlbGVjdGlvblJhbmdlKGVsKXtcbiAgICByZXR1cm4gZWwuc2V0U2VsZWN0aW9uUmFuZ2UgJiYgKGVsLnR5cGUgPT09IFwidGV4dFwiIHx8IGVsLnR5cGUgPT09IFwidGV4dGFyZWFcIilcbiAgfSxcblxuICByZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCl7XG4gICAgaWYoIURPTS5pc1RleHR1YWxJbnB1dChmb2N1c2VkKSl7IHJldHVybiB9XG4gICAgbGV0IHdhc0ZvY3VzZWQgPSBmb2N1c2VkLm1hdGNoZXMoXCI6Zm9jdXNcIilcbiAgICBpZihmb2N1c2VkLnJlYWRPbmx5KXsgZm9jdXNlZC5ibHVyKCkgfVxuICAgIGlmKCF3YXNGb2N1c2VkKXsgZm9jdXNlZC5mb2N1cygpIH1cbiAgICBpZih0aGlzLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpKXtcbiAgICAgIGZvY3VzZWQuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZClcbiAgICB9XG4gIH0sXG5cbiAgaXNGb3JtSW5wdXQoZWwpeyByZXR1cm4gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWEpJC9pLnRlc3QoZWwudGFnTmFtZSkgJiYgZWwudHlwZSAhPT0gXCJidXR0b25cIiB9LFxuXG4gIHN5bmNBdHRyc1RvUHJvcHMoZWwpe1xuICAgIGlmKGVsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBDSEVDS0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpKSA+PSAwKXtcbiAgICAgIGVsLmNoZWNrZWQgPSBlbC5nZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIpICE9PSBudWxsXG4gICAgfVxuICB9LFxuXG4gIGlzVGV4dHVhbElucHV0KGVsKXsgcmV0dXJuIEZPQ1VTQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlKSA+PSAwIH0sXG5cbiAgaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpe1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKHBoeFRyaWdnZXJFeHRlcm5hbCkgIT09IG51bGxcbiAgfSxcblxuICBzeW5jUGVuZGluZ1JlZihmcm9tRWwsIHRvRWwsIGRpc2FibGVXaXRoKXtcbiAgICBsZXQgcmVmID0gZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfUkVGKVxuICAgIGlmKHJlZiA9PT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICBsZXQgcmVmU3JjID0gZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfUkVGX1NSQylcblxuICAgIGlmKERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpIHx8IGZyb21FbC5nZXRBdHRyaWJ1dGUoZGlzYWJsZVdpdGgpICE9PSBudWxsKXtcbiAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGZyb21FbCkpeyBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtpc0lnbm9yZWQ6IHRydWV9KSB9XG4gICAgICBET00ucHV0UHJpdmF0ZShmcm9tRWwsIFBIWF9SRUYsIHRvRWwpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgUEhYX0VWRU5UX0NMQVNTRVMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICBmcm9tRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgJiYgdG9FbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSlcbiAgICAgIH0pXG4gICAgICB0b0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGLCByZWYpXG4gICAgICB0b0VsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgcmVmU3JjKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH0sXG5cbiAgY2xlYW5DaGlsZE5vZGVzKGNvbnRhaW5lciwgcGh4VXBkYXRlKXtcbiAgICBpZihET00uaXNQaHhVcGRhdGUoY29udGFpbmVyLCBwaHhVcGRhdGUsIFtcImFwcGVuZFwiLCBcInByZXBlbmRcIl0pKXtcbiAgICAgIGxldCB0b1JlbW92ZSA9IFtdXG4gICAgICBjb250YWluZXIuY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkTm9kZSA9PiB7XG4gICAgICAgIGlmKCFjaGlsZE5vZGUuaWQpe1xuICAgICAgICAgIC8vIFNraXAgd2FybmluZyBpZiBpdCdzIGFuIGVtcHR5IHRleHQgbm9kZSAoZS5nLiBhIG5ldy1saW5lKVxuICAgICAgICAgIGxldCBpc0VtcHR5VGV4dE5vZGUgPSBjaGlsZE5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmIGNoaWxkTm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSBcIlwiXG4gICAgICAgICAgaWYoIWlzRW1wdHlUZXh0Tm9kZSl7XG4gICAgICAgICAgICBsb2dFcnJvcihcIm9ubHkgSFRNTCBlbGVtZW50IHRhZ3Mgd2l0aCBhbiBpZCBhcmUgYWxsb3dlZCBpbnNpZGUgY29udGFpbmVycyB3aXRoIHBoeC11cGRhdGUuXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBgcmVtb3ZpbmcgaWxsZWdhbCBub2RlOiBcIiR7KGNoaWxkTm9kZS5vdXRlckhUTUwgfHwgY2hpbGROb2RlLm5vZGVWYWx1ZSkudHJpbSgpfVwiXFxuXFxuYClcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9SZW1vdmUucHVzaChjaGlsZE5vZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0b1JlbW92ZS5mb3JFYWNoKGNoaWxkTm9kZSA9PiBjaGlsZE5vZGUucmVtb3ZlKCkpXG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VSb290Q29udGFpbmVyKGNvbnRhaW5lciwgdGFnTmFtZSwgYXR0cnMpe1xuICAgIGxldCByZXRhaW5lZEF0dHJzID0gbmV3IFNldChbXCJpZFwiLCBQSFhfU0VTU0lPTiwgUEhYX1NUQVRJQywgUEhYX01BSU4sIFBIWF9ST09UX0lEXSlcbiAgICBpZihjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpe1xuICAgICAgQXJyYXkuZnJvbShjb250YWluZXIuYXR0cmlidXRlcylcbiAgICAgICAgLmZpbHRlcihhdHRyID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhhdHRyLm5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpKVxuXG4gICAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAgICAgLmZpbHRlcihuYW1lID0+ICFyZXRhaW5lZEF0dHJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuXG4gICAgICByZXR1cm4gY29udGFpbmVyXG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSlcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG4gICAgICByZXRhaW5lZEF0dHJzLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoYXR0cikpKVxuICAgICAgbmV3Q29udGFpbmVyLmlubmVySFRNTCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICAgIGNvbnRhaW5lci5yZXBsYWNlV2l0aChuZXdDb250YWluZXIpXG4gICAgICByZXR1cm4gbmV3Q29udGFpbmVyXG4gICAgfVxuICB9LFxuXG4gIGdldFN0aWNreShlbCwgbmFtZSwgZGVmYXVsdFZhbCl7XG4gICAgbGV0IG9wID0gKERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKSB8fCBbXSkuZmluZCgoW2V4aXN0aW5nTmFtZSwgXSkgPT4gbmFtZSA9PT0gZXhpc3RpbmdOYW1lKVxuICAgIGlmKG9wKXtcbiAgICAgIGxldCBbX25hbWUsIF9vcCwgc3Rhc2hlZFJlc3VsdF0gPSBvcFxuICAgICAgcmV0dXJuIHN0YXNoZWRSZXN1bHRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHR5cGVvZihkZWZhdWx0VmFsKSA9PT0gXCJmdW5jdGlvblwiID8gZGVmYXVsdFZhbCgpIDogZGVmYXVsdFZhbFxuICAgIH1cbiAgfSxcblxuICBkZWxldGVTdGlja3koZWwsIG5hbWUpe1xuICAgIHRoaXMudXBkYXRlUHJpdmF0ZShlbCwgXCJzdGlja3lcIiwgW10sIG9wcyA9PiB7XG4gICAgICByZXR1cm4gb3BzLmZpbHRlcigoW2V4aXN0aW5nTmFtZSwgX10pID0+IGV4aXN0aW5nTmFtZSAhPT0gbmFtZSlcbiAgICB9KVxuICB9LFxuXG4gIHB1dFN0aWNreShlbCwgbmFtZSwgb3Ape1xuICAgIGxldCBzdGFzaGVkUmVzdWx0ID0gb3AoZWwpXG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIGxldCBleGlzdGluZ0luZGV4ID0gb3BzLmZpbmRJbmRleCgoW2V4aXN0aW5nTmFtZSwgXSkgPT4gbmFtZSA9PT0gZXhpc3RpbmdOYW1lKVxuICAgICAgaWYoZXhpc3RpbmdJbmRleCA+PSAwKXtcbiAgICAgICAgb3BzW2V4aXN0aW5nSW5kZXhdID0gW25hbWUsIG9wLCBzdGFzaGVkUmVzdWx0XVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BzLnB1c2goW25hbWUsIG9wLCBzdGFzaGVkUmVzdWx0XSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHNcbiAgICB9KVxuICB9LFxuXG4gIGFwcGx5U3RpY2t5T3BlcmF0aW9ucyhlbCl7XG4gICAgbGV0IG9wcyA9IERPTS5wcml2YXRlKGVsLCBcInN0aWNreVwiKVxuICAgIGlmKCFvcHMpeyByZXR1cm4gfVxuXG4gICAgb3BzLmZvckVhY2goKFtuYW1lLCBvcCwgX3N0YXNoZWRdKSA9PiB0aGlzLnB1dFN0aWNreShlbCwgbmFtZSwgb3ApKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERPTVxuIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjaGFubmVsVXBsb2FkZXIsXG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBsb2FkRW50cnkge1xuICBzdGF0aWMgaXNBY3RpdmUoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgaXNOZXcgPSBmaWxlLl9waHhSZWYgPT09IHVuZGVmaW5lZFxuICAgIGxldCBhY3RpdmVSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc0FjdGl2ZSA9IGFjdGl2ZVJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBmaWxlLnNpemUgPiAwICYmIChpc05ldyB8fCBpc0FjdGl2ZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodGVkKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IHByZWZsaWdodGVkUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1BSRUZMSUdIVEVEX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc1ByZWZsaWdodGVkID0gcHJlZmxpZ2h0ZWRSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gaXNQcmVmbGlnaHRlZCAmJiB0aGlzLmlzQWN0aXZlKGZpbGVFbCwgZmlsZSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGZpbGVFbCwgZmlsZSwgdmlldyl7XG4gICAgdGhpcy5yZWYgPSBMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKVxuICAgIHRoaXMuZmlsZUVsID0gZmlsZUVsXG4gICAgdGhpcy5maWxlID0gZmlsZVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm1ldGEgPSBudWxsXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZVxuICAgIHRoaXMuX2lzRG9uZSA9IGZhbHNlXG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwXG4gICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IC0xXG4gICAgdGhpcy5fb25Eb25lID0gZnVuY3Rpb24gKCl7IH1cbiAgICB0aGlzLl9vbkVsVXBkYXRlZCA9IHRoaXMub25FbFVwZGF0ZWQuYmluZCh0aGlzKVxuICAgIHRoaXMuZmlsZUVsLmFkZEV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgfVxuXG4gIG1ldGFkYXRhKCl7IHJldHVybiB0aGlzLm1ldGEgfVxuXG4gIHByb2dyZXNzKHByb2dyZXNzKXtcbiAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGguZmxvb3IocHJvZ3Jlc3MpXG4gICAgaWYodGhpcy5fcHJvZ3Jlc3MgPiB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50KXtcbiAgICAgIGlmKHRoaXMuX3Byb2dyZXNzID49IDEwMCl7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMTAwXG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSAxMDBcbiAgICAgICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIDEwMCwgKCkgPT4ge1xuICAgICAgICAgIExpdmVVcGxvYWRlci51bnRyYWNrRmlsZSh0aGlzLmZpbGVFbCwgdGhpcy5maWxlKVxuICAgICAgICAgIHRoaXMuX29uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gdGhpcy5fcHJvZ3Jlc3NcbiAgICAgICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB0aGlzLl9wcm9ncmVzcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKXtcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWVcbiAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgdGhpcy5fb25Eb25lKClcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5faXNEb25lIH1cblxuICBlcnJvcihyZWFzb24gPSBcImZhaWxlZFwiKXtcbiAgICB0aGlzLmZpbGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB7ZXJyb3I6IHJlYXNvbn0pXG4gICAgaWYoIURPTS5pc0F1dG9VcGxvYWQodGhpcy5maWxlRWwpKXsgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXModGhpcy5maWxlRWwpIH1cbiAgfVxuXG4gIC8vcHJpdmF0ZVxuXG4gIG9uRG9uZShjYWxsYmFjayl7XG4gICAgdGhpcy5fb25Eb25lID0gKCkgPT4ge1xuICAgICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIG9uRWxVcGRhdGVkKCl7XG4gICAgbGV0IGFjdGl2ZVJlZnMgPSB0aGlzLmZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBpZihhY3RpdmVSZWZzLmluZGV4T2YodGhpcy5yZWYpID09PSAtMSl7IHRoaXMuY2FuY2VsKCkgfVxuICB9XG5cbiAgdG9QcmVmbGlnaHRQYXlsb2FkKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3RfbW9kaWZpZWQ6IHRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lOiB0aGlzLmZpbGUubmFtZSxcbiAgICAgIHJlbGF0aXZlX3BhdGg6IHRoaXMuZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgsXG4gICAgICBzaXplOiB0aGlzLmZpbGUuc2l6ZSxcbiAgICAgIHR5cGU6IHRoaXMuZmlsZS50eXBlLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIG1ldGE6IHR5cGVvZih0aGlzLmZpbGUubWV0YSkgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuZmlsZS5tZXRhKCkgOiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICB1cGxvYWRlcih1cGxvYWRlcnMpe1xuICAgIGlmKHRoaXMubWV0YS51cGxvYWRlcil7XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1cGxvYWRlcnNbdGhpcy5tZXRhLnVwbG9hZGVyXSB8fCBsb2dFcnJvcihgbm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgJHt0aGlzLm1ldGEudXBsb2FkZXJ9YClcbiAgICAgIHJldHVybiB7bmFtZTogdGhpcy5tZXRhLnVwbG9hZGVyLCBjYWxsYmFjazogY2FsbGJhY2t9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7bmFtZTogXCJjaGFubmVsXCIsIGNhbGxiYWNrOiBjaGFubmVsVXBsb2FkZXJ9XG4gICAgfVxuICB9XG5cbiAgemlwUG9zdEZsaWdodChyZXNwKXtcbiAgICB0aGlzLm1ldGEgPSByZXNwLmVudHJpZXNbdGhpcy5yZWZdXG4gICAgaWYoIXRoaXMubWV0YSl7IGxvZ0Vycm9yKGBubyBwcmVmbGlnaHQgdXBsb2FkIHJlc3BvbnNlIHJldHVybmVkIHdpdGggcmVmICR7dGhpcy5yZWZ9YCwge2lucHV0OiB0aGlzLmZpbGVFbCwgcmVzcG9uc2U6IHJlc3B9KSB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfRE9ORV9SRUZTLFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVXBsb2FkRW50cnkgZnJvbSBcIi4vdXBsb2FkX2VudHJ5XCJcblxubGV0IGxpdmVVcGxvYWRlckZpbGVSZWYgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVVcGxvYWRlciB7XG4gIHN0YXRpYyBnZW5GaWxlUmVmKGZpbGUpe1xuICAgIGxldCByZWYgPSBmaWxlLl9waHhSZWZcbiAgICBpZihyZWYgIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gcmVmXG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGUuX3BoeFJlZiA9IChsaXZlVXBsb2FkZXJGaWxlUmVmKyspLnRvU3RyaW5nKClcbiAgICAgIHJldHVybiBmaWxlLl9waHhSZWZcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RW50cnlEYXRhVVJMKGlucHV0RWwsIHJlZiwgY2FsbGJhY2spe1xuICAgIGxldCBmaWxlID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGZpbGUgPT4gdGhpcy5nZW5GaWxlUmVmKGZpbGUpID09PSByZWYpXG4gICAgY2FsbGJhY2soVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSlcbiAgfVxuXG4gIHN0YXRpYyBoYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpe1xuICAgIGxldCBhY3RpdmUgPSAwXG4gICAgRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKGlucHV0LmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgIT09IGlucHV0LmdldEF0dHJpYnV0ZShQSFhfRE9ORV9SRUZTKSl7XG4gICAgICAgIGFjdGl2ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gYWN0aXZlID4gMFxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbCl7XG4gICAgbGV0IGZpbGVzID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKVxuICAgIGxldCBmaWxlRGF0YSA9IHt9XG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IHtwYXRoOiBpbnB1dEVsLm5hbWV9XG4gICAgICBsZXQgdXBsb2FkUmVmID0gaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdID0gZmlsZURhdGFbdXBsb2FkUmVmXSB8fCBbXVxuICAgICAgZW50cnkucmVmID0gdGhpcy5nZW5GaWxlUmVmKGZpbGUpXG4gICAgICBlbnRyeS5sYXN0X21vZGlmaWVkID0gZmlsZS5sYXN0TW9kaWZpZWRcbiAgICAgIGVudHJ5Lm5hbWUgPSBmaWxlLm5hbWUgfHwgZW50cnkucmVmXG4gICAgICBlbnRyeS5yZWxhdGl2ZV9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgIGVudHJ5LnR5cGUgPSBmaWxlLnR5cGVcbiAgICAgIGVudHJ5LnNpemUgPSBmaWxlLnNpemVcbiAgICAgIGlmKHR5cGVvZihmaWxlLm1ldGEpID09PSBcImZ1bmN0aW9uXCIpeyBlbnRyeS5tZXRhID0gZmlsZS5tZXRhKCkgfVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMsIGRhdGFUcmFuc2Zlcil7XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSAhPT0gbnVsbCl7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGYgPT4gT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5jb25jYXQobmV3RmlsZXMpKVxuICAgICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgaW5wdXRFbCBmaWxlcyB0byBhbGlnbiBvdXRwdXQgd2l0aCBwcm9ncmFtbWF0aWMgY2hhbmdlcyAoaS5lLiBkcmFnIGFuZCBkcm9wKVxuICAgICAgaWYoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGggPiAwKXsgaW5wdXRFbC5maWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcyB9XG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIGZpbGVzKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlSW5wdXRzKGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGVsID0+IGVsLmZpbGVzICYmIHRoaXMuYWN0aXZlRmlsZXMoZWwpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZXMoaW5wdXQpe1xuICAgIHJldHVybiAoRE9NLnByaXZhdGUoaW5wdXQsIFwiZmlsZXNcIikgfHwgW10pLmZpbHRlcihmID0+IFVwbG9hZEVudHJ5LmlzQWN0aXZlKGlucHV0LCBmKSlcbiAgfVxuXG4gIHN0YXRpYyBpbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihpbnB1dCA9PiB0aGlzLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCl7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXQpLmZpbHRlcihmID0+ICFVcGxvYWRFbnRyeS5pc1ByZWZsaWdodGVkKGlucHV0LCBmKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGlucHV0RWwsIHZpZXcsIG9uQ29tcGxldGUpe1xuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgdGhpcy5fZW50cmllcyA9XG4gICAgICBBcnJheS5mcm9tKExpdmVVcGxvYWRlci5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0RWwpIHx8IFtdKVxuICAgICAgICAubWFwKGZpbGUgPT4gbmV3IFVwbG9hZEVudHJ5KGlucHV0RWwsIGZpbGUsIHZpZXcpKVxuXG4gICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9IHRoaXMuX2VudHJpZXMubGVuZ3RoXG4gIH1cblxuICBlbnRyaWVzKCl7IHJldHVybiB0aGlzLl9lbnRyaWVzIH1cblxuICBpbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIHRoaXMuX2VudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgZW50cnkuemlwUG9zdEZsaWdodChyZXNwKVxuICAgICAgICBlbnRyeS5vbkRvbmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MtLVxuICAgICAgICAgIGlmKHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPT09IDApeyB0aGlzLm9uQ29tcGxldGUoKSB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfSlcblxuICAgIGxldCBncm91cGVkRW50cmllcyA9IHRoaXMuX2VudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgICBpZighZW50cnkubWV0YSl7IHJldHVybiBhY2MgfVxuICAgICAgbGV0IHtuYW1lLCBjYWxsYmFja30gPSBlbnRyeS51cGxvYWRlcihsaXZlU29ja2V0LnVwbG9hZGVycylcbiAgICAgIGFjY1tuYW1lXSA9IGFjY1tuYW1lXSB8fCB7Y2FsbGJhY2s6IGNhbGxiYWNrLCBlbnRyaWVzOiBbXX1cbiAgICAgIGFjY1tuYW1lXS5lbnRyaWVzLnB1c2goZW50cnkpXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG5cbiAgICBmb3IobGV0IG5hbWUgaW4gZ3JvdXBlZEVudHJpZXMpe1xuICAgICAgbGV0IHtjYWxsYmFjaywgZW50cmllc30gPSBncm91cGVkRW50cmllc1tuYW1lXVxuICAgICAgY2FsbGJhY2soZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldClcbiAgICB9XG4gIH1cbn1cbiIsICJsZXQgQVJJQSA9IHtcbiAgZm9jdXNNYWluKCl7XG4gICAgbGV0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluIGgxLCBtYWluLCBoMVwiKVxuICAgIGlmKHRhcmdldCl7XG4gICAgICBsZXQgb3JpZ1RhYkluZGV4ID0gdGFyZ2V0LnRhYkluZGV4XG4gICAgICB0YXJnZXQudGFiSW5kZXggPSAtMVxuICAgICAgdGFyZ2V0LmZvY3VzKClcbiAgICAgIHRhcmdldC50YWJJbmRleCA9IG9yaWdUYWJJbmRleFxuICAgIH1cbiAgfSxcblxuICBhbnlPZihpbnN0YW5jZSwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmZpbmQobmFtZSA9PiBpbnN0YW5jZSBpbnN0YW5jZW9mIG5hbWUpIH0sXG5cbiAgaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgcmV0dXJuKFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZWwucmVsICE9PSBcImlnbm9yZVwiKSB8fFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFyZWFFbGVtZW50ICYmIGVsLmhyZWYgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICghZWwuZGlzYWJsZWQgJiYgKHRoaXMuYW55T2YoZWwsIFtIVE1MSW5wdXRFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudCwgSFRNTFRleHRBcmVhRWxlbWVudCwgSFRNTEJ1dHRvbkVsZW1lbnRdKSkpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCkgfHxcbiAgICAgIChlbC50YWJJbmRleCA+IDAgfHwgKCFpbnRlcmFjdGl2ZU9ubHkgJiYgZWwuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikgIT09IG51bGwgJiYgZWwuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikgIT09IFwidHJ1ZVwiKSlcbiAgICApXG4gIH0sXG5cbiAgYXR0ZW1wdEZvY3VzKGVsLCBpbnRlcmFjdGl2ZU9ubHkpe1xuICAgIGlmKHRoaXMuaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSkpeyB0cnl7IGVsLmZvY3VzKCkgfSBjYXRjaChlKXt9IH1cbiAgICByZXR1cm4gISFkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShlbClcbiAgfSxcblxuICBmb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQsIHRydWUpIHx8IHRoaXMuZm9jdXNGaXJzdEludGVyYWN0aXZlKGNoaWxkLCB0cnVlKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0ZpcnN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzRmlyc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzTGFzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzTGFzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBBUklBIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgSG9va3MgPSB7XG4gIExpdmVGaWxlVXBsb2FkOiB7XG4gICAgYWN0aXZlUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKSB9LFxuXG4gICAgcHJlZmxpZ2h0ZWRSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgfSxcblxuICAgIG1vdW50ZWQoKXsgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKCkgfSxcblxuICAgIHVwZGF0ZWQoKXtcbiAgICAgIGxldCBuZXdQcmVmbGlnaHRzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKVxuICAgICAgaWYodGhpcy5wcmVmbGlnaHRlZFdhcyAhPT0gbmV3UHJlZmxpZ2h0cyl7XG4gICAgICAgIHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSBuZXdQcmVmbGlnaHRzXG4gICAgICAgIGlmKG5ld1ByZWZsaWdodHMgPT09IFwiXCIpe1xuICAgICAgICAgIHRoaXMuX192aWV3LmNhbmNlbFN1Ym1pdCh0aGlzLmVsLmZvcm0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5hY3RpdmVSZWZzKCkgPT09IFwiXCIpeyB0aGlzLmVsLnZhbHVlID0gbnVsbCB9XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCkpXG4gICAgfVxuICB9LFxuXG4gIExpdmVJbWdQcmV2aWV3OiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWVudHJ5LXJlZlwiKVxuICAgICAgdGhpcy5pbnB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpKVxuICAgICAgTGl2ZVVwbG9hZGVyLmdldEVudHJ5RGF0YVVSTCh0aGlzLmlucHV0RWwsIHRoaXMucmVmLCB1cmwgPT4ge1xuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLmVsLnNyYyA9IHVybFxuICAgICAgfSlcbiAgICB9LFxuICAgIGRlc3Ryb3llZCgpe1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybClcbiAgICB9XG4gIH0sXG4gIEZvY3VzV3JhcDoge1xuICAgIG1vdW50ZWQoKXtcbiAgICAgIHRoaXMuZm9jdXNTdGFydCA9IHRoaXMuZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNFbmQgPSB0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNTdGFydC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4gQVJJQS5mb2N1c0xhc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmZvY3VzRW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzRmlyc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6c2hvdy1lbmRcIiwgKCkgPT4gdGhpcy5lbC5mb2N1cygpKVxuICAgICAgaWYod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCkuZGlzcGxheSAhPT0gXCJub25lXCIpe1xuICAgICAgICBBUklBLmZvY3VzRmlyc3QodGhpcy5lbClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubGV0IHNjcm9sbFRvcCA9ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcbmxldCB3aW5IZWlnaHQgPSAoKSA9PiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG5sZXQgaXNBdFZpZXdwb3J0VG9wID0gKGVsKSA9PiB7XG4gIGxldCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgcmV0dXJuIHJlY3QudG9wID49IDAgJiYgcmVjdC5sZWZ0ID49IDAgJiYgcmVjdC50b3AgPD0gd2luSGVpZ2h0KClcbn1cblxubGV0IGlzQXRWaWV3cG9ydEJvdHRvbSA9IChlbCkgPT4ge1xuICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHJldHVybiByZWN0LnJpZ2h0ID49IDAgJiYgcmVjdC5sZWZ0ID49IDAgJiYgcmVjdC5ib3R0b20gPD0gd2luSGVpZ2h0KClcbn1cblxubGV0IGlzV2l0aGluVmlld3BvcnQgPSAoZWwpID0+IHtcbiAgbGV0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICByZXR1cm4gcmVjdC50b3AgPj0gMCAmJiByZWN0LmxlZnQgPj0gMCAmJiByZWN0LnRvcCA8PSB3aW5IZWlnaHQoKVxufVxuXG5Ib29rcy5JbmZpbml0ZVNjcm9sbCA9IHtcbiAgbW91bnRlZCgpe1xuICAgIGxldCBzY3JvbGxCZWZvcmUgPSBzY3JvbGxUb3AoKVxuICAgIGxldCB0b3BPdmVycmFuID0gZmFsc2VcbiAgICBsZXQgdGhyb3R0bGVJbnRlcnZhbCA9IDUwMFxuICAgIGxldCBwZW5kaW5nT3AgPSBudWxsXG5cbiAgICBsZXQgb25Ub3BPdmVycnVuID0gdGhpcy50aHJvdHRsZSh0aHJvdHRsZUludGVydmFsLCAodG9wRXZlbnQsIGZpcnN0Q2hpbGQpID0+IHtcbiAgICAgIHBlbmRpbmdPcCA9ICgpID0+IHRydWVcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCB0b3BFdmVudCwge2lkOiBmaXJzdENoaWxkLmlkLCBfb3ZlcnJhbjogdHJ1ZX0sICgpID0+IHtcbiAgICAgICAgcGVuZGluZ09wID0gbnVsbFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgbGV0IG9uRmlyc3RDaGlsZEF0VG9wID0gdGhpcy50aHJvdHRsZSh0aHJvdHRsZUludGVydmFsLCAodG9wRXZlbnQsIGZpcnN0Q2hpbGQpID0+IHtcbiAgICAgIHBlbmRpbmdPcCA9ICgpID0+IGZpcnN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcInN0YXJ0XCJ9KVxuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKU0hvb2tQdXNoKHRoaXMuZWwsIHRvcEV2ZW50LCB7aWQ6IGZpcnN0Q2hpbGQuaWR9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgICAgaWYoIWlzV2l0aGluVmlld3BvcnQoZmlyc3RDaGlsZCkpeyBmaXJzdENoaWxkLnNjcm9sbEludG9WaWV3KHtibG9jazogXCJzdGFydFwifSkgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgbGV0IG9uTGFzdENoaWxkQXRCb3R0b20gPSB0aGlzLnRocm90dGxlKHRocm90dGxlSW50ZXJ2YWwsIChib3R0b21FdmVudCwgbGFzdENoaWxkKSA9PiB7XG4gICAgICBwZW5kaW5nT3AgPSAoKSA9PiBsYXN0Q2hpbGQuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiBcImVuZFwifSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlNIb29rUHVzaCh0aGlzLmVsLCBib3R0b21FdmVudCwge2lkOiBsYXN0Q2hpbGQuaWR9LCAoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdPcCA9IG51bGxcbiAgICAgICAgaWYoIWlzV2l0aGluVmlld3BvcnQobGFzdENoaWxkKSl7IGxhc3RDaGlsZC5zY3JvbGxJbnRvVmlldyh7YmxvY2s6IFwiZW5kXCJ9KSB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uU2Nyb2xsID0gKGUpID0+IHtcbiAgICAgIGxldCBzY3JvbGxOb3cgPSBzY3JvbGxUb3AoKVxuXG4gICAgICBpZihwZW5kaW5nT3Ape1xuICAgICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxOb3dcbiAgICAgICAgcmV0dXJuIHBlbmRpbmdPcCgpXG4gICAgICB9XG4gICAgICBsZXQgcmVjdCA9IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIGxldCB0b3BFdmVudCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwidmlld3BvcnQtdG9wXCIpKVxuICAgICAgbGV0IGJvdHRvbUV2ZW50ID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUodGhpcy5saXZlU29ja2V0LmJpbmRpbmcoXCJ2aWV3cG9ydC1ib3R0b21cIikpXG4gICAgICBsZXQgbGFzdENoaWxkID0gdGhpcy5lbC5sYXN0RWxlbWVudENoaWxkXG4gICAgICBsZXQgZmlyc3RDaGlsZCA9IHRoaXMuZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIGxldCBpc1Njcm9sbGluZ1VwID0gc2Nyb2xsTm93IDwgc2Nyb2xsQmVmb3JlXG4gICAgICBsZXQgaXNTY3JvbGxpbmdEb3duID0gc2Nyb2xsTm93ID4gc2Nyb2xsQmVmb3JlXG5cbiAgICAgIC8vIGVsIG92ZXJyYW4gd2hpbGUgc2Nyb2xsaW5nIHVwXG4gICAgICBpZihpc1Njcm9sbGluZ1VwICYmIHRvcEV2ZW50ICYmICF0b3BPdmVycmFuICYmIHJlY3QudG9wID49IDApe1xuICAgICAgICB0b3BPdmVycmFuID0gdHJ1ZVxuICAgICAgICBvblRvcE92ZXJydW4odG9wRXZlbnQsIGZpcnN0Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYoaXNTY3JvbGxpbmdEb3duICYmIHRvcE92ZXJyYW4gJiYgcmVjdC50b3AgPD0gMCl7XG4gICAgICAgIHRvcE92ZXJyYW4gPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZih0b3BFdmVudCAmJiBpc1Njcm9sbGluZ1VwICYmIGlzQXRWaWV3cG9ydFRvcChmaXJzdENoaWxkKSl7XG4gICAgICAgIG9uRmlyc3RDaGlsZEF0VG9wKHRvcEV2ZW50LCBmaXJzdENoaWxkKVxuICAgICAgfSBlbHNlIGlmKGJvdHRvbUV2ZW50ICYmIGlzU2Nyb2xsaW5nRG93biAmJiBpc0F0Vmlld3BvcnRCb3R0b20obGFzdENoaWxkKSl7XG4gICAgICAgIG9uTGFzdENoaWxkQXRCb3R0b20oYm90dG9tRXZlbnQsIGxhc3RDaGlsZClcbiAgICAgIH1cbiAgICAgIHNjcm9sbEJlZm9yZSA9IHNjcm9sbE5vd1xuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsKVxuICB9LFxuICBkZXN0cm95ZWQoKXsgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCkgfSxcblxuICB0aHJvdHRsZShpbnRlcnZhbCwgY2FsbGJhY2spe1xuICAgIGxldCBsYXN0Q2FsbEF0ID0gMFxuICAgIGxldCB0aW1lclxuXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKVxuICAgICAgbGV0IHJlbWFpbmluZ1RpbWUgPSBpbnRlcnZhbCAtIChub3cgLSBsYXN0Q2FsbEF0KVxuXG4gICAgICBpZihyZW1haW5pbmdUaW1lIDw9IDAgfHwgcmVtYWluaW5nVGltZSA+IGludGVydmFsKXtcbiAgICAgICAgaWYodGltZXIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICAgIH1cbiAgICAgICAgbGFzdENhbGxBdCA9IG5vd1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKVxuICAgICAgfSBlbHNlIGlmKCF0aW1lcil7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbGFzdENhbGxBdCA9IERhdGUubm93KClcbiAgICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgICAgICBjYWxsYmFjayguLi5hcmdzKVxuICAgICAgICB9LCByZW1haW5pbmdUaW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgSG9va3NcbiIsICJpbXBvcnQge1xuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUG9zdE1vcnBoUmVzdG9yZXIge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXJCZWZvcmUsIGNvbnRhaW5lckFmdGVyLCB1cGRhdGVUeXBlKXtcbiAgICBsZXQgaWRzQmVmb3JlID0gbmV3IFNldCgpXG4gICAgbGV0IGlkc0FmdGVyID0gbmV3IFNldChbLi4uY29udGFpbmVyQWZ0ZXIuY2hpbGRyZW5dLm1hcChjaGlsZCA9PiBjaGlsZC5pZCkpXG5cbiAgICBsZXQgZWxlbWVudHNUb01vZGlmeSA9IFtdXG5cbiAgICBBcnJheS5mcm9tKGNvbnRhaW5lckJlZm9yZS5jaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZihjaGlsZC5pZCl7IC8vIGFsbCBvZiBvdXIgY2hpbGRyZW4gc2hvdWxkIGJlIGVsZW1lbnRzIHdpdGggaWRzXG4gICAgICAgIGlkc0JlZm9yZS5hZGQoY2hpbGQuaWQpXG4gICAgICAgIGlmKGlkc0FmdGVyLmhhcyhjaGlsZC5pZCkpe1xuICAgICAgICAgIGxldCBwcmV2aW91c0VsZW1lbnRJZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZy5pZFxuICAgICAgICAgIGVsZW1lbnRzVG9Nb2RpZnkucHVzaCh7ZWxlbWVudElkOiBjaGlsZC5pZCwgcHJldmlvdXNFbGVtZW50SWQ6IHByZXZpb3VzRWxlbWVudElkfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmNvbnRhaW5lcklkID0gY29udGFpbmVyQWZ0ZXIuaWRcbiAgICB0aGlzLnVwZGF0ZVR5cGUgPSB1cGRhdGVUeXBlXG4gICAgdGhpcy5lbGVtZW50c1RvTW9kaWZ5ID0gZWxlbWVudHNUb01vZGlmeVxuICAgIHRoaXMuZWxlbWVudElkc1RvQWRkID0gWy4uLmlkc0FmdGVyXS5maWx0ZXIoaWQgPT4gIWlkc0JlZm9yZS5oYXMoaWQpKVxuICB9XG5cbiAgLy8gV2UgZG8gdGhlIGZvbGxvd2luZyB0byBvcHRpbWl6ZSBhcHBlbmQvcHJlcGVuZCBvcGVyYXRpb25zOlxuICAvLyAgIDEpIFRyYWNrIGlkcyBvZiBtb2RpZmllZCBlbGVtZW50cyAmIG9mIG5ldyBlbGVtZW50c1xuICAvLyAgIDIpIEFsbCB0aGUgbW9kaWZpZWQgZWxlbWVudHMgYXJlIHB1dCBiYWNrIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBET00gdHJlZVxuICAvLyAgICAgIGJ5IHN0b3JpbmcgdGhlIGlkIG9mIHRoZWlyIHByZXZpb3VzIHNpYmxpbmdcbiAgLy8gICAzKSBOZXcgZWxlbWVudHMgYXJlIGdvaW5nIHRvIGJlIHB1dCBpbiB0aGUgcmlnaHQgcGxhY2UgYnkgbW9ycGhkb20gZHVyaW5nIGFwcGVuZC5cbiAgLy8gICAgICBGb3IgcHJlcGVuZCwgd2UgbW92ZSB0aGVtIHRvIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgY29udGFpbmVyXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQgY29udGFpbmVyID0gRE9NLmJ5SWQodGhpcy5jb250YWluZXJJZClcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkuZm9yRWFjaChlbGVtZW50VG9Nb2RpZnkgPT4ge1xuICAgICAgaWYoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKXtcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKSwgcHJldmlvdXNFbGVtID0+IHtcbiAgICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkID09IHByZXZpb3VzRWxlbS5pZFxuICAgICAgICAgICAgaWYoIWlzSW5SaWdodFBsYWNlKXtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIGVsZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgbGV0IGlzSW5SaWdodFBsYWNlID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IG51bGxcbiAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmKHRoaXMudXBkYXRlVHlwZSA9PSBcInByZXBlbmRcIil7XG4gICAgICB0aGlzLmVsZW1lbnRJZHNUb0FkZC5yZXZlcnNlKCkuZm9yRWFjaChlbGVtSWQgPT4ge1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtSWQpLCBlbGVtID0+IGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGVsZW0pKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJ2YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICB2YXIgdG9Ob2RlQXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcztcbiAgICB2YXIgYXR0cjtcbiAgICB2YXIgYXR0ck5hbWU7XG4gICAgdmFyIGF0dHJOYW1lc3BhY2VVUkk7XG4gICAgdmFyIGF0dHJWYWx1ZTtcbiAgICB2YXIgZnJvbVZhbHVlO1xuXG4gICAgLy8gZG9jdW1lbnQtZnJhZ21lbnRzIGRvbnQgaGF2ZSBhdHRyaWJ1dGVzIHNvIGxldHMgbm90IGRvIGFueXRoaW5nXG4gICAgaWYgKHRvTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBmcm9tTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzIG9uIG9yaWdpbmFsIERPTSBlbGVtZW50XG4gICAgZm9yICh2YXIgaSA9IHRvTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGF0dHIgPSB0b05vZGVBdHRyc1tpXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJOYW1lc3BhY2VVUkkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIucHJlZml4ID09PSAneG1sbnMnKXtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7IC8vIEl0J3Mgbm90IGFsbG93ZWQgdG8gc2V0IGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBYTUxOUyBuYW1lc3BhY2Ugd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBgeG1sbnNgIHByZWZpeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgYXR0cmlidXRlcyBmb3VuZCBvbiB0aGUgb3JpZ2luYWwgRE9NIGVsZW1lbnQgdGhhdFxuICAgIC8vIHdlcmVuJ3QgZm91bmQgb24gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgIHZhciBmcm9tTm9kZUF0dHJzID0gZnJvbU5vZGUuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGQgPSBmcm9tTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGF0dHIgPSBmcm9tTm9kZUF0dHJzW2RdO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuXG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJhbmdlOyAvLyBDcmVhdGUgYSByYW5nZSBvYmplY3QgZm9yIGVmZmljZW50bHkgcmVuZGVyaW5nIHN0cmluZ3MgdG8gZWxlbWVudHMuXG52YXIgTlNfWEhUTUwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5cbnZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQ7XG52YXIgSEFTX1RFTVBMQVRFX1NVUFBPUlQgPSAhIWRvYyAmJiAnY29udGVudCcgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG52YXIgSEFTX1JBTkdFX1NVUFBPUlQgPSAhIWRvYyAmJiBkb2MuY3JlYXRlUmFuZ2UgJiYgJ2NyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCcgaW4gZG9jLmNyZWF0ZVJhbmdlKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHN0cjtcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21SYW5nZShzdHIpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoZG9jLmJvZHkpO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChzdHIpO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cikge1xuICAgIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgZnJhZ21lbnQuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYWJvdXQgdGhlIHNhbWVcbiAqIHZhciBodG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHIsICd0ZXh0L2h0bWwnKTtcbiAqIHJldHVybiBodG1sLmJvZHkuZmlyc3RDaGlsZDtcbiAqXG4gKiBAbWV0aG9kIHRvRWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiB0b0VsZW1lbnQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnRyaW0oKTtcbiAgICBpZiAoSEFTX1RFTVBMQVRFX1NVUFBPUlQpIHtcbiAgICAgIC8vIGF2b2lkIHJlc3RyaWN0aW9ucyBvbiBjb250ZW50IGZvciB0aGluZ3MgbGlrZSBgPHRyPjx0aD5IaTwvdGg+PC90cj5gIHdoaWNoXG4gICAgICAvLyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgZG9lc24ndCBzdXBwb3J0XG4gICAgICAvLyA8dGVtcGxhdGU+IHN1cHBvcnQgbm90IGF2YWlsYWJsZSBpbiBJRVxuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cik7XG4gICAgfSBlbHNlIGlmIChIQVNfUkFOR0VfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdHdvIG5vZGUncyBuYW1lcyBhcmUgdGhlIHNhbWUuXG4gKlxuICogTk9URTogV2UgZG9uJ3QgYm90aGVyIGNoZWNraW5nIGBuYW1lc3BhY2VVUklgIGJlY2F1c2UgeW91IHdpbGwgbmV2ZXIgZmluZCB0d28gSFRNTCBlbGVtZW50cyB3aXRoIHRoZSBzYW1lXG4gKiAgICAgICBub2RlTmFtZSBhbmQgZGlmZmVyZW50IG5hbWVzcGFjZSBVUklzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiIFRoZSB0YXJnZXQgZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29tcGFyZU5vZGVOYW1lcyhmcm9tRWwsIHRvRWwpIHtcbiAgICB2YXIgZnJvbU5vZGVOYW1lID0gZnJvbUVsLm5vZGVOYW1lO1xuICAgIHZhciB0b05vZGVOYW1lID0gdG9FbC5ub2RlTmFtZTtcbiAgICB2YXIgZnJvbUNvZGVTdGFydCwgdG9Db2RlU3RhcnQ7XG5cbiAgICBpZiAoZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZyb21Db2RlU3RhcnQgPSBmcm9tTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcbiAgICB0b0NvZGVTdGFydCA9IHRvTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcblxuICAgIC8vIElmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBhIHZpcnR1YWwgRE9NIG5vZGUgb3IgU1ZHIG5vZGUgdGhlbiB3ZSBtYXlcbiAgICAvLyBuZWVkIHRvIG5vcm1hbGl6ZSB0aGUgdGFnIG5hbWUgYmVmb3JlIGNvbXBhcmluZy4gTm9ybWFsIEhUTUwgZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBpbiB0aGUgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJcbiAgICAvLyBhcmUgY29udmVydGVkIHRvIHVwcGVyIGNhc2VcbiAgICBpZiAoZnJvbUNvZGVTdGFydCA8PSA5MCAmJiB0b0NvZGVTdGFydCA+PSA5NykgeyAvLyBmcm9tIGlzIHVwcGVyIGFuZCB0byBpcyBsb3dlclxuICAgICAgICByZXR1cm4gZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmICh0b0NvZGVTdGFydCA8PSA5MCAmJiBmcm9tQ29kZVN0YXJ0ID49IDk3KSB7IC8vIHRvIGlzIHVwcGVyIGFuZCBmcm9tIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiB0b05vZGVOYW1lID09PSBmcm9tTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlbGVtZW50LCBvcHRpb25hbGx5IHdpdGggYSBrbm93biBuYW1lc3BhY2UgVVJJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBlbGVtZW50IG5hbWUsIGUuZy4gJ2Rpdicgb3IgJ3N2ZydcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlVVJJXSB0aGUgZWxlbWVudCdzIG5hbWVzcGFjZSBVUkksIGkuZS4gdGhlIHZhbHVlIG9mXG4gKiBpdHMgYHhtbG5zYCBhdHRyaWJ1dGUgb3IgaXRzIGluZmVycmVkIG5hbWVzcGFjZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7XG4gICAgcmV0dXJuICFuYW1lc3BhY2VVUkkgfHwgbmFtZXNwYWNlVVJJID09PSBOU19YSFRNTCA/XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgY2hpbGRyZW4gb2Ygb25lIERPTSBlbGVtZW50IHRvIGFub3RoZXIgRE9NIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpO1xuICAgICAgICBjdXJDaGlsZCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHRvRWw7XG59XG5cbmZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7XG4gICAgaWYgKGZyb21FbFtuYW1lXSAhPT0gdG9FbFtuYW1lXSkge1xuICAgICAgICBmcm9tRWxbbmFtZV0gPSB0b0VsW25hbWVdO1xuICAgICAgICBpZiAoZnJvbUVsW25hbWVdKSB7XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBzcGVjaWFsRWxIYW5kbGVycyA9IHtcbiAgICBPUFRJT046IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGZyb21FbC5wYXJlbnROb2RlO1xuICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUgPT09ICdTRUxFQ1QnICYmICFwYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tRWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpICYmICF0b0VsLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIE1TIEVkZ2UgYnVnIHdoZXJlIHRoZSAnc2VsZWN0ZWQnIGF0dHJpYnV0ZSBjYW4gb25seSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGlmIHNldCB0byBhIG5vbi1lbXB0eSB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTIwODc2NzkvXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gcmVzZXQgc2VsZWN0IGVsZW1lbnQncyBzZWxlY3RlZEluZGV4IHRvIC0xLCBvdGhlcndpc2Ugc2V0dGluZ1xuICAgICAgICAgICAgICAgIC8vIGZyb21FbC5zZWxlY3RlZCB1c2luZyB0aGUgc3luY0Jvb2xlYW5BdHRyUHJvcCBiZWxvdyBoYXMgbm8gZWZmZWN0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb3JyZWN0IHNlbGVjdGVkSW5kZXggd2lsbCBiZSBzZXQgaW4gdGhlIFNFTEVDVCBzcGVjaWFsIGhhbmRsZXIgYmVsb3cuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdzZWxlY3RlZCcpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgaXMgc3BlY2lhbCBmb3IgdGhlIDxpbnB1dD4gZWxlbWVudCBzaW5jZSBpdCBzZXRzXG4gICAgICogdGhlIGluaXRpYWwgdmFsdWUuIENoYW5naW5nIHRoZSBcInZhbHVlXCIgYXR0cmlidXRlIHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICogXCJ2YWx1ZVwiIHByb3BlcnR5IHdpbGwgaGF2ZSBubyBlZmZlY3Qgc2luY2UgaXQgaXMgb25seSB1c2VkIHRvIHRoZSBzZXQgdGhlXG4gICAgICogaW5pdGlhbCB2YWx1ZS4gIFNpbWlsYXIgZm9yIHRoZSBcImNoZWNrZWRcIiBhdHRyaWJ1dGUsIGFuZCBcImRpc2FibGVkXCIuXG4gICAgICovXG4gICAgSU5QVVQ6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2NoZWNrZWQnKTtcbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgIGlmIChmcm9tRWwudmFsdWUgIT09IHRvRWwudmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IHRvRWwudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIFRFWFRBUkVBOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIE5lZWRlZCBmb3IgSUUuIEFwcGFyZW50bHkgSUUgc2V0cyB0aGUgcGxhY2Vob2xkZXIgYXMgdGhlXG4gICAgICAgICAgICAvLyBub2RlIHZhbHVlIGFuZCB2aXNlIHZlcnNhLiBUaGlzIGlnbm9yZXMgYW4gZW1wdHkgdXBkYXRlLlxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PSBuZXdWYWx1ZSB8fCAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlID09IGZyb21FbC5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFNFTEVDVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGxvb3AgdGhyb3VnaCBjaGlsZHJlbiBvZiBmcm9tRWwsIG5vdCB0b0VsIHNpbmNlIG5vZGVzIGNhbiBiZSBtb3ZlZFxuICAgICAgICAgICAgLy8gZnJvbSB0b0VsIHRvIGZyb21FbCBkaXJlY3RseSB3aGVuIG1vcnBoaW5nLlxuICAgICAgICAgICAgLy8gQXQgdGhlIHRpbWUgdGhpcyBzcGVjaWFsIGhhbmRsZXIgaXMgaW52b2tlZCwgYWxsIGNoaWxkcmVuIGhhdmUgYWxyZWFkeSBiZWVuIG1vcnBoZWRcbiAgICAgICAgICAgIC8vIGFuZCBhcHBlbmRlZCB0byAvIHJlbW92ZWQgZnJvbSBmcm9tRWwsIHNvIHVzaW5nIGZyb21FbCBoZXJlIGlzIHNhZmUgYW5kIGNvcnJlY3QuXG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBvcHRncm91cDtcbiAgICAgICAgICAgIHZhciBub2RlTmFtZTtcbiAgICAgICAgICAgIHdoaWxlKGN1ckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBjdXJDaGlsZC5ub2RlTmFtZSAmJiBjdXJDaGlsZC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IGN1ckNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IG9wdGdyb3VwLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VyQ2hpbGQgJiYgb3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb21FbC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSA9IDExO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXROb2RlS2V5KG5vZGUpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpKSB8fCBub2RlLmlkO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1vcnBoZG9tKGZyb21Ob2RlLCB0b05vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRvTm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdIVE1MJyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIHZhciB0b05vZGVIdG1sID0gdG9Ob2RlO1xuICAgICAgICB0b05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgICAgICB0b05vZGUuaW5uZXJIVE1MID0gdG9Ob2RlSHRtbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvTm9kZSA9IHRvRWxlbWVudCh0b05vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgIHRvTm9kZSA9IHRvTm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG5cbiAgICB2YXIgZ2V0Tm9kZUtleSA9IG9wdGlvbnMuZ2V0Tm9kZUtleSB8fCBkZWZhdWx0R2V0Tm9kZUtleTtcbiAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZUFkZGVkID0gb3B0aW9ucy5vbk5vZGVBZGRlZCB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZUVsVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25FbFVwZGF0ZWQgPSBvcHRpb25zLm9uRWxVcGRhdGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25Ob2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgc2tpcEZyb21DaGlsZHJlbiA9IG9wdGlvbnMuc2tpcEZyb21DaGlsZHJlbiB8fCBub29wO1xuICAgIHZhciBhZGRDaGlsZCA9IG9wdGlvbnMuYWRkQ2hpbGQgfHwgZnVuY3Rpb24ocGFyZW50LCBjaGlsZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpOyB9O1xuICAgIHZhciBjaGlsZHJlbk9ubHkgPSBvcHRpb25zLmNoaWxkcmVuT25seSA9PT0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgb2JqZWN0IGlzIHVzZWQgYXMgYSBsb29rdXAgdG8gcXVpY2tseSBmaW5kIGFsbCBrZXllZCBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgdmFyIGZyb21Ob2Rlc0xvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleWVkUmVtb3ZhbExpc3QgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZEtleWVkUmVtb3ZhbChrZXkpIHtcbiAgICAgIGtleWVkUmVtb3ZhbExpc3QucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG5cbiAgICAgICAgICB2YXIga2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKHNraXBLZXllZE5vZGVzICYmIChrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBza2lwcGluZyBrZXllZCBub2RlcyB0aGVuIHdlIGFkZCB0aGUga2V5XG4gICAgICAgICAgICAvLyB0byBhIGxpc3Qgc28gdGhhdCBpdCBjYW4gYmUgaGFuZGxlZCBhdCB0aGUgdmVyeSBlbmQuXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT25seSByZXBvcnQgdGhlIG5vZGUgYXMgZGlzY2FyZGVkIGlmIGl0IGlzIG5vdCBrZXllZC4gV2UgZG8gdGhpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyBhdCB0aGUgZW5kIHdlIGxvb3AgdGhyb3VnaCBhbGwga2V5ZWQgZWxlbWVudHMgdGhhdCB3ZXJlIHVubWF0Y2hlZFxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gZGlzY2FyZCB0aGVtIGluIG9uZSBmaW5hbCBwYXNzLlxuICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgICAgIGlmIChjdXJDaGlsZC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKGN1ckNoaWxkLCBza2lwS2V5ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVtb3ZlcyBhIERPTSBub2RlIG91dCBvZiB0aGUgb3JpZ2luYWwgRE9NXG4gICAgKlxuICAgICogQHBhcmFtICB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmVcbiAgICAqIEBwYXJhbSAge05vZGV9IHBhcmVudE5vZGUgVGhlIG5vZGVzIHBhcmVudFxuICAgICogQHBhcmFtICB7Qm9vbGVhbn0gc2tpcEtleWVkTm9kZXMgSWYgdHJ1ZSB0aGVuIGVsZW1lbnRzIHdpdGgga2V5cyB3aWxsIGJlIHNraXBwZWQgYW5kIG5vdCBkaXNjYXJkZWQuXG4gICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUsIHBhcmVudE5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAob25CZWZvcmVOb2RlRGlzY2FyZGVkKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIG9uTm9kZURpc2NhcmRlZChub2RlKTtcbiAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvLyAvLyBUcmVlV2Fsa2VyIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShyb290KSB7XG4gICAgLy8gICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAvLyAgICAgICAgIHJvb3QsXG4gICAgLy8gICAgICAgICBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy9cbiAgICAvLyAgICAgdmFyIGVsO1xuICAgIC8vICAgICB3aGlsZSgoZWwgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIC8vIE5vZGVJdGVyYXRvciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgLy8gICAgIHZhciBub2RlSXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iobm9kZSwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IG5vZGVJdGVyYXRvci5uZXh0Tm9kZSgpKSkge1xuICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgIC8vICAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gZWw7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBjdXJDaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXYWxrIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgaW5kZXhUcmVlKGN1ckNoaWxkKTtcblxuICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleFRyZWUoZnJvbU5vZGUpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlTm9kZUFkZGVkKGVsKSB7XG4gICAgICBvbk5vZGVBZGRlZChlbCk7XG5cbiAgICAgIHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHVubWF0Y2hlZEZyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtrZXldO1xuICAgICAgICAgIC8vIGlmIHdlIGZpbmQgYSBkdXBsaWNhdGUgI2lkIG5vZGUgaW4gY2FjaGUsIHJlcGxhY2UgYGVsYCB3aXRoIGNhY2hlIHZhbHVlXG4gICAgICAgICAgLy8gYW5kIG1vcnBoIGl0IHRvIHRoZSBjaGlsZCBub2RlLlxuICAgICAgICAgIGlmICh1bm1hdGNoZWRGcm9tRWwgJiYgY29tcGFyZU5vZGVOYW1lcyhjdXJDaGlsZCwgdW5tYXRjaGVkRnJvbUVsKSkge1xuICAgICAgICAgICAgY3VyQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgICBtb3JwaEVsKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWN1cnNpdmVseSBjYWxsIGZvciBjdXJDaGlsZCBhbmQgaXQncyBjaGlsZHJlbiB0byBzZWUgaWYgd2UgZmluZCBzb21ldGhpbmcgaW5cbiAgICAgICAgICAvLyBmcm9tTm9kZXNMb29rdXBcbiAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyQ2hpbGQgPSBuZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzXG4gICAgICAvLyBub24tbnVsbCB0aGVuIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWRcbiAgICAgIC8vIHRvIGJlIHJlbW92ZWRcbiAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAoKGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKSkpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICB9XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGNoaWxkcmVuT25seSkge1xuICAgICAgdmFyIHRvRWxLZXkgPSBnZXROb2RlS2V5KHRvRWwpO1xuXG4gICAgICBpZiAodG9FbEtleSkge1xuICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHdpdGggYW4gSUQgaXMgYmVpbmcgbW9ycGhlZCB0aGVuIGl0IHdpbGwgYmUgaW4gdGhlIGZpbmFsXG4gICAgICAgIC8vIERPTSBzbyBjbGVhciBpdCBvdXQgb2YgdGhlIHNhdmVkIGVsZW1lbnRzIGNvbGxlY3Rpb25cbiAgICAgICAgZGVsZXRlIGZyb21Ob2Rlc0xvb2t1cFt0b0VsS2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgaWYgKG9uQmVmb3JlRWxVcGRhdGVkKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnQgZmlyc3RcbiAgICAgICAgbW9ycGhBdHRycyhmcm9tRWwsIHRvRWwpO1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBvbkVsVXBkYXRlZChmcm9tRWwpO1xuXG4gICAgICAgIGlmIChvbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmcm9tRWwubm9kZU5hbWUgIT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlY2lhbEVsSGFuZGxlcnMuVEVYVEFSRUEoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgICAgdmFyIHNraXBGcm9tID0gc2tpcEZyb21DaGlsZHJlbihmcm9tRWwsIHRvRWwpO1xuICAgICAgdmFyIGN1clRvTm9kZUNoaWxkID0gdG9FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgIHZhciBjdXJUb05vZGVLZXk7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVLZXk7XG5cbiAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB2YXIgdG9OZXh0U2libGluZztcbiAgICAgIHZhciBtYXRjaGluZ0Zyb21FbDtcblxuICAgICAgLy8gd2FsayB0aGUgY2hpbGRyZW5cbiAgICAgIG91dGVyOiB3aGlsZSAoY3VyVG9Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdG9OZXh0U2libGluZyA9IGN1clRvTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBjdXJUb05vZGVLZXkgPSBnZXROb2RlS2V5KGN1clRvTm9kZUNoaWxkKTtcblxuICAgICAgICAvLyB3YWxrIHRoZSBmcm9tTm9kZSBjaGlsZHJlbiBhbGwgdGhlIHdheSB0aHJvdWdoXG4gICAgICAgIHdoaWxlICghc2tpcEZyb20gJiYgY3VyRnJvbU5vZGVDaGlsZCkge1xuICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZSAmJiBjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgdmFyIGN1ckZyb21Ob2RlVHlwZSA9IGN1ckZyb21Ob2RlQ2hpbGQubm9kZVR5cGU7XG5cbiAgICAgICAgICAvLyB0aGlzIG1lYW5zIGlmIHRoZSBjdXJGcm9tTm9kZUNoaWxkIGRvZXNudCBoYXZlIGEgbWF0Y2ggd2l0aCB0aGUgY3VyVG9Ob2RlQ2hpbGRcbiAgICAgICAgICB2YXIgaXNDb21wYXRpYmxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBFbGVtZW50IG5vZGVzXG5cbiAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUtleSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB0YXJnZXQgbm9kZSBoYXMgYSBrZXkgc28gd2Ugd2FudCB0byBtYXRjaCBpdCB1cCB3aXRoIHRoZSBjb3JyZWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWVcbiAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICE9PSBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUgZG9lcyBub3QgaGF2ZSBhIG1hdGNoaW5nIGtleSBzb1xuICAgICAgICAgICAgICAgICAgLy8gbGV0J3MgY2hlY2sgb3VyIGxvb2t1cCB0byBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaGluZyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgLy8gRE9NIHRyZWVcbiAgICAgICAgICAgICAgICAgIGlmICgobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21OZXh0U2libGluZyA9PT0gbWF0Y2hpbmdGcm9tRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHNpbmdsZSBlbGVtZW50IHJlbW92YWxzLiBUbyBhdm9pZCByZW1vdmluZyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBET00gbm9kZSBvdXQgb2YgdGhlIHRyZWUgKHNpbmNlIHRoYXQgY2FuIGJyZWFrIENTUyB0cmFuc2l0aW9ucywgZXRjLiksXG4gICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2lsbCBpbnN0ZWFkIGRpc2NhcmQgdGhlIGN1cnJlbnQgbm9kZSBhbmQgd2FpdCB1bnRpbCB0aGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGlvbiB0byBwcm9wZXJseSBtYXRjaCB1cCB0aGUga2V5ZWQgdGFyZ2V0IGVsZW1lbnQgd2l0aCBpdHMgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaGluZyBrZXllZCBlbGVtZW50IHNvbWV3aGVyZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTGV0J3MgbW92ZSB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgaW50byB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgbW9ycGhcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpdC5cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFdlIHVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiByZXBsYWNlQ2hpbGQgYmVjYXVzZSB3ZSB3YW50IHRvIGdvIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYHJlbW92ZU5vZGUoKWAgZnVuY3Rpb24gZm9yIHRoZSBub2RlIHRoYXQgaXMgYmVpbmcgZGlzY2FyZGVkIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbGlmZWN5Y2xlIGhvb2tzIGFyZSBjb3JyZWN0bHkgaW52b2tlZFxuICAgICAgICAgICAgICAgICAgICAgIGZyb21FbC5pbnNlcnRCZWZvcmUobWF0Y2hpbmdGcm9tRWwsIGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gbWF0Y2hpbmdGcm9tRWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgbm90IGNvbXBhdGlibGUgc2luY2UgdGhlIFwidG9cIiBub2RlIGhhcyBhIGtleSBhbmQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gbWF0Y2hpbmcga2V5ZWQgbm9kZSBpbiB0aGUgc291cmNlIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGhhcyBhIGtleVxuICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gaXNDb21wYXRpYmxlICE9PSBmYWxzZSAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGNvbXBhdGlibGUgRE9NIGVsZW1lbnRzIHNvIHRyYW5zZm9ybVxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGUgdG8gbWF0Y2ggdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgRE9NIG5vZGUuXG4gICAgICAgICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IGN1ckZyb21Ob2RlVHlwZSA9PSBDT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBvciBDb21tZW50IG5vZGVzXG4gICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIFNpbXBseSB1cGRhdGUgbm9kZVZhbHVlIG9uIHRoZSBvcmlnaW5hbCBub2RlIHRvXG4gICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdGV4dCB2YWx1ZVxuICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgIT09IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlID0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAvLyBBZHZhbmNlIGJvdGggdGhlIFwidG9cIiBjaGlsZCBhbmQgdGhlIFwiZnJvbVwiIGNoaWxkIHNpbmNlIHdlIGZvdW5kIGEgbWF0Y2hcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgZWxzZSB0byBkbyBhcyB3ZSBhbHJlYWR5IHJlY3Vyc2l2ZWx5IGNhbGxlZCBtb3JwaENoaWxkcmVuIGFib3ZlXG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm8gY29tcGF0aWJsZSBtYXRjaCBzbyByZW1vdmUgdGhlIG9sZCBub2RlIGZyb20gdGhlIERPTSBhbmQgY29udGludWUgdHJ5aW5nIHRvIGZpbmQgYVxuICAgICAgICAgIC8vIG1hdGNoIGluIHRoZSBvcmlnaW5hbCBET00uIEhvd2V2ZXIsIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgZnJvbSBub2RlIGlzIG5vdCBrZXllZFxuICAgICAgICAgIC8vIHNpbmNlIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBrZXllZCBub2RlIG1pZ2h0IG1hdGNoIHVwIHdpdGggYSBub2RlIHNvbWV3aGVyZSBlbHNlIGluIHRoZVxuICAgICAgICAgIC8vIHRhcmdldCB0cmVlIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRpc2NhcmQgaXQganVzdCB5ZXQgc2luY2UgaXQgc3RpbGwgbWlnaHQgZmluZCBhXG4gICAgICAgICAgLy8gaG9tZSBpbiB0aGUgZmluYWwgRE9NIHRyZWUuIEFmdGVyIGV2ZXJ5dGhpbmcgaXMgZG9uZSB3ZSB3aWxsIHJlbW92ZSBhbnkga2V5ZWQgbm9kZXNcbiAgICAgICAgICAvLyB0aGF0IGRpZG4ndCBmaW5kIGEgaG9tZVxuICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICB9IC8vIEVORDogd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge31cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiB3ZSBkaWQgbm90IGZpbmQgYSBjYW5kaWRhdGUgbWF0Y2ggZm9yXG4gICAgICAgIC8vIG91ciBcInRvIG5vZGVcIiBhbmQgd2UgZXhoYXVzdGVkIGFsbCBvZiB0aGUgY2hpbGRyZW4gXCJmcm9tXCJcbiAgICAgICAgLy8gbm9kZXMuIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IGFwcGVuZCB0aGUgY3VycmVudCBcInRvXCIgbm9kZVxuICAgICAgICAvLyB0byB0aGUgZW5kXG4gICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkge1xuICAgICAgICAgIC8vIE1PUlBIXG4gICAgICAgICAgaWYoIXNraXBGcm9tKXsgYWRkQ2hpbGQoZnJvbUVsLCBtYXRjaGluZ0Zyb21FbCk7IH1cbiAgICAgICAgICBtb3JwaEVsKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ID0gb25CZWZvcmVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCkge1xuICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDaGlsZChmcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpO1xuXG4gICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICBpZiAoc3BlY2lhbEVsSGFuZGxlcikge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICB9XG4gICAgfSAvLyBFTkQ6IG1vcnBoQ2hpbGRyZW4oLi4uKVxuXG4gICAgdmFyIG1vcnBoZWROb2RlID0gZnJvbU5vZGU7XG4gICAgdmFyIG1vcnBoZWROb2RlVHlwZSA9IG1vcnBoZWROb2RlLm5vZGVUeXBlO1xuICAgIHZhciB0b05vZGVUeXBlID0gdG9Ob2RlLm5vZGVUeXBlO1xuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBhcmUgZ2l2ZW4gdHdvIERPTSBub2RlcyB0aGF0IGFyZSBub3RcbiAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgaWYgKCFjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpKSB7XG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3ZlQ2hpbGRyZW4oZnJvbU5vZGUsIGNyZWF0ZUVsZW1lbnROUyh0b05vZGUubm9kZU5hbWUsIHRvTm9kZS5uYW1lc3BhY2VVUkkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR29pbmcgZnJvbSBhbiBlbGVtZW50IG5vZGUgdG8gYSB0ZXh0IG5vZGVcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBtb3JwaGVkTm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkgeyAvLyBUZXh0IG9yIGNvbW1lbnQgbm9kZVxuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSB7XG4gICAgICAgICAgaWYgKG1vcnBoZWROb2RlLm5vZGVWYWx1ZSAhPT0gdG9Ob2RlLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUubm9kZVZhbHVlID0gdG9Ob2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGV4dCBub2RlIHRvIHNvbWV0aGluZyBlbHNlXG4gICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgLy8gdG9zcyBvdXQgdGhlIFwiZnJvbSBub2RlXCIgYW5kIHVzZSB0aGUgXCJ0byBub2RlXCJcbiAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b05vZGUuaXNTYW1lTm9kZSAmJiB0b05vZGUuaXNTYW1lTm9kZShtb3JwaGVkTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtb3JwaEVsKG1vcnBoZWROb2RlLCB0b05vZGUsIGNoaWxkcmVuT25seSk7XG5cbiAgICAgIC8vIFdlIG5vdyBuZWVkIHRvIGxvb3Agb3ZlciBhbnkga2V5ZWQgbm9kZXMgdGhhdCBtaWdodCBuZWVkIHRvIGJlXG4gICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgLy8gbmV2ZXIgZm91bmQgYSBtYXRjaC4gV2hlbiBhIGtleWVkIG5vZGUgaXMgbWF0Y2hlZCB1cCB3ZSByZW1vdmVcbiAgICAgIC8vIGl0IG91dCBvZiBmcm9tTm9kZXNMb29rdXAgYW5kIHdlIHVzZSBmcm9tTm9kZXNMb29rdXAgdG8gZGV0ZXJtaW5lXG4gICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgIGlmIChrZXllZFJlbW92YWxMaXN0KSB7XG4gICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWtleWVkUmVtb3ZhbExpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgaWYgKGVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWxUb1JlbW92ZSwgZWxUb1JlbW92ZS5wYXJlbnROb2RlLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkgJiYgbW9ycGhlZE5vZGUgIT09IGZyb21Ob2RlICYmIGZyb21Ob2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChtb3JwaGVkTm9kZS5hY3R1YWxpemUpIHtcbiAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3JwaGVkTm9kZS5hY3R1YWxpemUoZnJvbU5vZGUub3duZXJEb2N1bWVudCB8fCBkb2MpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgaGFkIHRvIHN3YXAgb3V0IHRoZSBmcm9tIG5vZGUgd2l0aCBhIG5ldyBub2RlIGJlY2F1c2UgdGhlIG9sZFxuICAgICAgLy8gbm9kZSB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdGFyZ2V0IG5vZGUgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAvLyByZXBsYWNlIHRoZSBvbGQgRE9NIG5vZGUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLiBUaGlzIGlzIG9ubHlcbiAgICAgIC8vIHBvc3NpYmxlIGlmIHRoZSBvcmlnaW5hbCBET00gbm9kZSB3YXMgcGFydCBvZiBhIERPTSB0cmVlIHdoaWNoXG4gICAgICAvLyB3ZSBrbm93IGlzIHRoZSBjYXNlIGlmIGl0IGhhcyBhIHBhcmVudCBub2RlLlxuICAgICAgZnJvbU5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9ycGhlZE5vZGUsIGZyb21Ob2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gIH07XG59XG5cbnZhciBtb3JwaGRvbSA9IG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9ycGhkb207XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX0ZFRURCQUNLX0ZPUixcbiAgUEhYX1BSVU5FLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUklHR0VSX0FDVElPTixcbiAgUEhYX1VQREFURSxcbiAgUEhYX1NUUkVBTSxcbiAgUEhYX1NUUkVBTV9SRUYsXG4gIFBIWF9WSUVXUE9SVF9UT1AsXG4gIFBIWF9WSUVXUE9SVF9CT1RUT00sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGRldGVjdER1cGxpY2F0ZUlkcyxcbiAgaXNDaWRcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUG9zdE1vcnBoUmVzdG9yZXIgZnJvbSBcIi4vZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXJcIlxuaW1wb3J0IG1vcnBoZG9tIGZyb20gXCJtb3JwaGRvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTVBhdGNoIHtcbiAgc3RhdGljIHBhdGNoRWwoZnJvbUVsLCB0b0VsLCBhY3RpdmVFbGVtZW50KXtcbiAgICBtb3JwaGRvbShmcm9tRWwsIHRvRWwsIHtcbiAgICAgIGNoaWxkcmVuT25seTogZmFsc2UsXG4gICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICBpZihhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShmcm9tRWwpICYmIERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGNvbnRhaW5lciwgaWQsIGh0bWwsIHN0cmVhbXMsIHRhcmdldENJRCl7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5yb290SUQgPSB2aWV3LnJvb3QuaWRcbiAgICB0aGlzLmh0bWwgPSBodG1sXG4gICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtc1xuICAgIHRoaXMuc3RyZWFtSW5zZXJ0cyA9IHt9XG4gICAgdGhpcy50YXJnZXRDSUQgPSB0YXJnZXRDSURcbiAgICB0aGlzLmNpZFBhdGNoID0gaXNDaWQodGhpcy50YXJnZXRDSUQpXG4gICAgdGhpcy5wZW5kaW5nUmVtb3ZlcyA9IFtdXG4gICAgdGhpcy5waHhSZW1vdmUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIHRoaXMuY2FsbGJhY2tzID0ge1xuICAgICAgYmVmb3JlYWRkZWQ6IFtdLCBiZWZvcmV1cGRhdGVkOiBbXSwgYmVmb3JlcGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcmFkZGVkOiBbXSwgYWZ0ZXJ1cGRhdGVkOiBbXSwgYWZ0ZXJkaXNjYXJkZWQ6IFtdLCBhZnRlcnBoeENoaWxkQWRkZWQ6IFtdLFxuICAgICAgYWZ0ZXJ0cmFuc2l0aW9uc0Rpc2NhcmRlZDogW11cbiAgICB9XG4gIH1cblxuICBiZWZvcmUoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYmVmb3JlJHtraW5kfWBdLnB1c2goY2FsbGJhY2spIH1cbiAgYWZ0ZXIoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuXG4gIHRyYWNrQmVmb3JlKGtpbmQsIC4uLmFyZ3Mpe1xuICAgIHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIHRyYWNrQWZ0ZXIoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGFmdGVyJHtraW5kfWBdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soLi4uYXJncykpXG4gIH1cblxuICBtYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpe1xuICAgIGxldCBwaHhVcGRhdGUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIERPTS5hbGwodGhpcy5jb250YWluZXIsIGBbJHtwaHhVcGRhdGV9PSR7UEhYX1NUUkVBTX1dYCwgZWwgPT4gZWwuaW5uZXJIVE1MID0gXCJcIilcbiAgICBET00uYWxsKHRoaXMuY29udGFpbmVyLCBgWyR7cGh4VXBkYXRlfT1hcHBlbmRdID4gKiwgWyR7cGh4VXBkYXRlfT1wcmVwZW5kXSA+ICpgLCBlbCA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX1BSVU5FLCBcIlwiKVxuICAgIH0pXG4gIH1cblxuICBwZXJmb3JtKGlzSm9pblBhdGNoKXtcbiAgICBsZXQge3ZpZXcsIGxpdmVTb2NrZXQsIGNvbnRhaW5lciwgaHRtbH0gPSB0aGlzXG4gICAgbGV0IHRhcmdldENvbnRhaW5lciA9IHRoaXMuaXNDSURQYXRjaCgpID8gdGhpcy50YXJnZXRDSURDb250YWluZXIoaHRtbCkgOiBjb250YWluZXJcbiAgICBpZih0aGlzLmlzQ0lEUGF0Y2goKSAmJiAhdGFyZ2V0Q29udGFpbmVyKXsgcmV0dXJuIH1cblxuICAgIGxldCBmb2N1c2VkID0gbGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBsZXQge3NlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmR9ID0gZm9jdXNlZCAmJiBET00uaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkgPyBmb2N1c2VkIDoge31cbiAgICBsZXQgcGh4VXBkYXRlID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgbGV0IHBoeEZlZWRiYWNrRm9yID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpXG4gICAgbGV0IGRpc2FibGVXaXRoID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpXG4gICAgbGV0IHBoeFZpZXdwb3J0VG9wID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9WSUVXUE9SVF9UT1ApXG4gICAgbGV0IHBoeFZpZXdwb3J0Qm90dG9tID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9WSUVXUE9SVF9CT1RUT00pXG4gICAgbGV0IHBoeFRyaWdnZXJFeHRlcm5hbCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVFJJR0dFUl9BQ1RJT04pXG4gICAgbGV0IGFkZGVkID0gW11cbiAgICBsZXQgdHJhY2tlZElucHV0cyA9IFtdXG4gICAgbGV0IHVwZGF0ZXMgPSBbXVxuICAgIGxldCBhcHBlbmRQcmVwZW5kVXBkYXRlcyA9IFtdXG5cbiAgICBsZXQgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gbnVsbFxuXG4gICAgdGhpcy50cmFja0JlZm9yZShcImFkZGVkXCIsIGNvbnRhaW5lcilcbiAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBjb250YWluZXIsIGNvbnRhaW5lcilcblxuICAgIGxpdmVTb2NrZXQudGltZShcIm1vcnBoZG9tXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RyZWFtcy5mb3JFYWNoKChbcmVmLCBpbnNlcnRzLCBkZWxldGVJZHMsIHJlc2V0XSkgPT4ge1xuICAgICAgICBPYmplY3QuZW50cmllcyhpbnNlcnRzKS5mb3JFYWNoKChba2V5LCBbc3RyZWFtQXQsIGxpbWl0XV0pID0+IHtcbiAgICAgICAgICB0aGlzLnN0cmVhbUluc2VydHNba2V5XSA9IHtyZWYsIHN0cmVhbUF0LCBsaW1pdCwgcmVzZXRLZXB0OiBmYWxzZX1cbiAgICAgICAgfSlcbiAgICAgICAgaWYocmVzZXQgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgRE9NLmFsbChjb250YWluZXIsIGBbJHtQSFhfU1RSRUFNX1JFRn09XCIke3JlZn1cIl1gLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBpZihpbnNlcnRzW2NoaWxkLmlkXSl7XG4gICAgICAgICAgICAgIHRoaXMuc3RyZWFtSW5zZXJ0c1tjaGlsZC5pZF0ucmVzZXRLZXB0ID0gdHJ1ZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBkZWxldGVJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgbGV0IGNoaWxkID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7aWR9XCJdYClcbiAgICAgICAgICBpZihjaGlsZCl7IHRoaXMucmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKSB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBtb3JwaGRvbSh0YXJnZXRDb250YWluZXIsIGh0bWwsIHtcbiAgICAgICAgY2hpbGRyZW5Pbmx5OiB0YXJnZXRDb250YWluZXIuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpID09PSBudWxsLFxuICAgICAgICBnZXROb2RlS2V5OiAobm9kZSkgPT4ge1xuICAgICAgICAgIGlmKERPTS5pc1BoeERlc3Ryb3llZChub2RlKSl7IHJldHVybiBudWxsIH1cbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgam9pbiBwYXRjaCwgdGhlbiBieSBkZWZpbml0aW9uIHRoZXJlIHdhcyBubyBQSFhfTUFHSUNfSUQuXG4gICAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgdG8gcmVkdWNlIHRoZSBhbW91bnQgb2YgZWxlbWVudHMgbW9ycGhkb20gZGlzY2FyZHMuXG4gICAgICAgICAgaWYoaXNKb2luUGF0Y2gpeyByZXR1cm4gbm9kZS5pZCB9XG4gICAgICAgICAgcmV0dXJuIG5vZGUuaWQgfHwgKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKFBIWF9NQUdJQ19JRCkpXG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNraXAgaW5kZXhpbmcgZnJvbSBjaGlsZHJlbiB3aGVuIGNvbnRhaW5lciBpcyBzdHJlYW1cbiAgICAgICAgc2tpcEZyb21DaGlsZHJlbjogKGZyb20pID0+IHsgcmV0dXJuIGZyb20uZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgPT09IFBIWF9TVFJFQU0gfSxcbiAgICAgICAgLy8gdGVsbCBtb3JwaGRvbSBob3cgdG8gYWRkIGEgY2hpbGRcbiAgICAgICAgYWRkQ2hpbGQ6IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gICAgICAgICAgbGV0IHtyZWYsIHN0cmVhbUF0LCBsaW1pdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChjaGlsZClcbiAgICAgICAgICBpZihyZWYgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKSB9XG5cbiAgICAgICAgICBET00ucHV0U3RpY2t5KGNoaWxkLCBQSFhfU1RSRUFNX1JFRiwgZWwgPT4gZWwuc2V0QXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGLCByZWYpKVxuXG4gICAgICAgICAgLy8gc3RyZWFtaW5nXG4gICAgICAgICAgaWYoc3RyZWFtQXQgPT09IDApe1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgY2hpbGQpXG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID09PSAtMSl7XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICAgICAgICBsZXQgc2libGluZyA9IEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVtzdHJlYW1BdF1cbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHNpYmxpbmcpXG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBjaGlsZHJlbiA9IGxpbWl0ICE9PSBudWxsICYmIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVxuICAgICAgICAgIGxldCBjaGlsZHJlblRvUmVtb3ZlID0gW11cbiAgICAgICAgICBpZihsaW1pdCAmJiBsaW1pdCA8IDAgJiYgY2hpbGRyZW4ubGVuZ3RoID4gbGltaXQgKiAtMSl7XG4gICAgICAgICAgICBjaGlsZHJlblRvUmVtb3ZlID0gY2hpbGRyZW4uc2xpY2UoMCwgY2hpbGRyZW4ubGVuZ3RoICsgbGltaXQpXG4gICAgICAgICAgfSBlbHNlIGlmKGxpbWl0ICYmIGxpbWl0ID49IDAgJiYgY2hpbGRyZW4ubGVuZ3RoID4gbGltaXQpe1xuICAgICAgICAgICAgY2hpbGRyZW5Ub1JlbW92ZSA9IGNoaWxkcmVuLnNsaWNlKGxpbWl0KVxuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZHJlblRvUmVtb3ZlLmZvckVhY2gocmVtb3ZlQ2hpbGQgPT4ge1xuICAgICAgICAgICAgLy8gZG8gbm90IHJlbW92ZSBjaGlsZCBhcyBwYXJ0IG9mIGxpbWl0IGlmIHdlIGFyZSByZS1hZGRpbmcgaXRcbiAgICAgICAgICAgIGlmKCF0aGlzLnN0cmVhbUluc2VydHNbcmVtb3ZlQ2hpbGQuaWRdKXtcbiAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdHJlYW1DaGlsZEVsZW1lbnQocmVtb3ZlQ2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVOb2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIERPTS5tYXliZUFkZFByaXZhdGVIb29rcyhlbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcbiAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgfSxcbiAgICAgICAgb25Ob2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSl7IHRoaXMubWF5YmVSZU9yZGVyU3RyZWFtKGVsKSB9XG5cbiAgICAgICAgICAvLyBoYWNrIHRvIGZpeCBTYWZhcmkgaGFuZGxpbmcgb2YgaW1nIHNyY3NldCBhbmQgdmlkZW8gdGFnc1xuICAgICAgICAgIGlmKGVsIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCAmJiBlbC5zcmNzZXQpe1xuICAgICAgICAgICAgZWwuc3Jjc2V0ID0gZWwuc3Jjc2V0XG4gICAgICAgICAgfSBlbHNlIGlmKGVsIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCAmJiBlbC5hdXRvcGxheSl7XG4gICAgICAgICAgICBlbC5wbGF5KClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIERPTS5pc0Zvcm1JbnB1dChlbCkpe1xuICAgICAgICAgICAgdHJhY2tlZElucHV0cy5wdXNoKGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgICAgLy8gYmVmb3JlIHdlIHVwZGF0ZSB0aGUgY2hpbGRyZW4sIHdlIG5lZWQgdG8gc2V0IGV4aXN0aW5nIHN0cmVhbSBjaGlsZHJlblxuICAgICAgICAgIC8vIGludG8gdGhlIG5ldyBvcmRlciBmcm9tIHRoZSBzZXJ2ZXIgaWYgdGhleSB3ZXJlIGtlcHQgZHVyaW5nIGEgc3RyZWFtIHJlc2V0XG4gICAgICAgICAgaWYoZnJvbUVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpID09PSBQSFhfU1RSRUFNKXtcbiAgICAgICAgICAgIGxldCB0b0lkcyA9IEFycmF5LmZyb20odG9FbC5jaGlsZHJlbikubWFwKGNoaWxkID0+IGNoaWxkLmlkKVxuICAgICAgICAgICAgQXJyYXkuZnJvbShmcm9tRWwuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiB7XG4gICAgICAgICAgICAgIGxldCB7cmVzZXRLZXB0fSA9IHRoaXMuZ2V0U3RyZWFtSW5zZXJ0KGNoaWxkKVxuICAgICAgICAgICAgICByZXR1cm4gcmVzZXRLZXB0XG4gICAgICAgICAgICB9KS5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnN0cmVhbUluc2VydHNbY2hpbGQuaWRdLnN0cmVhbUF0ID0gdG9JZHMuaW5kZXhPZihjaGlsZC5pZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICYmIGVsLmlkICYmXG4gICAgICAgICAgICBET00uaXNQaHhVcGRhdGUoZWwucGFyZW50RWxlbWVudCwgcGh4VXBkYXRlLCBbUEhYX1NUUkVBTSwgXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYodGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoZWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvbkVsVXBkYXRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzLnB1c2goZWwpXG4gICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwpXG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgICAgRE9NLm1heWJlQWRkUHJpdmF0ZUhvb2tzKHRvRWwsIHBoeFZpZXdwb3J0VG9wLCBwaHhWaWV3cG9ydEJvdHRvbSlcbiAgICAgICAgICBET00uY2xlYW5DaGlsZE5vZGVzKHRvRWwsIHBoeFVwZGF0ZSlcbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKHRvRWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZihET00uaXNQaHhTdGlja3koZnJvbUVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYoRE9NLmlzSWdub3JlZChmcm9tRWwsIHBoeFVwZGF0ZSkgfHwgKGZyb21FbC5mb3JtICYmIGZyb21FbC5mb3JtLmlzU2FtZU5vZGUoZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkKSkpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSlcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihmcm9tRWwudHlwZSA9PT0gXCJudW1iZXJcIiAmJiAoZnJvbUVsLnZhbGlkaXR5ICYmIGZyb21FbC52YWxpZGl0eS5iYWRJbnB1dCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKCFET00uc3luY1BlbmRpbmdSZWYoZnJvbUVsLCB0b0VsLCBkaXNhYmxlV2l0aCkpe1xuICAgICAgICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoZnJvbUVsKSl7XG4gICAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZihET00uaXNQaHhDaGlsZCh0b0VsKSl7XG4gICAgICAgICAgICBsZXQgcHJldlNlc3Npb24gPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKVxuICAgICAgICAgICAgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7ZXhjbHVkZTogW1BIWF9TVEFUSUNdfSlcbiAgICAgICAgICAgIGlmKHByZXZTZXNzaW9uICE9PSBcIlwiKXsgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgcHJldlNlc3Npb24pIH1cbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdElEKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpbnB1dCBoYW5kbGluZ1xuICAgICAgICAgIERPTS5jb3B5UHJpdmF0ZXModG9FbCwgZnJvbUVsKVxuXG4gICAgICAgICAgbGV0IGlzRm9jdXNlZEZvcm1FbCA9IGZvY3VzZWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUoZm9jdXNlZCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbClcbiAgICAgICAgICBpZihpc0ZvY3VzZWRGb3JtRWwgJiYgZnJvbUVsLnR5cGUgIT09IFwiaGlkZGVuXCIpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKGZyb21FbClcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHRyYWNrZWRJbnB1dHMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYoRE9NLmlzUGh4VXBkYXRlKHRvRWwsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgICBhcHBlbmRQcmVwZW5kVXBkYXRlcy5wdXNoKG5ldyBET01Qb3N0TW9ycGhSZXN0b3Jlcihmcm9tRWwsIHRvRWwsIHRvRWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyh0b0VsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyh0b0VsKVxuICAgICAgICAgICAgaWYodG9FbC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpICYmIERPTS5pc0Zvcm1JbnB1dCh0b0VsKSl7XG4gICAgICAgICAgICAgIHRyYWNrZWRJbnB1dHMucHVzaCh0b0VsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKGxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7IGRldGVjdER1cGxpY2F0ZUlkcygpIH1cblxuICAgIGlmKGFwcGVuZFByZXBlbmRVcGRhdGVzLmxlbmd0aCA+IDApe1xuICAgICAgbGl2ZVNvY2tldC50aW1lKFwicG9zdC1tb3JwaCBhcHBlbmQvcHJlcGVuZCByZXN0b3JhdGlvblwiLCAoKSA9PiB7XG4gICAgICAgIGFwcGVuZFByZXBlbmRVcGRhdGVzLmZvckVhY2godXBkYXRlID0+IHVwZGF0ZS5wZXJmb3JtKCkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIERPTS5tYXliZUhpZGVGZWVkYmFjayh0YXJnZXRDb250YWluZXIsIHRyYWNrZWRJbnB1dHMsIHBoeEZlZWRiYWNrRm9yKVxuXG4gICAgbGl2ZVNvY2tldC5zaWxlbmNlRXZlbnRzKCgpID0+IERPTS5yZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkpXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZG9jdW1lbnQsIFwicGh4OnVwZGF0ZVwiKVxuICAgIGFkZGVkLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwiYWRkZWRcIiwgZWwpKVxuICAgIHVwZGF0ZXMuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsKSlcblxuICAgIHRoaXMudHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKClcblxuICAgIGlmKGV4dGVybmFsRm9ybVRyaWdnZXJlZCl7XG4gICAgICBsaXZlU29ja2V0LnVubG9hZCgpXG4gICAgICAvLyB1c2UgcHJvdG90eXBlJ3Mgc3VibWl0IGluIGNhc2UgdGhlcmUncyBhIGZvcm0gY29udHJvbCB3aXRoIG5hbWUgb3IgaWQgb2YgXCJzdWJtaXRcIlxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxGb3JtRWxlbWVudC9zdWJtaXRcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihleHRlcm5hbEZvcm1UcmlnZ2VyZWQpLnN1Ym1pdC5jYWxsKGV4dGVybmFsRm9ybVRyaWdnZXJlZClcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG9uTm9kZURpc2NhcmRlZChlbCl7XG4gICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICBpZihET00uaXNQaHhDaGlsZChlbCkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSl7IHRoaXMubGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoZWwpIH1cbiAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJkaXNjYXJkZWRcIiwgZWwpXG4gIH1cblxuICBtYXliZVBlbmRpbmdSZW1vdmUobm9kZSl7XG4gICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5waHhSZW1vdmUpICE9PSBudWxsKXtcbiAgICAgIHRoaXMucGVuZGluZ1JlbW92ZXMucHVzaChub2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU3RyZWFtQ2hpbGRFbGVtZW50KGNoaWxkKXtcbiAgICBpZighdGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoY2hpbGQpKXtcbiAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgICB0aGlzLm9uTm9kZURpc2NhcmRlZChjaGlsZClcbiAgICB9XG4gIH1cblxuICBnZXRTdHJlYW1JbnNlcnQoZWwpe1xuICAgIGxldCBpbnNlcnQgPSBlbC5pZCA/IHRoaXMuc3RyZWFtSW5zZXJ0c1tlbC5pZF0gOiB7fVxuICAgIHJldHVybiBpbnNlcnQgfHwge31cbiAgfVxuXG4gIG1heWJlUmVPcmRlclN0cmVhbShlbCl7XG4gICAgbGV0IHtyZWYsIHN0cmVhbUF0LCBsaW1pdH0gPSB0aGlzLmdldFN0cmVhbUluc2VydChlbClcbiAgICBpZihzdHJlYW1BdCA9PT0gdW5kZWZpbmVkKXsgcmV0dXJuIH1cblxuICAgIC8vIHdlIG5lZWQgdG8gdGhlIFBIWF9TVFJFQU1fUkVGIGhlcmUgYXMgd2VsbCBhcyBhZGRDaGlsZCBpcyBpbnZva2VkIG9ubHkgZm9yIHBhcmVudHNcbiAgICBET00ucHV0U3RpY2t5KGVsLCBQSFhfU1RSRUFNX1JFRiwgZWwgPT4gZWwuc2V0QXR0cmlidXRlKFBIWF9TVFJFQU1fUkVGLCByZWYpKVxuXG4gICAgaWYoc3RyZWFtQXQgPT09IDApe1xuICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIGVsLnBhcmVudEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpXG4gICAgfSBlbHNlIGlmKHN0cmVhbUF0ID4gMCl7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICBsZXQgb2xkSW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKGVsKVxuICAgICAgaWYoc3RyZWFtQXQgPj0gY2hpbGRyZW4ubGVuZ3RoIC0gMSl7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZWwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgc2libGluZyA9IGNoaWxkcmVuW3N0cmVhbUF0XVxuICAgICAgICBpZihvbGRJbmRleCA+IHN0cmVhbUF0KXtcbiAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgc2libGluZylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgc2libGluZy5uZXh0RWxlbWVudFNpYmxpbmcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0cmFuc2l0aW9uUGVuZGluZ1JlbW92ZXMoKXtcbiAgICBsZXQge3BlbmRpbmdSZW1vdmVzLCBsaXZlU29ja2V0fSA9IHRoaXNcbiAgICBpZihwZW5kaW5nUmVtb3Zlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudHJhbnNpdGlvblJlbW92ZXMocGVuZGluZ1JlbW92ZXMpXG4gICAgICBsaXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBwZW5kaW5nUmVtb3Zlcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBET00uZmlyc3RQaHhDaGlsZChlbClcbiAgICAgICAgICBpZihjaGlsZCl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGNoaWxkKSB9XG4gICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy50cmFja0FmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgcGVuZGluZ1JlbW92ZXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzQ0lEUGF0Y2goKXsgcmV0dXJuIHRoaXMuY2lkUGF0Y2ggfVxuXG4gIHNraXBDSURTaWJsaW5nKGVsKXtcbiAgICByZXR1cm4gZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGVsLmhhc0F0dHJpYnV0ZShQSFhfU0tJUClcbiAgfVxuXG4gIHRhcmdldENJRENvbnRhaW5lcihodG1sKXtcbiAgICBpZighdGhpcy5pc0NJRFBhdGNoKCkpeyByZXR1cm4gfVxuICAgIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmNvbnRhaW5lciwgdGhpcy50YXJnZXRDSUQpXG4gICAgaWYocmVzdC5sZW5ndGggPT09IDAgJiYgRE9NLmNoaWxkTm9kZUxlbmd0aChodG1sKSA9PT0gMSl7XG4gICAgICByZXR1cm4gZmlyc3RcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpcnN0ICYmIGZpcnN0LnBhcmVudE5vZGVcbiAgICB9XG4gIH1cblxuICBpbmRleE9mKHBhcmVudCwgY2hpbGQpeyByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmluZGV4T2YoY2hpbGQpIH1cbn1cbiIsICJpbXBvcnQge1xuICBDT01QT05FTlRTLFxuICBEWU5BTUlDUyxcbiAgVEVNUExBVEVTLFxuICBFVkVOVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9TS0lQLFxuICBQSFhfTUFHSUNfSUQsXG4gIFJFUExZLFxuICBTVEFUSUMsXG4gIFRJVExFLFxuICBTVFJFQU0sXG4gIFJPT1QsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICBsb2dFcnJvcixcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuY29uc3QgVk9JRF9UQUdTID0gbmV3IFNldChbXG4gIFwiYXJlYVwiLFxuICBcImJhc2VcIixcbiAgXCJiclwiLFxuICBcImNvbFwiLFxuICBcImNvbW1hbmRcIixcbiAgXCJlbWJlZFwiLFxuICBcImhyXCIsXG4gIFwiaW1nXCIsXG4gIFwiaW5wdXRcIixcbiAgXCJrZXlnZW5cIixcbiAgXCJsaW5rXCIsXG4gIFwibWV0YVwiLFxuICBcInBhcmFtXCIsXG4gIFwic291cmNlXCIsXG4gIFwidHJhY2tcIixcbiAgXCJ3YnJcIlxuXSlcbmNvbnN0IHF1b3RlQ2hhcnMgPSBuZXcgU2V0KFtcIidcIiwgJ1wiJ10pXG5cbmV4cG9ydCBsZXQgbW9kaWZ5Um9vdCA9IChodG1sLCBhdHRycywgY2xlYXJJbm5lckhUTUwpID0+IHtcbiAgbGV0IGkgPSAwXG4gIGxldCBpbnNpZGVDb21tZW50ID0gZmFsc2VcbiAgbGV0IGJlZm9yZVRhZywgYWZ0ZXJUYWcsIHRhZywgdGFnTmFtZUVuZHNBdCwgaWQsIG5ld0hUTUxcblxuICBsZXQgbG9va2FoZWFkID0gaHRtbC5tYXRjaCgvXihcXHMqKD86PCEtLS4qPy0tPlxccyopKik8KFteXFxzXFwvPl0rKS8pXG4gIGlmKGxvb2thaGVhZCA9PT0gbnVsbCkgeyB0aHJvdyBuZXcgRXJyb3IoYG1hbGZvcm1lZCBodG1sICR7aHRtbH1gKSB9XG5cbiAgaSA9IGxvb2thaGVhZFswXS5sZW5ndGhcbiAgYmVmb3JlVGFnID0gbG9va2FoZWFkWzFdXG4gIHRhZyA9IGxvb2thaGVhZFsyXVxuICB0YWdOYW1lRW5kc0F0ID0gaVxuXG4gIC8vIFNjYW4gdGhlIG9wZW5pbmcgdGFnIGZvciBpZCwgaWYgdGhlcmUgaXMgYW55XG4gIGZvcihpOyBpIDwgaHRtbC5sZW5ndGg7IGkrKyl7XG4gICAgaWYoaHRtbC5jaGFyQXQoaSkgPT09IFwiPlwiICl7IGJyZWFrIH1cbiAgICBpZihodG1sLmNoYXJBdChpKSA9PT0gXCI9XCIpe1xuICAgICAgbGV0IGlzSWQgPSBodG1sLnNsaWNlKGkgLSAzLCBpKSA9PT0gXCIgaWRcIlxuICAgICAgaSsrO1xuICAgICAgbGV0IGNoYXIgPSBodG1sLmNoYXJBdChpKVxuICAgICAgaWYgKHF1b3RlQ2hhcnMuaGFzKGNoYXIpKSB7XG4gICAgICAgIGxldCBhdHRyU3RhcnRzQXQgPSBpXG4gICAgICAgIGkrK1xuICAgICAgICBmb3IoaTsgaSA8IGh0bWwubGVuZ3RoOyBpKyspe1xuICAgICAgICAgIGlmKGh0bWwuY2hhckF0KGkpID09PSBjaGFyKXsgYnJlYWsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0lkKSB7XG4gICAgICAgICAgaWQgPSBodG1sLnNsaWNlKGF0dHJTdGFydHNBdCArIDEsIGkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBjbG9zZUF0ID0gaHRtbC5sZW5ndGggLSAxXG4gIGluc2lkZUNvbW1lbnQgPSBmYWxzZVxuICB3aGlsZShjbG9zZUF0ID49IGJlZm9yZVRhZy5sZW5ndGggKyB0YWcubGVuZ3RoKXtcbiAgICBsZXQgY2hhciA9IGh0bWwuY2hhckF0KGNsb3NlQXQpXG4gICAgaWYoaW5zaWRlQ29tbWVudCl7XG4gICAgICBpZihjaGFyID09PSBcIi1cIiAmJiBodG1sLnNsaWNlKGNsb3NlQXQgLSAzLCBjbG9zZUF0KSA9PT0gXCI8IS1cIil7XG4gICAgICAgIGluc2lkZUNvbW1lbnQgPSBmYWxzZVxuICAgICAgICBjbG9zZUF0IC09IDRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlQXQgLT0gMVxuICAgICAgfVxuICAgIH0gZWxzZSBpZihjaGFyID09PSBcIj5cIiAmJiBodG1sLnNsaWNlKGNsb3NlQXQgLSAyLCBjbG9zZUF0KSA9PT0gXCItLVwiKXtcbiAgICAgIGluc2lkZUNvbW1lbnQgPSB0cnVlXG4gICAgICBjbG9zZUF0IC09IDNcbiAgICB9IGVsc2UgaWYoY2hhciA9PT0gXCI+XCIpe1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2VBdCAtPSAxXG4gICAgfVxuICB9XG4gIGFmdGVyVGFnID0gaHRtbC5zbGljZShjbG9zZUF0ICsgMSwgaHRtbC5sZW5ndGgpXG5cbiAgbGV0IGF0dHJzU3RyID1cbiAgICBPYmplY3Qua2V5cyhhdHRycylcbiAgICAubWFwKGF0dHIgPT4gYXR0cnNbYXR0cl0gPT09IHRydWUgPyBhdHRyIDogYCR7YXR0cn09XCIke2F0dHJzW2F0dHJdfVwiYClcbiAgICAuam9pbihcIiBcIilcblxuICBpZihjbGVhcklubmVySFRNTCl7XG4gICAgLy8gS2VlcCB0aGUgaWQgaWYgYW55XG4gICAgbGV0IGlkQXR0clN0ciA9IGlkID8gYCBpZD1cIiR7aWR9XCJgIDogXCJcIjtcbiAgICBpZihWT0lEX1RBR1MuaGFzKHRhZykpe1xuICAgICAgbmV3SFRNTCA9IGA8JHt0YWd9JHtpZEF0dHJTdHJ9JHthdHRyc1N0ciA9PT0gXCJcIiA/IFwiXCIgOiBcIiBcIn0ke2F0dHJzU3RyfS8+YFxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdIVE1MID0gYDwke3RhZ30ke2lkQXR0clN0cn0ke2F0dHJzU3RyID09PSBcIlwiID8gXCJcIiA6IFwiIFwifSR7YXR0cnNTdHJ9PjwvJHt0YWd9PmBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJlc3QgPSBodG1sLnNsaWNlKHRhZ05hbWVFbmRzQXQsIGNsb3NlQXQgKyAxKVxuICAgIG5ld0hUTUwgPSBgPCR7dGFnfSR7YXR0cnNTdHIgPT09IFwiXCIgPyBcIlwiIDogXCIgXCJ9JHthdHRyc1N0cn0ke3Jlc3R9YFxuICB9XG5cbiAgcmV0dXJuIFtuZXdIVE1MLCBiZWZvcmVUYWcsIGFmdGVyVGFnXVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJlZCB7XG4gIHN0YXRpYyBleHRyYWN0KGRpZmYpe1xuICAgIGxldCB7W1JFUExZXTogcmVwbHksIFtFVkVOVFNdOiBldmVudHMsIFtUSVRMRV06IHRpdGxlfSA9IGRpZmZcbiAgICBkZWxldGUgZGlmZltSRVBMWV1cbiAgICBkZWxldGUgZGlmZltFVkVOVFNdXG4gICAgZGVsZXRlIGRpZmZbVElUTEVdXG4gICAgcmV0dXJuIHtkaWZmLCB0aXRsZSwgcmVwbHk6IHJlcGx5IHx8IG51bGwsIGV2ZW50czogZXZlbnRzIHx8IFtdfVxuICB9XG5cbiAgY29uc3RydWN0b3Iodmlld0lkLCByZW5kZXJlZCl7XG4gICAgdGhpcy52aWV3SWQgPSB2aWV3SWRcbiAgICB0aGlzLnJlbmRlcmVkID0ge31cbiAgICB0aGlzLm1hZ2ljSWQgPSAwXG4gICAgdGhpcy5tZXJnZURpZmYocmVuZGVyZWQpXG4gIH1cblxuICBwYXJlbnRWaWV3SWQoKXsgcmV0dXJuIHRoaXMudmlld0lkIH1cblxuICB0b1N0cmluZyhvbmx5Q2lkcyl7XG4gICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyh0aGlzLnJlbmRlcmVkLCB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcywgdHJ1ZSwge30pXG4gICAgcmV0dXJuIFtzdHIsIHN0cmVhbXNdXG4gIH1cblxuICByZWN1cnNpdmVUb1N0cmluZyhyZW5kZXJlZCwgY29tcG9uZW50cyA9IHJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcywgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycyl7XG4gICAgb25seUNpZHMgPSBvbmx5Q2lkcyA/IG5ldyBTZXQob25seUNpZHMpIDogbnVsbFxuICAgIGxldCBvdXRwdXQgPSB7YnVmZmVyOiBcIlwiLCBjb21wb25lbnRzOiBjb21wb25lbnRzLCBvbmx5Q2lkczogb25seUNpZHMsIHN0cmVhbXM6IG5ldyBTZXQoKX1cbiAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCBudWxsLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nLCByb290QXR0cnMpXG4gICAgcmV0dXJuIFtvdXRwdXQuYnVmZmVyLCBvdXRwdXQuc3RyZWFtc11cbiAgfVxuXG4gIGNvbXBvbmVudENJRHMoZGlmZil7IHJldHVybiBPYmplY3Qua2V5cyhkaWZmW0NPTVBPTkVOVFNdIHx8IHt9KS5tYXAoaSA9PiBwYXJzZUludChpKSkgfVxuXG4gIGlzQ29tcG9uZW50T25seURpZmYoZGlmZil7XG4gICAgaWYoIWRpZmZbQ09NUE9ORU5UU10peyByZXR1cm4gZmFsc2UgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhkaWZmKS5sZW5ndGggPT09IDFcbiAgfVxuXG4gIGdldENvbXBvbmVudChkaWZmLCBjaWQpeyByZXR1cm4gZGlmZltDT01QT05FTlRTXVtjaWRdIH1cblxuICBtZXJnZURpZmYoZGlmZil7XG4gICAgbGV0IG5ld2MgPSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgbGV0IGNhY2hlID0ge31cbiAgICBkZWxldGUgZGlmZltDT01QT05FTlRTXVxuICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLm11dGFibGVNZXJnZSh0aGlzLnJlbmRlcmVkLCBkaWZmKVxuICAgIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdIHx8IHt9XG5cbiAgICBpZihuZXdjKXtcbiAgICAgIGxldCBvbGRjID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXtcbiAgICAgICAgbmV3Y1tjaWRdID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgbmV3Y1tjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7IG9sZGNbY2lkXSA9IG5ld2NbY2lkXSB9XG4gICAgICBkaWZmW0NPTVBPTkVOVFNdID0gbmV3Y1xuICAgIH1cbiAgfVxuXG4gIGNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBjZGlmZiwgb2xkYywgbmV3YywgY2FjaGUpe1xuICAgIGlmKGNhY2hlW2NpZF0pe1xuICAgICAgcmV0dXJuIGNhY2hlW2NpZF1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5kaWZmLCBzdGF0LCBzY2lkID0gY2RpZmZbU1RBVElDXVxuXG4gICAgICBpZihpc0NpZChzY2lkKSl7XG4gICAgICAgIGxldCB0ZGlmZlxuXG4gICAgICAgIGlmKHNjaWQgPiAwKXtcbiAgICAgICAgICB0ZGlmZiA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChzY2lkLCBuZXdjW3NjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZGlmZiA9IG9sZGNbLXNjaWRdXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ID0gdGRpZmZbU1RBVElDXVxuICAgICAgICBuZGlmZiA9IHRoaXMuY2xvbmVNZXJnZSh0ZGlmZiwgY2RpZmYsIHRydWUpXG4gICAgICAgIG5kaWZmW1NUQVRJQ10gPSBzdGF0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZGlmZiA9IGNkaWZmW1NUQVRJQ10gIT09IHVuZGVmaW5lZCB8fCBvbGRjW2NpZF0gPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgY2RpZmYgOiB0aGlzLmNsb25lTWVyZ2Uob2xkY1tjaWRdLCBjZGlmZiwgZmFsc2UpXG4gICAgICB9XG5cbiAgICAgIGNhY2hlW2NpZF0gPSBuZGlmZlxuICAgICAgcmV0dXJuIG5kaWZmXG4gICAgfVxuICB9XG5cbiAgbXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBpZihzb3VyY2VbU1RBVElDXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiBzb3VyY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSlcbiAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9XG4gIH1cblxuICBkb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgZm9yKGxldCBrZXkgaW4gc291cmNlKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBsZXQgaXNPYmpWYWwgPSBpc09iamVjdCh2YWwpXG4gICAgICBpZihpc09ialZhbCAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldFZhbCwgdmFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYodGFyZ2V0W1JPT1RdKXtcbiAgICAgIHRhcmdldC5uZXdSZW5kZXIgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgLy8gTWVyZ2VzIGNpZCB0cmVlcyB0b2dldGhlciwgY29weWluZyBzdGF0aWNzIGZyb20gc291cmNlIHRyZWUuXG4gIC8vXG4gIC8vIFRoZSBgcHJ1bmVNYWdpY0lkYCBpcyBwYXNzZWQgdG8gY29udHJvbCBwcnVuaW5nIHRoZSBtYWdpY0lkIG9mIHRoZVxuICAvLyB0YXJnZXQuIFdlIG11c3QgYWx3YXlzIHBydW5lIHRoZSBtYWdpY0lkIHdoZW4gd2UgYXJlIHNoYXJpbmcgc3RhdGljc1xuICAvLyBmcm9tIGFub3RoZXIgY29tcG9uZW50LiBJZiBub3QgcHJ1bmluZywgd2UgcmVwbGljYXRlIHRoZSBsb2dpYyBmcm9tXG4gIC8vIG11dGFibGVNZXJnZSwgd2hlcmUgd2Ugc2V0IG5ld1JlbmRlciB0byB0cnVlIGlmIHRoZXJlIGlzIGEgcm9vdFxuICAvLyAoZWZmZWN0aXZlbHkgZm9yY2luZyB0aGUgbmV3IHZlcnNpb24gdG8gYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBza2lwcGVkKVxuICAvL1xuICBjbG9uZU1lcmdlKHRhcmdldCwgc291cmNlLCBwcnVuZU1hZ2ljSWQpe1xuICAgIGxldCBtZXJnZWQgPSB7Li4udGFyZ2V0LCAuLi5zb3VyY2V9XG4gICAgZm9yKGxldCBrZXkgaW4gbWVyZ2VkKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBpZihpc09iamVjdCh2YWwpICYmIHZhbFtTVEFUSUNdID09PSB1bmRlZmluZWQgJiYgaXNPYmplY3QodGFyZ2V0VmFsKSl7XG4gICAgICAgIG1lcmdlZFtrZXldID0gdGhpcy5jbG9uZU1lcmdlKHRhcmdldFZhbCwgdmFsLCBwcnVuZU1hZ2ljSWQpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHBydW5lTWFnaWNJZCl7XG4gICAgICBkZWxldGUgbWVyZ2VkLm1hZ2ljSWRcbiAgICAgIGRlbGV0ZSBtZXJnZWQubmV3UmVuZGVyXG4gICAgfSBlbHNlIGlmKHRhcmdldFtST09UXSl7XG4gICAgICBtZXJnZWQubmV3UmVuZGVyID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICBjb21wb25lbnRUb1N0cmluZyhjaWQpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlQ0lEVG9TdHJpbmcodGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgY2lkLCBudWxsKVxuICAgIGxldCBbc3RyaXBwZWRIVE1MLCBfYmVmb3JlLCBfYWZ0ZXJdID0gbW9kaWZ5Um9vdChzdHIsIHt9KVxuICAgIHJldHVybiBbc3RyaXBwZWRIVE1MLCBzdHJlYW1zXVxuICB9XG5cbiAgcHJ1bmVDSURzKGNpZHMpe1xuICAgIGNpZHMuZm9yRWFjaChjaWQgPT4gZGVsZXRlIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11bY2lkXSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBnZXQoKXsgcmV0dXJuIHRoaXMucmVuZGVyZWQgfVxuXG4gIGlzTmV3RmluZ2VycHJpbnQoZGlmZiA9IHt9KXsgcmV0dXJuICEhZGlmZltTVEFUSUNdIH1cblxuICB0ZW1wbGF0ZVN0YXRpYyhwYXJ0LCB0ZW1wbGF0ZXMpe1xuICAgIGlmKHR5cGVvZiAocGFydCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZXNbcGFydF1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnRcbiAgICB9XG4gIH1cblxuICBuZXh0TWFnaWNJRCgpe1xuICAgIHRoaXMubWFnaWNJZCsrXG4gICAgcmV0dXJuIGAke3RoaXMucGFyZW50Vmlld0lkKCl9LSR7dGhpcy5tYWdpY0lkfWBcbiAgfVxuXG4gIC8vIENvbnZlcnRzIHJlbmRlcmVkIHRyZWUgdG8gb3V0cHV0IGJ1ZmZlci5cbiAgLy9cbiAgLy8gY2hhbmdlVHJhY2tpbmcgY29udHJvbHMgaWYgd2UgY2FuIGFwcGx5IHRoZSBQSFhfU0tJUCBvcHRpbWl6YXRpb24uXG4gIC8vIEl0IGlzIGRpc2FibGVkIGZvciBjb21wcmVoZW5zaW9ucyBzaW5jZSB3ZSBtdXN0IHJlLXJlbmRlciB0aGUgZW50aXJlIGNvbGxlY3Rpb25cbiAgLy8gYW5kIG5vIGludmlkaWFsIGVsZW1lbnQgaXMgdHJhY2tlZCBpbnNpZGUgdGhlIGNvbXByZWhlbnNpb24uXG4gIHRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCwgY2hhbmdlVHJhY2tpbmcsIHJvb3RBdHRycyA9IHt9KXtcbiAgICBpZihyZW5kZXJlZFtEWU5BTUlDU10peyByZXR1cm4gdGhpcy5jb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KSB9XG4gICAgbGV0IHtbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgaXNSb290ID0gcmVuZGVyZWRbUk9PVF1cbiAgICBsZXQgcHJldkJ1ZmZlciA9IG91dHB1dC5idWZmZXJcbiAgICBpZihpc1Jvb3QpeyBvdXRwdXQuYnVmZmVyID0gXCJcIiB9XG5cbiAgICBpZihjaGFuZ2VUcmFja2luZyAmJiBpc1Jvb3QgJiYgIXJlbmRlcmVkLm1hZ2ljSWQpe1xuICAgICAgcmVuZGVyZWQubmV3UmVuZGVyID0gdHJ1ZVxuICAgICAgcmVuZGVyZWQubWFnaWNJZCA9IHRoaXMubmV4dE1hZ2ljSUQoKVxuICAgIH1cblxuICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCBzdGF0aWNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkW2kgLSAxXSwgdGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nKVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzW2ldXG4gICAgfVxuXG4gICAgLy8gQXBwbGllcyB0aGUgcm9vdCB0YWcgXCJza2lwXCIgb3B0aW1pemF0aW9uIGlmIHN1cHBvcnRlZCwgd2hpY2ggY2xlYXJzXG4gICAgLy8gdGhlIHJvb3QgdGFnIGF0dHJpYnV0ZXMgYW5kIGlubmVySFRNTCwgYW5kIG9ubHkgbWFpbnRhaW5zIHRoZSBtYWdpY0lkLlxuICAgIC8vIFdlIGNhbiBvbmx5IHNraXAgd2hlbiBjaGFuZ2VUcmFja2luZyBpcyBzdXBwb3J0ZWQgKG91dHNpZGUgb2YgYSBjb21wcmVoZW5zaW9uKSxcbiAgICAvLyBhbmQgd2hlbiB0aGUgcm9vdCBlbGVtZW50IGhhc24ndCBleHBlcmllbmNlZCBhbiB1bnJlbmRlcmVkIG1lcmdlIChuZXdSZW5kZXIgdHJ1ZSkuXG4gICAgaWYoaXNSb290KXtcbiAgICAgIGxldCBza2lwID0gZmFsc2VcbiAgICAgIGxldCBhdHRyc1xuICAgICAgaWYoY2hhbmdlVHJhY2tpbmcgfHwgT2JqZWN0LmtleXMocm9vdEF0dHJzKS5sZW5ndGggPiAwKXtcbiAgICAgICAgc2tpcCA9ICFyZW5kZXJlZC5uZXdSZW5kZXJcbiAgICAgICAgYXR0cnMgPSB7W1BIWF9NQUdJQ19JRF06IHJlbmRlcmVkLm1hZ2ljSWQsIC4uLnJvb3RBdHRyc31cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzID0gcm9vdEF0dHJzXG4gICAgICB9XG4gICAgICBpZihza2lwKXsgYXR0cnNbUEhYX1NLSVBdID0gdHJ1ZX1cbiAgICAgIGxldCBbbmV3Um9vdCwgY29tbWVudEJlZm9yZSwgY29tbWVudEFmdGVyXSA9IG1vZGlmeVJvb3Qob3V0cHV0LmJ1ZmZlciwgYXR0cnMsIHNraXApXG4gICAgICByZW5kZXJlZC5uZXdSZW5kZXIgPSBmYWxzZVxuICAgICAgb3V0cHV0LmJ1ZmZlciA9IHByZXZCdWZmZXIgKyBjb21tZW50QmVmb3JlICsgbmV3Um9vdCArIGNvbW1lbnRBZnRlclxuICAgIH1cbiAgfVxuXG4gIGNvbXByZWhlbnNpb25Ub0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpe1xuICAgIGxldCB7W0RZTkFNSUNTXTogZHluYW1pY3MsIFtTVEFUSUNdOiBzdGF0aWNzLCBbU1RSRUFNXTogc3RyZWFtfSA9IHJlbmRlcmVkXG4gICAgbGV0IFtfcmVmLCBfaW5zZXJ0cywgZGVsZXRlSWRzLCByZXNldF0gPSBzdHJlYW0gfHwgW251bGwsIHt9LCBbXSwgbnVsbF1cbiAgICBzdGF0aWNzID0gdGhpcy50ZW1wbGF0ZVN0YXRpYyhzdGF0aWNzLCB0ZW1wbGF0ZXMpXG4gICAgbGV0IGNvbXBUZW1wbGF0ZXMgPSB0ZW1wbGF0ZXMgfHwgcmVuZGVyZWRbVEVNUExBVEVTXVxuICAgIGZvcihsZXQgZCA9IDA7IGQgPCBkeW5hbWljcy5sZW5ndGg7IGQrKyl7XG4gICAgICBsZXQgZHluYW1pYyA9IGR5bmFtaWNzW2RdXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbMF1cbiAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBzdGF0aWNzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgLy8gSW5zaWRlIGEgY29tcHJlaGVuc2lvbiwgd2UgZG9uJ3QgdHJhY2sgaG93IGR5bmFtaWNzIGNoYW5nZVxuICAgICAgICAvLyBvdmVyIHRpbWUgKGFuZCBmZWF0dXJlcyBsaWtlIHN0cmVhbXMgd291bGQgbWFrZSB0aGF0IGltcG9zc2libGVcbiAgICAgICAgLy8gdW5sZXNzIHdlIG1vdmUgdGhlIHN0cmVhbSBkaWZmaW5nIGF3YXkgZnJvbSBtb3JwaGRvbSksXG4gICAgICAgIC8vIHNvIHdlIGNhbid0IHBlcmZvcm0gcm9vdCBjaGFuZ2UgdHJhY2tpbmcuXG4gICAgICAgIGxldCBjaGFuZ2VUcmFja2luZyA9IGZhbHNlXG4gICAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKGR5bmFtaWNbaSAtIDFdLCBjb21wVGVtcGxhdGVzLCBvdXRwdXQsIGNoYW5nZVRyYWNraW5nKVxuICAgICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihzdHJlYW0gIT09IHVuZGVmaW5lZCAmJiAocmVuZGVyZWRbRFlOQU1JQ1NdLmxlbmd0aCA+IDAgfHwgZGVsZXRlSWRzLmxlbmd0aCA+IDAgfHwgcmVzZXQpKXtcbiAgICAgIGRlbGV0ZSByZW5kZXJlZFtTVFJFQU1dXG4gICAgICByZW5kZXJlZFtEWU5BTUlDU10gPSBbXVxuICAgICAgb3V0cHV0LnN0cmVhbXMuYWRkKHN0cmVhbSlcbiAgICB9XG4gIH1cblxuICBkeW5hbWljVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZyl7XG4gICAgaWYodHlwZW9mIChyZW5kZXJlZCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyhvdXRwdXQuY29tcG9uZW50cywgcmVuZGVyZWQsIG91dHB1dC5vbmx5Q2lkcylcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RyXG4gICAgICBvdXRwdXQuc3RyZWFtcyA9IG5ldyBTZXQoWy4uLm91dHB1dC5zdHJlYW1zLCAuLi5zdHJlYW1zXSlcbiAgICB9IGVsc2UgaWYoaXNPYmplY3QocmVuZGVyZWQpKXtcbiAgICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0LCBjaGFuZ2VUcmFja2luZywge30pXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gcmVuZGVyZWRcbiAgICB9XG4gIH1cblxuICByZWN1cnNpdmVDSURUb1N0cmluZyhjb21wb25lbnRzLCBjaWQsIG9ubHlDaWRzKXtcbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50c1tjaWRdIHx8IGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm9yIENJRCAke2NpZH1gLCBjb21wb25lbnRzKVxuICAgIGxldCBhdHRycyA9IHtbUEhYX0NPTVBPTkVOVF06IGNpZH1cbiAgICBsZXQgc2tpcCA9IG9ubHlDaWRzICYmICFvbmx5Q2lkcy5oYXMoY2lkKVxuICAgIC8vIFR3byBvcHRpbWl6YXRpb24gcGF0aHMgYXBwbHkgaGVyZTpcbiAgICAvL1xuICAgIC8vICAgMS4gVGhlIG9ubHlDaWRzIG9wdGltaXphdGlvbiB3b3JrcyBieSB0aGUgc2VydmVyIGRpZmYgdGVsbGluZyB1cyBvbmx5IHNwZWNpZmljXG4gICAgLy8gICAgIGNpZCdzIGhhdmUgY2hhbmdlZC4gVGhpcyBhbGxvd3MgdXMgdG8gc2tpcCByZW5kZXJpbmcgYW55IGNvbXBvbmVudCB0aGF0IGhhc24ndCBjaGFuZ2VkLFxuICAgIC8vICAgICB3aGljaCB1bHRpbWF0ZWx5IHNldHMgUEhYX1NLSVAgcm9vdCBhdHRyaWJ1dGUgYW5kIGF2b2lkcyByZW5kZXJpbmcgdGhlIGlubmVySFRNTC5cbiAgICAvL1xuICAgIC8vICAgMi4gVGhlIHJvb3QgUEhYX1NLSVAgb3B0aW1pemF0aW9uIGdlbmVyYWxpemVzIHRvIGFsbCBIRUV4IGZ1bmN0aW9uIGNvbXBvbmVudHMsIGFuZFxuICAgIC8vICAgICB3b3JrcyBpbiB0aGUgc2FtZSBQSFhfU0tJUCBhdHRyaWJ1dGUgZmFzaGlvbiBhcyAxLCBidXQgdGhlIG5ld1JlbmRlciB0cmFja2luZyBpcyBkb25lXG4gICAgLy8gICAgIGF0IHRoZSBnZW5lcmFsIGRpZmYgbWVyZ2UgbGV2ZWwuIElmIHdlIG1lcmdlIGEgZGlmZiB3aXRoIG5ldyBkeW5hbWljcywgd2UgbmVjZXNzYXJpeSBoYXZlXG4gICAgLy8gICAgIGV4cGVyaWVuY2VkIGEgY2hhbmdlIHdoaWNoIG11c3QgYmUgYSBuZXdSZW5kZXIsIGFuZCB0aHVzIHdlIGNhbid0IHNraXAgdGhlIHJlbmRlci5cbiAgICAvL1xuICAgIC8vIEJvdGggb3B0aW1pemF0aW9uIGZsb3dzIGFwcGx5IGhlcmUuIG5ld1JlbmRlciBpcyBzZXQgYmFzZWQgb24gdGhlIG9ubHlDaWRzIG9wdGltaXphdGlvbiwgYW5kXG4gICAgLy8gd2UgdHJhY2sgYSBkZXRlcm1pbmlzdGljIG1hZ2ljSWQgYmFzZWQgb24gdGhlIGNpZC5cbiAgICBjb21wb25lbnQubmV3UmVuZGVyID0gIXNraXBcbiAgICBjb21wb25lbnQubWFnaWNJZCA9IGAke3RoaXMucGFyZW50Vmlld0lkKCl9LWMtJHtjaWR9YFxuICAgIGxldCBjaGFuZ2VUcmFja2luZyA9IHRydWVcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyhjb21wb25lbnQsIGNvbXBvbmVudHMsIG9ubHlDaWRzLCBjaGFuZ2VUcmFja2luZywgYXR0cnMpXG5cbiAgICByZXR1cm4gW2h0bWwsIHN0cmVhbXNdXG4gIH1cbn1cbiIsICJsZXQgdmlld0hvb2tJRCA9IDFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdIb29rIHtcbiAgc3RhdGljIG1ha2VJRCgpeyByZXR1cm4gdmlld0hvb2tJRCsrIH1cbiAgc3RhdGljIGVsZW1lbnRJRChlbCl7IHJldHVybiBlbC5waHhIb29rSWQgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGVsLCBjYWxsYmFja3Mpe1xuICAgIHRoaXMuX192aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuX19jYWxsYmFja3MgPSBjYWxsYmFja3NcbiAgICB0aGlzLl9fbGlzdGVuZXJzID0gbmV3IFNldCgpXG4gICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gZmFsc2VcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmVsLnBoeEhvb2tJZCA9IHRoaXMuY29uc3RydWN0b3IubWFrZUlEKClcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLl9fY2FsbGJhY2tzKXsgdGhpc1trZXldID0gdGhpcy5fX2NhbGxiYWNrc1trZXldIH1cbiAgfVxuXG4gIF9fbW91bnRlZCgpeyB0aGlzLm1vdW50ZWQgJiYgdGhpcy5tb3VudGVkKCkgfVxuICBfX3VwZGF0ZWQoKXsgdGhpcy51cGRhdGVkICYmIHRoaXMudXBkYXRlZCgpIH1cbiAgX19iZWZvcmVVcGRhdGUoKXsgdGhpcy5iZWZvcmVVcGRhdGUgJiYgdGhpcy5iZWZvcmVVcGRhdGUoKSB9XG4gIF9fZGVzdHJveWVkKCl7IHRoaXMuZGVzdHJveWVkICYmIHRoaXMuZGVzdHJveWVkKCkgfVxuICBfX3JlY29ubmVjdGVkKCl7XG4gICAgaWYodGhpcy5fX2lzRGlzY29ubmVjdGVkKXtcbiAgICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICB0aGlzLnJlY29ubmVjdGVkICYmIHRoaXMucmVjb25uZWN0ZWQoKVxuICAgIH1cbiAgfVxuICBfX2Rpc2Nvbm5lY3RlZCgpe1xuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IHRydWVcbiAgICB0aGlzLmRpc2Nvbm5lY3RlZCAmJiB0aGlzLmRpc2Nvbm5lY3RlZCgpXG4gIH1cblxuICBwdXNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcucHVzaEhvb2tFdmVudCh0aGlzLmVsLCBudWxsLCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgfVxuXG4gIHB1c2hFdmVudFRvKHBoeFRhcmdldCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIHJldHVybiB2aWV3LnB1c2hIb29rRXZlbnQodGhpcy5lbCwgdGFyZ2V0Q3R4LCBldmVudCwgcGF5bG9hZCwgb25SZXBseSlcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgY2FsbGJhY2tSZWYgPSAoY3VzdG9tRXZlbnQsIGJ5cGFzcykgPT4gYnlwYXNzID8gZXZlbnQgOiBjYWxsYmFjayhjdXN0b21FdmVudC5kZXRhaWwpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuYWRkKGNhbGxiYWNrUmVmKVxuICAgIHJldHVybiBjYWxsYmFja1JlZlxuICB9XG5cbiAgcmVtb3ZlSGFuZGxlRXZlbnQoY2FsbGJhY2tSZWYpe1xuICAgIGxldCBldmVudCA9IGNhbGxiYWNrUmVmKG51bGwsIHRydWUpXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoYHBoeDoke2V2ZW50fWAsIGNhbGxiYWNrUmVmKVxuICAgIHRoaXMuX19saXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrUmVmKVxuICB9XG5cbiAgdXBsb2FkKG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcuZGlzcGF0Y2hVcGxvYWRzKG51bGwsIG5hbWUsIGZpbGVzKVxuICB9XG5cbiAgdXBsb2FkVG8ocGh4VGFyZ2V0LCBuYW1lLCBmaWxlcyl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICB2aWV3LmRpc3BhdGNoVXBsb2Fkcyh0YXJnZXRDdHgsIG5hbWUsIGZpbGVzKVxuICAgIH0pXG4gIH1cblxuICBfX2NsZWFudXBfXygpe1xuICAgIHRoaXMuX19saXN0ZW5lcnMuZm9yRWFjaChjYWxsYmFja1JlZiA9PiB0aGlzLnJlbW92ZUhhbmRsZUV2ZW50KGNhbGxiYWNrUmVmKSlcbiAgfVxufVxuIiwgImltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgZm9jdXNTdGFjayA9IG51bGxcblxubGV0IEpTID0ge1xuICBleGVjKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBkZWZhdWx0cyl7XG4gICAgbGV0IFtkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdID0gZGVmYXVsdHMgfHwgW251bGwsIHtjYWxsYmFjazogZGVmYXVsdHMgJiYgZGVmYXVsdHMuY2FsbGJhY2t9XVxuICAgIGxldCBjb21tYW5kcyA9IHBoeEV2ZW50LmNoYXJBdCgwKSA9PT0gXCJbXCIgP1xuICAgICAgSlNPTi5wYXJzZShwaHhFdmVudCkgOiBbW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc11dXG5cblxuXG4gICAgY29tbWFuZHMuZm9yRWFjaCgoW2tpbmQsIGFyZ3NdKSA9PiB7XG4gICAgICBpZihraW5kID09PSBkZWZhdWx0S2luZCAmJiBkZWZhdWx0QXJncy5kYXRhKXtcbiAgICAgICAgYXJncy5kYXRhID0gT2JqZWN0LmFzc2lnbihhcmdzLmRhdGEgfHwge30sIGRlZmF1bHRBcmdzLmRhdGEpXG4gICAgICAgIGFyZ3MuY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrIHx8IGRlZmF1bHRBcmdzLmNhbGxiYWNrXG4gICAgICB9XG4gICAgICB0aGlzLmZpbHRlclRvRWxzKHNvdXJjZUVsLCBhcmdzKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgdGhpc1tgZXhlY18ke2tpbmR9YF0oZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGlzVmlzaWJsZShlbCl7XG4gICAgcmV0dXJuICEhKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDApXG4gIH0sXG5cbiAgaXNJblZpZXdwb3J0KGVsKXtcbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC50b3AgPj0gMCAmJlxuICAgICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgICByZWN0LmJvdHRvbSA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmXG4gICAgICAgIHJlY3QucmlnaHQgPD0gKHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aClcbiAgICApXG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIC8vIGNvbW1hbmRzXG5cbiAgZXhlY19leGVjKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwgW2F0dHIsIHRvXSl7XG4gICAgbGV0IG5vZGVzID0gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGxldCBlbmNvZGVkSlMgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKVxuICAgICAgaWYoIWVuY29kZWRKUyl7IHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHthdHRyfSB0byBjb250YWluIEpTIGNvbW1hbmQgb24gXCIke3RvfVwiYCkgfVxuICAgICAgdmlldy5saXZlU29ja2V0LmV4ZWNKUyhub2RlLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSlcbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfZGlzcGF0Y2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dG8sIGV2ZW50LCBkZXRhaWwsIGJ1YmJsZXN9KXtcbiAgICBkZXRhaWwgPSBkZXRhaWwgfHwge31cbiAgICBkZXRhaWwuZGlzcGF0Y2hlciA9IHNvdXJjZUVsXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZWwsIGV2ZW50LCB7ZGV0YWlsLCBidWJibGVzfSlcbiAgfSxcblxuICBleGVjX3B1c2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKXtcbiAgICBsZXQge2V2ZW50LCBkYXRhLCB0YXJnZXQsIHBhZ2VfbG9hZGluZywgbG9hZGluZywgdmFsdWUsIGRpc3BhdGNoZXIsIGNhbGxiYWNrfSA9IGFyZ3NcbiAgICBsZXQgcHVzaE9wdHMgPSB7bG9hZGluZywgdmFsdWUsIHRhcmdldCwgcGFnZV9sb2FkaW5nOiAhIXBhZ2VfbG9hZGluZ31cbiAgICBsZXQgdGFyZ2V0U3JjID0gZXZlbnRUeXBlID09PSBcImNoYW5nZVwiICYmIGRpc3BhdGNoZXIgPyBkaXNwYXRjaGVyIDogc291cmNlRWxcbiAgICBsZXQgcGh4VGFyZ2V0ID0gdGFyZ2V0IHx8IHRhcmdldFNyYy5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCB0YXJnZXRTcmNcbiAgICB2aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodGFyZ2V0VmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICBpZighdGFyZ2V0Vmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIil7XG4gICAgICAgIGxldCB7bmV3Q2lkLCBfdGFyZ2V0fSA9IGFyZ3NcbiAgICAgICAgX3RhcmdldCA9IF90YXJnZXQgfHwgKERPTS5pc0Zvcm1JbnB1dChzb3VyY2VFbCkgPyBzb3VyY2VFbC5uYW1lIDogdW5kZWZpbmVkKVxuICAgICAgICBpZihfdGFyZ2V0KXsgcHVzaE9wdHMuX3RhcmdldCA9IF90YXJnZXQgfVxuICAgICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBuZXdDaWQsIGV2ZW50IHx8IHBoeEV2ZW50LCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUeXBlID09PSBcInN1Ym1pdFwiKXtcbiAgICAgICAgbGV0IHtzdWJtaXR0ZXJ9ID0gYXJnc1xuICAgICAgICB0YXJnZXRWaWV3LnN1Ym1pdEZvcm0oc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0Vmlldy5wdXNoRXZlbnQoZXZlbnRUeXBlLCBzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBldmVudCB8fCBwaHhFdmVudCwgZGF0YSwgcHVzaE9wdHMsIGNhbGxiYWNrKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19uYXZpZ2F0ZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIilcbiAgfSxcblxuICBleGVjX3BhdGNoKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2hyZWYsIHJlcGxhY2V9KXtcbiAgICB2aWV3LmxpdmVTb2NrZXQucHVzaEhpc3RvcnlQYXRjaChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIiwgc291cmNlRWwpXG4gIH0sXG5cbiAgZXhlY19mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5hdHRlbXB0Rm9jdXMoZWwpKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXNfZmlyc3QoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKSB8fCBBUklBLmZvY3VzRmlyc3QoZWwpKVxuICB9LFxuXG4gIGV4ZWNfcHVzaF9mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZm9jdXNTdGFjayA9IGVsIHx8IHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfcG9wX2ZvY3VzKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZihmb2N1c1N0YWNrKXsgZm9jdXNTdGFjay5mb2N1cygpIH1cbiAgICAgIGZvY3VzU3RhY2sgPSBudWxsXG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuYW1lcywgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpXG4gIH0sXG5cbiAgZXhlY19yZW1vdmVfY2xhc3MoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KVxuICB9LFxuXG4gIGV4ZWNfdHJhbnNpdGlvbihldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0aW1lLCB0cmFuc2l0aW9ufSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldylcbiAgfSxcblxuICBleGVjX3RvZ2dsZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWV9KXtcbiAgICB0aGlzLnRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUpXG4gIH0sXG5cbiAgZXhlY19zaG93KGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLnNob3coZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSlcbiAgfSxcblxuICBleGVjX2hpZGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKVxuICB9LFxuXG4gIGV4ZWNfc2V0X2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cjogW2F0dHIsIHZhbF19KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cn0pe1xuICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgfSxcblxuICAvLyB1dGlscyBmb3IgY29tbWFuZHNcblxuICBzaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUpe1xuICAgIGlmKCF0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgbnVsbCwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKXtcbiAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgbnVsbCwgdHJhbnNpdGlvbiwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgdG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIGlucywgb3V0cywgdGltZSl7XG4gICAgbGV0IFtpbkNsYXNzZXMsIGluU3RhcnRDbGFzc2VzLCBpbkVuZENsYXNzZXNdID0gaW5zIHx8IFtbXSwgW10sIFtdXVxuICAgIGxldCBbb3V0Q2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzLCBvdXRFbmRDbGFzc2VzXSA9IG91dHMgfHwgW1tdLCBbXSwgW11dXG4gICAgaWYoaW5DbGFzc2VzLmxlbmd0aCA+IDAgfHwgb3V0Q2xhc3Nlcy5sZW5ndGggPiAwKXtcbiAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRTdGFydENsYXNzZXMsIGluQ2xhc3Nlcy5jb25jYXQoaW5TdGFydENsYXNzZXMpLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dENsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0RW5kQ2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtc3RhcnRcIikpXG4gICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJyZW1vdmVcIil7IHJldHVybiB9XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpblN0YXJ0Q2xhc3Nlcywgb3V0Q2xhc3Nlcy5jb25jYXQob3V0U3RhcnRDbGFzc2VzKS5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpbkNsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5FbmRDbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgaW5DbGFzc2VzLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1zdGFydFwiKSlcbiAgICAgICAgICBsZXQgc3RpY2t5RGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheShlbClcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBzdGlja3lEaXNwbGF5KVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMsIHJlbW92ZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpe1xuICAgIGxldCBbdHJhbnNpdGlvblJ1biwgdHJhbnNpdGlvblN0YXJ0LCB0cmFuc2l0aW9uRW5kXSA9IHRyYW5zaXRpb24gfHwgW1tdLCBbXSwgW11dXG4gICAgaWYodHJhbnNpdGlvblJ1bi5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvblN0YXJ0LCBbXS5jb25jYXQodHJhbnNpdGlvblJ1bikuY29uY2F0KHRyYW5zaXRpb25FbmQpKVxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvblJ1biwgW10pXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvbkVuZCwgdHJhbnNpdGlvblN0YXJ0KSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGxldCBvbkRvbmUgPSAoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgYWRkcy5jb25jYXQodHJhbnNpdGlvbkVuZCksIHJlbW92ZXMuY29uY2F0KHRyYW5zaXRpb25SdW4pLmNvbmNhdCh0cmFuc2l0aW9uU3RhcnQpKVxuICAgICAgcmV0dXJuIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBsZXQgW3ByZXZBZGRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgW1tdLCBbXV0pXG4gICAgICBsZXQga2VlcEFkZHMgPSBhZGRzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQga2VlcFJlbW92ZXMgPSByZW1vdmVzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBuZXdBZGRzID0gcHJldkFkZHMuZmlsdGVyKG5hbWUgPT4gcmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBBZGRzKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBwcmV2UmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBhZGRzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICAgIERPTS5wdXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uZXdSZW1vdmVzKVxuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LmFkZCguLi5uZXdBZGRzKVxuICAgICAgICByZXR1cm4gW25ld0FkZHMsIG5ld1JlbW92ZXNdXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0T3JSZW1vdmVBdHRycyhlbCwgc2V0cywgcmVtb3Zlcyl7XG4gICAgbGV0IFtwcmV2U2V0cywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJhdHRyc1wiLCBbW10sIFtdXSlcblxuICAgIGxldCBhbHRlcmVkQXR0cnMgPSBzZXRzLm1hcCgoW2F0dHIsIF92YWxdKSA9PiBhdHRyKS5jb25jYXQocmVtb3Zlcyk7XG4gICAgbGV0IG5ld1NldHMgPSBwcmV2U2V0cy5maWx0ZXIoKFthdHRyLCBfdmFsXSkgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHNldHMpO1xuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKChhdHRyKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQocmVtb3Zlcyk7XG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzQWxsQ2xhc3NlcyhlbCwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmV2ZXJ5KG5hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB9LFxuXG4gIGlzVG9nZ2xlZE91dChlbCwgb3V0Q2xhc3Nlcyl7XG4gICAgcmV0dXJuICF0aGlzLmlzVmlzaWJsZShlbCkgfHwgdGhpcy5oYXNBbGxDbGFzc2VzKGVsLCBvdXRDbGFzc2VzKVxuICB9LFxuXG4gIGZpbHRlclRvRWxzKHNvdXJjZUVsLCB7dG99KXtcbiAgICByZXR1cm4gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gIH0sXG5cbiAgZGVmYXVsdERpc3BsYXkoZWwpe1xuICAgIHJldHVybiB7dHI6IFwidGFibGUtcm93XCIsIHRkOiBcInRhYmxlLWNlbGxcIn1bZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBcImJsb2NrXCJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKUyIsICJpbXBvcnQge1xuICBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VULFxuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBQSFhfQVVUT19SRUNPVkVSLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsXG4gIFBIWF9ESVNBQkxFRCxcbiAgUEhYX0xPQURJTkdfQ0xBU1MsXG4gIFBIWF9FVkVOVF9DTEFTU0VTLFxuICBQSFhfRVJST1JfQ0xBU1MsXG4gIFBIWF9DTElFTlRfRVJST1JfQ0xBU1MsXG4gIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1MsXG4gIFBIWF9GRUVEQkFDS19GT1IsXG4gIFBIWF9IQVNfU1VCTUlUVEVELFxuICBQSFhfSE9PSyxcbiAgUEhYX1BBR0VfTE9BRElORyxcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BST0dSRVNTLFxuICBQSFhfUkVBRE9OTFksXG4gIFBIWF9SRUYsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUkFDS19TVEFUSUMsXG4gIFBIWF9UUkFDS19VUExPQURTLFxuICBQSFhfVVBEQVRFLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9NQUlOLFxuICBQSFhfTU9VTlRFRCxcbiAgUFVTSF9USU1FT1VULFxuICBQSFhfVklFV1BPUlRfVE9QLFxuICBQSFhfVklFV1BPUlRfQk9UVE9NLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGlzRW1wdHksXG4gIGlzRXF1YWxPYmosXG4gIGxvZ0Vycm9yLFxuICBtYXliZSxcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUGF0Y2ggZnJvbSBcIi4vZG9tX3BhdGNoXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgUmVuZGVyZWQgZnJvbSBcIi4vcmVuZGVyZWRcIlxuaW1wb3J0IFZpZXdIb29rIGZyb20gXCIuL3ZpZXdfaG9va1wiXG5pbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuXG5sZXQgc2VyaWFsaXplRm9ybSA9IChmb3JtLCBtZXRhZGF0YSwgb25seU5hbWVzID0gW10pID0+IHtcbiAgbGV0IHtzdWJtaXR0ZXIsIC4uLm1ldGF9ID0gbWV0YWRhdGFcblxuICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggYG5ldyBGb3JtRGF0YShmb3JtLCBzdWJtaXR0ZXIpYCB3aGVuIHN1cHBvcnRlZCBieSBsYXRlc3QgYnJvd3NlcnMsXG4gIC8vICAgICAgIGFuZCBtZW50aW9uIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIGluIHRoZSBkb2NzLlxuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSlcblxuICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBGb3JtRGF0YSBjb25zdHJ1Y3RvciBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIGFyZ3VtZW50LlxuICBpZihzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgc3VibWl0dGVyLmZvcm0gJiYgc3VibWl0dGVyLmZvcm0gPT09IGZvcm0pe1xuICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXR0ZXIubmFtZSwgc3VibWl0dGVyLnZhbHVlKVxuICB9XG5cbiAgbGV0IHRvUmVtb3ZlID0gW11cblxuICBmb3JtRGF0YS5mb3JFYWNoKCh2YWwsIGtleSwgX2luZGV4KSA9PiB7XG4gICAgaWYodmFsIGluc3RhbmNlb2YgRmlsZSl7IHRvUmVtb3ZlLnB1c2goa2V5KSB9XG4gIH0pXG5cbiAgLy8gQ2xlYW51cCBhZnRlciBidWlsZGluZyBmaWxlRGF0YVxuICB0b1JlbW92ZS5mb3JFYWNoKGtleSA9PiBmb3JtRGF0YS5kZWxldGUoa2V5KSlcblxuICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gIGZvcihsZXQgW2tleSwgdmFsXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpe1xuICAgIGlmKG9ubHlOYW1lcy5sZW5ndGggPT09IDAgfHwgb25seU5hbWVzLmluZGV4T2Yoa2V5KSA+PSAwKXtcbiAgICAgIHBhcmFtcy5hcHBlbmQoa2V5LCB2YWwpXG4gICAgfVxuICB9XG4gIGZvcihsZXQgbWV0YUtleSBpbiBtZXRhKXsgcGFyYW1zLmFwcGVuZChtZXRhS2V5LCBtZXRhW21ldGFLZXldKSB9XG5cbiAgcmV0dXJuIHBhcmFtcy50b1N0cmluZygpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXcge1xuICBjb25zdHJ1Y3RvcihlbCwgbGl2ZVNvY2tldCwgcGFyZW50VmlldywgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICB0aGlzLmlzRGVhZCA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZmxhc2ggPSBmbGFzaFxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50Vmlld1xuICAgIHRoaXMucm9vdCA9IHBhcmVudFZpZXcgPyBwYXJlbnRWaWV3LnJvb3QgOiB0aGlzXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5pZCA9IHRoaXMuZWwuaWRcbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLmNoaWxkSm9pbnMgPSAwXG4gICAgdGhpcy5sb2FkZXJUaW1lciA9IG51bGxcbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5wcnVuaW5nQ0lEcyA9IFtdXG4gICAgdGhpcy5yZWRpcmVjdCA9IGZhbHNlXG4gICAgdGhpcy5ocmVmID0gbnVsbFxuICAgIHRoaXMuam9pbkNvdW50ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5qb2luQ291bnQgLSAxIDogMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gZnVuY3Rpb24ob25Eb25lKXsgb25Eb25lICYmIG9uRG9uZSgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uKCl7IH1cbiAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gdGhpcy5wYXJlbnQgPyBudWxsIDogW11cbiAgICB0aGlzLnZpZXdIb29rcyA9IHt9XG4gICAgdGhpcy51cGxvYWRlcnMgPSB7fVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMgPSBbXVxuICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLnBhcmVudCA/IG51bGwgOiB7fVxuICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSA9IHt9XG4gICAgdGhpcy5jaGFubmVsID0gdGhpcy5saXZlU29ja2V0LmNoYW5uZWwoYGx2OiR7dGhpcy5pZH1gLCAoKSA9PiB7XG4gICAgICBsZXQgdXJsID0gdGhpcy5ocmVmICYmIHRoaXMuZXhwYW5kVVJMKHRoaXMuaHJlZilcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZGlyZWN0OiB0aGlzLnJlZGlyZWN0ID8gdXJsIDogdW5kZWZpbmVkLFxuICAgICAgICB1cmw6IHRoaXMucmVkaXJlY3QgPyB1bmRlZmluZWQgOiB1cmwgfHwgdW5kZWZpbmVkLFxuICAgICAgICBwYXJhbXM6IHRoaXMuY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlciksXG4gICAgICAgIHNlc3Npb246IHRoaXMuZ2V0U2Vzc2lvbigpLFxuICAgICAgICBzdGF0aWM6IHRoaXMuZ2V0U3RhdGljKCksXG4gICAgICAgIGZsYXNoOiB0aGlzLmZsYXNoLFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzZXRIcmVmKGhyZWYpeyB0aGlzLmhyZWYgPSBocmVmIH1cblxuICBzZXRSZWRpcmVjdChocmVmKXtcbiAgICB0aGlzLnJlZGlyZWN0ID0gdHJ1ZVxuICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgfVxuXG4gIGlzTWFpbigpeyByZXR1cm4gdGhpcy5lbC5oYXNBdHRyaWJ1dGUoUEhYX01BSU4pIH1cblxuICBjb25uZWN0UGFyYW1zKGxpdmVSZWZlcmVyKXtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5saXZlU29ja2V0LnBhcmFtcyh0aGlzLmVsKVxuICAgIGxldCBtYW5pZmVzdCA9XG4gICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9UUkFDS19TVEFUSUMpfV1gKVxuICAgICAgICAubWFwKG5vZGUgPT4gbm9kZS5zcmMgfHwgbm9kZS5ocmVmKS5maWx0ZXIodXJsID0+IHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIilcblxuICAgIGlmKG1hbmlmZXN0Lmxlbmd0aCA+IDApeyBwYXJhbXNbXCJfdHJhY2tfc3RhdGljXCJdID0gbWFuaWZlc3QgfVxuICAgIHBhcmFtc1tcIl9tb3VudHNcIl0gPSB0aGlzLmpvaW5Db3VudFxuICAgIHBhcmFtc1tcIl9saXZlX3JlZmVyZXJcIl0gPSBsaXZlUmVmZXJlclxuXG4gICAgcmV0dXJuIHBhcmFtc1xuICB9XG5cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY2hhbm5lbC5jYW5QdXNoKCkgfVxuXG4gIGdldFNlc3Npb24oKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSB9XG5cbiAgZ2V0U3RhdGljKCl7XG4gICAgbGV0IHZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9TVEFUSUMpXG4gICAgcmV0dXJuIHZhbCA9PT0gXCJcIiA/IG51bGwgOiB2YWxcbiAgfVxuXG4gIGRlc3Ryb3koY2FsbGJhY2sgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuICAgIGRlbGV0ZSB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1cbiAgICBpZih0aGlzLnBhcmVudCl7IGRlbGV0ZSB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5wYXJlbnQuaWRdW3RoaXMuaWRdIH1cbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICBsZXQgb25GaW5pc2hlZCA9ICgpID0+IHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3Mpe1xuICAgICAgICB0aGlzLmRlc3Ryb3lIb29rKHRoaXMudmlld0hvb2tzW2lkXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBET00ubWFya1BoeENoaWxkRGVzdHJveWVkKHRoaXMuZWwpXG5cbiAgICB0aGlzLmxvZyhcImRlc3Ryb3llZFwiLCAoKSA9PiBbXCJ0aGUgY2hpbGQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnRcIl0pXG4gICAgdGhpcy5jaGFubmVsLmxlYXZlKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgb25GaW5pc2hlZClcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgb25GaW5pc2hlZClcbiAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCBvbkZpbmlzaGVkKVxuICB9XG5cbiAgc2V0Q29udGFpbmVyQ2xhc3NlcyguLi5jbGFzc2VzKXtcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICAgICAgUEhYX0xPQURJTkdfQ0xBU1MsXG4gICAgICBQSFhfRVJST1JfQ0xBU1MsXG4gICAgICBQSFhfQ0xJRU5UX0VSUk9SX0NMQVNTLFxuICAgICAgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU1xuICAgIClcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NlcylcbiAgfVxuXG4gIHNob3dMb2FkZXIodGltZW91dCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgaWYodGltZW91dCl7XG4gICAgICB0aGlzLmxvYWRlclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNob3dMb2FkZXIoKSwgdGltZW91dClcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7IHRoaXMudmlld0hvb2tzW2lkXS5fX2Rpc2Nvbm5lY3RlZCgpIH1cbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfTE9BRElOR19DTEFTUylcbiAgICB9XG4gIH1cblxuICBleGVjQWxsKGJpbmRpbmcpe1xuICAgIERPTS5hbGwodGhpcy5lbCwgYFske2JpbmRpbmd9XWAsIGVsID0+IHRoaXMubGl2ZVNvY2tldC5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShiaW5kaW5nKSkpXG4gIH1cblxuICBoaWRlTG9hZGVyKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9DT05ORUNURURfQ0xBU1MpXG4gICAgdGhpcy5leGVjQWxsKHRoaXMuYmluZGluZyhcImNvbm5lY3RlZFwiKSlcbiAgfVxuXG4gIHRyaWdnZXJSZWNvbm5lY3RlZCgpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19yZWNvbm5lY3RlZCgpIH1cbiAgfVxuXG4gIGxvZyhraW5kLCBtc2dDYWxsYmFjayl7XG4gICAgdGhpcy5saXZlU29ja2V0LmxvZyh0aGlzLCBraW5kLCBtc2dDYWxsYmFjaylcbiAgfVxuXG4gIHRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lID0gZnVuY3Rpb24oKXt9KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH1cblxuICB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2spe1xuICAgIGlmKHBoeFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHBoeFRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5vd25lcihwaHhUYXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgcGh4VGFyZ2V0KSlcbiAgICB9XG5cbiAgICBpZihpc0NpZChwaHhUYXJnZXQpKXtcbiAgICAgIGxldCB0YXJnZXRzID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBwaHhUYXJnZXQpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm91bmQgbWF0Y2hpbmcgcGh4LXRhcmdldCBvZiAke3BoeFRhcmdldH1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcywgcGFyc2VJbnQocGh4VGFyZ2V0KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGh4VGFyZ2V0KSlcbiAgICAgIGlmKHRhcmdldHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vdGhpbmcgZm91bmQgbWF0Y2hpbmcgdGhlIHBoeC10YXJnZXQgc2VsZWN0b3IgXCIke3BoeFRhcmdldH1cImApIH1cbiAgICAgIHRhcmdldHMuZm9yRWFjaCh0YXJnZXQgPT4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCB0YXJnZXQpKSlcbiAgICB9XG4gIH1cblxuICBhcHBseURpZmYodHlwZSwgcmF3RGlmZiwgY2FsbGJhY2spe1xuICAgIHRoaXMubG9nKHR5cGUsICgpID0+IFtcIlwiLCBjbG9uZShyYXdEaWZmKV0pXG4gICAgbGV0IHtkaWZmLCByZXBseSwgZXZlbnRzLCB0aXRsZX0gPSBSZW5kZXJlZC5leHRyYWN0KHJhd0RpZmYpXG4gICAgY2FsbGJhY2soe2RpZmYsIHJlcGx5LCBldmVudHN9KVxuICAgIGlmKHRpdGxlKXsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBET00ucHV0VGl0bGUodGl0bGUpKSB9XG4gIH1cblxuICBvbkpvaW4ocmVzcCl7XG4gICAgbGV0IHtyZW5kZXJlZCwgY29udGFpbmVyfSA9IHJlc3BcbiAgICBpZihjb250YWluZXIpe1xuICAgICAgbGV0IFt0YWcsIGF0dHJzXSA9IGNvbnRhaW5lclxuICAgICAgdGhpcy5lbCA9IERPTS5yZXBsYWNlUm9vdENvbnRhaW5lcih0aGlzLmVsLCB0YWcsIGF0dHJzKVxuICAgIH1cbiAgICB0aGlzLmNoaWxkSm9pbnMgPSAwXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IHRydWVcbiAgICB0aGlzLmZsYXNoID0gbnVsbFxuXG4gICAgQnJvd3Nlci5kcm9wTG9jYWwodGhpcy5saXZlU29ja2V0LmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTKVxuICAgIHRoaXMuYXBwbHlEaWZmKFwibW91bnRcIiwgcmVuZGVyZWQsICh7ZGlmZiwgZXZlbnRzfSkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IG5ldyBSZW5kZXJlZCh0aGlzLmlkLCBkaWZmKVxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKG51bGwsIFwiam9pblwiKVxuICAgICAgdGhpcy5kcm9wUGVuZGluZ1JlZnMoKVxuICAgICAgbGV0IGZvcm1zID0gdGhpcy5mb3Jtc0ZvclJlY292ZXJ5KGh0bWwpXG4gICAgICB0aGlzLmpvaW5Db3VudCsrXG5cbiAgICAgIGlmKGZvcm1zLmxlbmd0aCA+IDApe1xuICAgICAgICBmb3Jtcy5mb3JFYWNoKChbZm9ybSwgbmV3Rm9ybSwgbmV3Q2lkXSwgaSkgPT4ge1xuICAgICAgICAgIHRoaXMucHVzaEZvcm1SZWNvdmVyeShmb3JtLCBuZXdDaWQsIHJlc3AgPT4ge1xuICAgICAgICAgICAgaWYoaSA9PT0gZm9ybXMubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uSm9pbkNvbXBsZXRlKHJlc3AsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZHJvcFBlbmRpbmdSZWZzKCl7XG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5pZH1cIl1bJHtQSFhfUkVGfV1gLCBlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luQ29tcGxldGUoe2xpdmVfcGF0Y2h9LCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgYSBiZXR0ZXIgZXhwZXJpZW5jZSwgd2Ugd2FudCB0byBqb2luXG4gICAgLy8gYWxsIExpdmVWaWV3cyBmaXJzdCBhbmQgb25seSB0aGVuIGFwcGx5IHRoZWlyIHBhdGNoZXMuXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxIHx8ICh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuaXNKb2luUGVuZGluZygpKSl7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgfVxuXG4gICAgLy8gT25lIGRvd25zaWRlIG9mIHRoaXMgYXBwcm9hY2ggaXMgdGhhdCB3ZSBuZWVkIHRvIGZpbmQgcGh4Q2hpbGRyZW5cbiAgICAvLyBpbiB0aGUgaHRtbCBmcmFnbWVudCwgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgRE9NLiBUaGUgZnJhZ21lbnRcbiAgICAvLyBhbHNvIGRvZXMgbm90IGluY2x1ZGUgUEhYX1NUQVRJQywgc28gd2UgbmVlZCB0byBjb3B5IGl0IG92ZXIgZnJvbVxuICAgIC8vIHRoZSBET00uXG4gICAgbGV0IG5ld0NoaWxkcmVuID0gRE9NLmZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgdGhpcy5pZCkuZmlsdGVyKHRvRWwgPT4ge1xuICAgICAgbGV0IGZyb21FbCA9IHRvRWwuaWQgJiYgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke3RvRWwuaWR9XCJdYClcbiAgICAgIGxldCBwaHhTdGF0aWMgPSBmcm9tRWwgJiYgZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgICAgaWYocGh4U3RhdGljKXsgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgcGh4U3RhdGljKSB9XG4gICAgICByZXR1cm4gdGhpcy5qb2luQ2hpbGQodG9FbClcbiAgICB9KVxuXG4gICAgaWYobmV3Q2hpbGRyZW4ubGVuZ3RoID09PSAwKXtcbiAgICAgIGlmKHRoaXMucGFyZW50KXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKV0pXG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgICB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKV0pXG4gICAgfVxuICB9XG5cbiAgYXR0YWNoVHJ1ZURvY0VsKCl7XG4gICAgdGhpcy5lbCA9IERPTS5ieUlkKHRoaXMuaWQpXG4gICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZClcbiAgfVxuXG4gIGV4ZWNOZXdNb3VudGVkKCl7XG4gICAgbGV0IHBoeFZpZXdwb3J0VG9wID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9UT1ApXG4gICAgbGV0IHBoeFZpZXdwb3J0Qm90dG9tID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9CT1RUT00pXG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7cGh4Vmlld3BvcnRUb3B9XSwgWyR7cGh4Vmlld3BvcnRCb3R0b219XWAsIGhvb2tFbCA9PiB7XG4gICAgICBET00ubWF5YmVBZGRQcml2YXRlSG9va3MoaG9va0VsLCBwaHhWaWV3cG9ydFRvcCwgcGh4Vmlld3BvcnRCb3R0b20pXG4gICAgICB0aGlzLm1heWJlQWRkTmV3SG9vayhob29rRWwpXG4gICAgfSlcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC0ke1BIWF9IT09LfV1gLCBob29rRWwgPT4ge1xuICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgIH0pXG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKX1dYCwgZWwgPT4gdGhpcy5tYXliZU1vdW50ZWQoZWwpKVxuICB9XG5cbiAgYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICB0aGlzLmF0dGFjaFRydWVEb2NFbCgpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgcGF0Y2gubWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKVxuICAgIHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCBmYWxzZSwgdHJ1ZSlcbiAgICB0aGlzLmpvaW5OZXdDaGlsZHJlbigpXG4gICAgdGhpcy5leGVjTmV3TW91bnRlZCgpXG5cbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG5cbiAgICBpZihsaXZlX3BhdGNoKXtcbiAgICAgIGxldCB7a2luZCwgdG99ID0gbGl2ZV9wYXRjaFxuICAgICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgICB9XG4gICAgdGhpcy5oaWRlTG9hZGVyKClcbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEpeyB0aGlzLnRyaWdnZXJSZWNvbm5lY3RlZCgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjaygpXG4gIH1cblxuICB0cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25CZWZvcmVFbFVwZGF0ZWRcIiwgW2Zyb21FbCwgdG9FbF0pXG4gICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soZnJvbUVsKVxuICAgIGxldCBpc0lnbm9yZWQgPSBob29rICYmIERPTS5pc0lnbm9yZWQoZnJvbUVsLCB0aGlzLmJpbmRpbmcoUEhYX1VQREFURSkpXG4gICAgaWYoaG9vayAmJiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpICYmICEoaXNJZ25vcmVkICYmIGlzRXF1YWxPYmooZnJvbUVsLmRhdGFzZXQsIHRvRWwuZGF0YXNldCkpKXtcbiAgICAgIGhvb2suX19iZWZvcmVVcGRhdGUoKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gIH1cblxuICBtYXliZU1vdW50ZWQoZWwpe1xuICAgIGxldCBwaHhNb3VudGVkID0gZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfTU9VTlRFRCkpXG4gICAgbGV0IGhhc0JlZW5JbnZva2VkID0gcGh4TW91bnRlZCAmJiBET00ucHJpdmF0ZShlbCwgXCJtb3VudGVkXCIpXG4gICAgaWYocGh4TW91bnRlZCAmJiAhaGFzQmVlbkludm9rZWQpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgcGh4TW91bnRlZClcbiAgICAgIERPTS5wdXRQcml2YXRlKGVsLCBcIm1vdW50ZWRcIiwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBtYXliZUFkZE5ld0hvb2soZWwsIGZvcmNlKXtcbiAgICBsZXQgbmV3SG9vayA9IHRoaXMuYWRkSG9vayhlbClcbiAgICBpZihuZXdIb29rKXsgbmV3SG9vay5fX21vdW50ZWQoKSB9XG4gIH1cblxuICBwZXJmb3JtUGF0Y2gocGF0Y2gsIHBydW5lQ2lkcywgaXNKb2luUGF0Y2ggPSBmYWxzZSl7XG4gICAgbGV0IHJlbW92ZWRFbHMgPSBbXVxuICAgIGxldCBwaHhDaGlsZHJlbkFkZGVkID0gZmFsc2VcbiAgICBsZXQgdXBkYXRlZEhvb2tJZHMgPSBuZXcgU2V0KClcblxuICAgIHBhdGNoLmFmdGVyKFwiYWRkZWRcIiwgZWwgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbk5vZGVBZGRlZFwiLCBbZWxdKVxuICAgICAgbGV0IHBoeFZpZXdwb3J0VG9wID0gdGhpcy5iaW5kaW5nKFBIWF9WSUVXUE9SVF9UT1ApXG4gICAgICBsZXQgcGh4Vmlld3BvcnRCb3R0b20gPSB0aGlzLmJpbmRpbmcoUEhYX1ZJRVdQT1JUX0JPVFRPTSlcbiAgICAgIERPTS5tYXliZUFkZFByaXZhdGVIb29rcyhlbCwgcGh4Vmlld3BvcnRUb3AsIHBoeFZpZXdwb3J0Qm90dG9tKVxuICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soZWwpXG4gICAgICBpZihlbC5nZXRBdHRyaWJ1dGUpeyB0aGlzLm1heWJlTW91bnRlZChlbCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInBoeENoaWxkQWRkZWRcIiwgZWwgPT4ge1xuICAgICAgaWYoRE9NLmlzUGh4U3RpY2t5KGVsKSl7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5qb2luUm9vdFZpZXdzKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBoeENoaWxkcmVuQWRkZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHBhdGNoLmJlZm9yZShcInVwZGF0ZWRcIiwgKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgbGV0IGhvb2sgPSB0aGlzLnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGZyb21FbCwgdG9FbClcbiAgICAgIGlmKGhvb2speyB1cGRhdGVkSG9va0lkcy5hZGQoZnJvbUVsLmlkKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwidXBkYXRlZFwiLCBlbCA9PiB7XG4gICAgICBpZih1cGRhdGVkSG9va0lkcy5oYXMoZWwuaWQpKXsgdGhpcy5nZXRIb29rKGVsKS5fX3VwZGF0ZWQoKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwiZGlzY2FyZGVkXCIsIChlbCkgPT4ge1xuICAgICAgaWYoZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKXsgcmVtb3ZlZEVscy5wdXNoKGVsKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgZWxzID0+IHRoaXMuYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxzLCBwcnVuZUNpZHMpKVxuICAgIHBhdGNoLnBlcmZvcm0oaXNKb2luUGF0Y2gpXG4gICAgdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChyZW1vdmVkRWxzLCBwcnVuZUNpZHMpXG5cbiAgICByZXR1cm4gcGh4Q2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxlbWVudHMsIHBydW5lQ2lkcyl7XG4gICAgbGV0IGRlc3Ryb3llZENJRHMgPSBbXVxuICAgIGVsZW1lbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIGxldCBjb21wb25lbnRzID0gRE9NLmFsbChwYXJlbnQsIGBbJHtQSFhfQ09NUE9ORU5UfV1gKVxuICAgICAgbGV0IGhvb2tzID0gRE9NLmFsbChwYXJlbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV1gKVxuICAgICAgY29tcG9uZW50cy5jb25jYXQocGFyZW50KS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgbGV0IGNpZCA9IHRoaXMuY29tcG9uZW50SUQoZWwpXG4gICAgICAgIGlmKGlzQ2lkKGNpZCkgJiYgZGVzdHJveWVkQ0lEcy5pbmRleE9mKGNpZCkgPT09IC0xKXsgZGVzdHJveWVkQ0lEcy5wdXNoKGNpZCkgfVxuICAgICAgfSlcbiAgICAgIGhvb2tzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goaG9va0VsID0+IHtcbiAgICAgICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soaG9va0VsKVxuICAgICAgICBob29rICYmIHRoaXMuZGVzdHJveUhvb2soaG9vaylcbiAgICAgIH0pXG4gICAgfSlcbiAgICAvLyBXZSBzaG91bGQgbm90IHBydW5lQ2lkcyBvbiBqb2lucy4gT3RoZXJ3aXNlLCBpbiBjYXNlIG9mXG4gICAgLy8gcmVqb2lucywgd2UgbWF5IG5vdGlmeSBjaWRzIHRoYXQgbm8gbG9uZ2VyIGJlbG9uZyB0byB0aGVcbiAgICAvLyBjdXJyZW50IExpdmVWaWV3IHRvIGJlIHJlbW92ZWQuXG4gICAgaWYocHJ1bmVDaWRzKXtcbiAgICAgIHRoaXMubWF5YmVQdXNoQ29tcG9uZW50c0Rlc3Ryb3llZChkZXN0cm95ZWRDSURzKVxuICAgIH1cbiAgfVxuXG4gIGpvaW5OZXdDaGlsZHJlbigpe1xuICAgIERPTS5maW5kUGh4Q2hpbGRyZW4odGhpcy5lbCwgdGhpcy5pZCkuZm9yRWFjaChlbCA9PiB0aGlzLmpvaW5DaGlsZChlbCkpXG4gIH1cblxuICBnZXRDaGlsZEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdW2lkXSB9XG5cbiAgZ2V0RGVzY2VuZGVudEJ5RWwoZWwpe1xuICAgIGlmKGVsLmlkID09PSB0aGlzLmlkKXtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2VsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKV1bZWwuaWRdXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveURlc2NlbmRlbnQoaWQpe1xuICAgIGZvcihsZXQgcGFyZW50SWQgaW4gdGhpcy5yb290LmNoaWxkcmVuKXtcbiAgICAgIGZvcihsZXQgY2hpbGRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdKXtcbiAgICAgICAgaWYoY2hpbGRJZCA9PT0gaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXVtjaGlsZElkXS5kZXN0cm95KCkgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGpvaW5DaGlsZChlbCl7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5nZXRDaGlsZEJ5SWQoZWwuaWQpXG4gICAgaWYoIWNoaWxkKXtcbiAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMubGl2ZVNvY2tldCwgdGhpcylcbiAgICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVt2aWV3LmlkXSA9IHZpZXdcbiAgICAgIHZpZXcuam9pbigpXG4gICAgICB0aGlzLmNoaWxkSm9pbnMrK1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBpc0pvaW5QZW5kaW5nKCl7IHJldHVybiB0aGlzLmpvaW5QZW5kaW5nIH1cblxuICBhY2tKb2luKF9jaGlsZCl7XG4gICAgdGhpcy5jaGlsZEpvaW5zLS1cblxuICAgIGlmKHRoaXMuY2hpbGRKb2lucyA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKCl7XG4gICAgdGhpcy5qb2luQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcy5mb3JFYWNoKChbdmlldywgb3BdKSA9PiB7XG4gICAgICAgIGlmKCF2aWV3LmlzRGVzdHJveWVkKCkpeyBvcCgpIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gW11cbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlKGRpZmYsIGV2ZW50cyl7XG4gICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkgfHwgKHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHRoaXMucm9vdC5pc01haW4oKSkpe1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmYsIGV2ZW50c30pXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZC5tZXJnZURpZmYoZGlmZilcbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG5cbiAgICAvLyBXaGVuIHRoZSBkaWZmIG9ubHkgY29udGFpbnMgY29tcG9uZW50IGRpZmZzLCB0aGVuIHdhbGsgY29tcG9uZW50c1xuICAgIC8vIGFuZCBwYXRjaCBvbmx5IHRoZSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5lcnMgZm91bmQgaW4gdGhlIGRpZmYuXG4gICAgLy8gT3RoZXJ3aXNlLCBwYXRjaCBlbnRpcmUgTFYgY29udGFpbmVyLlxuICAgIGlmKHRoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBwYXJlbnRDaWRzID0gRE9NLmZpbmRQYXJlbnRDSURzKHRoaXMuZWwsIHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSlcbiAgICAgICAgcGFyZW50Q2lkcy5mb3JFYWNoKHBhcmVudENJRCA9PiB7XG4gICAgICAgICAgaWYodGhpcy5jb21wb25lbnRQYXRjaCh0aGlzLnJlbmRlcmVkLmdldENvbXBvbmVudChkaWZmLCBwYXJlbnRDSUQpLCBwYXJlbnRDSUQpKXsgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWUgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIWlzRW1wdHkoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJmdWxsIHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKGRpZmYsIFwidXBkYXRlXCIpXG4gICAgICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBudWxsKVxuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMubGl2ZVNvY2tldC5kaXNwYXRjaEV2ZW50cyhldmVudHMpXG4gICAgaWYocGh4Q2hpbGRyZW5BZGRlZCl7IHRoaXMuam9pbk5ld0NoaWxkcmVuKCkgfVxuICB9XG5cbiAgcmVuZGVyQ29udGFpbmVyKGRpZmYsIGtpbmQpe1xuICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQudGltZShgdG9TdHJpbmcgZGlmZiAoJHtraW5kfSlgLCAoKSA9PiB7XG4gICAgICBsZXQgdGFnID0gdGhpcy5lbC50YWdOYW1lXG4gICAgICAvLyBEb24ndCBza2lwIGFueSBjb21wb25lbnQgaW4gdGhlIGRpZmYgbm9yIGFueSBtYXJrZWQgYXMgcHJ1bmVkXG4gICAgICAvLyAoYXMgdGhleSBtYXkgaGF2ZSBiZWVuIGFkZGVkIGJhY2spXG4gICAgICBsZXQgY2lkcyA9IGRpZmYgPyB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZGlmZikuY29uY2F0KHRoaXMucHJ1bmluZ0NJRHMpIDogbnVsbFxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyZWQudG9TdHJpbmcoY2lkcylcbiAgICAgIHJldHVybiBbYDwke3RhZ30+JHtodG1sfTwvJHt0YWd9PmAsIHN0cmVhbXNdXG4gICAgfSlcbiAgfVxuXG4gIGNvbXBvbmVudFBhdGNoKGRpZmYsIGNpZCl7XG4gICAgaWYoaXNFbXB0eShkaWZmKSkgcmV0dXJuIGZhbHNlXG4gICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyZWQuY29tcG9uZW50VG9TdHJpbmcoY2lkKVxuICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBjaWQpXG4gICAgbGV0IGNoaWxkcmVuQWRkZWQgPSB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgdHJ1ZSlcbiAgICByZXR1cm4gY2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgZ2V0SG9vayhlbCl7IHJldHVybiB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoZWwpXSB9XG5cbiAgYWRkSG9vayhlbCl7XG4gICAgaWYoVmlld0hvb2suZWxlbWVudElEKGVsKSB8fCAhZWwuZ2V0QXR0cmlidXRlKXsgcmV0dXJuIH1cbiAgICBsZXQgaG9va05hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtcGh4LSR7UEhYX0hPT0t9YCkgfHwgZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfSE9PSykpXG4gICAgaWYoaG9va05hbWUgJiYgIXRoaXMub3duc0VsZW1lbnQoZWwpKXsgcmV0dXJuIH1cbiAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy5saXZlU29ja2V0LmdldEhvb2tDYWxsYmFja3MoaG9va05hbWUpXG5cbiAgICBpZihjYWxsYmFja3Mpe1xuICAgICAgaWYoIWVsLmlkKXsgbG9nRXJyb3IoYG5vIERPTSBJRCBmb3IgaG9vayBcIiR7aG9va05hbWV9XCIuIEhvb2tzIHJlcXVpcmUgYSB1bmlxdWUgSUQgb24gZWFjaCBlbGVtZW50LmAsIGVsKSB9XG4gICAgICBsZXQgaG9vayA9IG5ldyBWaWV3SG9vayh0aGlzLCBlbCwgY2FsbGJhY2tzKVxuICAgICAgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXSA9IGhvb2tcbiAgICAgIHJldHVybiBob29rXG4gICAgfSBlbHNlIGlmKGhvb2tOYW1lICE9PSBudWxsKXtcbiAgICAgIGxvZ0Vycm9yKGB1bmtub3duIGhvb2sgZm91bmQgZm9yIFwiJHtob29rTmFtZX1cImAsIGVsKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lIb29rKGhvb2spe1xuICAgIGhvb2suX19kZXN0cm95ZWQoKVxuICAgIGhvb2suX19jbGVhbnVwX18oKVxuICAgIGRlbGV0ZSB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoaG9vay5lbCldXG4gIH1cblxuICBhcHBseVBlbmRpbmdVcGRhdGVzKCl7XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaCgoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuZWFjaENoaWxkKGNoaWxkID0+IGNoaWxkLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKSlcbiAgfVxuXG4gIGVhY2hDaGlsZChjYWxsYmFjayl7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdIHx8IHt9XG4gICAgZm9yKGxldCBpZCBpbiBjaGlsZHJlbil7IGNhbGxiYWNrKHRoaXMuZ2V0Q2hpbGRCeUlkKGlkKSkgfVxuICB9XG5cbiAgb25DaGFubmVsKGV2ZW50LCBjYil7XG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIGV2ZW50LCByZXNwID0+IHtcbiAgICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpKXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IGNiKHJlc3ApXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IGNiKHJlc3ApKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kQ2hhbm5lbCgpe1xuICAgIC8vIFRoZSBkaWZmIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSByZWd1bGFyIHVwZGF0ZSBvcGVyYXRpb25zLlxuICAgIC8vIEFsbCBvdGhlciBvcGVyYXRpb25zIGFyZSBxdWV1ZWQgdG8gYmUgYXBwbGllZCBvbmx5IGFmdGVyIGpvaW4uXG4gICAgdGhpcy5saXZlU29ja2V0Lm9uQ2hhbm5lbCh0aGlzLmNoYW5uZWwsIFwiZGlmZlwiLCAocmF3RGlmZikgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByYXdEaWZmLCAoe2RpZmYsIGV2ZW50c30pID0+IHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cykpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJyZWRpcmVjdFwiLCAoe3RvLCBmbGFzaH0pID0+IHRoaXMub25SZWRpcmVjdCh7dG8sIGZsYXNofSkpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3BhdGNoXCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVQYXRjaChyZWRpcikpXG4gICAgdGhpcy5vbkNoYW5uZWwoXCJsaXZlX3JlZGlyZWN0XCIsIChyZWRpcikgPT4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZWRpcikpXG4gICAgdGhpcy5jaGFubmVsLm9uRXJyb3IocmVhc29uID0+IHRoaXMub25FcnJvcihyZWFzb24pKVxuICAgIHRoaXMuY2hhbm5lbC5vbkNsb3NlKHJlYXNvbiA9PiB0aGlzLm9uQ2xvc2UocmVhc29uKSlcbiAgfVxuXG4gIGRlc3Ryb3lBbGxDaGlsZHJlbigpeyB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5kZXN0cm95KCkpIH1cblxuICBvbkxpdmVSZWRpcmVjdChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZCwgZmxhc2h9ID0gcmVkaXJcbiAgICBsZXQgdXJsID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdCh1cmwsIGtpbmQsIGZsYXNoKVxuICB9XG5cbiAgb25MaXZlUGF0Y2gocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmR9ID0gcmVkaXJcbiAgICB0aGlzLmhyZWYgPSB0aGlzLmV4cGFuZFVSTCh0bylcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVBhdGNoKHRvLCBraW5kKVxuICB9XG5cbiAgZXhwYW5kVVJMKHRvKXtcbiAgICByZXR1cm4gdG8uc3RhcnRzV2l0aChcIi9cIikgPyBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fSR7dG99YCA6IHRvXG4gIH1cblxuICBvblJlZGlyZWN0KHt0bywgZmxhc2h9KXsgdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHRvLCBmbGFzaCkgfVxuXG4gIGlzRGVzdHJveWVkKCl7IHJldHVybiB0aGlzLmRlc3Ryb3llZCB9XG5cbiAgam9pbkRlYWQoKXsgdGhpcy5pc0RlYWQgPSB0cnVlIH1cblxuICBqb2luKGNhbGxiYWNrKXtcbiAgICB0aGlzLnNob3dMb2FkZXIodGhpcy5saXZlU29ja2V0LmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5iaW5kQ2hhbm5lbCgpXG4gICAgaWYodGhpcy5pc01haW4oKSl7XG4gICAgICB0aGlzLnN0b3BDYWxsYmFjayA9IHRoaXMubGl2ZVNvY2tldC53aXRoUGFnZUxvYWRpbmcoe3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiaW5pdGlhbFwifSlcbiAgICB9XG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSAob25Eb25lKSA9PiB7XG4gICAgICBvbkRvbmUgPSBvbkRvbmUgfHwgZnVuY3Rpb24oKXt9XG4gICAgICBjYWxsYmFjayA/IGNhbGxiYWNrKHRoaXMuam9pbkNvdW50LCBvbkRvbmUpIDogb25Eb25lKClcbiAgICB9XG4gICAgdGhpcy5saXZlU29ja2V0LndyYXBQdXNoKHRoaXMsIHt0aW1lb3V0OiBmYWxzZX0sICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWwuam9pbigpXG4gICAgICAgIC5yZWNlaXZlKFwib2tcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgaWYoIXRoaXMuaXNEZXN0cm95ZWQoKSl7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLm9uSm9pbihkYXRhKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgcmVzcCA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIHRoaXMub25Kb2luRXJyb3IocmVzcCkpXG4gICAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiAhdGhpcy5pc0Rlc3Ryb3llZCgpICYmIHRoaXMub25Kb2luRXJyb3Ioe3JlYXNvbjogXCJ0aW1lb3V0XCJ9KSlcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luRXJyb3IocmVzcCl7XG4gICAgaWYocmVzcC5yZWFzb24gPT09IFwicmVsb2FkXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbYGZhaWxlZCBtb3VudCB3aXRoICR7cmVzcC5zdGF0dXN9LiBGYWxsaW5nIGJhY2sgdG8gcGFnZSByZXF1ZXN0YCwgcmVzcF0pXG4gICAgICBpZih0aGlzLmlzTWFpbigpKXsgdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5ocmVmfSkgfVxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIGlmKHJlc3AucmVhc29uID09PSBcInVuYXV0aG9yaXplZFwiIHx8IHJlc3AucmVhc29uID09PSBcInN0YWxlXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmF1dGhvcml6ZWQgbGl2ZV9yZWRpcmVjdC4gRmFsbGluZyBiYWNrIHRvIHBhZ2UgcmVxdWVzdFwiLCByZXNwXSlcbiAgICAgIGlmKHRoaXMuaXNNYWluKCkpeyB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLmhyZWZ9KSB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCB8fCByZXNwLmxpdmVfcmVkaXJlY3Qpe1xuICAgICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgdGhpcy5kaXNwbGF5RXJyb3IoW1BIWF9MT0FESU5HX0NMQVNTLCBQSFhfRVJST1JfQ0xBU1MsIFBIWF9TRVJWRVJfRVJST1JfQ0xBU1NdKVxuICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hYmxlIHRvIGpvaW5cIiwgcmVzcF0pXG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKSB9XG4gIH1cblxuICBvbkNsb3NlKHJlYXNvbil7XG4gICAgaWYodGhpcy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiByZWFzb24gIT09IFwibGVhdmVcIil7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcylcbiAgICB9XG4gICAgdGhpcy5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgIHRoaXMubGl2ZVNvY2tldC5kcm9wQWN0aXZlRWxlbWVudCh0aGlzKVxuICAgIC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIGJlIG51bGwgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbiAgICBpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KXsgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCkgfVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkpe1xuICAgICAgdGhpcy5zaG93TG9hZGVyKEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQpXG4gICAgfVxuICB9XG5cbiAgb25FcnJvcihyZWFzb24pe1xuICAgIHRoaXMub25DbG9zZShyZWFzb24pXG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInZpZXcgY3Jhc2hlZFwiLCByZWFzb25dKSB9XG4gICAgaWYoIXRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkpe1xuICAgICAgaWYodGhpcy5saXZlU29ja2V0LmlzQ29ubmVjdGVkKCkpe1xuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX1NFUlZFUl9FUlJPUl9DTEFTU10pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BsYXlFcnJvcihbUEhYX0xPQURJTkdfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUywgUEhYX0NMSUVOVF9FUlJPUl9DTEFTU10pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGlzcGxheUVycm9yKGNsYXNzZXMpe1xuICAgIGlmKHRoaXMuaXNNYWluKCkpeyBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiB7dG86IHRoaXMuaHJlZiwga2luZDogXCJlcnJvclwifX0pIH1cbiAgICB0aGlzLnNob3dMb2FkZXIoKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyguLi5jbGFzc2VzKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJkaXNjb25uZWN0ZWRcIikpXG4gIH1cblxuICBwdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG5cbiAgICBsZXQgW3JlZiwgW2VsXSwgb3B0c10gPSByZWZHZW5lcmF0b3IgPyByZWZHZW5lcmF0b3IoKSA6IFtudWxsLCBbXSwge31dXG4gICAgbGV0IG9uTG9hZGluZ0RvbmUgPSBmdW5jdGlvbigpeyB9XG4gICAgaWYob3B0cy5wYWdlX2xvYWRpbmcgfHwgKGVsICYmIChlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9QQUdFX0xPQURJTkcpKSAhPT0gbnVsbCkpKXtcbiAgICAgIG9uTG9hZGluZ0RvbmUgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHtraW5kOiBcImVsZW1lbnRcIiwgdGFyZ2V0OiBlbH0pXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIChwYXlsb2FkLmNpZCkgIT09IFwibnVtYmVyXCIpeyBkZWxldGUgcGF5bG9hZC5jaWQgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxpdmVTb2NrZXQud3JhcFB1c2godGhpcywge3RpbWVvdXQ6IHRydWV9LCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWwucHVzaChldmVudCwgcGF5bG9hZCwgUFVTSF9USU1FT1VUKS5yZWNlaXZlKFwib2tcIiwgcmVzcCA9PiB7XG4gICAgICAgICAgbGV0IGZpbmlzaCA9IChob29rUmVwbHkpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3AucmVkaXJlY3QpeyB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3BhdGNoKXsgdGhpcy5vbkxpdmVQYXRjaChyZXNwLmxpdmVfcGF0Y2gpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgICAgICAgICBvbkxvYWRpbmdEb25lKClcbiAgICAgICAgICAgIG9uUmVwbHkocmVzcCwgaG9va1JlcGx5KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXNwLmRpZmYpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFwcGx5RGlmZihcInVwZGF0ZVwiLCByZXNwLmRpZmYsICh7ZGlmZiwgcmVwbHksIGV2ZW50c30pID0+IHtcbiAgICAgICAgICAgICAgICBpZihyZWYgIT09IG51bGwpeyB0aGlzLnVuZG9SZWZzKHJlZikgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cylcbiAgICAgICAgICAgICAgICBmaW5pc2gocmVwbHkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihyZWYgIT09IG51bGwpeyB0aGlzLnVuZG9SZWZzKHJlZikgfVxuICAgICAgICAgICAgZmluaXNoKG51bGwpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICB1bmRvUmVmcyhyZWYpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfSAvLyBleGl0IGlmIGV4dGVybmFsIGZvcm0gdHJpZ2dlcmVkXG5cbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7UEhYX1JFRl9TUkN9PVwiJHt0aGlzLmlkfVwiXVske1BIWF9SRUZ9PVwiJHtyZWZ9XCJdYCwgZWwgPT4ge1xuICAgICAgbGV0IGRpc2FibGVkVmFsID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIC8vIHJlbW92ZSByZWZzXG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICAgIC8vIHJlc3RvcmUgaW5wdXRzXG4gICAgICBpZihlbC5nZXRBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKSAhPT0gbnVsbCl7XG4gICAgICAgIGVsLnJlYWRPbmx5ID0gZmFsc2VcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUFET05MWSlcbiAgICAgIH1cbiAgICAgIGlmKGRpc2FibGVkVmFsICE9PSBudWxsKXtcbiAgICAgICAgZWwuZGlzYWJsZWQgPSBkaXNhYmxlZFZhbCA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFRClcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSBjbGFzc2VzXG4gICAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKGNsYXNzTmFtZSA9PiBET00ucmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkpXG4gICAgICAvLyByZXN0b3JlIGRpc2FibGVzXG4gICAgICBsZXQgZGlzYWJsZVJlc3RvcmUgPSBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgaWYoZGlzYWJsZVJlc3RvcmUgIT09IG51bGwpe1xuICAgICAgICBlbC5pbm5lclRleHQgPSBkaXNhYmxlUmVzdG9yZVxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKVxuICAgICAgfVxuICAgICAgbGV0IHRvRWwgPSBET00ucHJpdmF0ZShlbCwgUEhYX1JFRilcbiAgICAgIGlmKHRvRWwpe1xuICAgICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZWwsIHRvRWwpXG4gICAgICAgIERPTVBhdGNoLnBhdGNoRWwoZWwsIHRvRWwsIHRoaXMubGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KCkpXG4gICAgICAgIGlmKGhvb2speyBob29rLl9fdXBkYXRlZCgpIH1cbiAgICAgICAgRE9NLmRlbGV0ZVByaXZhdGUoZWwsIFBIWF9SRUYpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1dFJlZihlbGVtZW50cywgZXZlbnQsIG9wdHMgPSB7fSl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmKytcbiAgICBsZXQgZGlzYWJsZVdpdGggPSB0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBpZihvcHRzLmxvYWRpbmcpeyBlbGVtZW50cyA9IGVsZW1lbnRzLmNvbmNhdChET00uYWxsKGRvY3VtZW50LCBvcHRzLmxvYWRpbmcpKX1cblxuICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgcGh4LSR7ZXZlbnR9LWxvYWRpbmdgKVxuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9SRUYsIG5ld1JlZilcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGX1NSQywgdGhpcy5lbC5pZClcbiAgICAgIGxldCBkaXNhYmxlVGV4dCA9IGVsLmdldEF0dHJpYnV0ZShkaXNhYmxlV2l0aClcbiAgICAgIGlmKGRpc2FibGVUZXh0ICE9PSBudWxsKXtcbiAgICAgICAgaWYoIWVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpKXtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFLCBlbC5pbm5lclRleHQpXG4gICAgICAgIH1cbiAgICAgICAgaWYoZGlzYWJsZVRleHQgIT09IFwiXCIpeyBlbC5pbm5lclRleHQgPSBkaXNhYmxlVGV4dCB9XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gW25ld1JlZiwgZWxlbWVudHMsIG9wdHNdXG4gIH1cblxuICBjb21wb25lbnRJRChlbCl7XG4gICAgbGV0IGNpZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVClcbiAgICByZXR1cm4gY2lkID8gcGFyc2VJbnQoY2lkKSA6IG51bGxcbiAgfVxuXG4gIHRhcmdldENvbXBvbmVudElEKHRhcmdldCwgdGFyZ2V0Q3R4LCBvcHRzID0ge30pe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpeyByZXR1cm4gdGFyZ2V0Q3R4IH1cblxuICAgIGxldCBjaWRPclNlbGVjdG9yID0gb3B0cy50YXJnZXQgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJ0YXJnZXRcIikpXG4gICAgaWYoaXNDaWQoY2lkT3JTZWxlY3Rvcikpe1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGNpZE9yU2VsZWN0b3IpXG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCAmJiAoY2lkT3JTZWxlY3RvciAhPT0gbnVsbCB8fCBvcHRzLnRhcmdldCkpe1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBjbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXtcbiAgICAgIHJldHVybiB0YXJnZXRDdHhcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KXtcbiAgICAgIHJldHVybiBtYXliZSh0YXJnZXRDdHguY2xvc2VzdChgWyR7UEhYX0NPTVBPTkVOVH1dYCksIGVsID0+IHRoaXMub3duc0VsZW1lbnQoZWwpICYmIHRoaXMuY29tcG9uZW50SUQoZWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHB1c2hIb29rRXZlbnQoZWwsIHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW2VsXSwgXCJob29rXCIpXG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IFtyZWYsIGVscywgb3B0c10sIFwiZXZlbnRcIiwge1xuICAgICAgdHlwZTogXCJob29rXCIsXG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICB2YWx1ZTogcGF5bG9hZCxcbiAgICAgIGNpZDogdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0sIChyZXNwLCByZXBseSkgPT4gb25SZXBseShyZXBseSwgcmVmKSlcblxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIGV4dHJhY3RNZXRhKGVsLCBtZXRhLCB2YWx1ZSl7XG4gICAgbGV0IHByZWZpeCA9IHRoaXMuYmluZGluZyhcInZhbHVlLVwiKVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIGxldCBuYW1lID0gZWwuYXR0cmlidXRlc1tpXS5uYW1lXG4gICAgICBpZihuYW1lLnN0YXJ0c1dpdGgocHJlZml4KSl7IG1ldGFbbmFtZS5yZXBsYWNlKHByZWZpeCwgXCJcIildID0gZWwuZ2V0QXR0cmlidXRlKG5hbWUpIH1cbiAgICB9XG4gICAgaWYoZWwudmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhKGVsIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBtZXRhLnZhbHVlID0gZWwudmFsdWVcblxuICAgICAgaWYoZWwudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlKSA+PSAwICYmICFlbC5jaGVja2VkKXtcbiAgICAgICAgZGVsZXRlIG1ldGEudmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYodmFsdWUpe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgZm9yKGxldCBrZXkgaW4gdmFsdWUpeyBtZXRhW2tleV0gPSB2YWx1ZVtrZXldIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ldGFcbiAgfVxuXG5cbiAgcHVzaEV2ZW50KHR5cGUsIGVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBtZXRhLCBvcHRzID0ge30sIG9uUmVwbHkpe1xuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiB0aGlzLnB1dFJlZihbZWxdLCB0eXBlLCBvcHRzKSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IHRoaXMuZXh0cmFjdE1ldGEoZWwsIG1ldGEsIG9wdHMudmFsdWUpLFxuICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGVsLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgfSwgKHJlc3AsIHJlcGx5KSA9PiBvblJlcGx5ICYmIG9uUmVwbHkocmVwbHkpKVxuICB9XG5cbiAgcHVzaEZpbGVQcm9ncmVzcyhmaWxlRWwsIGVudHJ5UmVmLCBwcm9ncmVzcywgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZpbGVFbC5mb3JtLCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICB2aWV3LnB1c2hXaXRoUmVwbHkobnVsbCwgXCJwcm9ncmVzc1wiLCB7XG4gICAgICAgIGV2ZW50OiBmaWxlRWwuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhQSFhfUFJPR1JFU1MpKSxcbiAgICAgICAgcmVmOiBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cnlfcmVmOiBlbnRyeVJlZixcbiAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgICBjaWQ6IHZpZXcudGFyZ2V0Q29tcG9uZW50SUQoZmlsZUVsLmZvcm0sIHRhcmdldEN0eClcbiAgICAgIH0sIG9uUmVwbHkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eCwgb3B0cylcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5wdXRSZWYoW2lucHV0RWwsIGlucHV0RWwuZm9ybV0sIFwiY2hhbmdlXCIsIG9wdHMpXG4gICAgbGV0IGZvcm1EYXRhXG4gICAgbGV0IG1ldGEgID0gdGhpcy5leHRyYWN0TWV0YShpbnB1dEVsLmZvcm0pXG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKSl7XG4gICAgICBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oaW5wdXRFbC5mb3JtLCB7X3RhcmdldDogb3B0cy5fdGFyZ2V0LCAuLi5tZXRhfSwgW2lucHV0RWwubmFtZV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXQsIC4uLm1ldGF9KVxuICAgIH1cbiAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBpbnB1dEVsLmZpbGVzICYmIGlucHV0RWwuZmlsZXMubGVuZ3RoID4gMCl7XG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhpbnB1dEVsLCBBcnJheS5mcm9tKGlucHV0RWwuZmlsZXMpKVxuICAgIH1cbiAgICB1cGxvYWRzID0gTGl2ZVVwbG9hZGVyLnNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbClcblxuICAgIGxldCBldmVudCA9IHtcbiAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgdXBsb2FkczogdXBsb2FkcyxcbiAgICAgIGNpZDogY2lkXG4gICAgfVxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwgZXZlbnQsIHJlc3AgPT4ge1xuICAgICAgRE9NLnNob3dFcnJvcihpbnB1dEVsLCB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKSlcbiAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIERPTS5pc0F1dG9VcGxvYWQoaW5wdXRFbCkpe1xuICAgICAgICBpZihMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3ApXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJBd2FpdGluZ1N1Ym1pdChpbnB1dEVsLmZvcm0pXG4gICAgICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZilcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmlnZ2VyQXdhaXRpbmdTdWJtaXQoZm9ybUVsKXtcbiAgICBsZXQgYXdhaXRpbmdTdWJtaXQgPSB0aGlzLmdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpXG4gICAgaWYoYXdhaXRpbmdTdWJtaXQpe1xuICAgICAgbGV0IFtfZWwsIF9yZWYsIF9vcHRzLCBjYWxsYmFja10gPSBhd2FpdGluZ1N1Ym1pdFxuICAgICAgdGhpcy5jYW5jZWxTdWJtaXQoZm9ybUVsKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpe1xuICAgIHJldHVybiB0aGlzLmZvcm1TdWJtaXRzLmZpbmQoKFtlbCwgX3JlZiwgX29wdHMsIF9jYWxsYmFja10pID0+IGVsLmlzU2FtZU5vZGUoZm9ybUVsKSlcbiAgfVxuXG4gIHNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKSl7IHJldHVybiB0cnVlIH1cbiAgICB0aGlzLmZvcm1TdWJtaXRzLnB1c2goW2Zvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFja10pXG4gIH1cblxuICBjYW5jZWxTdWJtaXQoZm9ybUVsKXtcbiAgICB0aGlzLmZvcm1TdWJtaXRzID0gdGhpcy5mb3JtU3VibWl0cy5maWx0ZXIoKFtlbCwgcmVmLCBfY2FsbGJhY2tdKSA9PiB7XG4gICAgICBpZihlbC5pc1NhbWVOb2RlKGZvcm1FbCkpe1xuICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZilcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkaXNhYmxlRm9ybShmb3JtRWwsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGZpbHRlcklnbm9yZWQgPSBlbCA9PiB7XG4gICAgICBsZXQgdXNlcklnbm9yZWQgPSBjbG9zZXN0UGh4QmluZGluZyhlbCwgYCR7dGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpfT1pZ25vcmVgLCBlbC5mb3JtKVxuICAgICAgcmV0dXJuICEodXNlcklnbm9yZWQgfHwgY2xvc2VzdFBoeEJpbmRpbmcoZWwsIFwiZGF0YS1waHgtdXBkYXRlPWlnbm9yZVwiLCBlbC5mb3JtKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckRpc2FibGVzID0gZWwgPT4ge1xuICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSCkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJCdXR0b24gPSBlbCA9PiBlbC50YWdOYW1lID09IFwiQlVUVE9OXCJcblxuICAgIGxldCBmaWx0ZXJJbnB1dCA9IGVsID0+IFtcIklOUFVUXCIsIFwiVEVYVEFSRUFcIiwgXCJTRUxFQ1RcIl0uaW5jbHVkZXMoZWwudGFnTmFtZSlcblxuICAgIGxldCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKGZvcm1FbC5lbGVtZW50cylcbiAgICBsZXQgZGlzYWJsZXMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckRpc2FibGVzKVxuICAgIGxldCBidXR0b25zID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJCdXR0b24pLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuICAgIGxldCBpbnB1dHMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlcklucHV0KS5maWx0ZXIoZmlsdGVySWdub3JlZClcblxuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGJ1dHRvbi5kaXNhYmxlZClcbiAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcbiAgICB9KVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFksIGlucHV0LnJlYWRPbmx5KVxuICAgICAgaW5wdXQucmVhZE9ubHkgPSB0cnVlXG4gICAgICBpZihpbnB1dC5maWxlcyl7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGlucHV0LmRpc2FibGVkKVxuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICAgIGZvcm1FbC5zZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9QQUdFX0xPQURJTkcpLCBcIlwiKVxuICAgIHJldHVybiB0aGlzLnB1dFJlZihbZm9ybUVsXS5jb25jYXQoZGlzYWJsZXMpLmNvbmNhdChidXR0b25zKS5jb25jYXQoaW5wdXRzKSwgXCJzdWJtaXRcIiwgb3B0cylcbiAgfVxuXG4gIHB1c2hGb3JtU3VibWl0KGZvcm1FbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCBvblJlcGx5KXtcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5kaXNhYmxlRm9ybShmb3JtRWwsIG9wdHMpXG4gICAgbGV0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybUVsLCB0YXJnZXRDdHgpXG4gICAgaWYoTGl2ZVVwbG9hZGVyLmhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCkpe1xuICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwdXNoID0gKCkgPT4gdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgb25SZXBseSlcbiAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBwdXNoKVxuICAgIH0gZWxzZSBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBbcmVmLCBlbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwcm94eVJlZkdlbiA9ICgpID0+IFtyZWYsIGVscywgb3B0c11cbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZm9ybUVsLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgbGV0IG1ldGEgPSB0aGlzLmV4dHJhY3RNZXRhKGZvcm1FbClcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocHJveHlSZWZHZW4sIFwiZXZlbnRcIiwge1xuICAgICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgICAgY2lkOiBjaWRcbiAgICAgICAgfSwgb25SZXBseSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmKCEoZm9ybUVsLmhhc0F0dHJpYnV0ZShQSFhfUkVGKSAmJiBmb3JtRWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIpKSl7XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZXh0cmFjdE1ldGEoZm9ybUVsKVxuICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXIsIC4uLm1ldGF9KVxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCB7XG4gICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgY2lkOiBjaWRcbiAgICAgIH0sIG9uUmVwbHkpXG4gICAgfVxuICB9XG5cbiAgdXBsb2FkRmlsZXMoZm9ybUVsLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCBvbkNvbXBsZXRlKXtcbiAgICBsZXQgam9pbkNvdW50QXRVcGxvYWQgPSB0aGlzLmpvaW5Db3VudFxuICAgIGxldCBpbnB1dEVscyA9IExpdmVVcGxvYWRlci5hY3RpdmVGaWxlSW5wdXRzKGZvcm1FbClcbiAgICBsZXQgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPSBpbnB1dEVscy5sZW5ndGhcblxuICAgIC8vIGdldCBlYWNoIGZpbGUgaW5wdXRcbiAgICBpbnB1dEVscy5mb3JFYWNoKGlucHV0RWwgPT4ge1xuICAgICAgbGV0IHVwbG9hZGVyID0gbmV3IExpdmVVcGxvYWRlcihpbnB1dEVsLCB0aGlzLCAoKSA9PiB7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgaWYobnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPT09IDApeyBvbkNvbXBsZXRlKCkgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudXBsb2FkZXJzW2lucHV0RWxdID0gdXBsb2FkZXJcbiAgICAgIGxldCBlbnRyaWVzID0gdXBsb2FkZXIuZW50cmllcygpLm1hcChlbnRyeSA9PiBlbnRyeS50b1ByZWZsaWdodFBheWxvYWQoKSlcblxuICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHJlZjogaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcInNlbmRpbmcgcHJlZmxpZ2h0IHJlcXVlc3RcIiwgcGF5bG9hZF0pXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImFsbG93X3VwbG9hZFwiLCBwYXlsb2FkLCByZXNwID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW1wiZ290IHByZWZsaWdodCByZXNwb25zZVwiLCByZXNwXSlcbiAgICAgICAgaWYocmVzcC5lcnJvcil7XG4gICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYpXG4gICAgICAgICAgbGV0IFtlbnRyeV9yZWYsIHJlYXNvbl0gPSByZXNwLmVycm9yXG4gICAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW2BlcnJvciBmb3IgZW50cnkgJHtlbnRyeV9yZWZ9YCwgcmVhc29uXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgb25FcnJvciA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsLm9uRXJyb3IoKCkgPT4ge1xuICAgICAgICAgICAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gam9pbkNvdW50QXRVcGxvYWQpeyBjYWxsYmFjaygpIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHVwbG9hZGVyLmluaXRBZGFwdGVyVXBsb2FkKHJlc3AsIG9uRXJyb3IsIHRoaXMubGl2ZVNvY2tldClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZGlzcGF0Y2hVcGxvYWRzKHRhcmdldEN0eCwgbmFtZSwgZmlsZXNPckJsb2JzKXtcbiAgICBsZXQgdGFyZ2V0RWxlbWVudCA9IHRoaXMudGFyZ2V0Q3R4RWxlbWVudCh0YXJnZXRDdHgpIHx8IHRoaXMuZWxcbiAgICBsZXQgaW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHModGFyZ2V0RWxlbWVudCkuZmlsdGVyKGVsID0+IGVsLm5hbWUgPT09IG5hbWUpXG4gICAgaWYoaW5wdXRzLmxlbmd0aCA9PT0gMCl7IGxvZ0Vycm9yKGBubyBsaXZlIGZpbGUgaW5wdXRzIGZvdW5kIG1hdGNoaW5nIHRoZSBuYW1lIFwiJHtuYW1lfVwiYCkgfVxuICAgIGVsc2UgaWYoaW5wdXRzLmxlbmd0aCA+IDEpeyBsb2dFcnJvcihgZHVwbGljYXRlIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSB7IERPTS5kaXNwYXRjaEV2ZW50KGlucHV0c1swXSwgUEhYX1RSQUNLX1VQTE9BRFMsIHtkZXRhaWw6IHtmaWxlczogZmlsZXNPckJsb2JzfX0pIH1cbiAgfVxuXG4gIHRhcmdldEN0eEVsZW1lbnQodGFyZ2V0Q3R4KSB7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7XG4gICAgICBsZXQgW3RhcmdldF0gPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIHRhcmdldEN0eClcbiAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVzaEZvcm1SZWNvdmVyeShmb3JtLCBuZXdDaWQsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZvcm0sICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGxldCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICAgIGxldCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZpbHRlcihlbCA9PiBET00uaXNGb3JtSW5wdXQoZWwpICYmIGVsLm5hbWUgJiYgIWVsLmhhc0F0dHJpYnV0ZShwaHhDaGFuZ2UpKVxuICAgICAgaWYoaW5wdXRzLmxlbmd0aCA9PT0gMCl7IHJldHVybiB9XG5cbiAgICAgIC8vIHdlIG11c3QgY2xlYXIgdHJhY2tlZCB1cGxvYWRzIGJlZm9yZSByZWNvdmVyeSBhcyB0aGV5IG5vIGxvbmdlciBoYXZlIHZhbGlkIHJlZnNcbiAgICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IGlucHV0Lmhhc0F0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikgJiYgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXMoaW5wdXQpKVxuICAgICAgbGV0IGlucHV0ID0gaW5wdXRzLmZpbmQoZWwgPT4gZWwudHlwZSAhPT0gXCJoaWRkZW5cIikgfHwgaW5wdXRzWzBdXG5cbiAgICAgIGxldCBwaHhFdmVudCA9IGZvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfQVVUT19SRUNPVkVSKSkgfHwgZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgICAgSlMuZXhlYyhcImNoYW5nZVwiLCBwaHhFdmVudCwgdmlldywgaW5wdXQsIFtcInB1c2hcIiwge190YXJnZXQ6IGlucHV0Lm5hbWUsIG5ld0NpZDogbmV3Q2lkLCBjYWxsYmFjazogY2FsbGJhY2t9XSlcbiAgICB9KVxuICB9XG5cbiAgcHVzaExpbmtQYXRjaChocmVmLCB0YXJnZXRFbCwgY2FsbGJhY2spe1xuICAgIGxldCBsaW5rUmVmID0gdGhpcy5saXZlU29ja2V0LnNldFBlbmRpbmdMaW5rKGhyZWYpXG4gICAgbGV0IHJlZkdlbiA9IHRhcmdldEVsID8gKCkgPT4gdGhpcy5wdXRSZWYoW3RhcmdldEVsXSwgXCJjbGlja1wiKSA6IG51bGxcbiAgICBsZXQgZmFsbGJhY2sgPSAoKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgbGV0IHVybCA9IGhyZWYuc3RhcnRzV2l0aChcIi9cIikgPyBgJHtsb2NhdGlvbi5wcm90b2NvbH0vLyR7bG9jYXRpb24uaG9zdH0ke2hyZWZ9YCA6IGhyZWZcblxuICAgIGxldCBwdXNoID0gdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbiwgXCJsaXZlX3BhdGNoXCIsIHt1cmx9LCByZXNwID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYocmVzcC5saW5rX3JlZGlyZWN0KXtcbiAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgY2FsbGJhY2ssIGxpbmtSZWYpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYodGhpcy5saXZlU29ja2V0LmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXtcbiAgICAgICAgICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hcHBseVBlbmRpbmdVcGRhdGVzKClcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhsaW5rUmVmKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpZihwdXNoKXtcbiAgICAgIHB1c2gucmVjZWl2ZShcInRpbWVvdXRcIiwgZmFsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGZhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBmb3Jtc0ZvclJlY292ZXJ5KGh0bWwpe1xuICAgIGlmKHRoaXMuam9pbkNvdW50ID09PSAwKXsgcmV0dXJuIFtdIH1cblxuICAgIGxldCBwaHhDaGFuZ2UgPSB0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIilcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG5cbiAgICByZXR1cm4gKFxuICAgICAgRE9NLmFsbCh0aGlzLmVsLCBgZm9ybVske3BoeENoYW5nZX1dYClcbiAgICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uaWQgJiYgdGhpcy5vd25zRWxlbWVudChmb3JtKSlcbiAgICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZWxlbWVudHMubGVuZ3RoID4gMClcbiAgICAgICAgLmZpbHRlcihmb3JtID0+IGZvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfQVVUT19SRUNPVkVSKSkgIT09IFwiaWdub3JlXCIpXG4gICAgICAgIC5tYXAoZm9ybSA9PiB7XG4gICAgICAgICAgLy8gYXR0cmlidXRlIGdpdmVuIHZpYSBKUyBtb2R1bGUgbmVlZHMgdG8gYmUgZXNjYXBlZCBhcyBpdCBjb250YWlucyB0aGUgc3ltYm9scyBbXVwiLFxuICAgICAgICAgIC8vIHdoaWNoIHJlc3VsdCBpbiBhbiBpbnZhbGlkIGNzcyBzZWxlY3RvciBvdGhlcndpc2UuXG4gICAgICAgICAgY29uc3QgcGh4Q2hhbmdlVmFsdWUgPSBmb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpLnJlcGxhY2VBbGwoLyhbXFxbXFxdXCJdKS9nLCAnXFxcXCQxJylcbiAgICAgICAgICBsZXQgbmV3Rm9ybSA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcihgZm9ybVtpZD1cIiR7Zm9ybS5pZH1cIl1bJHtwaHhDaGFuZ2V9PVwiJHtwaHhDaGFuZ2VWYWx1ZX1cIl1gKVxuICAgICAgICAgIGlmKG5ld0Zvcm0pe1xuICAgICAgICAgICAgcmV0dXJuIFtmb3JtLCBuZXdGb3JtLCB0aGlzLnRhcmdldENvbXBvbmVudElEKG5ld0Zvcm0pXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm0sIGZvcm0sIHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybSldXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKChbZm9ybSwgbmV3Rm9ybSwgbmV3Q2lkXSkgPT4gbmV3Rm9ybSlcbiAgICApXG4gIH1cblxuICBtYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpe1xuICAgIGxldCB3aWxsRGVzdHJveUNJRHMgPSBkZXN0cm95ZWRDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICB9KVxuICAgIGlmKHdpbGxEZXN0cm95Q0lEcy5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMucHJ1bmluZ0NJRHMucHVzaCguLi53aWxsRGVzdHJveUNJRHMpXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImNpZHNfd2lsbF9kZXN0cm95XCIsIHtjaWRzOiB3aWxsRGVzdHJveUNJRHN9LCAoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjaWRzIGFyZSBlaXRoZXIgYmFjayBvbiB0aGUgcGFnZSBvciB0aGV5IHdpbGwgYmUgZnVsbHkgcmVtb3ZlZCxcbiAgICAgICAgLy8gc28gd2UgY2FuIHJlbW92ZSB0aGVtIGZyb20gdGhlIHBydW5pbmdDSURzLlxuICAgICAgICB0aGlzLnBydW5pbmdDSURzID0gdGhpcy5wcnVuaW5nQ0lEcy5maWx0ZXIoY2lkID0+IHdpbGxEZXN0cm95Q0lEcy5pbmRleE9mKGNpZCkgIT09IC0xKVxuXG4gICAgICAgIC8vIFNlZSBpZiBhbnkgb2YgdGhlIGNpZHMgd2Ugd2FudGVkIHRvIGRlc3Ryb3kgd2VyZSBhZGRlZCBiYWNrLFxuICAgICAgICAvLyBpZiB0aGV5IHdlcmUgYWRkZWQgYmFjaywgd2UgZG9uJ3QgYWN0dWFsbHkgZGVzdHJveSB0aGVtLlxuICAgICAgICBsZXQgY29tcGxldGVseURlc3Ryb3lDSURzID0gd2lsbERlc3Ryb3lDSURzLmZpbHRlcihjaWQgPT4ge1xuICAgICAgICAgIHJldHVybiBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIGNpZCkubGVuZ3RoID09PSAwXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYoY29tcGxldGVseURlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImNpZHNfZGVzdHJveWVkXCIsIHtjaWRzOiBjb21wbGV0ZWx5RGVzdHJveUNJRHN9LCAocmVzcCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZC5wcnVuZUNJRHMocmVzcC5jaWRzKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgb3duc0VsZW1lbnQoZWwpe1xuICAgIGxldCBwYXJlbnRWaWV3RWwgPSBlbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKVxuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCkgPT09IHRoaXMuaWQgfHxcbiAgICAgIChwYXJlbnRWaWV3RWwgJiYgcGFyZW50Vmlld0VsLmlkID09PSB0aGlzLmlkKSB8fFxuICAgICAgKCFwYXJlbnRWaWV3RWwgJiYgdGhpcy5pc0RlYWQpXG4gIH1cblxuICBzdWJtaXRGb3JtKGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBsZXQgcGh4RmVlZGJhY2sgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKVxuICAgIGxldCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnB1dFByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKSlcbiAgICB0aGlzLmxpdmVTb2NrZXQuYmx1ckFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm0sIHRhcmdldEN0eCwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgb3B0cywgKCkgPT4ge1xuICAgICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gRE9NLnNob3dFcnJvcihpbnB1dCwgcGh4RmVlZGJhY2spKVxuICAgICAgdGhpcy5saXZlU29ja2V0LnJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKVxuICAgIH0pXG4gIH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoa2luZCkgfVxufVxuIiwgIi8qKiBJbml0aWFsaXplcyB0aGUgTGl2ZVNvY2tldFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzczovL2V4YW1wbGUuY29tL2xpdmVcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL2xpdmVcImAgKGluaGVyaXRlZCBob3N0ICYgcHJvdG9jb2wpXG4gKiBAcGFyYW0ge1Bob2VuaXguU29ja2V0fSBzb2NrZXQgLSB0aGUgcmVxdWlyZWQgUGhvZW5peCBTb2NrZXQgY2xhc3MgaW1wb3J0ZWQgZnJvbSBcInBob2VuaXhcIi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gKiAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICogICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uLiBPdXRzaWRlIG9mIGtleXMgbGlzdGVkIGJlbG93LCBhbGxcbiAqIGNvbmZpZ3VyYXRpb24gaXMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBQaG9lbml4IFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5kZWZhdWx0c10gLSBUaGUgb3B0aW9uYWwgZGVmYXVsdHMgdG8gdXNlIGZvciB2YXJpb3VzIGJpbmRpbmdzLFxuICogc3VjaCBhcyBgcGh4LWRlYm91bmNlYC4gU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBrZXlzOlxuICpcbiAqICAgLSBkZWJvdW5jZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtZGVib3VuY2UgdGltZS4gRGVmYXVsdHMgMzAwXG4gKiAgIC0gdGhyb3R0bGUgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LXRocm90dGxlIHRpbWUuIERlZmF1bHRzIDMwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHBhc3NpbmcgY29ubmVjdCBwYXJhbXMuXG4gKiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gTGl2ZVZpZXcuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAoZWwpID0+IHt2aWV3OiBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW15LXZpZXctbmFtZVwiLCB0b2tlbjogd2luZG93Lm15VG9rZW59XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmRpbmdQcmVmaXhdIC0gVGhlIG9wdGlvbmFsIHByZWZpeCB0byB1c2UgZm9yIGFsbCBwaHggRE9NIGFubm90YXRpb25zLlxuICogRGVmYXVsdHMgdG8gXCJwaHgtXCIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuaG9va3NdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgaG9vayBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMudXBsb2FkZXJzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IHVwbG9hZGVyIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubG9hZGVyVGltZW91dF0gLSBUaGUgb3B0aW9uYWwgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGFwcGx5XG4gKiBsb2FkaW5nIHN0YXRlcy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMubWF4UmVsb2Fkc10gLSBUaGUgbWF4aW11bSByZWxvYWRzIGJlZm9yZSBlbnRlcmluZyBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNaW5dIC0gVGhlIG1pbmltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1heF0gLSBUaGUgbWF4aW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMuZmFpbHNhZmVKaXR0ZXJdIC0gVGhlIHRpbWUgYmV0d2VlbiByZWxvYWQgYXR0ZW1wdHMgaW4gZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnZpZXdMb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4gY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5tZXRhZGF0YV0gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IG1hcHBpbmcgZXZlbnQgbmFtZXMgdG8gZnVuY3Rpb25zIGZvclxuICogcG9wdWxhdGluZyBldmVudCBtZXRhZGF0YS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIG1ldGFkYXRhOiB7XG4gKiAgICAgICBjbGljazogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBkZXRhaWw6IGUuZGV0YWlsIHx8IDEsXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBrZXlkb3duOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBrZXk6IGUua2V5LFxuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgc2hpZnRLZXk6IGUuc2hpZnRLZXlcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5zZXNzaW9uU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgc2Vzc2lvblN0b3JhZ2VgLiAgRm9yIGV4YW1wbGUsIFRoaXMgY291bGRcbiAqIGhhcHBlbiBpZiBhIHNpdGUgbG9hZHMgYSBjcm9zcy1kb21haW4gTGl2ZVZpZXcgaW4gYW4gaWZyYW1lLiAgRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgY2xhc3MgSW5NZW1vcnlTdG9yYWdlIHtcbiAqICAgICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnN0b3JhZ2UgPSB7fSB9XG4gKiAgICAgICBnZXRJdGVtKGtleU5hbWUpIHsgcmV0dXJuIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB8fCBudWxsIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubG9jYWxTdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCBmb3Igd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgbG9jYWxTdG9yYWdlYC5cbiAqIFNlZSBgb3B0cy5zZXNzaW9uU3RvcmFnZWAgZm9yIGV4YW1wbGVzLlxuKi9cblxuaW1wb3J0IHtcbiAgQklORElOR19QUkVGSVgsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIERFRkFVTFRTLFxuICBGQUlMU0FGRV9KSVRURVIsXG4gIExPQURFUl9USU1FT1VULFxuICBNQVhfUkVMT0FEUyxcbiAgUEhYX0RFQk9VTkNFLFxuICBQSFhfRFJPUF9UQVJHRVQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0tFWSxcbiAgUEhYX0xJTktfU1RBVEUsXG4gIFBIWF9MSVZFX0xJTkssXG4gIFBIWF9MVl9ERUJVRyxcbiAgUEhYX0xWX0xBVEVOQ1lfU0lNLFxuICBQSFhfTFZfUFJPRklMRSxcbiAgUEhYX01BSU4sXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1RIUk9UVExFLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9GRUVEQkFDS19GT1IsXG4gIFJFTE9BRF9KSVRURVJfTUlOLFxuICBSRUxPQURfSklUVEVSX01BWCxcbiAgUEhYX1JFRixcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvbmUsXG4gIGNsb3Nlc3RQaHhCaW5kaW5nLFxuICBjbG9zdXJlLFxuICBkZWJ1ZyxcbiAgaXNPYmplY3QsXG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgSG9va3MgZnJvbSBcIi4vaG9va3NcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBWaWV3IGZyb20gXCIuL3ZpZXdcIlxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKHVybCwgcGh4U29ja2V0LCBvcHRzID0ge30pe1xuICAgIHRoaXMudW5sb2FkZWQgPSBmYWxzZVxuICAgIGlmKCFwaHhTb2NrZXQgfHwgcGh4U29ja2V0LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcbiAgICAgIGEgcGhvZW5peCBTb2NrZXQgbXVzdCBiZSBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZSBMaXZlU29ja2V0IGNvbnN0cnVjdG9yLiBGb3IgZXhhbXBsZTpcblxuICAgICAgICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gICAgICAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICAgICAgICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICAgICAgYClcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgcGh4U29ja2V0KHVybCwgb3B0cylcbiAgICB0aGlzLmJpbmRpbmdQcmVmaXggPSBvcHRzLmJpbmRpbmdQcmVmaXggfHwgQklORElOR19QUkVGSVhcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMudmlld0xvZ2dlciA9IG9wdHMudmlld0xvZ2dlclxuICAgIHRoaXMubWV0YWRhdGFDYWxsYmFja3MgPSBvcHRzLm1ldGFkYXRhIHx8IHt9XG4gICAgdGhpcy5kZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oY2xvbmUoREVGQVVMVFMpLCBvcHRzLmRlZmF1bHRzIHx8IHt9KVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gICAgdGhpcy5tYWluID0gbnVsbFxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICB0aGlzLmxpbmtSZWYgPSAxXG4gICAgdGhpcy5yb290cyA9IHt9XG4gICAgdGhpcy5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gbnVsbFxuICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUod2luZG93LmxvY2F0aW9uKVxuICAgIHRoaXMuaG9va3MgPSBvcHRzLmhvb2tzIHx8IHt9XG4gICAgdGhpcy51cGxvYWRlcnMgPSBvcHRzLnVwbG9hZGVycyB8fCB7fVxuICAgIHRoaXMubG9hZGVyVGltZW91dCA9IG9wdHMubG9hZGVyVGltZW91dCB8fCBMT0FERVJfVElNRU9VVFxuICAgIHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMubWF4UmVsb2FkcyA9IG9wdHMubWF4UmVsb2FkcyB8fCBNQVhfUkVMT0FEU1xuICAgIHRoaXMucmVsb2FkSml0dGVyTWluID0gb3B0cy5yZWxvYWRKaXR0ZXJNaW4gfHwgUkVMT0FEX0pJVFRFUl9NSU5cbiAgICB0aGlzLnJlbG9hZEppdHRlck1heCA9IG9wdHMucmVsb2FkSml0dGVyTWF4IHx8IFJFTE9BRF9KSVRURVJfTUFYXG4gICAgdGhpcy5mYWlsc2FmZUppdHRlciA9IG9wdHMuZmFpbHNhZmVKaXR0ZXIgfHwgRkFJTFNBRkVfSklUVEVSXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UgPSBvcHRzLmxvY2FsU3RvcmFnZSB8fCB3aW5kb3cubG9jYWxTdG9yYWdlXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IG9wdHMuc2Vzc2lvblN0b3JhZ2UgfHwgd2luZG93LnNlc3Npb25TdG9yYWdlXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gZmFsc2VcbiAgICB0aGlzLmRvbUNhbGxiYWNrcyA9IE9iamVjdC5hc3NpZ24oe29uTm9kZUFkZGVkOiBjbG9zdXJlKCksIG9uQmVmb3JlRWxVcGRhdGVkOiBjbG9zdXJlKCl9LCBvcHRzLmRvbSB8fCB7fSlcbiAgICB0aGlzLnRyYW5zaXRpb25zID0gbmV3IFRyYW5zaXRpb25TZXQoKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICBpZih0aGlzLmlzVW5sb2FkZWQoKSl7XG4gICAgICAgIC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlIGFuZCBicm93c2VyIGRvZXMgbm90IGVtaXQgXCJwYWdlc2hvd1wiXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyBwdWJsaWNcblxuICBpc1Byb2ZpbGVFbmFibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX1BST0ZJTEUpID09PSBcInRydWVcIiB9XG5cbiAgaXNEZWJ1Z0VuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcInRydWVcIiB9XG5cbiAgaXNEZWJ1Z0Rpc2FibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0RFQlVHKSA9PT0gXCJmYWxzZVwiIH1cblxuICBlbmFibGVEZWJ1ZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0RFQlVHLCBcInRydWVcIikgfVxuXG4gIGVuYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX1BST0ZJTEUsIFwidHJ1ZVwiKSB9XG5cbiAgZGlzYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwiZmFsc2VcIikgfVxuXG4gIGRpc2FibGVQcm9maWxpbmcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9QUk9GSUxFKSB9XG5cbiAgZW5hYmxlTGF0ZW5jeVNpbSh1cHBlckJvdW5kTXMpe1xuICAgIHRoaXMuZW5hYmxlRGVidWcoKVxuICAgIGNvbnNvbGUubG9nKFwibGF0ZW5jeSBzaW11bGF0b3IgZW5hYmxlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoaXMgYnJvd3NlciBzZXNzaW9uLiBDYWxsIGRpc2FibGVMYXRlbmN5U2ltKCkgdG8gZGlzYWJsZVwiKVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0sIHVwcGVyQm91bmRNcylcbiAgfVxuXG4gIGRpc2FibGVMYXRlbmN5U2ltKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfTEFURU5DWV9TSU0pIH1cblxuICBnZXRMYXRlbmN5U2ltKCl7XG4gICAgbGV0IHN0ciA9IHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0pXG4gICAgcmV0dXJuIHN0ciA/IHBhcnNlSW50KHN0cikgOiBudWxsXG4gIH1cblxuICBnZXRTb2NrZXQoKXsgcmV0dXJuIHRoaXMuc29ja2V0IH1cblxuICBjb25uZWN0KCl7XG4gICAgLy8gZW5hYmxlIGRlYnVnIGJ5IGRlZmF1bHQgaWYgb24gbG9jYWxob3N0IGFuZCBub3QgZXhwbGljaXRseSBkaXNhYmxlZFxuICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIiAmJiAhdGhpcy5pc0RlYnVnRGlzYWJsZWQoKSl7IHRoaXMuZW5hYmxlRGVidWcoKSB9XG4gICAgbGV0IGRvQ29ubmVjdCA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuam9pblJvb3RWaWV3cygpKXtcbiAgICAgICAgdGhpcy5iaW5kVG9wTGV2ZWxFdmVudHMoKVxuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0KClcbiAgICAgIH0gZWxzZSBpZih0aGlzLm1haW4pe1xuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKHtkZWFkOiB0cnVlfSlcbiAgICAgIH1cbiAgICAgIHRoaXMuam9pbkRlYWRWaWV3KClcbiAgICB9XG4gICAgaWYoW1wiY29tcGxldGVcIiwgXCJsb2FkZWRcIiwgXCJpbnRlcmFjdGl2ZVwiXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IDApe1xuICAgICAgZG9Db25uZWN0KClcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gZG9Db25uZWN0KCkpXG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdChjYWxsYmFjayl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyKVxuICAgIHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoY2FsbGJhY2spXG4gIH1cblxuICByZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucmVsb2FkV2l0aEppdHRlclRpbWVyKVxuICAgIHRoaXMuc29ja2V0LnJlcGxhY2VUcmFuc3BvcnQodHJhbnNwb3J0KVxuICAgIHRoaXMuY29ubmVjdCgpXG4gIH1cblxuICBleGVjSlMoZWwsIGVuY29kZWRKUywgZXZlbnRUeXBlID0gbnVsbCl7XG4gICAgdGhpcy5vd25lcihlbCwgdmlldyA9PiBKUy5leGVjKGV2ZW50VHlwZSwgZW5jb2RlZEpTLCB2aWV3LCBlbCkpXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZXhlY0pTSG9va1B1c2goZWwsIHBoeEV2ZW50LCBkYXRhLCBjYWxsYmFjayl7XG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgSlMuZXhlYyhcImhvb2tcIiwgcGh4RXZlbnQsIHZpZXcsIGVsLCBbXCJwdXNoXCIsIHtkYXRhLCBjYWxsYmFja31dKVxuICAgIH0pXG4gIH1cblxuICB1bmxvYWQoKXtcbiAgICBpZih0aGlzLnVubG9hZGVkKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLm1haW4gJiYgdGhpcy5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5sb2codGhpcy5tYWluLCBcInNvY2tldFwiLCAoKSA9PiBbXCJkaXNjb25uZWN0IGZvciBwYWdlIG5hdlwiXSkgfVxuICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95QWxsVmlld3MoKVxuICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gIH1cblxuICB0cmlnZ2VyRE9NKGtpbmQsIGFyZ3MpeyB0aGlzLmRvbUNhbGxiYWNrc1traW5kXSguLi5hcmdzKSB9XG5cbiAgdGltZShuYW1lLCBmdW5jKXtcbiAgICBpZighdGhpcy5pc1Byb2ZpbGVFbmFibGVkKCkgfHwgIWNvbnNvbGUudGltZSl7IHJldHVybiBmdW5jKCkgfVxuICAgIGNvbnNvbGUudGltZShuYW1lKVxuICAgIGxldCByZXN1bHQgPSBmdW5jKClcbiAgICBjb25zb2xlLnRpbWVFbmQobmFtZSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBsb2codmlldywga2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIGlmKHRoaXMudmlld0xvZ2dlcil7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIHRoaXMudmlld0xvZ2dlcih2aWV3LCBraW5kLCBtc2csIG9iailcbiAgICB9IGVsc2UgaWYodGhpcy5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICAgIGxldCBbbXNnLCBvYmpdID0gbXNnQ2FsbGJhY2soKVxuICAgICAgZGVidWcodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdERPTVVwZGF0ZShjYWxsYmFjayl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZnRlcihjYWxsYmFjaylcbiAgfVxuXG4gIHRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lID0gZnVuY3Rpb24oKXt9KXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFkZFRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgb25DaGFubmVsKGNoYW5uZWwsIGV2ZW50LCBjYil7XG4gICAgY2hhbm5lbC5vbihldmVudCwgZGF0YSA9PiB7XG4gICAgICBsZXQgbGF0ZW5jeSA9IHRoaXMuZ2V0TGF0ZW5jeVNpbSgpXG4gICAgICBpZighbGF0ZW5jeSl7XG4gICAgICAgIGNiKGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNiKGRhdGEpLCBsYXRlbmN5KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB3cmFwUHVzaCh2aWV3LCBvcHRzLCBwdXNoKXtcbiAgICBsZXQgbGF0ZW5jeSA9IHRoaXMuZ2V0TGF0ZW5jeVNpbSgpXG4gICAgbGV0IG9sZEpvaW5Db3VudCA9IHZpZXcuam9pbkNvdW50XG4gICAgaWYoIWxhdGVuY3kpe1xuICAgICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIG9wdHMudGltZW91dCl7XG4gICAgICAgIHJldHVybiBwdXNoKCkucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgICAgIGlmKHZpZXcuam9pbkNvdW50ID09PSBvbGRKb2luQ291bnQgJiYgIXZpZXcuaXNEZXN0cm95ZWQoKSl7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodmlldywgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZyh2aWV3LCBcInRpbWVvdXRcIiwgKCkgPT4gW1wicmVjZWl2ZWQgdGltZW91dCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggc2VydmVyLiBGYWxsaW5nIGJhY2sgdG8gaGFyZCByZWZyZXNoIGZvciByZWNvdmVyeVwiXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHB1c2goKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmYWtlUHVzaCA9IHtcbiAgICAgIHJlY2VpdmVzOiBbXSxcbiAgICAgIHJlY2VpdmUoa2luZCwgY2IpeyB0aGlzLnJlY2VpdmVzLnB1c2goW2tpbmQsIGNiXSkgfVxuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmKHZpZXcuaXNEZXN0cm95ZWQoKSl7IHJldHVybiB9XG4gICAgICBmYWtlUHVzaC5yZWNlaXZlcy5yZWR1Y2UoKGFjYywgW2tpbmQsIGNiXSkgPT4gYWNjLnJlY2VpdmUoa2luZCwgY2IpLCBwdXNoKCkpXG4gICAgfSwgbGF0ZW5jeSlcbiAgICByZXR1cm4gZmFrZVB1c2hcbiAgfVxuXG4gIHJlbG9hZFdpdGhKaXR0ZXIodmlldywgbG9nKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICBsZXQgbWluTXMgPSB0aGlzLnJlbG9hZEppdHRlck1pblxuICAgIGxldCBtYXhNcyA9IHRoaXMucmVsb2FkSml0dGVyTWF4XG4gICAgbGV0IGFmdGVyTXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4TXMgLSBtaW5NcyArIDEpKSArIG1pbk1zXG4gICAgbGV0IHRyaWVzID0gQnJvd3Nlci51cGRhdGVMb2NhbCh0aGlzLmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTLCAwLCBjb3VudCA9PiBjb3VudCArIDEpXG4gICAgaWYodHJpZXMgPiB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgYWZ0ZXJNcyA9IHRoaXMuZmFpbHNhZmVKaXR0ZXJcbiAgICB9XG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGlmIHZpZXcgaGFzIHJlY292ZXJlZCwgc3VjaCBhcyB0cmFuc3BvcnQgcmVwbGFjZWQsIHRoZW4gY2FuY2VsXG4gICAgICBpZih2aWV3LmlzRGVzdHJveWVkKCkgfHwgdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHZpZXcuZGVzdHJveSgpXG4gICAgICBsb2cgPyBsb2coKSA6IHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGVuY291bnRlcmVkICR7dHJpZXN9IGNvbnNlY3V0aXZlIHJlbG9hZHNgXSlcbiAgICAgIGlmKHRyaWVzID4gdGhpcy5tYXhSZWxvYWRzKXtcbiAgICAgICAgdGhpcy5sb2codmlldywgXCJqb2luXCIsICgpID0+IFtgZXhjZWVkZWQgJHt0aGlzLm1heFJlbG9hZHN9IGNvbnNlY3V0aXZlIHJlbG9hZHMuIEVudGVyaW5nIGZhaWxzYWZlIG1vZGVgXSlcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMuaGFzUGVuZGluZ0xpbmsoKSl7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0sIGFmdGVyTXMpXG4gIH1cblxuICBnZXRIb29rQ2FsbGJhY2tzKG5hbWUpe1xuICAgIHJldHVybiBuYW1lICYmIG5hbWUuc3RhcnRzV2l0aChcIlBob2VuaXguXCIpID8gSG9va3NbbmFtZS5zcGxpdChcIi5cIilbMV1dIDogdGhpcy5ob29rc1tuYW1lXVxuICB9XG5cbiAgaXNVbmxvYWRlZCgpeyByZXR1cm4gdGhpcy51bmxvYWRlZCB9XG5cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgfVxuXG4gIGdldEJpbmRpbmdQcmVmaXgoKXsgcmV0dXJuIHRoaXMuYmluZGluZ1ByZWZpeCB9XG5cbiAgYmluZGluZyhraW5kKXsgcmV0dXJuIGAke3RoaXMuZ2V0QmluZGluZ1ByZWZpeCgpfSR7a2luZH1gIH1cblxuICBjaGFubmVsKHRvcGljLCBwYXJhbXMpeyByZXR1cm4gdGhpcy5zb2NrZXQuY2hhbm5lbCh0b3BpYywgcGFyYW1zKSB9XG5cbiAgam9pbkRlYWRWaWV3KCl7XG4gICAgbGV0IGJvZHkgPSBkb2N1bWVudC5ib2R5XG4gICAgaWYoYm9keSAmJiAhdGhpcy5pc1BoeFZpZXcoYm9keSkgJiYgIXRoaXMuaXNQaHhWaWV3KGRvY3VtZW50LmZpcnN0RWxlbWVudENoaWxkKSl7XG4gICAgICBsZXQgdmlldyA9IHRoaXMubmV3Um9vdFZpZXcoYm9keSlcbiAgICAgIHZpZXcuc2V0SHJlZih0aGlzLmdldEhyZWYoKSlcbiAgICAgIHZpZXcuam9pbkRlYWQoKVxuICAgICAgaWYoIXRoaXMubWFpbil7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB2aWV3LmV4ZWNOZXdNb3VudGVkKCkpXG4gICAgfVxuICB9XG5cbiAgam9pblJvb3RWaWV3cygpe1xuICAgIGxldCByb290c0ZvdW5kID0gZmFsc2VcbiAgICBET00uYWxsKGRvY3VtZW50LCBgJHtQSFhfVklFV19TRUxFQ1RPUn06bm90KFske1BIWF9QQVJFTlRfSUR9XSlgLCByb290RWwgPT4ge1xuICAgICAgaWYoIXRoaXMuZ2V0Um9vdEJ5SWQocm9vdEVsLmlkKSl7XG4gICAgICAgIGxldCB2aWV3ID0gdGhpcy5uZXdSb290Vmlldyhyb290RWwpXG4gICAgICAgIHZpZXcuc2V0SHJlZih0aGlzLmdldEhyZWYoKSlcbiAgICAgICAgdmlldy5qb2luKClcbiAgICAgICAgaWYocm9vdEVsLmhhc0F0dHJpYnV0ZShQSFhfTUFJTikpeyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIH1cbiAgICAgIHJvb3RzRm91bmQgPSB0cnVlXG4gICAgfSlcbiAgICByZXR1cm4gcm9vdHNGb3VuZFxuICB9XG5cbiAgcmVkaXJlY3QodG8sIGZsYXNoKXtcbiAgICB0aGlzLnVubG9hZCgpXG4gICAgQnJvd3Nlci5yZWRpcmVjdCh0bywgZmxhc2gpXG4gIH1cblxuICByZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgY2FsbGJhY2sgPSBudWxsLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgbGV0IGxpdmVSZWZlcmVyID0gdGhpcy5jdXJyZW50TG9jYXRpb24uaHJlZlxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSB0aGlzLm91dGdvaW5nTWFpbkVsIHx8IHRoaXMubWFpbi5lbFxuICAgIGxldCBuZXdNYWluRWwgPSBET00uY2xvbmVOb2RlKHRoaXMub3V0Z29pbmdNYWluRWwsIFwiXCIpXG4gICAgdGhpcy5tYWluLnNob3dMb2FkZXIodGhpcy5sb2FkZXJUaW1lb3V0KVxuICAgIHRoaXMubWFpbi5kZXN0cm95KClcblxuICAgIHRoaXMubWFpbiA9IHRoaXMubmV3Um9vdFZpZXcobmV3TWFpbkVsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpXG4gICAgdGhpcy5tYWluLnNldFJlZGlyZWN0KGhyZWYpXG4gICAgdGhpcy50cmFuc2l0aW9uUmVtb3ZlcygpXG4gICAgdGhpcy5tYWluLmpvaW4oKGpvaW5Db3VudCwgb25Eb25lKSA9PiB7XG4gICAgICBpZihqb2luQ291bnQgPT09IDEgJiYgdGhpcy5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgRE9NLmZpbmRQaHhTdGlja3koZG9jdW1lbnQpLmZvckVhY2goZWwgPT4gbmV3TWFpbkVsLmFwcGVuZENoaWxkKGVsKSlcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsLnJlcGxhY2VXaXRoKG5ld01haW5FbClcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgICAgICAgIGNhbGxiYWNrICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBjYWxsYmFjayhsaW5rUmVmKSlcbiAgICAgICAgICBvbkRvbmUoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmFuc2l0aW9uUmVtb3ZlcyhlbGVtZW50cyl7XG4gICAgbGV0IHJlbW92ZUF0dHIgPSB0aGlzLmJpbmRpbmcoXCJyZW1vdmVcIilcbiAgICBlbGVtZW50cyA9IGVsZW1lbnRzIHx8IERPTS5hbGwoZG9jdW1lbnQsIGBbJHtyZW1vdmVBdHRyfV1gKVxuICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgdGhpcy5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShyZW1vdmVBdHRyKSwgXCJyZW1vdmVcIilcbiAgICB9KVxuICB9XG5cbiAgaXNQaHhWaWV3KGVsKXsgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsIH1cblxuICBuZXdSb290VmlldyhlbCwgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBWaWV3KGVsLCB0aGlzLCBudWxsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpXG4gICAgdGhpcy5yb290c1t2aWV3LmlkXSA9IHZpZXdcbiAgICByZXR1cm4gdmlld1xuICB9XG5cbiAgb3duZXIoY2hpbGRFbCwgY2FsbGJhY2spe1xuICAgIGxldCB2aWV3ID0gbWF5YmUoY2hpbGRFbC5jbG9zZXN0KFBIWF9WSUVXX1NFTEVDVE9SKSwgZWwgPT4gdGhpcy5nZXRWaWV3QnlFbChlbCkpIHx8IHRoaXMubWFpblxuICAgIGlmKHZpZXcpeyBjYWxsYmFjayh2aWV3KSB9XG4gIH1cblxuICB3aXRoaW5Pd25lcnMoY2hpbGRFbCwgY2FsbGJhY2spe1xuICAgIHRoaXMub3duZXIoY2hpbGRFbCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBjaGlsZEVsKSlcbiAgfVxuXG4gIGdldFZpZXdCeUVsKGVsKXtcbiAgICBsZXQgcm9vdElkID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ST09UX0lEKVxuICAgIHJldHVybiBtYXliZSh0aGlzLmdldFJvb3RCeUlkKHJvb3RJZCksIHJvb3QgPT4gcm9vdC5nZXREZXNjZW5kZW50QnlFbChlbCkpXG4gIH1cblxuICBnZXRSb290QnlJZChpZCl7IHJldHVybiB0aGlzLnJvb3RzW2lkXSB9XG5cbiAgZGVzdHJveUFsbFZpZXdzKCl7XG4gICAgZm9yKGxldCBpZCBpbiB0aGlzLnJvb3RzKXtcbiAgICAgIHRoaXMucm9vdHNbaWRdLmRlc3Ryb3koKVxuICAgICAgZGVsZXRlIHRoaXMucm9vdHNbaWRdXG4gICAgfVxuICAgIHRoaXMubWFpbiA9IG51bGxcbiAgfVxuXG4gIGRlc3Ryb3lWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3QgPSB0aGlzLmdldFJvb3RCeUlkKGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCkpXG4gICAgaWYocm9vdCAmJiByb290LmlkID09PSBlbC5pZCl7XG4gICAgICByb290LmRlc3Ryb3koKVxuICAgICAgZGVsZXRlIHRoaXMucm9vdHNbcm9vdC5pZF1cbiAgICB9IGVsc2UgaWYocm9vdCl7XG4gICAgICByb290LmRlc3Ryb3lEZXNjZW5kZW50KGVsLmlkKVxuICAgIH1cbiAgfVxuXG4gIHNldEFjdGl2ZUVsZW1lbnQodGFyZ2V0KXtcbiAgICBpZih0aGlzLmFjdGl2ZUVsZW1lbnQgPT09IHRhcmdldCl7IHJldHVybiB9XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gdGFyZ2V0XG4gICAgbGV0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgIGlmKHRhcmdldCA9PT0gdGhpcy5hY3RpdmVFbGVtZW50KXsgdGhpcy5hY3RpdmVFbGVtZW50ID0gbnVsbCB9XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcylcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcylcbiAgICB9XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGNhbmNlbClcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGNhbmNlbClcbiAgfVxuXG4gIGdldEFjdGl2ZUVsZW1lbnQoKXtcbiAgICBpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiBiZSBudWxsIGluIEludGVybmV0IEV4cGxvcmVyIDExXG4gICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5XG4gICAgfVxuICB9XG5cbiAgZHJvcEFjdGl2ZUVsZW1lbnQodmlldyl7XG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICYmIHZpZXcub3duc0VsZW1lbnQodGhpcy5wcmV2QWN0aXZlKSl7XG4gICAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB0aGlzLnByZXZBY3RpdmUgIT09IGRvY3VtZW50LmJvZHkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBibHVyQWN0aXZlRWxlbWVudCgpe1xuICAgIHRoaXMucHJldkFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXsgdGhpcy5wcmV2QWN0aXZlLmJsdXIoKSB9XG4gIH1cblxuICBiaW5kVG9wTGV2ZWxFdmVudHMoe2RlYWR9ID0ge30pe1xuICAgIGlmKHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyl7IHJldHVybiB9XG5cbiAgICB0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMgPSB0cnVlXG4gICAgLy8gZW50ZXIgZmFpbHNhZmUgcmVsb2FkIGlmIHNlcnZlciBoYXMgZ29uZSBhd2F5IGludGVudGlvbmFsbHksIHN1Y2ggYXMgXCJkaXNjb25uZWN0XCIgYnJvYWRjYXN0XG4gICAgdGhpcy5zb2NrZXQub25DbG9zZShldmVudCA9PiB7XG4gICAgICAvLyBmYWlsc2FmZSByZWxvYWQgaWYgbm9ybWFsIGNsb3N1cmUgYW5kIHdlIHN0aWxsIGhhdmUgYSBtYWluIExWXG4gICAgICBpZihldmVudCAmJiBldmVudC5jb2RlID09PSAxMDAwICYmIHRoaXMubWFpbil7IHJldHVybiB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodGhpcy5tYWluKSB9XG4gICAgfSlcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKXsgfSkgLy8gZW5zdXJlIGFsbCBjbGljayBldmVudHMgYnViYmxlIGZvciBtb2JpbGUgU2FmYXJpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBlID0+IHtcbiAgICAgIGlmKGUucGVyc2lzdGVkKXsgLy8gcmVsb2FkIHBhZ2UgaWYgYmVpbmcgcmVzdG9yZWQgZnJvbSBiYWNrL2ZvcndhcmQgY2FjaGVcbiAgICAgICAgdGhpcy5nZXRTb2NrZXQoKS5kaXNjb25uZWN0KClcbiAgICAgICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiB3aW5kb3cubG9jYXRpb24uaHJlZiwga2luZDogXCJyZWRpcmVjdFwifSlcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgdHJ1ZSlcbiAgICBpZighZGVhZCl7IHRoaXMuYmluZE5hdigpIH1cbiAgICB0aGlzLmJpbmRDbGlja3MoKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kRm9ybXMoKSB9XG4gICAgdGhpcy5iaW5kKHtrZXl1cDogXCJrZXl1cFwiLCBrZXlkb3duOiBcImtleWRvd25cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgbGV0IG1hdGNoS2V5ID0gdGFyZ2V0RWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfS0VZKSlcbiAgICAgIGxldCBwcmVzc2VkS2V5ID0gZS5rZXkgJiYgZS5rZXkudG9Mb3dlckNhc2UoKSAvLyBjaHJvbWUgY2xpY2tlZCBhdXRvY29tcGxldGVzIHNlbmQgYSBrZXlkb3duIHdpdGhvdXQga2V5XG4gICAgICBpZihtYXRjaEtleSAmJiBtYXRjaEtleS50b0xvd2VyQ2FzZSgpICE9PSBwcmVzc2VkS2V5KXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGRhdGEgPSB7a2V5OiBlLmtleSwgLi4udGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpfVxuICAgICAgSlMuZXhlYyh0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJmb2N1c291dFwiLCBmb2N1czogXCJmb2N1c2luXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFwaHhUYXJnZXQpe1xuICAgICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiYmx1clwiLCBmb2N1czogXCJmb2N1c1wifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgcGh4VGFyZ2V0KSA9PiB7XG4gICAgICAvLyBibHVyIGFuZCBmb2N1cyBhcmUgdHJpZ2dlcmVkIG9uIGRvY3VtZW50IGFuZCB3aW5kb3cuIERpc2NhcmQgb25lIHRvIGF2b2lkIGR1cHNcbiAgICAgIGlmKHBoeFRhcmdldCA9PT0gXCJ3aW5kb3dcIil7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5ldmVudE1ldGEodHlwZSwgZSwgdGFyZ2V0RWwpXG4gICAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgbGV0IGRyb3BUYXJnZXRJZCA9IG1heWJlKGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCB0aGlzLmJpbmRpbmcoUEhYX0RST1BfVEFSR0VUKSksIHRydWVUYXJnZXQgPT4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpXG4gICAgICB9KVxuICAgICAgbGV0IGRyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0SWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHJvcFRhcmdldElkKVxuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShlLmRhdGFUcmFuc2Zlci5maWxlcyB8fCBbXSlcbiAgICAgIGlmKCFkcm9wVGFyZ2V0IHx8IGRyb3BUYXJnZXQuZGlzYWJsZWQgfHwgZmlsZXMubGVuZ3RoID09PSAwIHx8ICEoZHJvcFRhcmdldC5maWxlcyBpbnN0YW5jZW9mIEZpbGVMaXN0KSl7IHJldHVybiB9XG5cbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGRyb3BUYXJnZXQsIGZpbGVzLCBlLmRhdGFUcmFuc2ZlcilcbiAgICAgIGRyb3BUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gICAgdGhpcy5vbihQSFhfVFJBQ0tfVVBMT0FEUywgZSA9PiB7XG4gICAgICBsZXQgdXBsb2FkVGFyZ2V0ID0gZS50YXJnZXRcbiAgICAgIGlmKCFET00uaXNVcGxvYWRJbnB1dCh1cGxvYWRUYXJnZXQpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kZXRhaWwuZmlsZXMgfHwgW10pLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGaWxlIHx8IGYgaW5zdGFuY2VvZiBCbG9iKVxuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXModXBsb2FkVGFyZ2V0LCBmaWxlcylcbiAgICAgIHVwbG9hZFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgfSlcbiAgfVxuXG4gIGV2ZW50TWV0YShldmVudE5hbWUsIGUsIHRhcmdldEVsKXtcbiAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzW2V2ZW50TmFtZV1cbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhlLCB0YXJnZXRFbCkgOiB7fVxuICB9XG5cbiAgc2V0UGVuZGluZ0xpbmsoaHJlZil7XG4gICAgdGhpcy5saW5rUmVmKytcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gaHJlZlxuICAgIHJldHVybiB0aGlzLmxpbmtSZWZcbiAgfVxuXG4gIGNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpe1xuICAgIGlmKHRoaXMubGlua1JlZiAhPT0gbGlua1JlZil7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ocmVmID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZ2V0SHJlZigpeyByZXR1cm4gdGhpcy5ocmVmIH1cblxuICBoYXNQZW5kaW5nTGluaygpeyByZXR1cm4gISF0aGlzLnBlbmRpbmdMaW5rIH1cblxuICBiaW5kKGV2ZW50cywgY2FsbGJhY2spe1xuICAgIGZvcihsZXQgZXZlbnQgaW4gZXZlbnRzKXtcbiAgICAgIGxldCBicm93c2VyRXZlbnROYW1lID0gZXZlbnRzW2V2ZW50XVxuXG4gICAgICB0aGlzLm9uKGJyb3dzZXJFdmVudE5hbWUsIGUgPT4ge1xuICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuYmluZGluZyhldmVudClcbiAgICAgICAgbGV0IHdpbmRvd0JpbmRpbmcgPSB0aGlzLmJpbmRpbmcoYHdpbmRvdy0ke2V2ZW50fWApXG4gICAgICAgIGxldCB0YXJnZXRQaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoYmluZGluZylcbiAgICAgICAgaWYodGFyZ2V0UGh4RXZlbnQpe1xuICAgICAgICAgIHRoaXMuZGVib3VuY2UoZS50YXJnZXQsIGUsIGJyb3dzZXJFdmVudE5hbWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGUudGFyZ2V0LCB0YXJnZXRQaHhFdmVudCwgbnVsbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7d2luZG93QmluZGluZ31dYCwgZWwgPT4ge1xuICAgICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHdpbmRvd0JpbmRpbmcpXG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlKGVsLCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBldmVudCwgdmlldywgZWwsIHBoeEV2ZW50LCBcIndpbmRvd1wiKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGJpbmRDbGlja3MoKXtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBlID0+IHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldClcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIiwgZmFsc2UpXG4gICAgdGhpcy5iaW5kQ2xpY2soXCJtb3VzZWRvd25cIiwgXCJjYXB0dXJlLWNsaWNrXCIsIHRydWUpXG4gIH1cblxuICBiaW5kQ2xpY2soZXZlbnROYW1lLCBiaW5kaW5nTmFtZSwgY2FwdHVyZSl7XG4gICAgbGV0IGNsaWNrID0gdGhpcy5iaW5kaW5nKGJpbmRpbmdOYW1lKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gbnVsbFxuICAgICAgaWYoY2FwdHVyZSl7XG4gICAgICAgIHRhcmdldCA9IGUudGFyZ2V0Lm1hdGNoZXMoYFske2NsaWNrfV1gKSA/IGUudGFyZ2V0IDogZS50YXJnZXQucXVlcnlTZWxlY3RvcihgWyR7Y2xpY2t9XWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2xpY2tTdGFydGVkQXRUYXJnZXQgPSB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0IHx8IGUudGFyZ2V0XG4gICAgICAgIHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGNsaWNrU3RhcnRlZEF0VGFyZ2V0LCBjbGljaylcbiAgICAgICAgdGhpcy5kaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdFRhcmdldClcbiAgICAgICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICAgIH1cbiAgICAgIGxldCBwaHhFdmVudCA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKGNsaWNrKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgaWYoIWNhcHR1cmUgJiYgRE9NLmlzTmV3UGFnZUNsaWNrKGUsIHdpbmRvdy5sb2NhdGlvbikpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIil7IGUucHJldmVudERlZmF1bHQoKSB9XG5cbiAgICAgIC8vIG5vb3AgaWYgd2UgYXJlIGluIHRoZSBtaWRkbGUgb2YgYXdhaXRpbmcgYW4gYWNrIGZvciB0aGlzIGVsIGFscmVhZHlcbiAgICAgIGlmKHRhcmdldC5oYXNBdHRyaWJ1dGUoUEhYX1JFRikpeyByZXR1cm4gfVxuXG4gICAgICB0aGlzLmRlYm91bmNlKHRhcmdldCwgZSwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKHRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgSlMuZXhlYyhcImNsaWNrXCIsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXQsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgdGFyZ2V0KX1dKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LCBjYXB0dXJlKVxuICB9XG5cbiAgZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXQpe1xuICAgIGxldCBwaHhDbGlja0F3YXkgPSB0aGlzLmJpbmRpbmcoXCJjbGljay1hd2F5XCIpXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske3BoeENsaWNrQXdheX1dYCwgZWwgPT4ge1xuICAgICAgaWYoIShlbC5pc1NhbWVOb2RlKGNsaWNrU3RhcnRlZEF0KSB8fCBlbC5jb250YWlucyhjbGlja1N0YXJ0ZWRBdCkpKXtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZShwaHhDbGlja0F3YXkpXG4gICAgICAgICAgaWYoSlMuaXNWaXNpYmxlKGVsKSAmJiBKUy5pc0luVmlld3BvcnQoZWwpKXtcbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjbGlja1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgZS50YXJnZXQpfV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kTmF2KCl7XG4gICAgaWYoIUJyb3dzZXIuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGlmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24peyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9XG4gICAgbGV0IHNjcm9sbFRpbWVyID0gbnVsbFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9lID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzY3JvbGxUaW1lcilcbiAgICAgIHNjcm9sbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKHN0YXRlID0+IE9iamVjdC5hc3NpZ24oc3RhdGUsIHtzY3JvbGw6IHdpbmRvdy5zY3JvbGxZfSkpXG4gICAgICB9LCAxMDApXG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGV2ZW50ID0+IHtcbiAgICAgIGlmKCF0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7IHJldHVybiB9XG4gICAgICBsZXQge3R5cGUsIGlkLCByb290LCBzY3JvbGx9ID0gZXZlbnQuc3RhdGUgfHwge31cbiAgICAgIGxldCBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuICAgICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpuYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7aHJlZiwgcGF0Y2g6IHR5cGUgPT09IFwicGF0Y2hcIiwgcG9wOiB0cnVlfX0pXG4gICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLm1haW4uaXNDb25uZWN0ZWQoKSAmJiAodHlwZSA9PT0gXCJwYXRjaFwiICYmIGlkID09PSB0aGlzLm1haW4uaWQpKXtcbiAgICAgICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChocmVmLCBudWxsLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1heWJlU2Nyb2xsKHNjcm9sbClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYocm9vdCl7IHRoaXMucmVwbGFjZVJvb3RIaXN0b3J5KCkgfVxuICAgICAgICAgICAgdGhpcy5tYXliZVNjcm9sbChzY3JvbGwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xuICAgICAgbGV0IHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGUudGFyZ2V0LCBQSFhfTElWRV9MSU5LKVxuICAgICAgbGV0IHR5cGUgPSB0YXJnZXQgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElWRV9MSU5LKVxuICAgICAgaWYoIXR5cGUgfHwgIXRoaXMuaXNDb25uZWN0ZWQoKSB8fCAhdGhpcy5tYWluIHx8IERPTS53YW50c05ld1RhYihlKSl7IHJldHVybiB9XG5cbiAgICAgIC8vIFdoZW4gd3JhcHBpbmcgYW4gU1ZHIGVsZW1lbnQgaW4gYW4gYW5jaG9yIHRhZywgdGhlIGhyZWYgY2FuIGJlIGFuIFNWR0FuaW1hdGVkU3RyaW5nXG4gICAgICBsZXQgaHJlZiA9IHRhcmdldC5ocmVmIGluc3RhbmNlb2YgU1ZHQW5pbWF0ZWRTdHJpbmcgPyB0YXJnZXQuaHJlZi5iYXNlVmFsIDogdGFyZ2V0LmhyZWZcblxuICAgICAgbGV0IGxpbmtTdGF0ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJTktfU1RBVEUpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkgLy8gZG8gbm90IGJ1YmJsZSBjbGljayB0byByZWd1bGFyIHBoeC1jbGljayBiaW5kaW5nc1xuICAgICAgaWYodGhpcy5wZW5kaW5nTGluayA9PT0gaHJlZil7IHJldHVybiB9XG5cbiAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHR5cGUgPT09IFwicGF0Y2hcIil7XG4gICAgICAgICAgdGhpcy5wdXNoSGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0KVxuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB0aGlzLmhpc3RvcnlSZWRpcmVjdChocmVmLCBsaW5rU3RhdGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke1BIWF9MSVZFX0xJTkt9IHRvIGJlIFwicGF0Y2hcIiBvciBcInJlZGlyZWN0XCIsIGdvdDogJHt0eXBlfWApXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBoeENsaWNrID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjbGlja1wiKSlcbiAgICAgICAgaWYocGh4Q2xpY2spe1xuICAgICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLmV4ZWNKUyh0YXJnZXQsIHBoeENsaWNrLCBcImNsaWNrXCIpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgbWF5YmVTY3JvbGwoc2Nyb2xsKSB7XG4gICAgaWYodHlwZW9mKHNjcm9sbCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHNjcm9sbClcbiAgICAgIH0pIC8vIHRoZSBib2R5IG5lZWRzIHRvIHJlbmRlciBiZWZvcmUgd2Ugc2Nyb2xsLlxuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBgcGh4OiR7ZXZlbnR9YCwge2RldGFpbDogcGF5bG9hZH0pXG4gIH1cblxuICBkaXNwYXRjaEV2ZW50cyhldmVudHMpe1xuICAgIGV2ZW50cy5mb3JFYWNoKChbZXZlbnQsIHBheWxvYWRdKSA9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQpKVxuICB9XG5cbiAgd2l0aFBhZ2VMb2FkaW5nKGluZm8sIGNhbGxiYWNrKXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICBsZXQgZG9uZSA9ICgpID0+IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwge2RldGFpbDogaW5mb30pXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZG9uZSkgOiBkb25lXG4gIH1cblxuICBwdXNoSGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0RWwpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gQnJvd3Nlci5yZWRpcmVjdChocmVmKSB9XG5cbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicGF0Y2hcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goaHJlZiwgdGFyZ2V0RWwsIGxpbmtSZWYgPT4ge1xuICAgICAgICB0aGlzLmhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIGxpbmtSZWYpXG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZiA9IHRoaXMuc2V0UGVuZGluZ0xpbmsoaHJlZikpe1xuICAgIGlmKCF0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXsgcmV0dXJuIH1cblxuICAgIEJyb3dzZXIucHVzaFN0YXRlKGxpbmtTdGF0ZSwge3R5cGU6IFwicGF0Y2hcIiwgaWQ6IHRoaXMubWFpbi5pZH0sIGhyZWYpXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpuYXZpZ2F0ZVwiLCB7ZGV0YWlsOiB7cGF0Y2g6IHRydWUsIGhyZWYsIHBvcDogZmFsc2V9fSlcbiAgICB0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKVxuICB9XG5cbiAgaGlzdG9yeVJlZGlyZWN0KGhyZWYsIGxpbmtTdGF0ZSwgZmxhc2gpe1xuICAgIC8vIGNvbnZlcnQgdG8gZnVsbCBocmVmIGlmIG9ubHkgcGF0aCBwcmVmaXhcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIEJyb3dzZXIucmVkaXJlY3QoaHJlZiwgZmxhc2gpIH1cbiAgICBpZigvXlxcLyR8XlxcL1teXFwvXSsuKiQvLnRlc3QoaHJlZikpe1xuICAgICAgbGV0IHtwcm90b2NvbCwgaG9zdH0gPSB3aW5kb3cubG9jYXRpb25cbiAgICAgIGhyZWYgPSBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke2hyZWZ9YFxuICAgIH1cbiAgICBsZXQgc2Nyb2xsID0gd2luZG93LnNjcm9sbFlcbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicmVkaXJlY3RcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5yZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgKGxpbmtSZWYpID0+IHtcbiAgICAgICAgaWYobGlua1JlZiA9PT0gdGhpcy5saW5rUmVmKXtcbiAgICAgICAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHt0eXBlOiBcInJlZGlyZWN0XCIsIGlkOiB0aGlzLm1haW4uaWQsIHNjcm9sbDogc2Nyb2xsfSwgaHJlZilcbiAgICAgICAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4Om5hdmlnYXRlXCIsIHtkZXRhaWw6IHtocmVmLCBwYXRjaDogZmFsc2UsIHBvcDogZmFsc2V9fSlcbiAgICAgICAgICB0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKVxuICAgICAgICB9XG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcmVwbGFjZVJvb3RIaXN0b3J5KCl7XG4gICAgQnJvd3Nlci5wdXNoU3RhdGUoXCJyZXBsYWNlXCIsIHtyb290OiB0cnVlLCB0eXBlOiBcInBhdGNoXCIsIGlkOiB0aGlzLm1haW4uaWR9KVxuICB9XG5cbiAgcmVnaXN0ZXJOZXdMb2NhdGlvbihuZXdMb2NhdGlvbil7XG4gICAgbGV0IHtwYXRobmFtZSwgc2VhcmNofSA9IHRoaXMuY3VycmVudExvY2F0aW9uXG4gICAgaWYocGF0aG5hbWUgKyBzZWFyY2ggPT09IG5ld0xvY2F0aW9uLnBhdGhuYW1lICsgbmV3TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKG5ld0xvY2F0aW9uKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBiaW5kRm9ybXMoKXtcbiAgICBsZXQgaXRlcmF0aW9ucyA9IDBcbiAgICBsZXQgZXh0ZXJuYWxGb3JtU3VibWl0dGVkID0gZmFsc2VcblxuICAgIC8vIGRpc2FibGUgZm9ybXMgb24gc3VibWl0IHRoYXQgdHJhY2sgcGh4LWNoYW5nZSBidXQgcGVyZm9ybSBleHRlcm5hbCBzdWJtaXRcbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeFN1Ym1pdCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJzdWJtaXRcIikpXG4gICAgICBsZXQgcGh4Q2hhbmdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICAgIGlmKCFleHRlcm5hbEZvcm1TdWJtaXR0ZWQgJiYgcGh4Q2hhbmdlICYmICFwaHhTdWJtaXQpe1xuICAgICAgICBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSB0cnVlXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgdmlldy5kaXNhYmxlRm9ybShlLnRhcmdldClcbiAgICAgICAgICAvLyBzYWZhcmkgbmVlZHMgbmV4dCB0aWNrXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZihET00uaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICAgICAgZS50YXJnZXQuc3VibWl0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIHRydWUpXG5cbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeEV2ZW50ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnRhcmdldC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgSlMuZXhlYyhcInN1Ym1pdFwiLCBwaHhFdmVudCwgdmlldywgZS50YXJnZXQsIFtcInB1c2hcIiwge3N1Ym1pdHRlcjogZS5zdWJtaXR0ZXJ9XSlcbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG5cbiAgICBmb3IobGV0IHR5cGUgb2YgW1wiY2hhbmdlXCIsIFwiaW5wdXRcIl0pe1xuICAgICAgdGhpcy5vbih0eXBlLCBlID0+IHtcbiAgICAgICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgICAgICBsZXQgaW5wdXQgPSBlLnRhcmdldFxuICAgICAgICBsZXQgaW5wdXRFdmVudCA9IGlucHV0LmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBmb3JtRXZlbnQgPSBpbnB1dC5mb3JtICYmIGlucHV0LmZvcm0uZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IHBoeEV2ZW50ID0gaW5wdXRFdmVudCB8fCBmb3JtRXZlbnRcbiAgICAgICAgaWYoIXBoeEV2ZW50KXsgcmV0dXJuIH1cbiAgICAgICAgaWYoaW5wdXQudHlwZSA9PT0gXCJudW1iZXJcIiAmJiBpbnB1dC52YWxpZGl0eSAmJiBpbnB1dC52YWxpZGl0eS5iYWRJbnB1dCl7IHJldHVybiB9XG5cbiAgICAgICAgbGV0IGRpc3BhdGNoZXIgPSBpbnB1dEV2ZW50ID8gaW5wdXQgOiBpbnB1dC5mb3JtXG4gICAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9ucyA9IGl0ZXJhdGlvbnNcbiAgICAgICAgaXRlcmF0aW9ucysrXG4gICAgICAgIGxldCB7YXQ6IGF0LCB0eXBlOiBsYXN0VHlwZX0gPSBET00ucHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiKSB8fCB7fVxuICAgICAgICAvLyBCcm93c2VycyBzaG91bGQgYWx3YXlzIGZpcmUgYXQgbGVhc3Qgb25lIFwiaW5wdXRcIiBldmVudCBiZWZvcmUgZXZlcnkgXCJjaGFuZ2VcIlxuICAgICAgICAvLyBJZ25vcmUgXCJjaGFuZ2VcIiBldmVudHMsIHVubGVzcyB0aGVyZSB3YXMgbm8gcHJpb3IgXCJpbnB1dFwiIGV2ZW50LlxuICAgICAgICAvLyBUaGlzIGNvdWxkIGhhcHBlbiBpZiB1c2VyIGNvZGUgdHJpZ2dlcnMgYSBcImNoYW5nZVwiIGV2ZW50LCBvciBpZiB0aGUgYnJvd3NlciBpcyBub24tY29uZm9ybWluZy5cbiAgICAgICAgaWYoYXQgPT09IGN1cnJlbnRJdGVyYXRpb25zIC0gMSAmJiB0eXBlID09PSBcImNoYW5nZVwiICYmIGxhc3RUeXBlID09PSBcImlucHV0XCIpeyByZXR1cm4gfVxuXG4gICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIsIHthdDogY3VycmVudEl0ZXJhdGlvbnMsIHR5cGU6IHR5cGV9KVxuXG4gICAgICAgIHRoaXMuZGVib3VuY2UoaW5wdXQsIGUsIHR5cGUsICgpID0+IHtcbiAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhkaXNwYXRjaGVyLCB2aWV3ID0+IHtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQsIHRydWUpXG4gICAgICAgICAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGlucHV0KSl7XG4gICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlRWxlbWVudChpbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBlLnRhcmdldC5uYW1lLCBkaXNwYXRjaGVyOiBkaXNwYXRjaGVyfV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sIGZhbHNlKVxuICAgIH1cbiAgICB0aGlzLm9uKFwicmVzZXRcIiwgKGUpID0+IHtcbiAgICAgIGxldCBmb3JtID0gZS50YXJnZXRcbiAgICAgIERPTS5yZXNldEZvcm0oZm9ybSwgdGhpcy5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpKVxuICAgICAgbGV0IGlucHV0ID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5maW5kKGVsID0+IGVsLnR5cGUgPT09IFwicmVzZXRcIilcbiAgICAgIC8vIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGdldCB1cGRhdGVkIGlucHV0IHZhbHVlXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogZmFsc2V9KSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgZXZlbnRUeXBlLCBjYWxsYmFjayl7XG4gICAgaWYoZXZlbnRUeXBlID09PSBcImJsdXJcIiB8fCBldmVudFR5cGUgPT09IFwiZm9jdXNvdXRcIil7IHJldHVybiBjYWxsYmFjaygpIH1cblxuICAgIGxldCBwaHhEZWJvdW5jZSA9IHRoaXMuYmluZGluZyhQSFhfREVCT1VOQ0UpXG4gICAgbGV0IHBoeFRocm90dGxlID0gdGhpcy5iaW5kaW5nKFBIWF9USFJPVFRMRSlcbiAgICBsZXQgZGVmYXVsdERlYm91bmNlID0gdGhpcy5kZWZhdWx0cy5kZWJvdW5jZS50b1N0cmluZygpXG4gICAgbGV0IGRlZmF1bHRUaHJvdHRsZSA9IHRoaXMuZGVmYXVsdHMudGhyb3R0bGUudG9TdHJpbmcoKVxuXG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGFzeW5jRmlsdGVyID0gKCkgPT4gIXZpZXcuaXNEZXN0cm95ZWQoKSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKVxuICAgICAgRE9NLmRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsICgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgc2lsZW5jZUV2ZW50cyhjYWxsYmFjayl7XG4gICAgdGhpcy5zaWxlbmNlZCA9IHRydWVcbiAgICBjYWxsYmFjaygpXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gIH1cblxuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+IHtcbiAgICAgIGlmKCF0aGlzLnNpbGVuY2VkKXsgY2FsbGJhY2soZSkgfVxuICAgIH0pXG4gIH1cbn1cblxuY2xhc3MgVHJhbnNpdGlvblNldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBTZXQoKVxuICAgIHRoaXMucGVuZGluZ09wcyA9IFtdXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuZm9yRWFjaCh0aW1lciA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICB9KVxuICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgfVxuXG4gIGFmdGVyKGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLnNpemUoKSA9PT0gMCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFBlbmRpbmdPcChjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBhZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSl7XG4gICAgb25TdGFydCgpXG4gICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICAgIG9uRG9uZSgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfSwgdGltZSlcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFkZCh0aW1lcilcbiAgfVxuXG4gIHB1c2hQZW5kaW5nT3Aob3ApeyB0aGlzLnBlbmRpbmdPcHMucHVzaChvcCkgfVxuXG4gIHNpemUoKXsgcmV0dXJuIHRoaXMudHJhbnNpdGlvbnMuc2l6ZSB9XG5cbiAgZmx1c2hQZW5kaW5nT3BzKCl7XG4gICAgaWYodGhpcy5zaXplKCkgPiAwKXsgcmV0dXJuIH1cbiAgICBsZXQgb3AgPSB0aGlzLnBlbmRpbmdPcHMuc2hpZnQoKVxuICAgIGlmKG9wKXtcbiAgICAgIG9wKClcbiAgICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgICB9XG4gIH1cbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbXBvbmVudHMuZGVmYXVsdCkgfHwgIUFycmF5LmlzQXJyYXkoY29tcG9uZW50cy5maWxlbmFtZXMpKSByZXR1cm4gY29tcG9uZW50c1xuXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9XG4gICAgZm9yIChjb25zdCBbaW5kZXgsIG1vZHVsZV0gb2YgY29tcG9uZW50cy5kZWZhdWx0LmVudHJpZXMoKSkge1xuICAgICAgICBjb25zdCBDb21wb25lbnQgPSBtb2R1bGUuZGVmYXVsdFxuICAgICAgICBjb25zdCBuYW1lID0gY29tcG9uZW50cy5maWxlbmFtZXNbaW5kZXhdLnJlcGxhY2UoXCIuLi9zdmVsdGUvXCIsIFwiXCIpLnJlcGxhY2UoXCIuc3ZlbHRlXCIsIFwiXCIpXG4gICAgICAgIG5vcm1hbGl6ZWRbbmFtZV0gPSBDb21wb25lbnRcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cbiIsICJpbXBvcnQge25vcm1hbGl6ZUNvbXBvbmVudHN9IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbmRlcihjb21wb25lbnRzKSB7XG4gICAgY29tcG9uZW50cyA9IG5vcm1hbGl6ZUNvbXBvbmVudHMoY29tcG9uZW50cylcblxuICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXIobmFtZSwgcHJvcHMsIHNsb3RzKSB7XG4gICAgICAgIGNvbnN0IENvbXBvbmVudCA9IGNvbXBvbmVudHNbbmFtZV1cbiAgICAgICAgY29uc3QgJCRzbG90cyA9IE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhzbG90cykubWFwKChbaywgdl0pID0+IFtrLCAoKSA9PiB2XSkpXG4gICAgICAgIHJldHVybiBDb21wb25lbnQucmVuZGVyKHByb3BzLCB7JCRzbG90c30pXG4gICAgfVxufVxuIiwgImltcG9ydCB7bm9ybWFsaXplQ29tcG9uZW50c30gZnJvbSBcIi4vdXRpbHNcIlxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVKc29uKHJlZiwgYXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IGRhdGEgPSByZWYuZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpXG4gICAgcmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDoge31cbn1cblxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpXG59XG5cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpXG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRTbG90cyhyZWYpIHtcbiAgICBjb25zdCBzbG90cyA9IHt9XG5cbiAgICBmb3IgKGNvbnN0IHNsb3ROYW1lIGluIGdldEF0dHJpYnV0ZUpzb24ocmVmLCBcImRhdGEtc2xvdHNcIikpIHtcbiAgICAgICAgY29uc3Qgc2xvdCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gZ2V0QXR0cmlidXRlSnNvbihyZWYsIFwiZGF0YS1zbG90c1wiKVtzbG90TmFtZV1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBhdG9iKGJhc2U2NCkudHJpbSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFjaCh0aGlzLnNhdmVkRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZEVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKVxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQodGhpcy5zYXZlZFRhcmdldCwgdGhpcy5zYXZlZEVsZW1lbnQsIHRoaXMuc2F2ZWRBbmNob3IpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjOiBub29wLFxuICAgICAgICAgICAgICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZFRhcmdldCA9IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVkQW5jaG9yID0gYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWRFbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50KClcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KHRoaXMuc2F2ZWRUYXJnZXQsIHRoaXMuc2F2ZWRFbGVtZW50LCB0aGlzLnNhdmVkQW5jaG9yKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZChkZXRhY2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFjaGluZykgZGV0YWNoKHRoaXMuc2F2ZWRFbGVtZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbDogbm9vcCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNsb3RzW3Nsb3ROYW1lXSA9IFtzbG90XVxuICAgIH1cblxuICAgIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBnZXRMaXZlSnNvblByb3BzKHJlZikge1xuICAgIGNvbnN0IGpzb24gPSBnZXRBdHRyaWJ1dGVKc29uKHJlZiwgXCJkYXRhLWxpdmUtanNvblwiKVxuXG4gICAgLy8gT24gU1NSLCBkYXRhLWxpdmUtanNvbiBpcyB0aGUgZnVsbCBvYmplY3Qgd2Ugd2FudFxuICAgIC8vIEFmdGVyIFNTUiwgZGF0YS1saXZlLWpzb24gaXMgYW4gYXJyYXkgb2Yga2V5cywgYW5kIHdlJ2xsIGdldCB0aGUgZGF0YSBmcm9tIHRoZSB3aW5kb3dcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoanNvbikpIHJldHVybiBqc29uXG5cbiAgICBjb25zdCBsaXZlSnNvbkRhdGEgPSB7fVxuICAgIGZvciAoY29uc3QgbGl2ZUpzb25WYXJpYWJsZSBvZiBqc29uKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB3aW5kb3dbbGl2ZUpzb25WYXJpYWJsZV1cbiAgICAgICAgaWYgKGRhdGEpIGxpdmVKc29uRGF0YVtsaXZlSnNvblZhcmlhYmxlXSA9IGRhdGFcbiAgICB9XG4gICAgcmV0dXJuIGxpdmVKc29uRGF0YVxufVxuXG5mdW5jdGlvbiBnZXRQcm9wcyhyZWYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5nZXRBdHRyaWJ1dGVKc29uKHJlZiwgXCJkYXRhLXByb3BzXCIpLFxuICAgICAgICAuLi5nZXRMaXZlSnNvblByb3BzKHJlZiksXG4gICAgICAgIGxpdmU6IHJlZixcbiAgICAgICAgJCRzbG90czogZ2V0U2xvdHMocmVmKSxcbiAgICAgICAgJCRzY29wZToge30sXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaW5kU2xvdEN0eChjb21wb25lbnQpIHtcbiAgICAvLyBUaGUgZGVmYXVsdCBzbG90IGFsd2F5cyBleGlzdHMgaWYgdGhlcmUncyBhIHNsb3Qgc2V0XG4gICAgLy8gZXZlbiBpZiBubyBzbG90IGlzIHNldCBmb3IgdGhlIGV4cGxpY2l0IGRlZmF1bHQgc2xvdFxuICAgIHJldHVybiBjb21wb25lbnQuJCQuY3R4LmZpbmQoY3R4RWxlbWVudCA9PiBjdHhFbGVtZW50Py5kZWZhdWx0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9va3MoY29tcG9uZW50cykge1xuICAgIGNvbXBvbmVudHMgPSBub3JtYWxpemVDb21wb25lbnRzKGNvbXBvbmVudHMpXG5cbiAgICBjb25zdCBTdmVsdGVIb29rID0ge1xuICAgICAgICBtb3VudGVkKCkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIpXG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgbmFtZSBtdXN0IGJlIHByb3ZpZGVkXCIpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IENvbXBvbmVudCA9IGNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cbiAgICAgICAgICAgIGlmICghQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCAke2NvbXBvbmVudE5hbWV9IGNvbXBvbmVudC5gKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpdmVKc29uRWxlbWVudCBvZiBPYmplY3Qua2V5cyhnZXRBdHRyaWJ1dGVKc29uKHRoaXMsIFwiZGF0YS1saXZlLWpzb25cIikpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoYCR7bGl2ZUpzb25FbGVtZW50fV9pbml0aWFsaXplZGAsIGV2ZW50ID0+IHRoaXMuX2luc3RhbmNlLiRzZXQoZ2V0UHJvcHModGhpcykpLCBmYWxzZSlcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgJHtsaXZlSnNvbkVsZW1lbnR9X3BhdGNoZWRgLCBldmVudCA9PiB0aGlzLl9pbnN0YW5jZS4kc2V0KGdldFByb3BzKHRoaXMpKSwgZmFsc2UpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IENvbXBvbmVudCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmVsLFxuICAgICAgICAgICAgICAgIHByb3BzOiBnZXRQcm9wcyh0aGlzKSxcbiAgICAgICAgICAgICAgICBoeWRyYXRlOiB0aGlzLmVsLmhhc0F0dHJpYnV0ZShcImRhdGEtc3NyXCIpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVkKCkge1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBwcm9wc1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UuJHNldChnZXRQcm9wcyh0aGlzKSlcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBzbG90c1xuICAgICAgICAgICAgY29uc3Qgc2xvdEN0eCA9IGZpbmRTbG90Q3R4KHRoaXMuX2luc3RhbmNlKVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdEN0eCkge1xuICAgICAgICAgICAgICAgIHNsb3RDdHhba2V5XVswXSgpLnVwZGF0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVzdHJveWVkKCkge1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UuJGRlc3Ryb3koKVxuICAgICAgICB9LFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIFN2ZWx0ZUhvb2ssXG4gICAgfVxufVxuIiwgIlxuICAgICAgICBpbXBvcnQgKiBhcyBtb2R1bGUwIGZyb20gJy4uL3N2ZWx0ZS9BY2NvdW50QnV0dG9uLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMSBmcm9tICcuLi9zdmVsdGUvQXBwLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMiBmcm9tICcuLi9zdmVsdGUvQXBwSW5mby5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTMgZnJvbSAnLi4vc3ZlbHRlL0FwcFNrZWxldG9uLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlNCBmcm9tICcuLi9zdmVsdGUvQmFjay5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTUgZnJvbSAnLi4vc3ZlbHRlL0NsaWNrT3V0c2lkZUNsYXNzSGFuZGxlci5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTYgZnJvbSAnLi4vc3ZlbHRlL0NsaWVudE9ubHlTdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGU3IGZyb20gJy4uL3N2ZWx0ZS9Db25maXJtRGVsZXRpb25Nb2RhbC5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTggZnJvbSAnLi4vc3ZlbHRlL0RhdGFDbGVhcmVyLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlOSBmcm9tICcuLi9zdmVsdGUvRHJhZ0hhbmRsZS5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTEwIGZyb20gJy4uL3N2ZWx0ZS9FZGl0Rm9ybS5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTExIGZyb20gJy4uL3N2ZWx0ZS9FcnJvckxheW91dC5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTEyIGZyb20gJy4uL3N2ZWx0ZS9FeGFtcGxlU3ZlbHRlQ29tcG9uZW50LnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMTMgZnJvbSAnLi4vc3ZlbHRlL0hlYWRlci5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTE0IGZyb20gJy4uL3N2ZWx0ZS9JdGVtc0NvbnRhaW5lci5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTE1IGZyb20gJy4uL3N2ZWx0ZS9MaW5rLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMTYgZnJvbSAnLi4vc3ZlbHRlL0xpdmVWaWV3U29ja2V0LnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMTcgZnJvbSAnLi4vc3ZlbHRlL0xvZ28uc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUxOCBmcm9tICcuLi9zdmVsdGUvTW92ZVRvZG9NZW51LnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMTkgZnJvbSAnLi4vc3ZlbHRlL05ld0l0ZW1Gb3JtLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjAgZnJvbSAnLi4vc3ZlbHRlL09wdGlvbnNNZW51LnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjEgZnJvbSAnLi4vc3ZlbHRlL1Njcm9sbFBvc2l0aW9uUmVzdG9yZXIuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUyMiBmcm9tICcuLi9zdmVsdGUvU2VydmljZVdvcmtlci5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTIzIGZyb20gJy4uL3N2ZWx0ZS9TZXNzaW9uc0JhZGdlLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjQgZnJvbSAnLi4vc3ZlbHRlL1NoYXJlQnV0dG9uLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjUgZnJvbSAnLi4vc3ZlbHRlL1N0YXRlTWFuYWdlbWVudC5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTI2IGZyb20gJy4uL3N2ZWx0ZS9TdGlja3lIZWFkZXIuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUyNyBmcm9tICcuLi9zdmVsdGUvU3luY1N0YXR1c0JhZGdlLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjggZnJvbSAnLi4vc3ZlbHRlL1RoZW1lQnV0dG9uLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMjkgZnJvbSAnLi4vc3ZlbHRlL1RoZW1lQ2hvaWNlQnV0dG9uLnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMzAgZnJvbSAnLi4vc3ZlbHRlL1RoZW1lU3luY01hbmFnZXIuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUzMSBmcm9tICcuLi9zdmVsdGUvVG9hc3Quc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUzMiBmcm9tICcuLi9zdmVsdGUvVG9kb0FwcC5zdmVsdGUnO2ltcG9ydCAqIGFzIG1vZHVsZTMzIGZyb20gJy4uL3N2ZWx0ZS9Ub2RvQ2hlY2tMaXN0LnN2ZWx0ZSc7aW1wb3J0ICogYXMgbW9kdWxlMzQgZnJvbSAnLi4vc3ZlbHRlL1RvZG9MaXN0U2VsZWN0b3Iuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUzNSBmcm9tICcuLi9zdmVsdGUvVW5kb0J1dHRvbnMuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUzNiBmcm9tICcuLi9zdmVsdGUvVXBkYXRlQWxlcnQuc3ZlbHRlJztpbXBvcnQgKiBhcyBtb2R1bGUzNyBmcm9tICcuLi9zdmVsdGUvVmlzaWJpbGl0eUNoYW5nZVRyYWNrZXIuc3ZlbHRlJ1xuXG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBbbW9kdWxlMCxtb2R1bGUxLG1vZHVsZTIsbW9kdWxlMyxtb2R1bGU0LG1vZHVsZTUsbW9kdWxlNixtb2R1bGU3LG1vZHVsZTgsbW9kdWxlOSxtb2R1bGUxMCxtb2R1bGUxMSxtb2R1bGUxMixtb2R1bGUxMyxtb2R1bGUxNCxtb2R1bGUxNSxtb2R1bGUxNixtb2R1bGUxNyxtb2R1bGUxOCxtb2R1bGUxOSxtb2R1bGUyMCxtb2R1bGUyMSxtb2R1bGUyMixtb2R1bGUyMyxtb2R1bGUyNCxtb2R1bGUyNSxtb2R1bGUyNixtb2R1bGUyNyxtb2R1bGUyOCxtb2R1bGUyOSxtb2R1bGUzMCxtb2R1bGUzMSxtb2R1bGUzMixtb2R1bGUzMyxtb2R1bGUzNCxtb2R1bGUzNSxtb2R1bGUzNixtb2R1bGUzN107XG5cbiAgICAgICAgZXhwb3J0IGRlZmF1bHQgbW9kdWxlcztcbiAgICAgICAgZXhwb3J0IGNvbnN0IGZpbGVuYW1lcyA9IFsnLi4vc3ZlbHRlL0FjY291bnRCdXR0b24uc3ZlbHRlJywnLi4vc3ZlbHRlL0FwcC5zdmVsdGUnLCcuLi9zdmVsdGUvQXBwSW5mby5zdmVsdGUnLCcuLi9zdmVsdGUvQXBwU2tlbGV0b24uc3ZlbHRlJywnLi4vc3ZlbHRlL0JhY2suc3ZlbHRlJywnLi4vc3ZlbHRlL0NsaWNrT3V0c2lkZUNsYXNzSGFuZGxlci5zdmVsdGUnLCcuLi9zdmVsdGUvQ2xpZW50T25seVN0YXRlTWFuYWdlbWVudC5zdmVsdGUnLCcuLi9zdmVsdGUvQ29uZmlybURlbGV0aW9uTW9kYWwuc3ZlbHRlJywnLi4vc3ZlbHRlL0RhdGFDbGVhcmVyLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9EcmFnSGFuZGxlLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9FZGl0Rm9ybS5zdmVsdGUnLCcuLi9zdmVsdGUvRXJyb3JMYXlvdXQuc3ZlbHRlJywnLi4vc3ZlbHRlL0V4YW1wbGVTdmVsdGVDb21wb25lbnQuc3ZlbHRlJywnLi4vc3ZlbHRlL0hlYWRlci5zdmVsdGUnLCcuLi9zdmVsdGUvSXRlbXNDb250YWluZXIuc3ZlbHRlJywnLi4vc3ZlbHRlL0xpbmsuc3ZlbHRlJywnLi4vc3ZlbHRlL0xpdmVWaWV3U29ja2V0LnN2ZWx0ZScsJy4uL3N2ZWx0ZS9Mb2dvLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9Nb3ZlVG9kb01lbnUuc3ZlbHRlJywnLi4vc3ZlbHRlL05ld0l0ZW1Gb3JtLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9PcHRpb25zTWVudS5zdmVsdGUnLCcuLi9zdmVsdGUvU2Nyb2xsUG9zaXRpb25SZXN0b3Jlci5zdmVsdGUnLCcuLi9zdmVsdGUvU2VydmljZVdvcmtlci5zdmVsdGUnLCcuLi9zdmVsdGUvU2Vzc2lvbnNCYWRnZS5zdmVsdGUnLCcuLi9zdmVsdGUvU2hhcmVCdXR0b24uc3ZlbHRlJywnLi4vc3ZlbHRlL1N0YXRlTWFuYWdlbWVudC5zdmVsdGUnLCcuLi9zdmVsdGUvU3RpY2t5SGVhZGVyLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9TeW5jU3RhdHVzQmFkZ2Uuc3ZlbHRlJywnLi4vc3ZlbHRlL1RoZW1lQnV0dG9uLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9UaGVtZUNob2ljZUJ1dHRvbi5zdmVsdGUnLCcuLi9zdmVsdGUvVGhlbWVTeW5jTWFuYWdlci5zdmVsdGUnLCcuLi9zdmVsdGUvVG9hc3Quc3ZlbHRlJywnLi4vc3ZlbHRlL1RvZG9BcHAuc3ZlbHRlJywnLi4vc3ZlbHRlL1RvZG9DaGVja0xpc3Quc3ZlbHRlJywnLi4vc3ZlbHRlL1RvZG9MaXN0U2VsZWN0b3Iuc3ZlbHRlJywnLi4vc3ZlbHRlL1VuZG9CdXR0b25zLnN2ZWx0ZScsJy4uL3N2ZWx0ZS9VcGRhdGVBbGVydC5zdmVsdGUnLCcuLi9zdmVsdGUvVmlzaWJpbGl0eUNoYW5nZVRyYWNrZXIuc3ZlbHRlJ11cbiAgICAgICIsICIvKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9ICh4KSA9PiB4O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdGVtcGxhdGUgU1xuICogQHBhcmFtIHtUfSB0YXJcbiAqIEBwYXJhbSB7U30gc3JjXG4gKiBAcmV0dXJucyB7VCAmIFN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcblx0Ly8gQHRzLWlnbm9yZVxuXHRmb3IgKGNvbnN0IGsgaW4gc3JjKSB0YXJba10gPSBzcmNba107XG5cdHJldHVybiAvKiogQHR5cGUge1QgJiBTfSAqLyAodGFyKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90aGVuL2lzLXByb21pc2UvYmxvYi9tYXN0ZXIvaW5kZXguanNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIE1JVCBMaWNlbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS90aGVuL2lzLXByb21pc2UvYmxvYi9tYXN0ZXIvTElDRU5TRVxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBQcm9taXNlTGlrZTxhbnk+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuXHRyZXR1cm4gKFxuXHRcdCEhdmFsdWUgJiZcblx0XHQodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpICYmXG5cdFx0dHlwZW9mICgvKiogQHR5cGUge2FueX0gKi8gKHZhbHVlKS50aGVuKSA9PT0gJ2Z1bmN0aW9uJ1xuXHQpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gYWRkX2xvY2F0aW9uKGVsZW1lbnQsIGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhcikge1xuXHRlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG5cdFx0bG9jOiB7IGZpbGUsIGxpbmUsIGNvbHVtbiwgY2hhciB9XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW4oZm4pIHtcblx0cmV0dXJuIGZuKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG5cdHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gZm5zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG5cdGZucy5mb3JFYWNoKHJ1bik7XG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHRoaW5nXG4gKiBAcmV0dXJucyB7dGhpbmcgaXMgRnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuXHRyZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKiogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuXHRyZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoYSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHx8IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nO1xufVxuXG5sZXQgc3JjX3VybF9lcXVhbF9hbmNob3I7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnRfc3JjXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNyY191cmxfZXF1YWwoZWxlbWVudF9zcmMsIHVybCkge1xuXHRpZiAoZWxlbWVudF9zcmMgPT09IHVybCkgcmV0dXJuIHRydWU7XG5cdGlmICghc3JjX3VybF9lcXVhbF9hbmNob3IpIHtcblx0XHRzcmNfdXJsX2VxdWFsX2FuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0fVxuXHQvLyBUaGlzIGlzIGFjdHVhbGx5IGZhc3RlciB0aGFuIGRvaW5nIFVSTCguLikuaHJlZlxuXHRzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuXHRyZXR1cm4gZWxlbWVudF9zcmMgPT09IHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWY7XG59XG5cbi8qKiBAcGFyYW0ge3N0cmluZ30gc3Jjc2V0ICovXG5mdW5jdGlvbiBzcGxpdF9zcmNzZXQoc3Jjc2V0KSB7XG5cdHJldHVybiBzcmNzZXQuc3BsaXQoJywnKS5tYXAoKHNyYykgPT4gc3JjLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihCb29sZWFuKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MU291cmNlRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnR9IGVsZW1lbnRfc3Jjc2V0XG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZCB8IG51bGx9IHNyY3NldFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcmNzZXRfdXJsX2VxdWFsKGVsZW1lbnRfc3Jjc2V0LCBzcmNzZXQpIHtcblx0Y29uc3QgZWxlbWVudF91cmxzID0gc3BsaXRfc3Jjc2V0KGVsZW1lbnRfc3Jjc2V0LnNyY3NldCk7XG5cdGNvbnN0IHVybHMgPSBzcGxpdF9zcmNzZXQoc3Jjc2V0IHx8ICcnKTtcblxuXHRyZXR1cm4gKFxuXHRcdHVybHMubGVuZ3RoID09PSBlbGVtZW50X3VybHMubGVuZ3RoICYmXG5cdFx0dXJscy5ldmVyeShcblx0XHRcdChbdXJsLCB3aWR0aF0sIGkpID0+XG5cdFx0XHRcdHdpZHRoID09PSBlbGVtZW50X3VybHNbaV1bMV0gJiZcblx0XHRcdFx0Ly8gV2UgbmVlZCB0byB0ZXN0IGJvdGggd2F5cyBiZWNhdXNlIFZpdGUgd2lsbCBjcmVhdGUgYW4gYSBmdWxsIFVSTCB3aXRoXG5cdFx0XHRcdC8vIGBuZXcgVVJMKGFzc2V0LCBpbXBvcnQubWV0YS51cmwpLmhyZWZgIGZvciB0aGUgY2xpZW50IHdoZW4gYGJhc2U6ICcuLydgLCBhbmQgdGhlXG5cdFx0XHRcdC8vIHJlbGF0aXZlIFVSTHMgaW5zaWRlIHNyY3NldCBhcmUgbm90IGF1dG9tYXRpY2FsbHkgcmVzb2x2ZWQgdG8gYWJzb2x1dGUgVVJMcyBieVxuXHRcdFx0XHQvLyBicm93c2VycyAoaW4gY29udHJhc3QgdG8gaW1nLnNyYykuIFRoaXMgbWVhbnMgYm90aCBTU1IgYW5kIERPTSBjb2RlIGNvdWxkXG5cdFx0XHRcdC8vIGNvbnRhaW4gcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMcy5cblx0XHRcdFx0KHNyY191cmxfZXF1YWwoZWxlbWVudF91cmxzW2ldWzBdLCB1cmwpIHx8IHNyY191cmxfZXF1YWwodXJsLCBlbGVtZW50X3VybHNbaV1bMF0pKVxuXHRcdClcblx0KTtcbn1cblxuLyoqIEByZXR1cm5zIHtib29sZWFufSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG5cdHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiO1xufVxuXG4vKiogQHJldHVybnMge2Jvb2xlYW59ICovXG5leHBvcnQgZnVuY3Rpb24gaXNfZW1wdHkob2JqKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG5cdGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG5cdGlmIChzdG9yZSA9PSBudWxsKSB7XG5cdFx0Zm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcblx0XHRcdGNhbGxiYWNrKHVuZGVmaW5lZCk7XG5cdFx0fVxuXHRcdHJldHVybiBub29wO1xuXHR9XG5cdGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG5cdHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgZnJvbSBhIHN0b3JlIGJ5IHN1YnNjcmliaW5nIGFuZCBpbW1lZGlhdGVseSB1bnN1YnNjcmliaW5nLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1zdG9yZSNnZXRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vc3RvcmUvcHVibGljLmpzJykuUmVhZGFibGU8VD59IHN0b3JlXG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuXHRsZXQgdmFsdWU7XG5cdHN1YnNjcmliZShzdG9yZSwgKF8pID0+ICh2YWx1ZSA9IF8pKSgpO1xuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG5cdGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuXHRpZiAoZGVmaW5pdGlvbikge1xuXHRcdGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcblx0XHRyZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG5cdHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpIDogJCRzY29wZS5jdHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuXHRpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuXHRcdGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG5cdFx0aWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGxldHM7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGNvbnN0IG1lcmdlZCA9IFtdO1xuXHRcdFx0Y29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcblx0XHRcdFx0bWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWVyZ2VkO1xuXHRcdH1cblx0XHRyZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG5cdH1cblx0cmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfc2xvdF9iYXNlKFxuXHRzbG90LFxuXHRzbG90X2RlZmluaXRpb24sXG5cdGN0eCxcblx0JCRzY29wZSxcblx0c2xvdF9jaGFuZ2VzLFxuXHRnZXRfc2xvdF9jb250ZXh0X2ZuXG4pIHtcblx0aWYgKHNsb3RfY2hhbmdlcykge1xuXHRcdGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuXHRcdHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9zbG90KFxuXHRzbG90LFxuXHRzbG90X2RlZmluaXRpb24sXG5cdGN0eCxcblx0JCRzY29wZSxcblx0ZGlydHksXG5cdGdldF9zbG90X2NoYW5nZXNfZm4sXG5cdGdldF9zbG90X2NvbnRleHRfZm5cbikge1xuXHRjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuXHR1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pO1xufVxuXG4vKiogQHJldHVybnMge2FueVtdIHwgLTF9ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcblx0aWYgKCQkc2NvcGUuY3R4Lmxlbmd0aCA+IDMyKSB7XG5cdFx0Y29uc3QgZGlydHkgPSBbXTtcblx0XHRjb25zdCBsZW5ndGggPSAkJHNjb3BlLmN0eC5sZW5ndGggLyAzMjtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRkaXJ0eVtpXSA9IC0xO1xuXHRcdH1cblx0XHRyZXR1cm4gZGlydHk7XG5cdH1cblx0cmV0dXJuIC0xO1xufVxuXG4vKiogQHJldHVybnMge3t9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cdGZvciAoY29uc3QgayBpbiBwcm9wcykgaWYgKGtbMF0gIT09ICckJykgcmVzdWx0W2tdID0gcHJvcHNba107XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBAcmV0dXJucyB7e319ICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG5cdGNvbnN0IHJlc3QgPSB7fTtcblx0a2V5cyA9IG5ldyBTZXQoa2V5cyk7XG5cdGZvciAoY29uc3QgayBpbiBwcm9wcykgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpIHJlc3Rba10gPSBwcm9wc1trXTtcblx0cmV0dXJuIHJlc3Q7XG59XG5cbi8qKiBAcmV0dXJucyB7e319ICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblx0Zm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcblx0XHRyZXN1bHRba2V5XSA9IHRydWU7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIEByZXR1cm5zIHsodGhpczogYW55LCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKGZuKSB7XG5cdGxldCByYW4gPSBmYWxzZTtcblx0cmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0aWYgKHJhbikgcmV0dXJuO1xuXHRcdHJhbiA9IHRydWU7XG5cdFx0Zm4uY2FsbCh0aGlzLCAuLi5hcmdzKTtcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlKSB7XG5cdHN0b3JlLnNldCh2YWx1ZSk7XG5cdHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBjb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG5cdHJldHVybiBhY3Rpb25fcmVzdWx0ICYmIGlzX2Z1bmN0aW9uKGFjdGlvbl9yZXN1bHQuZGVzdHJveSkgPyBhY3Rpb25fcmVzdWx0LmRlc3Ryb3kgOiBub29wO1xufVxuXG4vKiogQHBhcmFtIHtudW1iZXIgfCBzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7W251bWJlciwgc3RyaW5nXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0X2Nzc191bml0KHZhbHVlKSB7XG5cdGNvbnN0IHNwbGl0ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5tYXRjaCgvXlxccyooLT9bXFxkLl0rKShbXlxcc10qKVxccyokLyk7XG5cdHJldHVybiBzcGxpdCA/IFtwYXJzZUZsb2F0KHNwbGl0WzFdKSwgc3BsaXRbMl0gfHwgJ3B4J10gOiBbLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSksICdweCddO1xufVxuXG5leHBvcnQgY29uc3QgY29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMgPSBbJycsIHRydWUsIDEsICd0cnVlJywgJ2NvbnRlbnRlZGl0YWJsZSddO1xuIiwgImltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG4vKiogQHR5cGUgeygpID0+IG51bWJlcn0gKi9cbmV4cG9ydCBsZXQgbm93ID0gaXNfY2xpZW50ID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogKCkgPT4gRGF0ZS5ub3coKTtcblxuZXhwb3J0IGxldCByYWYgPSBpc19jbGllbnQgPyAoY2IpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuXG4vLyB1c2VkIGludGVybmFsbHkgZm9yIHRlc3Rpbmdcbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfbm93KGZuKSB7XG5cdG5vdyA9IGZuO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3JhZihmbikge1xuXHRyYWYgPSBmbjtcbn1cbiIsICJpbXBvcnQgeyByYWYgfSBmcm9tICcuL2Vudmlyb25tZW50LmpzJztcblxuY29uc3QgdGFza3MgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5vd1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHJ1bl90YXNrcyhub3cpIHtcblx0dGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuXHRcdGlmICghdGFzay5jKG5vdykpIHtcblx0XHRcdHRhc2tzLmRlbGV0ZSh0YXNrKTtcblx0XHRcdHRhc2suZigpO1xuXHRcdH1cblx0fSk7XG5cdGlmICh0YXNrcy5zaXplICE9PSAwKSByYWYocnVuX3Rhc2tzKTtcbn1cblxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcblx0dGFza3MuY2xlYXIoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlRhc2tDYWxsYmFja30gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlRhc2t9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5UYXNrRW50cnl9ICovXG5cdGxldCB0YXNrO1xuXHRpZiAodGFza3Muc2l6ZSA9PT0gMCkgcmFmKHJ1bl90YXNrcyk7XG5cdHJldHVybiB7XG5cdFx0cHJvbWlzZTogbmV3IFByb21pc2UoKGZ1bGZpbGwpID0+IHtcblx0XHRcdHRhc2tzLmFkZCgodGFzayA9IHsgYzogY2FsbGJhY2ssIGY6IGZ1bGZpbGwgfSkpO1xuXHRcdH0pLFxuXHRcdGFib3J0KCkge1xuXHRcdFx0dGFza3MuZGVsZXRlKHRhc2spO1xuXHRcdH1cblx0fTtcbn1cbiIsICIvKiogQHR5cGUge3R5cGVvZiBnbG9iYWxUaGlzfSAqL1xuZXhwb3J0IGNvbnN0IGdsb2JhbHMgPVxuXHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuXHRcdD8gd2luZG93XG5cdFx0OiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcblx0XHQ/IGdsb2JhbFRoaXNcblx0XHQ6IC8vIEB0cy1pZ25vcmUgTm9kZSB0eXBpbmdzIGhhdmUgdGhpc1xuXHRcdCAgZ2xvYmFsO1xuIiwgImltcG9ydCB7IGdsb2JhbHMgfSBmcm9tICcuL2dsb2JhbHMuanMnO1xuXG4vKipcbiAqIFJlc2l6ZSBvYnNlcnZlciBzaW5nbGV0b24uXG4gKiBPbmUgbGlzdGVuZXIgcGVyIGVsZW1lbnQgb25seSFcbiAqIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vYS9jaHJvbWl1bS5vcmcvZy9ibGluay1kZXYvYy96Nmllbk9OVWI1QS9tL0Y1LVZjVVp0QkFBSlxuICovXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24ge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQHJlYWRvbmx5XG5cdCAqIEB0eXBlIHtXZWFrTWFwPEVsZW1lbnQsIGltcG9ydCgnLi9wcml2YXRlLmpzJykuTGlzdGVuZXI+fVxuXHQgKi9cblx0X2xpc3RlbmVycyA9ICdXZWFrTWFwJyBpbiBnbG9iYWxzID8gbmV3IFdlYWtNYXAoKSA6IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQHR5cGUge1Jlc2l6ZU9ic2VydmVyfVxuXHQgKi9cblx0X29ic2VydmVyID0gdW5kZWZpbmVkO1xuXG5cdC8qKiBAdHlwZSB7UmVzaXplT2JzZXJ2ZXJPcHRpb25zfSAqL1xuXHRvcHRpb25zO1xuXG5cdC8qKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyT3B0aW9uc30gb3B0aW9ucyAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkxpc3RlbmVyfSBsaXN0ZW5lclxuXHQgKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cblx0ICovXG5cdG9ic2VydmUoZWxlbWVudCwgbGlzdGVuZXIpIHtcblx0XHR0aGlzLl9saXN0ZW5lcnMuc2V0KGVsZW1lbnQsIGxpc3RlbmVyKTtcblx0XHR0aGlzLl9nZXRPYnNlcnZlcigpLm9ic2VydmUoZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShlbGVtZW50KTtcblx0XHRcdHRoaXMuX29ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTsgLy8gdGhpcyBsaW5lIGNhbiBwcm9iYWJseSBiZSByZW1vdmVkXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldE9ic2VydmVyKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHR0aGlzLl9vYnNlcnZlciA/P1xuXHRcdFx0KHRoaXMuX29ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0XHRcdGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuXHRcdFx0XHRcdFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uLmVudHJpZXMuc2V0KGVudHJ5LnRhcmdldCwgZW50cnkpO1xuXHRcdFx0XHRcdHRoaXMuX2xpc3RlbmVycy5nZXQoZW50cnkudGFyZ2V0KT8uKGVudHJ5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSkpXG5cdFx0KTtcblx0fVxufVxuXG4vLyBOZWVkcyB0byBiZSB3cml0dGVuIGxpa2UgdGhpcyB0byBwYXNzIHRoZSB0cmVlLXNoYWtlLXRlc3RcblJlc2l6ZU9ic2VydmVyU2luZ2xldG9uLmVudHJpZXMgPSAnV2Vha01hcCcgaW4gZ2xvYmFscyA/IG5ldyBXZWFrTWFwKCkgOiB1bmRlZmluZWQ7XG4iLCAiaW1wb3J0IHsgY29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMsIGhhc19wcm9wIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uIH0gZnJvbSAnLi9SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5qcyc7XG5cbi8vIFRyYWNrIHdoaWNoIG5vZGVzIGFyZSBjbGFpbWVkIGR1cmluZyBoeWRyYXRpb24uIFVuY2xhaW1lZCBub2RlcyBjYW4gdGhlbiBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuLy8gYXQgdGhlIGVuZCBvZiBoeWRyYXRpb24gd2l0aG91dCB0b3VjaGluZyB0aGUgcmVtYWluaW5nIG5vZGVzLlxubGV0IGlzX2h5ZHJhdGluZyA9IGZhbHNlO1xuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRfaHlkcmF0aW5nKCkge1xuXHRpc19oeWRyYXRpbmcgPSB0cnVlO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5kX2h5ZHJhdGluZygpIHtcblx0aXNfaHlkcmF0aW5nID0gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxvd1xuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hcbiAqIEBwYXJhbSB7KGluZGV4OiBudW1iZXIpID0+IG51bWJlcn0ga2V5XG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHVwcGVyX2JvdW5kKGxvdywgaGlnaCwga2V5LCB2YWx1ZSkge1xuXHQvLyBSZXR1cm4gZmlyc3QgaW5kZXggb2YgdmFsdWUgbGFyZ2VyIHRoYW4gaW5wdXQgdmFsdWUgaW4gdGhlIHJhbmdlIFtsb3csIGhpZ2gpXG5cdHdoaWxlIChsb3cgPCBoaWdoKSB7XG5cdFx0Y29uc3QgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSA+PiAxKTtcblx0XHRpZiAoa2V5KG1pZCkgPD0gdmFsdWUpIHtcblx0XHRcdGxvdyA9IG1pZCArIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZ2ggPSBtaWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBsb3c7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlRXh9IHRhcmdldFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGluaXRfaHlkcmF0ZSh0YXJnZXQpIHtcblx0aWYgKHRhcmdldC5oeWRyYXRlX2luaXQpIHJldHVybjtcblx0dGFyZ2V0Lmh5ZHJhdGVfaW5pdCA9IHRydWU7XG5cdC8vIFdlIGtub3cgdGhhdCBhbGwgY2hpbGRyZW4gaGF2ZSBjbGFpbV9vcmRlciB2YWx1ZXMgc2luY2UgdGhlIHVuY2xhaW1lZCBoYXZlIGJlZW4gZGV0YWNoZWQgaWYgdGFyZ2V0IGlzIG5vdCA8aGVhZD5cblxuXHRsZXQgY2hpbGRyZW4gPSAvKiogQHR5cGUge0FycmF5TGlrZTxOb2RlRXgyPn0gKi8gKHRhcmdldC5jaGlsZE5vZGVzKTtcblx0Ly8gSWYgdGFyZ2V0IGlzIDxoZWFkPiwgdGhlcmUgbWF5IGJlIGNoaWxkcmVuIHdpdGhvdXQgY2xhaW1fb3JkZXJcblx0aWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gJ0hFQUQnKSB7XG5cdFx0Y29uc3QgbXlfY2hpbGRyZW4gPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG5cdFx0XHRpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG15X2NoaWxkcmVuLnB1c2gobm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNoaWxkcmVuID0gbXlfY2hpbGRyZW47XG5cdH1cblx0Lypcblx0ICogUmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseS5cblx0ICogV2UgY2FuIHJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkgYnkgZmluZGluZyB0aGUgbG9uZ2VzdCBzdWJzZXF1ZW5jZSBvZlxuXHQgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuXHQgKiBzdWJzZXF1ZW5jZSBvZiBub2RlcyB0aGF0IGFyZSBjbGFpbWVkIGluIG9yZGVyIGNhbiBiZSBmb3VuZCBieVxuXHQgKiBjb21wdXRpbmcgdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiAuY2xhaW1fb3JkZXIgdmFsdWVzLlxuXHQgKlxuXHQgKiBUaGlzIGFsZ29yaXRobSBpcyBvcHRpbWFsIGluIGdlbmVyYXRpbmcgdGhlIGxlYXN0IGFtb3VudCBvZiByZW9yZGVyIG9wZXJhdGlvbnNcblx0ICogcG9zc2libGUuXG5cdCAqXG5cdCAqIFByb29mOlxuXHQgKiBXZSBrbm93IHRoYXQsIGdpdmVuIGEgc2V0IG9mIHJlb3JkZXJpbmcgb3BlcmF0aW9ucywgdGhlIG5vZGVzIHRoYXQgZG8gbm90IG1vdmVcblx0ICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG5cdCAqIG1lYW5pbmcgdGhhdCB0aGV5IG11c3QgYmUgYWxyZWFkeSBvcmRlcmVkIGFtb25nIGVhY2ggb3RoZXIuIFRodXMsIHRoZSBtYXhpbWFsXG5cdCAqIHNldCBvZiBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlIGZvcm0gYSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2UuXG5cdCAqL1xuXHQvLyBDb21wdXRlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuXHQvLyBtOiBzdWJzZXF1ZW5jZSBsZW5ndGggaiA9PiBpbmRleCBrIG9mIHNtYWxsZXN0IHZhbHVlIHRoYXQgZW5kcyBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGxlbmd0aCBqXG5cdGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcblx0Ly8gUHJlZGVjZXNzb3IgaW5kaWNlcyArIDFcblx0Y29uc3QgcCA9IG5ldyBJbnQzMkFycmF5KGNoaWxkcmVuLmxlbmd0aCk7XG5cdG1bMF0gPSAtMTtcblx0bGV0IGxvbmdlc3QgPSAwO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgY3VycmVudCA9IGNoaWxkcmVuW2ldLmNsYWltX29yZGVyO1xuXHRcdC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG5cdFx0Ly8gdXBwZXJfYm91bmQgcmV0dXJucyBmaXJzdCBncmVhdGVyIHZhbHVlLCBzbyB3ZSBzdWJ0cmFjdCBvbmVcblx0XHQvLyB3aXRoIGZhc3QgcGF0aCBmb3Igd2hlbiB3ZSBhcmUgb24gdGhlIGN1cnJlbnQgbG9uZ2VzdCBzdWJzZXF1ZW5jZVxuXHRcdGNvbnN0IHNlcV9sZW4gPVxuXHRcdFx0KGxvbmdlc3QgPiAwICYmIGNoaWxkcmVuW21bbG9uZ2VzdF1dLmNsYWltX29yZGVyIDw9IGN1cnJlbnRcblx0XHRcdFx0PyBsb25nZXN0ICsgMVxuXHRcdFx0XHQ6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIChpZHgpID0+IGNoaWxkcmVuW21baWR4XV0uY2xhaW1fb3JkZXIsIGN1cnJlbnQpKSAtIDE7XG5cdFx0cFtpXSA9IG1bc2VxX2xlbl0gKyAxO1xuXHRcdGNvbnN0IG5ld19sZW4gPSBzZXFfbGVuICsgMTtcblx0XHQvLyBXZSBjYW4gZ3VhcmFudGVlIHRoYXQgY3VycmVudCBpcyB0aGUgc21hbGxlc3QgdmFsdWUuIE90aGVyd2lzZSwgd2Ugd291bGQgaGF2ZSBnZW5lcmF0ZWQgYSBsb25nZXIgc2VxdWVuY2UuXG5cdFx0bVtuZXdfbGVuXSA9IGk7XG5cdFx0bG9uZ2VzdCA9IE1hdGgubWF4KG5ld19sZW4sIGxvbmdlc3QpO1xuXHR9XG5cdC8vIFRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgKGluaXRpYWxseSByZXZlcnNlZClcblxuXHQvKipcblx0ICogQHR5cGUge05vZGVFeDJbXX1cblx0ICovXG5cdGNvbnN0IGxpcyA9IFtdO1xuXHQvLyBUaGUgcmVzdCBvZiB0aGUgbm9kZXMsIG5vZGVzIHRoYXQgd2lsbCBiZSBtb3ZlZFxuXG5cdC8qKlxuXHQgKiBAdHlwZSB7Tm9kZUV4MltdfVxuXHQgKi9cblx0Y29uc3QgdG9fbW92ZSA9IFtdO1xuXHRsZXQgbGFzdCA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7XG5cdGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuXHRcdGxpcy5wdXNoKGNoaWxkcmVuW2N1ciAtIDFdKTtcblx0XHRmb3IgKDsgbGFzdCA+PSBjdXI7IGxhc3QtLSkge1xuXHRcdFx0dG9fbW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcblx0XHR9XG5cdFx0bGFzdC0tO1xuXHR9XG5cdGZvciAoOyBsYXN0ID49IDA7IGxhc3QtLSkge1xuXHRcdHRvX21vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG5cdH1cblx0bGlzLnJldmVyc2UoKTtcblx0Ly8gV2Ugc29ydCB0aGUgbm9kZXMgYmVpbmcgbW92ZWQgdG8gZ3VhcmFudGVlIHRoYXQgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIG1hdGNoZXMgdGhlIGNsYWltIG9yZGVyXG5cdHRvX21vdmUuc29ydCgoYSwgYikgPT4gYS5jbGFpbV9vcmRlciAtIGIuY2xhaW1fb3JkZXIpO1xuXHQvLyBGaW5hbGx5LCB3ZSBtb3ZlIHRoZSBub2Rlc1xuXHRmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b19tb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0d2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvX21vdmVbaV0uY2xhaW1fb3JkZXIgPj0gbGlzW2pdLmNsYWltX29yZGVyKSB7XG5cdFx0XHRqKys7XG5cdFx0fVxuXHRcdGNvbnN0IGFuY2hvciA9IGogPCBsaXMubGVuZ3RoID8gbGlzW2pdIDogbnVsbDtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHRvX21vdmVbaV0sIGFuY2hvcik7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcblx0dGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVfc2hlZXRfaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kX3N0eWxlcyh0YXJnZXQsIHN0eWxlX3NoZWV0X2lkLCBzdHlsZXMpIHtcblx0Y29uc3QgYXBwZW5kX3N0eWxlc190byA9IGdldF9yb290X2Zvcl9zdHlsZSh0YXJnZXQpO1xuXHRpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG5cdFx0Y29uc3Qgc3R5bGUgPSBlbGVtZW50KCdzdHlsZScpO1xuXHRcdHN0eWxlLmlkID0gc3R5bGVfc2hlZXRfaWQ7XG5cdFx0c3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG5cdFx0YXBwZW5kX3N0eWxlc2hlZXQoYXBwZW5kX3N0eWxlc190bywgc3R5bGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7U2hhZG93Um9vdCB8IERvY3VtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpIHtcblx0aWYgKCFub2RlKSByZXR1cm4gZG9jdW1lbnQ7XG5cdGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuXHRpZiAocm9vdCAmJiAvKiogQHR5cGUge1NoYWRvd1Jvb3R9ICovIChyb290KS5ob3N0KSB7XG5cdFx0cmV0dXJuIC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHJvb3QpO1xuXHR9XG5cdHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7Q1NTU3R5bGVTaGVldH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcblx0Y29uc3Qgc3R5bGVfZWxlbWVudCA9IGVsZW1lbnQoJ3N0eWxlJyk7XG5cdC8vIEZvciB0cmFuc2l0aW9ucyB0byB3b3JrIHdpdGhvdXQgJ3N0eWxlLXNyYzogdW5zYWZlLWlubGluZScgQ29udGVudCBTZWN1cml0eSBQb2xpY3ksXG5cdC8vIHRoZXNlIGVtcHR5IHRhZ3MgbmVlZCB0byBiZSBhbGxvd2VkIHdpdGggYSBoYXNoIGFzIGEgd29ya2Fyb3VuZCB1bnRpbCB3ZSBtb3ZlIHRvIHRoZSBXZWIgQW5pbWF0aW9ucyBBUEkuXG5cdC8vIFVzaW5nIHRoZSBoYXNoIGZvciB0aGUgZW1wdHkgc3RyaW5nIChmb3IgYW4gZW1wdHkgdGFnKSB3b3JrcyBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IFNhZmFyaS5cblx0Ly8gU28gYXMgYSB3b3JrYXJvdW5kIGZvciB0aGUgd29ya2Fyb3VuZCwgd2hlbiB3ZSBhcHBlbmQgZW1wdHkgc3R5bGUgdGFncyB3ZSBzZXQgdGhlaXIgY29udGVudCB0byAvKiBlbXB0eSAqLy5cblx0Ly8gVGhlIGhhc2ggJ3NoYTI1Ni05T2xOTzBETkVlYVZ6SEw0Ulp3Q0xzQkhBOFdCUTh0b0JwLzRGNVhWMm5jPScgd2lsbCB0aGVuIHdvcmsgZXZlbiBpbiBTYWZhcmkuXG5cdHN0eWxlX2VsZW1lbnQudGV4dENvbnRlbnQgPSAnLyogZW1wdHkgKi8nO1xuXHRhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuXHRyZXR1cm4gc3R5bGVfZWxlbWVudC5zaGVldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NoYWRvd1Jvb3QgfCBEb2N1bWVudH0gbm9kZVxuICogQHBhcmFtIHtIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICogQHJldHVybnMge0NTU1N0eWxlU2hlZXR9XG4gKi9cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXNoZWV0KG5vZGUsIHN0eWxlKSB7XG5cdGFwcGVuZCgvKiogQHR5cGUge0RvY3VtZW50fSAqLyAobm9kZSkuaGVhZCB8fCBub2RlLCBzdHlsZSk7XG5cdHJldHVybiBzdHlsZS5zaGVldDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVFeH0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGVFeH0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSkge1xuXHRpZiAoaXNfaHlkcmF0aW5nKSB7XG5cdFx0aW5pdF9oeWRyYXRlKHRhcmdldCk7XG5cdFx0aWYgKFxuXHRcdFx0dGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0KHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsICYmIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLnBhcmVudE5vZGUgIT09IHRhcmdldClcblx0XHQpIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG5cdFx0fVxuXHRcdC8vIFNraXAgbm9kZXMgb2YgdW5kZWZpbmVkIG9yZGVyaW5nXG5cdFx0d2hpbGUgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsICYmIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHRcdGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuXHRcdFx0Ly8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcblx0XHRcdGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcblx0XHR9XG5cdH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG5cdHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUV4fSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZUV4fSBub2RlXG4gKiBAcGFyYW0ge05vZGVFeH0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuXHRpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcblx0XHRhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG5cdH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPSBhbmNob3IpIHtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuXHRpZiAobm9kZS5wYXJlbnROb2RlKSB7XG5cdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuXHR9XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoaXRlcmF0aW9uc1tpXSkgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge2tleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcH0gS1xuICogQHBhcmFtIHtLfSBuYW1lXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7a2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwfSBLXG4gKiBAcGFyYW0ge0t9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpc1xuICogQHJldHVybnMge0hUTUxFbGVtZW50VGFnTmFtZU1hcFtLXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHRlbXBsYXRlIHtrZXlvZiBUfSBLXG4gKiBAcGFyYW0ge1R9IG9ialxuICogQHBhcmFtIHtLW119IGV4Y2x1ZGVcbiAqIEByZXR1cm5zIHtQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcblx0Y29uc3QgdGFyZ2V0ID0gLyoqIEB0eXBlIHtQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+fSAqLyAoe30pO1xuXHRmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG5cdFx0aWYgKFxuXHRcdFx0aGFzX3Byb3Aob2JqLCBrKSAmJlxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZXhjbHVkZS5pbmRleE9mKGspID09PSAtMVxuXHRcdCkge1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0dGFyZ2V0W2tdID0gb2JqW2tdO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7a2V5b2YgU1ZHRWxlbWVudFRhZ05hbWVNYXB9IEtcbiAqIEBwYXJhbSB7S30gbmFtZVxuICogQHJldHVybnMge1NWR0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFcbiAqIEByZXR1cm5zIHtUZXh0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dChkYXRhKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7VGV4dH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGFjZSgpIHtcblx0cmV0dXJuIHRleHQoJyAnKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7VGV4dH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eSgpIHtcblx0cmV0dXJuIHRleHQoJycpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJucyB7Q29tbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQoY29udGVudCkge1xuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gaGFuZGxlclxuICogQHBhcmFtIHtib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgfCBFdmVudExpc3RlbmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7KCkgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuXHRub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuXHRyZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IGFueX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7KGV2ZW50OiBhbnkpID0+IGFueX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHsoZXZlbnQ6IGFueSkgPT4gYW55fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0cmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHsoZXZlbnQ6IGFueSkgPT4gdm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxmKGZuKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0aWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcykgZm4uY2FsbCh0aGlzLCBldmVudCk7XG5cdH07XG59XG5cbi8qKlxuICogQHJldHVybnMgeyhldmVudDogYW55KSA9PiB2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRydXN0ZWQoZm4pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRpZiAoZXZlbnQuaXNUcnVzdGVkKSBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcblx0ZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuLyoqXG4gKiBMaXN0IG9mIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYWx3YXlzIGJlIHNldCB0aHJvdWdoIHRoZSBhdHRyIG1ldGhvZCxcbiAqIGJlY2F1c2UgdXBkYXRpbmcgdGhlbSB0aHJvdWdoIHRoZSBwcm9wZXJ0eSBzZXR0ZXIgZG9lc24ndCB3b3JrIHJlbGlhYmx5LlxuICogSW4gdGhlIGV4YW1wbGUgb2YgYHdpZHRoYC9gaGVpZ2h0YCwgdGhlIHByb2JsZW0gaXMgdGhhdCB0aGUgc2V0dGVyIG9ubHlcbiAqIGFjY2VwdHMgbnVtZXJpYyB2YWx1ZXMsIGJ1dCB0aGUgYXR0cmlidXRlIGNhbiBhbHNvIGJlIHNldCB0byBhIHN0cmluZyBsaWtlIGA1MCVgLlxuICogSWYgdGhpcyBsaXN0IGJlY29tZXMgdG9vIGJpZywgcmV0aGluayB0aGlzIGFwcHJvYWNoLlxuICovXG5jb25zdCBhbHdheXNfc2V0X3Rocm91Z2hfc2V0X2F0dHJpYnV0ZSA9IFsnd2lkdGgnLCAnaGVpZ2h0J107XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcGFyYW0ge3sgW3g6IHN0cmluZ106IHN0cmluZyB9fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcblx0Ly8gQHRzLWlnbm9yZVxuXHRjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcblx0Zm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuXHRcdGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuXHRcdFx0bm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcblx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuXHRcdFx0bm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnX192YWx1ZScpIHtcblx0XHRcdC8qKiBAdHlwZSB7YW55fSAqLyAobm9kZSkudmFsdWUgPSBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0fSBlbHNlIGlmIChcblx0XHRcdGRlc2NyaXB0b3JzW2tleV0gJiZcblx0XHRcdGRlc2NyaXB0b3JzW2tleV0uc2V0ICYmXG5cdFx0XHRhbHdheXNfc2V0X3Rocm91Z2hfc2V0X2F0dHJpYnV0ZS5pbmRleE9mKGtleSkgPT09IC0xXG5cdFx0KSB7XG5cdFx0XHRub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHt7IFt4OiBzdHJpbmddOiBzdHJpbmcgfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfc3ZnX2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuXHRmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0YXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBkYXRhX21hcFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YV9tYXAobm9kZSwgZGF0YV9tYXApIHtcblx0T2JqZWN0LmtleXMoZGF0YV9tYXApLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIGtleSwgZGF0YV9tYXBba2V5XSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG5cdGNvbnN0IGxvd2VyID0gcHJvcC50b0xvd2VyQ2FzZSgpOyAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBleGlzdGluZyBiZWhhdmlvciB3ZSBkbyBsb3dlcmNhc2UgZmlyc3Rcblx0aWYgKGxvd2VyIGluIG5vZGUpIHtcblx0XHRub2RlW2xvd2VyXSA9IHR5cGVvZiBub2RlW2xvd2VyXSA9PT0gJ2Jvb2xlYW4nICYmIHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcblx0fSBlbHNlIGlmIChwcm9wIGluIG5vZGUpIHtcblx0XHRub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0YXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZHluYW1pY19lbGVtZW50X2RhdGEodGFnKSB7XG5cdHJldHVybiAvLS8udGVzdCh0YWcpID8gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwIDogc2V0X2F0dHJpYnV0ZXM7XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0bm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfc3ZlbHRlX2RhdGFzZXQobm9kZSkge1xuXHRyZXR1cm4gbm9kZS5kYXRhc2V0LnN2ZWx0ZUg7XG59XG5cbi8qKlxuICogQHJldHVybnMge3Vua25vd25bXX0gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuXHRjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChncm91cFtpXS5jaGVja2VkKSB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG5cdH1cblx0aWYgKCFjaGVja2VkKSB7XG5cdFx0dmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuXHR9XG5cdHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnRbXX0gZ3JvdXBcbiAqIEByZXR1cm5zIHt7IHAoLi4uaW5wdXRzOiBIVE1MSW5wdXRFbGVtZW50W10pOiB2b2lkOyByKCk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0X2JpbmRpbmdfZ3JvdXAoZ3JvdXApIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfaW5wdXRzO1xuXHRyZXR1cm4ge1xuXHRcdC8qIHB1c2ggKi8gcCguLi5pbnB1dHMpIHtcblx0XHRcdF9pbnB1dHMgPSBpbnB1dHM7XG5cdFx0XHRfaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBncm91cC5wdXNoKGlucHV0KSk7XG5cdFx0fSxcblx0XHQvKiByZW1vdmUgKi8gcigpIHtcblx0XHRcdF9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKGlucHV0KSwgMSkpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzXG4gKiBAcmV0dXJucyB7eyB1KG5ld19pbmRleGVzOiBudW1iZXJbXSk6IHZvaWQ7IHAoLi4uaW5wdXRzOiBIVE1MSW5wdXRFbGVtZW50W10pOiB2b2lkOyByOiAoKSA9PiB2b2lkOyB9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9iaW5kaW5nX2dyb3VwX2R5bmFtaWMoZ3JvdXAsIGluZGV4ZXMpIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfZ3JvdXAgPSBnZXRfYmluZGluZ19ncm91cChncm91cCk7XG5cblx0LyoqXG5cdCAqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50W119ICovXG5cdGxldCBfaW5wdXRzO1xuXG5cdGZ1bmN0aW9uIGdldF9iaW5kaW5nX2dyb3VwKGdyb3VwKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRncm91cCA9IGdyb3VwW2luZGV4ZXNbaV1dID0gZ3JvdXBbaW5kZXhlc1tpXV0gfHwgW107XG5cdFx0fVxuXHRcdHJldHVybiBncm91cDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gcHVzaCgpIHtcblx0XHRfaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiBfZ3JvdXAucHVzaChpbnB1dCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiByZW1vdmUoKSB7XG5cdFx0X2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gX2dyb3VwLnNwbGljZShfZ3JvdXAuaW5kZXhPZihpbnB1dCksIDEpKTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdC8qIHVwZGF0ZSAqLyB1KG5ld19pbmRleGVzKSB7XG5cdFx0XHRpbmRleGVzID0gbmV3X2luZGV4ZXM7XG5cdFx0XHRjb25zdCBuZXdfZ3JvdXAgPSBnZXRfYmluZGluZ19ncm91cChncm91cCk7XG5cdFx0XHRpZiAobmV3X2dyb3VwICE9PSBfZ3JvdXApIHtcblx0XHRcdFx0cmVtb3ZlKCk7XG5cdFx0XHRcdF9ncm91cCA9IG5ld19ncm91cDtcblx0XHRcdFx0cHVzaCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0LyogcHVzaCAqLyBwKC4uLmlucHV0cykge1xuXHRcdFx0X2lucHV0cyA9IGlucHV0cztcblx0XHRcdHB1c2goKTtcblx0XHR9LFxuXHRcdC8qIHJlbW92ZSAqLyByOiByZW1vdmVcblx0fTtcbn1cblxuLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG5leHBvcnQgZnVuY3Rpb24gdG9fbnVtYmVyKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuXG4vKiogQHJldHVybnMge2FueVtdfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuXHRjb25zdCBhcnJheSA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG5cdH1cblx0cmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0NoaWxkTm9kZVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuXHRyZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gaW5pdF9jbGFpbV9pbmZvKG5vZGVzKSB7XG5cdGlmIChub2Rlcy5jbGFpbV9pbmZvID09PSB1bmRlZmluZWQpIHtcblx0XHRub2Rlcy5jbGFpbV9pbmZvID0geyBsYXN0X2luZGV4OiAwLCB0b3RhbF9jbGFpbWVkOiAwIH07XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge0NoaWxkTm9kZUV4fSBSXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHBhcmFtIHsobm9kZTogQ2hpbGROb2RlRXgpID0+IG5vZGUgaXMgUn0gcHJlZGljYXRlXG4gKiBAcGFyYW0geyhub2RlOiBDaGlsZE5vZGVFeCkgPT4gQ2hpbGROb2RlRXggfCB1bmRlZmluZWR9IHByb2Nlc3Nfbm9kZVxuICogQHBhcmFtIHsoKSA9PiBSfSBjcmVhdGVfbm9kZVxuICogQHBhcmFtIHtib29sZWFufSBkb250X3VwZGF0ZV9sYXN0X2luZGV4XG4gKiBAcmV0dXJucyB7Un1cbiAqL1xuZnVuY3Rpb24gY2xhaW1fbm9kZShub2RlcywgcHJlZGljYXRlLCBwcm9jZXNzX25vZGUsIGNyZWF0ZV9ub2RlLCBkb250X3VwZGF0ZV9sYXN0X2luZGV4ID0gZmFsc2UpIHtcblx0Ly8gVHJ5IHRvIGZpbmQgbm9kZXMgaW4gYW4gb3JkZXIgc3VjaCB0aGF0IHdlIGxlbmd0aGVuIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Vcblx0aW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcblx0Y29uc3QgcmVzdWx0X25vZGUgPSAoKCkgPT4ge1xuXHRcdC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuXHRcdGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXg7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXHRcdFx0aWYgKHByZWRpY2F0ZShub2RlKSkge1xuXHRcdFx0XHRjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3Nfbm9kZShub2RlKTtcblx0XHRcdFx0aWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRub2Rlcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bm9kZXNbaV0gPSByZXBsYWNlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWRvbnRfdXBkYXRlX2xhc3RfaW5kZXgpIHtcblx0XHRcdFx0XHRub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcblx0XHQvLyBXZSBpdGVyYXRlIGluIHJldmVyc2Ugc28gdGhhdCB3ZSBkb24ndCBnbyB0b28gZmFyIGJhY2tcblx0XHRmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblx0XHRcdGlmIChwcmVkaWNhdGUobm9kZSkpIHtcblx0XHRcdFx0Y29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzX25vZGUobm9kZSk7XG5cdFx0XHRcdGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0bm9kZXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFkb250X3VwZGF0ZV9sYXN0X2luZGV4KSB7XG5cdFx0XHRcdFx0bm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcblx0XHRcdFx0fSBlbHNlIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Ly8gU2luY2Ugd2Ugc3BsaWNlZCBiZWZvcmUgdGhlIGxhc3RfaW5kZXgsIHdlIGRlY3JlYXNlIGl0XG5cdFx0XHRcdFx0bm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIElmIHdlIGNhbid0IGZpbmQgYW55IG1hdGNoaW5nIG5vZGUsIHdlIGNyZWF0ZSBhIG5ldyBvbmVcblx0XHRyZXR1cm4gY3JlYXRlX25vZGUoKTtcblx0fSkoKTtcblx0cmVzdWx0X25vZGUuY2xhaW1fb3JkZXIgPSBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQ7XG5cdG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuXHRyZXR1cm4gcmVzdWx0X25vZGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGlsZE5vZGVBcnJheX0gbm9kZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9fSBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0geyhuYW1lOiBzdHJpbmcpID0+IEVsZW1lbnQgfCBTVkdFbGVtZW50fSBjcmVhdGVfZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnQgfCBTVkdFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGNyZWF0ZV9lbGVtZW50KSB7XG5cdHJldHVybiBjbGFpbV9ub2RlKFxuXHRcdG5vZGVzLFxuXHRcdC8qKiBAcmV0dXJucyB7bm9kZSBpcyBFbGVtZW50IHwgU1ZHRWxlbWVudH0gKi9cblx0XHQobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSxcblx0XHQvKiogQHBhcmFtIHtFbGVtZW50fSBub2RlICovXG5cdFx0KG5vZGUpID0+IHtcblx0XHRcdGNvbnN0IHJlbW92ZSA9IFtdO1xuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzW2pdO1xuXHRcdFx0XHRpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG5cdFx0XHRcdFx0cmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZW1vdmUuZm9yRWFjaCgodikgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdCgpID0+IGNyZWF0ZV9lbGVtZW50KG5hbWUpXG5cdCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGlsZE5vZGVBcnJheX0gbm9kZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7RWxlbWVudCB8IFNWR0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG5cdHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfX0gYXR0cmlidXRlc1xuICogQHJldHVybnMge0VsZW1lbnQgfCBTVkdFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhaW1fc3ZnX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcblx0cmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnX2VsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hpbGROb2RlQXJyYXl9IG5vZGVzXG4gKiBAcmV0dXJucyB7VGV4dH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltX3RleHQobm9kZXMsIGRhdGEpIHtcblx0cmV0dXJuIGNsYWltX25vZGUoXG5cdFx0bm9kZXMsXG5cdFx0LyoqIEByZXR1cm5zIHtub2RlIGlzIFRleHR9ICovXG5cdFx0KG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDMsXG5cdFx0LyoqIEBwYXJhbSB7VGV4dH0gbm9kZSAqL1xuXHRcdChub2RlKSA9PiB7XG5cdFx0XHRjb25zdCBkYXRhX3N0ciA9ICcnICsgZGF0YTtcblx0XHRcdGlmIChub2RlLmRhdGEuc3RhcnRzV2l0aChkYXRhX3N0cikpIHtcblx0XHRcdFx0aWYgKG5vZGUuZGF0YS5sZW5ndGggIT09IGRhdGFfc3RyLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlLnNwbGl0VGV4dChkYXRhX3N0ci5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlLmRhdGEgPSBkYXRhX3N0cjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCgpID0+IHRleHQoZGF0YSksXG5cdFx0dHJ1ZSAvLyBUZXh0IG5vZGVzIHNob3VsZCBub3QgdXBkYXRlIGxhc3QgaW5kZXggc2luY2UgaXQgaXMgbGlrZWx5IG5vdCB3b3J0aCBpdCB0byBlbGltaW5hdGUgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBhY3R1YWwgZWxlbWVudHNcblx0KTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7VGV4dH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9zcGFjZShub2Rlcykge1xuXHRyZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoaWxkTm9kZUFycmF5fSBub2Rlc1xuICogQHJldHVybnMge0NvbW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9jb21tZW50KG5vZGVzLCBkYXRhKSB7XG5cdHJldHVybiBjbGFpbV9ub2RlKFxuXHRcdG5vZGVzLFxuXHRcdC8qKiBAcmV0dXJucyB7bm9kZSBpcyBDb21tZW50fSAqL1xuXHRcdChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSA4LFxuXHRcdC8qKiBAcGFyYW0ge0NvbW1lbnR9IG5vZGUgKi9cblx0XHQobm9kZSkgPT4ge1xuXHRcdFx0bm9kZS5kYXRhID0gJycgKyBkYXRhO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdCgpID0+IGNvbW1lbnQoZGF0YSksXG5cdFx0dHJ1ZVxuXHQpO1xufVxuXG5mdW5jdGlvbiBnZXRfY29tbWVudF9pZHgobm9kZXMsIHRleHQsIHN0YXJ0KSB7XG5cdGZvciAobGV0IGkgPSBzdGFydDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0Y29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXHRcdGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLyAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKSA9PT0gdGV4dCkge1xuXHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3N2Z1xuICogQHJldHVybnMge0h0bWxUYWdIeWRyYXRpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2RlcywgaXNfc3ZnKSB7XG5cdC8vIGZpbmQgaHRtbCBvcGVuaW5nIHRhZ1xuXHRjb25zdCBzdGFydF9pbmRleCA9IGdldF9jb21tZW50X2lkeChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG5cdGNvbnN0IGVuZF9pbmRleCA9IGdldF9jb21tZW50X2lkeChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4ICsgMSk7XG5cdGlmIChzdGFydF9pbmRleCA9PT0gLTEgfHwgZW5kX2luZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihpc19zdmcpO1xuXHR9XG5cblx0aW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcblx0Y29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCAtIHN0YXJ0X2luZGV4ICsgMSk7XG5cdGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG5cdGRldGFjaChodG1sX3RhZ19ub2Rlc1todG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxXSk7XG5cdGNvbnN0IGNsYWltZWRfbm9kZXMgPSBodG1sX3RhZ19ub2Rlcy5zbGljZSgxLCBodG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxKTtcblx0aWYgKGNsYWltZWRfbm9kZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKGlzX3N2Zyk7XG5cdH1cblx0Zm9yIChjb25zdCBuIG9mIGNsYWltZWRfbm9kZXMpIHtcblx0XHRuLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuXHRcdG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuXHR9XG5cdHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihpc19zdmcsIGNsYWltZWRfbm9kZXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VGV4dH0gdGV4dFxuICogQHBhcmFtIHt1bmtub3dufSBkYXRhXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcblx0ZGF0YSA9ICcnICsgZGF0YTtcblx0aWYgKHRleHQuZGF0YSA9PT0gZGF0YSkgcmV0dXJuO1xuXHR0ZXh0LmRhdGEgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGRhdGEpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VGV4dH0gdGV4dFxuICogQHBhcmFtIHt1bmtub3dufSBkYXRhXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9kYXRhX2NvbnRlbnRlZGl0YWJsZSh0ZXh0LCBkYXRhKSB7XG5cdGRhdGEgPSAnJyArIGRhdGE7XG5cdGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSkgcmV0dXJuO1xuXHR0ZXh0LmRhdGEgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGRhdGEpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VGV4dH0gdGV4dFxuICogQHBhcmFtIHt1bmtub3dufSBkYXRhXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cl92YWx1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9tYXliZV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSwgYXR0cl92YWx1ZSkge1xuXHRpZiAofmNvbnRlbnRlZGl0YWJsZV90cnV0aHlfdmFsdWVzLmluZGV4T2YoYXR0cl92YWx1ZSkpIHtcblx0XHRzZXRfZGF0YV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSk7XG5cdH0gZWxzZSB7XG5cdFx0c2V0X2RhdGEodGV4dCwgZGF0YSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG5cdGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2lucHV0X3R5cGUoaW5wdXQsIHR5cGUpIHtcblx0dHJ5IHtcblx0XHRpbnB1dC50eXBlID0gdHlwZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGRvIG5vdGhpbmdcblx0fVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG5cdH0gZWxzZSB7XG5cdFx0bm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyAnaW1wb3J0YW50JyA6ICcnKTtcblx0fVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSwgbW91bnRpbmcpIHtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuXHRcdGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcblx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdGlmICghbW91bnRpbmcgfHwgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gLTE7IC8vIG5vIG9wdGlvbiBzaG91bGQgYmUgc2VsZWN0ZWRcblx0fVxufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuXHRcdG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuXHRjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKTtcblx0cmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcblx0cmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCAob3B0aW9uKSA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcblxuLyoqXG4gKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbmxldCBjcm9zc29yaWdpbjtcblxuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19jcm9zc29yaWdpbigpIHtcblx0aWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcblx0XHRjcm9zc29yaWdpbiA9IGZhbHNlO1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuXHRcdFx0XHR2b2lkIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNyb3Nzb3JpZ2luID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNyb3Nzb3JpZ2luO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gZm5cbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkX2lmcmFtZV9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcblx0Y29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXHRpZiAoY29tcHV0ZWRfc3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG5cdFx0bm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdH1cblx0Y29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG5cdGlmcmFtZS5zZXRBdHRyaWJ1dGUoXG5cdFx0J3N0eWxlJyxcblx0XHQnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcblx0XHRcdCdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnXG5cdCk7XG5cdGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblx0aWZyYW1lLnRhYkluZGV4ID0gLTE7XG5cdGNvbnN0IGNyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW4oKTtcblxuXHQvKipcblx0ICogQHR5cGUgeygpID0+IHZvaWR9XG5cdCAqL1xuXHRsZXQgdW5zdWJzY3JpYmU7XG5cdGlmIChjcm9zc29yaWdpbikge1xuXHRcdGlmcmFtZS5zcmMgPSBcImRhdGE6dGV4dC9odG1sLDxzY3JpcHQ+b25yZXNpemU9ZnVuY3Rpb24oKXtwYXJlbnQucG9zdE1lc3NhZ2UoMCwnKicpfTwvc2NyaXB0PlwiO1xuXHRcdHVuc3Vic2NyaWJlID0gbGlzdGVuKFxuXHRcdFx0d2luZG93LFxuXHRcdFx0J21lc3NhZ2UnLFxuXHRcdFx0LyoqIEBwYXJhbSB7TWVzc2FnZUV2ZW50fSBldmVudCAqLyAoZXZlbnQpID0+IHtcblx0XHRcdFx0aWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpIGZuKCk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fSBlbHNlIHtcblx0XHRpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcblx0XHRpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuXHRcdFx0dW5zdWJzY3JpYmUgPSBsaXN0ZW4oaWZyYW1lLmNvbnRlbnRXaW5kb3csICdyZXNpemUnLCBmbik7XG5cdFx0XHQvLyBtYWtlIHN1cmUgYW4gaW5pdGlhbCByZXNpemUgZXZlbnQgaXMgZmlyZWQgX2FmdGVyXyB0aGUgaWZyYW1lIGlzIGxvYWRlZCAod2hpY2ggaXMgYXN5bmNocm9ub3VzKVxuXHRcdFx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzQyMzNcblx0XHRcdGZuKCk7XG5cdFx0fTtcblx0fVxuXHRhcHBlbmQobm9kZSwgaWZyYW1lKTtcblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoY3Jvc3NvcmlnaW4pIHtcblx0XHRcdHVuc3Vic2NyaWJlKCk7XG5cdFx0fSBlbHNlIGlmICh1bnN1YnNjcmliZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuXHRcdFx0dW5zdWJzY3JpYmUoKTtcblx0XHR9XG5cdFx0ZGV0YWNoKGlmcmFtZSk7XG5cdH07XG59XG5leHBvcnQgY29uc3QgcmVzaXplX29ic2VydmVyX2NvbnRlbnRfYm94ID0gLyogQF9fUFVSRV9fICovIG5ldyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbih7XG5cdGJveDogJ2NvbnRlbnQtYm94J1xufSk7XG5leHBvcnQgY29uc3QgcmVzaXplX29ic2VydmVyX2JvcmRlcl9ib3ggPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uKHtcblx0Ym94OiAnYm9yZGVyLWJveCdcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9kZXZpY2VfcGl4ZWxfY29udGVudF9ib3ggPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uKFxuXHR7IGJveDogJ2RldmljZS1waXhlbC1jb250ZW50LWJveCcgfVxuKTtcbmV4cG9ydCB7IFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uIH07XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlX2NsYXNzKGVsZW1lbnQsIG5hbWUsIHRvZ2dsZSkge1xuXHQvLyBUaGUgYCEhYCBpcyByZXF1aXJlZCBiZWNhdXNlIGFuIGB1bmRlZmluZWRgIGZsYWcgbWVhbnMgZmxpcHBpbmcgdGhlIGN1cnJlbnQgc3RhdGUuXG5cdGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShuYW1lLCAhIXRvZ2dsZSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge1R9IFtkZXRhaWxdXG4gKiBAcGFyYW0ge3sgYnViYmxlcz86IGJvb2xlYW4sIGNhbmNlbGFibGU/OiBib29sZWFuIH19IFtvcHRpb25zXVxuICogQHJldHVybnMge0N1c3RvbUV2ZW50PFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCwgeyBidWJibGVzID0gZmFsc2UsIGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pIHtcblx0cmV0dXJuIG5ldyBDdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbCwgYnViYmxlcywgY2FuY2VsYWJsZSB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHJldHVybnMge0NoaWxkTm9kZUFycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG5cdHJldHVybiBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVJZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaGVhZFxuICogQHJldHVybnMge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGVhZF9zZWxlY3Rvcihub2RlSWQsIGhlYWQpIHtcblx0Y29uc3QgcmVzdWx0ID0gW107XG5cdGxldCBzdGFydGVkID0gMDtcblx0Zm9yIChjb25zdCBub2RlIG9mIGhlYWQuY2hpbGROb2Rlcykge1xuXHRcdGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLykge1xuXHRcdFx0Y29uc3QgY29tbWVudCA9IG5vZGUudGV4dENvbnRlbnQudHJpbSgpO1xuXHRcdFx0aWYgKGNvbW1lbnQgPT09IGBIRUFEXyR7bm9kZUlkfV9FTkRgKSB7XG5cdFx0XHRcdHN0YXJ0ZWQgLT0gMTtcblx0XHRcdFx0cmVzdWx0LnB1c2gobm9kZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbW1lbnQgPT09IGBIRUFEXyR7bm9kZUlkfV9TVEFSVGApIHtcblx0XHRcdFx0c3RhcnRlZCArPSAxO1xuXHRcdFx0XHRyZXN1bHQucHVzaChub2RlKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHN0YXJ0ZWQgPiAwKSB7XG5cdFx0XHRyZXN1bHQucHVzaChub2RlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cbi8qKiAqL1xuZXhwb3J0IGNsYXNzIEh0bWxUYWcge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICogQGRlZmF1bHQgZmFsc2Vcblx0ICovXG5cdGlzX3N2ZyA9IGZhbHNlO1xuXHQvKiogcGFyZW50IGZvciBjcmVhdGluZyBub2RlICovXG5cdGUgPSB1bmRlZmluZWQ7XG5cdC8qKiBodG1sIHRhZyBub2RlcyAqL1xuXHRuID0gdW5kZWZpbmVkO1xuXHQvKiogdGFyZ2V0ICovXG5cdHQgPSB1bmRlZmluZWQ7XG5cdC8qKiBhbmNob3IgKi9cblx0YSA9IHVuZGVmaW5lZDtcblx0Y29uc3RydWN0b3IoaXNfc3ZnID0gZmFsc2UpIHtcblx0XHR0aGlzLmlzX3N2ZyA9IGlzX3N2Zztcblx0XHR0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0YyhodG1sKSB7XG5cdFx0dGhpcy5oKGh0bWwpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBTVkdFbGVtZW50fSB0YXJnZXRcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudCB8IFNWR0VsZW1lbnR9IGFuY2hvclxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG5cdFx0aWYgKCF0aGlzLmUpIHtcblx0XHRcdGlmICh0aGlzLmlzX3N2Zylcblx0XHRcdFx0dGhpcy5lID0gc3ZnX2VsZW1lbnQoLyoqIEB0eXBlIHtrZXlvZiBTVkdFbGVtZW50VGFnTmFtZU1hcH0gKi8gKHRhcmdldC5ub2RlTmFtZSkpO1xuXHRcdFx0LyoqICM3MzY0ICB0YXJnZXQgZm9yIDx0ZW1wbGF0ZT4gbWF5IGJlIHByb3ZpZGVkIGFzICNkb2N1bWVudC1mcmFnbWVudCgxMSkgKi8gZWxzZVxuXHRcdFx0XHR0aGlzLmUgPSBlbGVtZW50KFxuXHRcdFx0XHRcdC8qKiBAdHlwZSB7a2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwfSAqLyAoXG5cdFx0XHRcdFx0XHR0YXJnZXQubm9kZVR5cGUgPT09IDExID8gJ1RFTVBMQVRFJyA6IHRhcmdldC5ub2RlTmFtZVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdHRoaXMudCA9XG5cdFx0XHRcdHRhcmdldC50YWdOYW1lICE9PSAnVEVNUExBVEUnXG5cdFx0XHRcdFx0PyB0YXJnZXRcblx0XHRcdFx0XHQ6IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKHRhcmdldCkuY29udGVudDtcblx0XHRcdHRoaXMuYyhodG1sKTtcblx0XHR9XG5cdFx0dGhpcy5pKGFuY2hvcik7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRoKGh0bWwpIHtcblx0XHR0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcblx0XHR0aGlzLm4gPSBBcnJheS5mcm9tKFxuXHRcdFx0dGhpcy5lLm5vZGVOYW1lID09PSAnVEVNUExBVEUnID8gdGhpcy5lLmNvbnRlbnQuY2hpbGROb2RlcyA6IHRoaXMuZS5jaGlsZE5vZGVzXG5cdFx0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0aShhbmNob3IpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0aW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdHAoaHRtbCkge1xuXHRcdHRoaXMuZCgpO1xuXHRcdHRoaXMuaChodG1sKTtcblx0XHR0aGlzLmkodGhpcy5hKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZCgpIHtcblx0XHR0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBIdG1sVGFnSHlkcmF0aW9uIGV4dGVuZHMgSHRtbFRhZyB7XG5cdC8qKiBAdHlwZSB7RWxlbWVudFtdfSBoeWRyYXRpb24gY2xhaW1lZCBub2RlcyAqL1xuXHRsID0gdW5kZWZpbmVkO1xuXG5cdGNvbnN0cnVjdG9yKGlzX3N2ZyA9IGZhbHNlLCBjbGFpbWVkX25vZGVzKSB7XG5cdFx0c3VwZXIoaXNfc3ZnKTtcblx0XHR0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuXHRcdHRoaXMubCA9IGNsYWltZWRfbm9kZXM7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRjKGh0bWwpIHtcblx0XHRpZiAodGhpcy5sKSB7XG5cdFx0XHR0aGlzLm4gPSB0aGlzLmw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN1cGVyLmMoaHRtbCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRpKGFuY2hvcikge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRpbnNlcnRfaHlkcmF0aW9uKHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TmFtZWROb2RlTWFwfSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7e319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdHRyaWJ1dGVfdG9fb2JqZWN0KGF0dHJpYnV0ZXMpIHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cdGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcblx0XHRyZXN1bHRbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGVzY2FwZWQgPSB7XG5cdCdcIic6ICcmcXVvdDsnLFxuXHQnJic6ICcmYW1wOycsXG5cdCc8JzogJyZsdDsnXG59O1xuXG5jb25zdCByZWdleF9hdHRyaWJ1dGVfY2hhcmFjdGVyc190b19lc2NhcGUgPSAvW1wiJjxdL2c7XG5cbi8qKlxuICogTm90ZSB0aGF0IHRoZSBhdHRyaWJ1dGUgaXRzZWxmIHNob3VsZCBiZSBzdXJyb3VuZGVkIGluIGRvdWJsZSBxdW90ZXNcbiAqIEBwYXJhbSB7YW55fSBhdHRyaWJ1dGVcbiAqL1xuZnVuY3Rpb24gZXNjYXBlX2F0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcblx0cmV0dXJuIFN0cmluZyhhdHRyaWJ1dGUpLnJlcGxhY2UocmVnZXhfYXR0cmlidXRlX2NoYXJhY3RlcnNfdG9fZXNjYXBlLCAobWF0Y2gpID0+IGVzY2FwZWRbbWF0Y2hdKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeV9zcHJlYWQoYXR0cmlidXRlcykge1xuXHRsZXQgc3RyID0gJyAnO1xuXHRmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0aWYgKGF0dHJpYnV0ZXNba2V5XSAhPSBudWxsKSB7XG5cdFx0XHRzdHIgKz0gYCR7a2V5fT1cIiR7ZXNjYXBlX2F0dHJpYnV0ZShhdHRyaWJ1dGVzW2tleV0pfVwiIGA7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7e319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKGVsZW1lbnQpIHtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cdGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKFxuXHRcdC8qKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgKi8gKG5vZGUpID0+IHtcblx0XHRcdHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG5cdFx0fVxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoY29tcG9uZW50LCBwcm9wcykge1xuXHRyZXR1cm4gbmV3IGNvbXBvbmVudChwcm9wcyk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge05vZGUgJiB7XG4gKiBcdGNsYWltX29yZGVyPzogbnVtYmVyO1xuICogXHRoeWRyYXRlX2luaXQ/OiB0cnVlO1xuICogXHRhY3R1YWxfZW5kX2NoaWxkPzogTm9kZUV4O1xuICogXHRjaGlsZE5vZGVzOiBOb2RlTGlzdE9mPE5vZGVFeD47XG4gKiB9fSBOb2RlRXhcbiAqL1xuXG4vKiogQHR5cGVkZWYge0NoaWxkTm9kZSAmIE5vZGVFeH0gQ2hpbGROb2RlRXggKi9cblxuLyoqIEB0eXBlZGVmIHtOb2RlRXggJiB7IGNsYWltX29yZGVyOiBudW1iZXIgfX0gTm9kZUV4MiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtDaGlsZE5vZGVFeFtdICYge1xuICogXHRjbGFpbV9pbmZvPzoge1xuICogXHRcdGxhc3RfaW5kZXg6IG51bWJlcjtcbiAqIFx0XHR0b3RhbF9jbGFpbWVkOiBudW1iZXI7XG4gKiBcdH07XG4gKiB9fSBDaGlsZE5vZGVBcnJheVxuICovXG4iLCAiaW1wb3J0IHsgYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQsIGRldGFjaCwgZ2V0X3Jvb3RfZm9yX3N0eWxlIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgcmFmIH0gZnJvbSAnLi9lbnZpcm9ubWVudC5qcyc7XG5cbi8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGZvciBtdWx0aXBsZSBkb2N1bWVudHMgYmVjYXVzZSBhIFN2ZWx0ZSBhcHBsaWNhdGlvbiBjb3VsZCBhbHNvIGNvbnRhaW4gaWZyYW1lc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMzYyNFxuLyoqIEB0eXBlIHtNYXA8RG9jdW1lbnQgfCBTaGFkb3dSb290LCBpbXBvcnQoJy4vcHJpdmF0ZS5kLnRzJykuU3R5bGVJbmZvcm1hdGlvbj59ICovXG5jb25zdCBtYW5hZ2VkX3N0eWxlcyA9IG5ldyBNYXAoKTtcblxubGV0IGFjdGl2ZSA9IDA7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG5cdGxldCBoYXNoID0gNTM4MTtcblx0bGV0IGkgPSBzdHIubGVuZ3RoO1xuXHR3aGlsZSAoaS0tKSBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcblx0cmV0dXJuIGhhc2ggPj4+IDA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEb2N1bWVudCB8IFNoYWRvd1Jvb3R9IGRvY1xuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcmV0dXJucyB7eyBzdHlsZXNoZWV0OiBhbnk7IHJ1bGVzOiB7fTsgfX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSkge1xuXHRjb25zdCBpbmZvID0geyBzdHlsZXNoZWV0OiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSwgcnVsZXM6IHt9IH07XG5cdG1hbmFnZWRfc3R5bGVzLnNldChkb2MsIGluZm8pO1xuXHRyZXR1cm4gaW5mbztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQgJiBFbGVtZW50Q1NTSW5saW5lU3R5bGV9IG5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqIEBwYXJhbSB7KHQ6IG51bWJlcikgPT4gbnVtYmVyfSBlYXNlXG4gKiBAcGFyYW0geyh0OiBudW1iZXIsIHU6IG51bWJlcikgPT4gc3RyaW5nfSBmblxuICogQHBhcmFtIHtudW1iZXJ9IHVpZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9ydWxlKG5vZGUsIGEsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzZSwgZm4sIHVpZCA9IDApIHtcblx0Y29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuXHRsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuXHRmb3IgKGxldCBwID0gMDsgcCA8PSAxOyBwICs9IHN0ZXApIHtcblx0XHRjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuXHRcdGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG5cdH1cblx0Y29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XFxufWA7XG5cdGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuXHRjb25zdCBkb2MgPSBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSk7XG5cdGNvbnN0IHsgc3R5bGVzaGVldCwgcnVsZXMgfSA9IG1hbmFnZWRfc3R5bGVzLmdldChkb2MpIHx8IGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpO1xuXHRpZiAoIXJ1bGVzW25hbWVdKSB7XG5cdFx0cnVsZXNbbmFtZV0gPSB0cnVlO1xuXHRcdHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG5cdH1cblx0Y29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG5cdG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7XG5cdFx0YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnXG5cdH0ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcblx0YWN0aXZlICs9IDE7XG5cdHJldHVybiBuYW1lO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG5cdGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcblx0Y29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihcblx0XHRuYW1lXG5cdFx0XHQ/IChhbmltKSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cblx0XHRcdDogKGFuaW0pID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuXHQpO1xuXHRjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG5cdGlmIChkZWxldGVkKSB7XG5cdFx0bm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG5cdFx0YWN0aXZlIC09IGRlbGV0ZWQ7XG5cdFx0aWYgKCFhY3RpdmUpIGNsZWFyX3J1bGVzKCk7XG5cdH1cbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuXHRyYWYoKCkgPT4ge1xuXHRcdGlmIChhY3RpdmUpIHJldHVybjtcblx0XHRtYW5hZ2VkX3N0eWxlcy5mb3JFYWNoKChpbmZvKSA9PiB7XG5cdFx0XHRjb25zdCB7IG93bmVyTm9kZSB9ID0gaW5mby5zdHlsZXNoZWV0O1xuXHRcdFx0Ly8gdGhlcmUgaXMgbm8gb3duZXJOb2RlIGlmIGl0IHJ1bnMgb24ganNkb20uXG5cdFx0XHRpZiAob3duZXJOb2RlKSBkZXRhY2gob3duZXJOb2RlKTtcblx0XHR9KTtcblx0XHRtYW5hZ2VkX3N0eWxlcy5jbGVhcigpO1xuXHR9KTtcbn1cbiIsICJpbXBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIsIG5vb3AgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4vZW52aXJvbm1lbnQuanMnO1xuaW1wb3J0IHsgbG9vcCB9IGZyb20gJy4vbG9vcC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVfcnVsZSwgZGVsZXRlX3J1bGUgfSBmcm9tICcuL3N0eWxlX21hbmFnZXIuanMnO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlBvc2l0aW9uUmVjdH0gZnJvbVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkFuaW1hdGlvbkZufSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG5cdGlmICghZnJvbSkgcmV0dXJuIG5vb3A7XG5cdGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0aWYgKFxuXHRcdGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJlxuXHRcdGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmXG5cdFx0ZnJvbS50b3AgPT09IHRvLnRvcCAmJlxuXHRcdGZyb20uYm90dG9tID09PSB0by5ib3R0b21cblx0KVxuXHRcdHJldHVybiBub29wO1xuXHRjb25zdCB7XG5cdFx0ZGVsYXkgPSAwLFxuXHRcdGR1cmF0aW9uID0gMzAwLFxuXHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHQvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuXHRcdHN0YXJ0OiBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheSxcblx0XHQvLyBAdHMtaWdub3JlIHRvZG86XG5cdFx0ZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLFxuXHRcdHRpY2sgPSBub29wLFxuXHRcdGNzc1xuXHR9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuXHRsZXQgcnVubmluZyA9IHRydWU7XG5cdGxldCBzdGFydGVkID0gZmFsc2U7XG5cdGxldCBuYW1lO1xuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdGZ1bmN0aW9uIHN0YXJ0KCkge1xuXHRcdGlmIChjc3MpIHtcblx0XHRcdG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcblx0XHR9XG5cdFx0aWYgKCFkZWxheSkge1xuXHRcdFx0c3RhcnRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0ZnVuY3Rpb24gc3RvcCgpIHtcblx0XHRpZiAoY3NzKSBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcblx0XHRydW5uaW5nID0gZmFsc2U7XG5cdH1cblx0bG9vcCgobm93KSA9PiB7XG5cdFx0aWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG5cdFx0XHRzdGFydGVkID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuXHRcdFx0dGljaygxLCAwKTtcblx0XHRcdHN0b3AoKTtcblx0XHR9XG5cdFx0aWYgKCFydW5uaW5nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChzdGFydGVkKSB7XG5cdFx0XHRjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcblx0XHRcdGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuXHRcdFx0dGljayh0LCAxIC0gdCk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9KTtcblx0c3RhcnQoKTtcblx0dGljaygwLCAxKTtcblx0cmV0dXJuIHN0b3A7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0aWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcblx0XHRjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0bm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0YWRkX3RyYW5zZm9ybShub2RlLCBhKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlBvc2l0aW9uUmVjdH0gYVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcblx0Y29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcblx0XHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdFx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0XHRub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcblx0fVxufVxuIiwgImltcG9ydCB7IGN1c3RvbV9ldmVudCB9IGZyb20gJy4vZG9tLmpzJztcblxuZXhwb3J0IGxldCBjdXJyZW50X2NvbXBvbmVudDtcblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcblx0Y3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG5cdGlmICghY3VycmVudF9jb21wb25lbnQpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG5cdHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZCBhZnRlciBhbnkgc3RhdGUgY2hhbmdlLlxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBydW5zIHdpbGwgYmUgYmVmb3JlIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNiZWZvcmV1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBUaGUgYG9uTW91bnRgIGZ1bmN0aW9uIHNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBhcyBzb29uIGFzIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCB0byB0aGUgRE9NLlxuICogSXQgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBjb21wb25lbnQncyBpbml0aWFsaXNhdGlvbiAoYnV0IGRvZXNuJ3QgbmVlZCB0byBsaXZlICppbnNpZGUqIHRoZSBjb21wb25lbnQ7XG4gKiBpdCBjYW4gYmUgY2FsbGVkIGZyb20gYW4gZXh0ZXJuYWwgbW9kdWxlKS5cbiAqXG4gKiBJZiBhIGZ1bmN0aW9uIGlzIHJldHVybmVkIF9zeW5jaHJvbm91c2x5XyBmcm9tIGBvbk1vdW50YCwgaXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBgb25Nb3VudGAgZG9lcyBub3QgcnVuIGluc2lkZSBhIFtzZXJ2ZXItc2lkZSBjb21wb25lbnRdKC9kb2NzI3J1bi10aW1lLXNlcnZlci1zaWRlLWNvbXBvbmVudC1hcGkpLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbm1vdW50XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsoKSA9PiBpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+IHwgUHJvbWlzZTxpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLk5vdEZ1bmN0aW9uPFQ+PiB8ICgoKSA9PiBhbnkpfSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbk1vdW50KGZuKSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuXG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBhZnRlciB0aGUgaW5pdGlhbCBgb25Nb3VudGBcbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjYWZ0ZXJ1cGRhdGVcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuXHRnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBPdXQgb2YgYG9uTW91bnRgLCBgYmVmb3JlVXBkYXRlYCwgYGFmdGVyVXBkYXRlYCBhbmQgYG9uRGVzdHJveWAsIHRoaXMgaXMgdGhlXG4gKiBvbmx5IG9uZSB0aGF0IHJ1bnMgaW5zaWRlIGEgc2VydmVyLXNpZGUgY29tcG9uZW50LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNvbmRlc3Ryb3lcbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBmblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcblx0Z2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV2ZW50IGRpc3BhdGNoZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBkaXNwYXRjaCBbY29tcG9uZW50IGV2ZW50c10oL2RvY3MjdGVtcGxhdGUtc3ludGF4LWNvbXBvbmVudC1kaXJlY3RpdmVzLW9uLWV2ZW50bmFtZSkuXG4gKiBFdmVudCBkaXNwYXRjaGVycyBhcmUgZnVuY3Rpb25zIHRoYXQgY2FuIHRha2UgdHdvIGFyZ3VtZW50czogYG5hbWVgIGFuZCBgZGV0YWlsYC5cbiAqXG4gKiBDb21wb25lbnQgZXZlbnRzIGNyZWF0ZWQgd2l0aCBgY3JlYXRlRXZlbnREaXNwYXRjaGVyYCBjcmVhdGUgYVxuICogW0N1c3RvbUV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQpLlxuICogVGhlc2UgZXZlbnRzIGRvIG5vdCBbYnViYmxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0phdmFTY3JpcHQvQnVpbGRpbmdfYmxvY2tzL0V2ZW50cyNFdmVudF9idWJibGluZ19hbmRfY2FwdHVyZSkuXG4gKiBUaGUgYGRldGFpbGAgYXJndW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIFtDdXN0b21FdmVudC5kZXRhaWxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9kZXRhaWwpXG4gKiBwcm9wZXJ0eSBhbmQgY2FuIGNvbnRhaW4gYW55IHR5cGUgb2YgZGF0YS5cbiAqXG4gKiBUaGUgZXZlbnQgZGlzcGF0Y2hlciBjYW4gYmUgdHlwZWQgdG8gbmFycm93IHRoZSBhbGxvd2VkIGV2ZW50IG5hbWVzIGFuZCB0aGUgdHlwZSBvZiB0aGUgYGRldGFpbGAgYXJndW1lbnQ6XG4gKiBgYGB0c1xuICogY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXI8e1xuICogIGxvYWRlZDogbmV2ZXI7IC8vIGRvZXMgbm90IHRha2UgYSBkZXRhaWwgYXJndW1lbnRcbiAqICBjaGFuZ2U6IHN0cmluZzsgLy8gdGFrZXMgYSBkZXRhaWwgYXJndW1lbnQgb2YgdHlwZSBzdHJpbmcsIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiAgb3B0aW9uYWw6IG51bWJlciB8IG51bGw7IC8vIHRha2VzIGFuIG9wdGlvbmFsIGRldGFpbCBhcmd1bWVudCBvZiB0eXBlIG51bWJlclxuICogfT4oKTtcbiAqIGBgYFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNjcmVhdGVldmVudGRpc3BhdGNoZXJcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50TWFwPWFueV1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuRXZlbnREaXNwYXRjaGVyPEV2ZW50TWFwPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcblx0Y29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG5cdHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcblx0XHRjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuXHRcdGlmIChjYWxsYmFja3MpIHtcblx0XHRcdC8vIFRPRE8gYXJlIHRoZXJlIHNpdHVhdGlvbnMgd2hlcmUgZXZlbnRzIGNvdWxkIGJlIGRpc3BhdGNoZWRcblx0XHRcdC8vIGluIGEgc2VydmVyIChub24tRE9NKSBlbnZpcm9ubWVudD9cblx0XHRcdGNvbnN0IGV2ZW50ID0gY3VzdG9tX2V2ZW50KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodHlwZSksIGRldGFpbCwgeyBjYW5jZWxhYmxlIH0pO1xuXHRcdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IHtcblx0XHRcdFx0Zm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcbn1cblxuLyoqXG4gKiBBc3NvY2lhdGVzIGFuIGFyYml0cmFyeSBgY29udGV4dGAgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgY29tcG9uZW50IGFuZCB0aGUgc3BlY2lmaWVkIGBrZXlgXG4gKiBhbmQgcmV0dXJucyB0aGF0IG9iamVjdC4gVGhlIGNvbnRleHQgaXMgdGhlbiBhdmFpbGFibGUgdG8gY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudFxuICogKGluY2x1ZGluZyBzbG90dGVkIGNvbnRlbnQpIHdpdGggYGdldENvbnRleHRgLlxuICpcbiAqIExpa2UgbGlmZWN5Y2xlIGZ1bmN0aW9ucywgdGhpcyBtdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNzZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHBhcmFtIHtUfSBjb250ZXh0XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG5cdGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG5cdHJldHVybiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRjb250ZXh0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHdob2xlIGNvbnRleHQgbWFwIHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi4gVXNlZnVsLCBmb3IgZXhhbXBsZSwgaWYgeW91XG4gKiBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGNvbXBvbmVudCBhbmQgd2FudCB0byBwYXNzIHRoZSBleGlzdGluZyBjb250ZXh0IHRvIGl0LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZSNnZXRhbGxjb250ZXh0c1xuICogQHRlbXBsYXRlIHtNYXA8YW55LCBhbnk+fSBbVD1NYXA8YW55LCBhbnk+XVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcblx0cmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBga2V5YCBoYXMgYmVlbiBzZXQgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUjaGFzY29udGV4dFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZXh0KGtleSkge1xuXHRyZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cblxuLy8gVE9ETyBmaWd1cmUgb3V0IGlmIHdlIHN0aWxsIHdhbnQgdG8gc3VwcG9ydFxuLy8gc2hvcnRoYW5kIGV2ZW50cywgb3IgaWYgd2Ugd2FudCB0byBpbXBsZW1lbnRcbi8vIGEgcmVhbCBidWJibGluZyBtZWNoYW5pc21cbi8qKlxuICogQHBhcmFtIGNvbXBvbmVudFxuICogQHBhcmFtIGV2ZW50XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZShjb21wb25lbnQsIGV2ZW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG5cdGlmIChjYWxsYmFja3MpIHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaCgoZm4pID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcblx0fVxufVxuIiwgImltcG9ydCB7IHJ1bl9hbGwgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGN1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VycmVudF9jb21wb25lbnQgfSBmcm9tICcuL2xpZmVjeWNsZS5qcyc7XG5cbmV4cG9ydCBjb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5leHBvcnQgY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuZXhwb3J0IGNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5cbmxldCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5cbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuXG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xuXG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuXHRpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcblx0XHR1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcblx0XHRyZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuXHR9XG59XG5cbi8qKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aWNrKCkge1xuXHRzY2hlZHVsZV91cGRhdGUoKTtcblx0cmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG5cdHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcblx0Zmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuXG4vLyBmbHVzaCgpIGNhbGxzIGNhbGxiYWNrcyBpbiB0aGlzIG9yZGVyOlxuLy8gMS4gQWxsIGJlZm9yZVVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlblxuLy8gMi4gQWxsIGJpbmQ6dGhpcyBjYWxsYmFja3MsIGluIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gMy4gQWxsIGFmdGVyVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuLiBFWENFUFRcbi8vICAgIGZvciBhZnRlclVwZGF0ZXMgY2FsbGVkIGR1cmluZyB0aGUgaW5pdGlhbCBvbk1vdW50LCB3aGljaCBhcmUgY2FsbGVkIGluXG4vLyAgICByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIFNpbmNlIGNhbGxiYWNrcyBtaWdodCB1cGRhdGUgY29tcG9uZW50IHZhbHVlcywgd2hpY2ggY291bGQgdHJpZ2dlciBhbm90aGVyXG4vLyBjYWxsIHRvIGZsdXNoKCksIHRoZSBmb2xsb3dpbmcgc3RlcHMgZ3VhcmQgYWdhaW5zdCB0aGlzOlxuLy8gMS4gRHVyaW5nIGJlZm9yZVVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuLy8gICAgZGlydHlfY29tcG9uZW50cyBhcnJheSBhbmQgd2lsbCBjYXVzZSBhIHJlZW50cmFudCBjYWxsIHRvIGZsdXNoKCkuIEJlY2F1c2Vcbi8vICAgIHRoZSBmbHVzaCBpbmRleCBpcyBrZXB0IG91dHNpZGUgdGhlIGZ1bmN0aW9uLCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbCBwaWNrXG4vLyAgICB1cCB3aGVyZSB0aGUgZWFybGllciBjYWxsIGxlZnQgb2ZmIGFuZCBnbyB0aHJvdWdoIGFsbCBkaXJ0eSBjb21wb25lbnRzLiBUaGVcbi8vICAgIGN1cnJlbnRfY29tcG9uZW50IHZhbHVlIGlzIHNhdmVkIGFuZCByZXN0b3JlZCBzbyB0aGF0IHRoZSByZWVudHJhbnQgY2FsbCB3aWxsXG4vLyAgICBub3QgaW50ZXJmZXJlIHdpdGggdGhlIFwicGFyZW50XCIgZmx1c2goKSBjYWxsLlxuLy8gMi4gYmluZDp0aGlzIGNhbGxiYWNrcyBjYW5ub3QgdHJpZ2dlciBuZXcgZmx1c2goKSBjYWxscy5cbi8vIDMuIER1cmluZyBhZnRlclVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIE5PVCBoYXZlIHRoZWlyIGFmdGVyVXBkYXRlXG4vLyAgICBjYWxsYmFjayBjYWxsZWQgYSBzZWNvbmQgdGltZTsgdGhlIHNlZW5fY2FsbGJhY2tzIHNldCwgb3V0c2lkZSB0aGUgZmx1c2goKVxuLy8gICAgZnVuY3Rpb24sIGd1YXJhbnRlZXMgdGhpcyBiZWhhdmlvci5cbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xuXG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaCgpIHtcblx0Ly8gRG8gbm90IHJlZW50ZXIgZmx1c2ggd2hpbGUgZGlydHkgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgYXMgdGhpcyBjYW5cblx0Ly8gcmVzdWx0IGluIGFuIGluZmluaXRlIGxvb3AuIEluc3RlYWQsIGxldCB0aGUgaW5uZXIgZmx1c2ggaGFuZGxlIGl0LlxuXHQvLyBSZWVudHJhbmN5IGlzIG9rIGFmdGVyd2FyZHMgZm9yIGJpbmRpbmdzIGV0Yy5cblx0aWYgKGZsdXNoaWR4ICE9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuXHRkbyB7XG5cdFx0Ly8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuXHRcdC8vIGFuZCB1cGRhdGUgY29tcG9uZW50c1xuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAoZmx1c2hpZHggPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ZsdXNoaWR4XTtcblx0XHRcdFx0Zmx1c2hpZHgrKztcblx0XHRcdFx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG5cdFx0XHRcdHVwZGF0ZShjb21wb25lbnQuJCQpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIHJlc2V0IGRpcnR5IHN0YXRlIHRvIG5vdCBlbmQgdXAgaW4gYSBkZWFkbG9ja2VkIHN0YXRlIGFuZCB0aGVuIHJldGhyb3dcblx0XHRcdGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcblx0XHRcdGZsdXNoaWR4ID0gMDtcblx0XHRcdHRocm93IGU7XG5cdFx0fVxuXHRcdHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcblx0XHRkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG5cdFx0Zmx1c2hpZHggPSAwO1xuXHRcdHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG5cdFx0Ly8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG5cdFx0Ly8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuXHRcdC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0Y29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuXHRcdFx0aWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG5cdFx0XHRcdC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcblx0XHRcdFx0c2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuXHR9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG5cdHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0Zmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG5cdH1cblx0dXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuXHRzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuXHRzZXRfY3VycmVudF9jb21wb25lbnQoc2F2ZWRfY29tcG9uZW50KTtcbn1cblxuLyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG5cdGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuXHRcdCQkLnVwZGF0ZSgpO1xuXHRcdHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG5cdFx0Y29uc3QgZGlydHkgPSAkJC5kaXJ0eTtcblx0XHQkJC5kaXJ0eSA9IFstMV07XG5cdFx0JCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcblx0XHQkJC5hZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcblx0fVxufVxuXG4vKipcbiAqIFVzZWZ1bCBmb3IgZXhhbXBsZSB0byBleGVjdXRlIHJlbWFpbmluZyBgYWZ0ZXJVcGRhdGVgIGNhbGxiYWNrcyBiZWZvcmUgZXhlY3V0aW5nIGBkZXN0cm95YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gZm5zXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsdXNoX3JlbmRlcl9jYWxsYmFja3MoZm5zKSB7XG5cdGNvbnN0IGZpbHRlcmVkID0gW107XG5cdGNvbnN0IHRhcmdldHMgPSBbXTtcblx0cmVuZGVyX2NhbGxiYWNrcy5mb3JFYWNoKChjKSA9PiAoZm5zLmluZGV4T2YoYykgPT09IC0xID8gZmlsdGVyZWQucHVzaChjKSA6IHRhcmdldHMucHVzaChjKSkpO1xuXHR0YXJnZXRzLmZvckVhY2goKGMpID0+IGMoKSk7XG5cdHJlbmRlcl9jYWxsYmFja3MgPSBmaWx0ZXJlZDtcbn1cbiIsICJpbXBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIsIGlzX2Z1bmN0aW9uLCBub29wLCBydW5fYWxsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuL2Vudmlyb25tZW50LmpzJztcbmltcG9ydCB7IGxvb3AgfSBmcm9tICcuL2xvb3AuanMnO1xuaW1wb3J0IHsgY3JlYXRlX3J1bGUsIGRlbGV0ZV9ydWxlIH0gZnJvbSAnLi9zdHlsZV9tYW5hZ2VyLmpzJztcbmltcG9ydCB7IGN1c3RvbV9ldmVudCB9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7IGFkZF9yZW5kZXJfY2FsbGJhY2sgfSBmcm9tICcuL3NjaGVkdWxlci5qcyc7XG5cbi8qKlxuICogQHR5cGUge1Byb21pc2U8dm9pZD4gfCBudWxsfVxuICovXG5sZXQgcHJvbWlzZTtcblxuLyoqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZnVuY3Rpb24gd2FpdCgpIHtcblx0aWYgKCFwcm9taXNlKSB7XG5cdFx0cHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdHByb21pc2UudGhlbigoKSA9PiB7XG5cdFx0XHRwcm9taXNlID0gbnVsbDtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7SU5UUk8gfCBPVVRSTyB8IGJvb2xlYW59IGRpcmVjdGlvblxuICogQHBhcmFtIHsnc3RhcnQnIHwgJ2VuZCd9IGtpbmRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcblx0bm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuXG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBAdHlwZSB7T3V0cm99XG4gKi9cbmxldCBvdXRyb3M7XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuXHRvdXRyb3MgPSB7XG5cdFx0cjogMCxcblx0XHRjOiBbXSxcblx0XHRwOiBvdXRyb3MgLy8gcGFyZW50IGdyb3VwXG5cdH07XG59XG5cbi8qKlxuICogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuXHRpZiAoIW91dHJvcy5yKSB7XG5cdFx0cnVuX2FsbChvdXRyb3MuYyk7XG5cdH1cblx0b3V0cm9zID0gb3V0cm9zLnA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLkZyYWdtZW50fSBibG9ja1xuICogQHBhcmFtIHswIHwgMX0gW2xvY2FsXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuXHRpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuXHRcdG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG5cdFx0YmxvY2suaShsb2NhbCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuRnJhZ21lbnR9IGJsb2NrXG4gKiBAcGFyYW0gezAgfCAxfSBsb2NhbFxuICogQHBhcmFtIHswIHwgMX0gW2RldGFjaF1cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcblx0aWYgKGJsb2NrICYmIGJsb2NrLm8pIHtcblx0XHRpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSkgcmV0dXJuO1xuXHRcdG91dHJvaW5nLmFkZChibG9jayk7XG5cdFx0b3V0cm9zLmMucHVzaCgoKSA9PiB7XG5cdFx0XHRvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuXHRcdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGlmIChkZXRhY2gpIGJsb2NrLmQoMSk7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0YmxvY2subyhsb2NhbCk7XG5cdH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcblx0XHRjYWxsYmFjaygpO1xuXHR9XG59XG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgnLi4vdHJhbnNpdGlvbi9wdWJsaWMuanMnKS5UcmFuc2l0aW9uQ29uZmlnfVxuICovXG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50ICYgRWxlbWVudENTU0lubGluZVN0eWxlfSBub2RlXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25Gbn0gZm5cbiAqIEBwYXJhbSB7YW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHt7IHN0YXJ0KCk6IHZvaWQ7IGludmFsaWRhdGUoKTogdm9pZDsgZW5kKCk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG5cdC8qKlxuXHQgKiBAdHlwZSB7VHJhbnNpdGlvbk9wdGlvbnN9ICovXG5cdGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogJ2luJyB9O1xuXHRsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcblx0bGV0IHJ1bm5pbmcgPSBmYWxzZTtcblx0bGV0IGFuaW1hdGlvbl9uYW1lO1xuXHRsZXQgdGFzaztcblx0bGV0IHVpZCA9IDA7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBjbGVhbnVwKCkge1xuXHRcdGlmIChhbmltYXRpb25fbmFtZSkgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBnbygpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cdFx0aWYgKGNzcykgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzLCB1aWQrKyk7XG5cdFx0dGljaygwLCAxKTtcblx0XHRjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcblx0XHRjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcblx0XHRpZiAodGFzaykgdGFzay5hYm9ydCgpO1xuXHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuXHRcdHRhc2sgPSBsb29wKChub3cpID0+IHtcblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChub3cgPj0gZW5kX3RpbWUpIHtcblx0XHRcdFx0XHR0aWNrKDEsIDApO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcblx0XHRcdFx0XHRjbGVhbnVwKCk7XG5cdFx0XHRcdFx0cmV0dXJuIChydW5uaW5nID0gZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuXHRcdFx0XHRcdGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuXHRcdFx0XHRcdHRpY2sodCwgMSAtIHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcnVubmluZztcblx0XHR9KTtcblx0fVxuXHRsZXQgc3RhcnRlZCA9IGZhbHNlO1xuXHRyZXR1cm4ge1xuXHRcdHN0YXJ0KCkge1xuXHRcdFx0aWYgKHN0YXJ0ZWQpIHJldHVybjtcblx0XHRcdHN0YXJ0ZWQgPSB0cnVlO1xuXHRcdFx0ZGVsZXRlX3J1bGUobm9kZSk7XG5cdFx0XHRpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuXHRcdFx0XHRjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG5cdFx0XHRcdHdhaXQoKS50aGVuKGdvKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdvKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlKCkge1xuXHRcdFx0c3RhcnRlZCA9IGZhbHNlO1xuXHRcdH0sXG5cdFx0ZW5kKCkge1xuXHRcdFx0aWYgKHJ1bm5pbmcpIHtcblx0XHRcdFx0Y2xlYW51cCgpO1xuXHRcdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtUcmFuc2l0aW9uRm59IGZuXG4gKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7eyBlbmQocmVzZXQ6IGFueSk6IHZvaWQ7IH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuXHQvKiogQHR5cGUge1RyYW5zaXRpb25PcHRpb25zfSAqL1xuXHRjb25zdCBvcHRpb25zID0geyBkaXJlY3Rpb246ICdvdXQnIH07XG5cdGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMsIG9wdGlvbnMpO1xuXHRsZXQgcnVubmluZyA9IHRydWU7XG5cdGxldCBhbmltYXRpb25fbmFtZTtcblx0Y29uc3QgZ3JvdXAgPSBvdXRyb3M7XG5cdGdyb3VwLnIgKz0gMTtcblx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRsZXQgb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBnbygpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cblx0XHRpZiAoY3NzKSBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuXG5cdFx0Y29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG5cdFx0Y29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG5cdFx0YWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuXG5cdFx0aWYgKCdpbmVydCcgaW4gbm9kZSkge1xuXHRcdFx0b3JpZ2luYWxfaW5lcnRfdmFsdWUgPSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAobm9kZSkuaW5lcnQ7XG5cdFx0XHRub2RlLmluZXJ0ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRsb29wKChub3cpID0+IHtcblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChub3cgPj0gZW5kX3RpbWUpIHtcblx0XHRcdFx0XHR0aWNrKDAsIDEpO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG5cdFx0XHRcdFx0aWYgKCEtLWdyb3VwLnIpIHtcblx0XHRcdFx0XHRcdC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG5cdFx0XHRcdFx0XHQvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcblx0XHRcdFx0XHRcdHJ1bl9hbGwoZ3JvdXAuYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcblx0XHRcdFx0XHRjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0XHR0aWNrKDEgLSB0LCB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJ1bm5pbmc7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuXHRcdHdhaXQoKS50aGVuKCgpID0+IHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbmZpZyA9IGNvbmZpZyhvcHRpb25zKTtcblx0XHRcdGdvKCk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0Z28oKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZW5kKHJlc2V0KSB7XG5cdFx0XHRpZiAocmVzZXQgJiYgJ2luZXJ0JyBpbiBub2RlKSB7XG5cdFx0XHRcdG5vZGUuaW5lcnQgPSBvcmlnaW5hbF9pbmVydF92YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuXHRcdFx0XHRjb25maWcudGljaygxLCAwKTtcblx0XHRcdH1cblx0XHRcdGlmIChydW5uaW5nKSB7XG5cdFx0XHRcdGlmIChhbmltYXRpb25fbmFtZSkgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuXHRcdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCAmIEVsZW1lbnRDU1NJbmxpbmVTdHlsZX0gbm9kZVxuICogQHBhcmFtIHtUcmFuc2l0aW9uRm59IGZuXG4gKiBAcGFyYW0ge2FueX0gcGFyYW1zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGludHJvXG4gKiBAcmV0dXJucyB7eyBydW4oYjogMCB8IDEpOiB2b2lkOyBlbmQoKTogdm9pZDsgfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcblx0LyoqXG5cdCAqIEB0eXBlIHtUcmFuc2l0aW9uT3B0aW9uc30gKi9cblx0Y29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnYm90aCcgfTtcblx0bGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG5cdGxldCB0ID0gaW50cm8gPyAwIDogMTtcblxuXHQvKipcblx0ICogQHR5cGUge1Byb2dyYW0gfCBudWxsfSAqL1xuXHRsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcblxuXHQvKipcblx0ICogQHR5cGUge1BlbmRpbmdQcm9ncmFtIHwgbnVsbH0gKi9cblx0bGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG5cdGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG5cblx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRsZXQgb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHRmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG5cdFx0aWYgKGFuaW1hdGlvbl9uYW1lKSBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtQZW5kaW5nUHJvZ3JhbX0gcHJvZ3JhbVxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cblx0ICogQHJldHVybnMge1Byb2dyYW19XG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG5cdFx0Y29uc3QgZCA9IC8qKiBAdHlwZSB7UHJvZ3JhbVsnZCddfSAqLyAocHJvZ3JhbS5iIC0gdCk7XG5cdFx0ZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGE6IHQsXG5cdFx0XHRiOiBwcm9ncmFtLmIsXG5cdFx0XHRkLFxuXHRcdFx0ZHVyYXRpb24sXG5cdFx0XHRzdGFydDogcHJvZ3JhbS5zdGFydCxcblx0XHRcdGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuXHRcdFx0Z3JvdXA6IHByb2dyYW0uZ3JvdXBcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7SU5UUk8gfCBPVVRST30gYlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIGdvKGIpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRkZWxheSA9IDAsXG5cdFx0XHRkdXJhdGlvbiA9IDMwMCxcblx0XHRcdGVhc2luZyA9IGxpbmVhcixcblx0XHRcdHRpY2sgPSBub29wLFxuXHRcdFx0Y3NzXG5cdFx0fSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG5cblx0XHQvKipcblx0XHQgKiBAdHlwZSB7UGVuZGluZ1Byb2dyYW19ICovXG5cdFx0Y29uc3QgcHJvZ3JhbSA9IHtcblx0XHRcdHN0YXJ0OiBub3coKSArIGRlbGF5LFxuXHRcdFx0YlxuXHRcdH07XG5cblx0XHRpZiAoIWIpIHtcblx0XHRcdC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG5cdFx0XHRwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuXHRcdFx0b3V0cm9zLnIgKz0gMTtcblx0XHR9XG5cblx0XHRpZiAoJ2luZXJ0JyBpbiBub2RlKSB7XG5cdFx0XHRpZiAoYikge1xuXHRcdFx0XHRpZiAob3JpZ2luYWxfaW5lcnRfdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdC8vIGFib3J0ZWQvcmV2ZXJzZWQgb3V0cm8gXHUyMDE0IHJlc3RvcmUgcHJldmlvdXMgaW5lcnQgdmFsdWVcblx0XHRcdFx0XHRub2RlLmluZXJ0ID0gb3JpZ2luYWxfaW5lcnRfdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9yaWdpbmFsX2luZXJ0X3ZhbHVlID0gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKG5vZGUpLmluZXJ0O1xuXHRcdFx0XHRub2RlLmluZXJ0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuXHRcdFx0cGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuXHRcdFx0Ly8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG5cdFx0XHRpZiAoY3NzKSB7XG5cdFx0XHRcdGNsZWFyX2FuaW1hdGlvbigpO1xuXHRcdFx0XHRhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGIpIHRpY2soMCwgMSk7XG5cdFx0XHRydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcblx0XHRcdGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuXHRcdFx0bG9vcCgobm93KSA9PiB7XG5cdFx0XHRcdGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG5cdFx0XHRcdFx0cnVubmluZ19wcm9ncmFtID0gaW5pdChwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcblx0XHRcdFx0XHRwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuXHRcdFx0XHRcdGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcblx0XHRcdFx0XHRpZiAoY3NzKSB7XG5cdFx0XHRcdFx0XHRjbGVhcl9hbmltYXRpb24oKTtcblx0XHRcdFx0XHRcdGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUoXG5cdFx0XHRcdFx0XHRcdG5vZGUsXG5cdFx0XHRcdFx0XHRcdHQsXG5cdFx0XHRcdFx0XHRcdHJ1bm5pbmdfcHJvZ3JhbS5iLFxuXHRcdFx0XHRcdFx0XHRydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sXG5cdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdGVhc2luZyxcblx0XHRcdFx0XHRcdFx0Y29uZmlnLmNzc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuXHRcdFx0XHRcdGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuXHRcdFx0XHRcdFx0dGljaygodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iKSwgMSAtIHQpO1xuXHRcdFx0XHRcdFx0ZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcblx0XHRcdFx0XHRcdGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHdlJ3JlIGRvbmVcblx0XHRcdFx0XHRcdFx0aWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaW50cm8gXHUyMDE0IHdlIGNhbiB0aWR5IHVwIGltbWVkaWF0ZWx5XG5cdFx0XHRcdFx0XHRcdFx0Y2xlYXJfYW5pbWF0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gb3V0cm8gXHUyMDE0IG5lZWRzIHRvIGJlIGNvb3JkaW5hdGVkXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKSBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cnVubmluZ19wcm9ncmFtID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG5cdFx0XHRcdFx0XHR0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcblx0XHRcdFx0XHRcdHRpY2sodCwgMSAtIHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHtcblx0XHRydW4oYikge1xuXHRcdFx0aWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcblx0XHRcdFx0d2FpdCgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IG9wdHMgPSB7IGRpcmVjdGlvbjogYiA/ICdpbicgOiAnb3V0JyB9O1xuXHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRjb25maWcgPSBjb25maWcob3B0cyk7XG5cdFx0XHRcdFx0Z28oYik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Z28oYik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRlbmQoKSB7XG5cdFx0XHRjbGVhcl9hbmltYXRpb24oKTtcblx0XHRcdHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG4vKiogQHR5cGVkZWYgezF9IElOVFJPICovXG4vKiogQHR5cGVkZWYgezB9IE9VVFJPICovXG4vKiogQHR5cGVkZWYge3sgZGlyZWN0aW9uOiAnaW4nIHwgJ291dCcgfCAnYm90aCcgfX0gVHJhbnNpdGlvbk9wdGlvbnMgKi9cbi8qKiBAdHlwZWRlZiB7KG5vZGU6IEVsZW1lbnQsIHBhcmFtczogYW55LCBvcHRpb25zOiBUcmFuc2l0aW9uT3B0aW9ucykgPT4gaW1wb3J0KCcuLi90cmFuc2l0aW9uL3B1YmxpYy5qcycpLlRyYW5zaXRpb25Db25maWd9IFRyYW5zaXRpb25GbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE91dHJvXG4gKiBAcHJvcGVydHkge251bWJlcn0gclxuICogQHByb3BlcnR5IHtGdW5jdGlvbltdfSBjXG4gKiBAcHJvcGVydHkge09iamVjdH0gcFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGVuZGluZ1Byb2dyYW1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGFydFxuICogQHByb3BlcnR5IHtJTlRST3xPVVRST30gYlxuICogQHByb3BlcnR5IHtPdXRyb30gW2dyb3VwXVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUHJvZ3JhbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFcbiAqIEBwcm9wZXJ0eSB7SU5UUk98T1VUUk99IGJcbiAqIEBwcm9wZXJ0eSB7MXwtMX0gZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGR1cmF0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3RhcnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbmRcbiAqIEBwcm9wZXJ0eSB7T3V0cm99IFtncm91cF1cbiAqL1xuIiwgImltcG9ydCB7IHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0IH0gZnJvbSAnLi90cmFuc2l0aW9ucy5qcyc7XG5pbXBvcnQgeyBydW5fYWxsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8vIGdlbmVyYWwgZWFjaCBmdW5jdGlvbnM6XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVfYXJyYXlfbGlrZShhcnJheV9saWtlX29yX2l0ZXJhdG9yKSB7XG5cdHJldHVybiBhcnJheV9saWtlX29yX2l0ZXJhdG9yPy5sZW5ndGggIT09IHVuZGVmaW5lZFxuXHRcdD8gYXJyYXlfbGlrZV9vcl9pdGVyYXRvclxuXHRcdDogQXJyYXkuZnJvbShhcnJheV9saWtlX29yX2l0ZXJhdG9yKTtcbn1cblxuLy8ga2V5ZWQgZWFjaCBmdW5jdGlvbnM6XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0YmxvY2suZCgxKTtcblx0bG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHR0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuXHRcdGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcblx0fSk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuXHRibG9jay5mKCk7XG5cdGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcblx0YmxvY2suZigpO1xuXHRvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cblxuLyoqIEByZXR1cm5zIHthbnlbXX0gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChcblx0b2xkX2Jsb2Nrcyxcblx0ZGlydHksXG5cdGdldF9rZXksXG5cdGR5bmFtaWMsXG5cdGN0eCxcblx0bGlzdCxcblx0bG9va3VwLFxuXHRub2RlLFxuXHRkZXN0cm95LFxuXHRjcmVhdGVfZWFjaF9ibG9jayxcblx0bmV4dCxcblx0Z2V0X2NvbnRleHRcbikge1xuXHRsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuXHRsZXQgbiA9IGxpc3QubGVuZ3RoO1xuXHRsZXQgaSA9IG87XG5cdGNvbnN0IG9sZF9pbmRleGVzID0ge307XG5cdHdoaWxlIChpLS0pIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG5cdGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcblx0Y29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcblx0Y29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuXHRjb25zdCB1cGRhdGVzID0gW107XG5cdGkgPSBuO1xuXHR3aGlsZSAoaS0tKSB7XG5cdFx0Y29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcblx0XHRjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG5cdFx0bGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuXHRcdGlmICghYmxvY2spIHtcblx0XHRcdGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuXHRcdFx0YmxvY2suYygpO1xuXHRcdH0gZWxzZSBpZiAoZHluYW1pYykge1xuXHRcdFx0Ly8gZGVmZXIgdXBkYXRlcyB1bnRpbCBhbGwgdGhlIERPTSBzaHVmZmxpbmcgaXMgZG9uZVxuXHRcdFx0dXBkYXRlcy5wdXNoKCgpID0+IGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSkpO1xuXHRcdH1cblx0XHRuZXdfbG9va3VwLnNldChrZXksIChuZXdfYmxvY2tzW2ldID0gYmxvY2spKTtcblx0XHRpZiAoa2V5IGluIG9sZF9pbmRleGVzKSBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcblx0fVxuXHRjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG5cdGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuXHRcdHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuXHRcdGJsb2NrLm0obm9kZSwgbmV4dCk7XG5cdFx0bG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcblx0XHRuZXh0ID0gYmxvY2suZmlyc3Q7XG5cdFx0bi0tO1xuXHR9XG5cdHdoaWxlIChvICYmIG4pIHtcblx0XHRjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcblx0XHRjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcblx0XHRjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcblx0XHRjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcblx0XHRpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcblx0XHRcdC8vIGRvIG5vdGhpbmdcblx0XHRcdG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG5cdFx0XHRvLS07XG5cdFx0XHRuLS07XG5cdFx0fSBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcblx0XHRcdC8vIHJlbW92ZSBvbGQgYmxvY2tcblx0XHRcdGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuXHRcdFx0by0tO1xuXHRcdH0gZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuXHRcdFx0aW5zZXJ0KG5ld19ibG9jayk7XG5cdFx0fSBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcblx0XHRcdG8tLTtcblx0XHR9IGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG5cdFx0XHRkaWRfbW92ZS5hZGQobmV3X2tleSk7XG5cdFx0XHRpbnNlcnQobmV3X2Jsb2NrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcblx0XHRcdG8tLTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKG8tLSkge1xuXHRcdGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG5cdFx0aWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSkgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG5cdH1cblx0d2hpbGUgKG4pIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG5cdHJ1bl9hbGwodXBkYXRlcyk7XG5cdHJldHVybiBuZXdfYmxvY2tzO1xufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcblx0Y29uc3Qga2V5cyA9IG5ldyBNYXAoKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcblx0XHRpZiAoa2V5cy5oYXMoa2V5KSkge1xuXHRcdFx0bGV0IHZhbHVlID0gJyc7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IGB3aXRoIHZhbHVlICcke1N0cmluZyhrZXkpfScgYDtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly8gY2FuJ3Qgc3RyaW5naWZ5XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2g6IEtleXMgYXQgaW5kZXggJHtrZXlzLmdldChcblx0XHRcdFx0XHRrZXlcblx0XHRcdFx0KX0gYW5kICR7aX0gJHt2YWx1ZX1hcmUgZHVwbGljYXRlc2Bcblx0XHRcdCk7XG5cdFx0fVxuXHRcdGtleXMuc2V0KGtleSwgaSk7XG5cdH1cbn1cbiIsICIvKiogQHJldHVybnMge3t9fSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9zcHJlYWRfdXBkYXRlKGxldmVscywgdXBkYXRlcykge1xuXHRjb25zdCB1cGRhdGUgPSB7fTtcblx0Y29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcblx0Y29uc3QgYWNjb3VudGVkX2ZvciA9IHsgJCRzY29wZTogMSB9O1xuXHRsZXQgaSA9IGxldmVscy5sZW5ndGg7XG5cdHdoaWxlIChpLS0pIHtcblx0XHRjb25zdCBvID0gbGV2ZWxzW2ldO1xuXHRcdGNvbnN0IG4gPSB1cGRhdGVzW2ldO1xuXHRcdGlmIChuKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG5cdFx0XHRcdGlmICghKGtleSBpbiBuKSkgdG9fbnVsbF9vdXRba2V5XSA9IDE7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBuKSB7XG5cdFx0XHRcdGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG5cdFx0XHRcdFx0dXBkYXRlW2tleV0gPSBuW2tleV07XG5cdFx0XHRcdFx0YWNjb3VudGVkX2ZvcltrZXldID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bGV2ZWxzW2ldID0gbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gbykge1xuXHRcdFx0XHRhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuXHRcdGlmICghKGtleSBpbiB1cGRhdGUpKSB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcblx0fVxuXHRyZXR1cm4gdXBkYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG5cdHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cbiIsICJjb25zdCBfYm9vbGVhbl9hdHRyaWJ1dGVzID0gLyoqIEB0eXBlIHtjb25zdH0gKi8gKFtcblx0J2FsbG93ZnVsbHNjcmVlbicsXG5cdCdhbGxvd3BheW1lbnRyZXF1ZXN0Jyxcblx0J2FzeW5jJyxcblx0J2F1dG9mb2N1cycsXG5cdCdhdXRvcGxheScsXG5cdCdjaGVja2VkJyxcblx0J2NvbnRyb2xzJyxcblx0J2RlZmF1bHQnLFxuXHQnZGVmZXInLFxuXHQnZGlzYWJsZWQnLFxuXHQnZm9ybW5vdmFsaWRhdGUnLFxuXHQnaGlkZGVuJyxcblx0J2luZXJ0Jyxcblx0J2lzbWFwJyxcblx0J2xvb3AnLFxuXHQnbXVsdGlwbGUnLFxuXHQnbXV0ZWQnLFxuXHQnbm9tb2R1bGUnLFxuXHQnbm92YWxpZGF0ZScsXG5cdCdvcGVuJyxcblx0J3BsYXlzaW5saW5lJyxcblx0J3JlYWRvbmx5Jyxcblx0J3JlcXVpcmVkJyxcblx0J3JldmVyc2VkJyxcblx0J3NlbGVjdGVkJ1xuXSk7XG5cbi8qKlxuICogTGlzdCBvZiBIVE1MIGJvb2xlYW4gYXR0cmlidXRlcyAoZS5nLiBgPGlucHV0IGRpc2FibGVkPmApLlxuICogU291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbiAqXG4gKiBAdHlwZSB7U2V0PHN0cmluZz59XG4gKi9cbmV4cG9ydCBjb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFsuLi5fYm9vbGVhbl9hdHRyaWJ1dGVzXSk7XG5cbi8qKiBAdHlwZWRlZiB7dHlwZW9mIF9ib29sZWFuX2F0dHJpYnV0ZXNbbnVtYmVyXX0gQm9vbGVhbkF0dHJpYnV0ZXMgKi9cbiIsICJpbXBvcnQge1xuXHRhZGRfcmVuZGVyX2NhbGxiYWNrLFxuXHRmbHVzaCxcblx0Zmx1c2hfcmVuZGVyX2NhbGxiYWNrcyxcblx0c2NoZWR1bGVfdXBkYXRlLFxuXHRkaXJ0eV9jb21wb25lbnRzXG59IGZyb20gJy4vc2NoZWR1bGVyLmpzJztcbmltcG9ydCB7IGN1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VycmVudF9jb21wb25lbnQgfSBmcm9tICcuL2xpZmVjeWNsZS5qcyc7XG5pbXBvcnQgeyBibGFua19vYmplY3QsIGlzX2VtcHR5LCBpc19mdW5jdGlvbiwgcnVuLCBydW5fYWxsLCBub29wIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge1xuXHRjaGlsZHJlbixcblx0ZGV0YWNoLFxuXHRzdGFydF9oeWRyYXRpbmcsXG5cdGVuZF9oeWRyYXRpbmcsXG5cdGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMsXG5cdGluc2VydCxcblx0ZWxlbWVudCxcblx0YXR0clxufSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQgeyB0cmFuc2l0aW9uX2luIH0gZnJvbSAnLi90cmFuc2l0aW9ucy5qcyc7XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kKGNvbXBvbmVudCwgbmFtZSwgY2FsbGJhY2spIHtcblx0Y29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG5cdGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Y29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuXHRcdGNhbGxiYWNrKGNvbXBvbmVudC4kJC5jdHhbaW5kZXhdKTtcblx0fVxufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuXHRibG9jayAmJiBibG9jay5jKCk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFpbV9jb21wb25lbnQoYmxvY2ssIHBhcmVudF9ub2Rlcykge1xuXHRibG9jayAmJiBibG9jay5sKHBhcmVudF9ub2Rlcyk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCB0YXJnZXQsIGFuY2hvcikge1xuXHRjb25zdCB7IGZyYWdtZW50LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcblx0ZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG5cdC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcblx0YWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG5cdFx0Y29uc3QgbmV3X29uX2Rlc3Ryb3kgPSBjb21wb25lbnQuJCQub25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcblx0XHQvLyBpZiB0aGUgY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBpdCB3aWxsIHVwZGF0ZSB0aGUgYCQkLm9uX2Rlc3Ryb3lgIHJlZmVyZW5jZSB0byBgbnVsbGAuXG5cdFx0Ly8gdGhlIGRlc3RydWN0dXJlZCBvbl9kZXN0cm95IG1heSBzdGlsbCByZWZlcmVuY2UgdG8gdGhlIG9sZCBhcnJheVxuXHRcdGlmIChjb21wb25lbnQuJCQub25fZGVzdHJveSkge1xuXHRcdFx0Y29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaCguLi5uZXdfb25fZGVzdHJveSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEVkZ2UgY2FzZSAtIGNvbXBvbmVudCB3YXMgZGVzdHJveWVkIGltbWVkaWF0ZWx5LFxuXHRcdFx0Ly8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuXHRcdFx0cnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG5cdFx0fVxuXHRcdGNvbXBvbmVudC4kJC5vbl9tb3VudCA9IFtdO1xuXHR9KTtcblx0YWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG59XG5cbi8qKiBAcmV0dXJucyB7dm9pZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95X2NvbXBvbmVudChjb21wb25lbnQsIGRldGFjaGluZykge1xuXHRjb25zdCAkJCA9IGNvbXBvbmVudC4kJDtcblx0aWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG5cdFx0Zmx1c2hfcmVuZGVyX2NhbGxiYWNrcygkJC5hZnRlcl91cGRhdGUpO1xuXHRcdHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG5cdFx0JCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuXHRcdC8vIFRPRE8gbnVsbCBvdXQgb3RoZXIgcmVmcywgaW5jbHVkaW5nIGNvbXBvbmVudC4kJCAoYnV0IG5lZWQgdG9cblx0XHQvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG5cdFx0JCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcblx0XHQkJC5jdHggPSBbXTtcblx0fVxufVxuXG4vKiogQHJldHVybnMge3ZvaWR9ICovXG5mdW5jdGlvbiBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSkge1xuXHRpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuXHRcdGRpcnR5X2NvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuXHRcdHNjaGVkdWxlX3VwZGF0ZSgpO1xuXHRcdGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuXHR9XG5cdGNvbXBvbmVudC4kJC5kaXJ0eVsoaSAvIDMxKSB8IDBdIHw9IDEgPDwgaSAlIDMxO1xufVxuXG4vLyBUT0RPOiBEb2N1bWVudCB0aGUgb3RoZXIgcGFyYW1zXG4vKipcbiAqIEBwYXJhbSB7U3ZlbHRlQ29tcG9uZW50fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLkNvbXBvbmVudENvbnN0cnVjdG9yT3B0aW9uc30gb3B0aW9uc1xuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3V0aWxzLmpzJylbJ25vdF9lcXVhbCddfSBub3RfZXF1YWwgVXNlZCB0byBjb21wYXJlIHByb3BzIGFuZCBzdGF0ZSB2YWx1ZXMuXG4gKiBAcGFyYW0geyh0YXJnZXQ6IEVsZW1lbnQgfCBTaGFkb3dSb290KSA9PiB2b2lkfSBbYXBwZW5kX3N0eWxlc10gRnVuY3Rpb24gdGhhdCBhcHBlbmRzIHN0eWxlcyB0byB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmaXJzdCBpbml0aWFsaXNlZC5cbiAqIFRoaXMgd2lsbCBiZSB0aGUgYGFkZF9jc3NgIGZ1bmN0aW9uIGZyb20gdGhlIGNvbXBpbGVkIGNvbXBvbmVudC5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQoXG5cdGNvbXBvbmVudCxcblx0b3B0aW9ucyxcblx0aW5zdGFuY2UsXG5cdGNyZWF0ZV9mcmFnbWVudCxcblx0bm90X2VxdWFsLFxuXHRwcm9wcyxcblx0YXBwZW5kX3N0eWxlcyA9IG51bGwsXG5cdGRpcnR5ID0gWy0xXVxuKSB7XG5cdGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcblx0c2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5UJCR9ICovXG5cdGNvbnN0ICQkID0gKGNvbXBvbmVudC4kJCA9IHtcblx0XHRmcmFnbWVudDogbnVsbCxcblx0XHRjdHg6IFtdLFxuXHRcdC8vIHN0YXRlXG5cdFx0cHJvcHMsXG5cdFx0dXBkYXRlOiBub29wLFxuXHRcdG5vdF9lcXVhbCxcblx0XHRib3VuZDogYmxhbmtfb2JqZWN0KCksXG5cdFx0Ly8gbGlmZWN5Y2xlXG5cdFx0b25fbW91bnQ6IFtdLFxuXHRcdG9uX2Rlc3Ryb3k6IFtdLFxuXHRcdG9uX2Rpc2Nvbm5lY3Q6IFtdLFxuXHRcdGJlZm9yZV91cGRhdGU6IFtdLFxuXHRcdGFmdGVyX3VwZGF0ZTogW10sXG5cdFx0Y29udGV4dDogbmV3IE1hcChvcHRpb25zLmNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuXHRcdC8vIGV2ZXJ5dGhpbmcgZWxzZVxuXHRcdGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG5cdFx0ZGlydHksXG5cdFx0c2tpcF9ib3VuZDogZmFsc2UsXG5cdFx0cm9vdDogb3B0aW9ucy50YXJnZXQgfHwgcGFyZW50X2NvbXBvbmVudC4kJC5yb290XG5cdH0pO1xuXHRhcHBlbmRfc3R5bGVzICYmIGFwcGVuZF9zdHlsZXMoJCQucm9vdCk7XG5cdGxldCByZWFkeSA9IGZhbHNlO1xuXHQkJC5jdHggPSBpbnN0YW5jZVxuXHRcdD8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuXHRcdFx0XHRpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICgkJC5jdHhbaV0gPSB2YWx1ZSkpKSB7XG5cdFx0XHRcdFx0aWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKSAkJC5ib3VuZFtpXSh2YWx1ZSk7XG5cdFx0XHRcdFx0aWYgKHJlYWR5KSBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHQgIH0pXG5cdFx0OiBbXTtcblx0JCQudXBkYXRlKCk7XG5cdHJlYWR5ID0gdHJ1ZTtcblx0cnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcblx0Ly8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG5cdCQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcblx0aWYgKG9wdGlvbnMudGFyZ2V0KSB7XG5cdFx0aWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuXHRcdFx0c3RhcnRfaHlkcmF0aW5nKCk7XG5cdFx0XHQvLyBUT0RPOiB3aGF0IGlzIHRoZSBjb3JyZWN0IHR5cGUgaGVyZT9cblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0XHRcdGNvbnN0IG5vZGVzID0gY2hpbGRyZW4ob3B0aW9ucy50YXJnZXQpO1xuXHRcdFx0JCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG5cdFx0XHRub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG5cdFx0XHQkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG5cdFx0fVxuXHRcdGlmIChvcHRpb25zLmludHJvKSB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG5cdFx0bW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgb3B0aW9ucy50YXJnZXQsIG9wdGlvbnMuYW5jaG9yKTtcblx0XHRlbmRfaHlkcmF0aW5nKCk7XG5cdFx0Zmx1c2goKTtcblx0fVxuXHRzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5cbmV4cG9ydCBsZXQgU3ZlbHRlRWxlbWVudDtcblxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cdFx0LyoqIFRoZSBTdmVsdGUgY29tcG9uZW50IGNvbnN0cnVjdG9yICovXG5cdFx0JCRjdG9yO1xuXHRcdC8qKiBTbG90cyAqL1xuXHRcdCQkcztcblx0XHQvKiogVGhlIFN2ZWx0ZSBjb21wb25lbnQgaW5zdGFuY2UgKi9cblx0XHQkJGM7XG5cdFx0LyoqIFdoZXRoZXIgb3Igbm90IHRoZSBjdXN0b20gZWxlbWVudCBpcyBjb25uZWN0ZWQgKi9cblx0XHQkJGNuID0gZmFsc2U7XG5cdFx0LyoqIENvbXBvbmVudCBwcm9wcyBkYXRhICovXG5cdFx0JCRkID0ge307XG5cdFx0LyoqIGB0cnVlYCBpZiBjdXJyZW50bHkgaW4gdGhlIHByb2Nlc3Mgb2YgcmVmbGVjdGluZyBjb21wb25lbnQgcHJvcHMgYmFjayB0byBhdHRyaWJ1dGVzICovXG5cdFx0JCRyID0gZmFsc2U7XG5cdFx0LyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBDdXN0b21FbGVtZW50UHJvcERlZmluaXRpb24+fSBQcm9wcyBkZWZpbml0aW9uIChuYW1lLCByZWZsZWN0ZWQsIHR5cGUgZXRjKSAqL1xuXHRcdCQkcF9kID0ge307XG5cdFx0LyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBGdW5jdGlvbltdPn0gRXZlbnQgbGlzdGVuZXJzICovXG5cdFx0JCRsID0ge307XG5cdFx0LyoqIEB0eXBlIHtNYXA8RnVuY3Rpb24sIEZ1bmN0aW9uPn0gRXZlbnQgbGlzdGVuZXIgdW5zdWJzY3JpYmUgZnVuY3Rpb25zICovXG5cdFx0JCRsX3UgPSBuZXcgTWFwKCk7XG5cblx0XHRjb25zdHJ1Y3RvcigkJGNvbXBvbmVudEN0b3IsICQkc2xvdHMsIHVzZV9zaGFkb3dfZG9tKSB7XG5cdFx0XHRzdXBlcigpO1xuXHRcdFx0dGhpcy4kJGN0b3IgPSAkJGNvbXBvbmVudEN0b3I7XG5cdFx0XHR0aGlzLiQkcyA9ICQkc2xvdHM7XG5cdFx0XHRpZiAodXNlX3NoYWRvd19kb20pIHtcblx0XHRcdFx0dGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuXHRcdFx0Ly8gV2UgY2FuJ3QgZGV0ZXJtaW5lIHVwZnJvbnQgaWYgdGhlIGV2ZW50IGlzIGEgY3VzdG9tIGV2ZW50IG9yIG5vdCwgc28gd2UgaGF2ZSB0b1xuXHRcdFx0Ly8gbGlzdGVuIHRvIGJvdGguIElmIHNvbWVvbmUgdXNlcyBhIGN1c3RvbSBldmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYSByZWd1bGFyXG5cdFx0XHQvLyBicm93c2VyIGV2ZW50LCB0aGlzIGZpcmVzIHR3aWNlIC0gd2UgY2FuJ3QgYXZvaWQgdGhhdC5cblx0XHRcdHRoaXMuJCRsW3R5cGVdID0gdGhpcy4kJGxbdHlwZV0gfHwgW107XG5cdFx0XHR0aGlzLiQkbFt0eXBlXS5wdXNoKGxpc3RlbmVyKTtcblx0XHRcdGlmICh0aGlzLiQkYykge1xuXHRcdFx0XHRjb25zdCB1bnN1YiA9IHRoaXMuJCRjLiRvbih0eXBlLCBsaXN0ZW5lcik7XG5cdFx0XHRcdHRoaXMuJCRsX3Uuc2V0KGxpc3RlbmVyLCB1bnN1Yik7XG5cdFx0XHR9XG5cdFx0XHRzdXBlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRyZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG5cdFx0XHRzdXBlci5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcblx0XHRcdGlmICh0aGlzLiQkYykge1xuXHRcdFx0XHRjb25zdCB1bnN1YiA9IHRoaXMuJCRsX3UuZ2V0KGxpc3RlbmVyKTtcblx0XHRcdFx0aWYgKHVuc3ViKSB7XG5cdFx0XHRcdFx0dW5zdWIoKTtcblx0XHRcdFx0XHR0aGlzLiQkbF91LmRlbGV0ZShsaXN0ZW5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcblx0XHRcdHRoaXMuJCRjbiA9IHRydWU7XG5cdFx0XHRpZiAoIXRoaXMuJCRjKSB7XG5cdFx0XHRcdC8vIFdlIHdhaXQgb25lIHRpY2sgdG8gbGV0IHBvc3NpYmxlIGNoaWxkIHNsb3QgZWxlbWVudHMgYmUgY3JlYXRlZC9tb3VudGVkXG5cdFx0XHRcdGF3YWl0IFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuJCRjbikge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRmdW5jdGlvbiBjcmVhdGVfc2xvdChuYW1lKSB7XG5cdFx0XHRcdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdFx0XHRcdGxldCBub2RlO1xuXHRcdFx0XHRcdFx0Y29uc3Qgb2JqID0ge1xuXHRcdFx0XHRcdFx0XHRjOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW1lbnQoJ3Nsb3QnKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAobmFtZSAhPT0gJ2RlZmF1bHQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRhdHRyKG5vZGUsICduYW1lJywgbmFtZSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHRcdFx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG5cdFx0XHRcdFx0XHRcdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFthbmNob3JdXG5cdFx0XHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRcdFx0XHRtOiBmdW5jdGlvbiBtb3VudCh0YXJnZXQsIGFuY2hvcikge1xuXHRcdFx0XHRcdFx0XHRcdGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGQ6IGZ1bmN0aW9uIGRlc3Ryb3koZGV0YWNoaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGRldGFjaGluZykge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGV0YWNoKG5vZGUpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCAkJHNsb3RzID0ge307XG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nX3Nsb3RzID0gZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cyh0aGlzKTtcblx0XHRcdFx0Zm9yIChjb25zdCBuYW1lIG9mIHRoaXMuJCRzKSB7XG5cdFx0XHRcdFx0aWYgKG5hbWUgaW4gZXhpc3Rpbmdfc2xvdHMpIHtcblx0XHRcdFx0XHRcdCQkc2xvdHNbbmFtZV0gPSBbY3JlYXRlX3Nsb3QobmFtZSldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiB0aGlzLmF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0XHQvLyB0aGlzLiQkZGF0YSB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhpcy5hdHRyaWJ1dGVzXG5cdFx0XHRcdFx0Y29uc3QgbmFtZSA9IHRoaXMuJCRnX3AoYXR0cmlidXRlLm5hbWUpO1xuXHRcdFx0XHRcdGlmICghKG5hbWUgaW4gdGhpcy4kJGQpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLiQkZFtuYW1lXSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShuYW1lLCBhdHRyaWJ1dGUudmFsdWUsIHRoaXMuJCRwX2QsICd0b1Byb3AnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy4kJGMgPSBuZXcgdGhpcy4kJGN0b3Ioe1xuXHRcdFx0XHRcdHRhcmdldDogdGhpcy5zaGFkb3dSb290IHx8IHRoaXMsXG5cdFx0XHRcdFx0cHJvcHM6IHtcblx0XHRcdFx0XHRcdC4uLnRoaXMuJCRkLFxuXHRcdFx0XHRcdFx0JCRzbG90cyxcblx0XHRcdFx0XHRcdCQkc2NvcGU6IHtcblx0XHRcdFx0XHRcdFx0Y3R4OiBbXVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8gUmVmbGVjdCBjb21wb25lbnQgcHJvcHMgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRjb25zdCByZWZsZWN0X2F0dHJpYnV0ZXMgPSAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy4kJHIgPSB0cnVlO1xuXHRcdFx0XHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCRwX2QpIHtcblx0XHRcdFx0XHRcdHRoaXMuJCRkW2tleV0gPSB0aGlzLiQkYy4kJC5jdHhbdGhpcy4kJGMuJCQucHJvcHNba2V5XV07XG5cdFx0XHRcdFx0XHRpZiAodGhpcy4kJHBfZFtrZXldLnJlZmxlY3QpIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlX3ZhbHVlID0gZ2V0X2N1c3RvbV9lbGVtZW50X3ZhbHVlKFxuXHRcdFx0XHRcdFx0XHRcdGtleSxcblx0XHRcdFx0XHRcdFx0XHR0aGlzLiQkZFtrZXldLFxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuJCRwX2QsXG5cdFx0XHRcdFx0XHRcdFx0J3RvQXR0cmlidXRlJ1xuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRpZiAoYXR0cmlidXRlX3ZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLiQkcF9kW2tleV0uYXR0cmlidXRlIHx8IGtleSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUodGhpcy4kJHBfZFtrZXldLmF0dHJpYnV0ZSB8fCBrZXksIGF0dHJpYnV0ZV92YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy4kJHIgPSBmYWxzZTtcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy4kJGMuJCQuYWZ0ZXJfdXBkYXRlLnB1c2gocmVmbGVjdF9hdHRyaWJ1dGVzKTtcblx0XHRcdFx0cmVmbGVjdF9hdHRyaWJ1dGVzKCk7IC8vIG9uY2UgaW5pdGlhbGx5IGJlY2F1c2UgYWZ0ZXJfdXBkYXRlIGlzIGFkZGVkIHRvbyBsYXRlIGZvciBmaXJzdCByZW5kZXJcblxuXHRcdFx0XHRmb3IgKGNvbnN0IHR5cGUgaW4gdGhpcy4kJGwpIHtcblx0XHRcdFx0XHRmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuJCRsW3R5cGVdKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB1bnN1YiA9IHRoaXMuJCRjLiRvbih0eXBlLCBsaXN0ZW5lcik7XG5cdFx0XHRcdFx0XHR0aGlzLiQkbF91LnNldChsaXN0ZW5lciwgdW5zdWIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLiQkbCA9IHt9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFdlIGRvbid0IG5lZWQgdGhpcyB3aGVuIHdvcmtpbmcgd2l0aGluIFN2ZWx0ZSBjb2RlLCBidXQgZm9yIGNvbXBhdGliaWxpdHkgb2YgcGVvcGxlIHVzaW5nIHRoaXMgb3V0c2lkZSBvZiBTdmVsdGVcblx0XHQvLyBhbmQgc2V0dGluZyBhdHRyaWJ1dGVzIHRocm91Z2ggc2V0QXR0cmlidXRlIGV0YywgdGhpcyBpcyBoZWxwZnVsXG5cdFx0YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcblx0XHRcdGlmICh0aGlzLiQkcikgcmV0dXJuO1xuXHRcdFx0YXR0ciA9IHRoaXMuJCRnX3AoYXR0cik7XG5cdFx0XHR0aGlzLiQkZFthdHRyXSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShhdHRyLCBuZXdWYWx1ZSwgdGhpcy4kJHBfZCwgJ3RvUHJvcCcpO1xuXHRcdFx0dGhpcy4kJGM/LiRzZXQoeyBbYXR0cl06IHRoaXMuJCRkW2F0dHJdIH0pO1xuXHRcdH1cblxuXHRcdGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuXHRcdFx0dGhpcy4kJGNuID0gZmFsc2U7XG5cdFx0XHQvLyBJbiBhIG1pY3JvdGFzaywgYmVjYXVzZSB0aGlzIGNvdWxkIGJlIGEgbW92ZSB3aXRoaW4gdGhlIERPTVxuXHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy4kJGNuKSB7XG5cdFx0XHRcdFx0dGhpcy4kJGMuJGRlc3Ryb3koKTtcblx0XHRcdFx0XHR0aGlzLiQkYyA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0JCRnX3AoYXR0cmlidXRlX25hbWUpIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdE9iamVjdC5rZXlzKHRoaXMuJCRwX2QpLmZpbmQoXG5cdFx0XHRcdFx0KGtleSkgPT5cblx0XHRcdFx0XHRcdHRoaXMuJCRwX2Rba2V5XS5hdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZV9uYW1lIHx8XG5cdFx0XHRcdFx0XHQoIXRoaXMuJCRwX2Rba2V5XS5hdHRyaWJ1dGUgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09IGF0dHJpYnV0ZV9uYW1lKVxuXHRcdFx0XHQpIHx8IGF0dHJpYnV0ZV9uYW1lXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIEN1c3RvbUVsZW1lbnRQcm9wRGVmaW5pdGlvbj59IHByb3BzX2RlZmluaXRpb25cbiAqIEBwYXJhbSB7J3RvQXR0cmlidXRlJyB8ICd0b1Byb3AnfSBbdHJhbnNmb3JtXVxuICovXG5mdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRfdmFsdWUocHJvcCwgdmFsdWUsIHByb3BzX2RlZmluaXRpb24sIHRyYW5zZm9ybSkge1xuXHRjb25zdCB0eXBlID0gcHJvcHNfZGVmaW5pdGlvbltwcm9wXT8udHlwZTtcblx0dmFsdWUgPSB0eXBlID09PSAnQm9vbGVhbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicgPyB2YWx1ZSAhPSBudWxsIDogdmFsdWU7XG5cdGlmICghdHJhbnNmb3JtIHx8ICFwcm9wc19kZWZpbml0aW9uW3Byb3BdKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9IGVsc2UgaWYgKHRyYW5zZm9ybSA9PT0gJ3RvQXR0cmlidXRlJykge1xuXHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0Y2FzZSAnT2JqZWN0Jzpcblx0XHRcdGNhc2UgJ0FycmF5Jzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBudWxsIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0Y2FzZSAnQm9vbGVhbic6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA/ICcnIDogbnVsbDtcblx0XHRcdGNhc2UgJ051bWJlcic6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSAmJiBKU09OLnBhcnNlKHZhbHVlKTtcblx0XHRcdGNhc2UgJ0Jvb2xlYW4nOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7IC8vIGNvbnZlcnNpb24gYWxyZWFkeSBoYW5kbGVkIGFib3ZlXG5cdFx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgIT0gbnVsbCA/ICt2YWx1ZSA6IHZhbHVlO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIFR1cm4gYSBTdmVsdGUgY29tcG9uZW50IGludG8gYSBjdXN0b20gZWxlbWVudC5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLkNvbXBvbmVudFR5cGV9IENvbXBvbmVudCAgQSBTdmVsdGUgY29tcG9uZW50IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIEN1c3RvbUVsZW1lbnRQcm9wRGVmaW5pdGlvbj59IHByb3BzX2RlZmluaXRpb24gIFRoZSBwcm9wcyB0byBvYnNlcnZlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBzbG90cyAgVGhlIHNsb3RzIHRvIGNyZWF0ZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gYWNjZXNzb3JzICBPdGhlciBhY2Nlc3NvcnMgYmVzaWRlcyB0aGUgb25lcyBmb3IgcHJvcHMgdGhlIGNvbXBvbmVudCBoYXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlX3NoYWRvd19kb20gIFdoZXRoZXIgdG8gdXNlIHNoYWRvdyBET01cbiAqIEBwYXJhbSB7KGNlOiBuZXcgKCkgPT4gSFRNTEVsZW1lbnQpID0+IG5ldyAoKSA9PiBIVE1MRWxlbWVudH0gW2V4dGVuZF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9jdXN0b21fZWxlbWVudChcblx0Q29tcG9uZW50LFxuXHRwcm9wc19kZWZpbml0aW9uLFxuXHRzbG90cyxcblx0YWNjZXNzb3JzLFxuXHR1c2Vfc2hhZG93X2RvbSxcblx0ZXh0ZW5kXG4pIHtcblx0bGV0IENsYXNzID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVFbGVtZW50IHtcblx0XHRjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHN1cGVyKENvbXBvbmVudCwgc2xvdHMsIHVzZV9zaGFkb3dfZG9tKTtcblx0XHRcdHRoaXMuJCRwX2QgPSBwcm9wc19kZWZpbml0aW9uO1xuXHRcdH1cblx0XHRzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhwcm9wc19kZWZpbml0aW9uKS5tYXAoKGtleSkgPT5cblx0XHRcdFx0KHByb3BzX2RlZmluaXRpb25ba2V5XS5hdHRyaWJ1dGUgfHwga2V5KS50b0xvd2VyQ2FzZSgpXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcblx0T2JqZWN0LmtleXMocHJvcHNfZGVmaW5pdGlvbikuZm9yRWFjaCgocHJvcCkgPT4ge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzcy5wcm90b3R5cGUsIHByb3AsIHtcblx0XHRcdGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuJCRjICYmIHByb3AgaW4gdGhpcy4kJGMgPyB0aGlzLiQkY1twcm9wXSA6IHRoaXMuJCRkW3Byb3BdO1xuXHRcdFx0fSxcblx0XHRcdHNldCh2YWx1ZSkge1xuXHRcdFx0XHR2YWx1ZSA9IGdldF9jdXN0b21fZWxlbWVudF92YWx1ZShwcm9wLCB2YWx1ZSwgcHJvcHNfZGVmaW5pdGlvbik7XG5cdFx0XHRcdHRoaXMuJCRkW3Byb3BdID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMuJCRjPy4kc2V0KHsgW3Byb3BdOiB2YWx1ZSB9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdGFjY2Vzc29ycy5mb3JFYWNoKChhY2Nlc3NvcikgPT4ge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzcy5wcm90b3R5cGUsIGFjY2Vzc29yLCB7XG5cdFx0XHRnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLiQkYz8uW2FjY2Vzc29yXTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdGlmIChleHRlbmQpIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIC0gYXNzaWduaW5nIGhlcmUgaXMgZmluZVxuXHRcdENsYXNzID0gZXh0ZW5kKENsYXNzKTtcblx0fVxuXHRDb21wb25lbnQuZWxlbWVudCA9IC8qKiBAdHlwZSB7YW55fSAqLyAoQ2xhc3MpO1xuXHRyZXR1cm4gQ2xhc3M7XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKlxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBbUHJvcHM9YW55XVxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBbRXZlbnRzPWFueV1cbiAqL1xuZXhwb3J0IGNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG5cdC8qKlxuXHQgKiAjIyMgUFJJVkFURSBBUElcblx0ICpcblx0ICogRG8gbm90IHVzZSwgbWF5IGNoYW5nZSBhdCBhbnkgdGltZVxuXHQgKlxuXHQgKiBAdHlwZSB7YW55fVxuXHQgKi9cblx0JCQgPSB1bmRlZmluZWQ7XG5cdC8qKlxuXHQgKiAjIyMgUFJJVkFURSBBUElcblx0ICpcblx0ICogRG8gbm90IHVzZSwgbWF5IGNoYW5nZSBhdCBhbnkgdGltZVxuXHQgKlxuXHQgKiBAdHlwZSB7YW55fVxuXHQgKi9cblx0JCRzZXQgPSB1bmRlZmluZWQ7XG5cblx0LyoqIEByZXR1cm5zIHt2b2lkfSAqL1xuXHQkZGVzdHJveSgpIHtcblx0XHRkZXN0cm95X2NvbXBvbmVudCh0aGlzLCAxKTtcblx0XHR0aGlzLiRkZXN0cm95ID0gbm9vcDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAdGVtcGxhdGUge0V4dHJhY3Q8a2V5b2YgRXZlbnRzLCBzdHJpbmc+fSBLXG5cdCAqIEBwYXJhbSB7S30gdHlwZVxuXHQgKiBAcGFyYW0geygoZTogRXZlbnRzW0tdKSA9PiB2b2lkKSB8IG51bGwgfCB1bmRlZmluZWR9IGNhbGxiYWNrXG5cdCAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuXHQgKi9cblx0JG9uKHR5cGUsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKCFpc19mdW5jdGlvbihjYWxsYmFjaykpIHtcblx0XHRcdHJldHVybiBub29wO1xuXHRcdH1cblx0XHRjb25zdCBjYWxsYmFja3MgPSB0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSk7XG5cdFx0Y2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtQYXJ0aWFsPFByb3BzPn0gcHJvcHNcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHQkc2V0KHByb3BzKSB7XG5cdFx0aWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KHByb3BzKSkge1xuXHRcdFx0dGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcblx0XHRcdHRoaXMuJCRzZXQocHJvcHMpO1xuXHRcdFx0dGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ3VzdG9tRWxlbWVudFByb3BEZWZpbml0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2F0dHJpYnV0ZV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlZmxlY3RdXG4gKiBAcHJvcGVydHkgeydTdHJpbmcnfCdCb29sZWFuJ3wnTnVtYmVyJ3wnQXJyYXknfCdPYmplY3QnfSBbdHlwZV1cbiAqL1xuIiwgIi8vIGdlbmVyYXRlZCBkdXJpbmcgcmVsZWFzZSwgZG8gbm90IG1vZGlmeVxuXG4vKipcbiAqIFRoZSBjdXJyZW50IHZlcnNpb24sIGFzIHNldCBpbiBwYWNrYWdlLmpzb24uXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWNvbXBpbGVyI3N2ZWx0ZS12ZXJzaW9uXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc0LjIuNyc7XG5leHBvcnQgY29uc3QgUFVCTElDX1ZFUlNJT04gPSAnNCc7XG4iLCAiaW1wb3J0IHtcblx0Y3VzdG9tX2V2ZW50LFxuXHRhcHBlbmQsXG5cdGFwcGVuZF9oeWRyYXRpb24sXG5cdGluc2VydCxcblx0aW5zZXJ0X2h5ZHJhdGlvbixcblx0ZGV0YWNoLFxuXHRsaXN0ZW4sXG5cdGF0dHJcbn0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50IH0gZnJvbSAnLi9Db21wb25lbnQuanMnO1xuaW1wb3J0IHsgaXNfdm9pZCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy9uYW1lcy5qcyc7XG5pbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3ZlcnNpb24uanMnO1xuaW1wb3J0IHsgY29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMgfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGVuc3VyZV9hcnJheV9saWtlIH0gZnJvbSAnLi9lYWNoLmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7VH0gW2RldGFpbF1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuXHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCB7IHZlcnNpb246IFZFUlNJT04sIC4uLmRldGFpbCB9LCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcblx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcblx0YXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUpIHtcblx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcblx0YXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Tm9kZX0gW2FuY2hvcl1cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG5cdGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5cbi8qKiBAcGFyYW0ge05vZGV9IHRhcmdldFxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge05vZGV9IFthbmNob3JdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcblx0aW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcblx0ZGV0YWNoKG5vZGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYmVmb3JlXG4gKiBAcGFyYW0ge05vZGV9IGFmdGVyXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG5cdHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuXHRcdGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYWZ0ZXJcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcblx0d2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuXHRcdGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYmVmb3JlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG5cdHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcblx0XHRkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0fSBoYW5kbGVyXG4gKiBAcGFyYW0ge2Jvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyB8IEV2ZW50TGlzdGVuZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc19wcmV2ZW50X2RlZmF1bHRdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtoYXNfc3RvcF9wcm9wYWdhdGlvbl1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc19zdG9wX2ltbWVkaWF0ZV9wcm9wYWdhdGlvbl1cbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuX2Rldihcblx0bm9kZSxcblx0ZXZlbnQsXG5cdGhhbmRsZXIsXG5cdG9wdGlvbnMsXG5cdGhhc19wcmV2ZW50X2RlZmF1bHQsXG5cdGhhc19zdG9wX3Byb3BhZ2F0aW9uLFxuXHRoYXNfc3RvcF9pbW1lZGlhdGVfcHJvcGFnYXRpb25cbikge1xuXHRjb25zdCBtb2RpZmllcnMgPVxuXHRcdG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuXHRpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdCkgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG5cdGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbikgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuXHRpZiAoaGFzX3N0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uKSBtb2RpZmllcnMucHVzaCgnc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uJyk7XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcblx0Y29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0ZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuXHRcdGRpc3Bvc2UoKTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblx0YXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcblx0aWYgKHZhbHVlID09IG51bGwpIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG5cdGVsc2UgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuXHRub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldFByb3BlcnR5JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge2FueX0gW3ZhbHVlXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcblx0bm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuXHRkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuXHRkYXRhID0gJycgKyBkYXRhO1xuXHRpZiAodGV4dC5kYXRhID09PSBkYXRhKSByZXR1cm47XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGVfZGV2KHRleHQsIGRhdGEpIHtcblx0ZGF0YSA9ICcnICsgZGF0YTtcblx0aWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKSByZXR1cm47XG5cdGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcblx0dGV4dC5kYXRhID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChkYXRhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RleHR9IHRleHRcbiAqIEBwYXJhbSB7dW5rbm93bn0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJfdmFsdWVcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2RhdGFfbWF5YmVfY29udGVudGVkaXRhYmxlX2Rldih0ZXh0LCBkYXRhLCBhdHRyX3ZhbHVlKSB7XG5cdGlmICh+Y29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMuaW5kZXhPZihhdHRyX3ZhbHVlKSkge1xuXHRcdHNldF9kYXRhX2NvbnRlbnRlZGl0YWJsZV9kZXYodGV4dCwgZGF0YSk7XG5cdH0gZWxzZSB7XG5cdFx0c2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVfYXJyYXlfbGlrZV9kZXYoYXJnKSB7XG5cdGlmIChcblx0XHR0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJlxuXHRcdCEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykgJiZcblx0XHQhKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpXG5cdCkge1xuXHRcdHRocm93IG5ldyBFcnJvcigneyNlYWNofSBvbmx5IHdvcmtzIHdpdGggaXRlcmFibGUgdmFsdWVzLicpO1xuXHR9XG5cdHJldHVybiBlbnN1cmVfYXJyYXlfbGlrZShhcmcpO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHt2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcblx0Zm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuXHRcdGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcblx0XHRcdGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSB0YWdcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVfZHluYW1pY19lbGVtZW50KHRhZykge1xuXHRjb25zdCBpc19zdHJpbmcgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJztcblx0aWYgKHRhZyAmJiAhaXNfc3RyaW5nKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCc8c3ZlbHRlOmVsZW1lbnQ+IGV4cGVjdHMgXCJ0aGlzXCIgYXR0cmlidXRlIHRvIGJlIGEgc3RyaW5nLicpO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmRlZmluZWQgfCBzdHJpbmd9IHRhZ1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV92b2lkX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcblx0aWYgKHRhZyAmJiBpc192b2lkKHRhZykpIHtcblx0XHRjb25zb2xlLndhcm4oYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+IGlzIHNlbGYtY2xvc2luZyBhbmQgY2Fubm90IGhhdmUgY29udGVudC5gKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnRfZGV2KGNvbXBvbmVudCwgcHJvcHMpIHtcblx0Y29uc3QgZXJyb3JfbWVzc2FnZSA9ICd0aGlzPXsuLi59IG9mIDxzdmVsdGU6Y29tcG9uZW50PiBzaG91bGQgc3BlY2lmeSBhIFN2ZWx0ZSBjb21wb25lbnQuJztcblx0dHJ5IHtcblx0XHRjb25zdCBpbnN0YW5jZSA9IG5ldyBjb21wb25lbnQocHJvcHMpO1xuXHRcdGlmICghaW5zdGFuY2UuJCQgfHwgIWluc3RhbmNlLiRzZXQgfHwgIWluc3RhbmNlLiRvbiB8fCAhaW5zdGFuY2UuJGRlc3Ryb3kpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcblx0XHR9XG5cdFx0cmV0dXJuIGluc3RhbmNlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zdCB7IG1lc3NhZ2UgfSA9IGVycjtcblx0XHRpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIG1lc3NhZ2UuaW5kZXhPZignaXMgbm90IGEgY29uc3RydWN0b3InKSAhPT0gLTEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgZXJyO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKlxuICogQ2FuIGJlIHVzZWQgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICpcbiAqICMjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW1Byb3BzPWFueV1cbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gW0V2ZW50cz1hbnldXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtTbG90cz1hbnldXG4gKiBAZXh0ZW5kcyB7U3ZlbHRlQ29tcG9uZW50PFByb3BzLCBFdmVudHM+fVxuICovXG5leHBvcnQgY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge1Byb3BzfVxuXHQgKi9cblx0JCRwcm9wX2RlZjtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge0V2ZW50c31cblx0ICovXG5cdCQkZXZlbnRzX2RlZjtcblx0LyoqXG5cdCAqIEZvciB0eXBlIGNoZWNraW5nIGNhcGFiaWxpdGllcyBvbmx5LlxuXHQgKiBEb2VzIG5vdCBleGlzdCBhdCBydW50aW1lLlxuXHQgKiAjIyMgRE8gTk9UIFVTRSFcblx0ICpcblx0ICogQHR5cGUge1Nsb3RzfVxuXHQgKi9cblx0JCRzbG90X2RlZjtcblxuXHQvKiogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuQ29tcG9uZW50Q29uc3RydWN0b3JPcHRpb25zPFByb3BzPn0gb3B0aW9ucyAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0aWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcblx0XHR9XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7dm9pZH0gKi9cblx0JGRlc3Ryb3koKSB7XG5cdFx0c3VwZXIuJGRlc3Ryb3koKTtcblx0XHR0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuXHRcdFx0Y29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuXHRcdH07XG5cdH1cblxuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdCRjYXB0dXJlX3N0YXRlKCkge31cblxuXHQvKiogQHJldHVybnMge3ZvaWR9ICovXG5cdCRpbmplY3Rfc3RhdGUoKSB7fVxufVxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtQcm9wcz1hbnldXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFtFdmVudHM9YW55XVxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBbU2xvdHM9YW55XVxuICogQGRlcHJlY2F0ZWQgVXNlIGBTdmVsdGVDb21wb25lbnRgIGluc3RlYWQuIFNlZSBQUiBmb3IgbW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzg1MTJcbiAqIEBleHRlbmRzIHtTdmVsdGVDb21wb25lbnREZXY8UHJvcHMsIEV2ZW50cywgU2xvdHM+fVxuICovXG5leHBvcnQgY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge31cblxuLyoqIEByZXR1cm5zIHsoKSA9PiB2b2lkfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuXHRjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuXHRcdH1cblx0fTtcbn1cbiIsICJpbXBvcnQgeyBQVUJMSUNfVkVSU0lPTiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC92ZXJzaW9uLmpzJztcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuXHQvLyBAdHMtaWdub3JlXG5cdCh3aW5kb3cuX19zdmVsdGUgfHwgKHdpbmRvdy5fX3N2ZWx0ZSA9IHsgdjogbmV3IFNldCgpIH0pKS52LmFkZChQVUJMSUNfVkVSU0lPTik7XG4iLCAiLypcbkFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGRlc2xcbkRpc3RyaWJ1dGVkIHVuZGVyIE1JVCBMaWNlbnNlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbC9lYXNlcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4qL1xuZXhwb3J0IHsgaWRlbnRpdHkgYXMgbGluZWFyIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXguanMnO1xuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcblx0Y29uc3QgcyA9IDEuNzAxNTggKiAxLjUyNTtcblx0aWYgKCh0ICo9IDIpIDwgMSkgcmV0dXJuIDAuNSAqICh0ICogdCAqICgocyArIDEpICogdCAtIHMpKTtcblx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDIpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFja0luKHQpIHtcblx0Y29uc3QgcyA9IDEuNzAxNTg7XG5cdHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYmFja091dCh0KSB7XG5cdGNvbnN0IHMgPSAxLjcwMTU4O1xuXHRyZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZU91dCh0KSB7XG5cdGNvbnN0IGEgPSA0LjAgLyAxMS4wO1xuXHRjb25zdCBiID0gOC4wIC8gMTEuMDtcblx0Y29uc3QgYyA9IDkuMCAvIDEwLjA7XG5cdGNvbnN0IGNhID0gNDM1Ni4wIC8gMzYxLjA7XG5cdGNvbnN0IGNiID0gMzU0NDIuMCAvIDE4MDUuMDtcblx0Y29uc3QgY2MgPSAxNjA2MS4wIC8gMTgwNS4wO1xuXHRjb25zdCB0MiA9IHQgKiB0O1xuXHRyZXR1cm4gdCA8IGFcblx0XHQ/IDcuNTYyNSAqIHQyXG5cdFx0OiB0IDwgYlxuXHRcdD8gOS4wNzUgKiB0MiAtIDkuOSAqIHQgKyAzLjRcblx0XHQ6IHQgPCBjXG5cdFx0PyBjYSAqIHQyIC0gY2IgKiB0ICsgY2Ncblx0XHQ6IDEwLjggKiB0ICogdCAtIDIwLjUyICogdCArIDEwLjcyO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW5PdXQodCkge1xuXHRyZXR1cm4gdCA8IDAuNSA/IDAuNSAqICgxLjAgLSBib3VuY2VPdXQoMS4wIC0gdCAqIDIuMCkpIDogMC41ICogYm91bmNlT3V0KHQgKiAyLjAgLSAxLjApICsgMC41O1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW4odCkge1xuXHRyZXR1cm4gMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2lyY0luT3V0KHQpIHtcblx0aWYgKCh0ICo9IDIpIDwgMSkgcmV0dXJuIC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcblx0cmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNpcmNJbih0KSB7XG5cdHJldHVybiAxLjAgLSBNYXRoLnNxcnQoMS4wIC0gdCAqIHQpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2lyY091dCh0KSB7XG5cdHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG5cdHJldHVybiB0IDwgMC41ID8gNC4wICogdCAqIHQgKiB0IDogMC41ICogTWF0aC5wb3coMi4wICogdCAtIDIuMCwgMy4wKSArIDEuMDtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuXHRyZXR1cm4gdCAqIHQgKiB0O1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuXHRjb25zdCBmID0gdCAtIDEuMDtcblx0cmV0dXJuIGYgKiBmICogZiArIDEuMDtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG5cdHJldHVybiB0IDwgMC41XG5cdFx0PyAwLjUgKiBNYXRoLnNpbigoKCsxMy4wICogTWF0aC5QSSkgLyAyKSAqIDIuMCAqIHQpICogTWF0aC5wb3coMi4wLCAxMC4wICogKDIuMCAqIHQgLSAxLjApKVxuXHRcdDogMC41ICpcblx0XHRcdFx0TWF0aC5zaW4oKCgtMTMuMCAqIE1hdGguUEkpIC8gMikgKiAoMi4wICogdCAtIDEuMCArIDEuMCkpICpcblx0XHRcdFx0TWF0aC5wb3coMi4wLCAtMTAuMCAqICgyLjAgKiB0IC0gMS4wKSkgK1xuXHRcdFx0XHQxLjA7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGFzdGljSW4odCkge1xuXHRyZXR1cm4gTWF0aC5zaW4oKDEzLjAgKiB0ICogTWF0aC5QSSkgLyAyKSAqIE1hdGgucG93KDIuMCwgMTAuMCAqICh0IC0gMS4wKSk7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcblx0cmV0dXJuIE1hdGguc2luKCgtMTMuMCAqICh0ICsgMS4wKSAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIC0xMC4wICogdCkgKyAxLjA7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBvSW5PdXQodCkge1xuXHRyZXR1cm4gdCA9PT0gMC4wIHx8IHQgPT09IDEuMFxuXHRcdD8gdFxuXHRcdDogdCA8IDAuNVxuXHRcdD8gKzAuNSAqIE1hdGgucG93KDIuMCwgMjAuMCAqIHQgLSAxMC4wKVxuXHRcdDogLTAuNSAqIE1hdGgucG93KDIuMCwgMTAuMCAtIHQgKiAyMC4wKSArIDEuMDtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9Jbih0KSB7XG5cdHJldHVybiB0ID09PSAwLjAgPyB0IDogTWF0aC5wb3coMi4wLCAxMC4wICogKHQgLSAxLjApKTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9PdXQodCkge1xuXHRyZXR1cm4gdCA9PT0gMS4wID8gdCA6IDEuMCAtIE1hdGgucG93KDIuMCwgLTEwLjAgKiB0KTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG5cdHQgLz0gMC41O1xuXHRpZiAodCA8IDEpIHJldHVybiAwLjUgKiB0ICogdDtcblx0dC0tO1xuXHRyZXR1cm4gLTAuNSAqICh0ICogKHQgLSAyKSAtIDEpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhZEluKHQpIHtcblx0cmV0dXJuIHQgKiB0O1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhZE91dCh0KSB7XG5cdHJldHVybiAtdCAqICh0IC0gMi4wKTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YXJ0SW5PdXQodCkge1xuXHRyZXR1cm4gdCA8IDAuNSA/ICs4LjAgKiBNYXRoLnBvdyh0LCA0LjApIDogLTguMCAqIE1hdGgucG93KHQgLSAxLjAsIDQuMCkgKyAxLjA7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFydEluKHQpIHtcblx0cmV0dXJuIE1hdGgucG93KHQsIDQuMCk7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFydE91dCh0KSB7XG5cdHJldHVybiBNYXRoLnBvdyh0IC0gMS4wLCAzLjApICogKDEuMCAtIHQpICsgMS4wO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVpbnRJbk91dCh0KSB7XG5cdGlmICgodCAqPSAyKSA8IDEpIHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcblx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1aW50SW4odCkge1xuXHRyZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWludE91dCh0KSB7XG5cdHJldHVybiAtLXQgKiB0ICogdCAqIHQgKiB0ICsgMTtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpbmVJbk91dCh0KSB7XG5cdHJldHVybiAtMC41ICogKE1hdGguY29zKE1hdGguUEkgKiB0KSAtIDEpO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS1lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSB0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZUluKHQpIHtcblx0Y29uc3QgdiA9IE1hdGguY29zKHQgKiBNYXRoLlBJICogMC41KTtcblx0aWYgKE1hdGguYWJzKHYpIDwgMWUtMTQpIHJldHVybiAxO1xuXHRlbHNlIHJldHVybiAxIC0gdjtcbn1cblxuLyoqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpbmVPdXQodCkge1xuXHRyZXR1cm4gTWF0aC5zaW4oKHQgKiBNYXRoLlBJKSAvIDIpO1xufVxuIiwgImltcG9ydCB7IGN1YmljT3V0LCBjdWJpY0luT3V0LCBsaW5lYXIgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXguanMnO1xuaW1wb3J0IHsgYXNzaWduLCBzcGxpdF9jc3NfdW5pdCwgaXNfZnVuY3Rpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5qcyc7XG5cbi8qKlxuICogQW5pbWF0ZXMgYSBgYmx1cmAgZmlsdGVyIGFsb25nc2lkZSBhbiBlbGVtZW50J3Mgb3BhY2l0eS5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtdHJhbnNpdGlvbiNibHVyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYycpLkJsdXJQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYycpLlRyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibHVyKFxuXHRub2RlLFxuXHR7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljSW5PdXQsIGFtb3VudCA9IDUsIG9wYWNpdHkgPSAwIH0gPSB7fVxuKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0Y29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgZiA9IHN0eWxlLmZpbHRlciA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS5maWx0ZXI7XG5cdGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuXHRjb25zdCBbdmFsdWUsIHVuaXRdID0gc3BsaXRfY3NzX3VuaXQoYW1vdW50KTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAoX3QsIHUpID0+IGBvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gb2QgKiB1fTsgZmlsdGVyOiAke2Z9IGJsdXIoJHt1ICogdmFsdWV9JHt1bml0fSk7YFxuXHR9O1xufVxuXG4vKipcbiAqIEFuaW1hdGVzIHRoZSBvcGFjaXR5IG9mIGFuIGVsZW1lbnQgZnJvbSAwIHRvIHRoZSBjdXJyZW50IG9wYWNpdHkgZm9yIGBpbmAgdHJhbnNpdGlvbnMgYW5kIGZyb20gdGhlIGN1cnJlbnQgb3BhY2l0eSB0byAwIGZvciBgb3V0YCB0cmFuc2l0aW9ucy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtdHJhbnNpdGlvbiNmYWRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYycpLkZhZGVQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYycpLlRyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gbGluZWFyIH0gPSB7fSkge1xuXHRjb25zdCBvID0gK2dldENvbXB1dGVkU3R5bGUobm9kZSkub3BhY2l0eTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAodCkgPT4gYG9wYWNpdHk6ICR7dCAqIG99YFxuXHR9O1xufVxuXG4vKipcbiAqIEFuaW1hdGVzIHRoZSB4IGFuZCB5IHBvc2l0aW9ucyBhbmQgdGhlIG9wYWNpdHkgb2YgYW4gZWxlbWVudC4gYGluYCB0cmFuc2l0aW9ucyBhbmltYXRlIGZyb20gdGhlIHByb3ZpZGVkIHZhbHVlcywgcGFzc2VkIGFzIHBhcmFtZXRlcnMgdG8gdGhlIGVsZW1lbnQncyBkZWZhdWx0IHZhbHVlcy4gYG91dGAgdHJhbnNpdGlvbnMgYW5pbWF0ZSBmcm9tIHRoZSBlbGVtZW50J3MgZGVmYXVsdCB2YWx1ZXMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlcy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtdHJhbnNpdGlvbiNmbHlcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljJykuRmx5UGFyYW1zfSBbcGFyYW1zXVxuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMnKS5UcmFuc2l0aW9uQ29uZmlnfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmx5KFxuXHRub2RlLFxuXHR7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCB4ID0gMCwgeSA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fVxuKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0Y29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0Y29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG5cdGNvbnN0IFt4VmFsdWUsIHhVbml0XSA9IHNwbGl0X2Nzc191bml0KHgpO1xuXHRjb25zdCBbeVZhbHVlLCB5VW5pdF0gPSBzcGxpdF9jc3NfdW5pdCh5KTtcblx0cmV0dXJuIHtcblx0XHRkZWxheSxcblx0XHRkdXJhdGlvbixcblx0XHRlYXNpbmcsXG5cdFx0Y3NzOiAodCwgdSkgPT4gYFxuXHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7KDEgLSB0KSAqIHhWYWx1ZX0ke3hVbml0fSwgJHsoMSAtIHQpICogeVZhbHVlfSR7eVVuaXR9KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSBvZCAqIHV9YFxuXHR9O1xufVxuXG4vKipcbiAqIFNsaWRlcyBhbiBlbGVtZW50IGluIGFuZCBvdXQuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLXRyYW5zaXRpb24jc2xpZGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljJykuU2xpZGVQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYycpLlRyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGlkZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCBheGlzID0gJ3knIH0gPSB7fSkge1xuXHRjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cdGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgcHJpbWFyeV9wcm9wZXJ0eSA9IGF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblx0Y29uc3QgcHJpbWFyeV9wcm9wZXJ0eV92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbcHJpbWFyeV9wcm9wZXJ0eV0pO1xuXHRjb25zdCBzZWNvbmRhcnlfcHJvcGVydGllcyA9IGF4aXMgPT09ICd5JyA/IFsndG9wJywgJ2JvdHRvbSddIDogWydsZWZ0JywgJ3JpZ2h0J107XG5cdGNvbnN0IGNhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzID0gc2Vjb25kYXJ5X3Byb3BlcnRpZXMubWFwKFxuXHRcdChlKSA9PiBgJHtlWzBdLnRvVXBwZXJDYXNlKCl9JHtlLnNsaWNlKDEpfWBcblx0KTtcblx0Y29uc3QgcGFkZGluZ19zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYHBhZGRpbmcke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzBdfWBdKTtcblx0Y29uc3QgcGFkZGluZ19lbmRfdmFsdWUgPSBwYXJzZUZsb2F0KHN0eWxlW2BwYWRkaW5nJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1sxXX1gXSk7XG5cdGNvbnN0IG1hcmdpbl9zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYG1hcmdpbiR7Y2FwaXRhbGl6ZWRfc2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19YF0pO1xuXHRjb25zdCBtYXJnaW5fZW5kX3ZhbHVlID0gcGFyc2VGbG9hdChzdHlsZVtgbWFyZ2luJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1sxXX1gXSk7XG5cdGNvbnN0IGJvcmRlcl93aWR0aF9zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoXG5cdFx0c3R5bGVbYGJvcmRlciR7Y2FwaXRhbGl6ZWRfc2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19V2lkdGhgXVxuXHQpO1xuXHRjb25zdCBib3JkZXJfd2lkdGhfZW5kX3ZhbHVlID0gcGFyc2VGbG9hdChcblx0XHRzdHlsZVtgYm9yZGVyJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1sxXX1XaWR0aGBdXG5cdCk7XG5cdHJldHVybiB7XG5cdFx0ZGVsYXksXG5cdFx0ZHVyYXRpb24sXG5cdFx0ZWFzaW5nLFxuXHRcdGNzczogKHQpID0+XG5cdFx0XHQnb3ZlcmZsb3c6IGhpZGRlbjsnICtcblx0XHRcdGBvcGFjaXR5OiAke01hdGgubWluKHQgKiAyMCwgMSkgKiBvcGFjaXR5fTtgICtcblx0XHRcdGAke3ByaW1hcnlfcHJvcGVydHl9OiAke3QgKiBwcmltYXJ5X3Byb3BlcnR5X3ZhbHVlfXB4O2AgK1xuXHRcdFx0YHBhZGRpbmctJHtzZWNvbmRhcnlfcHJvcGVydGllc1swXX06ICR7dCAqIHBhZGRpbmdfc3RhcnRfdmFsdWV9cHg7YCArXG5cdFx0XHRgcGFkZGluZy0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfTogJHt0ICogcGFkZGluZ19lbmRfdmFsdWV9cHg7YCArXG5cdFx0XHRgbWFyZ2luLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19OiAke3QgKiBtYXJnaW5fc3RhcnRfdmFsdWV9cHg7YCArXG5cdFx0XHRgbWFyZ2luLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMV19OiAke3QgKiBtYXJnaW5fZW5kX3ZhbHVlfXB4O2AgK1xuXHRcdFx0YGJvcmRlci0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzBdfS13aWR0aDogJHt0ICogYm9yZGVyX3dpZHRoX3N0YXJ0X3ZhbHVlfXB4O2AgK1xuXHRcdFx0YGJvcmRlci0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfS13aWR0aDogJHt0ICogYm9yZGVyX3dpZHRoX2VuZF92YWx1ZX1weDtgXG5cdH07XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgdGhlIG9wYWNpdHkgYW5kIHNjYWxlIG9mIGFuIGVsZW1lbnQuIGBpbmAgdHJhbnNpdGlvbnMgYW5pbWF0ZSBmcm9tIGFuIGVsZW1lbnQncyBjdXJyZW50IChkZWZhdWx0KSB2YWx1ZXMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlcywgcGFzc2VkIGFzIHBhcmFtZXRlcnMuIGBvdXRgIHRyYW5zaXRpb25zIGFuaW1hdGUgZnJvbSB0aGUgcHJvdmlkZWQgdmFsdWVzIHRvIGFuIGVsZW1lbnQncyBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtdHJhbnNpdGlvbiNzY2FsZVxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMnKS5TY2FsZVBhcmFtc30gW3BhcmFtc11cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljJykuVHJhbnNpdGlvbkNvbmZpZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKFxuXHRub2RlLFxuXHR7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCBzdGFydCA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fVxuKSB7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0Y29uc3QgdGFyZ2V0X29wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcblx0Y29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcblx0Y29uc3Qgc2QgPSAxIC0gc3RhcnQ7XG5cdGNvbnN0IG9kID0gdGFyZ2V0X29wYWNpdHkgKiAoMSAtIG9wYWNpdHkpO1xuXHRyZXR1cm4ge1xuXHRcdGRlbGF5LFxuXHRcdGR1cmF0aW9uLFxuXHRcdGVhc2luZyxcblx0XHRjc3M6IChfdCwgdSkgPT4gYFxuXHRcdFx0dHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gc2NhbGUoJHsxIC0gc2QgKiB1fSk7XG5cdFx0XHRvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gb2QgKiB1fVxuXHRcdGBcblx0fTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyB0aGUgc3Ryb2tlIG9mIGFuIFNWRyBlbGVtZW50LCBsaWtlIGEgc25ha2UgaW4gYSB0dWJlLiBgaW5gIHRyYW5zaXRpb25zIGJlZ2luIHdpdGggdGhlIHBhdGggaW52aXNpYmxlIGFuZCBkcmF3IHRoZSBwYXRoIHRvIHRoZSBzY3JlZW4gb3ZlciB0aW1lLiBgb3V0YCB0cmFuc2l0aW9ucyBzdGFydCBpbiBhIHZpc2libGUgc3RhdGUgYW5kIGdyYWR1YWxseSBlcmFzZSB0aGUgcGF0aC4gYGRyYXdgIG9ubHkgd29ya3Mgd2l0aCBlbGVtZW50cyB0aGF0IGhhdmUgYSBgZ2V0VG90YWxMZW5ndGhgIG1ldGhvZCwgbGlrZSBgPHBhdGg+YCBhbmQgYDxwb2x5bGluZT5gLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS10cmFuc2l0aW9uI2RyYXdcbiAqIEBwYXJhbSB7U1ZHRWxlbWVudCAmIHsgZ2V0VG90YWxMZW5ndGgoKTogbnVtYmVyIH19IG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYycpLkRyYXdQYXJhbXN9IFtwYXJhbXNdXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYycpLlRyYW5zaXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkcmF3KG5vZGUsIHsgZGVsYXkgPSAwLCBzcGVlZCwgZHVyYXRpb24sIGVhc2luZyA9IGN1YmljSW5PdXQgfSA9IHt9KSB7XG5cdGxldCBsZW4gPSBub2RlLmdldFRvdGFsTGVuZ3RoKCk7XG5cdGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblx0aWYgKHN0eWxlLnN0cm9rZUxpbmVjYXAgIT09ICdidXR0Jykge1xuXHRcdGxlbiArPSBwYXJzZUludChzdHlsZS5zdHJva2VXaWR0aCk7XG5cdH1cblx0aWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoc3BlZWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZHVyYXRpb24gPSA4MDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGR1cmF0aW9uID0gbGVuIC8gc3BlZWQ7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGR1cmF0aW9uID0gZHVyYXRpb24obGVuKTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdGRlbGF5LFxuXHRcdGR1cmF0aW9uLFxuXHRcdGVhc2luZyxcblx0XHRjc3M6IChfLCB1KSA9PiBgXG5cdFx0XHRzdHJva2UtZGFzaGFycmF5OiAke2xlbn07XG5cdFx0XHRzdHJva2UtZGFzaG9mZnNldDogJHt1ICogbGVufTtcblx0XHRgXG5cdH07XG59XG5cbi8qKlxuICogVGhlIGBjcm9zc2ZhZGVgIGZ1bmN0aW9uIGNyZWF0ZXMgYSBwYWlyIG9mIFt0cmFuc2l0aW9uc10oL2RvY3MjdGVtcGxhdGUtc3ludGF4LWVsZW1lbnQtZGlyZWN0aXZlcy10cmFuc2l0aW9uLWZuKSBjYWxsZWQgYHNlbmRgIGFuZCBgcmVjZWl2ZWAuIFdoZW4gYW4gZWxlbWVudCBpcyAnc2VudCcsIGl0IGxvb2tzIGZvciBhIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBiZWluZyAncmVjZWl2ZWQnLCBhbmQgZ2VuZXJhdGVzIGEgdHJhbnNpdGlvbiB0aGF0IHRyYW5zZm9ybXMgdGhlIGVsZW1lbnQgdG8gaXRzIGNvdW50ZXJwYXJ0J3MgcG9zaXRpb24gYW5kIGZhZGVzIGl0IG91dC4gV2hlbiBhbiBlbGVtZW50IGlzICdyZWNlaXZlZCcsIHRoZSByZXZlcnNlIGhhcHBlbnMuIElmIHRoZXJlIGlzIG5vIGNvdW50ZXJwYXJ0LCB0aGUgYGZhbGxiYWNrYCB0cmFuc2l0aW9uIGlzIHVzZWQuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLXRyYW5zaXRpb24jY3Jvc3NmYWRlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMnKS5Dcm9zc2ZhZGVQYXJhbXMgJiB7XG4gKiBcdGZhbGxiYWNrPzogKG5vZGU6IEVsZW1lbnQsIHBhcmFtczogaW1wb3J0KCcuL3B1YmxpYycpLkNyb3NzZmFkZVBhcmFtcywgaW50cm86IGJvb2xlYW4pID0+IGltcG9ydCgnLi9wdWJsaWMnKS5UcmFuc2l0aW9uQ29uZmlnO1xuICogfX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7Wyhub2RlOiBhbnksIHBhcmFtczogaW1wb3J0KCcuL3B1YmxpYycpLkNyb3NzZmFkZVBhcmFtcyAmIHsga2V5OiBhbnk7IH0pID0+ICgpID0+IGltcG9ydCgnLi9wdWJsaWMnKS5UcmFuc2l0aW9uQ29uZmlnLCAobm9kZTogYW55LCBwYXJhbXM6IGltcG9ydCgnLi9wdWJsaWMnKS5Dcm9zc2ZhZGVQYXJhbXMgJiB7IGtleTogYW55OyB9KSA9PiAoKSA9PiBpbXBvcnQoJy4vcHVibGljJykuVHJhbnNpdGlvbkNvbmZpZ119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcm9zc2ZhZGUoeyBmYWxsYmFjaywgLi4uZGVmYXVsdHMgfSkge1xuXHQvKiogQHR5cGUge01hcDxhbnksIEVsZW1lbnQ+fSAqL1xuXHRjb25zdCB0b19yZWNlaXZlID0gbmV3IE1hcCgpO1xuXHQvKiogQHR5cGUge01hcDxhbnksIEVsZW1lbnQ+fSAqL1xuXHRjb25zdCB0b19zZW5kID0gbmV3IE1hcCgpO1xuXHQvKipcblx0ICogQHBhcmFtIHtFbGVtZW50fSBmcm9tX25vZGVcblx0ICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG5cdCAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYycpLkNyb3NzZmFkZVBhcmFtc30gcGFyYW1zXG5cdCAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljJykuVHJhbnNpdGlvbkNvbmZpZ31cblx0ICovXG5cdGZ1bmN0aW9uIGNyb3NzZmFkZShmcm9tX25vZGUsIG5vZGUsIHBhcmFtcykge1xuXHRcdGNvbnN0IHtcblx0XHRcdGRlbGF5ID0gMCxcblx0XHRcdGR1cmF0aW9uID0gKGQpID0+IE1hdGguc3FydChkKSAqIDMwLFxuXHRcdFx0ZWFzaW5nID0gY3ViaWNPdXRcblx0XHR9ID0gYXNzaWduKGFzc2lnbih7fSwgZGVmYXVsdHMpLCBwYXJhbXMpO1xuXHRcdGNvbnN0IGZyb20gPSBmcm9tX25vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0Y29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdGNvbnN0IGR4ID0gZnJvbS5sZWZ0IC0gdG8ubGVmdDtcblx0XHRjb25zdCBkeSA9IGZyb20udG9wIC0gdG8udG9wO1xuXHRcdGNvbnN0IGR3ID0gZnJvbS53aWR0aCAvIHRvLndpZHRoO1xuXHRcdGNvbnN0IGRoID0gZnJvbS5oZWlnaHQgLyB0by5oZWlnaHQ7XG5cdFx0Y29uc3QgZCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdFx0Y29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXHRcdGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG5cdFx0Y29uc3Qgb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuXHRcdHJldHVybiB7XG5cdFx0XHRkZWxheSxcblx0XHRcdGR1cmF0aW9uOiBpc19mdW5jdGlvbihkdXJhdGlvbikgPyBkdXJhdGlvbihkKSA6IGR1cmF0aW9uLFxuXHRcdFx0ZWFzaW5nLFxuXHRcdFx0Y3NzOiAodCwgdSkgPT4gYFxuXHRcdFx0XHRvcGFjaXR5OiAke3QgKiBvcGFjaXR5fTtcblx0XHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG5cdFx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke3UgKiBkeH1weCwke3UgKiBkeX1weCkgc2NhbGUoJHt0ICsgKDEgLSB0KSAqIGR3fSwgJHtcblx0XHRcdFx0dCArICgxIC0gdCkgKiBkaFxuXHRcdFx0fSk7XG5cdFx0XHRgXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge01hcDxhbnksIEVsZW1lbnQ+fSBpdGVtc1xuXHQgKiBAcGFyYW0ge01hcDxhbnksIEVsZW1lbnQ+fSBjb3VudGVycGFydHNcblx0ICogQHBhcmFtIHtib29sZWFufSBpbnRyb1xuXHQgKiBAcmV0dXJucyB7KG5vZGU6IGFueSwgcGFyYW1zOiBpbXBvcnQoJy4vcHVibGljJykuQ3Jvc3NmYWRlUGFyYW1zICYgeyBrZXk6IGFueTsgfSkgPT4gKCkgPT4gaW1wb3J0KCcuL3B1YmxpYycpLlRyYW5zaXRpb25Db25maWd9XG5cdCAqL1xuXHRmdW5jdGlvbiB0cmFuc2l0aW9uKGl0ZW1zLCBjb3VudGVycGFydHMsIGludHJvKSB7XG5cdFx0cmV0dXJuIChub2RlLCBwYXJhbXMpID0+IHtcblx0XHRcdGl0ZW1zLnNldChwYXJhbXMua2V5LCBub2RlKTtcblx0XHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRcdGlmIChjb3VudGVycGFydHMuaGFzKHBhcmFtcy5rZXkpKSB7XG5cdFx0XHRcdFx0Y29uc3Qgb3RoZXJfbm9kZSA9IGNvdW50ZXJwYXJ0cy5nZXQocGFyYW1zLmtleSk7XG5cdFx0XHRcdFx0Y291bnRlcnBhcnRzLmRlbGV0ZShwYXJhbXMua2V5KTtcblx0XHRcdFx0XHRyZXR1cm4gY3Jvc3NmYWRlKG90aGVyX25vZGUsIG5vZGUsIHBhcmFtcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gaWYgdGhlIG5vZGUgaXMgZGlzYXBwZWFyaW5nIGFsdG9nZXRoZXJcblx0XHRcdFx0Ly8gKGkuZS4gd2Fzbid0IGNsYWltZWQgYnkgdGhlIG90aGVyIGxpc3QpXG5cdFx0XHRcdC8vIHRoZW4gd2UgbmVlZCB0byBzdXBwbHkgYW4gb3V0cm9cblx0XHRcdFx0aXRlbXMuZGVsZXRlKHBhcmFtcy5rZXkpO1xuXHRcdFx0XHRyZXR1cm4gZmFsbGJhY2sgJiYgZmFsbGJhY2sobm9kZSwgcGFyYW1zLCBpbnRybyk7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblx0cmV0dXJuIFt0cmFuc2l0aW9uKHRvX3NlbmQsIHRvX3JlY2VpdmUsIGZhbHNlKSwgdHJhbnNpdGlvbih0b19yZWNlaXZlLCB0b19zZW5kLCB0cnVlKV07XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuY29uc3QgZGVmYXVsdEF0dHJpYnV0ZXMgPSB7XG4gICAgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgd2lkdGg6IDI0LFxuICAgIGhlaWdodDogMjQsXG4gICAgdmlld0JveDogJzAgMCAyNCAyNCcsXG4gICAgZmlsbDogJ25vbmUnLFxuICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gICAgJ3N0cm9rZS13aWR0aCc6IDIsXG4gICAgJ3N0cm9rZS1saW5lY2FwJzogJ3JvdW5kJyxcbiAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ3JvdW5kJyxcbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0QXR0cmlidXRlcztcbiIsICI8c2NyaXB0PmltcG9ydCBkZWZhdWx0QXR0cmlidXRlcyBmcm9tICcuL2RlZmF1bHRBdHRyaWJ1dGVzJztcbmV4cG9ydCBsZXQgbmFtZTtcbmV4cG9ydCBsZXQgY29sb3IgPSAnY3VycmVudENvbG9yJztcbmV4cG9ydCBsZXQgc2l6ZSA9IDI0O1xuZXhwb3J0IGxldCBzdHJva2VXaWR0aCA9IDI7XG5leHBvcnQgbGV0IGFic29sdXRlU3Ryb2tlV2lkdGggPSBmYWxzZTtcbmV4cG9ydCBsZXQgaWNvbk5vZGU7XG48L3NjcmlwdD5cblxuPHN2Z1xuICB7Li4uZGVmYXVsdEF0dHJpYnV0ZXN9XG4gIHsuLi4kJHJlc3RQcm9wc31cbiAgd2lkdGg9e3NpemV9XG4gIGhlaWdodD17c2l6ZX1cbiAgc3Ryb2tlPXtjb2xvcn1cbiAgc3Ryb2tlLXdpZHRoPXtcbiAgICBhYnNvbHV0ZVN0cm9rZVdpZHRoXG4gICAgICA/IE51bWJlcihzdHJva2VXaWR0aCkgKiAyNCAvIE51bWJlcihzaXplKVxuICAgICAgOiBzdHJva2VXaWR0aFxuICB9XG4gIGNsYXNzPXtgbHVjaWRlLWljb24gbHVjaWRlIGx1Y2lkZS0ke25hbWV9ICR7JCRwcm9wcy5jbGFzcyA/PyAnJ31gfVxuPlxuICB7I2VhY2ggaWNvbk5vZGUgYXMgW3RhZywgYXR0cnNdfVxuICAgIDxzdmVsdGU6ZWxlbWVudCB0aGlzPXt0YWd9IHsuLi5hdHRyc30vPlxuICB7L2VhY2h9XG4gIDxzbG90IC8+XG48L3N2Zz5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJtMTIgMTktNy03IDctN1wiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTE5IDEySDVcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQXJyb3dMZWZ0XG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSnRNVElnTVRrdE55MDNJRGN0TnlJZ0x6NEtJQ0E4Y0dGMGFDQmtQU0pOTVRrZ01USklOU0lnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvYXJyb3ctbGVmdFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJhcnJvdy1sZWZ0XCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJNMjAgNiA5IDE3bC01LTVcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQ2hlY2tcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKTk1qQWdOaUE1SURFM2JDMDFMVFVpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvY2hlY2tcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwiY2hlY2tcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIm02IDkgNiA2IDYtNlwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBDaGV2cm9uRG93blxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0p0TmlBNUlEWWdOaUEyTFRZaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NoZXZyb24tZG93blxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaGV2cm9uLWRvd25cIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIm05IDE4IDYtNi02LTZcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQ2hldnJvblJpZ2h0XG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSnRPU0F4T0NBMkxUWXROaTAySWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvY2hldnJvbi1yaWdodFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaGV2cm9uLXJpZ2h0XCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJtMTggMTUtNi02LTYgNlwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBDaGV2cm9uVXBcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE1UZ2dNVFV0TmkwMkxUWWdOaUlnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvY2hldnJvbi11cFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaGV2cm9uLXVwXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxMlwiLCBcImN5XCI6IFwiMTJcIiwgXCJyXCI6IFwiMTBcIiB9XSwgW1wibGluZVwiLCB7IFwieDFcIjogXCIxMlwiLCBcIngyXCI6IFwiMTJcIiwgXCJ5MVwiOiBcIjhcIiwgXCJ5MlwiOiBcIjEyXCIgfV0sIFtcImxpbmVcIiwgeyBcIngxXCI6IFwiMTJcIiwgXCJ4MlwiOiBcIjEyLjAxXCIsIFwieTFcIjogXCIxNlwiLCBcInkyXCI6IFwiMTZcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQ2lyY2xlQWxlcnRcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOFkybHlZMnhsSUdONFBTSXhNaUlnWTNrOUlqRXlJaUJ5UFNJeE1DSWdMejRLSUNBOGJHbHVaU0I0TVQwaU1USWlJSGd5UFNJeE1pSWdlVEU5SWpnaUlIa3lQU0l4TWlJZ0x6NEtJQ0E4YkdsdVpTQjRNVDBpTVRJaUlIZ3lQU0l4TWk0d01TSWdlVEU5SWpFMklpQjVNajBpTVRZaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NpcmNsZS1hbGVydFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaXJjbGUtYWxlcnRcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0yMiAxMS4wOFYxMmExMCAxMCAwIDEgMS01LjkzLTkuMTRcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIm05IDExIDMgM0wyMiA0XCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIENpcmNsZUNoZWNrQmlnXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NaklnTVRFdU1EaFdNVEpoTVRBZ01UQWdNQ0F4SURFdE5TNDVNeTA1TGpFMElpQXZQZ29nSUR4d1lYUm9JR1E5SW0wNUlERXhJRE1nTTB3eU1pQTBJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9jaXJjbGUtY2hlY2stYmlnXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImNpcmNsZS1jaGVjay1iaWdcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wiY2lyY2xlXCIsIHsgXCJjeFwiOiBcIjEyXCIsIFwiY3lcIjogXCIxMlwiLCBcInJcIjogXCIxMFwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTE3IDEyaC4wMVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTEyIDEyaC4wMVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTcgMTJoLjAxXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIENpcmNsZUVsbGlwc2lzXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0l4TWlJZ1kzazlJakV5SWlCeVBTSXhNQ0lnTHo0S0lDQThjR0YwYUNCa1BTSk5NVGNnTVRKb0xqQXhJaUF2UGdvZ0lEeHdZWFJvSUdROUlrMHhNaUF4TW1ndU1ERWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaVRUY2dNVEpvTGpBeElpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NpcmNsZS1lbGxpcHNpc1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJjaXJjbGUtZWxsaXBzaXNcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wiY2lyY2xlXCIsIHsgXCJjeFwiOiBcIjEyXCIsIFwiY3lcIjogXCIxMlwiLCBcInJcIjogXCIxMFwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTE1IDktNiA2XCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJtOSA5IDYgNlwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBDaXJjbGVYXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0l4TWlJZ1kzazlJakV5SWlCeVBTSXhNQ0lnTHo0S0lDQThjR0YwYUNCa1BTSnRNVFVnT1MwMklEWWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaWJUa2dPU0EySURZaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2NpcmNsZS14XG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImNpcmNsZS14XCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxMlwiLCBcImN5XCI6IFwiOVwiLCBcInJcIjogXCIxXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxOVwiLCBcImN5XCI6IFwiOVwiLCBcInJcIjogXCIxXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCI1XCIsIFwiY3lcIjogXCI5XCIsIFwiclwiOiBcIjFcIiB9XSwgW1wiY2lyY2xlXCIsIHsgXCJjeFwiOiBcIjEyXCIsIFwiY3lcIjogXCIxNVwiLCBcInJcIjogXCIxXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxOVwiLCBcImN5XCI6IFwiMTVcIiwgXCJyXCI6IFwiMVwiIH1dLCBbXCJjaXJjbGVcIiwgeyBcImN4XCI6IFwiNVwiLCBcImN5XCI6IFwiMTVcIiwgXCJyXCI6IFwiMVwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBHcmlwSG9yaXpvbnRhbFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4WTJseVkyeGxJR040UFNJeE1pSWdZM2s5SWpraUlISTlJakVpSUM4K0NpQWdQR05wY21Oc1pTQmplRDBpTVRraUlHTjVQU0k1SWlCeVBTSXhJaUF2UGdvZ0lEeGphWEpqYkdVZ1kzZzlJalVpSUdONVBTSTVJaUJ5UFNJeElpQXZQZ29nSUR4amFYSmpiR1VnWTNnOUlqRXlJaUJqZVQwaU1UVWlJSEk5SWpFaUlDOCtDaUFnUEdOcGNtTnNaU0JqZUQwaU1Ua2lJR041UFNJeE5TSWdjajBpTVNJZ0x6NEtJQ0E4WTJseVkyeGxJR040UFNJMUlpQmplVDBpTVRVaUlISTlJakVpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvZ3JpcC1ob3Jpem9udGFsXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImdyaXAtaG9yaXpvbnRhbFwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJjaXJjbGVcIiwgeyBcImN4XCI6IFwiMTJcIiwgXCJjeVwiOiBcIjEyXCIsIFwiclwiOiBcIjEwXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJNMTIgMTZ2LTRcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xMiA4aC4wMVwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBJbmZvXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0l4TWlJZ1kzazlJakV5SWlCeVBTSXhNQ0lnTHo0S0lDQThjR0YwYUNCa1BTSk5NVElnTVRaMkxUUWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaVRURXlJRGhvTGpBeElpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2luZm9cbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwiaW5mb1wiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTIwIDE2VjdhMiAyIDAgMCAwLTItMkg2YTIgMiAwIDAgMC0yIDJ2OW0xNiAwSDRtMTYgMCAxLjI4IDIuNTVhMSAxIDAgMCAxLS45IDEuNDVIMy42MmExIDEgMCAwIDEtLjktMS40NUw0IDE2XCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIExhcHRvcFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTWpBZ01UWldOMkV5SURJZ01DQXdJREF0TWkweVNEWmhNaUF5SURBZ01DQXdMVElnTW5ZNWJURTJJREJJTkcweE5pQXdJREV1TWpnZ01pNDFOV0V4SURFZ01DQXdJREV0TGprZ01TNDBOVWd6TGpZeVlURWdNU0F3SURBZ01TMHVPUzB4TGpRMVREUWdNVFlpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvbGFwdG9wXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cImxhcHRvcFwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTkgMjFINWEyIDIgMCAwIDEtMi0yVjVhMiAyIDAgMCAxIDItMmg0XCIgfV0sIFtcInBvbHlsaW5lXCIsIHsgXCJwb2ludHNcIjogXCIxNiAxNyAyMSAxMiAxNiA3XCIgfV0sIFtcImxpbmVcIiwgeyBcIngxXCI6IFwiMjFcIiwgXCJ4MlwiOiBcIjlcIiwgXCJ5MVwiOiBcIjEyXCIsIFwieTJcIjogXCIxMlwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBMb2dPdXRcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKTk9TQXlNVWcxWVRJZ01pQXdJREFnTVMweUxUSldOV0V5SURJZ01DQXdJREVnTWkweWFEUWlJQzgrQ2lBZ1BIQnZiSGxzYVc1bElIQnZhVzUwY3owaU1UWWdNVGNnTWpFZ01USWdNVFlnTnlJZ0x6NEtJQ0E4YkdsdVpTQjRNVDBpTWpFaUlIZ3lQU0k1SWlCNU1UMGlNVElpSUhreVBTSXhNaUlnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvbG9nLW91dFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJsb2ctb3V0XCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJNMTIgM2E2IDYgMCAwIDAgOSA5IDkgOSAwIDEgMS05LTlaXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIE1vb25cbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKTk1USWdNMkUySURZZ01DQXdJREFnT1NBNUlEa2dPU0F3SURFZ01TMDVMVGxhSWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvbW9vblxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJtb29uXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJNMTggOEwyMiAxMkwxOCAxNlwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTIgMTJIMjJcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgTW92ZVJpZ2h0XG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NVGdnT0V3eU1pQXhNa3d4T0NBeE5pSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1pQXhNa2d5TWlJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL21vdmUtcmlnaHRcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwibW92ZS1yaWdodFwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTE3IDNhMi44NSAyLjgzIDAgMSAxIDQgNEw3LjUgMjAuNSAyIDIybDEuNS01LjVaXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJtMTUgNSA0IDRcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgUGVuY2lsXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NVGNnTTJFeUxqZzFJREl1T0RNZ01DQXhJREVnTkNBMFREY3VOU0F5TUM0MUlESWdNakpzTVM0MUxUVXVOVm9pSUM4K0NpQWdQSEJoZEdnZ1pEMGliVEUxSURVZ05DQTBJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9wZW5jaWxcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwicGVuY2lsXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcInBhdGhcIiwgeyBcImRcIjogXCJtMTUgMTQgNS01LTUtNVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTIwIDlIOS41QTUuNSA1LjUgMCAwIDAgNCAxNC41djBBNS41IDUuNSAwIDAgMCA5LjUgMjBIMTNcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgUmVkbzJcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE1UVWdNVFFnTlMwMUxUVXROU0lnTHo0S0lDQThjR0YwYUNCa1BTSk5NakFnT1VnNUxqVkJOUzQxSURVdU5TQXdJREFnTUNBMElERTBMalYyTUVFMUxqVWdOUzQxSURBZ01DQXdJRGt1TlNBeU1FZ3hNeUlnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvcmVkby0yXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cInJlZG8tMlwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTMgMTJhOSA5IDAgMCAxIDktOSA5Ljc1IDkuNzUgMCAwIDEgNi43NCAyLjc0TDIxIDhcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0yMSAzdjVoLTVcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0yMSAxMmE5IDkgMCAwIDEtOSA5IDkuNzUgOS43NSAwIDAgMS02Ljc0LTIuNzRMMyAxNlwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTggMTZIM3Y1XCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFJlZnJlc2hDd1xuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTXlBeE1tRTVJRGtnTUNBd0lERWdPUzA1SURrdU56VWdPUzQzTlNBd0lEQWdNU0EyTGpjMElESXVOelJNTWpFZ09DSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1qRWdNM1kxYUMwMUlpQXZQZ29nSUR4d1lYUm9JR1E5SWsweU1TQXhNbUU1SURrZ01DQXdJREV0T1NBNUlEa3VOelVnT1M0M05TQXdJREFnTVMwMkxqYzBMVEl1TnpSTU15QXhOaUlnTHo0S0lDQThjR0YwYUNCa1BTSk5PQ0F4TmtnemRqVWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9yZWZyZXNoLWN3XG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cInJlZnJlc2gtY3dcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xMi4yMiAyaC0uNDRhMiAyIDAgMCAwLTIgMnYuMThhMiAyIDAgMCAxLTEgMS43M2wtLjQzLjI1YTIgMiAwIDAgMS0yIDBsLS4xNS0uMDhhMiAyIDAgMCAwLTIuNzMuNzNsLS4yMi4zOGEyIDIgMCAwIDAgLjczIDIuNzNsLjE1LjFhMiAyIDAgMCAxIDEgMS43MnYuNTFhMiAyIDAgMCAxLTEgMS43NGwtLjE1LjA5YTIgMiAwIDAgMC0uNzMgMi43M2wuMjIuMzhhMiAyIDAgMCAwIDIuNzMuNzNsLjE1LS4wOGEyIDIgMCAwIDEgMiAwbC40My4yNWEyIDIgMCAwIDEgMSAxLjczVjIwYTIgMiAwIDAgMCAyIDJoLjQ0YTIgMiAwIDAgMCAyLTJ2LS4xOGEyIDIgMCAwIDEgMS0xLjczbC40My0uMjVhMiAyIDAgMCAxIDIgMGwuMTUuMDhhMiAyIDAgMCAwIDIuNzMtLjczbC4yMi0uMzlhMiAyIDAgMCAwLS43My0yLjczbC0uMTUtLjA4YTIgMiAwIDAgMS0xLTEuNzR2LS41YTIgMiAwIDAgMSAxLTEuNzRsLjE1LS4wOWEyIDIgMCAwIDAgLjczLTIuNzNsLS4yMi0uMzhhMiAyIDAgMCAwLTIuNzMtLjczbC0uMTUuMDhhMiAyIDAgMCAxLTIgMGwtLjQzLS4yNWEyIDIgMCAwIDEtMS0xLjczVjRhMiAyIDAgMCAwLTItMnpcIiB9XSwgW1wiY2lyY2xlXCIsIHsgXCJjeFwiOiBcIjEyXCIsIFwiY3lcIjogXCIxMlwiLCBcInJcIjogXCIzXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFNldHRpbmdzXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NVEl1TWpJZ01tZ3RMalEwWVRJZ01pQXdJREFnTUMweUlESjJMakU0WVRJZ01pQXdJREFnTVMweElERXVOek5zTFM0ME15NHlOV0V5SURJZ01DQXdJREV0TWlBd2JDMHVNVFV0TGpBNFlUSWdNaUF3SURBZ01DMHlMamN6TGpjemJDMHVNakl1TXpoaE1pQXlJREFnTUNBd0lDNDNNeUF5TGpjemJDNHhOUzR4WVRJZ01pQXdJREFnTVNBeElERXVOekoyTGpVeFlUSWdNaUF3SURBZ01TMHhJREV1TnpSc0xTNHhOUzR3T1dFeUlESWdNQ0F3SURBdExqY3pJREl1TnpOc0xqSXlMak00WVRJZ01pQXdJREFnTUNBeUxqY3pMamN6YkM0eE5TMHVNRGhoTWlBeUlEQWdNQ0F4SURJZ01Hd3VORE11TWpWaE1pQXlJREFnTUNBeElERWdNUzQzTTFZeU1HRXlJRElnTUNBd0lEQWdNaUF5YUM0ME5HRXlJRElnTUNBd0lEQWdNaTB5ZGkwdU1UaGhNaUF5SURBZ01DQXhJREV0TVM0M00yd3VORE10TGpJMVlUSWdNaUF3SURBZ01TQXlJREJzTGpFMUxqQTRZVElnTWlBd0lEQWdNQ0F5TGpjekxTNDNNMnd1TWpJdExqTTVZVElnTWlBd0lEQWdNQzB1TnpNdE1pNDNNMnd0TGpFMUxTNHdPR0V5SURJZ01DQXdJREV0TVMweExqYzBkaTB1TldFeUlESWdNQ0F3SURFZ01TMHhMamMwYkM0eE5TMHVNRGxoTWlBeUlEQWdNQ0F3SUM0M015MHlMamN6YkMwdU1qSXRMak00WVRJZ01pQXdJREFnTUMweUxqY3pMUzQzTTJ3dExqRTFMakE0WVRJZ01pQXdJREFnTVMweUlEQnNMUzQwTXkwdU1qVmhNaUF5SURBZ01DQXhMVEV0TVM0M00xWTBZVElnTWlBd0lEQWdNQzB5TFRKNklpQXZQZ29nSUR4amFYSmpiR1VnWTNnOUlqRXlJaUJqZVQwaU1USWlJSEk5SWpNaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3NldHRpbmdzXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cInNldHRpbmdzXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxOFwiLCBcImN5XCI6IFwiNVwiLCBcInJcIjogXCIzXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCI2XCIsIFwiY3lcIjogXCIxMlwiLCBcInJcIjogXCIzXCIgfV0sIFtcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxOFwiLCBcImN5XCI6IFwiMTlcIiwgXCJyXCI6IFwiM1wiIH1dLCBbXCJsaW5lXCIsIHsgXCJ4MVwiOiBcIjguNTlcIiwgXCJ4MlwiOiBcIjE1LjQyXCIsIFwieTFcIjogXCIxMy41MVwiLCBcInkyXCI6IFwiMTcuNDlcIiB9XSwgW1wibGluZVwiLCB7IFwieDFcIjogXCIxNS40MVwiLCBcIngyXCI6IFwiOC41OVwiLCBcInkxXCI6IFwiNi41MVwiLCBcInkyXCI6IFwiMTAuNDlcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgU2hhcmUyXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0l4T0NJZ1kzazlJalVpSUhJOUlqTWlJQzgrQ2lBZ1BHTnBjbU5zWlNCamVEMGlOaUlnWTNrOUlqRXlJaUJ5UFNJeklpQXZQZ29nSUR4amFYSmpiR1VnWTNnOUlqRTRJaUJqZVQwaU1Ua2lJSEk5SWpNaUlDOCtDaUFnUEd4cGJtVWdlREU5SWpndU5Ua2lJSGd5UFNJeE5TNDBNaUlnZVRFOUlqRXpMalV4SWlCNU1qMGlNVGN1TkRraUlDOCtDaUFnUEd4cGJtVWdlREU5SWpFMUxqUXhJaUI0TWowaU9DNDFPU0lnZVRFOUlqWXVOVEVpSUhreVBTSXhNQzQwT1NJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3NoYXJlLTJcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwic2hhcmUtMlwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJjaXJjbGVcIiwgeyBcImN4XCI6IFwiMTJcIiwgXCJjeVwiOiBcIjEyXCIsIFwiclwiOiBcIjRcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xMiAydjJcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xMiAyMHYyXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJtNC45MyA0LjkzIDEuNDEgMS40MVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTE3LjY2IDE3LjY2IDEuNDEgMS40MVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTIgMTJoMlwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTIwIDEyaDJcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIm02LjM0IDE3LjY2LTEuNDEgMS40MVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTE5LjA3IDQuOTMtMS40MSAxLjQxXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFN1blxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4WTJseVkyeGxJR040UFNJeE1pSWdZM2s5SWpFeUlpQnlQU0kwSWlBdlBnb2dJRHh3WVhSb0lHUTlJazB4TWlBeWRqSWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaVRURXlJREl3ZGpJaUlDOCtDaUFnUEhCaGRHZ2daRDBpYlRRdU9UTWdOQzQ1TXlBeExqUXhJREV1TkRFaUlDOCtDaUFnUEhCaGRHZ2daRDBpYlRFM0xqWTJJREUzTGpZMklERXVOREVnTVM0ME1TSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1pQXhNbWd5SWlBdlBnb2dJRHh3WVhSb0lHUTlJazB5TUNBeE1tZ3lJaUF2UGdvZ0lEeHdZWFJvSUdROUltMDJMak0wSURFM0xqWTJMVEV1TkRFZ01TNDBNU0lnTHo0S0lDQThjR0YwYUNCa1BTSnRNVGt1TURjZ05DNDVNeTB4TGpReElERXVOREVpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvc3VuXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cInN1blwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTExIDE3YTQgNCAwIDAgMS04IDBWNWEyIDIgMCAwIDEgMi0yaDRhMiAyIDAgMCAxIDIgMlpcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xNi43IDEzSDE5YTIgMiAwIDAgMSAyIDJ2NGEyIDIgMCAwIDEtMiAySDdcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0gNyAxN2gwLjAxXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJtMTEgOCAyLjMtMi4zYTIuNCAyLjQgMCAwIDEgMy40MDQuMDA0TDE4LjYgNy42YTIuNCAyLjQgMCAwIDEgLjAyNiAzLjQzNEw5LjkgMTkuOFwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBTd2F0Y2hCb29rXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NVEVnTVRkaE5DQTBJREFnTUNBeExUZ2dNRlkxWVRJZ01pQXdJREFnTVNBeUxUSm9OR0V5SURJZ01DQXdJREVnTWlBeVdpSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1UWXVOeUF4TTBneE9XRXlJRElnTUNBd0lERWdNaUF5ZGpSaE1pQXlJREFnTUNBeExUSWdNa2czSWlBdlBnb2dJRHh3WVhSb0lHUTlJazBnTnlBeE4yZ3dMakF4SWlBdlBnb2dJRHh3WVhSb0lHUTlJbTB4TVNBNElESXVNeTB5TGpOaE1pNDBJREl1TkNBd0lEQWdNU0F6TGpRd05DNHdNRFJNTVRndU5pQTNMalpoTWk0MElESXVOQ0F3SURBZ01TQXVNREkySURNdU5ETTBURGt1T1NBeE9TNDRJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9zd2F0Y2gtYm9va1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJzd2F0Y2gtYm9va1wiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTMgNmgxOFwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTE5IDZ2MTRjMCAxLTEgMi0yIDJIN2MtMSAwLTItMS0yLTJWNlwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTggNlY0YzAtMSAxLTIgMi0yaDRjMSAwIDIgMSAyIDJ2MlwiIH1dLCBbXCJsaW5lXCIsIHsgXCJ4MVwiOiBcIjEwXCIsIFwieDJcIjogXCIxMFwiLCBcInkxXCI6IFwiMTFcIiwgXCJ5MlwiOiBcIjE3XCIgfV0sIFtcImxpbmVcIiwgeyBcIngxXCI6IFwiMTRcIiwgXCJ4MlwiOiBcIjE0XCIsIFwieTFcIjogXCIxMVwiLCBcInkyXCI6IFwiMTdcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgVHJhc2gyXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NeUEyYURFNElpQXZQZ29nSUR4d1lYUm9JR1E5SWsweE9TQTJkakUwWXpBZ01TMHhJREl0TWlBeVNEZGpMVEVnTUMweUxURXRNaTB5VmpZaUlDOCtDaUFnUEhCaGRHZ2daRDBpVFRnZ05sWTBZekF0TVNBeExUSWdNaTB5YURSak1TQXdJRElnTVNBeUlESjJNaUlnTHo0S0lDQThiR2x1WlNCNE1UMGlNVEFpSUhneVBTSXhNQ0lnZVRFOUlqRXhJaUI1TWowaU1UY2lJQzgrQ2lBZ1BHeHBibVVnZURFOUlqRTBJaUI0TWowaU1UUWlJSGt4UFNJeE1TSWdlVEk5SWpFM0lpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3RyYXNoLTJcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwidHJhc2gtMlwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwibTIxLjczIDE4LTgtMTRhMiAyIDAgMCAwLTMuNDggMGwtOCAxNEEyIDIgMCAwIDAgNCAyMWgxNmEyIDIgMCAwIDAgMS43My0zXCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJNMTIgOXY0XCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJNMTIgMTdoLjAxXCIgfV1dO1xuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFRyaWFuZ2xlQWxlcnRcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHRjBhQ0JrUFNKdE1qRXVOek1nTVRndE9DMHhOR0V5SURJZ01DQXdJREF0TXk0ME9DQXdiQzA0SURFMFFUSWdNaUF3SURBZ01DQTBJREl4YURFMllUSWdNaUF3SURBZ01DQXhMamN6TFRNaUlDOCtDaUFnUEhCaGRHZ2daRDBpVFRFeUlEbDJOQ0lnTHo0S0lDQThjR0YwYUNCa1BTSk5NVElnTVRkb0xqQXhJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy90cmlhbmdsZS1hbGVydFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJ0cmlhbmdsZS1hbGVydFwiIHsuLi4kJHByb3BzfSBpY29uTm9kZT17aWNvbk5vZGV9PlxuICA8c2xvdC8+XG48L0ljb24+XG4iLCAiPHNjcmlwdD4vKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1zdmVsdGUgdjAuMzY1LjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uLnN2ZWx0ZSc7XG5jb25zdCBpY29uTm9kZSA9IFtbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTkgMTQgNCA5bDUtNVwiIH1dLCBbXCJwYXRoXCIsIHsgXCJkXCI6IFwiTTQgOWgxMC41YTUuNSA1LjUgMCAwIDEgNS41IDUuNXYwYTUuNSA1LjUgMCAwIDEtNS41IDUuNUgxMVwiIH1dXTtcbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBVbmRvMlxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOT1NBeE5DQTBJRGxzTlMwMUlpQXZQZ29nSUR4d1lYUm9JR1E5SWswMElEbG9NVEF1TldFMUxqVWdOUzQxSURBZ01DQXhJRFV1TlNBMUxqVjJNR0UxTGpVZ05TNDFJREFnTUNBeExUVXVOU0ExTGpWSU1URWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy91bmRvLTJcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1zdmVsdGUgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0Z1bmN0aW9uYWxDb21wb25lbnR9IFN2ZWx0ZSBjb21wb25lbnRcbiAqXG4gKi9cbjwvc2NyaXB0PlxuXG48SWNvbiBuYW1lPVwidW5kby0yXCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICI8c2NyaXB0Pi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXN2ZWx0ZSB2MC4zNjUuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBJY29uIGZyb20gJy4uL0ljb24uc3ZlbHRlJztcbmNvbnN0IGljb25Ob2RlID0gW1tcImNpcmNsZVwiLCB7IFwiY3hcIjogXCIxMlwiLCBcImN5XCI6IFwiOFwiLCBcInJcIjogXCI1XCIgfV0sIFtcInBhdGhcIiwgeyBcImRcIjogXCJNMjAgMjFhOCA4IDAgMCAwLTE2IDBcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgVXNlclJvdW5kXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThZMmx5WTJ4bElHTjRQU0l4TWlJZ1kzazlJamdpSUhJOUlqVWlJQzgrQ2lBZ1BIQmhkR2dnWkQwaVRUSXdJREl4WVRnZ09DQXdJREFnTUMweE5pQXdJaUF2UGdvOEwzTjJaejRLKSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy91c2VyLXJvdW5kXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtc3ZlbHRlIC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbmFsQ29tcG9uZW50fSBTdmVsdGUgY29tcG9uZW50XG4gKlxuICovXG48L3NjcmlwdD5cblxuPEljb24gbmFtZT1cInVzZXItcm91bmRcIiB7Li4uJCRwcm9wc30gaWNvbk5vZGU9e2ljb25Ob2RlfT5cbiAgPHNsb3QvPlxuPC9JY29uPlxuIiwgIjxzY3JpcHQ+LyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtc3ZlbHRlIHYwLjM2NS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbi5zdmVsdGUnO1xuY29uc3QgaWNvbk5vZGUgPSBbW1wicGF0aFwiLCB7IFwiZFwiOiBcIk0xOCA2IDYgMThcIiB9XSwgW1wicGF0aFwiLCB7IFwiZFwiOiBcIm02IDYgMTIgMTJcIiB9XV07XG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgWFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRnZ05pQTJJREU0SWlBdlBnb2dJRHh3WVhSb0lHUTlJbTAySURZZ01USWdNVElpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMveFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXN2ZWx0ZSAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb25hbENvbXBvbmVudH0gU3ZlbHRlIGNvbXBvbmVudFxuICpcbiAqL1xuPC9zY3JpcHQ+XG5cbjxJY29uIG5hbWU9XCJ4XCIgey4uLiQkcHJvcHN9IGljb25Ob2RlPXtpY29uTm9kZX0+XG4gIDxzbG90Lz5cbjwvSWNvbj5cbiIsICJpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGZvY3VzRmlyc3RFbGVtZW50PzogYm9vbGVhbjtcbiAgb25Fc2NhcGU/OiAoKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgYW4gZWxlbWVudCBpcyBhbiBIVE1MRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChlbGVtZW50OiBFbGVtZW50IHwgSFRNTEVsZW1lbnQpOiBlbGVtZW50IGlzIEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuLyoqXG4gKiBGb2N1cyBhbiBlbGVtZW50IG9yIHRocm93IGFuIGVycm9yIGlmIGl0IGlzIG5vdCBhbiBIVE1MRWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZm9jdXNFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgaWYgKGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBlbGVtZW50LmZvY3VzKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVsZW1lbnQgaXMgbm90IGFuIEhUTUxFbGVtZW50IGFuZCBjYW5ub3QgYmUgZm9jdXNlZC5cIiwgZWxlbWVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTdmVsdGUgYWN0aW9uIHRvIHRyYXAgZm9jdXMgaW5zaWRlIGFuIGVsZW1lbnQuXG4gKlxuICogRm9jdXNhYmxlIGVsZW1lbnRzIGluc2lkZSB0aGUgZWxlbWVudCBtdXN0IGJlIGRlc2lnbmF0ZWQgd2l0aCBhXG4gKiBgZGF0YS1mb2N1c2luZGV4YCBhdHRyaWJ1dGUuIFRoaXMgYXR0cmlidXRlIHNob3VsZCBiZSBhIG51bWJlciwgYW5kIHRoZSBmaXJzdFxuICogZWxlbWVudCB0byBmb2N1cyBzaG91bGQgaGF2ZSBhIHZhbHVlIG9mIDAuIEV4YW1wbGU6IGA8YnV0dG9uIGRhdGEtZm9jdXNpbmRleD1cIjBcIj5gLlxuICpcbiAqIFRoZSBmb2N1c2FibGUgZWxlbWVudHMgY2FuIGJlIG5hdmlnYXRlZCB3aXRoIHRoZSB1cC9kb3duIGFycm93IGtleXMgYW5kIHRhYmJpbmcuXG4gKlxuICogVGhlIGVzY2FwZSBrZXkgY2FuIGJlIHVzZWQgdG8gcnVuIGEgY3VzdG9tIGNhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHRyYXAgZm9jdXMgaW5zaWRlLlxuICogQHBhcmFtIG9wdGlvbnMuZm9jdXNGaXJzdEVsZW1lbnQgV2hldGhlciB0byBmb2N1cyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgd2hlbiBjcmVhdGVkLlxuICogQHBhcmFtIG9wdGlvbnMub25Fc2NhcGUgQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzVHJhcChcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gIHsgZm9jdXNGaXJzdEVsZW1lbnQgPSBmYWxzZSwgb25Fc2NhcGUgPSB1bmRlZmluZWQgfTogT3B0aW9ucyxcbikge1xuICAvLyBHZXQgYWxsIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgdGhlIGVsZW1lbnQgdmlhIHRoZSBkYXRhLWZvY3VzaW5kZXggYXR0cmlidXRlLlxuICBjb25zdCBmb2N1c2FibGVFbGVtZW50cyA9IEFycmF5LmZyb20oZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZm9jdXNpbmRleF1cIikpO1xuXG4gIC8vIEZvY3VzIHRoZSBmaXJzdCBlbGVtZW50IGlmIHRoZSBvcHRpb24gaXMgc2V0LlxuICBpZiAoZm9jdXNGaXJzdEVsZW1lbnQpIHtcbiAgICBjb25zdCBmaXJzdEVsZW1lbnRUb0ZvY3VzID0gZm9jdXNhYmxlRWxlbWVudHMuZmluZChcbiAgICAgIChlbCkgPT4gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1mb2N1c2luZGV4XCIpID09PSBcIjBcIixcbiAgICApO1xuICAgIGZvY3VzRWxlbWVudChmaXJzdEVsZW1lbnRUb0ZvY3VzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGtleWRvd25IYW5kbGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgaW5kZXhPZkFjdGl2ZUVsZW1lbnQgPSBmb2N1c2FibGVFbGVtZW50cy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgIGNvbnN0IHByZXZpb3VzRWxlbWVudCA9XG4gICAgICBpbmRleE9mQWN0aXZlRWxlbWVudCA9PT0gMFxuICAgICAgICA/IGZvY3VzYWJsZUVsZW1lbnRzW2ZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgIDogZm9jdXNhYmxlRWxlbWVudHNbaW5kZXhPZkFjdGl2ZUVsZW1lbnQgLSAxXTtcbiAgICBjb25zdCBuZXh0RWxlbWVudCA9XG4gICAgICBpbmRleE9mQWN0aXZlRWxlbWVudCA9PT0gZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMVxuICAgICAgICA/IGZvY3VzYWJsZUVsZW1lbnRzWzBdXG4gICAgICAgIDogZm9jdXNhYmxlRWxlbWVudHNbaW5kZXhPZkFjdGl2ZUVsZW1lbnQgKyAxXTtcblxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlIFwiVGFiXCI6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnRzIHRhYmJpbmcgb3V0IG9mIHRoZSBlbGVtZW50XG5cbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgZm9jdXNFbGVtZW50KHByZXZpb3VzRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9jdXNFbGVtZW50KG5leHRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgICAgZm9jdXNFbGVtZW50KHByZXZpb3VzRWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgIGZvY3VzRWxlbWVudChuZXh0RWxlbWVudCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgIGlmIChvbkVzY2FwZSkge1xuICAgICAgICAgIG9uRXNjYXBlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlkb3duSGFuZGxlcik7XG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGUobmV3T3B0aW9uczogT3B0aW9ucykge1xuICAgICAgZm9jdXNGaXJzdEVsZW1lbnQgPSBuZXdPcHRpb25zLmZvY3VzRmlyc3RFbGVtZW50O1xuICAgICAgb25Fc2NhcGUgPSBuZXdPcHRpb25zLm9uRXNjYXBlO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwga2V5ZG93bkhhbmRsZXIpO1xuICAgIH0sXG4gIH07XG59XG4iLCAiLyoqXG4gKiBDaGVjayBpZiB0aGUgY2xpZW50IGNhbiBjb25uZWN0IHRvIHRoZSBvcmlnaW4gc2VydmVyLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zLnBhdGhuYW1lIC0gVVJMIHBhdGggdG8gdHJ5IHRvIHNlbmQgZmV0Y2ggcmVxdWVzdC4gRGVmYXVsdDogXCIvXCJcbiAqIEBwYXJhbSBvcHRpb25zLnRpbWVvdXQgLSBEZWZhdWx0OiA1MDAwIG1pbGxpc2Vjb25kc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlSXNDb25uZWN0ZWQoe1xuICBwYXRobmFtZSA9IFwiL1wiLFxuICB0aW1lb3V0ID0gNTAwMCxcbn06IHtcbiAgcGF0aG5hbWU/OiBzdHJpbmc7XG4gIHRpbWVvdXQ/OiBudW1iZXI7XG59KTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgLy8gQXZvaWQgQ09SUyBlcnJvcnMgd2l0aCByZXF1ZXN0IHRvIG93biBvcmlnaW4uXG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufSR7cGF0aG5hbWV9YCk7XG5cbiAgICAvLyBOb3RlOiBUaW1lc3RhbXAgaXMgdG8gcHJldmVudCBjYWNoZWQgcmVzcG9uc2VzLlxuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KFwiYnlwYXNzX3NlcnZpY2Vfd29ya2VyXCIsIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgLy8gVGltZW91dCB0byBwcmV2ZW50IGV4Y2Vzc2l2ZSB3YWl0IHRpbWUuXG4gICAgICBzaWduYWw6IEFib3J0U2lnbmFsLnRpbWVvdXQodGltZW91dCksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2Uub2s7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBMT0FESU5HX1NUQVJUX0VWRU5UID0gXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCI7XG5leHBvcnQgY29uc3QgTE9BRElOR19TVE9QX0VWRU5UID0gXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dUb3BCYXIoKSB7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChMT0FESU5HX1NUQVJUX0VWRU5UKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoaWRlVG9wQmFyKCkge1xuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoTE9BRElOR19TVE9QX0VWRU5UKSk7XG59XG4iLCAiaW1wb3J0IHtcblx0cnVuX2FsbCxcblx0c3Vic2NyaWJlLFxuXHRub29wLFxuXHRzYWZlX25vdF9lcXVhbCxcblx0aXNfZnVuY3Rpb24sXG5cdGdldF9zdG9yZV92YWx1ZVxufSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5qcyc7XG5cbmNvbnN0IHN1YnNjcmliZXJfcXVldWUgPSBbXTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYFJlYWRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjcmVhZGFibGVcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IFt2YWx1ZV0gaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuU3RhcnRTdG9wTm90aWZpZXI8VD59IFtzdGFydF1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuUmVhZGFibGU8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZSh2YWx1ZSwgc3RhcnQpIHtcblx0cmV0dXJuIHtcblx0XHRzdWJzY3JpYmU6IHdyaXRhYmxlKHZhbHVlLCBzdGFydCkuc3Vic2NyaWJlXG5cdH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYFdyaXRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyBib3RoIHVwZGF0aW5nIGFuZCByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjd3JpdGFibGVcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IFt2YWx1ZV0gaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuU3RhcnRTdG9wTm90aWZpZXI8VD59IFtzdGFydF1cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuV3JpdGFibGU8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0YWJsZSh2YWx1ZSwgc3RhcnQgPSBub29wKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlVuc3Vic2NyaWJlcn0gKi9cblx0bGV0IHN0b3A7XG5cdC8qKiBAdHlwZSB7U2V0PGltcG9ydCgnLi9wcml2YXRlLmpzJykuU3Vic2NyaWJlSW52YWxpZGF0ZVR1cGxlPFQ+Pn0gKi9cblx0Y29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG5cdC8qKiBAcGFyYW0ge1R9IG5ld192YWx1ZVxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGZ1bmN0aW9uIHNldChuZXdfdmFsdWUpIHtcblx0XHRpZiAoc2FmZV9ub3RfZXF1YWwodmFsdWUsIG5ld192YWx1ZSkpIHtcblx0XHRcdHZhbHVlID0gbmV3X3ZhbHVlO1xuXHRcdFx0aWYgKHN0b3ApIHtcblx0XHRcdFx0Ly8gc3RvcmUgaXMgcmVhZHlcblx0XHRcdFx0Y29uc3QgcnVuX3F1ZXVlID0gIXN1YnNjcmliZXJfcXVldWUubGVuZ3RoO1xuXHRcdFx0XHRmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2Ygc3Vic2NyaWJlcnMpIHtcblx0XHRcdFx0XHRzdWJzY3JpYmVyWzFdKCk7XG5cdFx0XHRcdFx0c3Vic2NyaWJlcl9xdWV1ZS5wdXNoKHN1YnNjcmliZXIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocnVuX3F1ZXVlKSB7XG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDsgaSArPSAyKSB7XG5cdFx0XHRcdFx0XHRzdWJzY3JpYmVyX3F1ZXVlW2ldWzBdKHN1YnNjcmliZXJfcXVldWVbaSArIDFdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGggPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlVwZGF0ZXI8VD59IGZuXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlKGZuKSB7XG5cdFx0c2V0KGZuKHZhbHVlKSk7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtpbXBvcnQoJy4vcHVibGljLmpzJykuU3Vic2NyaWJlcjxUPn0gcnVuXG5cdCAqIEBwYXJhbSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5JbnZhbGlkYXRvcjxUPn0gW2ludmFsaWRhdGVdXG5cdCAqIEByZXR1cm5zIHtpbXBvcnQoJy4vcHVibGljLmpzJykuVW5zdWJzY3JpYmVyfVxuXHQgKi9cblx0ZnVuY3Rpb24gc3Vic2NyaWJlKHJ1biwgaW52YWxpZGF0ZSA9IG5vb3ApIHtcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9wcml2YXRlLmpzJykuU3Vic2NyaWJlSW52YWxpZGF0ZVR1cGxlPFQ+fSAqL1xuXHRcdGNvbnN0IHN1YnNjcmliZXIgPSBbcnVuLCBpbnZhbGlkYXRlXTtcblx0XHRzdWJzY3JpYmVycy5hZGQoc3Vic2NyaWJlcik7XG5cdFx0aWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDEpIHtcblx0XHRcdHN0b3AgPSBzdGFydChzZXQsIHVwZGF0ZSkgfHwgbm9vcDtcblx0XHR9XG5cdFx0cnVuKHZhbHVlKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0c3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuXHRcdFx0aWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDAgJiYgc3RvcCkge1xuXHRcdFx0XHRzdG9wKCk7XG5cdFx0XHRcdHN0b3AgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHsgc2V0LCB1cGRhdGUsIHN1YnNjcmliZSB9O1xufVxuXG4vKipcbiAqIERlcml2ZWQgdmFsdWUgc3RvcmUgYnkgc3luY2hyb25pemluZyBvbmUgb3IgbW9yZSByZWFkYWJsZSBzdG9yZXMgYW5kXG4gKiBhcHBseWluZyBhbiBhZ2dyZWdhdGlvbiBmdW5jdGlvbiBvdmVyIGl0cyBpbnB1dCB2YWx1ZXMuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLXN0b3JlI2Rlcml2ZWRcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdG9yZXN9IFNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7U30gc3RvcmVzIC0gaW5wdXQgc3RvcmVzXG4gKiBAcGFyYW0geyh2YWx1ZXM6IGltcG9ydCgnLi9wcml2YXRlLmpzJykuU3RvcmVzVmFsdWVzPFM+LCBzZXQ6ICh2YWx1ZTogVCkgPT4gdm9pZCwgdXBkYXRlOiAoZm46IGltcG9ydCgnLi9wdWJsaWMuanMnKS5VcGRhdGVyPFQ+KSA9PiB2b2lkKSA9PiBpbXBvcnQoJy4vcHVibGljLmpzJykuVW5zdWJzY3JpYmVyIHwgdm9pZH0gZm4gLSBmdW5jdGlvbiBjYWxsYmFjayB0aGF0IGFnZ3JlZ2F0ZXMgdGhlIHZhbHVlc1xuICogQHBhcmFtIHtUfSBbaW5pdGlhbF92YWx1ZV0gLSBpbml0aWFsIHZhbHVlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fVxuICovXG5cbi8qKlxuICogRGVyaXZlZCB2YWx1ZSBzdG9yZSBieSBzeW5jaHJvbml6aW5nIG9uZSBvciBtb3JlIHJlYWRhYmxlIHN0b3JlcyBhbmRcbiAqIGFwcGx5aW5nIGFuIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIG92ZXIgaXRzIGlucHV0IHZhbHVlcy5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjZGVyaXZlZFxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4vcHJpdmF0ZS5qcycpLlN0b3Jlc30gU1xuICogQHRlbXBsYXRlIFRcbiAqIEBvdmVybG9hZFxuICogQHBhcmFtIHtTfSBzdG9yZXMgLSBpbnB1dCBzdG9yZXNcbiAqIEBwYXJhbSB7KHZhbHVlczogaW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdG9yZXNWYWx1ZXM8Uz4pID0+IFR9IGZuIC0gZnVuY3Rpb24gY2FsbGJhY2sgdGhhdCBhZ2dyZWdhdGVzIHRoZSB2YWx1ZXNcbiAqIEBwYXJhbSB7VH0gW2luaXRpYWxfdmFsdWVdIC0gaW5pdGlhbCB2YWx1ZVxuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5SZWFkYWJsZTxUPn1cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCcuL3ByaXZhdGUuanMnKS5TdG9yZXN9IFNcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1N9IHN0b3Jlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7VH0gW2luaXRpYWxfdmFsdWVdXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZChzdG9yZXMsIGZuLCBpbml0aWFsX3ZhbHVlKSB7XG5cdGNvbnN0IHNpbmdsZSA9ICFBcnJheS5pc0FycmF5KHN0b3Jlcyk7XG5cdC8qKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL3B1YmxpYy5qcycpLlJlYWRhYmxlPGFueT4+fSAqL1xuXHRjb25zdCBzdG9yZXNfYXJyYXkgPSBzaW5nbGUgPyBbc3RvcmVzXSA6IHN0b3Jlcztcblx0aWYgKCFzdG9yZXNfYXJyYXkuZXZlcnkoQm9vbGVhbikpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2Rlcml2ZWQoKSBleHBlY3RzIHN0b3JlcyBhcyBpbnB1dCwgZ290IGEgZmFsc3kgdmFsdWUnKTtcblx0fVxuXHRjb25zdCBhdXRvID0gZm4ubGVuZ3RoIDwgMjtcblx0cmV0dXJuIHJlYWRhYmxlKGluaXRpYWxfdmFsdWUsIChzZXQsIHVwZGF0ZSkgPT4ge1xuXHRcdGxldCBzdGFydGVkID0gZmFsc2U7XG5cdFx0Y29uc3QgdmFsdWVzID0gW107XG5cdFx0bGV0IHBlbmRpbmcgPSAwO1xuXHRcdGxldCBjbGVhbnVwID0gbm9vcDtcblx0XHRjb25zdCBzeW5jID0gKCkgPT4ge1xuXHRcdFx0aWYgKHBlbmRpbmcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y2xlYW51cCgpO1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gZm4oc2luZ2xlID8gdmFsdWVzWzBdIDogdmFsdWVzLCBzZXQsIHVwZGF0ZSk7XG5cdFx0XHRpZiAoYXV0bykge1xuXHRcdFx0XHRzZXQocmVzdWx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsZWFudXAgPSBpc19mdW5jdGlvbihyZXN1bHQpID8gcmVzdWx0IDogbm9vcDtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGNvbnN0IHVuc3Vic2NyaWJlcnMgPSBzdG9yZXNfYXJyYXkubWFwKChzdG9yZSwgaSkgPT5cblx0XHRcdHN1YnNjcmliZShcblx0XHRcdFx0c3RvcmUsXG5cdFx0XHRcdCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHZhbHVlc1tpXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHBlbmRpbmcgJj0gfigxIDw8IGkpO1xuXHRcdFx0XHRcdGlmIChzdGFydGVkKSB7XG5cdFx0XHRcdFx0XHRzeW5jKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQoKSA9PiB7XG5cdFx0XHRcdFx0cGVuZGluZyB8PSAxIDw8IGk7XG5cdFx0XHRcdH1cblx0XHRcdClcblx0XHQpO1xuXHRcdHN0YXJ0ZWQgPSB0cnVlO1xuXHRcdHN5bmMoKTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gc3RvcCgpIHtcblx0XHRcdHJ1bl9hbGwodW5zdWJzY3JpYmVycyk7XG5cdFx0XHRjbGVhbnVwKCk7XG5cdFx0XHQvLyBXZSBuZWVkIHRvIHNldCB0aGlzIHRvIGZhbHNlIGJlY2F1c2UgY2FsbGJhY2tzIGNhbiBzdGlsbCBoYXBwZW4gZGVzcGl0ZSBoYXZpbmcgdW5zdWJzY3JpYmVkOlxuXHRcdFx0Ly8gQ2FsbGJhY2tzIG1pZ2h0IGFscmVhZHkgYmUgcGxhY2VkIGluIHRoZSBxdWV1ZSB3aGljaCBkb2Vzbid0IGtub3cgaXQgc2hvdWxkIG5vIGxvbmdlclxuXHRcdFx0Ly8gaW52b2tlIHRoaXMgZGVyaXZlZCBzdG9yZS5cblx0XHRcdHN0YXJ0ZWQgPSBmYWxzZTtcblx0XHR9O1xuXHR9KTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHN0b3JlIGFuZCByZXR1cm5zIGEgbmV3IG9uZSBkZXJpdmVkIGZyb20gdGhlIG9sZCBvbmUgdGhhdCBpcyByZWFkYWJsZS5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtc3RvcmUjcmVhZG9ubHlcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5SZWFkYWJsZTxUPn0gc3RvcmUgIC0gc3RvcmUgdG8gbWFrZSByZWFkb25seVxuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5SZWFkYWJsZTxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRvbmx5KHN0b3JlKSB7XG5cdHJldHVybiB7XG5cdFx0c3Vic2NyaWJlOiBzdG9yZS5zdWJzY3JpYmUuYmluZChzdG9yZSlcblx0fTtcbn1cblxuZXhwb3J0IHsgZ2V0X3N0b3JlX3ZhbHVlIGFzIGdldCB9O1xuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5leHBvcnQgY29uc3QgaXNMaXN0c09wZW5lZCA9IHdyaXRhYmxlPGJvb2xlYW4+KHRydWUpO1xuZXhwb3J0IGNvbnN0IGlzVG9kb09wZW5lZCA9IHdyaXRhYmxlPGJvb2xlYW4+KHRydWUpO1xuZXhwb3J0IGNvbnN0IGl0ZW1Ub1Byb2Nlc3NJZCA9IHdyaXRhYmxlPHN0cmluZz4oXCJcIik7XG5leHBvcnQgY29uc3QgbmV3TGlzdCA9IHdyaXRhYmxlPHN0cmluZz4oXCJcIik7XG5leHBvcnQgY29uc3QgbmV3VG9kbyA9IHdyaXRhYmxlPHN0cmluZz4oXCJcIik7XG5leHBvcnQgY29uc3Qgb3BlbmVkTWVudUlkID0gd3JpdGFibGU8c3RyaW5nPihcIlwiKTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdGVkTGlzdElkID0gd3JpdGFibGU8c3RyaW5nPihcIlwiKTtcbmV4cG9ydCBjb25zdCB1cmxIYXNoID0gd3JpdGFibGU8XCJcIiB8IFwiYWJvdXRcIiB8IFwibGlzdElkXCI+KFwiXCIpO1xuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5leHBvcnQgY29uc3QgdG9hc3QgPSB3cml0YWJsZTx7XG4gIHNob3c6IGJvb2xlYW47XG4gIGtpbmQ6IFwiaW5mb1wiIHwgXCJlcnJvclwiO1xuICB0aXRsZTogc3RyaW5nO1xuICBtc2c6IHN0cmluZztcbn0+KHtcbiAgc2hvdzogZmFsc2UsXG4gIGtpbmQ6IFwiaW5mb1wiLFxuICB0aXRsZTogXCJcIixcbiAgbXNnOiBcIlwiLFxufSk7XG4iLCAiZXhwb3J0IGNvbnN0IHByaXZhdGVBc3NldHMgPSBbXCIvYXBwXCJdO1xuZXhwb3J0IGNvbnN0IHB1YmxpY0Fzc2V0cyA9IFtcbiAgXCIvZmF2aWNvbi5pY29cIixcbiAgXCIvYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmdcIixcbiAgXCIvYW5kcm9pZC1jaHJvbWUtNTEyeDUxMi5wbmdcIixcbiAgXCIvYXBwbGUtdG91Y2gtaWNvbi5wbmdcIixcbiAgXCIvYnJvd3NlcmNvbmZpZy54bWxcIixcbiAgXCIvZmF2aWNvbi0xNngxNi5wbmdcIixcbiAgXCIvZmF2aWNvbi0zMngzMi5wbmdcIixcbiAgXCIvbXN0aWxlLTE1MHgxNTAucG5nXCIsXG4gIFwiL29nLnBuZ1wiLFxuICBcIi9zYWZhcmktcGlubmVkLXRhYi5zdmdcIixcbiAgXCIvc2NyZWVuc2hvdC1uYXJyb3ctbGlnaHQucG5nXCIsXG4gIFwiL3NjcmVlbnNob3QtbmFycm93LWRhcmsucG5nXCIsXG4gIFwiL3NjcmVlbnNob3Qtd2lkZS1saWdodC5wbmdcIixcbiAgXCIvc2NyZWVuc2hvdC13aWRlLWRhcmsucG5nXCIsXG4gIFwiL3NpdGUud2VibWFuaWZlc3RcIixcblxuICAvLyBOb3RlOiBUaGlzIHJvdXRlIHNob3VsZCBvbmx5IGJlIGNhY2hlZCBhZnRlciBsb2dpbiBzbyB0aGF0XG4gIC8vIERhdGFDbGVhcmVyIGRvZXMgbm90IHJ1bi5cbiAgXCIvb2ZmbGluZVwiLFxuXTtcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiIGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZnVuY3Rpb24gZ2V0QXBwSnNBbmRDc3MoKSB7XG4gICAgY29uc3QgYXBwSnNTY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInNjcmlwdFtwaHgtdHJhY2stc3RhdGljXVwiKTtcbiAgICBjb25zdCBhcHBKc1VybCA9IG5ldyBVUkwoYXBwSnNTY3JpcHQuc3JjKTtcbiAgICBjb25zdCBhcHBKcyA9IGAke2FwcEpzVXJsLnBhdGhuYW1lfSR7YXBwSnNVcmwuc2VhcmNofWA7XG5cbiAgICBjb25zdCBhcHBDc3NMaW5rOiBIVE1MTGlua0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibGlua1twaHgtdHJhY2stc3RhdGljXVwiKTtcbiAgICBjb25zdCBhcHBDc3NVcmwgPSBuZXcgVVJMKGFwcENzc0xpbmsuaHJlZik7XG4gICAgY29uc3QgYXBwQ3NzID0gYCR7YXBwQ3NzVXJsLnBhdGhuYW1lfSR7YXBwQ3NzVXJsLnNlYXJjaH1gO1xuXG4gICAgcmV0dXJuIHsgYXBwSnMsIGFwcENzcyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVxdWVzdEFzc2V0Q2FjaGluZyhhc3NldHM6IHN0cmluZ1tdKSB7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXI/LmNvbnRyb2xsZXI/LnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwicmVxdWVzdF9hc3NldF9jYWNoaW5nXCIsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIGFzc2V0cyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gcmVxdWVzdEFzc2V0RGVsZXRpb24oYXNzZXRzOiBzdHJpbmdbXSkge1xuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyPy5jb250cm9sbGVyPy5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcInJlcXVlc3RfYXNzZXRfZGVsZXRpb25cIixcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgYXNzZXRzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcXVlc3RTZXJ2aWNlV29ya2VyVmVyc2lvbigpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcj8uY29udHJvbGxlcj8ucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJyZXF1ZXN0X3NlcnZpY2Vfd29ya2VyX3ZlcnNpb25cIixcbiAgICB9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgdXNlSXNDb25uZWN0ZWQgfSBmcm9tIFwiJGxpYi9ob29rcy91c2VJc0Nvbm5lY3RlZFwiO1xuICBpbXBvcnQgeyBwcml2YXRlQXNzZXRzLCBwdWJsaWNBc3NldHMgfSBmcm9tIFwiJGxpYi9hc3NldHNcIjtcblxuICBleHBvcnQgbGV0IHNlcnZpY2VXb3JrZXJWZXJzaW9uOiBzdHJpbmc7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXI/LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIChldmVudCkgPT4ge1xuICAgICAgc3dpdGNoIChldmVudC5kYXRhLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJlcXVlc3Rfc2tpcF93YWl0aW5nXCI6XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJyZXF1ZXN0X3NlcnZpY2Vfd29ya2VyX3ZlcnNpb25cIjpcbiAgICAgICAgICBzZXJ2aWNlV29ya2VyVmVyc2lvbiA9IGV2ZW50LmRhdGEucGF5bG9hZC5zZXJ2aWNlV29ya2VyVmVyc2lvbjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmtub3duIG1lc3NhZ2UgdHlwZSByZWNlaXZlZCBmcm9tIHNlcnZpY2Ugd29ya2VyLlwiLCBldmVudC5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgdXNlSXNDb25uZWN0ZWQoeyB0aW1lb3V0OiAxMDAwMCB9KS50aGVuKChpc0Nvbm5lY3RlZCkgPT4ge1xuICAgICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICAgIGNvbnN0IHsgYXBwSnMsIGFwcENzcyB9ID0gZ2V0QXBwSnNBbmRDc3MoKTtcbiAgICAgICAgcmVxdWVzdEFzc2V0Q2FjaGluZyhbLi4ucHJpdmF0ZUFzc2V0cywgLi4ucHVibGljQXNzZXRzLCBhcHBKcywgYXBwQ3NzXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIHJlcXVlc3RTZXJ2aWNlV29ya2VyVmVyc2lvbigpO1xuICB9KTtcbjwvc2NyaXB0PlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IHNjYWxlIH0gZnJvbSBcInN2ZWx0ZS90cmFuc2l0aW9uXCI7XG4gIGltcG9ydCB7IEluZm8sIExvZ091dCwgU2V0dGluZ3MsIFVzZXJSb3VuZCB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgZm9jdXNUcmFwIH0gZnJvbSBcIiRsaWIvYWN0aW9ucy9mb2N1c1RyYXAuanNcIjtcbiAgaW1wb3J0IHsgdXNlSXNDb25uZWN0ZWQgfSBmcm9tIFwiJGxpYi9ob29rcy91c2VJc0Nvbm5lY3RlZFwiO1xuICBpbXBvcnQgeyBzaG93VG9wQmFyLCBoaWRlVG9wQmFyIH0gZnJvbSBcIiRsaWIvdG9wYmFyXCI7XG5cbiAgaW1wb3J0IHsgb3BlbmVkTWVudUlkLCB1cmxIYXNoIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IHRvYXN0IH0gZnJvbSBcIiRzdG9yZXMvdG9hc3RcIjtcblxuICBpbXBvcnQgeyBjbGVhclVzZXJEYXRhIH0gZnJvbSBcIi4vRGF0YUNsZWFyZXIuc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBjdXJyZW50VXNlckVtYWlsOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgc2VydmljZVdvcmtlclZlcnNpb246IHN0cmluZztcbiAgZXhwb3J0IGxldCBpc0NsaWVudFN0YXRlUmVzdG9yZWQ6IGJvb2xlYW47XG4gIGV4cG9ydCBsZXQgbWVudUNsYXNzOiBzdHJpbmc7XG5cbiAgY29uc3QgYWNjb3VudE1lbnVJZCA9IFwiYWNjb3VudC1tZW51LWlkXCI7XG4gIGxldCBpc0xvZ091dExvYWRpbmcgPSBmYWxzZTtcbiAgbGV0IGlzU2V0dGluZ3NMb2FkaW5nID0gZmFsc2U7XG4gIGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICBsZXQgZm9jdXNGaXJzdEVsZW1lbnQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzaG93QWJvdXQoKSB7XG4gICAgJHVybEhhc2ggPSBcImFib3V0XCI7XG4gICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIGAvYXBwIyR7JHVybEhhc2h9YCk7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc2hvd1NldHRpbmdzKCkge1xuICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICBpc1NldHRpbmdzTG9hZGluZyA9IHRydWU7XG4gICAgc2hvd1RvcEJhcigpO1xuXG4gICAgY29uc3QgaXNDb25uZWN0ZWQgPSBhd2FpdCB1c2VJc0Nvbm5lY3RlZCh7fSk7XG4gICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgJHRvYXN0ID0ge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgIHRpdGxlOiBcIldob29wcywgY2FuJ3QgY29ubmVjdCB0byBzZXJ2ZXIuLi5cIixcbiAgICAgICAgbXNnOiBcIllvdSBtdXN0IGJlIGNvbm5lY3RlZCB0byB2aWV3IHNldHRpbmdzLiBQbGVhc2UgY2hlY2sgeW91ciBjb25uZWN0aW9uIG9yIHRyeSByZWZyZXNoaW5nLlwiLFxuICAgICAgfTtcbiAgICAgIGhpZGVUb3BCYXIoKTtcbiAgICAgIGlzU2V0dGluZ3NMb2FkaW5nID0gZmFsc2U7XG4gICAgICBkaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICRvcGVuZWRNZW51SWQgPSBcIlwiO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIvdXNlcnMvc2V0dGluZ3NcIjtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGxvZ091dFVzZXIoKSB7XG4gICAgZGlzYWJsZWQgPSB0cnVlO1xuICAgIGlzTG9nT3V0TG9hZGluZyA9IHRydWU7XG4gICAgc2hvd1RvcEJhcigpO1xuXG4gICAgY29uc3QgaXNDb25uZWN0ZWQgPSBhd2FpdCB1c2VJc0Nvbm5lY3RlZCh7fSk7XG4gICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgJHRvYXN0ID0ge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBraW5kOiBcImVycm9yXCIsXG4gICAgICAgIHRpdGxlOiBcIldob29wcywgY2FuJ3QgY29ubmVjdCB0byBzZXJ2ZXIuLi5cIixcbiAgICAgICAgbXNnOiBcIllvdSBtdXN0IGJlIGNvbm5lY3RlZCB0byBsb2dvdXQuIFBsZWFzZSBjaGVjayB5b3VyIGNvbm5lY3Rpb24gb3IgdHJ5IHJlZnJlc2hpbmcuXCIsXG4gICAgICB9O1xuICAgICAgaGlkZVRvcEJhcigpO1xuICAgICAgaXNMb2dPdXRMb2FkaW5nID0gZmFsc2U7XG4gICAgICBkaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRoaXMgc2hvd3MgdGhlIHNrZWxldG9uIHNjcmVlbiBhbmQgYWxzbyBzdG9wcyBjbGllbnQgc3RhdGUgZnJvbSBiZWluZyBzYXZlZCB0byBsb2NhbFN0b3JhZ2UuXG4gICAgaXNDbGllbnRTdGF0ZVJlc3RvcmVkID0gZmFsc2U7XG5cbiAgICBjbGVhclVzZXJEYXRhKCk7XG5cbiAgICBjb25zdCBsb2dPdXRMaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2ctb3V0LWxpbmtcIik7XG4gICAgdHJ5IHtcbiAgICAgIGxvZ091dExpbmsuY2xpY2soKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICBhbGVydChcIkVycm9yIGxvZ2dpbmcgb3V0LiBQbGVhc2UgdHJ5IGFnYWluLlwiKTtcbiAgICB9XG4gIH1cblxuICAkOiBpZiAoJG9wZW5lZE1lbnVJZCAhPT0gYWNjb3VudE1lbnVJZCkge1xuICAgIGZvY3VzRmlyc3RFbGVtZW50ID0gZmFsc2U7XG4gIH1cbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwie21lbnVDbGFzc30gcmVsYXRpdmVcIj5cbiAgPGJ1dHRvblxuICAgIGNsYXNzPVwiXG4gICAgICBteS0xIGJ0biBidG4tY2lyY2xlIGJ0bi1uZXV0cmFsXG4gICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICBcIlxuICAgIGFyaWEtbGFiZWw9XCJBY2NvdW50IE1lbnUuXCJcbiAgICB0aXRsZT1cIkNsaWNrIHRvIG9wZW4gYWNjb3VudCBtZW51LlwiXG4gICAgb246Y2xpY2s9eygpID0+ICgkb3BlbmVkTWVudUlkID0gJG9wZW5lZE1lbnVJZCA9PT0gYWNjb3VudE1lbnVJZCA/IFwiXCIgOiBhY2NvdW50TWVudUlkKX1cbiAgICBvbjprZXlkb3duPXsoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiIFwiKSB7XG4gICAgICAgIGZvY3VzRmlyc3RFbGVtZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9fVxuICA+XG4gICAgPFVzZXJSb3VuZCAvPlxuICA8L2J1dHRvbj5cblxuICB7I2lmICRvcGVuZWRNZW51SWQgPT09IGFjY291bnRNZW51SWR9XG4gICAgPGRpdlxuICAgICAgaW46c2NhbGU9e3sgZHVyYXRpb246IDEwMCB9fVxuICAgICAgdXNlOmZvY3VzVHJhcD17e1xuICAgICAgICBmb2N1c0ZpcnN0RWxlbWVudCxcbiAgICAgICAgb25Fc2NhcGU6ICgpID0+ICgkb3BlbmVkTWVudUlkID0gXCJcIiksXG4gICAgICB9fVxuICAgICAgY2xhc3M9XCJtZW51IGJnLWJhc2UtMjAwIGJvcmRlciBib3JkZXItbmV1dHJhbCByb3VuZGVkLWJveCBhYnNvbHV0ZSByaWdodC0wXCJcbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzPVwicHgtNCBweS0yIGZvbnQtYm9sZCBib3JkZXItYiBib3JkZXItbmV1dHJhbCByb3VuZGVkLW5vbmUgbWItMS41XCI+XG4gICAgICAgIHtjdXJyZW50VXNlckVtYWlsfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgdGl0bGU9XCJDdXJyZW50IHNlcnZpY2Ugd29ya2VyIHZlcnNpb24uXCJcbiAgICAgICAgICBjbGFzcz1cInRleHQteHMgZm9udC1ub3JtYWwgaC00XCJcbiAgICAgICAgICBjbGFzczpza2VsZXRvbj17IXNlcnZpY2VXb3JrZXJWZXJzaW9ufVxuICAgICAgICA+XG4gICAgICAgICAge3NlcnZpY2VXb3JrZXJWZXJzaW9ufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8dWw+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMFwiXG4gICAgICAgICAgICBjbGFzcz1cIlxuICAgICAgICAgICAgICBmbGV4IGdhcC0yXG4gICAgICAgICAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIGhyZWY9XCIvYXBwI2Fib3V0XCJcbiAgICAgICAgICAgIG9uOmNsaWNrfHByZXZlbnREZWZhdWx0PXtzaG93QWJvdXR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEluZm8gY2xhc3M9XCJoLTQgdy00XCIgLz5cbiAgICAgICAgICAgIEFib3V0XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMVwiXG4gICAgICAgICAgICBjbGFzcz1cIlxuICAgICAgICAgICAgICBmbGV4IGdhcC0yXG4gICAgICAgICAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIGhyZWY9XCIvdXNlcnMvc2V0dGluZ3NcIlxuICAgICAgICAgICAgb246Y2xpY2t8cHJldmVudERlZmF1bHQ9e3Nob3dTZXR0aW5nc31cbiAgICAgICAgICAgIGNsYXNzOnBvaW50ZXItZXZlbnRzLW5vbmU9e2Rpc2FibGVkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTZXR0aW5ncyBjbGFzcz1cImgtNCB3LTRcIiAvPlxuICAgICAgICAgICAgU2V0dGluZ3NcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibG9hZGluZyBsb2FkaW5nLWRvdHMgbG9hZGluZy14c1wiIGNsYXNzOmhpZGRlbj17IWlzU2V0dGluZ3NMb2FkaW5nfT48L3NwYW4+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBkYXRhLWZvY3VzaW5kZXg9XCIyXCJcbiAgICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICAgIGZsZXggZ2FwLTJcbiAgICAgICAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgb246Y2xpY2s9e2xvZ091dFVzZXJ9XG4gICAgICAgICAgICB7ZGlzYWJsZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPExvZ091dCBjbGFzcz1cImgtNCB3LTRcIiAvPlxuICAgICAgICAgICAgTG9nIG91dFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2FkaW5nIGxvYWRpbmctZG90cyBsb2FkaW5nLXhzXCIgY2xhc3M6aGlkZGVuPXshaXNMb2dPdXRMb2FkaW5nfT48L3NwYW4+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICB7L2lmfVxuPC9kaXY+XG4iLCAidmFyIHByZWZpeCA9IFwiZmFiXCI7XG52YXIgZmFNb25lcm8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbW9uZXJvJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmM2QwXCIsIFwiTTM1MiAzODRoMTA4LjRDNDE3IDQ1NS45IDMzOC4xIDUwNCAyNDggNTA0Uzc5IDQ1NS45IDM1LjYgMzg0SDE0NFYyNTYuMkwyNDggMzYxbDEwNC0xMDV2MTI4ek04OCAzMzZWMTI4bDE1OS40IDE1OS40TDQwOCAxMjh2MjA4aDc0LjhjOC41LTI1LjEgMTMuMi01MiAxMy4yLTgwQzQ5NiAxMTkgMzg1IDggMjQ4IDhTMCAxMTkgMCAyNTZjMCAyOCA0LjYgNTQuOSAxMy4yIDgwSDg4elwiXVxufTtcbnZhciBmYUhvb2xpID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2hvb2xpJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNDI3XCIsIFwiTTE0NC41IDM1MmwzOC4zLjhjLTEzLjItNC42LTI2LTEwLjItMzguMy0xNi44em01Ny43LTUuM3Y1LjNsLTE5LjQuOGMzNi41IDEyLjUgNjkuOSAxNC4yIDk0LjcgNy4yLTE5LjkuMi00NS44LTIuNi03NS4zLTEzLjN6bTQwOC45LTExNS4yYzE1LjkgMCAyOC45LTEyLjkgMjguOS0yOC45cy0xMi45LTI0LjUtMjguOS0yNC41Yy0xNS45IDAtMjguOSA4LjYtMjguOSAyNC41czEyLjkgMjguOSAyOC45IDI4Ljl6bS0yOSAxMjAuNUg2NDBWMjQxLjVoLTU3Ljl6bS03My43IDBoNTcuOVYxNTYuN0w1MDguNCAxODR6bS0zMS0xMTkuNGMtMTguMi0xOC4yLTUwLjQtMTcuMS01MC40LTE3LjFzLTMyLjMtMS4xLTUwLjQgMTcuMWMtMTguMiAxOC4yLTE2LjggMzMuOS0xNi44IDUyLjZzLTEuNCAzNC4zIDE2LjggNTIuNSA1MC40IDE3LjEgNTAuNCAxNy4xIDMyLjMgMS4xIDUwLjQtMTcuMWMxOC4yLTE4LjIgMTYuOC0zMy44IDE2LjgtNTIuNS0uMS0xOC44IDEuMy0zNC41LTE2LjgtNTIuNnptLTM5LjggNzEuOWMwIDMuNi0xLjggMTIuNS0xMC43IDEyLjVzLTEwLjctOC45LTEwLjctMTIuNXYtNDAuNGMwLTguNyA3LjMtMTAuOSAxMC43LTEwLjlzMTAuNyAyLjEgMTAuNyAxMC45em0tMTA2LjItNzEuOWMtMTguMi0xOC4yLTUwLjQtMTcuMS01MC40LTE3LjFzLTMyLjItMS4xLTUwLjQgMTcuMWMtMS45IDEuOS0zLjcgMy45LTUuMyA2LTM4LjItMjkuNi03Mi41LTQ2LjUtMTAyLjEtNjEuMXYtMjAuN2wtMjIuNSAxMC42Yy01NC40LTIyLjEtODktMTguMi05Ny4zLjEgMCAwLTI0LjkgMzIuOCA2MS44IDExMC44VjM1Mmg1Ny45di0yOC42Yy02LjUtNC4yLTEzLTguNy0xOS40LTEzLjYtMTQuOC0xMS4yLTI3LjQtMjEuNi0zOC40LTMxLjR2LTMxYzEzLjEgMTQuNyAzMC41IDMxLjQgNTMuNCA1MC4zbDQuNSAzLjZ2LTI5LjhjMC02LjkgMS43LTE4LjIgMTAuOC0xOC4yczEwLjYgNi45IDEwLjYgMTVWMzE3YzE4IDEyLjIgMzcuMyAyMi4xIDU3LjcgMjkuNnYtOTMuOWMwLTE4LjctMTMuNC0zNy40LTQwLjYtMzcuNC0xNS44LS4xLTMwLjUgOC4yLTM4LjUgMjEuOXYtNTQuM2M0MS45IDIwLjkgODMuOSA0Ni41IDk5LjkgNTguMy0xMC4yIDE0LjYtOS4zIDI4LjEtOS4zIDQzLjcgMCAxOC43LTEuNCAzNC4zIDE2LjggNTIuNXM1MC40IDE3LjEgNTAuNCAxNy4xIDMyLjMgMS4xIDUwLjQtMTcuMWMxOC4yLTE4LjIgMTYuNy0zMy44IDE2LjctNTIuNSAwLTE4LjUgMS41LTM0LjItMTYuNy01Mi4zek02NS4yIDE4NHY2My4zYy00OC43LTU0LjUtMzguOS03Ni0zNS4yLTc5LjEgMTMuNS0xMS40IDM3LjUtOCA2NC40IDIuMXptMjI2LjUgMTIwLjVjMCAzLjYtMS44IDEyLjUtMTAuNyAxMi41cy0xMC43LTguOS0xMC43LTEyLjV2LTQwLjRjMC04LjcgNy4zLTEwLjkgMTAuNy0xMC45czEwLjcgMi4xIDEwLjcgMTAuOXpcIl1cbn07XG52YXIgZmFZZWxwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3llbHAnLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYxZTlcIiwgXCJNNDIuOSAyNDAuMzJsOTkuNjIgNDguNjFjMTkuMiA5LjQgMTYuMiAzNy41MS00LjUgNDIuNzFMMzAuNSAzNTguNDVhMjIuNzkgMjIuNzkgMCAwIDEtMjguMjEtMTkuNiAxOTcuMTYgMTk3LjE2IDAgMCAxIDktODUuMzIgMjIuOCAyMi44IDAgMCAxIDMxLjYxLTEzLjIxem00NCAyMzkuMjVhMTk5LjQ1IDE5OS40NSAwIDAgMCA3OS40MiAzMi4xMUEyMi43OCAyMi43OCAwIDAgMCAxOTIuOTQgNDkwbDMuOS0xMTAuODJjLjctMjEuMy0yNS41LTMxLjkxLTM5LjgxLTE2LjFsLTc0LjIxIDgyLjRhMjIuODIgMjIuODIgMCAwIDAgNC4wOSAzNC4wOXptMTQ1LjM0LTEwOS45Mmw1OC44MSA5NGEyMi45MyAyMi45MyAwIDAgMCAzNCA1LjUgMTk4LjM2IDE5OC4zNiAwIDAgMCA1Mi43MS02Ny42MUEyMyAyMyAwIDAgMCAzNjQuMTcgMzcwbC0xMDUuNDItMzQuMjZjLTIwLjMxLTYuNS0zNy44MSAxNS44LTI2LjUxIDMzLjkxem0xNDguMzMtMTMyLjIzYTE5Ny40NCAxOTcuNDQgMCAwIDAtNTAuNDEtNjkuMzEgMjIuODUgMjIuODUgMCAwIDAtMzQgNC40bC02MiA5MS45MmMtMTEuOSAxNy43IDQuNyA0MC42MSAyNS4yIDM0LjcxTDM2NiAyNjguNjNhMjMgMjMgMCAwIDAgMTQuNjEtMzEuMjF6TTYyLjExIDMwLjE4YTIyLjg2IDIyLjg2IDAgMCAwLTkuOSAzMmwxMDQuMTIgMTgwLjQ0YzExLjcgMjAuMiA0Mi42MSAxMS45IDQyLjYxLTExLjRWMjIuODhhMjIuNjcgMjIuNjcgMCAwIDAtMjQuNS0yMi44IDMyMC4zNyAzMjAuMzcgMCAwIDAtMTEyLjMzIDMwLjF6XCJdXG59O1xudmFyIGZhQ2NWaXNhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NjLXZpc2EnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYxZjBcIiwgXCJNNDcwLjEgMjMxLjNzNy42IDM3LjIgOS4zIDQ1SDQ0NmMzLjMtOC45IDE2LTQzLjUgMTYtNDMuNS0uMi4zIDMuMy05LjEgNS4zLTE0LjlsMi44IDEzLjR6TTU3NiA4MHYzNTJjMCAyNi41LTIxLjUgNDgtNDggNDhINDhjLTI2LjUgMC00OC0yMS41LTQ4LTQ4VjgwYzAtMjYuNSAyMS41LTQ4IDQ4LTQ4aDQ4MGMyNi41IDAgNDggMjEuNSA0OCA0OHpNMTUyLjUgMzMxLjJMMjE1LjcgMTc2aC00Mi41bC0zOS4zIDEwNi00LjMtMjEuNS0xNC03MS40Yy0yLjMtOS45LTkuNC0xMi43LTE4LjItMTMuMUgzMi43bC0uNyAzLjFjMTUuOCA0IDI5LjkgOS44IDQyLjIgMTcuMWwzNS44IDEzNWg0Mi41em05NC40LjJMMjcyLjEgMTc2aC00MC4ybC0yNS4xIDE1NS40aDQwLjF6bTEzOS45LTUwLjhjLjItMTcuNy0xMC42LTMxLjItMzMuNy00Mi4zLTE0LjEtNy4xLTIyLjctMTEuOS0yMi43LTE5LjIuMi02LjYgNy4zLTEzLjQgMjMuMS0xMy40IDEzLjEtLjMgMjIuNyAyLjggMjkuOSA1LjlsMy42IDEuNyA1LjUtMzMuNmMtNy45LTMuMS0yMC41LTYuNi0zNi02LjYtMzkuNyAwLTY3LjYgMjEuMi02Ny44IDUxLjQtLjMgMjIuMyAyMCAzNC43IDM1LjIgNDIuMiAxNS41IDcuNiAyMC44IDEyLjYgMjAuOCAxOS4zLS4yIDEwLjQtMTIuNiAxNS4yLTI0LjEgMTUuMi0xNiAwLTI0LjYtMi41LTM3LjctOC4zbC01LjMtMi41LTUuNiAzNC45YzkuNCA0LjMgMjYuOCA4LjEgNDQuOCA4LjMgNDIuMi4xIDY5LjctMjAuOCA3MC01M3pNNTI4IDMzMS40TDQ5NS42IDE3NmgtMzEuMWMtOS42IDAtMTYuOSAyLjgtMjEgMTIuOWwtNTkuNyAxNDIuNUg0MjZzNi45LTE5LjIgOC40LTIzLjNINDg2YzEuMiA1LjUgNC44IDIzLjMgNC44IDIzLjNINTI4elwiXVxufTtcbnZhciBmYUxhc3RmbSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdsYXN0Zm0nLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyMDJcIiwgXCJNMjI1LjggMzY3LjFsLTE4LjgtNTFzLTMwLjUgMzQtNzYuMiAzNGMtNDAuNSAwLTY5LjItMzUuMi02OS4yLTkxLjUgMC03Mi4xIDM2LjQtOTcuOSA3Mi4xLTk3LjkgNjYuNSAwIDc0LjggNTMuMyAxMDAuOSAxMzQuOSAxOC44IDU2LjkgNTQgMTAyLjYgMTU1LjQgMTAyLjYgNzIuNyAwIDEyMi0yMi4zIDEyMi04MC45IDAtNzIuOS02Mi43LTgwLjYtMTE1LTkyLjEtMjUuOC01LjktMzMuNC0xNi40LTMzLjQtMzQgMC0xOS45IDE1LjgtMzEuNyA0MS42LTMxLjcgMjguMiAwIDQzLjQgMTAuNiA0NS43IDM1LjhsNTguNi03Yy00LjctNTIuOC00MS4xLTc0LjUtMTAwLjktNzQuNS01Mi44IDAtMTA0LjQgMTkuOS0xMDQuNCA4My45IDAgMzkuOSAxOS40IDY1LjEgNjggNzYuOCA0NC45IDEwLjYgNzkuOCAxMy44IDc5LjggNDUuNyAwIDIxLjctMjEuMSAzMC41LTYxIDMwLjUtNTkuMiAwLTgzLjktMzEuMS05Ny45LTczLjktMzItOTYuOC00My42LTE2My0xNjEuMy0xNjNDNDUuNyAxMTMuOCAwIDE2OC4zIDAgMjYxYzAgODkuMSA0NS43IDEzNy4yIDEyNy45IDEzNy4yIDY2LjIgMCA5Ny45LTMxLjEgOTcuOS0zMS4xelwiXVxufTtcbnZhciBmYVNob3B3YXJlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Nob3B3YXJlJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNWI1XCIsIFwiTTQwMy41IDQ1NS40MUEyNDYuMTcgMjQ2LjE3IDAgMCAxIDI1NiA1MDRDMTE4LjgxIDUwNCA4IDM5MyA4IDI1NiA4IDExOC44MSAxMTkgOCAyNTYgOGEyNDcuMzkgMjQ3LjM5IDAgMCAxIDE2NS43IDYzLjUgMy41NyAzLjU3IDAgMCAxLTIuODYgNi4xOEE0MTguNjIgNDE4LjYyIDAgMCAwIDM2Mi4xMyA3NGMtMTI5LjM2IDAtMjIyLjQgNTMuNDctMjIyLjQgMTU1LjM1IDAgMTA5IDkyLjEzIDE0NS44OCAxNzYuODMgMTc4LjczIDMzLjY0IDEzIDY1LjQgMjUuMzYgODcgNDEuNTlhMy41OCAzLjU4IDAgMCAxIDAgNS43MnpNNTAzIDIzMy4wOWEzLjY0IDMuNjQgMCAwIDAtMS4yNy0yLjQ0Yy01MS43Ni00My05My42Mi02MC40OC0xNDQuNDgtNjAuNDgtODQuMTMgMC04MC4yNSA1Mi4xNy04MC4yNSA1My42MyAwIDQyLjYgNTIuMDYgNjIgMTEyLjM0IDg0LjQ5IDMxLjA3IDExLjU5IDYzLjE5IDIzLjU3IDkyLjY4IDM5LjkzYTMuNTcgMy41NyAwIDAgMCA1LTEuODJBMjQ5IDI0OSAwIDAgMCA1MDMgMjMzLjA5elwiXVxufTtcbnZhciBmYUNyZWF0aXZlQ29tbW9uc05jID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NyZWF0aXZlLWNvbW1vbnMtbmMnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY0ZThcIiwgXCJNMjQ3LjYgOEMzODcuNCA4IDQ5NiAxMTUuOSA0OTYgMjU2YzAgMTQ3LjItMTE4LjUgMjQ4LTI0OC40IDI0OEMxMTMuMSA1MDQgMCAzOTMuMiAwIDI1NiAwIDEyMy4xIDEwNC43IDggMjQ3LjYgOHpNNTUuOCAxODkuMWMtNy40IDIwLjQtMTEuMSA0Mi43LTExLjEgNjYuOSAwIDExMC45IDkyLjEgMjAyLjQgMjAzLjcgMjAyLjQgMTIyLjQgMCAxNzcuMi0xMDEuOCAxNzguNS0xMDQuMWwtOTMuNC00MS42Yy03LjcgMzcuMS00MS4yIDUzLTY4LjIgNTUuNHYzOC4xaC0yOC44VjM2OGMtMjcuNS0uMy01Mi42LTEwLjItNzUuMy0yOS43bDM0LjEtMzQuNWMzMS43IDI5LjQgODYuNCAzMS44IDg2LjQtMi4yIDAtNi4yLTIuMi0xMS4yLTYuNi0xNS4xLTE0LjItNi0xLjgtLjEtMjE5LjMtOTcuNHpNMjQ4LjQgNTIuM2MtMzguNCAwLTExMi40IDguNy0xNzAuNSA5M2w5NC44IDQyLjVjMTAtMzEuMyA0MC40LTQyLjkgNjMuOC00NC4zdi0zOC4xaDI4Ljh2MzguMWMyMi43IDEuMiA0My40IDguOSA2MiAyM0wyOTUgMTk5LjdjLTQyLjctMjkuOS04My41LTgtNzAgMTEuMSA1My40IDI0LjEgNDMuOCAxOS44IDkzIDQxLjZsMTI3LjEgNTYuN2M0LjEtMTcuNCA2LjItMzUuMSA2LjItNTMuMSAwLTU3LTE5LjgtMTA1LTU5LjMtMTQzLjktMzkuMy0zOS45LTg3LjItNTkuOC0xNDMuNi01OS44elwiXVxufTtcbnZhciBmYUF3cyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhd3MnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYzNzVcIiwgXCJNMTgwLjQxIDIwMy4wMWMtLjcyIDIyLjY1IDEwLjYgMzIuNjggMTAuODggMzkuMDVhOC4xNjQgOC4xNjQgMCAwIDEtNC4xIDYuMjdsLTEyLjggOC45NmExMC42NiAxMC42NiAwIDAgMS01LjYzIDEuOTJjLS40My0uMDItOC4xOSAxLjgzLTIwLjQ4LTI1LjYxYTc4LjYwOCA3OC42MDggMCAwIDEtNjIuNjEgMjkuNDVjLTE2LjI4Ljg5LTYwLjQtOS4yNC01OC4xMy01Ni4yMS0xLjU5LTM4LjI4IDM0LjA2LTYyLjA2IDcwLjkzLTYwLjA1IDcuMS4wMiAyMS42LjM3IDQ2Ljk5IDYuMjd2LTE1LjYyYzIuNjktMjYuNDYtMTQuNy00Ni45OS00NC44MS00My45MS0yLjQuMDEtMTkuNC0uNS00NS44NCAxMC4xMS03LjM2IDMuMzgtOC4zIDIuODItMTAuNzUgMi44Mi03LjQxIDAtNC4zNi0yMS40OC0yLjk0LTI0LjIgNS4yMS02LjQgMzUuODYtMTguMzUgNjUuOTQtMTguMThhNzYuODU3IDc2Ljg1NyAwIDAgMSA1NS42OSAxNy4yOCA3MC4yODUgNzAuMjg1IDAgMCAxIDE3LjY3IDUyLjM2bC0uMDEgNjkuMjl6TTkzLjk5IDIzNS40YzMyLjQzLS40NyA0Ni4xNi0xOS45NyA0OS4yOS0zMC40NyAyLjQ2LTEwLjA1IDIuMDUtMTYuNDEgMi4wNS0yNy40LTkuNjctMi4zMi0yMy41OS00Ljg1LTM5LjU2LTQuODctMTUuMTUtMS4xNC00Mi44MiA1LjYzLTQxLjc0IDMyLjI2LTEuMjQgMTYuNzkgMTEuMTIgMzEuNCAyOS45NiAzMC40OHptMTcwLjkyIDIzLjA1Yy03Ljg2LjcyLTExLjUyLTQuODYtMTIuNjgtMTAuMzdsLTQ5LjgtMTY0LjY1Yy0uOTctMi43OC0xLjYxLTUuNjUtMS45Mi04LjU4YTQuNjEgNC42MSAwIDAgMSAzLjg2LTUuMjVjLjI0LS4wNC0yLjEzIDAgMjIuMjUgMCA4Ljc4LS44OCAxMS42NCA2LjAzIDEyLjU1IDEwLjM3bDM1LjcyIDE0MC44MyAzMy4xNi0xNDAuODNjLjUzLTMuMjIgMi45NC0xMS4wNyAxMi44LTEwLjI0aDE3LjE2YzIuMTctLjE4IDExLjExLS41IDEyLjY4IDEwLjM3bDMzLjQyIDE0Mi42M0w0MjAuOTggODAuMWMuNDgtMi4xOCAyLjcyLTExLjM3IDEyLjY4LTEwLjM3aDE5LjcyYy44NS0uMTMgNi4xNS0uODEgNS4yNSA4LjU4LS40MyAxLjg1IDMuNDEtMTAuNjYtNTIuNzUgMTY5LjktMS4xNSA1LjUxLTQuODIgMTEuMDktMTIuNjggMTAuMzdoLTE4LjY5Yy0xMC45NCAxLjE1LTEyLjUxLTkuNjYtMTIuNjgtMTAuNzVMMzI4LjY3IDExMC43bC0zMi43OCAxMzYuOTljLS4xNiAxLjA5LTEuNzMgMTEuOS0xMi42OCAxMC43NWgtMTguM3ptMjczLjQ4IDUuNjNjLTUuODguMDEtMzMuOTItLjMtNTcuMzYtMTIuMjlhMTIuODAyIDEyLjgwMiAwIDAgMS03LjgxLTExLjkxdi0xMC43NWMwLTguNDUgNi4yLTYuOSA4LjgzLTUuODkgMTAuMDQgNC4wNiAxNi40OCA3LjE0IDI4LjgxIDkuNiAzNi42NSA3LjUzIDUyLjc3LTIuMyA1Ni43Mi00LjQ4IDEzLjE1LTcuODEgMTQuMTktMjUuNjggNS4yNS0zNC45NS0xMC40OC04Ljc5LTE1LjQ4LTkuMTItNTMuMTMtMjEtNC42NC0xLjI5LTQzLjctMTMuNjEtNDMuNzktNTIuMzYtLjYxLTI4LjI0IDI1LjA1LTU2LjE4IDY5LjUyLTU1Ljk1IDEyLjY3LS4wMSA0Ni40MyA0LjEzIDU1LjU3IDE1LjYyIDEuMzUgMi4wOSAyLjAyIDQuNTUgMS45MiA3LjA0djEwLjExYzAgNC40NC0xLjYyIDYuNjYtNC44NyA2LjY2LTcuNzEtLjg2LTIxLjM5LTExLjE3LTQ5LjE2LTEwLjc1LTYuODktLjM2LTM5Ljg5LjkxLTM4LjQxIDI0Ljk3LS40MyAxOC45NiAyNi42MSAyNi4wNyAyOS43IDI2Ljg5IDM2LjQ2IDEwLjk3IDQ4LjY1IDEyLjc5IDYzLjEyIDI5LjU4IDE3LjE0IDIyLjI1IDcuOSA0OC4zIDQuMzUgNTUuNDQtMTkuMDggMzcuNDktNjguNDIgMzQuNDQtNjkuMjYgMzQuNDJ6bTQwLjIgMTA0Ljg2Yy03MC4wMyA1MS43Mi0xNzEuNjkgNzkuMjUtMjU4LjQ5IDc5LjI1QTQ2OS4xMjcgNDY5LjEyNyAwIDAgMSAyLjgzIDMyNy40NmMtNi41My01Ljg5LS43Ny0xMy45NiA3LjE3LTkuNDdhNjM3LjM3IDYzNy4zNyAwIDAgMCAzMTYuODggODQuMTIgNjMwLjIyIDYzMC4yMiAwIDAgMCAyNDEuNTktNDkuNTVjMTEuNzgtNSAyMS43NyA3LjggMTAuMTIgMTYuMzh6bTI5LjE5LTMzLjI5Yy04Ljk2LTExLjUyLTU5LjI4LTUuMzgtODEuODEtMi42OS02Ljc5Ljc3LTcuOTQtNS4xMi0xLjc5LTkuNDcgNDAuMDctMjguMTcgMTA1Ljg4LTIwLjEgMTEzLjQ0LTEwLjYzIDcuNTUgOS40Ny0yLjA1IDc1LjQxLTM5LjU2IDEwNi45MS01Ljc2IDQuODctMTEuMjcgMi4zLTguNzEtNC4xIDguNDQtMjEuMjUgMjcuMzktNjguNDkgMTguNDMtODAuMDJ6XCJdXG59O1xudmFyIGZhUmVkaGF0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3JlZGhhdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjdiY1wiLCBcIk0zNDEuNTIgMjg1LjU2YzMzLjY1IDAgODIuMzQtNi45NCA4Mi4zNC00NyAuMjItNi43NC44Ni0xLjgyLTIwLjg4LTk2LjI0LTQuNjItMTkuMTUtOC42OC0yNy44NC00Mi4zMS00NC42NS0yNi4wOS0xMy4zNC04Mi45Mi0zNS4zNy05OS43My0zNS4zNy0xNS42NiAwLTIwLjIgMjAuMTctMzguODcgMjAuMTctMTggMC0zMS4zMS0xNS4wNi00OC4xMi0xNS4wNi0xNi4xNCAwLTI2LjY2IDExLTM0Ljc4IDMzLjYyLTI3LjUgNzcuNTUtMjYuMjggNzQuMjctMjYuMTIgNzguMjcgMCAyNC44IDk3LjY0IDEwNi4xMSAyMjguNDcgMTA2LjExTTQyOSAyNTQuODRjNC42NSAyMiA0LjY1IDI0LjM1IDQuNjUgMjcuMjUgMCAzNy42Ni00Mi4zMyA1OC41Ni05OCA1OC41Ni0xMjUuNzQuMDgtMjM1LjkxLTczLjY1LTIzNS45MS0xMjIuMzNhNDkuNTUgNDkuNTUgMCAwIDEgNC4wNi0xOS43MkM1OC41NiAyMDAuODYgMCAyMDguOTMgMCAyNjAuNjNjMCA4NC42NyAyMDAuNjMgMTg5IDM1OS40OSAxODkgMTIxLjc5IDAgMTUyLjUxLTU1LjA4IDE1Mi41MS05OC41OCAwLTM0LjIxLTI5LjU5LTczLjA1LTgyLjkzLTk2LjI0XCJdXG59O1xudmFyIGZhWW9hc3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAneW9hc3QnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyYjFcIiwgXCJNOTEuMyA3NmgxODZsLTcgMTguOWgtMTc5Yy0zOS43IDAtNzEuOSAzMS42LTcxLjkgNzAuM3YyMDUuNGMwIDM1LjQgMjQuOSA3MC4zIDg0IDcwLjNWNDYwSDkxLjNDNDEuMiA0NjAgMCA0MTkuOCAwIDM3MC41VjE2NS4yQzAgMTE1LjkgNDAuNyA3NiA5MS4zIDc2em0yMjkuMS01Nmg2Ni41QzI0My4xIDM5OC4xIDI0MS4yIDQxOC45IDIwMi4yIDQ1OS4zYy0yMC44IDIxLjYtNDkuMyAzMS43LTc4LjMgMzIuN3YtNTEuMWM0OS4yLTcuNyA2NC42LTQ5LjkgNjQuNi03NS4zIDAtMjAuMS42LTEyLjYtODIuMS0yMjMuMmg2MS40TDIxOC4yIDI5OSAzMjAuNCAyMHpNNDQ4IDE2MS41VjQ2MEgyMzRjNi42LTkuNiAxMC43LTE2LjMgMTIuMS0xOS40aDE4Mi41VjE2MS41YzAtMzIuNS0xNy4xLTUxLjktNDguMi02Mi45bDYuNy0xNy42YzQxLjcgMTMuNiA2MC45IDQzLjEgNjAuOSA4MC41elwiXVxufTtcbnZhciBmYUNsb3VkZmxhcmUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY2xvdWRmbGFyZScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTA3ZFwiLCBcIk00MDcuOTA2LDMxOS45MTNsLTIzMC44LTIuOTI4YTQuNTgsNC41OCwwLDAsMS0zLjYzMi0xLjkyNiw0LjY0OCw0LjY0OCwwLDAsMS0uNDk0LTQuMTQ3LDYuMTQzLDYuMTQzLDAsMCwxLDUuMzYxLTQuMDc2TDQxMS4yODEsMzAzLjljMjcuNjMxLTEuMjYsNTcuNTQ2LTIzLjU3NCw2OC4wMjItNTAuNzg0bDEzLjI4Ni0zNC41NDJhNy45NDQsNy45NDQsMCwwLDAsLjUyNC0yLjkzNiw3LjczNSw3LjczNSwwLDAsMC0uMTY0LTEuNjMxQTE1MS45MSwxNTEuOTEsMCwwLDAsMjAxLjI1NywxOTguNCw2OC4xMiw2OC4xMiwwLDAsMCw5NC4yLDI2OS41OUM0MS45MjQsMjcxLjEwNiwwLDMxMy43MjgsMCwzNjYuMTJhOTYuMDU0LDk2LjA1NCwwLDAsMCwxLjAyOSwxMy45NTgsNC41MDgsNC41MDgsMCwwLDAsNC40NDUsMy44NzFsNDI2LjEuMDUxYy4wNDMsMCwuMDgtLjAxOS4xMjItLjAyYTUuNjA2LDUuNjA2LDAsMCwwLDUuMjcxLTRsMy4yNzMtMTEuMjY1YzMuOS0xMy40LDIuNDQ4LTI1LjgtNC4xLTM0LjlDNDMwLjEyNCwzMjUuNDIzLDQyMC4wOSwzMjAuNDg3LDQwNy45MDYsMzE5LjkxM1pNNTEzLjg1NiwyMjEuMWMtMi4xNDEsMC00LjI3MS4wNjItNi4zOTEuMTY0YTMuNzcxLDMuNzcxLDAsMCwwLTMuMzI0LDIuNjUzbC05LjA3NywzMS4xOTNjLTMuOSwxMy40LTIuNDQ5LDI1Ljc4Niw0LjEsMzQuODksNi4wMiw4LjQsMTYuMDU0LDEzLjMyMywyOC4yMzgsMTMuOWw0OS4yLDIuOTM5YTQuNDkxLDQuNDkxLDAsMCwxLDMuNTEsMS44OTQsNC42NCw0LjY0LDAsMCwxLC41MTQsNC4xNjksNi4xNTMsNi4xNTMsMCwwLDEtNS4zNTEsNC4wNzVsLTUxLjEyNSwyLjkzOWMtMjcuNzU0LDEuMjctNTcuNjY5LDIzLjU3NC02OC4xNDUsNTAuNzg0bC0zLjY5NSw5LjYwNmEyLjcxNiwyLjcxNiwwLDAsMCwyLjQyNywzLjY4Yy4wNDYsMCwuMDg4LjAxNy4xMzYuMDE3aDE3NS45MWE0LjY5LDQuNjksMCwwLDAsNC41MzktMy4zNywxMjQuODA3LDEyNC44MDcsMCwwLDAsNC42ODItMzRDNjQwLDI3Ny4zLDU4My41MjQsMjIxLjEsNTEzLjg1NiwyMjEuMVpcIl1cbn07XG52YXIgZmFVcHMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndXBzJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmN2UwXCIsIFwiTTEwMy4yIDMwM2MtNS4yIDMuNi0zMi42IDEzLjEtMzIuNi0xOVYxODBIMzcuOXYxMDIuNmMwIDc0LjkgODAuMiA1MS4xIDk3LjkgMzlWMTgwaC0zMi42ek00IDc0LjgydjIyMC45YzAgMTAzLjcgNzQuOSAxMzUuMiAxODcuNyAxODQuMSAxMTIuNC00OC45IDE4Ny43LTgwLjIgMTg3LjctMTg0LjFWNzQuODJjLTExNi4zLTYxLjYtMjgxLjgtNDkuNi0zNzUuNCAwem0zNTguMSAyMjAuOWMwIDg2LjYtNTMuMiAxMTMuNi0xNzAuNCAxNjUuMy0xMTcuNS01MS44LTE3MC41LTc4LjctMTcwLjUtMTY1LjN2LTEyNi40YzEwMi4zLTkzLjggMjMxLjYtMTAwIDM0MC45LTg5Ljh6bS0yMDkuNi0xMDcuNHYyMTIuOGgzMi43di02OC43YzI0LjQgNy4zIDcxLjctMi42IDcxLjctNzguNSAwLTk3LjQtODAuNy04MC45Mi0xMDQuNC02NS42em0zMi43IDExNy4zdi0xMDAuM2M4LjQtNC4yIDM4LjQtMTIuNyAzOC40IDQ5LjMgMCA2Ny45LTM2LjQgNTEuOC0zOC40IDUxem03OS4xLTg2LjRjLjEgNDcuMyA1MS42IDQyLjUgNTIuMiA3MC40LjYgMjMuNS0zMC40IDIzLTUwLjggNC45djMwLjFjMzYuMiAyMS41IDgxLjkgOC4xIDgzLjItMzMuNSAxLjctNTEuNS01NC4xLTQ2LjYtNTMuNC03My4yLjYtMjAuMyAzMC42LTIwLjUgNDguNS0yLjJ2LTI4LjRjLTI4LjUtMjItNzkuOS05LjItNzkuNyAzMS45elwiXVxufTtcbnZhciBmYVBpeGl2ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BpeGl2JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlNjQwXCIsIFwiTTY0IDMyQzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0SDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NmMwLTM1LjMtMjguNy02NC02NC02NEg2NHptMTcxLjUgODRjNDEgMCA3Ni4zIDEyLjkgMTAxLjQgMzUuMmwwIDBjMjUuMiAyMi4yIDM5LjggNTQuMSAzOS44IDg4LjhjLjEgMzUuMy0xNi42IDY2LjMtNDIuNCA4N2MtMjUuOSAyMC44LTYwLjYgMzIuNC05OC44IDMyLjRjLTQzLjUgMC04My44LTE2LjEtODMuOC0xNi4xdjUxLjhjNy40IDIuMiAxOS43IDcgMTEuOSAxNC44SDEwNC44Yy03LjctNy44IDMuNi0xMi40IDEyLjEtMTQuOFYxNzUuNUM5Ny4xIDE5MC45IDg3IDIwNC4zIDgxLjggMjE0LjJjNiAxOS40LTUuMyAxOC41LTUuMyAxOC41TDU2IDE5OS43czcyLjctODMuNyAxNzkuNS04My43em0tMy42IDIyMi45YzMwIDAgNTYtMTEuMyA3My45LTI5LjJjMTcuOS0xOC4xIDI3LjktNDEuNiAyOC03MC4yYy0uMS0yOS4zLTkuNS01NC42LTI2LjctNzMuNmMtMTcuMi0xOC45LTQyLjctMzEuMy03NS4yLTMxLjRjLTI2LjctLjEtNTkuOCA5LTgwLjIgMjMuN1YzMjMuMWMxOC42IDkuMyA0Ni44IDE1LjkgODAuMiAxNS44elwiXVxufTtcbnZhciBmYVdwZXhwbG9yZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd3BleHBsb3JlcicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjJkZVwiLCBcIk01MTIgMjU2YzAgMTQxLjItMTE0LjcgMjU2LTI1NiAyNTZDMTE0LjggNTEyIDAgMzk3LjMgMCAyNTZTMTE0LjcgMCAyNTYgMHMyNTYgMTE0LjcgMjU2IDI1NnptLTMyIDBjMC0xMjMuMi0xMDAuMy0yMjQtMjI0LTIyNEMxMzIuNSAzMiAzMiAxMzIuNSAzMiAyNTZzMTAwLjUgMjI0IDIyNCAyMjQgMjI0LTEwMC41IDIyNC0yMjR6TTE2MC45IDEyNC42bDg2LjkgMzcuMS0zNy4xIDg2LjktODYuOS0zNy4xIDM3LjEtODYuOXptMTEwIDE2OS4xbDQ2LjYgOTRoLTE0LjZsLTUwLTEwMC00OC45IDEwMGgtMTRsNTEuMS0xMDYuOS0yMi4zLTkuNCA2LTE0IDY4LjYgMjkuMS02IDE0LjMtMTYuNS03LjF6bS0xMS44LTExNi4zbDY4LjYgMjkuNC0yOS40IDY4LjNMMjMwIDI0NmwyOS4xLTY4LjZ6bTgwLjMgNDIuOWw1NC42IDIzLjEtMjMuNCA1NC4zLTU0LjMtMjMuMSAyMy4xLTU0LjN6XCJdXG59O1xudmFyIGZhRHlhbG9nID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2R5YWxvZycsXG4gIGljb246IFs0MTYsIDUxMiwgW10sIFwiZjM5OVwiLCBcIk0wIDMydjExOS4yaDY0Vjk2aDEwNy4yQzI4NC42IDk2IDM1MiAxNzYuMiAzNTIgMjU1LjkgMzUyIDMzMiAyOTMuNCA0MTYgMTcxLjIgNDE2SDB2NjRoMTcxLjJDMzMxLjkgNDgwIDQxNiAzNjcuMyA0MTYgMjU1LjljMC01OC43LTIyLjEtMTEzLjQtNjIuMy0xNTQuM0MzMDguOSA1NiAyNDUuNyAzMiAxNzEuMiAzMkgwelwiXVxufTtcbnZhciBmYUJpdHkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYml0eScsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjM3YVwiLCBcIk03OC40IDY3LjJDMTczLjgtMjIgMzI0LjUtMjQgNDIxLjUgNzFjMTQuMyAxNC4xLTYuNCAzNy4xLTIyLjQgMjEuNS04NC44LTgyLjQtMjE1LjgtODAuMy0yOTguOS0zLjItMTYuMyAxNS4xLTM2LjUtOC4zLTIxLjgtMjIuMXptOTguOSA0MTguNmMxOS4zIDUuNyAyOS4zLTIzLjYgNy45LTMwQzczIDQyMS45IDkuNCAzMDYuMSAzNy43IDE5NC44YzUtMTkuNi0yNC45LTI4LjEtMzAuMi03LjEtMzIuMSAxMjcuNCA0MS4xIDI1OS44IDE2OS44IDI5OC4xem0xNDguMS0yYzEyMS45LTQwLjIgMTkyLjktMTY2LjkgMTY0LjQtMjkxLTQuNS0xOS43LTM0LjktMTMuOC0zMCA3LjkgMjQuMiAxMDcuNy0zNy4xIDIxNy45LTE0My4yIDI1My40LTIxLjIgNy0xMC40IDM2IDguOCAyOS43em0tNjIuOS03OWwuMi03MS44YzAtOC4yLTYuNi0xNC44LTE0LjgtMTQuOC04LjIgMC0xNC44IDYuNy0xNC44IDE0LjhsLS4yIDcxLjhjMCA4LjIgNi42IDE0LjggMTQuOCAxNC44czE0LjgtNi42IDE0LjgtMTQuOHptNzEtMjY5YzIuMSA5MC45IDQuNyAxMzEuOS04NS41IDEzMi41LTkyLjUtLjctODYuOS00NC4zLTg1LjUtMTMyLjUgMC0yMS44LTMyLjUtMTkuNi0zMi41IDB2NzEuNmMwIDY5LjMgNjAuNyA5MC45IDExOCA5MC4xIDU3LjMuOCAxMTgtMjAuOCAxMTgtOTAuMXYtNzEuNmMwLTE5LjYtMzIuNS0yMS44LTMyLjUgMHpcIl1cbn07XG52YXIgZmFTdGFja3BhdGggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3RhY2twYXRoJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmODQyXCIsIFwiTTI0NC42IDIzMi40YzAgOC41LTQuMjYgMjAuNDktMjEuMzQgMjAuNDloLTE5LjYxdi00MS40N2gxOS42MWMxNy4xMyAwIDIxLjM0IDEyLjM2IDIxLjM0IDIwLjk4ek00NDggMzJ2NDQ4SDBWMzJ6TTE1MS4zIDI4Ny44NGMwLTIxLjI0LTEyLjEyLTM0LjU0LTQ2LjcyLTQ0Ljg1LTIwLjU3LTcuNDEtMjYtMTAuOTEtMjYtMTguNjNzNy0xNC42MSAyMC40MS0xNC42MWMxNC4wOSAwIDIwLjc5IDguNDUgMjAuNzkgMTguMzVoMzAuN2wuMTktLjU3Yy41LTE5LjU3LTE1LjA2LTQxLjY1LTUxLjEyLTQxLjY1LTIzLjM3IDAtNTIuNTUgMTAuNzUtNTIuNTUgMzguMjkgMCAxOS40IDkuMjUgMzEuMjkgNTAuNzQgNDQuMzcgMTcuMjYgNi4xNSAyMS45MSAxMC40IDIxLjkxIDE5LjQ4IDAgMTUuMi0xOS4xMyAxNC4yMy0xOS40NyAxNC4yMy0yMC40IDAtMjUuNjUtOS4xLTI1LjY1LTIxLjloLTMwLjhsLS4xOC41NmMtLjY4IDMxLjMyIDI4LjM4IDQ1LjIyIDU2LjYzIDQ1LjIyIDI5Ljk4IDAgNTEuMTItMTMuNTUgNTEuMTItMzguMjl6bTEyNS4zOC01NS42M2MwLTI1LjMtMTguNDMtNDUuNDYtNTMuNDItNDUuNDZoLTUxLjc4djEzOC4xOGgzMi4xN3YtNDcuMzZoMTkuNjFjMzAuMjUgMCA1My40Mi0xNS45NSA1My40Mi00NS4zNnpNMjk3Ljk0IDMyNUwzNDcgMTg2Ljc4aC0zMS4wOUwyNjggMzI1em0xMDYuNTItMTM4LjIyaC0zMS4wOUwzMjUuNDYgMzI1aDI5Ljk0elwiXVxufTtcbnZhciBmYUJ1eXNlbGxhZHMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYnV5c2VsbGFkcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjIwZFwiLCBcIk0yMjQgMTUwLjdsNDIuOSAxNjAuN2gtODUuOEwyMjQgMTUwLjd6TTQ0OCA4MHYzNTJjMCAyNi41LTIxLjUgNDgtNDggNDhINDhjLTI2LjUgMC00OC0yMS41LTQ4LTQ4VjgwYzAtMjYuNSAyMS41LTQ4IDQ4LTQ4aDM1MmMyNi41IDAgNDggMjEuNSA0OCA0OHptLTY1LjMgMzI1LjNsLTk0LjUtMjk4LjdIMTU5LjhMNjUuMyA0MDUuM0gxNTZsMTExLjctOTEuNiAyNC4yIDkxLjZoOTAuOHpcIl1cbn07XG52YXIgZmFGaXJzdE9yZGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZpcnN0LW9yZGVyJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMmIwXCIsIFwiTTEyLjkgMjI5LjJjLjEtLjEuMi0uMy4zLS40IDAgLjEgMCAuMy0uMS40aC0uMnpNMjI0IDk2LjZjLTcuMSAwLTE0LjYuNi0yMS40IDEuN2wzLjcgNjcuNC0yMi02NGMtMTQuMyAzLjctMjcuNyA5LjQtNDAgMTYuNmwyOS40IDYxLjQtNDUuMS01MC45Yy0xMS40IDguOS0yMS43IDE5LjEtMzAuNiAzMC45bDUwLjYgNDUuNC02MS4xLTI5LjdjLTcuMSAxMi4zLTEyLjkgMjUuNy0xNi42IDQwbDY0LjMgMjIuNi02OC00Yy0uOSA3LjEtMS40IDE0LjYtMS40IDIycy42IDE0LjYgMS40IDIxLjdsNjcuNy00LTY0IDIyLjZjMy43IDE0LjMgOS40IDI3LjcgMTYuNiA0MC4zbDYxLjEtMjkuN0w5Ny43IDM1MmM4LjkgMTEuNyAxOS4xIDIyLjMgMzAuOSAzMC45bDQ0LjktNTAuOS0yOS41IDYxLjRjMTIuMyA3LjQgMjUuNyAxMy4xIDQwIDE2LjlsMjIuMy02NC42LTQgNjhjNy4xIDEuMSAxNC42IDEuNyAyMS43IDEuNyA3LjQgMCAxNC42LS42IDIxLjctMS43bC00LTY4LjYgMjIuNiA2NS4xYzE0LjMtNCAyNy43LTkuNCA0MC0xNi45TDI3NC45IDMzMmw0NC45IDUwLjljMTEuNy04LjkgMjItMTkuMSAzMC42LTMwLjlsLTUwLjYtNDUuMSA2MS4xIDI5LjRjNy4xLTEyLjMgMTIuOS0yNS43IDE2LjYtNDAuM2wtNjQtMjIuMyA2Ny40IDRjMS4xLTcuMSAxLjQtMTQuMyAxLjQtMjEuN3MtLjMtMTQuOS0xLjQtMjJsLTY3LjcgNCA2NC0yMi4zYy0zLjctMTQuMy05LjEtMjgtMTYuNi00MC4zbC02MC45IDI5LjcgNTAuNi00NS40Yy04LjktMTEuNy0xOS4xLTIyLTMwLjYtMzAuOWwtNDUuMSA1MC45IDI5LjQtNjEuMWMtMTIuMy03LjQtMjUuNy0xMy4xLTQwLTE2LjlMMjQxLjcgMTY2bDQtNjcuN2MtNy4xLTEuMi0xNC4zLTEuNy0yMS43LTEuN3pNNDQzLjQgMTI4djI1NkwyMjQgNTEyIDQuNiAzODRWMTI4TDIyNCAwbDIxOS40IDEyOHptLTE3LjEgMTAuM0wyMjQgMjAuOSAyMS43IDEzOC4zdjIzNS4xTDIyNCA0OTEuMWwyMDIuMy0xMTcuN1YxMzguM3pNMjI0IDM3LjFsMTg3LjcgMTA5LjR2MjE4LjlMMjI0IDQ3NC45IDM2LjMgMzY1LjRWMTQ2LjZMMjI0IDM3LjF6bTAgNTAuOWMtOTIuMyAwLTE2Ni45IDc1LjEtMTY2LjkgMTY4IDAgOTIuNiA3NC42IDE2Ny43IDE2Ni45IDE2Ny43IDkyIDAgMTY2LjktNzUuMSAxNjYuOS0xNjcuNyAwLTkyLjktNzQuOS0xNjgtMTY2LjktMTY4elwiXVxufTtcbnZhciBmYU1vZHggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbW9keCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI4NVwiLCBcIk0zNTYgMjQxLjhsMzYuNyAyMy43VjQ4MGwtMTMzLTgzLjhMMzU2IDI0MS44ek00NDAgNzVIMjI2LjNsLTIzIDM3LjggMTUzLjUgOTYuNUw0NDAgNzV6bS04OSAxNDIuOEw1NS4yIDMydjIxNC41bDQ2IDI5TDM1MSAyMTcuOHpNOTcgMjk0LjJMOCA0MzdoMjEzLjdsMTI1LTIwMC41TDk3IDI5NC4yelwiXVxufTtcbnZhciBmYUd1aWxkZWQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ3VpbGRlZCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTA3ZVwiLCBcIk00NDMuNDI3LDY0SDQuNTcxYzAsMTAzLjI2LDIyLjE5MiwxODAuMDYsNDMuNDE4LDIyMi4zNThDMTEyLjA0Niw0MTQuMTM1LDIyNCw0NDgsMjI1LjI1Niw0NDhhMzEyLjgyNCwzMTIuODI0LDAsMCwwLDE0MC41NS0xMDMuNDc3YzI1LjkwNy0zMy45MjMsNTMuMS04Ny4xOSw2NS45MTYtMTQ1Ljc2MUgxNzEuODMzYzQuMTQsMzYuNDI5LDIyLjE3Nyw2Ny45NDYsNDUuMSw4Ni45NDRoODguNTg5Yy0xNy4wMTIsMjguMjEzLTQ4LjE4Niw1NC40LTgwLjQ1Niw2OS40ODItMzEuMjMyLTEzLjI1OS02OS4wOS00Ni41NDQtOTYuNTQ4LTk4LjM2Mi0yNi43MjYtNTMuODMzLTI3LjA5Mi0xMDUuODgzLTI3LjA5Mi0xMDUuODgzSDQzNy41NzNBNjI1LjkxLDYyNS45MSwwLDAsMCw0NDMuNDI3LDY0WlwiXVxufTtcbnZhciBmYVZudiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd2bnYnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY0MGJcIiwgXCJNMTA0LjkgMzUyYy0zNC4xIDAtNDYuNC0zMC40LTQ2LjQtMzAuNEwyLjYgMjEwLjFTLTcuOCAxOTIgMTMgMTkyaDMyLjhjMTAuNCAwIDEzLjIgOC43IDE4LjggMTguMWwzNi43IDc0LjVzNS4yIDEzLjEgMjEuMSAxMy4xIDIxLjEtMTMuMSAyMS4xLTEzLjFsMzYuNy03NC41YzUuNi05LjUgOC40LTE4LjEgMTguOC0xOC4xaDMyLjhjMjAuOCAwIDEwLjQgMTguMSAxMC40IDE4LjFsLTU1LjggMTExLjVTMTc0LjIgMzUyIDE0MCAzNTJoLTM1LjF6bTM5NSAwYy0zNC4xIDAtNDYuNC0zMC40LTQ2LjQtMzAuNGwtNTUuOS0xMTEuNVMzODcuMiAxOTIgNDA4IDE5MmgzMi44YzEwLjQgMCAxMy4yIDguNyAxOC44IDE4LjFsMzYuNyA3NC41czUuMiAxMy4xIDIxLjEgMTMuMSAyMS4xLTEzLjEgMjEuMS0xMy4xbDM2LjgtNzQuNWM1LjYtOS41IDguNC0xOC4xIDE4LjgtMTguMUg2MjdjMjAuOCAwIDEwLjQgMTguMSAxMC40IDE4LjFsLTU1LjkgMTExLjVTNTY5LjMgMzUyIDUzNS4xIDM1MmgtMzUuMnpNMzM3LjYgMTkyYzM0LjEgMCA0Ni40IDMwLjQgNDYuNCAzMC40bDU1LjkgMTExLjVzMTAuNCAxOC4xLTEwLjQgMTguMWgtMzIuOGMtMTAuNCAwLTEzLjItOC43LTE4LjgtMTguMWwtMzYuNy03NC41cy01LjItMTMuMS0yMS4xLTEzLjFjLTE1LjkgMC0yMS4xIDEzLjEtMjEuMSAxMy4xbC0zNi43IDc0LjVjLTUuNiA5LjQtOC40IDE4LjEtMTguOCAxOC4xaC0zMi45Yy0yMC44IDAtMTAuNC0xOC4xLTEwLjQtMTguMWw1NS45LTExMS41czEyLjItMzAuNCA0Ni40LTMwLjRoMzUuMXpcIl1cbn07XG52YXIgZmFTcXVhcmVKcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtanMnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImpzLXNxdWFyZVwiXSwgXCJmM2I5XCIsIFwiTTQ0OCA5NmMwLTM1LjMtMjguNy02NC02NC02NEg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZ6TTE4MC45IDQ0NC45Yy0zMy43IDAtNTMuMi0xNy40LTYzLjItMzguNUwxNTIgMzg1LjdjNi42IDExLjcgMTIuNiAyMS42IDI3LjEgMjEuNmMxMy44IDAgMjIuNi01LjQgMjIuNi0yNi41VjIzNy43aDQyLjFWMzgxLjRjMCA0My42LTI1LjYgNjMuNS02Mi45IDYzLjV6bTg1LjgtNDNMMzAxIDM4Mi4xYzkgMTQuNyAyMC44IDI1LjYgNDEuNSAyNS42YzE3LjQgMCAyOC42LTguNyAyOC42LTIwLjhjMC0xNC40LTExLjQtMTkuNS0zMC43LTI4bC0xMC41LTQuNWMtMzAuNC0xMi45LTUwLjUtMjkuMi01MC41LTYzLjVjMC0zMS42IDI0LjEtNTUuNiA2MS42LTU1LjZjMjYuOCAwIDQ2IDkuMyA1OS44IDMzLjdMMzY4IDI5MGMtNy4yLTEyLjktMTUtMTgtMjcuMS0xOGMtMTIuMyAwLTIwLjEgNy44LTIwLjEgMThjMCAxMi42IDcuOCAxNy43IDI1LjkgMjUuNmwxMC41IDQuNWMzNS44IDE1LjMgNTUuOSAzMSA1NS45IDY2LjJjMCAzNy44LTI5LjggNTguNi02OS43IDU4LjZjLTM5LjEgMC02NC40LTE4LjYtNzYuNy00M3pcIl1cbn07XG52YXIgZmFKc1NxdWFyZSA9IGZhU3F1YXJlSnM7XG52YXIgZmFNaWNyb3NvZnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWljcm9zb2Z0JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2NhXCIsIFwiTTAgMzJoMjE0LjZ2MjE0LjZIMFYzMnptMjMzLjQgMEg0NDh2MjE0LjZIMjMzLjRWMzJ6TTAgMjY1LjRoMjE0LjZWNDgwSDBWMjY1LjR6bTIzMy40IDBINDQ4VjQ4MEgyMzMuNFYyNjUuNHpcIl1cbn07XG52YXIgZmFRcSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdxcScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjFkNlwiLCBcIk00MzMuNzU0IDQyMC40NDVjLTExLjUyNiAxLjM5My00NC44Ni01Mi43NDEtNDQuODYtNTIuNzQxIDAgMzEuMzQ1LTE2LjEzNiA3Mi4yNDctNTEuMDUxIDEwMS43ODYgMTYuODQyIDUuMTkyIDU0Ljg0MyAxOS4xNjcgNDUuODAzIDM0LjQyMS03LjMxNiAxMi4zNDMtMTI1LjUxIDcuODgxLTE1OS42MzIgNC4wMzctMzQuMTIyIDMuODQ0LTE1Mi4zMTYgOC4zMDYtMTU5LjYzMi00LjAzNy05LjA0NS0xNS4yNSAyOC45MTgtMjkuMjE0IDQ1Ljc4My0zNC40MTUtMzQuOTItMjkuNTM5LTUxLjA1OS03MC40NDUtNTEuMDU5LTEwMS43OTIgMCAwLTMzLjMzNCA1NC4xMzQtNDQuODU5IDUyLjc0MS01LjM3LS42NS0xMi40MjQtMjkuNjQ0IDkuMzQ3LTk5LjcwNCAxMC4yNjEtMzMuMDI0IDIxLjk5NS02MC40NzggNDAuMTQ0LTEwNS43NzlDNjAuNjgzIDk4LjA2MyAxMDguOTgyLjAwNiAyMjQgMGMxMTMuNzM3LjAwNiAxNjMuMTU2IDk2LjEzMyAxNjAuMjY0IDIxNC45NjMgMTguMTE4IDQ1LjIyMyAyOS45MTIgNzIuODUgNDAuMTQ0IDEwNS43NzggMjEuNzY4IDcwLjA2IDE0LjcxNiA5OS4wNTMgOS4zNDYgOTkuNzA0elwiXVxufTtcbnZhciBmYU9yY2lkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ29yY2lkJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmOGQyXCIsIFwiTTI5NC43NSAxODguMTloLTQ1LjkyVjM0Mmg0Ny40N2M2Ny42MiAwIDgzLjEyLTUxLjM0IDgzLjEyLTc2LjkxIDAtNDEuNjQtMjYuNTQtNzYuOS04NC42Ny03Ni45ek0yNTYgOEMxMTkgOCA4IDExOSA4IDI1NnMxMTEgMjQ4IDI0OCAyNDggMjQ4LTExMSAyNDgtMjQ4UzM5MyA4IDI1NiA4em0tODAuNzkgMzYwLjc2aC0yOS44NHYtMjA3LjVoMjkuODR6bS0xNC45Mi0yMzEuMTRhMTkuNTcgMTkuNTcgMCAxIDEgMTkuNTctMTkuNTcgMTkuNjQgMTkuNjQgMCAwIDEtMTkuNTcgMTkuNTd6TTMwMCAzNjloLTgxVjE2MS4yNmg4MC42Yzc2LjczIDAgMTEwLjQ0IDU0LjgzIDExMC40NCAxMDMuODVDNDEwIDMxOC4zOSAzNjguMzggMzY5IDMwMCAzNjl6XCJdXG59O1xudmFyIGZhSmF2YSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdqYXZhJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmNGU0XCIsIFwiTTI3Ny43NCAzMTIuOWM5LjgtNi43IDIzLjQtMTIuNSAyMy40LTEyLjVzLTM4LjcgNy03Ny4yIDEwLjJjLTQ3LjEgMy45LTk3LjcgNC43LTEyMy4xIDEuMy02MC4xLTggMzMtMzAuMSAzMy0zMC4xcy0zNi4xLTIuNC04MC42IDE5Yy01Mi41IDI1LjQgMTMwIDM3IDIyNC41IDEyLjF6bS04NS40LTMyLjFjLTE5LTQyLjctODMuMS04MC4yIDAtMTQ1LjhDMjk2IDUzLjIgMjQyLjg0IDAgMjQyLjg0IDBjMjEuNSA4NC41LTc1LjYgMTEwLjEtMTEwLjcgMTYyLjYtMjMuOSAzNS45IDExLjcgNzQuNCA2MC4yIDExOC4yem0xMTQuNi0xNzYuMmMuMSAwLTE3NS4yIDQzLjgtOTEuNSAxNDAuMiAyNC43IDI4LjQtNi41IDU0LTYuNSA1NHM2Mi43LTMyLjQgMzMuOS03Mi45Yy0yNi45LTM3LjgtNDcuNS01Ni42IDY0LjEtMTIxLjN6bS02LjEgMjcwLjVhMTIuMTkgMTIuMTkgMCAwIDEtMiAyLjZjMTI4LjMtMzMuNyA4MS4xLTExOC45IDE5LjgtOTcuM2ExNy4zMyAxNy4zMyAwIDAgMC04LjIgNi4zIDcwLjQ1IDcwLjQ1IDAgMCAxIDExLTNjMzEtNi41IDc1LjUgNDEuNS0yMC42IDkxLjR6TTM0OCA0MzcuNHMxNC41IDExLjktMTUuOSAyMS4yYy01Ny45IDE3LjUtMjQwLjggMjIuOC0yOTEuNi43LTE4LjMtNy45IDE2LTE5IDI2LjgtMjEuMyAxMS4yLTIuNCAxNy43LTIgMTcuNy0yLTIwLjMtMTQuMy0xMzEuMyAyOC4xLTU2LjQgNDAuMkMyMzIuODQgNTA5LjQgNDAxIDQ2MS4zIDM0OCA0MzcuNHpNMTI0LjQ0IDM5NmMtNzguNyAyMiA0Ny45IDY3LjQgMTQ4LjEgMjQuNWExODUuODkgMTg1Ljg5IDAgMCAxLTI4LjItMTMuOGMtNDQuNyA4LjUtNjUuNCA5LjEtMTA2IDQuNS0zMy41LTMuOC0xMy45LTE1LjItMTMuOS0xNS4yem0xNzkuOCA5Ny4yYy03OC43IDE0LjgtMTc1LjggMTMuMS0yMzMuMyAzLjYgMC0uMSAxMS44IDkuNyA3Mi40IDEzLjYgOTIuMiA1LjkgMjMzLjgtMy4zIDIzNy4xLTQ2LjkgMCAwLTYuNCAxNi41LTc2LjIgMjkuN3pNMjYwLjY0IDM1M2MtNTkuMiAxMS40LTkzLjUgMTEuMS0xMzYuOCA2LjYtMzMuNS0zLjUtMTEuNi0xOS43LTExLjYtMTkuNy04Ni44IDI4LjggNDguMiA2MS40IDE2OS41IDI1LjlhNjAuMzcgNjAuMzcgMCAwIDEtMjEuMS0xMi44elwiXVxufTtcbnZhciBmYUludmlzaW9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ludmlzaW9uJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmN2IwXCIsIFwiTTQwNy40IDMySDQwLjZDMTguMiAzMiAwIDUwLjIgMCA3Mi42djM2Ni44QzAgNDYxLjggMTguMiA0ODAgNDAuNiA0ODBoMzY2LjhjMjIuNCAwIDQwLjYtMTguMiA0MC42LTQwLjZWNzIuNmMwLTIyLjQtMTguMi00MC42LTQwLjYtNDAuNnpNMTc2LjEgMTQ1LjZjLjQgMjMuNC0yMi40IDI3LjMtMjYuNiAyNy40LTE0LjkgMC0yNy4xLTEyLTI3LjEtMjcgLjEtMzUuMiA1My4xLTM1LjUgNTMuNy0uNHpNMzMyLjggMzc3Yy02NS42IDAtMzQuMS03NC0yNS0xMDYuNiAxNC4xLTQ2LjQtNDUuMi01OS01OS45LjdsLTI1LjggMTAzLjNIMTc3bDguMS0zMi41Yy0zMS41IDUxLjgtOTQuNiA0NC40LTk0LjYtNC4zLjEtMTQuMy45LTE0IDIzLTEwNC4xSDgxLjdsOS43LTM1LjZoNzYuNGMtMzMuNiAxMzMuNy0zMi42IDEyNi45LTMyLjkgMTM4LjIgMCAyMC45IDQwLjkgMTMuNSA1Ny40LTIzLjJsMTkuOC03OS40aC0zMi4zbDkuNy0zNS42aDY4LjhsLTguOSA0MC41YzQwLjUtNzUuNSAxMjcuOS00Ny44IDEwMS44IDM4LTE0LjIgNTEuMS0xNC42IDUwLjctMTQuOSA1OC44IDAgMTUuNSAxNy41IDIyLjYgMzEuOC0xNi45TDM4NiAzMjVjLTEwLjUgMzYuNy0yOS40IDUyLTUzLjIgNTJ6XCJdXG59O1xudmFyIGZhQ3JlYXRpdmVDb21tb25zUGRBbHQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3JlYXRpdmUtY29tbW9ucy1wZC1hbHQnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY0ZWRcIiwgXCJNMjQ3LjYgOEMxMDQuNyA4IDAgMTIzLjEgMCAyNTZjMCAxMzguNSAxMTMuNiAyNDggMjQ3LjYgMjQ4QzM3Ny41IDUwNCA0OTYgNDAzLjEgNDk2IDI1NiA0OTYgMTE4LjEgMzg5LjQgOCAyNDcuNiA4em0uOCA0NTAuOGMtMTEyLjUgMC0yMDMuNy05My0yMDMuNy0yMDIuOCAwLTEwNS40IDg1LjUtMjAzLjMgMjAzLjctMjAzLjMgMTEyLjYgMCAyMDIuOSA4OS41IDIwMi44IDIwMy4zIDAgMTIxLjctOTkuNiAyMDIuOC0yMDIuOCAyMDIuOHpNMzE2LjcgMTg2aC01My4ydjEzNy4yaDUzLjJjMjEuNCAwIDcwLTUuMSA3MC02OC42IDAtNjMuNC00OC42LTY4LjYtNzAtNjguNnptLjggMTA4LjVoLTE5Ljl2LTc5LjdsMTkuNC0uMWMzLjggMCAzNS0yLjEgMzUgMzkuOSAwIDI0LjYtMTAuNSAzOS45LTM0LjUgMzkuOXpNMjAzLjcgMTg2aC02OC4ydjEzNy4zaDM0LjZWMjc5aDI3YzU0LjEgMCA1Ny4xLTM3LjUgNTcuMS00Ni41IDAtMzEtMTYuOC00Ni41LTUwLjUtNDYuNXptLTQuOSA2Ny4zaC0yOS4ydi00MS42aDI4LjNjMzAuOSAwIDI4LjggNDEuNi45IDQxLjZ6XCJdXG59O1xudmFyIGZhQ2VudGVyY29kZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjZW50ZXJjb2RlJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMzgwXCIsIFwiTTMyOS4yIDI2OC42Yy0zLjggMzUuMi0zNS40IDYwLjYtNzAuNiA1Ni44LTM1LjItMy44LTYwLjYtMzUuNC01Ni44LTcwLjYgMy44LTM1LjIgMzUuNC02MC42IDcwLjYtNTYuOCAzNS4xIDMuOCA2MC42IDM1LjQgNTYuOCA3MC42em0tODUuOCAyMzUuMUM5Ni43IDQ5Ni04LjIgMzY1LjUgMTAuMSAyMjQuM2MxMS4yLTg2LjYgNjUuOC0xNTYuOSAxMzkuMS0xOTIgMTYxLTc3LjEgMzQ5LjcgMzcuNCAzNTQuNyAyMTYuNiA0LjEgMTQ3LTExOC40IDI2Mi4yLTI2MC41IDI1NC44em0xNzkuOS0xODBjMjcuOS0xMTgtMTYwLjUtMjA1LjktMjM3LjItMjM0LjItNTcuNSA1Ni4zLTY5LjEgMTg4LjYtMzMuOCAzNDQuNCA2OC44IDE1LjggMTY5LjEtMjYuNCAyNzEtMTEwLjJ6XCJdXG59O1xudmFyIGZhR2xpZGVHID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dsaWRlLWcnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyYTZcIiwgXCJNNDA3LjEgMjExLjJjLTMuNS0xLjQtMTEuNi0zLjgtMTUuNC0zLjgtMzcuMSAwLTYyLjIgMTYuOC05My41IDM0LjVsLS45LS45YzctNDcuMyAyMy41LTkxLjkgMjMuNS0xNDAuNEMzMjAuOCAyOS4xIDI4Mi42IDAgMjEyLjQgMCA5Ny4zIDAgMzkgMTEzLjcgMzkgMTk4LjQgMzkgMjg2LjMgOTAuMyAzMzUgMTc3LjYgMzM1YzEyIDAgMTEtMSAxMSAzLjgtMTYuOSAxMjguOS05MC44IDEzMy4xLTkwLjggOTQuNiAwLTM5LjIgNDUtNTguNiA0NS41LTYxLS4zLTEyLjItNDctMjcuNi01OC45LTI3LjYtMzMuOS4xLTUyLjQgNTEuMi01Mi40IDc5LjNDMzIgNDc2IDY0LjggNTEyIDExNy41IDUxMmM3Ny40IDAgMTM0LTc3LjggMTUxLjQtMTQ1LjQgMTUuMS02MC41IDExLjItNjMuMyAxOS43LTY3LjYgMzIuMi0xNi4yIDU3LjUtMjcgOTMuOC0yNyAxNy44IDAgMzAuNSAzLjcgNTguOSA4LjQgMi45IDAgNi43LTIuOSA2LjctNS44IDAtOC0zMy40LTYwLjUtNDAuOS02My40em0tMTc1LjMtODQuNGMtOS4zIDQ0LjctMTguNiA4OS42LTI3LjggMTM0LjMtMi4zIDEwLjItMTMuMyA3LjgtMjIgNy44LTM4LjMgMC00OS00MS44LTQ5LTczLjEgMC00NyAxOC0xMDkuMyA2MS44LTEzMy40IDctNC4xIDE0LjgtNi43IDIyLjYtNi43IDE4LjYgMCAyMCAxMy4zIDIwIDI4LjctLjEgMTQuMy0yLjcgMjguNS01LjYgNDIuNHpcIl1cbn07XG52YXIgZmFEcnVwYWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZHJ1cGFsJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMWE5XCIsIFwiTTMwMy45NzMsMTA4LjEzNkMyNjguMiw3Mi40NTksMjM0LjE4NywzOC4zNSwyMjQuMDQ3LDBjLTkuOTU3LDM4LjM1LTQ0LjI1LDcyLjQ1OS04MC4wMTksMTA4LjEzNkM5MC40NjcsMTYxLjcsMjkuNzE2LDIyMi4zNTYsMjkuNzE2LDMxMy40MzZjLTIuMzM3LDEwNy4zLDgyLjc1MiwxOTYuMTgsMTkwLjA1MywxOTguNTE3UzQxNS45NDgsNDI5LjIsNDE4LjI4NSwzMjEuOXEuMDkxLTQuMjMxLDAtOC40NjRDNDE4LjI4NSwyMjIuMzU2LDM1Ny41MzQsMTYxLjcsMzAzLjk3MywxMDguMTM2Wm0tMTc0LjMyNiwyMjNhMTMwLjI4MiwxMzAuMjgyLDAsMCwwLTE1LjIxMSwyNC4xNTMsNC45NzgsNC45NzgsMCwwLDEtMy4zMTksMi43NjZoLTEuNjU5Yy00LjMzMywwLTkuMjE5LTguNDgxLTkuMjE5LTguNDgxaDBjLTEuMjktMi4wMjgtMi40ODktNC4xNDktMy42ODctNi4zNjFsLS44My0xLjc1MmMtMTEuMjQ3LTI1LjcyLTEuNDc1LTYyLjMxOC0xLjQ3NS02Mi4zMThoMGExNjAuNTg1LDE2MC41ODUsMCwwLDEsMjMuMjMxLTQ5Ljg3M0EyOTAuOCwyOTAuOCwwLDAsMSwxMzguNSwyMDEuNjEzbDkuMjE5LDkuMjE5LDQzLjUxMiw0NC40MzRhNC45NzksNC45NzksMCwwLDEsMCw2LjYzOEwxNDUuNzgsMzEyLjMzaDBabTk2LjYxMiwxMjcuMzExYTY3LjIsNjcuMiwwLDAsMS00OS43ODEtMTExLjkxNWMxNC4yLTE2Ljg3MSwzMS41MjgtMzMuNDY0LDUwLjMzNC01NS4zMTMsMjIuMzA5LDIzLjc4NSwzNi44NzUsNDAuMSw1MS4xNjQsNTcuOTg2YTI4LjQxMywyOC40MTMsMCwwLDEsMi45NSw0LjQyNSw2NS45MDUsNjUuOTA1LDAsMCwxLDExLjk4NCwzNy45ODEsNjYuNjUxLDY2LjY1MSwwLDAsMS02Ni40NjYsNjYuODM2Wk0zNTIuMzcxLDM1MS42aDBhNy43NDMsNy43NDMsMCwwLDEtNi4xNzYsNS4zNDdIMzQ0LjlhMTEuMjQ5LDExLjI0OSwwLDAsMS02LjI2OS01LjA3aDBhMzQ4LjIxLDM0OC4yMSwwLDAsMC0zOS40NTYtNDguOTUyTDI4MS4zODcsMjg0LjQ5LDIyMi4zLDIyMy4xODVhNDk3Ljg4OCw0OTcuODg4LDAsMCwxLTM1LjQtMzYuMzIyLDEyLjAzMywxMi4wMzMsMCwwLDAtLjkyMi0xLjM4MiwzNS40LDM1LjQsMCwwLDEtNC43LTkuMjE5VjE3NC41MWEzMS4zNDYsMzEuMzQ2LDAsMCwxLDkuMjE4LTI3LjY1NmMxMS40MzItMTEuNDMxLDIyLjk1NS0yMi45NTQsMzMuODMzLTM0LjkzOSwxMS45ODQsMTMuMjc1LDI0LjgsMjYsMzcuNDI4LDM4LjYyN2gwYTUzMC45OTEsNTMwLjk5MSwwLDAsMSw2OS42LDc5LjEsMTQ3LjQ5NCwxNDcuNDk0LDAsMCwxLDI3LjAxMSw4My44QTEzNC4xMDksMTM0LjEwOSwwLDAsMSwzNTIuMzcxLDM1MS42WlwiXVxufTtcbnZhciBmYUp4bCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdqeGwnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU2N2JcIiwgXCJNNDEyLjIgMzJIMzUuOEMxNiAzMiAwIDQ4IDAgNjcuOFY0NDQuMkMwIDQ2NCAxNiA0ODAgMzUuOCA0ODBINDEyLjJjMTkuOCAwIDM1LjgtMTYgMzUuOC0zNS44VjY3LjhDNDQ4IDQ4IDQzMiAzMiA0MTIuMiAzMnpNMzc4LjYgMzMzLjdjMCA0MC4yLTMyLjYgNzIuOC03Mi44IDcyLjhINzAuMmMwLTQwLjIgMzIuNi03Mi44IDcyLjgtNzIuOEgzNzguNnptMC0xMTMuOWMwIDQwLjItMzIuNiA3Mi44LTcyLjggNzIuOEg3MC4yYzAtNDAuMiAzMi42LTcyLjggNzIuOC03Mi44SDM3OC42em0wLTExMy45YzAgNDAuMi0zMi42IDcyLjgtNzIuOCA3Mi44SDcwLjJjMC00MC4yIDMyLjYtNzIuOCA3Mi44LTcyLjhIMzc4LjZ6XCJdXG59O1xudmFyIGZhSGlyZUFIZWxwZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaGlyZS1hLWhlbHBlcicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNiMFwiLCBcIk00NDMuMSAwSDcxLjlDNjcuOSAzNy4zIDM3LjQgNjcuOCAwIDcxLjd2MzcxLjVjMzcuNCA0LjkgNjYgMzIuNCA3MS45IDY4LjhoMzcyLjJjMy0zNi40IDMyLjUtNjUuOCA2Ny45LTY5LjhWNzEuN2MtMzYuNC01LjktNjUtMzUuMy02OC45LTcxLjd6bS0zNyA0MDQuOWMtMzYuMyAwLTE4LjgtMi01NS4xLTItMzUuOCAwLTIxIDItNTYuMSAyLTUuOSAwLTQuOS04LjIgMC05LjggMjIuOC03LjYgMjIuOS0xMC4yIDI0LjYtMTIuOCAxMC40LTE1LjYgNS45LTgzIDUuOS0xMTMgMC01LjMtNi40LTEyLjgtMTMuOC0xMi44SDIwMC40Yy03LjQgMC0xMy44IDcuNS0xMy44IDEyLjggMCAzMC00LjUgOTcuNCA1LjkgMTEzIDEuNyAyLjUgMS44IDUuMiAyNC42IDEyLjggNC45IDEuNiA2IDkuOCAwIDkuOC0zNS4xIDAtMjAuMy0yLTU2LjEtMi0zNi4zIDAtMTguOCAyLTU1LjEgMi03LjkgMC01LjgtMTAuOCAwLTEwLjggMTAuMi0zLjQgMTMuNS0zLjUgMjEuNy0xMy44IDcuNy0xMi45IDcuOS00NC40IDcuOS0xMjcuOFYxNTEuM2MwLTIyLjItMTIuMi0yOC4zLTI4LjYtMzIuNC04LjgtMi4yLTQtMTEuOCAxLTExLjggMzYuNSAwIDIwLjYgMiA1Ny4xIDIgMzIuNyAwIDE2LjUtMiA0OS4yLTIgMy4zIDAgOC41IDguMyAxIDEwLjgtNC45IDEuNi0yNy42IDMuNy0yNy42IDM5LjMgMCA0NS42LS4yIDU1LjggMSA2OC44IDAgMS4zIDIuMyAxMi44IDEyLjggMTIuOGgxMDkuMmMxMC41IDAgMTIuOC0xMS41IDEyLjgtMTIuOCAxLjItMTMgMS0yMy4yIDEtNjguOCAwLTM1LjYtMjIuNy0zNy43LTI3LjYtMzkuMy03LjUtMi41LTIuMy0xMC44IDEtMTAuOCAzMi43IDAgMTYuNSAyIDQ5LjIgMiAzNi41IDAgMjAuNi0yIDU3LjEtMiA0LjkgMCA5LjkgOS42IDEgMTEuOC0xNi40IDQuMS0yOC42IDEwLjMtMjguNiAzMi40djEwMS4yYzAgODMuNC4xIDExNC45IDcuOSAxMjcuOCA4LjIgMTAuMiAxMS40IDEwLjQgMjEuNyAxMy44IDUuOCAwIDcuOCAxMC44IDAgMTAuOHpcIl1cbn07XG52YXIgZmFDcmVhdGl2ZUNvbW1vbnNCeSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjcmVhdGl2ZS1jb21tb25zLWJ5JyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNGU3XCIsIFwiTTMxNC45IDE5NC40djEwMS40aC0yOC4zdjEyMC41aC03Ny4xVjI5NS45aC0yOC4zVjE5NC40YzAtNC40IDEuNi04LjIgNC42LTExLjMgMy4xLTMuMSA2LjktNC43IDExLjMtNC43SDI5OWM0LjEgMCA3LjggMS42IDExLjEgNC43IDMuMSAzLjIgNC44IDYuOSA0LjggMTEuM3ptLTEwMS41LTYzLjdjMC0yMy4zIDExLjUtMzUgMzQuNS0zNXMzNC41IDExLjcgMzQuNSAzNWMwIDIzLTExLjUgMzQuNS0zNC41IDM0LjVzLTM0LjUtMTEuNS0zNC41LTM0LjV6TTI0Ny42IDhDMzg5LjQgOCA0OTYgMTE4LjEgNDk2IDI1NmMwIDE0Ny4xLTExOC41IDI0OC0yNDguNCAyNDhDMTEzLjYgNTA0IDAgMzk0LjUgMCAyNTYgMCAxMjMuMSAxMDQuNyA4IDI0Ny42IDh6bS44IDQ0LjdDMTMwLjIgNTIuNyA0NC43IDE1MC42IDQ0LjcgMjU2YzAgMTA5LjggOTEuMiAyMDIuOCAyMDMuNyAyMDIuOCAxMDMuMiAwIDIwMi44LTgxLjEgMjAyLjgtMjAyLjguMS0xMTMuOC05MC4yLTIwMy4zLTIwMi44LTIwMy4zelwiXVxufTtcbnZhciBmYVVuaXR5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3VuaXR5JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlMDQ5XCIsIFwiTTI0My41ODMgOTEuNjAyN0wzMjMuNjk1IDEzOC4zODRDMzI2LjU3NSAxNDAuMDI2IDMyNi42OCAxNDQuNTgzIDMyMy42OTUgMTQ2LjIyNUwyMjguNTAzIDIwMS44NTRDMjI1LjYyMyAyMDMuNTUgMjIyLjIyIDIwMy40NDQgMjE5LjU0OSAyMDEuODU0TDEyNC4zNTcgMTQ2LjIyNUMxMjEuNDI1IDE0NC42MzYgMTIxLjM3MyAxMzkuOTczIDEyNC4zNTcgMTM4LjM4NEwyMDQuNDE3IDkxLjYwMjdWMEwwIDExOS40MTdWMzU4LjI1Mkw3OC4zODQzIDMxMi40NzdWMjE4LjkxNEM3OC4zMzE5IDIxNS41NzYgODIuMjA2NiAyMTMuMTkyIDg1LjA4NjUgMjE0Ljk5M0wxODAuMjc5IDI3MC42MjJDMTgzLjE1OSAyNzIuMzE4IDE4NC43ODIgMjc1LjMzOCAxODQuNzgyIDI3OC40NjRWMzg5LjY2OUMxODQuODM0IDM5My4wMDcgMTgwLjk1OSAzOTUuMzkxIDE3OC4wNzkgMzkzLjU4OUw5Ny45NjczIDM0Ni44MDhMMTkuNTgzIDM5Mi41ODNMMjI0IDUxMkw0MjguNDE3IDM5Mi41ODNMMzUwLjAzMyAzNDYuODA4TDI2OS45MjEgMzkzLjU4OUMyNjcuMDkzIDM5NS4zMzggMjYzLjExNCAzOTMuMDYgMjYzLjIxOCAzODkuNjY5VjI3OC40NjRDMjYzLjIxOCAyNzUuMTI2IDI2NS4wNTEgMjcyLjE1OSAyNjcuNzIxIDI3MC42MjJMMzYyLjkxNCAyMTQuOTkzQzM2NS43NDEgMjEzLjI0NSAzNjkuNzIgMjE1LjQ3IDM2OS42MTYgMjE4LjkxNFYzMTIuNDc3TDQ0OCAzNTguMjUyVjExOS40MTdMMjQzLjU4MyAwVjkxLjYwMjdaXCJdXG59O1xudmFyIGZhV2htY3MgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2htY3MnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY0MGRcIiwgXCJNNDQ4IDE2MXYtMjEuM2wtMjguNS04LjgtMi4yLTEwLjQgMjAuMS0yMC43TDQyNyA4MC40bC0yOSA3LjUtNy4yLTcuNSA3LjUtMjguMi0xOS4xLTExLjYtMjEuMyAyMS0xMC43LTMuMi03LTI2LjRoLTIyLjZsLTYuMiAyNi40LTEyLjEgMy4yLTE5LjctMjEtMTkuNCAxMSA4LjEgMjcuNy04LjEgOC40LTI4LjUtNy41LTExIDE5LjEgMjAuNyAyMS0yLjkgMTAuNC0yOC41IDcuOC0uMyAyMS43IDI4LjggNy41IDIuNCAxMi4xLTIwLjEgMTkuOSAxMC40IDE4LjUgMjkuNi03LjUgNy4yIDguNi04LjEgMjYuOSAxOS45IDExLjYgMTkuNC0yMC40IDExLjYgMi45IDYuNyAyOC41IDIyLjYuMyA2LjctMjguOCAxMS42LTMuNSAyMC43IDIxLjYgMjAuNC0xMi4xLTguOC0yOCA3LjgtOC4xIDI4LjggOC44IDEwLjMtMjAuMS0yMC45LTE4LjggMi4yLTEyLjEgMjkuMS03em0tMTE5LjIgNDUuMmMtMzEuMyAwLTU2LjgtMjUuNC01Ni44LTU2LjhzMjUuNC01Ni44IDU2LjgtNTYuOCA1Ni44IDI1LjQgNTYuOCA1Ni44YzAgMzEuNS0yNS40IDU2LjgtNTYuOCA1Ni44em03Mi4zIDE2LjRsNDYuOSAxNC41VjI3N2wtNTUuMSAxMy40LTQuMSAyMi43IDM4LjkgMzUuMy0xOS4yIDM3LjktNTQtMTYuNy0xNC42IDE1LjIgMTYuNyA1Mi41LTM4LjMgMjIuNy0zOC45LTQwLjUtMjEuNyA2LjYtMTIuNiA1NC00Mi40LS41LTEyLjYtNTMuNi0yMS43LTUuNi0zNi40IDM4LjQtMzcuNC0yMS43IDE1LjItNTAuNS0xMy43LTE2LjEtNTUuNSAxNC4xLTE5LjctMzQuOCAzNy45LTM3LjQtNC44LTIyLjgtNTQtMTQuMS41LTQwLjlMNTQgMjE5LjlsNS43LTE5LjctMzguOS0zOS40TDQxLjUgMTI1bDUzLjYgMTQuMSAxNS4yLTE1LjctMTUuMi01MiAzNi40LTIwLjcgMzYuOCAzOS40TDE5MSA4NGwxMS42LTUySDI0NWwxMS42IDQ1LjlMMjM0IDcybC02LjMtMS43LTMuMyA1LjctMTEgMTkuMS0zLjMgNS42IDQuNiA0LjYgMTcuMiAxNy40LS4zIDEtMjMuOCA2LjUtNi4yIDEuNy0uMSA2LjQtLjIgMTIuOUMxNTMuOCAxNjEuNiAxMTggMjA0IDExOCAyNTQuN2MwIDU4LjMgNDcuMyAxMDUuNyAxMDUuNyAxMDUuNyA1MC41IDAgOTIuNy0zNS40IDEwMy4yLTgyLjhsMTMuMi4yIDYuOS4xIDEuNi02LjcgNS42LTI0IDEuOS0uNiAxNy4xIDE3LjggNC43IDQuOSA1LjgtMy40IDIwLjQtMTIuMSA1LjgtMy41LTItNi41LTYuOC0yMS4yelwiXVxufTtcbnZhciBmYVJvY2tldGNoYXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncm9ja2V0Y2hhdCcsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjNlOFwiLCBcIk0yODQuMDQ2LDIyNC44YTM0LjExNCwzNC4xMTQsMCwxLDAsMzQuMzE3LDM0LjExM0EzNC4yMTcsMzQuMjE3LDAsMCwwLDI4NC4wNDYsMjI0LjhabS0xMTAuNDUsMGEzNC4xMTQsMzQuMTE0LDAsMSwwLDM0LjMxNywzNC4xMTNBMzQuMjE3LDM0LjIxNywwLDAsMCwxNzMuNiwyMjQuOFptMjIwLjkyMywwYTM0LjExNCwzNC4xMTQsMCwxLDAsMzQuMzE3LDM0LjExM0EzNC4yMTUsMzQuMjE1LDAsMCwwLDM5NC41MTksMjI0LjhabTE1My44MDctNTUuMzE5Yy0xNS41MzUtMjQuMTcyLTM3LjMxLTQ1LjU3LTY0LjY4MS02My42MTgtNTIuODg2LTM0LjgxNy0xMjIuMzc0LTU0LTE5NS42NjYtNTRhNDA1Ljk3NSw0MDUuOTc1LDAsMCwwLTcyLjAzMiw2LjM1NywyMzguNTI0LDIzOC41MjQsMCwwLDAtNDkuNTEtMzYuNTg4Qzk5LjY4NC0xMS43LDQwLjg1OS43MTEsMTEuMTM1LDExLjQyMUExNC4yOTEsMTQuMjkxLDAsMCwwLDUuNTgsMzQuNzgyQzI2LjU0Miw1Ni40NTgsNjEuMjIyLDk5LjMsNTIuNywxMzguMjUyYy0zMy4xNDIsMzMuOS01MS4xMTIsNzQuNzc2LTUxLjExMiwxMTcuMzM3LDAsNDMuMzcyLDE3Ljk3LDg0LjI0OCw1MS4xMTIsMTE4LjE0OCw4LjUyNiwzOC45NTYtMjYuMTU0LDgxLjgxNi00Ny4xMTYsMTAzLjQ5MWExNC4yODQsMTQuMjg0LDAsMCwwLDUuNTU1LDIzLjM0YzI5LjcyNCwxMC43MDksODguNTQ5LDIzLjE0NywxNTUuMzI0LTEwLjJhMjM4LjY3OSwyMzguNjc5LDAsMCwwLDQ5LjUxLTM2LjU4OUE0MDUuOTcyLDQwNS45NzIsMCwwLDAsMjg4LDQ2MC4xNGM3My4zMTMsMCwxNDIuOC0xOS4xNTksMTk1LjY2Ny01My45NzUsMjcuMzcxLTE4LjA0OSw0OS4xNDUtMzkuNDI2LDY0LjY3OS02My42MTksMTcuMzA5LTI2LjkyMywyNi4wNy01NS45MTYsMjYuMDctODYuMTI1QzU3NC4zOTQsMjI1LjQsNTY1LjYzNCwxOTYuNDMsNTQ4LjMyNiwxNjkuNDg1Wk0yODQuOTg3LDQwOS45YTM0NS42NSwzNDUuNjUsMCwwLDEtODkuNDQ2LTExLjVsLTIwLjEyOSwxOS4zOTNhMTg0LjM2NiwxODQuMzY2LDAsMCwxLTM3LjEzOCwyNy41ODUsMTQ1Ljc2NywxNDUuNzY3LDAsMCwxLTUyLjUyMiwxNC44N2MuOTgzLTEuNzcxLDEuODgxLTMuNTYzLDIuODQyLTUuMzU2cTMwLjI1OC01NS42OCwxNi4zMjUtMTAwLjA3OGMtMzIuOTkyLTI1Ljk2Mi01Mi43NzgtNTkuMi01Mi43NzgtOTUuNCwwLTgzLjEsMTA0LjI1NC0xNTAuNDY5LDIzMi44NDYtMTUwLjQ2OXMyMzIuODY3LDY3LjM3MywyMzIuODY3LDE1MC40NjlDNTE3Ljg1NCwzNDIuNTI1LDQxMy42LDQwOS45LDI4NC45ODcsNDA5LjlaXCJdXG59O1xudmFyIGZhVmsgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndmsnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxODlcIiwgXCJNMzEuNDkwNyA2My40OTA3QzAgOTQuOTgxMyAwIDE0NS42NzEgMCAyNDcuMDRWMjY0Ljk2QzAgMzY2LjMyOSAwIDQxNy4wMTkgMzEuNDkwNyA0NDguNTA5QzYyLjk4MTMgNDgwIDExMy42NzEgNDgwIDIxNS4wNCA0ODBIMjMyLjk2QzMzNC4zMjkgNDgwIDM4NS4wMTkgNDgwIDQxNi41MDkgNDQ4LjUwOUM0NDggNDE3LjAxOSA0NDggMzY2LjMyOSA0NDggMjY0Ljk2VjI0Ny4wNEM0NDggMTQ1LjY3MSA0NDggOTQuOTgxMyA0MTYuNTA5IDYzLjQ5MDdDMzg1LjAxOSAzMiAzMzQuMzI5IDMyIDIzMi45NiAzMkgyMTUuMDRDMTEzLjY3MSAzMiA2Mi45ODEzIDMyIDMxLjQ5MDcgNjMuNDkwN1pNNzUuNiAxNjguMjY3SDEyNi43NDdDMTI4LjQyNyAyNTMuNzYgMTY2LjEzMyAyODkuOTczIDE5NiAyOTcuNDRWMTY4LjI2N0gyNDQuMTZWMjQyQzI3My42NTMgMjM4LjgyNyAzMDQuNjQgMjA1LjIyNyAzMTUuMDkzIDE2OC4yNjdIMzYzLjI1M0MzNTkuMzEzIDE4Ny40MzUgMzUxLjQ2IDIwNS41ODMgMzQwLjE4NiAyMjEuNTc5QzMyOC45MTMgMjM3LjU3NCAzMTQuNDYxIDI1MS4wNzEgMjk3LjczMyAyNjEuMjI3QzMxNi40MSAyNzAuNDk5IDMzMi45MDcgMjgzLjYzIDM0Ni4xMzIgMjk5Ljc1MUMzNTkuMzU3IDMxNS44NzMgMzY5LjAxIDMzNC42MTggMzc0LjQ1MyAzNTQuNzQ3SDMyMS40NEMzMTYuNTU1IDMzNy4yNjIgMzA2LjYxNCAzMjEuNjEgMjkyLjg2NSAzMDkuNzU0QzI3OS4xMTcgMjk3Ljg5OSAyNjIuMTczIDI5MC4zNjggMjQ0LjE2IDI4OC4xMDdWMzU0Ljc0N0gyMzguMzczQzEzNi4yNjcgMzU0Ljc0NyA3OC4wMjY3IDI4NC43NDcgNzUuNiAxNjguMjY3WlwiXVxufTtcbnZhciBmYVVudGFwcGQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndW50YXBwZCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjQwNVwiLCBcIk00MDEuMyA0OS45Yy03OS44IDE2MC4xLTg0LjYgMTUyLjUtODcuOSAxNzMuMmwtNS4yIDMyLjhjLTEuOSAxMi02LjYgMjMuNS0xMy43IDMzLjRMMTQ1LjYgNDk3LjFjLTcuNiAxMC42LTIwLjQgMTYuMi0zMy40IDE0LjYtNDAuMy01LTc3LjgtMzIuMi05NS4zLTY4LjUtNS43LTExLjgtNC41LTI1LjggMy4xLTM2LjRsMTQ4LjktMjA3LjljNy4xLTkuOSAxNi40LTE4IDI3LjItMjMuN2wyOS4zLTE1LjVjMTguNS05LjggOS43LTExLjkgMTM1LjYtMTM4LjkgMS00LjggMS03LjMgMy42LTggMy0uNyA2LjYtMSA2LjMtNC42bC0uNC00LjZjLS4yLTEuOSAxLjMtMy42IDMuMi0zLjYgNC41LS4xIDEzLjIgMS4yIDI1LjYgMTAgMTIuMyA4LjkgMTYuNCAxNi44IDE3LjcgMjEuMS42IDEuOC0uNiAzLjctMi40IDQuMmwtNC41IDEuMWMtMy40LjktMi41IDQuNC0yLjMgNy40LjEgMi44LTIuMyAzLjYtNi41IDYuMXpNMjMwLjEgMzYuNGMzLjQuOSAyLjUgNC40IDIuMyA3LjQtLjIgMi43IDIuMSAzLjUgNi40IDYgNy45IDE1LjkgMTUuMyAzMC41IDIyLjIgNDQgLjcgMS4zIDIuMyAxLjUgMy4zLjUgMTEuMi0xMiAyNC42LTI2LjIgNDAuNS00Mi42IDEuMy0xLjQgMS40LTMuNS4xLTQuOS04LTguMi0xNi41LTE2LjktMjUuNi0yNi4xLTEtNC43LTEtNy4zLTMuNi04LTMtLjgtNi42LTEtNi4zLTQuNi4zLTMuMyAxLjQtOC4xLTIuOC04LjItNC41LS4xLTEzLjIgMS4xLTI1LjYgMTAtMTIuMyA4LjktMTYuNCAxNi44LTE3LjcgMjEuMS0xLjQgNC4yIDMuNiA0LjYgNi44IDUuNHpNNjIwIDQwNi43TDQ3MS4yIDE5OC44Yy0xMy4yLTE4LjUtMjYuNi0yMy40LTU2LjQtMzkuMS0xMS4yLTUuOS0xNC4yLTEwLjktMzAuNS0yOC45LTEtMS4xLTIuOS0uOS0zLjYuNS00Ni4zIDg4LjgtNDcuMSA4Mi44LTQ5IDk0LjgtMS43IDEwLjctMS4zIDIwIC4zIDI5LjggMS45IDEyIDYuNiAyMy41IDEzLjcgMzMuNGwxNDguOSAyMDcuOWM3LjYgMTAuNiAyMC4yIDE2LjIgMzMuMSAxNC43IDQwLjMtNC45IDc4LTMyIDk1LjctNjguNiA1LjQtMTEuOSA0LjMtMjUuOS0zLjQtMzYuNnpcIl1cbn07XG52YXIgZmFNYWlsY2hpbXAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWFpbGNoaW1wJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNTllXCIsIFwiTTMzMC42MSAyNDMuNTJhMzYuMTUgMzYuMTUgMCAwIDEgOS4zIDBjMS42Ni0zLjgzIDEuOTUtMTAuNDMuNDUtMTcuNjEtMi4yMy0xMC42Ny01LjI1LTE3LjE0LTExLjQ4LTE2LjEzcy02LjQ3IDguNzQtNC4yNCAxOS40MmMxLjI2IDYgMy40OSAxMS4xNCA2IDE0LjMyek0yNzcuMDUgMjUyYzQuNDcgMiA3LjIgMy4yNiA4LjI4IDIuMTMgMS44OS0xLjk0LTMuNDgtOS4zOS0xMi4xMi0xMy4wOWEzMS40NCAzMS40NCAwIDAgMC0zMC42MSAzLjY4Yy0zIDIuMTgtNS44MSA1LjIyLTUuNDEgNy4wNi44NSAzLjc0IDEwLTIuNzEgMjIuNi0zLjQ4IDctLjQ0IDEyLjggMS43NSAxNy4yNiAzLjcxem0tOSA1LjEzYy05LjA3IDEuNDItMTUgNi41My0xMy40NyAxMC4xLjkuMzQgMS4xNy44MSA1LjIxLS44MWEzNyAzNyAwIDAgMSAxOC43Mi0xLjk1YzIuOTIuMzQgNC4zMS41MiA0Ljk0LS40OSAxLjQ2LTIuMjItNS43MS04LTE1LjM5LTYuODV6bTU0LjE3IDE3LjFjMy4zOC02Ljg3LTEwLjktMTMuOTMtMTQuMy03czEwLjkyIDEzLjg4IDE0LjMyIDYuOTd6bTE1LjY2LTIwLjQ3Yy03LjY2LS4xMy03Ljk1IDE1LjgtLjI2IDE1LjkzczcuOTgtMTUuODEuMjgtMTUuOTZ6bS0yMTguNzkgNzguOWMtMS4zMi4zMS02IDEuNDUtOC40Ny0yLjM1LTUuMi04IDExLjExLTIwLjM4IDMtMzUuNzctOS4xLTE3LjQ3LTI3LjgyLTEzLjU0LTM1LjA1LTUuNTQtOC43MSA5LjYtOC43MiAyMy41NC01IDI0LjA4IDQuMjcuNTcgNC4wOC02LjQ3IDcuMzgtMTEuNjNhMTIuODMgMTIuODMgMCAwIDEgMTcuODUtMy43MmMxMS41OSA3LjU5IDEuMzcgMTcuNzYgMi4yOCAyOC42MiAxLjM5IDE2LjY4IDE4LjQyIDE2LjM3IDIxLjU4IDlhMi4wOCAyLjA4IDAgMCAwLS4yLTIuMzNjLjAzLjg5LjY4LTEuMy0zLjM1LS4zOXptMjk5LjcyLTE3LjA3Yy0zLjM1LTExLjczLTIuNTctOS4yMi02Ljc4LTIwLjUyIDIuNDUtMy42NyAxNS4yOS0yNC0zLjA3LTQzLjI1LTEwLjQtMTAuOTItMzMuOS0xNi41NC00MS4xLTE4LjU0LTEuNS0xMS4zOSA0LjY1LTU4LjctMjEuNTItODMgMjAuNzktMjEuNTUgMzMuNzYtNDUuMjkgMzMuNzMtNjUuNjUtLjA2LTM5LjE2LTQ4LjE1LTUxLTEwNy40Mi0yNi40N2wtMTIuNTUgNS4zM2MtLjA2LS4wNS0yMi43MS0yMi4yNy0yMy4wNS0yMi41N0MxNjkuNS0xOC00MS43NyAyMTYuODEgMjUuNzggMjczLjg1bDE0Ljc2IDEyLjUxYTcyLjQ5IDcyLjQ5IDAgMCAwLTQuMSAzMy41YzMuMzYgMzMuNCAzNiA2MC40MiA2Ny41MyA2MC4zOCA1Ny43MyAxMzMuMDYgMjY3LjkgMTMzLjI4IDMyMi4yOSAzIDEuNzQtNC40NyA5LjExLTI0LjYxIDkuMTEtNDIuMzhzLTEwLjA5LTI1LjI3LTE2LjUzLTI1LjI3em0tMzE2IDQ4LjE2Yy0yMi44Mi0uNjEtNDcuNDYtMjEuMTUtNDkuOTEtNDUuNTEtNi4xNy02MS4zMSA3NC4yNi03NS4yNyA4NC0xMi4zMyA0LjU0IDI5LjY0LTQuNjcgNTguNDktMzQuMTIgNTcuODF6TTg0LjMgMjQ5LjU1QzY5LjE0IDI1Mi41IDU1Ljc4IDI2MS4wOSA0Ny42IDI3M2MtNC44OC00LjA3LTE0LTEyLTE1LjU5LTE1LTEzLjAxLTI0Ljg1IDE0LjI0LTczIDMzLjMtMTAwLjIxQzExMi40MiA5MC41NiAxODYuMTkgMzkuNjggMjIwLjM2IDQ4LjkxYzUuNTUgMS41NyAyMy45NCAyMi44OSAyMy45NCAyMi44OXMtMzQuMTUgMTguOTQtNjUuOCA0NS4zNWMtNDIuNjYgMzIuODUtNzQuODkgODAuNTktOTQuMiAxMzIuNHpNMzIzLjE4IDM1MC43cy0zNS43NCA1LjMtNjkuNTEtNy4wN2M2LjIxLTIwLjE2IDI3IDYuMSA5Ni40LTEzLjgxIDE1LjI5LTQuMzggMzUuMzctMTMgNTEtMjUuMzVhMTAyLjg1IDEwMi44NSAwIDAgMSA3LjEyIDI0LjI4YzMuNjYtLjY2IDE0LjI1LS41MiAxMS40NCAxOC4xLTMuMjkgMTkuODctMTEuNzMgMzYtMjUuOTMgNTAuODRBMTA2Ljg2IDEwNi44NiAwIDAgMSAzNjIuNTUgNDIxYTEzMi40NSAxMzIuNDUgMCAwIDEtMjAuMzQgOC41OGMtNTMuNTEgMTcuNDgtMTA4LjMtMS43NC0xMjYtNDNhNjYuMzMgNjYuMzMgMCAwIDEtMy41NS05Ljc0Yy03LjUzLTI3LjItMS4xNC01OS44MyAxOC44NC04MC4zNyAxLjIzLTEuMzEgMi40OC0yLjg1IDIuNDgtNC43OWE4LjQ1IDguNDUgMCAwIDAtMS45Mi00LjU0Yy03LTEwLjEzLTMxLjE5LTI3LjQtMjYuMzMtNjAuODMgMy41LTI0IDI0LjQ5LTQwLjkxIDQ0LjA3LTM5LjkxbDUgLjI5YzguNDguNSAxNS44OSAxLjU5IDIyLjg4IDEuODggMTEuNjkuNSAyMi4yLTEuMTkgMzQuNjQtMTEuNTYgNC4yLTMuNSA3LjU3LTYuNTQgMTMuMjYtNy41MWExNy40NSAxNy40NSAwIDAgMSAxMy42IDIuMjRjMTAgNi42NCAxMS40IDIyLjczIDExLjkyIDM0LjQ5LjI5IDYuNzIgMS4xIDIzIDEuMzggMjcuNjMuNjMgMTAuNjcgMy40MyAxMi4xNyA5LjExIDE0IDMuMTkgMS4wNSA2LjE1IDEuODMgMTAuNTEgMy4wNiAxMy4yMSAzLjcxIDIxIDcuNDggMjYgMTIuMzFhMTYuMzggMTYuMzggMCAwIDEgNC43NCA5LjI5YzEuNTYgMTEuMzctOC44MiAyNS40LTM2LjMxIDM4LjE2LTQ2LjcxIDIxLjY4LTkzLjY4IDE0LjQ1LTEwMC40OCAxMy42OC0yMC4xNS0yLjcxLTMxLjYzIDIzLjMyLTE5LjU1IDQxLjE1IDIyLjY0IDMzLjQxIDEyMi40IDIwIDE1MS4zNy0yMS4zNS42OS0xIC4xMi0xLjU5LS43My0xLTQxLjc3IDI4LjU4LTk3LjA2IDM4LjIxLTEyOC40NiAyNi00Ljc3LTEuODUtMTQuNzMtNi40NC0xNS45NC0xNi42NyA0My42IDEzLjQ5IDcxIC43NCA3MSAuNzRzMi4wMy0yLjc5LS41Ni0yLjUzem0tNjguNDctNS43em0tODMuNC0xODcuNWMxNi43NC0xOS4zNSAzNy4zNi0zNi4xOCA1NS44My00NS42M2EuNzMuNzMgMCAwIDEgMSAxYy0xLjQ2IDIuNjYtNC4yOSA4LjM0LTUuMTkgMTIuNjVhLjc1Ljc1IDAgMCAwIDEuMTYuNzljMTEuNDktNy44MyAzMS40OC0xNi4yMiA0OS0xNy4zYS43Ny43NyAwIDAgMSAuNTIgMS4zOCA0MS44NiA0MS44NiAwIDAgMC03LjcxIDcuNzQuNzUuNzUgMCAwIDAgLjU5IDEuMTljMTIuMzEuMDkgMjkuNjYgNC40IDQxIDEwLjc0Ljc2LjQzLjIyIDEuOTEtLjY0IDEuNzItNjkuNTUtMTUuOTQtMTIzLjA4IDE4LjUzLTEzNC41IDI2LjgzYS43Ni43NiAwIDAgMS0xLTEuMTJ6XCJdXG59O1xudmFyIGZhQ3NzM0FsdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjc3MzLWFsdCcsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjM4YlwiLCBcIk0wIDMybDM0LjkgMzk1LjhMMTkyIDQ4MGwxNTcuMS01Mi4yTDM4NCAzMkgwem0zMTMuMSA4MGwtNC44IDQ3LjNMMTkzIDIwOC42bC0uMy4xaDExMS41bC0xMi44IDE0Ni42LTk4LjIgMjguNy05OC44LTI5LjItNi40LTczLjloNDguOWwzLjIgMzguMyA1Mi42IDEzLjMgNTQuNy0xNS40IDMuNy02MS42LTE2Ni4zLS41di0uMWwtLjIuMS0zLjYtNDYuM0wxOTMuMSAxNjJsNi41LTIuN0g3Ni43TDcwLjkgMTEyaDI0Mi4yelwiXVxufTtcbnZhciBmYVNxdWFyZVJlZGRpdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtcmVkZGl0JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXCJyZWRkaXQtc3F1YXJlXCJdLCBcImYxYTJcIiwgXCJNNjQgMzJsMzIwIDBjMzUuMyAwIDY0IDI4LjcgNjQgNjRsMCAzMjBjMCAzNS4zLTI4LjcgNjQtNjQgNjRMNjQgNDgwYy0zNS4zIDAtNjQtMjguNy02NC02NEwwIDk2QzAgNjAuNyAyOC43IDMyIDY0IDMyek0zMDUuOSAxNjYuNGMyMC42IDAgMzcuMy0xNi43IDM3LjMtMzcuM3MtMTYuNy0zNy4zLTM3LjMtMzcuM2MtMTggMC0zMy4xIDEyLjgtMzYuNiAyOS44Yy0zMC4yIDMuMi01My44IDI4LjgtNTMuOCA1OS45bDAgLjJjLTMyLjggMS40LTYyLjggMTAuNy04Ni42IDI1LjVjLTguOC02LjgtMTkuOS0xMC45LTMyLTEwLjljLTI4LjkgMC01Mi4zIDIzLjQtNTIuMyA1Mi4zYzAgMjEgMTIuMyAzOSAzMC4xIDQ3LjRjMS43IDYwLjcgNjcuOSAxMDkuNiAxNDkuMyAxMDkuNnMxNDcuNi00OC45IDE0OS4zLTEwOS43YzE3LjctOC40IDI5LjktMjYuNCAyOS45LTQ3LjNjMC0yOC45LTIzLjQtNTIuMy01Mi4zLTUyLjNjLTEyIDAtMjMgNC0zMS45IDEwLjhjLTI0LTE0LjktNTQuMy0yNC4yLTg3LjUtMjUuNGwwLS4xYzAtMjIuMiAxNi41LTQwLjcgMzcuOS00My43bDAgMGMzLjkgMTYuNSAxOC43IDI4LjcgMzYuMyAyOC43ek0xNTUgMjQ4LjFjMTQuNiAwIDI1LjggMTUuNCAyNSAzNC40cy0xMS44IDI1LjktMjYuNSAyNS45cy0yNy41LTcuNy0yNi42LTI2LjdzMTMuNS0zMy41IDI4LjEtMzMuNXptMTY2LjQgMzMuNWMuOSAxOS0xMiAyNi43LTI2LjYgMjYuN3MtMjUuNi02LjktMjYuNS0yNS45Yy0uOS0xOSAxMC4zLTM0LjQgMjUtMzQuNHMyNy4zIDE0LjYgMjguMSAzMy41em0tNDIuMSA0OS42Yy05IDIxLjUtMzAuMyAzNi43LTU1LjEgMzYuN3MtNDYuMS0xNS4xLTU1LjEtMzYuN2MtMS4xLTIuNiAuNy01LjQgMy40LTUuN2MxNi4xLTEuNiAzMy41LTIuNSA1MS43LTIuNXMzNS42IC45IDUxLjcgMi41YzIuNyAuMyA0LjUgMy4xIDMuNCA1Ljd6XCJdXG59O1xudmFyIGZhUmVkZGl0U3F1YXJlID0gZmFTcXVhcmVSZWRkaXQ7XG52YXIgZmFWaW1lb1YgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndmltZW8tdicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI3ZFwiLCBcIk00NDcuOCAxNTMuNmMtMiA0My42LTMyLjQgMTAzLjMtOTEuNCAxNzkuMS02MC45IDc5LjItMTEyLjQgMTE4LjgtMTU0LjYgMTE4LjgtMjYuMSAwLTQ4LjItMjQuMS02Ni4zLTcyLjNDMTAwLjMgMjUwIDg1LjMgMTc0LjMgNTYuMiAxNzQuM2MtMy40IDAtMTUuMSA3LjEtMzUuMiAyMS4xTDAgMTY4LjJjNTEuNi00NS4zIDEwMC45LTk1LjcgMTMxLjgtOTguNSAzNC45LTMuNCA1Ni4zIDIwLjUgNjQuNCA3MS41IDI4LjcgMTgxLjUgNDEuNCAyMDguOSA5My42IDEyNi43IDE4LjctMjkuNiAyOC44LTUyLjEgMzAuMi02Ny42IDQuOC00NS45LTM1LjgtNDIuOC02My4zLTMxIDIyLTcyLjEgNjQuMS0xMDcuMSAxMjYuMi0xMDUuMSA0NS44IDEuMiA2Ny41IDMxLjEgNjQuOSA4OS40elwiXVxufTtcbnZhciBmYUNvbnRhbyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjb250YW8nLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyNmRcIiwgXCJNNDUuNCAzMDVjMTQuNCA2Ny4xIDI2LjQgMTI5IDY4LjIgMTc1SDM0Yy0xOC43IDAtMzQtMTUuMi0zNC0zNFY2NmMwLTE4LjcgMTUuMi0zNCAzNC0zNGg1Ny43Qzc3LjkgNDQuNiA2NS42IDU5LjIgNTQuOCA3NS42Yy00NS40IDcwLTI3IDE0Ni44LTkuNCAyMjkuNHpNNDc4IDMyaC05MC4yYzIxLjQgMjEuNCAzOS4yIDQ5LjUgNTIuNyA4NC4xbC0xMzcuMSAyOS4zYy0xNC45LTI5LTM3LjgtNTMuMy04Mi42LTQzLjktMjQuNiA1LjMtNDEgMTkuMy00OC4zIDM0LjYtOC44IDE4LjctMTMuMiAzOS44IDguMiAxNDAuMyAyMS4xIDEwMC4yIDMzLjcgMTE3LjcgNDkuNSAxMzEuMiAxMi45IDExLjEgMzMuNCAxNyA1OC4zIDExLjcgNDQuNS05LjQgNTUuNy00MC43IDU3LjQtNzMuMmwxMzcuNC0yOS42YzMuMiA3MS41LTE4LjcgMTI1LjItNTcuNCAxNjMuNkg0NzhjMTguNyAwIDM0LTE1LjIgMzQtMzRWNjZjMC0xOC44LTE1LjItMzQtMzQtMzR6XCJdXG59O1xudmFyIGZhU3F1YXJlRm9udEF3ZXNvbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLWZvbnQtYXdlc29tZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTVhZFwiLCBcIk02NCAzMkMyOC43IDMyIDAgNjAuNyAwIDk2TDAgNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0bDMyMCAwYzM1LjMgMCA2NC0yOC43IDY0LTY0bDAtMzIwYzAtMzUuMy0yOC43LTY0LTY0LTY0TDY0IDMyem05MCAxMjJjMCA5LjMtNC44IDE3LjQtMTIuMSAyMmwxODguOSAwYzcuMyAwIDEzLjIgNS45IDEzLjIgMTMuMmMwIDEuOC0uNCAzLjctMS4xIDUuNEwzMTIgMjY0bDMwLjkgNjkuNGMuNyAxLjcgMS4xIDMuNSAxLjEgNS40YzAgNy4zLTUuOSAxMy4yLTEzLjIgMTMuMkwxNDQgMzUybDAgMzItMzIgMCAwLTMyIDAtMTc2IDAtMS41Yy02LjEtNC44LTEwLTEyLjItMTAtMjAuNWMwLTE0LjQgMTEuNi0yNiAyNi0yNnMyNiAxMS42IDI2IDI2elwiXVxufTtcbnZhciBmYURlc2twcm8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGVza3BybycsXG4gIGljb246IFs0ODAsIDUxMiwgW10sIFwiZjM4ZlwiLCBcIk0yMDUuOSA1MTJsMzEuMS0zOC40YzEyLjMtLjIgMjUuNi0xLjQgMzYuNS02LjYgMzguOS0xOC42IDM4LjQtNjEuOSAzOC4zLTYzLjgtLjEtNS0uOC00LjQtMjguOS0zNy40SDM2MmMtLjIgNTAuMS03LjMgNjguNS0xMC4yIDc1LjctOS40IDIzLjctNDMuOSA2Mi44LTk1LjIgNjkuNC04LjcgMS4xLTMyLjggMS4yLTUwLjcgMS4xem0yMDAuNC0xNjcuN2MzOC42IDAgNTguNS0xMy42IDczLjctMzAuOWwtMTc1LjUtLjMtMTcuNCAzMS4zIDExOS4yLS4xem0tNDMuNi0yMjMuOXYxNjguM2gtNzMuNWwtMzIuNyA1NS41SDI1MGMtNTIuMyAwLTU4LjEtNTYuNS01OC4zLTU4LjktMS4yLTEzLjItMjEuMy0xMS42LTIwLjEgMS44IDEuNCAxNS44IDguOCA0MCAyNi40IDU3LjFoLTkxYy0yNS41IDAtMTEwLjgtMjYuOC0xMDctMTE0VjE2LjlDMCAuOSA5LjcuMyAxNSAuMWg4MmMuMiAwIC4zLjEuNS4xIDQuMy0uNCA1MC4xLTIuMSA1MC4xIDQzLjcgMCAxMy4zIDIwLjIgMTMuNCAyMC4yIDAgMC0xOC4yLTUuNS0zMi44LTE1LjgtNDMuN2g4NC4yYzEwOC43LS40IDEyNi41IDc5LjQgMTI2LjUgMTIwLjJ6bS0xMzIuNSA1Nmw2NCAyOS4zYzEzLjMtNDUuNS00Mi4yLTcxLjctNjQtMjkuM3pcIl1cbn07XG52YXIgZmFCcmF2ZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdicmF2ZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTYzY1wiLCBcIk0xNDUuNSAwSDIyNGg3OC41bDQ0LjcgNTAuOHMzOS4zLTEwLjkgNTcuOCA3LjZzMzMuOCAzNC45IDMzLjggMzQuOWwtMTIgMjkuNSAxNS4zIDQzLjdzLTQ0LjkgMTcwLjItNTAuMSAxOTFjLTEwLjQgNDAuOS0xNy40IDU2LjgtNDYuOSA3Ny41cy04Mi45IDU2LjgtOTEuNiA2Mi4yYy0xLjkgMS4yLTMuOSAyLjUtNS45IDMuOWMtNy41IDUuMS0xNS44IDEwLjgtMjMuNSAxMC44bDAgMCAwIDBjLTcuNyAwLTE2LjEtNS43LTIzLjUtMTAuOGMtMi0xLjQtNC0yLjgtNS45LTMuOWMtOC43LTUuNS02Mi4xLTQxLjUtOTEuNi02Mi4ycy0zNi41LTM2LjYtNDYuOS03Ny41Yy01LjMtMjAuOC01MC4xLTE5MS01MC4xLTE5MWwxNS4zLTQzLjdMOS4yIDkzLjNzMTUuMy0xNi40IDMzLjgtMzQuOXM1Ny44LTcuNiA1Ny44LTcuNkwxNDUuNSAwek0yMjQgNDA3LjZsMCAwYzMuNyAwIDguOS00LjcgMTMtOC40Yy42LS41IDEuMi0xLjEgMS43LTEuNWM0LjItMy43IDQ3LjgtMzcuNSA1MS0zOS44czUuNC02LjUgMS45LTguN2MtMi44LTEuNy0xMC01LjUtMjAuMy0xMC44Yy0zLTEuNi02LjMtMy4yLTkuNy01Yy0xNS40LTgtMzQuNS0xNC43LTM3LjUtMTQuN2wwIDAgMCAwYy0zIDAtMjIuMSA2LjgtMzcuNSAxNC43Yy0zLjUgMS44LTYuNyAzLjUtOS43IDVjLTEwLjMgNS4zLTE3LjYgOS4xLTIwLjMgMTAuOGMtMy42IDIuMi0xLjQgNi40IDEuOSA4LjdzNDYuOCAzNi4xIDUxIDM5LjhjLjUgLjUgMS4xIDEgMS43IDEuNWM0LjEgMy43IDkuMyA4LjQgMTMgOC40bDAgMHptMC0xNjUuN2wwIDBjNC43IDAgMTcuNi0zIDI2LjQtNWwwIDAgMi0uNWM3LjgtMS44IDcuMy02LjMgNi40LTEzYy0uMS0uOC0uMi0xLjYtLjMtMi40Yy0uNi02LjEtNS44LTMzLjEtOS4xLTUwLjNjLTEuMS01LjgtMi0xMC41LTIuNC0xMi45Yy0xLjUtOC4xLS42LTkuNCAuNy0xMS4zYy4yLS4zIC41LS43IC43LTEuMWMxLjQtMi4zIDE2LTYuMiAyNy45LTkuNWwwIDBjMi41LS43IDQuOC0xLjMgNi45LTEuOWMxMC42LTMgMzIuNC0uNiA0NC4yIC42YzEuOCAuMiAzLjQgLjQgNC43IC41YzkuNiAuOSAxMC40IDIuMyA3LjIgMy44Yy0yLjMgMS4xLTE2LjIgNi4zLTI4LjcgMTAuOWwwIDAgMCAwYy00LjcgMS44LTkuMiAzLjUtMTIuOCA0LjhjLTEuNSAuNS0zIDEuMS00LjUgMS43Yy0xMi41IDQuNi0yNy4yIDEwLTI4LjkgMTkuNGMtMS41IDguMyA1LjIgMTkuOSAxMS4zIDMwLjNsMCAwYzEuNiAyLjggMy4yIDUuNSA0LjYgOC4xYzYuMyAxMS45IDYuNSAxMy4zIDYuMSAxOC4xYy0uNCAzLjktMTQuNSAxMi43LTIyLjQgMTcuNmwwIDBjLTEuOCAxLjEtMy4zIDIuMS00LjIgMi43Yy0uOCAuNS0yLjEgMS40LTMuOCAyLjRjLTguNiA1LjItMjYuMyAxNi0yNi4zIDIyLjVjMCA3LjggMjQuNiAyOC4xIDMyLjQgMzMuMnMyOC45IDE2LjEgMzcuOSAxNy44czIzLTguNSAzMS4yLTIzLjhjNy43LTE0LjQgMS43LTI4LjUtMy4yLTQwbC0uOS0yLjJjLTQuNS0xMC42IDEuOS0xNyA2LjItMjEuM2wwIDBjLjUtLjUgMS0xIDEuNC0xLjRMMzc3LjcgMTk0YzEuMy0xLjMgMi41LTIuNiAzLjctMy44bDAgMGM1LjgtNS43IDEwLjgtMTAuNSAxMC44LTIyLjhjMC0xNC45LTU3LjUtODQuNS01Ny41LTg0LjVzLTQ4LjUgOS4zLTU1LjEgOS4zYy01LjIgMC0xNS4zLTMuNS0yNS44LTcuMWwwIDBjLTIuNy0uOS01LjQtMS45LTgtMi43QzIzMi44IDc4LjEgMjI0IDc4IDIyNCA3OGwwIDAgMCAwcy04LjcgMC0yMS44IDQuNGMtMi43IC45LTUuNCAxLjgtOCAyLjdsMCAwYy0xMC41IDMuNi0yMC42IDcuMS0yNS44IDcuMWMtNi41IDAtNTUuMS05LjMtNTUuMS05LjNzLTU3LjUgNjkuNi01Ny41IDg0LjVjMCAxMi4zIDQuOSAxNy4xIDEwLjggMjIuOGwwIDBjMS4yIDEuMiAyLjUgMi40IDMuNyAzLjhsNDMuMSA0NS44Yy40IC41IC45IC45IDEuNCAxLjRsMCAwYzQuMyA0LjMgMTAuNiAxMC43IDYuMiAyMS4zbC0uOSAyLjJjLTQuOSAxMS41LTExIDI1LjYtMy4yIDQwYzguMiAxNS4zIDIyLjIgMjUuNSAzMS4yIDIzLjhzMzAuMS0xMi43IDM3LjktMTcuOHMzMi40LTI1LjQgMzIuNC0zMy4yYzAtNi41LTE3LjctMTcuMy0yNi4zLTIyLjVjLTEuNy0xLTMuMS0xLjktMy44LTIuNGMtLjktLjYtMi40LTEuNS00LjItMi43Yy03LjktNC45LTIyLTEzLjctMjIuNC0xNy42Yy0uNC00LjgtLjMtNi4yIDYuMS0xOC4xYzEuMy0yLjUgMi45LTUuMyA0LjYtOC4xYzYtMTAuNCAxMi44LTIyIDExLjMtMzAuM2MtMS43LTkuNC0xNi40LTE0LjgtMjguOS0xOS40Yy0xLjYtLjYtMy4xLTEuMS00LjUtMS43Yy0zLjYtMS40LTguMS0zLjEtMTIuOC00LjhsLS4xIDBjLTEyLjUtNC43LTI2LjQtOS45LTI4LjctMTAuOWMtMy4yLTEuNS0yLjMtMi44IDcuMi0zLjhjMS4zLS4xIDIuOS0uMyA0LjctLjVjMTEuOC0xLjMgMzMuNi0zLjYgNDQuMi0uNmMyLjEgLjYgNC40IDEuMiA2LjkgMS45YzExLjkgMy4yIDI2LjUgNy4yIDI3LjkgOS41Yy4yIC40IC41IC43IC43IDEuMWMxLjMgMS45IDIuMiAzLjIgLjcgMTEuM2MtLjQgMi40LTEuMyA3LjEtMi40IDEyLjljLTMuMyAxNy4yLTguNSA0NC4yLTkuMSA1MC4zYy0uMSAuOC0uMiAxLjctLjMgMi40Yy0uOCA2LjctMS40IDExLjIgNi40IDEzbDIgLjUgMCAwYzguOCAyIDIxLjggNSAyNi40IDVsMCAwelwiXVxufTtcbnZhciBmYVNpc3RyaXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2lzdHJpeCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNlZVwiLCBcIk00NDggNDQ5TDMwMS4yIDMwMC4yYzIwLTI3LjkgMzEuOS02Mi4yIDMxLjktOTkuMiAwLTkzLjEtNzQuNy0xNjguOS0xNjYuNS0xNjguOUM3NC43IDMyIDAgMTA3LjggMCAyMDAuOXM3NC43IDE2OC45IDE2Ni41IDE2OC45YzM5LjggMCA3Ni4zLTE0LjIgMTA1LTM3LjlsMTQ2IDE0OC4xIDMwLjUtMzF6TTE2Ni41IDMzMC44Yy03MC42IDAtMTI4LjEtNTguMy0xMjguMS0xMjkuOVM5NS45IDcxIDE2Ni41IDcxczEyOC4xIDU4LjMgMTI4LjEgMTI5LjktNTcuNCAxMjkuOS0xMjguMSAxMjkuOXpcIl1cbn07XG52YXIgZmFTcXVhcmVJbnN0YWdyYW0gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLWluc3RhZ3JhbScsXG4gIGljb246IFs0NDgsIDUxMiwgW1wiaW5zdGFncmFtLXNxdWFyZVwiXSwgXCJlMDU1XCIsIFwiTTE5NC40IDIxMS43YTUzLjMgNTMuMyAwIDEgMCA1OS4zIDg4LjcgNTMuMyA1My4zIDAgMSAwIC01OS4zLTg4Ljd6bTE0Mi4zLTY4LjRjLTUuMi01LjItMTEuNS05LjMtMTguNC0xMmMtMTguMS03LjEtNTcuNi02LjgtODMuMS02LjVjLTQuMSAwLTcuOSAuMS0xMS4yIC4xYy0zLjMgMC03LjIgMC0xMS40LS4xYy0yNS41LS4zLTY0LjgtLjctODIuOSA2LjVjLTYuOSAyLjctMTMuMSA2LjgtMTguNCAxMnMtOS4zIDExLjUtMTIgMTguNGMtNy4xIDE4LjEtNi43IDU3LjctNi41IDgzLjJjMCA0LjEgLjEgNy45IC4xIDExLjFzMCA3LS4xIDExLjFjLS4yIDI1LjUtLjYgNjUuMSA2LjUgODMuMmMyLjcgNi45IDYuOCAxMy4xIDEyIDE4LjRzMTEuNSA5LjMgMTguNCAxMmMxOC4xIDcuMSA1Ny42IDYuOCA4My4xIDYuNWM0LjEgMCA3LjktLjEgMTEuMi0uMWMzLjMgMCA3LjIgMCAxMS40IC4xYzI1LjUgLjMgNjQuOCAuNyA4Mi45LTYuNWM2LjktMi43IDEzLjEtNi44IDE4LjQtMTJzOS4zLTExLjUgMTItMTguNGM3LjItMTggNi44LTU3LjQgNi41LTgzYzAtNC4yLS4xLTguMS0uMS0xMS40czAtNy4xIC4xLTExLjRjLjMtMjUuNSAuNy02NC45LTYuNS04M2wwIDBjLTIuNy02LjktNi44LTEzLjEtMTItMTguNHptLTY3LjEgNDQuNUE4MiA4MiAwIDEgMSAxNzguNCAzMjQuMmE4MiA4MiAwIDEgMSA5MS4xLTEzNi40em0yOS4yLTEuM2MtMy4xLTIuMS01LjYtNS4xLTcuMS04LjZzLTEuOC03LjMtMS4xLTExLjFzMi42LTcuMSA1LjItOS44czYuMS00LjUgOS44LTUuMnM3LjYtLjQgMTEuMSAxLjFzNi41IDMuOSA4LjYgN3MzLjIgNi44IDMuMiAxMC42YzAgMi41LS41IDUtMS40IDcuM3MtMi40IDQuNC00LjEgNi4ycy0zLjkgMy4yLTYuMiA0LjJzLTQuOCAxLjUtNy4zIDEuNWwwIDBjLTMuOCAwLTcuNS0xLjEtMTAuNi0zLjJ6TTQ0OCA5NmMwLTM1LjMtMjguNy02NC02NC02NEg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZ6TTM1NyAzODljLTE4LjcgMTguNy00MS40IDI0LjYtNjcgMjUuOWMtMjYuNCAxLjUtMTA1LjYgMS41LTEzMiAwYy0yNS42LTEuMy00OC4zLTcuMi02Ny0yNS45cy0yNC42LTQxLjQtMjUuOC02N2MtMS41LTI2LjQtMS41LTEwNS42IDAtMTMyYzEuMy0yNS42IDcuMS00OC4zIDI1LjgtNjdzNDEuNS0yNC42IDY3LTI1LjhjMjYuNC0xLjUgMTA1LjYtMS41IDEzMiAwYzI1LjYgMS4zIDQ4LjMgNy4xIDY3IDI1LjhzMjQuNiA0MS40IDI1LjggNjdjMS41IDI2LjMgMS41IDEwNS40IDAgMTMxLjljLTEuMyAyNS42LTcuMSA0OC4zLTI1LjggNjd6XCJdXG59O1xudmFyIGZhSW5zdGFncmFtU3F1YXJlID0gZmFTcXVhcmVJbnN0YWdyYW07XG52YXIgZmFCYXR0bGVOZXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYmF0dGxlLW5ldCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjgzNVwiLCBcIk00NDguNjEgMjI1LjYyYzI2Ljg3LjE4IDM1LjU3LTcuNDMgMzguOTItMTIuMzcgMTIuNDctMTYuMzItNy4wNi00Ny42LTUyLjg1LTcxLjMzIDE3Ljc2LTMzLjU4IDMwLjExLTYzLjY4IDM2LjM0LTg1LjMgMy4zOC0xMS44MyAxLjA5LTE5IC40NS0yMC4yNS0xLjcyIDEwLjUyLTE1Ljg1IDQ4LjQ2LTQ4LjIgMTAwLjA1LTI1LTExLjIyLTU2LjUyLTIwLjEtOTMuNzctMjMuOC04Ljk0LTE2Ljk0LTM0Ljg4LTYzLjg2LTYwLjQ4LTg4LjkzQzI1Mi4xOCA3LjE0IDIzOC43IDEuMDcgMjI4LjE4LjIyaC0uMDVjLTEzLjgzLTEuNTUtMjIuNjcgNS44NS0yNy40IDExLTE3LjIgMTguNTMtMjQuMzMgNDguODctMjUgODQuMDctNy4yNC0xMi4zNS0xNy4xNy0yNC42My0yOC41LTI1LjkzaC0uMThjLTIwLjY2LTMuNDgtMzguMzkgMjkuMjItMzYgODEuMjktMzguMzYgMS4zOC03MSA1Ljc1LTkzIDExLjIzLTkuOSAyLjQ1LTE2LjIyIDcuMjctMTcuNzYgOS43MiAxLS4zOCAyMi40LTkuMjIgMTExLjU2LTkuMjIgNS4yMiA1MyAyOS43NSAxMDEuODIgMjYgOTMuMTktOS43MyAxNS40LTM4LjI0IDYyLjM2LTQ3LjMxIDk3LjctNS44NyAyMi44OC00LjM3IDM3LjYxLjE1IDQ3LjE0IDUuNTcgMTIuNzUgMTYuNDEgMTYuNzIgMjMuMiAxOC4yNiAyNSA1LjcxIDU1LjM4LTMuNjMgODYuNy0yMS4xNC03LjUzIDEyLjg0LTEzLjkgMjguNTEtOS4wNiAzOS4zNCA3LjMxIDE5LjY1IDQ0LjQ5IDE4LjY2IDg4LjQ0LTkuNDUgMjAuMTggMzIuMTggNDAuMDcgNTcuOTQgNTUuNyA3NC4xMmEzOS43OSAzOS43OSAwIDAgMCA4Ljc1IDcuMDljNS4xNCAzLjIxIDguNTggMy4zNyA4LjU4IDMuMzctOC4yNC02Ljc1LTM0LTM4LTYyLjU0LTkxLjc4IDIyLjIyLTE2IDQ1LjY1LTM4Ljg3IDY3LjQ3LTY5LjI3IDEyMi44MiA0LjYgMTQzLjI5LTI0Ljc2IDE0OC0zMS42NCAxNC42Ny0xOS44OCAzLjQzLTU3LjQ0LTU3LjMyLTkzLjY5em0tNzcuODUgMTA2LjIyYzIzLjgxLTM3LjcxIDMwLjM0LTY3Ljc3IDI5LjQ1LTkyLjMzIDI3Ljg2IDE3LjU3IDQ3LjE4IDM3LjU4IDQ5LjA2IDU4LjgzIDEuMTQgMTIuOTMtOC4xIDI5LjEyLTc4LjUxIDMzLjV6TTIxNi45IDM4Ny42OWM5Ljc2LTYuMjMgMTkuNTMtMTMuMTIgMjkuMi0yMC40OSA2LjY4IDEzLjMzIDEzLjYgMjYuMSAyMC42IDM4LjE5LTQwLjYgMjEuODYtNjguODQgMTIuNzYtNDkuOC0xNy43em0yMTUtMTcxLjM1Yy0xMC4yOS01LjM0LTIxLjE2LTEwLjM0LTMyLjM4LTE1LjA1YTcyMi40NTkgNzIyLjQ1OSAwIDAgMCAyMi43NC0zNi45YzM5LjA2IDI0LjEgNDUuOSA1My4xOCA5LjY0IDUxLjk1ek0yNzkuMTggMzk4Yy01LjUxLTExLjM1LTExLTIzLjUtMTYuNS0zNi40NCA0My4yNSAxLjI3IDYyLjQyLTE4LjczIDYzLjI4LTIwLjQxIDAgLjA3LTI1IDE1LjY0LTYyLjUzIDEyLjI1YTcxOC43OCA3MTguNzggMCAwIDAgODUuMDYtODRxMTMuMDYtMTUuMzEgMjQuOTMtMzEuMTFjLS4zNi0uMjktMS41NC0zLTE2LjUxLTEyLTUxLjcgNjAuMjctMTAyLjM0IDk4LTEzMi43NSAxMTUuOTItMjAuNTktMTEuMTgtNDAuODQtMzEuNzgtNTUuNzEtNjEuNDktMjAtMzkuOTItMzAtODIuMzktMzEuNTctMTE2LjA3IDEyLjMuOTEgMjUuMjcgMi4xNyAzOC44NSAzLjg4LTIyLjI5IDM2LjgtMTQuMzkgNjMtMTMuNDcgNjQuMjMgMC0uMDctLjk1LTI5LjE3IDIwLjE0LTU5LjU3YTY5NS4yMyA2OTUuMjMgMCAwIDAgNDQuNjcgMTUyLjg0Yy45My0uMzggMS44NC44OCAxOC42Ny04LjI1LTI2LjMzLTc0LjQ3LTMzLjc2LTEzOC4xNy0zNC0xNzMuNDMgMjAtMTIuNDIgNDguMTgtMTkuOCA4MS42My0xNy44MSA0NC41NyAyLjY3IDg2LjM2IDE1LjI1IDExNi4zMiAzMC43MXEtMTAuNjkgMTUuNjYtMjMuMzMgMzIuNDdDMzY1LjYzIDE1MiAzMzkuMSAxNDUuODQgMzM3LjUgMTQ2Yy4xMSAwIDI1LjkgMTQuMDcgNDEuNTIgNDcuMjJhNzE3LjYzIDcxNy42MyAwIDAgMC0xMTUuMzQtMzEuNzEgNjQ2LjYwOCA2NDYuNjA4IDAgMCAwLTM5LjM5LTYuMDVjLS4wNy40NS0xLjgxIDEuODUtMi4xNiAyMC4zM0MzMDAgMTkwLjI4IDM1OC43OCAyMTUuNjggMzg5LjM2IDIzM2MuNzQgMjMuNTUtNi45NSA1MS42MS0yNS40MSA3OS41Ny0yNC42IDM3LjMxLTU2LjM5IDY3LjIzLTg0Ljc3IDg1LjQzem0yNy40LTI4N2MtNDQuNTYtMS42Ni03My41OCA3LjQzLTk0LjY5IDIwLjY3IDItNTIuMyAyMS4zMS03Ni4zOCAzOC4yMS03NS4yOEMyNjcgNTIuMTUgMzA1IDEwOC41NSAzMDYuNTggMTExem0tMTMwLjY1IDMuMWMuNDggMTIuMTEgMS41OSAyNC42MiAzLjIxIDM3LjI4LTE0LjU1LS44NS0yOC43NC0xLjI1LTQyLjQtMS4yNi0uMDggMy4yNC0uMTItNTEgMjQuNjctNDkuNTloLjA5YzUuNzYgMS4wOSAxMC42MyA2Ljg4IDE0LjQzIDEzLjU3em0tMjguMDYgMTYyYzIwLjc2IDM5LjcgNDMuMyA2MC41NyA2NS4yNSA3Mi4zMS00Ni43OSAyNC43Ni03Ny41MyAyMC04NC45MiA0LjUxLS4yLS4yMS0xMS4xMy0xNS4zIDE5LjY3LTc2Ljgxem0yMTAuMDYgNzQuOFwiXVxufTtcbnZhciBmYVRoZVJlZFlldGkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndGhlLXJlZC15ZXRpJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNjlkXCIsIFwiTTQ4OC4yMyAyNDEuN2wyMC43IDcuMWMtOS42LTIzLjktMjMuOS0zNy0zMS43LTQ0LjhsNy4xLTE4LjJjLjIgMCAxMi4zLTI3LjgtMi41LTMwLjctLjYtMTEuMy02LjYtMjctMTguNC0yNy03LjYtMTAuNi0xNy43LTEyLjMtMzAuNy01LjlhMTIyLjIgMTIyLjIgMCAwIDAtMjUuMyAxNi41Yy01LjMtNi40LTMgLjQtMy0yOS44LTM3LjEtMjQuMy00NS40LTExLjctNzQuOCAzbC41LjVhMjM5LjM2IDIzOS4zNiAwIDAgMC02OC40LTEzLjNjLTUuNS04LjctMTguNi0xOS4xLTI1LjEtMjUuMWwyNC44IDcuMWMtNS41LTUuNS0yNi44LTEyLjktMzQuMi0xNS4yIDE4LjItNC4xIDI5LjgtMjAuOCA0Mi41LTMzLTM0LjktMTAuMS02Ny45LTUuOS05Ny45IDExLjhsMTItNDQuMkwxODIgMGMtMzEuNiAyNC4yLTMzIDQxLjktMzMuNyA0NS41LS45LTIuNC02LjMtMTkuNi0xNS4yLTI3YTM1LjEyIDM1LjEyIDAgMCAwLS41IDI1LjNjMyA4LjQgNS45IDE0LjggOC40IDE4LjktMTYtMy4zLTI4LjMtNC45LTQ5LjIgMGgtMy43bDMzIDE0LjNhMTk0LjI2IDE5NC4yNiAwIDAgMC00Ni43IDY3LjRsLTEuNyA4LjQgMS43IDEuNyA3LjYtNC43Yy0zLjMgMTEuNi01LjMgMTkuNC02LjYgMjUuOGEyMDAuMTggMjAwLjE4IDAgMCAwLTI3LjggNDAuM2MtMTUgMS0zMS44IDEwLjgtNDAuMyAxNC4zbDMgMy40IDI4LjggMWMtLjUgMS0uNyAyLjItMS4yIDMuMi03LjMgNi40LTM5LjggMzcuNy0zMyA4MC43bDIwLjItMjIuNGMuNSAxLjcuNyAzLjQgMS4yIDUuMiAwIDI1LjUuNCA4OS42IDY0LjkgMTUwLjUgNDMuNiA0MCA5NiA2MC4yIDE1Ny41IDYwLjIgMTIxLjcgMCAyMjMtODcuMyAyMjMtMjExLjUgNi44LTkuNy0xLjIgMyAxNi43LTI1LjFsMTMgMTQuMyAyLjUtLjVBMTgxLjg0IDE4MS44NCAwIDAgMCA0OTUgMjU1YTQ0Ljc0IDQ0Ljc0IDAgMCAwLTYuOC0xMy4zek0zOTggMTExLjJsLS41IDIxLjljNS41IDE4LjEgMTYuOSAxNy4yIDIyLjQgMTcuMmwtMy40LTQuNyAyMi40LTUuNGEyNDIuNDQgMjQyLjQ0IDAgMCAxLTI3IDBjMTIuOC0yLjEgMzMuMy0yOSA0My0xMS4zIDMuNCA3LjYgNi40IDE3LjIgOS4zIDI3LjhsMS43LTUuOWE1Ni4zOCA1Ni4zOCAwIDAgMS0xLjctMTUuMmM1LjQuNSA4LjggMy40IDkuMyAxMC4xLjUgNi40IDEuNyAxNC44IDMuNCAyNS4zbDQuNy0xMS4zYzQuNiAwIDQuNS0zLjYtMi41IDIwLjctMjAuOS04LjctMzUuMS04LjQtNDYuNS04LjRsMTguMi0xNmMtMjUuMyA4LjItMzMgMTAuOC01NC44IDIwLjktMS4xLTUuNC01LTEzLjUtMTYtMTkuOS0zLjIgMy44LTIuOC45LS43IDE0LjhoLTIuNWE2Mi4zMiA2Mi4zMiAwIDAgMC04LjQtMjMuMWw0LjItMy40YzguNC03LjEgMTEuOC0xNC4zIDEwLjYtMjEuOS0uNS02LjQtNS40LTEzLjUtMTMuNS0yMC43IDUuNi0zLjQgMTUuMi0uNCAyOC4zIDguNXptLTM5LjYtMTAuMWMyLjcgMS45IDExLjQgNS40IDE4LjkgMTcuMiA0LjIgOC40IDQgOS44IDMuNCAxMS4xLS41IDIuNC0uNSA0LjMtMyA3LjEtMS43IDIuNS01LjQgNC43LTExLjggNy42LTcuNi0xMy0xNi41LTIzLjYtMjcuOC0zMS4yek05MSAxNDMuMWwxLjItMS43YzEuMi0yLjkgNC4yLTcuNiA5LjMtMTUuMmwyLjUtMy40LTEzIDEyLjMgNS40LTQuNy0xMC4xIDkuMy00LjIgMS4yYzEyLjMtMjQuMSAyMy4xLTQxLjMgMzIuNS01MC4yIDkuMy05LjMgMTYtMTYgMjAuMi0xOS40bC02LjQgMS4yYy0xMS4zLTQuMi0xOS40LTcuMS0yNC44LTguNCAyLjUtLjUgMy43LS41IDMuMi0uNSAxMC4zIDAgMTcuNS41IDIwLjkgMS4yYTUyLjM1IDUyLjM1IDAgMCAwIDE2IDIuNWwuNS0xLjctOC40LTM1LjggMTMuNSAyOWE0Mi44OSA0Mi44OSAwIDAgMCA1LjktMTQuM2MxLjctNi40IDUuNC0xMyAxMC4xLTE5LjRzNy42LTEwLjYgOS4zLTExLjNhMjM0LjY4IDIzNC42OCAwIDAgMC02LjQgMjUuM2wtMS43IDcuMS0uNSA0LjcgMi41IDIuNUMxOTAuNCAzOS45IDIxNCAzNCAyMzkuOCAzNC41bDIxLjEuNWMtMTEuOCAxMy41LTI3LjggMjEuOS00OC41IDI0LjhhMjAxLjI2IDIwMS4yNiAwIDAgMS0yMy40IDIuOWwtLjItLjUtMi41LTEuMmEyMC43NSAyMC43NSAwIDAgMC0xNCAyYy0yLjUtLjItNC45LS41LTcuMS0uN2wtMi41IDEuNy41IDEuMmMyIC4yIDMuOS41IDYuMi43bC0yIDMuNCAzLjQtLjUtMTAuNiAxMS4zYy00LjIgMy01LjQgNi40LTQuMiA5LjNsNS40LTMuNGgxLjJhMzkuNCAzOS40IDAgMCAxIDI1LjMtMTUuMnYtM2M2LjQuNSAxMyAxIDE5LjQgMS4yIDYuNCAwIDguNC41IDUuNCAxLjJhMTg5LjYgMTg5LjYgMCAwIDEgMjAuNyAxMy41YzEzLjUgMTAuMSAyMy42IDIxLjkgMzAgMzUuNCA4LjggMTguMiAxMy41IDM3LjEgMTMuNSA1Ni42YTE0MS4xMyAxNDEuMTMgMCAwIDEtMyAyOC4zIDIwOS45MSAyMDkuOTEgMCAwIDEtMTYgNDZsMi41LjVjMTguMi0xOS43IDQxLjktMTYgNDkuMi0xNmwtNi40IDUuOSAyMi40IDE3LjctMS43IDMwLjdjLTUuNC0xMi4zLTE2LjUtMjEuMS0zMy0yNy44IDE2LjUgMTQuOCAyMy42IDIxLjEgMjEuOSAyMC4yLTQuOC0yLjgtMy41LTEuOS0xMC44LTMuNyA0LjEgNC4xIDE3LjUgMTguOCAxOC4yIDIwLjdsLjIuMi0uMi4yYzAgMS44IDEuNi0xLjItMTQgMjIuOS03NS4yLTE1LjMtMTA2LjI3LTQyLjctMTQxLjItNjMuMmwxMS44IDEuMmMtMTEuOC0xOC41LTE1LjYtMTcuNy0zOC40LTI2LjFMMTQ5IDIyNWMtOC44LTMtMTguMi0zLTI4LjMuNWw3LjYtMTAuNi0xLjItMS43Yy0xNC45IDQuMy0xOS44IDkuMi0yMi42IDExLjMtMS4xLTUuNS0yLjgtMTIuNC0xMi4zLTI4LjhsLTEuMiAyNy0xMy4yLTVjMS41LTI1LjIgNS40LTUwLjUgMTMuMi03NC42em0yNzYuNSAzMzBjLTQ5LjkgMjUtNTYuMSAyMi40LTU5IDIzLjktMjkuOC0xMS44LTUwLjktMzEuNy02My41LTU4LjhsMzAgMTYuNWMtOS44LTkuMy0xOC4zLTE2LjUtMzguNC00NC4zbDExLjggMjMuMS0xNy43LTcuNmMxNC4yIDIxLjEgMjMuNSA1MS43IDY2LjYgNzMuNS0xMjAuOCAyNC4yLTE5OS03Mi4xLTIwMC45LTc0LjNhMjYyLjU3IDI2Mi41NyAwIDAgMCAzNS40IDI0LjhjMy40IDEuNyA3LjEgMi41IDEwLjEgMS4ybC0xNi0yMC43YzkuMiA0LjIgOS41IDQuNSA2OS4xIDI5LTQyLjUtMjAuNy03My44LTQwLjgtOTMuMi02MC4yLS41IDYuNC0xLjIgMTAuMS0xLjIgMTAuMWE4MC4yNSA4MC4yNSAwIDAgMSAyMC43IDI2LjZjLTM5LTE4LjktNTcuNi00Ny42LTcxLjMtODIuNiA0OS45IDU1LjEgMTE4LjkgMzcuNSAxMjAuNSAzNy4xIDM0LjggMTYuNCA2OS45IDIzLjYgMTEzLjkgMTAuNiAzLjMgMCAyMC4zIDE3IDI1LjMgMzkuMWw0LjItMy0yLjUtMjMuNmM5IDkgMjQuOSAyMi42IDM0LjQgMTMtMTUuNi01LjMtMjMuNS05LjUtMjkuNS0zMS43IDQuNiA0LjIgNy42IDkgMjcuOCAxNWwxLjItMS4yLTEwLjUtMTQuMmMxMS43LTQuOC0zLjUgMSAzMi0xMC44IDQuMyAzNC4zIDkgNDkuMi43IDg5LjV6bTExNS4zLTIxNC40bC0yLjUuNSAzIDkuM2MtMy41IDUuOS0yMy43IDQ0LjMtNzEuNiA3OS43LTM5LjUgMjkuOC03Ni42IDM5LjEtODAuOSA0MC4zbC03LjYtNy4xLTEuMiAzIDE0LjMgMTYtNy4xLTQuNyAzLjQgNC4yaC0xLjJsLTIxLjktMTMuNSA5LjMgMjYuNi0xOS0yNy45LTEuMiAyLjUgNy42IDI5Yy02LjEtOC4yLTIxLTMyLjYtNTYuOC0zOS42bDMyLjUgMjEuMmEyMTQuODIgMjE0LjgyIDAgMCAxLTkzLjItNi40Yy00LjItMS4yLTguOS0yLjUtMTMuNS00LjJsMS4yLTMtNDQuOC0yMi40IDI2LjEgMjIuNGMtNTcuNyA5LjEtMTEzLTI1LjQtMTI2LjQtODMuNGwtMi41LTE2LjQtMjIuMjcgMjIuM2MxOS41LTU3LjUgMjUuNi01Ny45IDUxLjQtNzAuMS05LjEtNS4zLTEuNi0zLjMtMzguNC05LjMgMTUuOC01LjggMzMtMTUuNCA3MyA1LjJhMTguNSAxOC41IDAgMCAxIDMuNy0xLjdjLjYtMy4yLjQtLjggMS0xMS44IDMuOSAxMCAzLjYgOC43IDMgOS4zbDEuNy41YzEyLjctNi41IDguOS00LjUgMTctOC45bC01LjQgMTMuNSAyMi4zLTUuOC04LjQgOC40IDIuNSAyLjVjNC41LTEuOCAzMC4zIDMuNCA0MC44IDE2bC0yMy42LTIuNWMzOS40IDIzIDUxLjUgNTQgNTUuOCA2OS42bDEuNy0xLjJjLTIuOC0yMi4zLTEyLjQtMzMuOS0xNi00MC4xIDQuMiA1IDM5LjIgMzQuNiAxMTAuNCA0Ni0xMS4zLS41LTIzLjEgNS40LTM0LjkgMTguOWw0Ni43LTIwLjItOS4zIDIxLjljNy42LTEwLjEgMTQuOC0yMy42IDIxLjItMzkuNnYtLjVsMS4yLTMtMS4yIDE2YzEzLjUtNDEuOCAyNS4zLTc4LjUgMzUuNC0xMDkuN2wxMy41LTI3Ljh2LTJsLTUuNC00LjJoMTAuMWw1LjkgNC4yIDIuNS0xLjItMy40LTE2IDEyLjMgMTguOSA0MS44LTIwLjItMTQuOCAxMyAuNSAyLjkgMTcuNy0uNWExODQgMTg0IDAgMCAxIDMzIDQuMmwtMjMuNiAyLjUtMS4yIDMgMjYuNiAyMy4xYTI1NC4yMSAyNTQuMjEgMCAwIDEgMjcgMzJjLTExLjItMy4zLTEwLjMtMy40LTIxLjItMy40bDEyLjMgMzIuNXptLTYuMS03MS4zbC0zLjkgMTMtMTQuMy0xMS44em0tMjU0LjggNy4xYzEuNyAxMC42IDQuNyAxNy43IDguOCAyMS45LTkuMyA2LjYtMjcuNSAxMy45LTQ2LjUgMTZsLjUgMS4yYTUwLjIyIDUwLjIyIDAgMCAwIDI0LjgtMi41bC03LjEgMTNjNC4yLTEuNyAxMC4xLTcuMSAxNy43LTE0LjggMTEuOS01LjUgMTIuNy01LjEgMjAuMi0xNi0xMi43LTYuNC0xNS43LTEzLjctMTguNC0xOC44em0zLjctMTAyLjNjLTYuNC0zLjQtMTAuNiAzLTEyLjMgMTguOXMyLjUgMjkuNSAxMS44IDM5LjYgMTguMiAxMC42IDI2LjEgMyAzLjQtMjMuNi0xMS4zLTQ3LjdhMzkuNTcgMzkuNTcgMCAwIDAtMTQuMjctMTMuOHptLTQuNyA0Ni4zYzUuNCAyLjIgMTAuNSAxLjkgMTIuMy0xMC42di00LjdsLTEuMi41Yy00LjMtMy4xLTIuNS00LjUtMS43LTYuMmwuNS0uNWMtLjktMS4yLTUtOC4xLTEyLjUgNC43LS41LTEzLjUuNS0yMS45IDMtMjQuOCAxLjItMi41IDQuNy0xLjIgMTEuMyA0LjIgNi40IDUuNCAxMS4zIDE2IDE1LjIgMzIuNSA2LjUgMjgtMTkuOCAyNi4yLTI2LjkgNC45em0tNDUtNS41YzEuNi4zIDkuMy0xLjEgOS4zLTE0LjhoLS41Yy01LjQtMS4xLTIuMi01LjUtLjctNS45LTEuNy0zLTMuNC00LjItNS40LTQuNy04LjEgMC0xMS42IDEyLjctOC4xIDIxLjJhNy41MSA3LjUxIDAgMCAwIDUuNDMgNC4yek0yMTYgODIuOWwtMi41LjUuNSAzYTQ4Ljk0IDQ4Ljk0IDAgMCAxIDI2LjEgNS45Yy0yLjUtNS41LTEwLTE0LjMtMjguMy0xNC4zbC41IDIuNXptLTcxLjggNDkuNGMyMS43IDE2LjggMTYuNSAyMS40IDQ2LjUgMjMuNmwtMi45LTQuN2E0Mi42NyA0Mi42NyAwIDAgMCAxNC44LTI4LjNjMS43LTE2LTEuMi0yOS41LTguOC00MS4zbDEzLTcuNmEyLjI2IDIuMjYgMCAwIDAtLjUtMS43IDE0LjIxIDE0LjIxIDAgMCAwLTEzLjUgMS43Yy0xMi43IDYuNy0yOCAyMC45LTI5IDIyLjQtMS43IDEuNy0zLjQgNS45LTUuNCAxMy41YTk5LjYxIDk5LjYxIDAgMCAwLTIuOSAyMy42Yy00LjctOC0xMC41LTYuNC0xOS45LTUuOWw3LjEgNy42Yy0xNi41IDAtMjMuMyAxNS40LTIzLjYgMTYgNi44IDAgNC42LTcuNiAzMC0xMi4zLTQuMy02LjMtMy4zLTUtNC45LTYuNnptMTguNy0xOC43YzEuMi03LjYgMy40LTEzIDYuNC0xNy4yIDUuNC02LjQgMTAuNi0xMC4xIDE2LTExLjggNC4yLTEuNyA3LjEgMS4yIDEwLjEgOS4zYTcyLjE0IDcyLjE0IDAgMCAxIDMgMjUuM2MtLjUgOS4zLTMuNCAxNy4yLTguNCAyMy4xLTIuOSAzLjQtNS40IDUuOS02LjQgNy42YTM5LjIxIDM5LjIxIDAgMCAxLTExLjMtLjVsLTcuMS0zLjQtNS40LTYuNGMuOC0xMCAxLjMtMTguOCAzLjEtMjZ6bTQyIDU2LjFjLTM0LjggMTQuNC0zNC43IDE0LTM2LjEgMTQuMy0yMC44IDQuNy0xOS0yNC40LTE4LjktMjQuOGw1LjktMS4yLS41LTIuNWMtMjAuMi0yLjYtMzEgNC4yLTMyLjUgNC45LjUuNSAzIDMuNCA1LjkgOS4zIDQuMi02LjQgOC44LTEwLjEgMTUuMi0xMC42YTgzLjQ3IDgzLjQ3IDAgMCAwIDEuNyAzMy43Yy4xLjUgMi42IDE3LjQgMjcuNSAyNC4xIDExLjMgMyAyNyAxLjIgNDguOS01LjRsLTkuMi41Yy00LjItMTQuOC02LjQtMjQuOC01LjktMjkuNSAxMS4zLTguOCAyMS45LTExLjMgMzAuNy03LjZoMi41bC0xMS44LTcuNi03LjEuNWMtNS45IDEuMi0xMi4zIDQuMi0xOS40IDguNHpcIl1cbn07XG52YXIgZmFTcXVhcmVIYWNrZXJOZXdzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS1oYWNrZXItbmV3cycsXG4gIGljb246IFs0NDgsIDUxMiwgW1wiaGFja2VyLW5ld3Mtc3F1YXJlXCJdLCBcImYzYWZcIiwgXCJNNDQ4IDk2YzAtMzUuMy0yOC43LTY0LTY0LTY0SDY0QzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0SDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NnpNMjEgMjI5LjJjMCAwIC4xLS4xIC4xLS4ycy4xLS4yIC4yLS4yYzAgLjEgMCAuMy0uMSAuNEgyMXpNMjM5LjIgMzg0SDIwNy44VjI4MS4zTDEyOCAxMjhoMzcuM2M0MS41IDc3LjcgNDguMSA5NS44IDU0LjEgMTEyYzEuNiA0LjMgMy4xIDguNSA1LjIgMTMuNmMzLjItNyA1LjEtMTEuOSA3LjEtMTcuM2M1LjktMTUuMyAxMi44LTMzLjIgNTMuNS0xMDguM0gzMjBMMjM5LjIgMjgzLjFWMzg0elwiXVxufTtcbnZhciBmYUhhY2tlck5ld3NTcXVhcmUgPSBmYVNxdWFyZUhhY2tlck5ld3M7XG52YXIgZmFFZGdlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2VkZ2UnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyODJcIiwgXCJNMTIwLjEgMzcuNDRDMTYxLjEgMTIuMjMgMjA3LjctLjc3NTMgMjU1IC4wMDE2QzQyMyAuMDAxNiA1MTIgMTIzLjggNTEyIDIxOS41QzUxMS45IDI1Mi4yIDQ5OSAyODMuNCA0NzYuMSAzMDYuN0M0NTMuMiAzMjkuOSA0MjIuMSAzNDMuMiAzODkuNCAzNDMuN0MzMTQuMiAzNDMuNyAyOTcuOSAzMjAuNiAyOTcuOSAzMTEuN0MyOTcuOSAzMDcuOSAyOTkuMSAzMDUuNSAzMDIuNyAzMDIuM0wzMDMuNyAzMDEuMUwzMDQuMSAyOTkuNUMzMTQuNiAyODggMzIwIDI3My4zIDMyMCAyNTcuOUMzMjAgMTc5LjIgMjM3LjggMTE1LjIgMTM2IDExNS4yQzk4LjQ2IDExNC45IDYxLjQ2IDEyNC4xIDI4LjQ4IDE0Mi4xQzU1LjQ4IDg0LjU4IDExMS4yIDQ0LjUgMTE5LjggMzguMjhDMTIwLjYgMzcuNzMgMTIwLjEgMzcuNDQgMTIwLjEgMzcuNDRWMzcuNDR6TTEzNS43IDM1NS41QzEzNC4zIDM4NS41IDE0MC4zIDQxNS41IDE1Mi4xIDQ0Mi43QzE2NS43IDQ2OS4xIDE4NC44IDQ5My43IDIwOC42IDUxMkMxNDkuMSA1MDAuNSA5Ny4xMSA0NjguMSA1OS4yIDQyMi43QzIxLjEyIDM3Ni4zIDAgMzE4LjQgMCAyNTcuOUMwIDIwNi43IDYyLjQgMTYzLjUgMTM2IDE2My41QzE3Mi42IDE2Mi45IDIwOC40IDE3NC40IDIzNy44IDE5Ni4yTDIzNC4yIDE5Ny40QzE4Mi43IDIxNSAxMzUuNyAyODguMSAxMzUuNyAzNTUuNVYzNTUuNXpNNDY5LjggNDAwTDQ2OS4xIDQwMC4xQzQ1Ny4zIDQxOC45IDQ0My4yIDQzNS4yIDQyNi45IDQ0OS42QzM5Ni4xIDQ3Ny42IDM1OC44IDQ5NS4xIDMxOC4xIDQ5OS41QzI5OS41IDQ5OS44IDI4MS4zIDQ5Ni4zIDI2NC4zIDQ4OC4xQzIzOC43IDQ3Ny44IDIxNy4yIDQ1OC4xIDIwMi43IDQzNS4xQzE4OC4zIDQxMS4yIDE4MS42IDM4My40IDE4My43IDM1NS41QzE4My4xIDMzNS40IDE4OS4xIDMxNS4yIDE5OC43IDI5Ny4zQzIxMi42IDMzMC40IDIzNi4yIDM1OC42IDI2Ni4zIDM3OC4xQzI5Ni40IDM5Ny42IDMzMS44IDQwNy42IDM2Ny43IDQwNi43QzM5OC43IDQwNyA0MjkuOCA0MDAgNDU3LjkgMzg2LjJMNDU5LjggMzg1LjNDNDYzLjcgMzgzIDQ2Ny41IDM4MS40IDQ3MS40IDM4NS4zQzQ3NS45IDM5MC4yIDQ3My4yIDM5NC41IDQ3MC4yIDM5OS4zQzQ3MCAzOTkuNSA0NjkuOSAzOTkuOCA0NjkuOCA0MDBWNDAwelwiXVxufTtcbnZhciBmYVRocmVhZHMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndGhyZWFkcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTYxOFwiLCBcIk0zMzEuNSAyMzUuN2MyLjIgLjkgNC4yIDEuOSA2LjMgMi44YzI5LjIgMTQuMSA1MC42IDM1LjIgNjEuOCA2MS40YzE1LjcgMzYuNSAxNy4yIDk1LjgtMzAuMyAxNDMuMmMtMzYuMiAzNi4yLTgwLjMgNTIuNS0xNDIuNiA1M2gtLjNjLTcwLjItLjUtMTI0LjEtMjQuMS0xNjAuNC03MC4yYy0zMi4zLTQxLTQ4LjktOTguMS00OS41LTE2OS42VjI1NnYtLjJDMTcgMTg0LjMgMzMuNiAxMjcuMiA2NS45IDg2LjJDMTAyLjIgNDAuMSAxNTYuMiAxNi41IDIyNi40IDE2aC4zYzcwLjMgLjUgMTI0LjkgMjQgMTYyLjMgNjkuOWMxOC40IDIyLjcgMzIgNTAgNDAuNiA4MS43bC00MC40IDEwLjhjLTcuMS0yNS44LTE3LjgtNDcuOC0zMi4yLTY1LjRjLTI5LjItMzUuOC03My01NC4yLTEzMC41LTU0LjZjLTU3IC41LTEwMC4xIDE4LjgtMTI4LjIgNTQuNEM3Mi4xIDE0Ni4xIDU4LjUgMTk0LjMgNTggMjU2Yy41IDYxLjcgMTQuMSAxMDkuOSA0MC4zIDE0My4zYzI4IDM1LjYgNzEuMiA1My45IDEyOC4yIDU0LjRjNTEuNC0uNCA4NS40LTEyLjYgMTEzLjctNDAuOWMzMi4zLTMyLjIgMzEuNy03MS44IDIxLjQtOTUuOWMtNi4xLTE0LjItMTcuMS0yNi0zMS45LTM0LjljLTMuNyAyNi45LTExLjggNDguMy0yNC43IDY0LjhjLTE3LjEgMjEuOC00MS40IDMzLjYtNzIuNyAzNS4zYy0yMy42IDEuMy00Ni4zLTQuNC02My45LTE2Yy0yMC44LTEzLjgtMzMtMzQuOC0zNC4zLTU5LjNjLTIuNS00OC4zIDM1LjctODMgOTUuMi04Ni40YzIxLjEtMS4yIDQwLjktLjMgNTkuMiAyLjhjLTIuNC0xNC44LTcuMy0yNi42LTE0LjYtMzUuMmMtMTAtMTEuNy0yNS42LTE3LjctNDYuMi0xNy44SDIyN2MtMTYuNiAwLTM5IDQuNi01My4zIDI2LjNsLTM0LjQtMjMuNmMxOS4yLTI5LjEgNTAuMy00NS4xIDg3LjgtNDUuMWguOGM2Mi42IC40IDk5LjkgMzkuNSAxMDMuNyAxMDcuN2wtLjIgLjJ6bS0xNTYgNjguOGMxLjMgMjUuMSAyOC40IDM2LjggNTQuNiAzNS4zYzI1LjYtMS40IDU0LjYtMTEuNCA1OS41LTczLjJjLTEzLjItMi45LTI3LjgtNC40LTQzLjQtNC40Yy00LjggMC05LjYgLjEtMTQuNCAuNGMtNDIuOSAyLjQtNTcuMiAyMy4yLTU2LjIgNDEuOGwtLjEgLjF6XCJdXG59O1xudmFyIGZhTmFwc3RlciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICduYXBzdGVyJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmM2QyXCIsIFwiTTI5OC4zIDM3My42Yy0xNC4yIDEzLjYtMzEuMyAyNC4xLTUwLjQgMzAuNS0xOS02LjQtMzYuMi0xNi45LTUwLjMtMzAuNWgxMDAuN3ptNDQtMTk5LjZjMjAtMTYuOSA0My42LTI5LjIgNjkuNi0zNi4yVjI5OWMwIDIxOS40LTMyOCAyMTcuNi0zMjggLjNWMTM3LjdjMjUuOSA2LjkgNDkuNiAxOS42IDY5LjUgMzYuNCA1Ni44LTQwIDEzMi41LTM5LjkgMTg4LjktLjF6bS0yMDguOC01OC41YzY0LjQtNjAgMTY0LjMtNjAuMSAyMjguOS0uMi03LjEgMy41LTEzLjkgNy4zLTIwLjYgMTEuNS01OC43LTMwLjUtMTI5LjItMzAuNC0xODcuOS4xLTYuMy00LTEzLjktOC4yLTIwLjQtMTEuNHpNNDMuOCA5My4ydjY5LjNjLTU4LjQgMzYuNS01OC40IDEyMS4xLjEgMTU4LjMgMjYuNCAyNDUuMSAzODEuNyAyNDAuMyA0MDcuNiAxLjVsLjMtMS43YzU4LjctMzYuMyA1OC45LTEyMS43LjItMTU4LjJWOTMuMmMtMTcuMy41LTM0IDMtNTAuMSA3LjQtODItOTEuNS0yMjUuNS05MS41LTMwNy41LjEtMTYuMy00LjQtMzMuMS03LTUwLjYtNy41ek0yNTkuMiAzNTJzMzYtLjMgNjEuMy0xLjVjMTAuMi0uNSAyMS4xLTQgMjUuNS02LjUgMjYuMy0xNS4xIDI1LjQtMzkuMiAyNi4yLTQ3LjQtNzkuNS0uNi05OS45LTMuOS0xMTMgNTUuNHptLTEzNS41LTU1LjNjLjggOC4yLS4xIDMyLjMgMjYuMiA0Ny40IDQuNCAyLjUgMTUuMiA2IDI1LjUgNi41IDI1LjMgMS4xIDYxLjMgMS41IDYxLjMgMS41LTEzLjItNTkuNC0zMy43LTU2LjEtMTEzLTU1LjR6bTE2OS4xIDEyMy40Yy0zLjItNS4zLTYuOS03LjMtNi45LTcuMy0yNC44IDcuMy01Mi4yIDYuOS03NS45IDAgMCAwLTIuOSAxLjUtNi40IDYuNi0yLjggNC4xLTMuNyA5LjYtMy43IDkuNiAyOS4xIDE3LjYgNjcuMSAxNy42IDk2LjIgMC0uMS0uMS0uMy00LTMuMy04Ljl6XCJdXG59O1xudmFyIGZhU3F1YXJlU25hcGNoYXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXNuYXBjaGF0JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXCJzbmFwY2hhdC1zcXVhcmVcIl0sIFwiZjJhZFwiLCBcIk0zODQsMzJINjRBNjQsNjQsMCwwLDAsMCw5NlY0MTZhNjQsNjQsMCwwLDAsNjQsNjRIMzg0YTY0LDY0LDAsMCwwLDY0LTY0Vjk2QTY0LDY0LDAsMCwwLDM4NCwzMlptLTMuOTA3LDMxOS4zMDktLjA4My4xYTMyLjM2NCwzMi4zNjQsMCwwLDEtOC43MTcsNi44MjMsOTAuMjYsOTAuMjYsMCwwLDEtMjAuNTg2LDguMiwxMi42OTQsMTIuNjk0LDAsMCwwLTMuODUyLDEuNzZjLTIuMTU4LDEuOTA5LTIuMSw0LjY0LTQuNCw4LjU1YTIzLjEzNywyMy4xMzcsMCwwLDEtNi44NCw3LjQ3MWMtNi43MDcsNC42MzItMTQuMjQ0LDQuOTIzLTIyLjIzLDUuMjMtNy4yMTQuMjc0LTE1LjM5LjU4MS0yNC43MjksMy42NjktMy43NjEsMS4yNDUtNy43NTMsMy42OTQtMTIuMzc3LDYuNTMzLTExLjI2NSw2LjktMjYuNjgsMTYuMzUzLTUyLjMsMTYuMzUzcy00MC45MjUtOS40LTUyLjEwNi0xNi4yNzljLTQuNjU3LTIuODg4LTguNjc1LTUuMzYyLTEyLjU0My02LjY0LTkuMzM5LTMuMDgtMTcuNTE2LTMuNC0yNC43MjktMy42Ny03Ljk4Ni0uMzA3LTE1LjUyMy0uNi0yMi4yMzEtNS4yMjlhMjMuMDg1LDIzLjA4NSwwLDAsMS02LjAxLTYuMTFjLTMuMi00LjYzMi0yLjg1NS03LjgtNS4yNTQtOS44OTVhMTMuNDI4LDEzLjQyOCwwLDAsMC00LjEtMS44MzQsODkuOTg2LDg5Ljk4NiwwLDAsMS0yMC4zMTMtOC4xMjcsMzIuOTA1LDMyLjkwNSwwLDAsMS04LjMtNi4yODRjLTYuNTgzLTYuNzU3LTguMjc2LTE0Ljc3Ni01LjY4Ni0yMS44MjQsMy40MzYtOS4zMzgsMTEuNTcxLTEyLjExMSwxOS40LTE2LjI2MiwxNC43NzYtOC4wMjcsMjYuMzQ4LTE4LjA1NSwzNC40MzMtMjkuODg0YTY4LjIzNiw2OC4yMzYsMCwwLDAsNS45ODUtMTAuNTY3Yy43ODktMi4xNTguNzcyLTMuMzI5LjI0MS00LjQxNmE3LjM4Niw3LjM4NiwwLDAsMC0yLjIwOC0yLjIxN2MtMi41MzItMS42NzYtNS4xMTMtMy4zNTMtNi44ODItNC41LTMuMjctMi4xNDEtNS44NjgtMy44MTgtNy41MjktNC45OC02LjI2Ny00LjM4My0xMC42NS05LjA0LTEzLjQtMTQuMjQ1YTI4LjQsMjguNCwwLDAsMS0xLjM2OS0yMy41ODRjNC4xMzQtMTAuOTI0LDE0LjQ2OS0xNy43MDYsMjYuOTc4LTE3LjcwNmEzNy4xNDEsMzcuMTQxLDAsMCwxLDcuODQ1LjgzYy42ODkuMTUsMS4zNy4zMDcsMi4wNDIuNDgyLS4xMDgtNy40My4wNTgtMTUuMzU3LjcyMi0yMy4xMTksMi4zNTgtMjcuMjYxLDExLjkxMi00MS41ODksMjEuODc0LTUyLjk5NGE4Ni44MzYsODYuODM2LDAsMCwxLDIyLjI4LTE3LjkzMUMxODguMjU0LDEwMC4zODMsMjA1LjMxMiw5NiwyMjQsOTZzMzUuODI4LDQuMzgzLDUwLjk0NCwxMy4wMTZhODcuMTY5LDg3LjE2OSwwLDAsMSwyMi4yMzksMTcuOWM5Ljk2MSwxMS40MDYsMTkuNTE2LDI1LjcwOSwyMS44NzQsNTIuOTk1YTIzMS4xOTQsMjMxLjE5NCwwLDAsMSwuNzEzLDIzLjExOGMuNjczLS4xNzQsMS4zNjItLjMzMiwyLjA1MS0uNDgxYTM3LjEzMSwzNy4xMzEsMCwwLDEsNy44NDQtLjgzYzEyLjUsMCwyMi44Miw2Ljc4MiwyNi45NzEsMTcuNzA2YTI4LjM3LDI4LjM3LDAsMCwxLTEuNCwyMy41NTljLTIuNzQsNS4yLTcuMTIzLDkuODYxLTEzLjM5LDE0LjI0NC0xLjY2OCwxLjE4Ny00LjI1OCwyLjg2NC03LjUyOSw0Ljk4MS0xLjgzNSwxLjE4Ny00LjU0MSwyLjk0Ny03LjE2NCw0LjY4MmE2Ljg1Niw2Ljg1NiwwLDAsMC0xLjk1MSwyLjAzNGMtLjUwNiwxLjA0Ni0uNTM5LDIuMTkxLjE2Niw0LjIwOGE2OS4wMTUsNjkuMDE1LDAsMCwwLDYuMDg1LDEwLjc5MmM4LjI2OCwxMi4xLDIwLjE4OCwyMi4zMTMsMzUuNDU0LDMwLjQwNywxLjQ4Ni43NzIsMi45OCwxLjUsNC40NDEsMi4yNTguNzIyLjMzMiwxLjU2OS43NjMsMi40OTEsMS4zLDQuOSwyLjcyMyw5LjIsNi4wMSwxMS40NTUsMTIuMTUzQzM4Ny44MjEsMzM2LjkxNSwzODYuMjY5LDM0NC43LDM4MC4wOTMsMzUxLjMwOVptLTE2LjcxOS0xOC40NjFjLTUwLjMxMy0yNC4zMTQtNTguMzMyLTYxLjkxOC01OC42ODktNjQuNzQ5LS40MzEtMy4zNzktLjkyMS02LjAzNSwyLjgwNi05LjQ3MiwzLjU5NC0zLjMyOCwxOS41NDEtMTMuMTksMjMuOTY1LTE2LjI3OCw3LjMzLTUuMTE0LDEwLjUzNC0xMC4yMTksOC4xNi0xNi40OTUtMS42Ni00LjMxNi01LjY4Ni01Ljk3Ni05Ljk2MS01Ljk3NmExOC41LDE4LjUsMCwwLDAtMy45OTMuNDQ4Yy04LjAzNSwxLjc0My0xNS44MzgsNS43NjktMjAuMzU0LDYuODU3YTcuMSw3LjEsMCwwLDEtMS42Ni4yMjRjLTIuNDA4LDAtMy4yNzktMS4wNzEtMy4wODgtMy45NjguNTY0LTguNzgzLDEuNzU5LTI1LjkyNS4zNzMtNDEuOTM3LTEuODg0LTIyLjAzMi04Ljk5LTMyLjk0OC0xNy40MzItNDIuNi00LjA1MS00LjYyNC0yMy4xMzUtMjQuNjU0LTU5LjUzNi0yNC42NTRTMTY4LjUzLDEzNC4zNTksMTY0LjQ3OSwxMzljLTguNDM0LDkuNjU0LTE1LjUzMSwyMC41Ny0xNy40MzIsNDIuNi0xLjM4NiwxNi4wMTMtLjE0MSwzMy4xNDcuMzczLDQxLjkzNy4xNjYsMi43NTYtLjY4LDMuOTY4LTMuMDg4LDMuOTY4YTcuMSw3LjEsMCwwLDEtMS42Ni0uMjI0Yy00LjUwNy0xLjA4Ny0xMi4zMS01LjExMy0yMC4zNDYtNi44NTZhMTguNDk0LDE4LjQ5NCwwLDAsMC0zLjk5My0uNDQ5Yy00LjI1LDAtOC4zLDEuNjM2LTkuOTYxLDUuOTc3LTIuMzc0LDYuMjc2Ljg0NywxMS4zODEsOC4xNjgsMTYuNDk0LDQuNDI1LDMuMDg4LDIwLjM3MSwxMi45NTgsMjMuOTY2LDE2LjI3OSwzLjcxOSwzLjQzNywzLjIzNyw2LjA5MywyLjgwNSw5LjQ3MS0uMzU2LDIuNzktOC4zODQsNDAuMzk0LTU4LjY4OSw2NC43NDktMi45NDYsMS40MjgtNy45Niw0LjQ1Ljg4LDkuMzMxLDEzLjg4LDcuNjI4LDIzLjExMSw2LjgwNywzMC4zLDExLjQzLDYuMDkzLDMuOTI3LDIuNSwxMi4zOTQsNi45MjMsMTUuNDQ5LDUuNDU0LDMuNzYsMjEuNTgzLS4yNjYsNDIuMzM1LDYuNiwxNy40MzMsNS43NDQsMjguMTE2LDIyLjAxNSw1OC45NjMsMjIuMDE1czQxLjc4OC0xNi4zLDU4LjkzOC0yMS45NzNjMjAuNzk1LTYuODY1LDM2Ljg5LTIuODM5LDQyLjMzNi02LjYsNC40MzMtMy4wNTUuODIyLTExLjUyMiw2LjkyMy0xNS40NDgsNy4xODEtNC42MjQsMTYuNDExLTMuOCwzMC4zLTExLjQ3MkMzNzEuMzYsMzM3LjM1NSwzNjYuMzQ2LDMzNC4zMzMsMzYzLjM3NCwzMzIuODQ4WlwiXVxufTtcbnZhciBmYVNuYXBjaGF0U3F1YXJlID0gZmFTcXVhcmVTbmFwY2hhdDtcbnZhciBmYUdvb2dsZVBsdXNHID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dvb2dsZS1wbHVzLWcnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYwZDVcIiwgXCJNMzg2LjA2MSAyMjguNDk2YzEuODM0IDkuNjkyIDMuMTQzIDE5LjM4NCAzLjE0MyAzMS45NTZDMzg5LjIwNCAzNzAuMjA1IDMxNS41OTkgNDQ4IDIwNC44IDQ0OGMtMTA2LjA4NCAwLTE5Mi04NS45MTUtMTkyLTE5MnM4NS45MTYtMTkyIDE5Mi0xOTJjNTEuODY0IDAgOTUuMDgzIDE4Ljg1OSAxMjguNjExIDUwLjI5MmwtNTIuMTI2IDUwLjAzYy0xNC4xNDUtMTMuNjIxLTM5LjAyOC0yOS41OTktNzYuNDg1LTI5LjU5OS02NS40ODQgMC0xMTguOTIgNTQuMjIxLTExOC45MiAxMjEuMjc3IDAgNjcuMDU2IDUzLjQzNiAxMjEuMjc3IDExOC45MiAxMjEuMjc3IDc1Ljk2MSAwIDEwNC41MTMtNTQuNzQ1IDEwOC45NjUtODIuNzczSDIwNC44di02Ni4wMDloMTgxLjI2MXptMTg1LjQwNiA2LjQzN1YxNzkuMmgtNTYuMDAxdjU1LjczM2gtNTUuNzMzdjU2LjAwMWg1NS43MzN2NTUuNzMzaDU2LjAwMXYtNTUuNzMzSDYyNy4ydi01Ni4wMDFoLTU1LjczM3pcIl1cbn07XG52YXIgZmFBcnRzdGF0aW9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FydHN0YXRpb24nLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY3N2FcIiwgXCJNMiAzNzcuNGw0MyA3NC4zQTUxLjM1IDUxLjM1IDAgMCAwIDkwLjkgNDgwaDI4NS40bC01OS4yLTEwMi42ek01MDEuOCAzNTBMMzM1LjYgNTkuM0E1MS4zOCA1MS4zOCAwIDAgMCAyOTAuMiAzMmgtODguNGwyNTcuMyA0NDcuNiA0MC43LTcwLjVjMS45LTMuMiAyMS0yOS43IDItNTkuMXpNMjc1IDMwNC41bC0xMTUuNS0yMDBMNDQgMzA0LjV6XCJdXG59O1xudmFyIGZhTWFya2Rvd24gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWFya2Rvd24nLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY2MGZcIiwgXCJNNTkzLjggNTkuMUg0Ni4yQzIwLjcgNTkuMSAwIDc5LjggMCAxMDUuMnYzMDEuNWMwIDI1LjUgMjAuNyA0Ni4yIDQ2LjIgNDYuMmg1NDcuN2MyNS41IDAgNDYuMi0yMC43IDQ2LjEtNDYuMVYxMDUuMmMwLTI1LjQtMjAuNy00Ni4xLTQ2LjItNDYuMXpNMzM4LjUgMzYwLjZIMjc3di0xMjBsLTYxLjUgNzYuOS02MS41LTc2Ljl2MTIwSDkyLjNWMTUxLjRoNjEuNWw2MS41IDc2LjkgNjEuNS03Ni45aDYxLjV2MjA5LjJ6bTEzNS4zIDMuMUwzODEuNSAyNTZINDQzVjE1MS40aDYxLjVWMjU2SDU2NnpcIl1cbn07XG52YXIgZmFTb3VyY2V0cmVlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NvdXJjZXRyZWUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY3ZDNcIiwgXCJNNDI3LjIgMjAzYzAtMTEyLjEtOTAuOS0yMDMtMjAzLTIwM0MxMTIuMS0uMiAyMS4yIDkwLjYgMjEgMjAyLjZBMjAyLjg2IDIwMi44NiAwIDAgMCAxNjEuNSAzOTZ2MTAxLjdhMTQuMyAxNC4zIDAgMCAwIDE0LjMgMTQuM2g5Ni40YTE0LjMgMTQuMyAwIDAgMCAxNC4zLTE0LjNWMzk2LjFBMjAzLjE4IDIwMy4xOCAwIDAgMCA0MjcuMiAyMDN6bS0yNzEuNiAwYzAtOTAuOCAxMzcuMy05MC44IDEzNy4zIDAtLjEgODkuOS0xMzcuMyA5MS0xMzcuMyAwelwiXVxufTtcbnZhciBmYUdvb2dsZVBsdXMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ29vZ2xlLXBsdXMnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyYjNcIiwgXCJNMjU2LDhDMTE5LjEsOCw4LDExOS4xLDgsMjU2UzExOS4xLDUwNCwyNTYsNTA0LDUwNCwzOTIuOSw1MDQsMjU2LDM5Mi45LDgsMjU2LDhaTTE4NS4zLDM4MGExMjQsMTI0LDAsMCwxLDAtMjQ4YzMxLjMsMCw2MC4xLDExLDgzLDMyLjNsLTMzLjYsMzIuNmMtMTMuMi0xMi45LTMxLjMtMTkuMS00OS40LTE5LjEtNDIuOSwwLTc3LjIsMzUuNS03Ny4yLDc4LjFTMTQyLjMsMzM0LDE4NS4zLDMzNGMzMi42LDAsNjQuOS0xOS4xLDcwLjEtNTMuM0gxODUuM1YyMzguMUgzMDIuMmExMDkuMiwxMDkuMiwwLDAsMSwxLjksMjAuN2MwLDcwLjgtNDcuNSwxMjEuMi0xMTguOCwxMjEuMlpNNDE1LjUsMjczLjh2MzUuNUgzODBWMjczLjhIMzQ0LjVWMjM4LjNIMzgwVjIwMi44aDM1LjV2MzUuNWgzNS4ydjM1LjVaXCJdXG59O1xudmFyIGZhRGlhc3BvcmEgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGlhc3BvcmEnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY3OTFcIiwgXCJNMjUxLjY0IDM1NC41NWMtMS40IDAtODggMTE5LjktODguNyAxMTkuOVM3Ni4zNCA0MTQgNzYgNDEzLjI1czg2LjYtMTI1LjcgODYuNi0xMjcuNGMwLTIuMi0xMjkuNi00NC0xMzcuNi00Ny4xLTEuMy0uNSAzMS40LTEwMS44IDMxLjctMTAyLjEuNi0uNyAxNDQuNCA0NyAxNDUuNSA0NyAuNCAwIC45LS42IDEtMS4zLjQtMiAxLTE0OC42IDEuNy0xNDkuNi44LTEuMiAxMDQuNS0uNyAxMDUuMS0uMyAxLjUgMSAzLjUgMTU2LjEgNi4xIDE1Ni4xIDEuNCAwIDEzOC43LTQ3IDEzOS4zLTQ2LjMuOC45IDMxLjkgMTAyLjIgMzEuNSAxMDIuNi0uOS45LTE0MC4yIDQ3LjEtMTQwLjYgNDguOC0uMyAxLjQgODIuOCAxMjIuMSA4Mi41IDEyMi45cy04NS41IDYzLjUtODYuMyA2My41Yy0xLS4yLTg5LTEyNS41LTkwLjktMTI1LjV6XCJdXG59O1xudmFyIGZhRm91cnNxdWFyZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmb3Vyc3F1YXJlJyxcbiAgaWNvbjogWzM2OCwgNTEyLCBbXSwgXCJmMTgwXCIsIFwiTTMyMy4xIDNINDkuOUMxMi40IDMgMCAzMS4zIDAgNDkuMXY0MzMuOGMwIDIwLjMgMTIuMSAyNy43IDE4LjIgMzAuMSA2LjIgMi41IDIyLjggNC42IDMyLjktNy4xQzE4MCAzNTYuNSAxODIuMiAzNTQgMTgyLjIgMzU0YzMuMS0zLjQgMy40LTMuMSA2LjgtMy4xaDgzLjRjMzUuMSAwIDQwLjYtMjUuMiA0NC4zLTM5LjdsNDguNi0yNDNDMzczLjggMjUuOCAzNjMuMSAzIDMyMy4xIDN6bS0xNi4zIDczLjhsLTExLjQgNTkuN2MtMS4yIDYuNS05LjUgMTMuMi0xNi45IDEzLjJIMTcyLjFjLTEyIDAtMjAuNiA4LjMtMjAuNiAyMC4zdjEzYzAgMTIgOC42IDIwLjYgMjAuNiAyMC42aDkwLjRjOC4zIDAgMTYuNiA5LjIgMTQuOCAxOC4yLTEuOCA4LjktMTAuNSA1My44LTExLjQgNTguOC0uOSA0LjktNi44IDEzLjUtMTYuOSAxMy41aC03My41Yy0xMy41IDAtMTcuMiAxLjgtMjYuNSAxMi42IDAgMC04LjkgMTEuNC04OS41IDEwOC4zLS45LjktMS44LjYtMS44LS4zVjc1LjljMC03LjcgNi44LTE2LjYgMTYuNi0xNi42aDIxOWM4LjIgMCAxNS42IDcuNyAxMy41IDE3LjV6XCJdXG59O1xudmFyIGZhU3RhY2tPdmVyZmxvdyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzdGFjay1vdmVyZmxvdycsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjE2Y1wiLCBcIk0yOTAuNyAzMTFMOTUgMjY5LjcgODYuOCAzMDlsMTk1LjcgNDF6bTUxLTg3TDE4OC4yIDk1LjdsLTI1LjUgMzAuOCAxNTMuNSAxMjguM3ptLTMxLjIgMzkuN0wxMjkuMiAxNzlsLTE2LjcgMzYuNUwyOTMuNyAzMDB6TTI2MiAzMmwtMzIgMjQgMTE5LjMgMTYwLjMgMzItMjR6bTIwLjUgMzI4aC0yMDB2MzkuN2gyMDB6bTM5LjcgODBINDIuN1YzMjBoLTQwdjE2MGgzNTkuNVYzMjBoLTQwelwiXVxufTtcbnZhciBmYUdpdGh1YkFsdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnaXRodWItYWx0JyxcbiAgaWNvbjogWzQ4MCwgNTEyLCBbXSwgXCJmMTEzXCIsIFwiTTE4Ni4xIDMyOC43YzAgMjAuOS0xMC45IDU1LjEtMzYuNyA1NS4xcy0zNi43LTM0LjItMzYuNy01NS4xIDEwLjktNTUuMSAzNi43LTU1LjEgMzYuNyAzNC4yIDM2LjcgNTUuMXpNNDgwIDI3OC4yYzAgMzEuOS0zLjIgNjUuNy0xNy41IDk1LTM3LjkgNzYuNi0xNDIuMSA3NC44LTIxNi43IDc0LjgtNzUuOCAwLTE4Ni4yIDIuNy0yMjUuNi03NC44LTE0LjYtMjktMjAuMi02My4xLTIwLjItOTUgMC00MS45IDEzLjktODEuNSA0MS41LTExMy42LTUuMi0xNS44LTcuNy0zMi40LTcuNy00OC44IDAtMjEuNSA0LjktMzIuMyAxNC42LTUxLjggNDUuMyAwIDc0LjMgOSAxMDguOCAzNiAyOS02LjkgNTguOC0xMCA4OC43LTEwIDI3IDAgNTQuMiAyLjkgODAuNCA5LjIgMzQtMjYuNyA2My0zNS4yIDEwNy44LTM1LjIgOS44IDE5LjUgMTQuNiAzMC4zIDE0LjYgNTEuOCAwIDE2LjQtMi42IDMyLjctNy43IDQ4LjIgMjcuNSAzMi40IDM5IDcyLjMgMzkgMTE0LjJ6bS02NC4zIDUwLjVjMC00My45LTI2LjctODIuNi03My41LTgyLjYtMTguOSAwLTM3IDMuNC01NiA2LTE0LjkgMi4zLTI5LjggMy4yLTQ1LjEgMy4yLTE1LjIgMC0zMC4xLS45LTQ1LjEtMy4yLTE4LjctMi42LTM3LTYtNTYtNi00Ni44IDAtNzMuNSAzOC43LTczLjUgODIuNiAwIDg3LjggODAuNCAxMDEuMyAxNTAuNCAxMDEuM2g0OC4yYzcwLjMgMCAxNTAuNi0xMy40IDE1MC42LTEwMS4zem0tODIuNi01NS4xYy0yNS44IDAtMzYuNyAzNC4yLTM2LjcgNTUuMXMxMC45IDU1LjEgMzYuNyA1NS4xIDM2LjctMzQuMiAzNi43LTU1LjEtMTAuOS01NS4xLTM2LjctNTUuMXpcIl1cbn07XG52YXIgZmFQaG9lbml4U3F1YWRyb24gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncGhvZW5peC1zcXVhZHJvbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjUxMVwiLCBcIk05NiA2My4zOEMxNDIuNDkgMjcuMjUgMjAxLjU1IDcuMzEgMjYwLjUxIDguODFjMjkuNTgtLjM4IDU5LjExIDUuMzcgODYuOTEgMTUuMzMtMjQuMTMtNC42My00OS02LjM0LTczLjM4LTIuNDVDMjMxLjE3IDI3IDE5MSA0OC44NCAxNjIuMjEgODAuODdjNS42Ny0xIDEwLjc4LTMuNjcgMTYtNS44NiAxOC4xNC03Ljg3IDM3LjQ5LTEzLjI2IDU3LjIzLTE0LjgzIDE5Ljc0LTIuMTMgMzkuNjQtLjQzIDU5LjI4IDEuOTItMTQuNDIgMi43OS0yOS4xMiA0LjU3LTQzIDkuNTktMzQuNDMgMTEuMDctNjUuMjcgMzMuMTYtODYuMyA2Mi42My0xMy44IDE5LjcxLTIzLjYzIDQyLjg2LTI0LjY3IDY3LjEzLS4zNSAxNi40OSA1LjIyIDM0LjgxIDE5LjgzIDQ0YTUzLjI3IDUzLjI3IDAgMCAwIDM3LjUyIDYuNzRjMTUuNDUtMi40NiAzMC4wNy04LjY0IDQzLjYtMTYuMzMgMTEuNTItNi44MiAyMi42Ny0xNC41NSAzMi0yNC4yNSAzLjc5LTMuMjIgMi41My04LjQ1IDIuNjItMTIuNzktMi4xMi0uMzQtNC4zOC0xLjExLTYuMy4zYTIwMyAyMDMgMCAwIDEtMzUuODIgMTUuMzdjLTIwIDYuMTctNDIuMTYgOC40Ni02Mi4xLjc4IDEyLjc5IDEuNzMgMjYuMDYuMzEgMzcuNzQtNS40NCAyMC4yMy05LjcyIDM2LjgxLTI1LjIgNTQuNDQtMzguNzdhNTI2LjU3IDUyNi41NyAwIDAgMSA4OC45LTU1LjMxYzI1LjcxLTEyIDUyLjk0LTIyLjc4IDgxLjU3LTI0LjEyLTE1LjYzIDEzLjcyLTMyLjE1IDI2LjUyLTQ2Ljc4IDQxLjM4LTE0LjUxIDE0LTI3LjQ2IDI5LjUtNDAuMTEgNDUuMTgtMy41MiA0LjYtOC45NSA2Ljk0LTEzLjU4IDEwLjE2YTE1MC43IDE1MC43IDAgMCAwLTUxLjg5IDYwLjFjLTkuMzMgMTkuNjgtMTQuNSA0MS44NS0xMS43NyA2My42NSAxLjk0IDEzLjY5IDguNzEgMjcuNTkgMjAuOSAzNC45MSAxMi45IDggMjkuMDUgOC4wNyA0My40OCA1LjEgMzIuOC03LjQ1IDYxLjQzLTI4Ljg5IDgxLTU1Ljg0IDIwLjQ0LTI3LjUyIDMwLjUyLTYyLjIgMjkuMTYtOTYuMzUtLjUyLTcuNS0xLjU3LTE1LTEuNjYtMjIuNDkgOCAxOS40OCAxNC44MiAzOS43MSAxNi42NSA2MC44MyAyIDE0LjI4Ljc1IDI4Ljc2LTEuNjIgNDIuOS0xLjkxIDExLTUuNjcgMjEuNTEtNy43OCAzMi40M2ExNjUgMTY1IDAgMCAwIDM5LjM0LTgxLjA3IDE4My42NCAxODMuNjQgMCAwIDAtMTQuMjEtMTA0LjY0YzIwLjc4IDMyIDMyLjM0IDY5LjU4IDM1LjcxIDEwNy40OC40OSAxMi43My40OSAyNS41MSAwIDM4LjIzQTI0My4yMSAyNDMuMjEgMCAwIDEgNDgyIDM3MS4zNGMtMjYuMTIgNDcuMzQtNjggODUuNjMtMTE3LjE5IDEwOC03OC4yOSAzNi4yMy0xNzQuNjggMzEuMzItMjQ4LTE0LjY4QTI0OC4zNCAyNDguMzQgMCAwIDEgMjUuMzYgMzY2IDIzOC4zNCAyMzguMzQgMCAwIDEgMCAyNzMuMDh2LTMxLjM0QzMuOTMgMTcyIDQwLjg3IDEwNS44MiA5NiA2My4zOG0yMjIgODAuMzNhNzkuMTMgNzkuMTMgMCAwIDAgMTYtNC40OGM1LTEuNzcgOS4yNC01Ljk0IDEwLjMyLTExLjIyLTguOTYgNC45OS0xNy45OCA5LjkyLTI2LjMyIDE1Ljd6XCJdXG59O1xudmFyIGZhUGFnZWxpbmVzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BhZ2VsaW5lcycsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjE4Y1wiLCBcIk0zODQgMzEyLjdjLTU1LjEgMTM2LjctMTg3LjEgNTQtMTg3LjEgNTQtNDAuNSA4MS44LTEwNy40IDEzNC40LTE4NC42IDEzNC43LTE2LjEgMC0xNi42LTI0LjQgMC0yNC40IDY0LjQtLjMgMTIwLjUtNDIuNyAxNTcuMi0xMTAuMS00MS4xIDE1LjktMTE4LjYgMjcuOS0xNjEuNi04Mi4yIDEwOS00NC45IDE1OS4xIDExLjIgMTc4LjMgNDUuNSA5LjktMjQuNCAxNy01MC45IDIxLjYtNzkuNyAwIDAtMTM5LjcgMjEuOS0xNDkuNS05OC4xIDExOS4xLTQ3LjkgMTUyLjYgNzYuNyAxNTIuNiA3Ni43IDEuNi0xNi43IDMuMy01Mi42IDMuMy01My40IDAgMC0xMDYuMy03My43LTM4LjEtMTY1LjIgMTI0LjYgNDMgNjEuNCAxNjIuNCA2MS40IDE2Mi40LjUgMS42LjUgMjMuOCAwIDMzLjQgMCAwIDQ1LjItODkgMTM2LjQtNTcuNS00LjIgMTM0LTE0MS45IDEwNi40LTE0MS45IDEwNi40LTQuNCAyNy40LTExLjIgNTMuNC0yMCA3Ny41IDAgMCA4My05MS44IDE3Mi0yMHpcIl1cbn07XG52YXIgZmFBbGdvbGlhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FsZ29saWEnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzNmNcIiwgXCJNMjU2IDBDMTE2LjEgMCAyIDExMi43IDAgMjUyLjFDLTIgMzkzLjYgMTEyLjkgNTEwLjggMjU0LjUgNTExLjZjNDMuNyAuMyA4NS45LTEwLjQgMTIzLjMtMzAuN2MzLjYtMiA0LjItNyAxLjEtOS43bC0yNC0yMS4yYy00LjktNC4zLTExLjgtNS41LTE3LjgtM2MtMjYuMSAxMS4xLTU0LjUgMTYuOC04My43IDE2LjRDMTM5IDQ2MS45IDQ2LjUgMzY2LjggNDguMyAyNTIuNEM1MC4xIDEzOS41IDE0Mi42IDQ4LjIgMjU2IDQ4LjJINDYzLjdWNDE3LjJMMzQ1LjkgMzEyLjVjLTMuOC0zLjQtOS43LTIuNy0xMi43IDEuM2MtMTguOSAyNS00OS43IDQwLjYtODMuOSAzOC4yYy00Ny41LTMuMy04NS45LTQxLjUtODkuNS04OC45Yy00LjItNTYuNiA0MC42LTEwMy45IDk2LjMtMTAzLjljNTAuNCAwIDkxLjkgMzguOCA5Ni4yIDg4Yy40IDQuNCAyLjQgOC41IDUuNyAxMS40bDMwLjcgMjcuMmMzLjUgMy4xIDkgMS4yIDkuOS0zLjRjMi4yLTExLjggMy0yNC4yIDIuMS0zNi44Yy00LjktNzItNjMuMy0xMzAtMTM1LjQtMTM0LjRjLTgyLjctNS4xLTE1MS44IDU5LjUtMTU0IDE0MC42Yy0yLjEgNzguOSA2Mi42IDE0NyAxNDEuNiAxNDguN2MzMyAuNyA2My42LTkuNiA4OC4zLTI3LjZMNDk1IDUwOS40YzYuNiA1LjggMTcgMS4yIDE3LTcuN1Y5LjdjMC01LjQtNC40LTkuNy05LjctOS43SDI1NnpcIl1cbn07XG52YXIgZmFSZWRSaXZlciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyZWQtcml2ZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYzZTNcIiwgXCJNMzUzLjIgMzJIOTQuOEM0Mi40IDMyIDAgNzQuNCAwIDEyNi44djI1OC40QzAgNDM3LjYgNDIuNCA0ODAgOTQuOCA0ODBoMjU4LjRjNTIuNCAwIDk0LjgtNDIuNCA5NC44LTk0LjhWMTI2LjhjMC01Mi40LTQyLjQtOTQuOC05NC44LTk0Ljh6TTE0NC45IDIwMC45djU2LjNjMCAyNy0yMS45IDQ4LjktNDguOSA0OC45VjE1MS45YzAtMTMuMiAxMC43LTIzLjkgMjMuOS0yMy45aDE1NC4yYzAgMjctMjEuOSA0OC45LTQ4LjkgNDguOWgtNTYuM2MtMTIuMy0uNi0yNC42IDExLjYtMjQgMjR6bTE3Ni4zIDcyaC01Ni4zYy0xMi4zLS42LTI0LjYgMTEuNi0yNCAyNHY1Ni4zYzAgMjctMjEuOSA0OC45LTQ4LjkgNDguOVYyNDcuOWMwLTEzLjIgMTAuNy0yMy45IDIzLjktMjMuOWgxNTQuMmMwIDI3LTIxLjkgNDguOS00OC45IDQ4Ljl6XCJdXG59O1xudmFyIGZhQ3JlYXRpdmVDb21tb25zU2EgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3JlYXRpdmUtY29tbW9ucy1zYScsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjRlZlwiLCBcIk0yNDcuNiA4QzM4OS40IDggNDk2IDExOC4xIDQ5NiAyNTZjMCAxNDcuMS0xMTguNSAyNDgtMjQ4LjQgMjQ4QzExMy42IDUwNCAwIDM5NC41IDAgMjU2IDAgMTIzLjEgMTA0LjcgOCAyNDcuNiA4em0uOCA0NC43QzEzMC4yIDUyLjcgNDQuNyAxNTAuNiA0NC43IDI1NmMwIDEwOS44IDkxLjIgMjAyLjggMjAzLjcgMjAyLjggMTAzLjIgMCAyMDIuOC04MS4xIDIwMi44LTIwMi44LjEtMTEzLjgtOTAuMi0yMDMuMy0yMDIuOC0yMDMuM3pNMTM3LjcgMjIxYzEzLTgzLjkgODAuNS05NS43IDEwOC45LTk1LjcgOTkuOCAwIDEyNy41IDgyLjUgMTI3LjUgMTM0LjIgMCA2My42LTQxIDEzMi45LTEyOC45IDEzMi45LTM4LjkgMC05OS4xLTIwLTEwOS40LTk3aDYyLjVjMS41IDMwLjEgMTkuNiA0NS4yIDU0LjUgNDUuMiAyMy4zIDAgNTgtMTguMiA1OC04Mi44IDAtODIuNS00OS4xLTgwLjYtNTYuNy04MC42LTMzLjEgMC01MS43IDE0LjYtNTUuOCA0My44aDE4LjJsLTQ5LjIgNDkuMi00OS00OS4yaDE5LjR6XCJdXG59O1xudmFyIGZhU2FmYXJpID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NhZmFyaScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjI2N1wiLCBcIk0yNzQuNjksMjc0LjY5bC0zNy4zOC0zNy4zOEwxNjYsMzQ2Wk0yNTYsOEMxMTksOCw4LDExOSw4LDI1NlMxMTksNTA0LDI1Niw1MDQsNTA0LDM5Myw1MDQsMjU2LDM5Myw4LDI1Niw4Wk00MTEuODUsMTgyLjc5bDE0Ljc4LTYuMTNBOCw4LDAsMCwxLDQzNy4wOCwxODFoMGE4LDgsMCwwLDEtNC4zMywxMC40Nkw0MTgsMTk3LjU3YTgsOCwwLDAsMS0xMC40NS00LjMzaDBBOCw4LDAsMCwxLDQxMS44NSwxODIuNzlaTTMxNC40Myw5NGw2LjEyLTE0Ljc4QTgsOCwwLDAsMSwzMzEsNzQuOTJoMGE4LDgsMCwwLDEsNC4zMywxMC40NWwtNi4xMywxNC43OGE4LDgsMCwwLDEtMTAuNDUsNC4zM2gwQTgsOCwwLDAsMSwzMTQuNDMsOTRaTTI1Niw2MGgwYTgsOCwwLDAsMSw4LDhWODRhOCw4LDAsMCwxLTgsOGgwYTgsOCwwLDAsMS04LThWNjhBOCw4LDAsMCwxLDI1Niw2MFpNMTgxLDc0LjkyYTgsOCwwLDAsMSwxMC40Niw0LjMzTDE5Ny41Nyw5NGE4LDgsMCwxLDEtMTQuNzgsNi4xMmwtNi4xMy0xNC43OEE4LDgsMCwwLDEsMTgxLDc0LjkyWm0tNjMuNTgsNDIuNDloMGE4LDgsMCwwLDEsMTEuMzEsMEwxNDAsMTI4LjcyQTgsOCwwLDAsMSwxNDAsMTQwaDBhOCw4LDAsMCwxLTExLjMxLDBsLTExLjMxLTExLjMxQTgsOCwwLDAsMSwxMTcuNDEsMTE3LjQxWk02MCwyNTZoMGE4LDgsMCwwLDEsOC04SDg0YTgsOCwwLDAsMSw4LDhoMGE4LDgsMCwwLDEtOCw4SDY4QTgsOCwwLDAsMSw2MCwyNTZabTQwLjE1LDczLjIxLTE0Ljc4LDYuMTNBOCw4LDAsMCwxLDc0LjkyLDMzMWgwYTgsOCwwLDAsMSw0LjMzLTEwLjQ2TDk0LDMxNC40M2E4LDgsMCwwLDEsMTAuNDUsNC4zM2gwQTgsOCwwLDAsMSwxMDAuMTUsMzI5LjIxWm00LjMzLTEzNmgwQTgsOCwwLDAsMSw5NCwxOTcuNTdsLTE0Ljc4LTYuMTJBOCw4LDAsMCwxLDc0LjkyLDE4MWgwYTgsOCwwLDAsMSwxMC40NS00LjMzbDE0Ljc4LDYuMTNBOCw4LDAsMCwxLDEwNC40OCwxOTMuMjRaTTE5Ny41Nyw0MThsLTYuMTIsMTQuNzhhOCw4LDAsMCwxLTE0Ljc5LTYuMTJsNi4xMy0xNC43OEE4LDgsMCwxLDEsMTk3LjU3LDQxOFpNMjY0LDQ0NGE4LDgsMCwwLDEtOCw4aDBhOCw4LDAsMCwxLTgtOFY0MjhhOCw4LDAsMCwxLDgtOGgwYTgsOCwwLDAsMSw4LDhabTY3LTYuOTJoMGE4LDgsMCwwLDEtMTAuNDYtNC4zM0wzMTQuNDMsNDE4YTgsOCwwLDAsMSw0LjMzLTEwLjQ1aDBhOCw4LDAsMCwxLDEwLjQ1LDQuMzNsNi4xMywxNC43OEE4LDgsMCwwLDEsMzMxLDQzNy4wOFptNjMuNTgtNDIuNDloMGE4LDgsMCwwLDEtMTEuMzEsMEwzNzIsMzgzLjI4QTgsOCwwLDAsMSwzNzIsMzcyaDBhOCw4LDAsMCwxLDExLjMxLDBsMTEuMzEsMTEuMzFBOCw4LDAsMCwxLDM5NC41OSwzOTQuNTlaTTI4Ni4yNSwyODYuMjUsMTEwLjM0LDQwMS42NiwyMjUuNzUsMjI1Ljc1LDQwMS42NiwxMTAuMzRaTTQzNy4wOCwzMzFoMGE4LDgsMCwwLDEtMTAuNDUsNC4zM2wtMTQuNzgtNi4xM2E4LDgsMCwwLDEtNC4zMy0xMC40NWgwQTgsOCwwLDAsMSw0MTgsMzE0LjQzbDE0Ljc4LDYuMTJBOCw4LDAsMCwxLDQzNy4wOCwzMzFaTTQ0NCwyNjRINDI4YTgsOCwwLDAsMS04LThoMGE4LDgsMCwwLDEsOC04aDE2YTgsOCwwLDAsMSw4LDhoMEE4LDgsMCwwLDEsNDQ0LDI2NFpcIl1cbn07XG52YXIgZmFHb29nbGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ29vZ2xlJyxcbiAgaWNvbjogWzQ4OCwgNTEyLCBbXSwgXCJmMWEwXCIsIFwiTTQ4OCAyNjEuOEM0ODggNDAzLjMgMzkxLjEgNTA0IDI0OCA1MDQgMTEwLjggNTA0IDAgMzkzLjIgMCAyNTZTMTEwLjggOCAyNDggOGM2Ni44IDAgMTIzIDI0LjUgMTY2LjMgNjQuOWwtNjcuNSA2NC45QzI1OC41IDUyLjYgOTQuMyAxMTYuNiA5NC4zIDI1NmMwIDg2LjUgNjkuMSAxNTYuNiAxNTMuNyAxNTYuNiA5OC4yIDAgMTM1LTcwLjQgMTQwLjgtMTA2LjlIMjQ4di04NS4zaDIzNi4xYzIuMyAxMi43IDMuOSAyNC45IDMuOSA0MS40elwiXVxufTtcbnZhciBmYVNxdWFyZUZvbnRBd2Vzb21lU3Ryb2tlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS1mb250LWF3ZXNvbWUtc3Ryb2tlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXCJmb250LWF3ZXNvbWUtYWx0XCJdLCBcImYzNWNcIiwgXCJNNjQgNjRDNDYuMyA2NCAzMiA3OC4zIDMyIDk2bDAgMzIwYzAgMTcuNyAxNC4zIDMyIDMyIDMybDMyMCAwYzE3LjcgMCAzMi0xNC4zIDMyLTMybDAtMzIwYzAtMTcuNy0xNC4zLTMyLTMyLTMyTDY0IDY0ek0wIDk2QzAgNjAuNyAyOC43IDMyIDY0IDMybDMyMCAwYzM1LjMgMCA2NCAyOC43IDY0IDY0bDAgMzIwYzAgMzUuMy0yOC43IDY0LTY0IDY0TDY0IDQ4MGMtMzUuMyAwLTY0LTI4LjctNjQtNjRMMCA5NnptMTU0IDU4YzAgOS4zLTQuOCAxNy40LTEyLjEgMjJsMTg4LjkgMGM3LjMgMCAxMy4yIDUuOSAxMy4yIDEzLjJjMCAxLjgtLjQgMy43LTEuMSA1LjRMMzEyIDI2NGwzMC45IDY5LjRjLjggMS43IDEuMSAzLjUgMS4xIDUuNGMwIDcuMy01LjkgMTMuMi0xMy4yIDEzLjJMMTQ0IDM1MmwwIDMyLTMyIDAgMC0zMiAwLTE3NiAwLTEuNWMtNi4xLTQuOC0xMC0xMi4yLTEwLTIwLjVjMC0xNC40IDExLjYtMjYgMjYtMjZzMjYgMTEuNiAyNiAyNnpcIl1cbn07XG52YXIgZmFGb250QXdlc29tZUFsdCA9IGZhU3F1YXJlRm9udEF3ZXNvbWVTdHJva2U7XG52YXIgZmFBdGxhc3NpYW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXRsYXNzaWFuJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNzdiXCIsIFwiTTE1Mi4yIDIzNi40Yy03LjctOC4yLTE5LjctNy43LTI0LjggMi44TDEuNiA0OTAuMmMtNSAxMCAyLjQgMjEuNyAxMy40IDIxLjdoMTc1YzUuOC4xIDExLTMuMiAxMy40LTguNCAzNy45LTc3LjggMTUuMS0xOTYuMy01MS4yLTI2Ny4xek0yNDQuNCA4LjFjLTEyMi4zIDE5My40LTguNSAzNDguNiA2NSA0OTUuNSAyLjUgNS4xIDcuNyA4LjQgMTMuNCA4LjRINDk3YzExLjIgMCAxOC40LTExLjggMTMuNC0yMS43IDAgMC0yMzQuNS00NzAuNi0yNDAuNC00ODIuMy01LjMtMTAuNi0xOC44LTEwLjgtMjUuNi4xelwiXVxufTtcbnZhciBmYUxpbmtlZGluSW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGlua2VkaW4taW4nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYwZTFcIiwgXCJNMTAwLjI4IDQ0OEg3LjRWMTQ4LjloOTIuODh6TTUzLjc5IDEwOC4xQzI0LjA5IDEwOC4xIDAgODMuNSAwIDUzLjhhNTMuNzkgNTMuNzkgMCAwIDEgMTA3LjU4IDBjMCAyOS43LTI0LjEgNTQuMy01My43OSA1NC4zek00NDcuOSA0NDhoLTkyLjY4VjMwMi40YzAtMzQuNy0uNy03OS4yLTQ4LjI5LTc5LjItNDguMjkgMC01NS42OSAzNy43LTU1LjY5IDc2LjdWNDQ4aC05Mi43OFYxNDguOWg4OS4wOHY0MC44aDEuM2MxMi40LTIzLjUgNDIuNjktNDguMyA4Ny44OC00OC4zIDk0IDAgMTExLjI4IDYxLjkgMTExLjI4IDE0Mi4zVjQ0OHpcIl1cbn07XG52YXIgZmFEaWdpdGFsT2NlYW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGlnaXRhbC1vY2VhbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjM5MVwiLCBcIk04NyA0ODEuOGg3My43di03My42SDg3ek0yNS40IDM0Ni42djYxLjZIODd2LTYxLjZ6bTQ2Ni4yLTE2OS43Yy0yMy03NC4yLTgyLjQtMTMzLjMtMTU2LjYtMTU2LjZDMTY0LjktMzIuOCA4IDkzLjcgOCAyNTUuOWg5NS44YzAtMTAxLjggMTAxLTE4MC41IDIwOC4xLTE0MS43IDM5LjcgMTQuMyA3MS41IDQ2LjEgODUuOCA4NS43IDM5LjEgMTA3LTM5LjcgMjA3LjgtMTQxLjQgMjA4di4zaC0uM1Y1MDRjMTYyLjYgMCAyODguOC0xNTYuOCAyMzUuNi0zMjcuMXptLTIzNS4zIDIzMXYtOTUuM2gtOTUuNnY5NS42SDI1NnYtLjN6XCJdXG59O1xudmFyIGZhTmltYmxyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ25pbWJscicsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjVhOFwiLCBcIk0yNDYuNiAyOTkuMjljMTUuNTcgMCAyNy4xNSAxMS40NiAyNy4xNSAyN3MtMTEuNjIgMjctMjcuMTUgMjdjLTE1LjcgMC0yNy4xNS0xMS41Ny0yNy4xNS0yN3MxMS41NS0yNyAyNy4xNS0yN3pNMTEzIDMyNi4yNWMwLTE1LjYxIDExLjY4LTI3IDI3LjE1LTI3czI3LjE1IDExLjQ2IDI3LjE1IDI3LTExLjQ3IDI3LTI3LjE1IDI3Yy0xNS40NCAwLTI3LjE1LTExLjMxLTI3LjE1LTI3TTE5MS43NiAxNTlDMTU3IDE1OSA4OS40NSAxNzguNzcgNTkuMjUgMjI3TDE0IDB2MzM1LjQ4QzE0IDQzMy4xMyA5My42MSA1MTIgMTkxLjc2IDUxMnMxNzcuNzYtNzguOTUgMTc3Ljc2LTE3Ni41MlMyOTAuMTMgMTU5IDE5MS43NiAxNTl6bTAgMzA4LjEyYy03My4yNyAwLTEzMi41MS01OC45LTEzMi41MS0xMzEuNTlzNTkuMjQtMTMxLjU5IDEzMi41MS0xMzEuNTkgMTMyLjUxIDU4Ljg2IDEzMi41MSAxMzEuNTRTMjY1IDQ2Ny4wNyAxOTEuNzYgNDY3LjA3elwiXVxufTtcbnZhciBmYUNocm9tZWNhc3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY2hyb21lY2FzdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjgzOFwiLCBcIk00NDcuOCw2NEg2NGMtMjMuNiwwLTQyLjcsMTkuMS00Mi43LDQyLjd2NjMuOUg2NHYtNjMuOWgzODMuOHYyOTguNkgyOTguNlY0NDhINDQ4YzIzLjYsMCw0Mi43LTE5LjEsNDIuNy00Mi43VjEwNi43IEM0OTAuNyw4My4xLDQ3MS40LDY0LDQ0Ny44LDY0eiBNMjEuMywzODMuNkwyMS4zLDM4My42bDAsNjMuOWg2My45Qzg1LjIsNDEyLjIsNTYuNiwzODMuNiwyMS4zLDM4My42TDIxLjMsMzgzLjZ6IE0yMS4zLDI5OC42VjM0MSBjNTguOSwwLDEwNi42LDQ4LjEsMTA2LjYsMTA3aDQyLjdDMTcwLjcsMzY1LjYsMTAzLjcsMjk4LjcsMjEuMywyOTguNnogTTIxMy40LDQ0OGg0Mi43Yy0wLjUtMTI5LjUtMTA1LjMtMjM0LjMtMjM0LjgtMjM0LjZsMCw0Mi40IEMxMjcuMywyNTUuNiwyMTMuMywzNDIsMjEzLjQsNDQ4elwiXVxufTtcbnZhciBmYUV2ZXJub3RlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2V2ZXJub3RlJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmODM5XCIsIFwiTTEyMC44MiAxMzIuMjFjMS42IDIyLjMxLTE3LjU1IDIxLjU5LTIxLjYxIDIxLjU5LTY4LjkzIDAtNzMuNjQtMS04My41OCAzLjM0LS41Ni4yMi0uNzQgMC0uMzctLjM3TDEyMy43OSA0Ni40NWMuMzgtLjM3LjYtLjIyLjM4LjM3LTQuMzUgOS45OS0zLjM1IDE1LjA5LTMuMzUgODUuMzl6bTc5IDMwOGMtMTQuNjgtMzcuMDggMTMtNzYuOTMgNTIuNTItNzYuNjIgMTcuNDkgMCAyMi42IDIzLjIxIDcuOTUgMzEuNDItNi4xOSAzLjMtMjQuOTUgMS43NC0yNS4xNCAxOS4yLS4wNSAxNy4wOSAxOS42NyAyNSAzMS4yIDI0Ljg5QTQ1LjY0IDQ1LjY0IDAgMCAwIDMxMiAzOTMuNDV2LS4wOGMwLTExLjYzLTcuNzktNDcuMjItNDcuNTQtNTUuMzQtNy43Mi0xLjU0LTY1LTYuMzUtNjguMzUtNTAuNTItMy43NCAxNi45My0xNy40IDYzLjQ5LTQzLjExIDY5LjA5LTguNzQgMS45NC02OS42OCA3LjY0LTExMi45Mi0zNi43NyAwIDAtMTguNTctMTUuMjMtMjguMjMtNTcuOTUtMy4zOC0xNS43NS05LjI4LTM5LjctMTEuMTQtNjIgMC0xOCAxMS4xNC0zMC40NSAyNS4wNy0zMi4yIDgxIDAgOTAgMi4zMiAxMDEtNy44IDkuODItOS4yNCA3LjgtMTUuNSA3LjgtMTAyLjc4IDEtOC4zIDcuNzktMzAuODEgNTMuNDEtMjQuMTQgNiAuODYgMzEuOTEgNC4xOCAzNy40OCAzMC42NGw2NC4yNiAxMS4xNWMyMC40MyAzLjcxIDcwLjk0IDcgODAuNiA1Ny45NCAyMi42NiAxMjEuMDkgOC45MSAyMzguNDYgNy44IDIzOC40NkMzNjIuMTUgNDg1LjUzIDI2Ny4wNiA0ODAgMjY3LjA2IDQ4MGMtMTguOTUtLjIzLTU0LjI1LTkuNC02Ny4yNy0zOS44M3ptODAuOTQtMjA0Ljg0Yy0xIDEuOTItMi4yIDYgLjg1IDcgMTQuMDkgNC45MyAzOS43NSA2Ljg0IDQ1Ljg4IDUuNTMgMy4xMS0uMjUgMy4wNS00LjQzIDIuNDgtNi42NS0zLjUzLTIxLjg1LTQwLjgzLTI2LjUtNDkuMjQtNS45MnpcIl1cbn07XG52YXIgZmFIYWNrZXJOZXdzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2hhY2tlci1uZXdzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMWQ0XCIsIFwiTTAgMzJ2NDQ4aDQ0OFYzMkgwem0yMS4yIDE5Ny4ySDIxYy4xLS4xLjItLjMuMy0uNCAwIC4xIDAgLjMtLjEuNHptMjE4IDUzLjlWMzg0aC0zMS40VjI4MS4zTDEyOCAxMjhoMzcuM2M1Mi41IDk4LjMgNDkuMiAxMDEuMiA1OS4zIDEyNS42IDEyLjMtMjcgNS44LTI0LjQgNjAuNi0xMjUuNkgzMjBsLTgwLjggMTU1LjF6XCJdXG59O1xudmFyIGZhQ3JlYXRpdmVDb21tb25zU2FtcGxpbmcgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3JlYXRpdmUtY29tbW9ucy1zYW1wbGluZycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjRmMFwiLCBcIk0yNDcuNiA4QzM4OS40IDggNDk2IDExOC4xIDQ5NiAyNTZjMCAxNDcuMS0xMTguNSAyNDgtMjQ4LjQgMjQ4QzExMy42IDUwNCAwIDM5NC41IDAgMjU2IDAgMTIzLjEgMTA0LjcgOCAyNDcuNiA4em0uOCA0NC43QzEzMC4yIDUyLjcgNDQuNyAxNTAuNiA0NC43IDI1NmMwIDEwOS44IDkxLjIgMjAyLjggMjAzLjcgMjAyLjggMTAzLjIgMCAyMDIuOC04MS4xIDIwMi44LTIwMi44LjEtMTEzLjgtOTAuMi0yMDMuMy0yMDIuOC0yMDMuM3ptMy42IDUzLjJjMi44LS4zIDExLjUgMSAxMS41IDExLjVsNi42IDEwNy4yIDQuOS01OS4zYzAtNiA0LjctMTAuNiAxMC42LTEwLjYgNS45IDAgMTAuNiA0LjcgMTAuNiAxMC42IDAgMi41LS41LTUuNyA1LjcgODEuNWw1LjgtNjQuMmMuMy0yLjkgMi45LTkuMyAxMC4yLTkuMyAzLjggMCA5LjkgMi4zIDEwLjYgOC45bDExLjUgOTYuNSA1LjMtMTIuOGMxLjgtNC40IDUuMi02LjYgMTAuMi02LjZoNTh2MjEuM2gtNTAuOWwtMTguMiA0NC4zYy0zLjkgOS45LTE5LjUgOS4xLTIwLjgtMy4xbC00LTMxLjktNy41IDkyLjZjLS4zIDMtMyA5LjMtMTAuMiA5LjMtMyAwLTkuOC0yLjEtMTAuNi05LjMgMC0xLjkuNiA1LjgtNi4yLTc3LjlsLTUuMyA3Mi4yYy0xLjEgNC44LTQuOCA5LjMtMTAuNiA5LjMtMi45IDAtOS44LTItMTAuNi05LjMgMC0xLjkuNSA2LjctNS44LTg3LjdsLTUuOCA5NC44YzAgNi4zLTMuNiAxMi40LTEwLjYgMTIuNC01LjIgMC0xMC42LTQuMS0xMC42LTEybC01LjgtODcuN2MtNS44IDkyLjUtNS4zIDg0LTUuMyA4NS45LTEuMSA0LjgtNC44IDkuMy0xMC42IDkuMy0zIDAtOS44LTIuMS0xMC42LTkuMyAwLS43LS40LTEuMS0uNC0yLjZsLTYuMi04OC42TDE4MiAzNDhjLS43IDYuNS02LjcgOS4zLTEwLjYgOS4zLTUuOCAwLTkuNi00LjEtMTAuNi04LjlMMTQ5LjcgMjcyYy0yIDQtMy41IDguNC0xMS4xIDguNEg4Ny4ydi0yMS4zSDEzMmwxMy43LTI3LjljNC40LTkuOSAxOC4yLTcuMiAxOS45IDIuN2wzLjEgMjAuNCA4LjQtOTcuOWMwLTYgNC44LTEwLjYgMTAuNi0xMC42LjUgMCAxMC42LS4yIDEwLjYgMTIuNGw0LjkgNjkuMSA2LjYtOTIuNmMwLTEwLjEgOS41LTEwLjYgMTAuMi0xMC42LjYgMCAxMC42LjcgMTAuNiAxMC42bDUuMyA4MC42IDYuMi05Ny45Yy4xLTEuMS0uNi0xMC4zIDkuOS0xMS41elwiXVxufTtcbnZhciBmYUFkdmVyc2FsID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FkdmVyc2FsJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMzZhXCIsIFwiTTQ4Mi4xIDMySDI4LjdDNS44IDMyIDAgMzcuOSAwIDYwLjl2MzkwLjJDMCA0NzQuNCA1LjggNDgwIDI4LjcgNDgwaDQ1My40YzI0LjQgMCAyOS45LTUuMiAyOS45LTI5LjdWNjIuMmMwLTI0LjYtNS40LTMwLjItMjkuOS0zMC4yek0xNzguNCAyMjAuM2MtMjcuNS0yMC4yLTcyLjEtOC43LTg0LjIgMjMuNC00LjMgMTEuMS05LjMgOS41LTE3LjUgOC4zLTkuNy0xLjUtMTcuMi0zLjItMjIuNS01LjUtMjguOC0xMS40IDguNi01NS4zIDI0LjktNjQuMyA0MS4xLTIxLjQgODMuNC0yMi4yIDEyNS4zLTQuOCA0MC45IDE2LjggMzQuNSA1OS4yIDM0LjUgMTI4LjUgMi43IDI1LjgtNC4zIDU4LjMgOS4zIDg4LjggMS45IDQuNC40IDcuOS0yLjcgMTAuNy04LjQgNi43LTM5LjMgMi4yLTQ2LjYtNy40LTEuOS0yLjItMS44LTMuNi0zLjktNi4yLTMuNi0zLjktNy4zLTIuMi0xMS45IDEtNTcuNCAzNi40LTE0MC4zIDIxLjQtMTQ3LTQzLjMtMy4xLTI5LjMgMTIuNC01Ny4xIDM5LjYtNzEgMzguMi0xOS41IDExMi4yLTExLjggMTE0LTMwLjkgMS4xLTEwLjItMS45LTIwLjEtMTEuMy0yNy4zem0yODYuNyAyMjJjMCAxNS4xLTExLjEgOS45LTE3LjggOS45SDUyLjRjLTcuNCAwLTE4LjIgNC44LTE3LjgtMTAuNy40LTEzLjkgMTAuNS05LjEgMTcuMS05LjEgMTMyLjMtLjQgMjY0LjUtLjQgMzk2LjggMCA2LjggMCAxNi42LTQuNCAxNi42IDkuOXptMy44LTM0MC41djI5MWMwIDUuNy0uNyAxMy45LTguMSAxMy45LTEyLjQtLjQtMjcuNSA3LjEtMzYuMS01LjYtNS44LTguNy03LjgtNC0xMi40LTEuMi01My40IDI5LjctMTI4LjEgNy4xLTE0NC40LTg1LjItNi4xLTMzLjQtLjctNjcuMSAxNS43LTEwMCAxMS44LTIzLjkgNTYuOS03Ni4xIDEzNi4xLTMwLjV2LTcxYzAtMjYuMi0uMS0yNi4yIDI2LTI2LjIgMy4xIDAgNi42LjQgOS43IDAgMTAuMS0uOCAxMy42IDQuNCAxMy42IDE0LjMtLjEuMi0uMS4zLS4xLjV6bS01MS41IDIzMi4zYy0xOS41IDQ3LjYtNzIuOSA0My4zLTkwIDUuMi0xNS4xLTMzLjMtMTUuNS02OC4yLjQtMTAxLjUgMTYuMy0zNC4xIDU5LjctMzUuNyA4MS41LTQuOCAyMC42IDI4LjggMTQuOSA4NC42IDguMSAxMDEuMXptLTI5NC44IDM1LjNjLTcuNS0xLjMtMzMtMy4zLTMzLjctMjcuOC0uNC0xMy45IDcuOC0yMyAxOS44LTI1LjggMjQuNC01LjkgNDkuMy05LjkgNzMuNy0xNC43IDguOS0yIDcuNCA0LjQgNy44IDkuNSAxLjQgMzMtMjYuMSA1OS4yLTY3LjYgNTguOHpcIl1cbn07XG52YXIgZmFDcmVhdGl2ZUNvbW1vbnMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3JlYXRpdmUtY29tbW9ucycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjI1ZVwiLCBcIk0yNDUuODMgMjE0Ljg3bC0zMy4yMiAxNy4yOGMtOS40My0xOS41OC0yNS4yNC0xOS45My0yNy40Ni0xOS45My0yMi4xMyAwLTMzLjIyIDE0LjYxLTMzLjIyIDQzLjg0IDAgMjMuNTcgOS4yMSA0My44NCAzMy4yMiA0My44NCAxNC40NyAwIDI0LjY1LTcuMDkgMzAuNTctMjEuMjZsMzAuNTUgMTUuNWMtNi4xNyAxMS41MS0yNS42OSAzOC45OC02NS4xIDM4Ljk4LTIyLjYgMC03My45Ni0xMC4zMi03My45Ni03Ny4wNSAwLTU4LjY5IDQzLTc3LjA2IDcyLjYzLTc3LjA2IDMwLjcyLS4wMSA1Mi43IDExLjk1IDY1Ljk5IDM1Ljg2em0xNDMuMDUgMGwtMzIuNzggMTcuMjhjLTkuNS0xOS43Ny0yNS43Mi0xOS45My0yNy45LTE5LjkzLTIyLjE0IDAtMzMuMjIgMTQuNjEtMzMuMjIgNDMuODQgMCAyMy41NSA5LjIzIDQzLjg0IDMzLjIyIDQzLjg0IDE0LjQ1IDAgMjQuNjUtNy4wOSAzMC41NC0yMS4yNmwzMSAxNS41Yy0yLjEgMy43NS0yMS4zOSAzOC45OC02NS4wOSAzOC45OC0yMi42OSAwLTczLjk2LTkuODctNzMuOTYtNzcuMDUgMC01OC42NyA0Mi45Ny03Ny4wNiA3Mi42My03Ny4wNiAzMC43MS0uMDEgNTIuNTggMTEuOTUgNjUuNTYgMzUuODZ6TTI0Ny41NiA4LjA1QzEwNC43NCA4LjA1IDAgMTIzLjExIDAgMjU2LjA1YzAgMTM4LjQ5IDExMy42IDI0OCAyNDcuNTYgMjQ4IDEyOS45MyAwIDI0OC40NC0xMDAuODcgMjQ4LjQ0LTI0OCAwLTEzNy44Ny0xMDYuNjItMjQ4LTI0OC40NC0yNDh6bS44NyA0NTAuODFjLTExMi41NCAwLTIwMy43LTkzLjA0LTIwMy43LTIwMi44MSAwLTEwNS40MiA4NS40My0yMDMuMjcgMjAzLjcyLTIwMy4yNyAxMTIuNTMgMCAyMDIuODIgODkuNDYgMjAyLjgyIDIwMy4yNi0uMDEgMTIxLjY5LTk5LjY4IDIwMi44Mi0yMDIuODQgMjAyLjgyelwiXVxufTtcbnZhciBmYVdhdGNobWFuTW9uaXRvcmluZyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3YXRjaG1hbi1tb25pdG9yaW5nJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJlMDg3XCIsIFwiTTI1NiwxNkMxMjMuNDUyLDE2LDE2LDEyMy40NTIsMTYsMjU2UzEyMy40NTIsNDk2LDI1Niw0OTYsNDk2LDM4OC41NDgsNDk2LDI1NiwzODguNTQ4LDE2LDI1NiwxNlpNMTIxLjY5LDQyOS4xMjJDNzAuMDU2LDM4OC45NzIsMzYuNzQxLDMyNi4zMjIsMzYuNzQxLDI1NmEyMTguNTE5LDIxOC41MTksMCwwLDEsOS41ODctNjQuMTIybDEwMi45LTE3Ljg5NS0uMTIxLDEwLjk2Ny0xMy45NDMsMi4wMTNzLS4xNDQsMTIuNS0uMTQ0LDE5LjU0OWExMi43NzgsMTIuNzc4LDAsMCwwLDQuODg3LDEwLjM0OWw5LjQ2OCw3LjRabTEwNS42OTItMjgzLjI3LDguNDgtNy42MThzNi45MzQtNS4zOC0uMTQzLTkuMzQ0Yy03LjE4OC00LjAyNC0zOS41My0zNC41LTM5LjUzLTM0LjUtNS4zNDgtNS40NzctOC4yNTctNy4zNDctMTUuNDYsMCwwLDAtMzIuMzQyLDMwLjQ3NC0zOS41MjksMzQuNS03LjA3OCwzLjk2NC0uMTQ0LDkuMzQ0LS4xNDQsOS4zNDRsOC40ODEsNy42MTgtLjA0OCw0LjM2OUw3NS45ODIsMTMxLjA0NWMzOS42NDQtNTYuOTM4LDEwNS41MzItOTQuMywxODAuMDE4LTk0LjNBMjE4Ljc1NCwyMTguNzU0LDAsMCwxLDQyMC45MzQsMTExLjc3bC0xOTMuNTEyLDM3LjdabTM0LjA2MywzMjkuMjY5LTMzLjktMjUwLjg1Nyw5LjQ2Ny03LjRhMTIuNzc4LDEyLjc3OCwwLDAsMCw0Ljg4OC0xMC4zNDljMC03LjA0NC0uMTQ0LTE5LjU0OS0uMTQ0LTE5LjU0OWwtMTMuOTQzLTIuMDEzLS4xMTYtMTAuNDc0LDI0MS43MTEsMzEuMzkxQTIxOC44NzIsMjE4Ljg3MiwwLDAsMSw0NzUuMjU5LDI1NkM0NzUuMjU5LDM3NS4wNzQsMzc5LjgzMSw0NzIuMjEyLDI2MS40NDUsNDc1LjEyMVpcIl1cbn07XG52YXIgZmFGb250aWNvbnMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZm9udGljb25zJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMjgwXCIsIFwiTTAgMzJ2NDQ4aDQ0OFYzMnptMTg3IDE0MC45Yy0xOC40IDAtMTkgOS45LTE5IDI3LjR2MjMuM2MwIDIuNC0zLjUgNC40LS42IDQuNGg2Ny40bC0xMS4xIDM3LjNIMTY4djExMi45YzAgNS44LTIgNi43IDMuMiA3LjNsNDMuNSA0LjF2MjUuMUg4NFYzODlsMjEuMy0yYzUuMi0uNiA2LjctMi4zIDYuNy03LjlWMjY3LjdjMC0yLjMtMi45LTIuMy01LjgtMi4zSDg0VjIyOGgyOHYtMjFjMC00OS42IDI2LjUtNzAgNzcuMy03MCAzNC4xIDAgNjQuNyA4LjIgNjQuNyA1Mi44bC01MC43IDYuMWMuMy0xOC43LTQuNC0yMy0xNi4zLTIzem03NC4zIDI0MS44di0yNS4xbDIwLjQtMi42YzUuMi0uNiA3LjYtMS43IDcuNi03LjNWMjcxLjhjMC00LjEtMi45LTYuNy02LjctNy45bC0yNC4yLTYuNCA2LjctMjkuNWg4MC4ydjE1MS43YzAgNS44LTIuNiA2LjQgMi45IDcuM2wxNS43IDIuNnYyNS4xem04MC44LTI1NS41bDkgMzMuMi03LjMgNy4zLTMxLjItMTYuNi0zMS4yIDE2LjYtNy4zLTcuMyA5LTMzLjItMjEuOC0yNC4yIDMuNS05LjZoMjcuN2wxNS41LTI4aDkuM2wxNS41IDI4aDI3LjdsMy41IDkuNnpcIl1cbn07XG52YXIgZmFXZWl4aW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2VpeGluJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMWQ3XCIsIFwiTTM4NS4yIDE2Ny42YzYuNCAwIDEyLjYuMyAxOC44IDEuMUMzODcuNCA5MC4zIDMwMy4zIDMyIDIwNy43IDMyIDEwMC41IDMyIDEzIDEwNC44IDEzIDE5Ny40YzAgNTMuNCAyOS4zIDk3LjUgNzcuOSAxMzEuNmwtMTkuMyA1OC42IDY4LTM0LjFjMjQuNCA0LjggNDMuOCA5LjcgNjguMiA5LjcgNi4yIDAgMTIuMS0uMyAxOC4zLS44LTQtMTIuOS02LjItMjYuNi02LjItNDAuOC0uMS04NC45IDcyLjktMTU0IDE2NS4zLTE1NHptLTEwNC41LTUyLjljMTQuNSAwIDI0LjIgOS43IDI0LjIgMjQuNCAwIDE0LjUtOS43IDI0LjItMjQuMiAyNC4yLTE0LjggMC0yOS4zLTkuNy0yOS4zLTI0LjIuMS0xNC43IDE0LjYtMjQuNCAyOS4zLTI0LjR6bS0xMzYuNCA0OC42Yy0xNC41IDAtMjkuMy05LjctMjkuMy0yNC4yIDAtMTQuOCAxNC44LTI0LjQgMjkuMy0yNC40IDE0LjggMCAyNC40IDkuNyAyNC40IDI0LjQgMCAxNC42LTkuNiAyNC4yLTI0LjQgMjQuMnpNNTYzIDMxOS40YzAtNzcuOS03Ny45LTE0MS4zLTE2NS40LTE0MS4zLTkyLjcgMC0xNjUuNCA2My40LTE2NS40IDE0MS4zUzMwNSA0NjAuNyAzOTcuNiA0NjAuN2MxOS4zIDAgMzguOS01LjEgNTguNi05LjlsNTMuNCAyOS4zLTE0LjgtNDguNkM1MzQgNDAyLjEgNTYzIDM2My4yIDU2MyAzMTkuNHptLTIxOS4xLTI0LjVjLTkuNyAwLTE5LjMtOS43LTE5LjMtMTkuNiAwLTkuNyA5LjctMTkuMyAxOS4zLTE5LjMgMTQuOCAwIDI0LjQgOS43IDI0LjQgMTkuMyAwIDEwLTkuNyAxOS42LTI0LjQgMTkuNnptMTA3LjEgMGMtOS43IDAtMTkuMy05LjctMTkuMy0xOS42IDAtOS43IDkuNy0xOS4zIDE5LjMtMTkuMyAxNC41IDAgMjQuNCA5LjcgMjQuNCAxOS4zLjEgMTAtOS45IDE5LjYtMjQuNCAxOS42elwiXVxufTtcbnZhciBmYVNoaXJ0c2luYnVsayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzaGlydHNpbmJ1bGsnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyMTRcIiwgXCJNMTAwIDQxMC4zbDMwLjYgMTMuNCA0LjQtOS45LTMwLjYtMTMuNHptMzkuNCAxNy41bDMwLjYgMTMuNCA0LjQtOS45LTMwLjYtMTMuNHptMTcyLjEtMTRsNC40IDkuOSAzMC42LTEzLjQtNC40LTkuOXpNMTc5LjEgNDQ1bDMwLjMgMTMuNyA0LjQtOS45LTMwLjMtMTMuNHpNNjAuNCAzOTIuOEw5MSA0MDYuMmw0LjQtOS42LTMwLjYtMTMuN3ptMjExLjQgMzguNWw0LjQgOS45IDMwLjYtMTMuNC00LjQtOS45em0tMzkuMyAxNy41bDQuNCA5LjkgMzAuNi0xMy43LTQuNC05LjZ6bTExOC40LTUyLjJsNC40IDkuNiAzMC42LTEzLjQtNC40LTkuOXpNMTcwIDQ2LjZoLTMzLjV2MTAuNUgxNzB6bS00Ny4yIDBIODkuMnYxMC41aDMzLjV6bS00Ny4zIDBINDIuM3YxMC41aDMzLjN6bTE0MS41IDBoLTMzLjJ2MTAuNUgyMTd6bTk0LjUgMEgyNzh2MTAuNWgzMy41em00Ny4zIDBoLTMzLjV2MTAuNWgzMy41em0tOTQuNiAwSDIzMXYxMC41aDMzLjJ6bTE0MS41IDBoLTMzLjN2MTAuNWgzMy4zek01Mi44IDM1MS4xSDQydjMzLjVoMTAuOHptNzAtMjE1LjlIODkuMnYxMC41aDMzLjV6bS03MCAxMC42aDIyLjh2LTEwLjVINDJ2MzMuNWgxMC44em0xNjguOSAyMjguNmM1MC41IDAgOTEuMy00MC44IDkxLjMtOTEuMyAwLTUwLjItNDAuOC05MS4zLTkxLjMtOTEuMy01MC4yIDAtOTEuMyA0MS4xLTkxLjMgOTEuMyAwIDUwLjUgNDEuMSA5MS4zIDkxLjMgOTEuM3ptLTQ4LjItMTExLjFjMC0yNS40IDI5LjUtMzEuOCA0OS42LTMxLjggMTYuOSAwIDI5LjIgNS44IDQ0LjMgMTJsLTguOCAxNi45aC0uOWMtNi40LTkuOS0yNC44LTEzLjEtMzUuNi0xMy4xLTkgMC0yOS44IDEuOC0yOS44IDE0LjkgMCAyMS42IDc4LjUtMTAuMiA3OC41IDM3LjkgMCAyNS40LTMxLjUgMzEuMi01MSAzMS4yLTE4LjEgMC0zMi40LTIuOS00Ny4yLTEyLjJsOS0xOC40aC45YzYuMSAxMi4yIDIzLjYgMTQuOSAzNS45IDE0LjkgOC43IDAgMzIuNy0xLjIgMzIuNy0xNC4zIDAtMjYuMS03Ny42IDYuMy03Ny42LTM4ek01Mi44IDE3OC40SDQyVjIxMmgxMC44em0zNDIuNCAyMDYuMkg0MDZ2LTMzLjVoLTEwLjh6TTUyLjggMzA3LjlINDJ2MzMuNWgxMC44ek0wIDMuN3Y0MDZsMjIxLjcgOTguNkw0NDggNDA5LjdWMy43em00MTguOCAzODcuMUwyMjIgNDc2LjUgMjkuMiAzOTAuOFYxMjAuN2gzODkuN3YyNzAuMXptMC0yOTkuM0gyOS4yVjMyLjloMzg5Ljd2NTguNnptLTM2NiAxMzAuMUg0MnYzMy41aDEwLjh6bTAgNDMuMkg0MnYzMy41aDEwLjh6TTE3MCAxMzUuMmgtMzMuNXYxMC41SDE3MHptMjI1LjIgMTYzLjFINDA2di0zMy41aC0xMC44em0wLTQzLjJINDA2di0zMy41aC0xMC44ek0yMTcgMTM1LjJoLTMzLjJ2MTAuNUgyMTd6TTM5NS4yIDIxMkg0MDZ2LTMzLjVoLTEwLjh6bTAgMTI5LjVINDA2VjMwOGgtMTAuOHptLTEzMS0yMDYuM0gyMzF2MTAuNWgzMy4yem00Ny4zIDBIMjc4djEwLjVoMzMuNXptODMuNyAzMy42SDQwNnYtMzMuNWgtMzMuNXYxMC41aDIyLjh6bS0zNi40LTMzLjZoLTMzLjV2MTAuNWgzMy41elwiXVxufTtcbnZhciBmYUNvZGVwZW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY29kZXBlbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjFjYlwiLCBcIk01MDIuMjg1IDE1OS43MDRsLTIzNC0xNTZjLTcuOTg3LTQuOTE1LTE2LjUxMS00Ljk2LTI0LjU3MSAwbC0yMzQgMTU2QzMuNzE0IDE2My43MDMgMCAxNzAuODQ3IDAgMTc3Ljk4OXYxNTUuOTk5YzAgNy4xNDMgMy43MTQgMTQuMjg2IDkuNzE1IDE4LjI4NmwyMzQgMTU2LjAyMmM3Ljk4NyA0LjkxNSAxNi41MTEgNC45NiAyNC41NzEgMGwyMzQtMTU2LjAyMmM2LTMuOTk5IDkuNzE1LTExLjE0MyA5LjcxNS0xOC4yODZWMTc3Ljk4OWMtLjAwMS03LjE0Mi0zLjcxNS0xNC4yODYtOS43MTYtMTguMjg1ek0yNzggNjMuMTMxbDE3Mi4yODYgMTE0Ljg1OC03Ni44NTcgNTEuNDI5TDI3OCAxNjUuNzAzVjYzLjEzMXptLTQ0IDB2MTAyLjU3MmwtOTUuNDI5IDYzLjcxNS03Ni44NTctNTEuNDI5TDIzNCA2My4xMzF6TTQ0IDIxOS4xMzJsNTUuMTQzIDM2Ljg1N0w0NCAyOTIuODQ2di03My43MTR6bTE5MCAyMjkuNzE1TDYxLjcxNCAzMzMuOTg5bDc2Ljg1Ny01MS40MjlMMjM0IDM0Ni4yNzV2MTAyLjU3MnptMjItMTQwLjg1OGwtNzcuNzE1LTUyIDc3LjcxNS01MiA3Ny43MTUgNTItNzcuNzE1IDUyem0yMiAxNDAuODU4VjM0Ni4yNzVsOTUuNDI5LTYzLjcxNSA3Ni44NTcgNTEuNDI5TDI3OCA0NDguODQ3em0xOTAtMTU2LjAwMWwtNTUuMTQzLTM2Ljg1N0w0NjggMjE5LjEzMnY3My43MTR6XCJdXG59O1xudmFyIGZhR2l0QWx0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dpdC1hbHQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY4NDFcIiwgXCJNNDM5LjU1IDIzNi4wNUwyNDQgNDAuNDVhMjguODcgMjguODcgMCAwIDAtNDAuODEgMGwtNDAuNjYgNDAuNjMgNTEuNTIgNTEuNTJjMjcuMDYtOS4xNCA1Mi42OCAxNi43NyA0My4zOSA0My42OGw0OS42NiA0OS42NmMzNC4yMy0xMS44IDYxLjE4IDMxIDM1LjQ3IDU2LjY5LTI2LjQ5IDI2LjQ5LTcwLjIxLTIuODctNTYtMzcuMzRMMjQwLjIyIDE5OXYxMjEuODVjMjUuMyAxMi41NCAyMi4yNiA0MS44NSA5LjA4IDU1YTM0LjM0IDM0LjM0IDAgMCAxLTQ4LjU1IDBjLTE3LjU3LTE3LjYtMTEuMDctNDYuOTEgMTEuMjUtNTZ2LTEyM2MtMjAuOC04LjUxLTI0LjYtMzAuNzQtMTguNjQtNDVMMTQyLjU3IDEwMSA4LjQ1IDIzNS4xNGEyOC44NiAyOC44NiAwIDAgMCAwIDQwLjgxbDE5NS42MSAxOTUuNmEyOC44NiAyOC44NiAwIDAgMCA0MC44IDBsMTk0LjY5LTE5NC42OWEyOC44NiAyOC44NiAwIDAgMCAwLTQwLjgxelwiXVxufTtcbnZhciBmYUx5ZnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbHlmdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNjM1wiLCBcIk0wIDgxLjFoNzcuOHYyMDguN2MwIDMzLjEgMTUgNTIuOCAyNy4yIDYxLTEyLjcgMTEuMS01MS4yIDIwLjktODAuMi0yLjhDNy44IDMzNCAwIDMxMC43IDAgMjg5VjgxLjF6bTQ4NS45IDE3My41di0yMmgyMy44di03Ni44aC0yNi4xYy0xMC4xLTQ2LjMtNTEuMi04MC43LTEwMC4zLTgwLjctNTYuNiAwLTEwMi43IDQ2LTEwMi43IDEwMi43VjM1N2MxNiAyLjMgMzUuNC0uMyA1MS43LTE0IDE3LjEtMTQgMjQuOC0zNy4yIDI0LjgtNTl2LTYuN2gzOC44di03Ni44aC0zOC44di0yMy4zYzAtMzQuNiA1Mi4yLTM0LjYgNTIuMiAwdjc3LjFjMCA1Ni42IDQ2IDEwMi43IDEwMi43IDEwMi43di03Ni41Yy0xNC41IDAtMjYuMS0xMS43LTI2LjEtMjUuOXptLTI5NC4zLTk5djExM2MwIDE1LjQtMjMuOCAxNS40LTIzLjggMHYtMTEzSDkxdjEzMi43YzAgMjMuOCA4IDU0IDQ1IDYzLjkgMzcgOS44IDU4LjItMTAuNiA1OC4yLTEwLjYtMi4xIDEzLjQtMTQuNSAyMy4zLTM0LjkgMjUuMy0xNS41IDEuNi0zNS4yLTMuNi00NS03Ljh2NzAuM2MyNS4xIDcuNSA1MS41IDkuOCA3Ny42IDQuNyA0Ny4xLTkuMSA3Ni44LTQ4LjQgNzYuOC0xMDAuOFYxNTUuMWgtNzcuMXYuNXpcIl1cbn07XG52YXIgZmFSZXYgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncmV2JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNWIyXCIsIFwiTTI4OS42NyAyNzQuODlhNjUuNTcgNjUuNTcgMCAxIDEtNjUuNTYtNjUuNTYgNjUuNjQgNjUuNjQgMCAwIDEgNjUuNTYgNjUuNTZ6bTEzOS41NS01LjA1aC0uMTNhMjA0LjY5IDIwNC42OSAwIDAgMC03NC4zMi0xNTNsLTQ1LjM4IDI2LjJhMTU3LjA3IDE1Ny4wNyAwIDAgMSA3MS44MSAxMzEuODRDMzgxLjIgMzYxLjUgMzEwLjczIDQzMiAyMjQuMTEgNDMyUzY3IDM2MS41IDY3IDI3NC44OGMwLTgxLjg4IDYzLTE0OS4yNyAxNDMtMTU2LjQzdjM5LjEybDEwOC43Ny02Mi43OUwyMTAgMzJ2MzguMzJjLTEwNi43IDcuMjUtMTkxIDk2LTE5MSAyMDQuNTcgMCAxMTEuNTkgODkuMTIgMjAyLjI5IDIwMC4wNiAyMDV2LjExaDIxMC4xNlYyNjkuODR6XCJdXG59O1xudmFyIGZhV2luZG93cyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3aW5kb3dzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMTdhXCIsIFwiTTAgOTMuN2wxODMuNi0yNS4zdjE3Ny40SDBWOTMuN3ptMCAzMjQuNmwxODMuNiAyNS4zVjI2OC40SDB2MTQ5Ljl6bTIwMy44IDI4TDQ0OCA0ODBWMjY4LjRIMjAzLjh2MTc3Ljl6bTAtMzgwLjZ2MTgwLjFINDQ4VjMyTDIwMy44IDY1Ljd6XCJdXG59O1xudmFyIGZhV2l6YXJkc09mVGhlQ29hc3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2l6YXJkcy1vZi10aGUtY29hc3QnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY3MzBcIiwgXCJNMjE5LjE5IDM0NS42OWMtMS45IDEuMzgtMTEuMDcgOC40NC0uMjYgMjMuNTcgNC42NCA2LjQyIDE0LjExIDEyLjc5IDIxLjczIDYuNTUgNi41LTQuODggNy4zNS0xMi45Mi4yNi0yMy4wNC01LjQ3LTcuNzYtMTQuMjgtMTIuODgtMjEuNzMtNy4wOHptMzM2Ljc1IDc1Ljk0Yy0uMzQgMS43LS41NSAxLjY3Ljc5IDAgMi4wOS00LjE5IDQuMTktMTAuMjEgNC45OC0xOS45IDMuMTQtMzguNDktNDAuMzMtNzEuNDktMTAxLjM0LTc4LjAzLTU0LjczLTYuMDItMTI0LjM4IDkuMTctMTg4LjggNjAuNDlsLS4yNiAxLjU3YzIuNjIgNC45OCA0Ljk4IDEwLjc0IDMuNCAyMS4yMWwuNzkuMjZjNjMuODktNTguNCAxMzEuMTktNzcuMjUgMTg0LjM1LTczLjg1IDU4LjQgMy42NyAxMDAuMDMgMzQuMDQgMTAwLjAzIDY4LjA4LS4wMSA5Ljk2LTIuNjMgMTUuNzItMy45NCAyMC4xN3pNMzkyLjI4IDI0MC40MmMuNzkgNy4wNyA0LjE5IDEwLjIxIDkuMTcgMTAuNDcgNS41LjI2IDkuNDMtMi42MiAxMC40Ny02LjU1Ljc5LTMuNCAyLjA5LTI5Ljg1IDIuMDktMjkuODVzLTExLjI2IDYuNTUtMTQuOTMgMTAuNDdjLTMuNjYgMy42OC03LjMzIDguMzktNi44IDE1LjQ2em0tNTAuMDItMTUxLjFDMTM3Ljc1IDg5LjMyIDEzLjEgMjI2LjguNzkgMjQxLjJjLTEuMDUuNTItMS4zMS43OS43OSAxLjMxIDYwLjQ5IDE2LjUgMTU1LjgxIDgxLjE4IDE5Ni4xMyAyMDIuMTZsMS4wNS4yNmM1NS4yNS02OS45MiAxNDAuODgtMTI4LjA1IDIzNi45OS0xMjguMDUgODAuOTIgMCAxMzAuMTUgNDIuMTYgMTMwLjE1IDgwLjM5IDAgMTguMzMtNi41NSAzMy41Mi0yMi4yNiA0Ni4zNSAwIC45Ni0uMi43OS43OS43OSAxNC42Ni0xMC43NCAyNy41LTI4LjggMjcuNS00OC4xOCAwLTIyLjc4LTEyLjA1LTM4LjIzLTEyLjA1LTM4LjIzIDcuMDcgNy4wNyAxMC43NCAxNi4yNCAxMC43NCAxNi4yNCA1Ljc2LTQwLjg1IDI2Ljk3LTYyLjMyIDI2Ljk3LTYyLjMyLTIuMzYtOS42OS02LjgxLTE3LjgxLTYuODEtMTcuODEgNy41OSA4LjEyIDE0LjQgMjcuNSAxNC40IDQxLjM3IDAgMTAuNDctMy40IDIyLjc4LTEyLjU3IDMxLjk1bC4yNi41MmM4LjEyLTQuOTggMTYuNS0xNi43NiAxNi41LTM3Ljk3IDAtMTUuNzEtNC43MS0yNS45Mi00LjcxLTI1LjkyIDUuNzYtNS4yNCAxMS4yNi05LjE3IDE1Ljk3LTExLjc4Ljc5IDMuNCAyLjA5IDkuNjkgMi4zNiAxNC45MyAwIDEuMDUuNzkgMS44MyAxLjA1IDAgLjc5LTUuNzYtLjI2LTE2LjI0LS4yNi0xNi41IDYuMDItMy4xNCA5LjY5LTQuNDUgOS42OS00LjQ1QzYxNy43NCAxNzYgNDg5LjQzIDg5LjMyIDM0Mi4yNiA4OS4zMnptLTk5LjI0IDI4OS42MmMtMTEuMDYgOC45OS0yNC4yIDQuMDgtMzAuNjQtNC4xOS03LjQ1LTkuNTgtNi43Ni0yNC4wOSA0LjE5LTMyLjQ3IDE0Ljg1LTExLjM1IDI3LjA4LS40OSAzMS4xNiA1LjUuMjguMzkgMTIuMTMgMTYuNTctNC43MSAzMS4xNnptMi4wOS0xMzYuNDNsOS40My0xNy44MSAxMS43OCA3MC45Ni0xMi41NyA2LjAyLTI0LjYyLTI4LjggMTQuMTQtMjYuNzEgMy42NyA0LjQ1LTEuODMtOC4xMXptMTguNTkgMTE3LjU4bC0uMjYtLjI2YzIuMDUtNC4xLTIuNS02LjYxLTE3LjU0LTMxLjY5LTEuMzEtMi4zNi0zLjE0LTIuODgtNC40NS0yLjYybC0uMjYtLjUyYzcuODYtNS43NiAxNS40NS0xMC4yMSAyNS40LTE1LjcxbC41Mi4yNmMxLjMxIDEuODMgMi4wOSAyLjg4IDMuNCA0LjcxbC0uMjYuNTJjLTEuMDUtLjI2LTIuMzYtLjc5LTUuMjQuMjYtMi4wOS43OS03Ljg2IDMuNjctMTIuMzEgNy41OXYxLjMxYzEuNTcgMi4zNiAzLjkzIDYuNTUgNS43NiA5LjY5aC4yNmMxMC4wNS02LjI4IDcuNTYtNC41NSAxMS41Mi03Ljg2aC4yNmMuNTIgMS44My41MiAxLjgzIDEuODMgNS41bC0uMjYuMjZjLTMuMDYuNjEtNC42NS4zNC0xMS41MiA1LjV2LjI2YzkuNDYgMTcuMDIgMTEuMDEgMTYuNzUgMTIuNTcgMTUuOTdsLjI2LjI2Yy0yLjM0IDEuNTktNi4yNyA0LjIxLTkuNjggNi41N3ptNTUuMjYtMzIuNDdjLTMuMTQgMS41Ny02LjAyIDIuODgtOS45NSA0Ljk4bC0uMjYtLjI2YzEuMjktMi41OSAxLjE2LTIuNzEtMTEuNzgtMzIuNDdsLS4yNi0uMjZjLS4xNSAwLTguOSAzLjY1LTkuOTUgNy4zM2gtLjUybC0xLjA1LTUuNzYuMjYtLjUyYzcuMjktNC41NiAyNS41My0xMS42NCAyNy43Ni0xMi41N2wuNTIuMjYgMy4xNCA0Ljk4LS4yNi41MmMtMy41My0xLjc2LTcuMzUuNzYtMTIuMzEgMi42MnYuMjZjMTIuMzEgMzIuMDEgMTIuNjcgMzAuNjQgMTQuNjYgMzAuNjR2LjI1em00NC43Ny0xNi41Yy00LjE5IDEuMDUtNS4yNCAxLjMxLTkuNjkgMi44OGwtLjI2LS4yNi41Mi00LjQ1Yy0xLjA1LTMuNC0zLjE0LTExLjUyLTMuNjctMTMuNjJsLS4yNi0uMjZjLTMuNC43OS04LjkgMi42Mi0xMi44MyAzLjkzbC0uMjYuMjZjLjc5IDIuNjIgMy4xNCA5Ljk1IDQuMTkgMTMuODguNzkgMi4zNiAxLjgzIDIuODggMi44OCAzLjE0di41MmMtMy42NyAxLjA1LTcuMDcgMi42Mi0xMC4yMSAzLjkzbC0uMjYtLjI2YzEuMDUtMS4zMSAxLjA1LTIuODguMjYtNC45OC0xLjA1LTMuMTQtOC4xMi0yMy44My05LjE3LTI3LjIzLS41Mi0xLjgzLTEuNTctMy4xNC0yLjYyLTMuMTR2LS41MmMzLjE0LTEuMDUgNi4wMi0yLjA5IDEwLjc0LTMuNGwuMjYuMjYtLjI2IDQuNzFjMS4zMSAzLjkzIDIuMzYgNy41OSAzLjE0IDkuNjloLjI2YzMuOTMtMS4zMSA5LjQzLTIuODggMTIuODMtMy45M2wuMjYtLjI2LTIuNjItOS40M2MtLjUyLTEuODMtMS4wNS0zLjQtMi42Mi0zLjkzdi0uMjZjNC40NS0xLjA1IDcuMzMtMS44MyAxMC43NC0yLjM2bC4yNi4yNmMtMS4wNSAxLjMxLTEuMDUgMi44OC0uNTIgNC40NSAxLjU3IDYuMjggNC43MSAyMC40MyA2LjI4IDI2LjQ1LjU0IDIuNjIgMS44NSAzLjQxIDIuNjMgMy45M3ptMzIuMjEtNi44MWwtLjI2LjI2Yy00LjcxLjUyLTE0LjE0IDIuMzYtMjIuNTIgNC4xOWwtLjI2LS4yNi43OS00LjE5Yy0xLjU3LTcuODYtMy40LTE4LjU5LTQuOTgtMjYuMTktLjI2LTEuODMtLjc5LTIuODgtMi42Mi0zLjY3bC43OS0uNTJjOS4xNy0xLjU3IDIwLjE2LTIuMzYgMjQuODgtMi42MmwuMjYuMjZjLjUyIDIuMzYuNzkgMy4xNCAxLjU3IDUuNWwtLjI2LjI2Yy0xLjE0LTEuMTQtMy4zNC0zLjItMTYuMjQtLjc5bC0uMjYuMjZjLjI2IDEuNTcgMS4wNSA2LjU1IDEuNTcgOS45NWwuMjYuMjZjOS41Mi0xLjY4IDQuNzYtLjA2IDEwLjc0LTIuMzZoLjI2YzAgMS41Ny0uMjYgMS44My0uMjYgNS4yNGgtLjI2Yy00LjgxLTEuMDMtMi4xNS0uOS0xMC4yMSAwbC0uMjYuMjZjLjI2IDIuMDkgMS41NyA5LjQzIDIuMDkgMTIuNTdsLjI2LjI2YzEuMTUuMzggMTQuMjEtLjY1IDE2LjI0LTQuNzFoLjI2Yy0uNTMgMi4zOC0xLjA1IDQuMjEtMS41OCA2LjA0em0xMC43NC00NC41MWMtNC40NSAyLjM2LTguMTIgMi44OC0xMSAyLjg4LS4yNS4wMi0xMS40MSAxLjA5LTE3LjU0LTkuOTUtNi43NC0xMC43OS0uOTgtMjUuMiA1LjUtMzEuNjkgOC44LTguMTIgMjMuMzUtMTAuMSAyOC41NC0xNy4wMiA4LjAzLTEwLjMzLTEzLjA0LTIyLjMxLTI5LjU5LTUuNzZsLTIuNjItMi44OCA1LjI0LTE2LjI0YzI1LjU5LTEuNTcgNDUuMi0zLjA0IDUwLjAyIDE2LjI0Ljc5IDMuMTQgMCA5LjQzLS4yNiAxMi4wNSAwIDIuNjItMS44MyAxOC44NS0yLjA5IDIzLjA0LS41MiA0LjE5LS43OSAxOC4zMy0uNzkgMjAuNjkuMjYgMi4zNi41MiA0LjE5IDEuNTcgNS41IDEuNTcgMS44MyA1Ljc2IDEuODMgNS43NiAxLjgzbC0uNzkgNC43MWMtMTEuODItMS4wNy0xMC4yOC0uNTktMjAuNDMtMS4wNS0zLjIyLTUuMTUtMi4yMy0zLjI4LTQuMTktNy44NiAwIC4wMS00LjE5IDMuOTQtNy4zMyA1LjUxem0zNy4xOCAyMS4yMWMtNi4zNS0xMC41OC0xOS44Mi03LjE2LTIxLjczIDUuNS0yLjYzIDE3LjA4IDE0LjMgMTkuNzkgMjAuNjkgMTAuMjFsLjI2LjI2Yy0uNTIgMS44My0xLjgzIDYuMDItMS44MyA2LjI4bC0uNTIuNTJjLTEwLjMgNi44Ny0yOC41LTIuNS0yNS42Ni0xOC41OSAxLjk0LTEwLjg3IDE0LjQ0LTE4LjkzIDI4LjgtOS45NWwuMjYuNTJjMCAxLjA2LS4yNyAzLjQxLS4yNyA1LjI1em01Ljc3LTg3Ljczdi02LjU1Yy42OSAwIDE5LjY1IDMuMjggMjcuNzYgNy4zM2wtMS41NyAxNy41NHMxMC4yMS05LjQzIDE1LjQ1LTEwLjc0YzUuMjQtMS41NyAxNC45MyA3LjMzIDE0LjkzIDcuMzNsLTExLjI2IDExLjI2Yy0xMi4wNy02LjM1LTE5LjU5LS4wOC0yMC42OS43OS01LjI5IDM4LjcyLTguNiA0Mi4xNyA0LjQ1IDQ2LjA5bC0uNTIgNC43MWMtMTcuNTUtNC4yOS0xOC41My00LjUtMzYuOTItNy4zM2wuNzktNC43MWM3LjI1IDAgNy40OC01LjMyIDcuNTktNi44MSAwIDAgNC45OC01My4xNiA0Ljk4LTU1LjI1LS4wMi0yLjg3LTQuOTktMy42Ni00Ljk5LTMuNjZ6bTEwLjk5IDExNC40NGMtOC4xMi0yLjA5LTE0LjE0LTExLTEwLjc0LTIwLjY5IDMuMTQtOS40MyAxMi4zMS0xMi4zMSAxOC44NS0xMC4yMSA5LjE3IDIuNjIgMTIuODMgMTEuNzggMTAuNzQgMTkuMzgtMi42MSA4LjktOS40MiAxMy44Ny0xOC44NSAxMS41MnptNDIuMTYgOS42OWMtMi4zNi0uNTItNy4wNy0yLjM2LTguNjQtMi44OHYtLjI2bDEuNTctMS44M2MuNTktOC4yNC41OS03LjI3LjI2LTcuNTktNC44Mi0xLjgxLTYuNjYtMi4zNi03LjA3LTIuMzYtMS4zMSAxLjgzLTIuODggNC40NS0zLjY3IDUuNWwtLjc5IDMuNHYuMjZjLTEuMzEtLjI2LTMuOTMtMS4zMS02LjAyLTEuNTd2LS4yNmwyLjYyLTEuODNjMy40LTQuNzEgOS45NS0xNC4xNCAxMy44OC0yMC4xNnYtMi4wOWwuNTItLjI2YzIuMDkuNzkgNS41IDIuMDkgNy41OSAyLjg4LjQ4LjQ4LjE4LTEuODctMS4wNSAyNS4xNC0uMjQgMS44MS4wMiAyLjYuOCAzLjkxem0tNC43MS04OS44MmMxMS4yNS0xOC4yNyAzMC43Ni0xNi4xOSAzNC4wNC0zLjRMNTM5LjcgMTk4YzIuMzQtNi4yNS0yLjgyLTkuOS00LjQ1LTExLjI2bDEuODMtMy42N2MxMi4yMiAxMC4zNyAxNi4zOCAxMy45NyAyMi41MiAyMC40My0yNS45MSA3My4wNy0zMC43NiA4MC44MS0yNC42MiA4NC4zMmwtMS44MyA0LjQ1Yy02LjM3LTMuMzUtOC45LTQuNDItMTcuODEtOC42NGwyLjA5LTYuODFjLS4yNi0uMjYtMy45MyAzLjkzLTkuNjkgMy42Ny0xOS4wNi0xLjMtMjIuODktMzEuNzUtOS42Ny01Mi45em0yOS4zMyA3OS4zNGMwLTUuNzEtNi4zNC03Ljg5LTcuODYtNS4yNC0xLjMxIDIuMDkgMS4wNSA0Ljk4IDIuODggOC4zOCAxLjU3IDIuNjIgMi42MiA2LjI4IDEuMDUgOS40My0yLjY0IDYuMzQtMTIuNCA1LjMxLTE1LjQ1LS43OSAwLS43LS4yNy4wOSAxLjgzLTQuNzFsLjc5LS4yNmMtLjU3IDUuNjYgNi4wNiA5LjYxIDguMzggNC45OCAxLjA1LTIuMDktLjUyLTUuNS0yLjA5LTguMzgtMS41Ny0yLjYyLTMuNjctNi4yOC0xLjgzLTkuNjkgMi43Mi01LjA2IDExLjI1LTQuNDcgMTQuNjYgMi4zNnYuNTJsLTIuMzYgMy40em0yMS4yMSAxMy4zNmMtMS45Ni0zLjI3LS45MS0yLjE0LTQuNDUtNC43MWgtLjI2Yy0yLjM2IDQuMTktNS43NiAxMC40Ny04LjY0IDE2LjI0LTEuMzEgMi4zNi0xLjA1IDMuNC0uNzkgMy45M2wtLjI2LjI2LTUuNzYtNC40NS4yNi0uMjYgMi4wOS0xLjMxYzMuMTQtNS43NiA2LjU1LTEyLjA1IDkuMTctMTcuMDJ2LS4yNmMtMi42NC0xLjk4LTEuMjItMS41MS02LjAyLTEuODN2LS4yNmwzLjE0LTMuNGguMjZjMy42NyAyLjM2IDkuOTUgNi44MSAxMi4zMSA4LjlsLjI2LjI2LTEuMzEgMy45MXptMjcuMjMtNDQuMjZsLTIuODgtMi44OGMuNzktMi4zNiAxLjgzLTQuOTggMi4wOS03LjU5Ljc1LTkuNzQtMTEuNTItMTEuODQtMTEuNTItNC45OCAwIDQuOTggNy44NiAxOS4zOCA3Ljg2IDI3Ljc2IDAgMTAuMjEtNS43NiAxNS43MS0xMy44OCAxNi41LTguMzguNzktMjAuMTYtMTAuNDctMjAuMTYtMTAuNDdsNC45OC0xNC40IDIuODggMi4wOWMtMi45NyAxNy44IDE3LjY4IDIwLjM3IDEzLjM1IDUuMjQtMS4wNi00LjAyLTE4Ljc1LTM0LjIgMi4wOS0zOC4yMyAxMy42Mi0yLjM2IDIzLjA0IDE2LjUgMjMuMDQgMTYuNWwtNy44NSAxMC40NnptMzUuNjItMTAuMjFjLTExLTMwLjM4LTYwLjQ5LTEyNy41My0xOTEuOTUtMTI5LjYyLTUzLjQyLTEuMDUtOTQuMjcgMTUuNDUtMTMyLjc2IDM3Ljk3bDg1LjYzLTkuMTctOTEuMzkgMjAuNjkgMjUuMTQgMTkuNjQtMy45My0xNi41YzcuNS0xLjcxIDM5LjE1LTguNDUgNjYuNzctOC45bC0yMi4yNiA4MC4zOWMxMy42MS0uNyAxOC45Ny04Ljk4IDE5LjY0LTIyLjc4bDQuOTgtMS4wNS4yNiAyNi43MWMtMjIuNDYgMy4yMS0zNy4zIDYuNjktNDkuNDkgOS45NWwxMy4wOS00My4yMS02MS41NC0zNi42NiAyLjM2IDguMTIgMTAuMjEgNC45OGM2LjI4IDE4LjU5IDE5LjM4IDU2LjU2IDIwLjQzIDU4LjY2IDEuOTUgNC4yOCAzLjE2IDUuNzggMTIuMDUgNC40NWwxLjA1IDQuOThjLTE2LjA4IDQuODYtMjMuNjYgNy42MS0zOS4wMiAxNC40bC0yLjM2LTQuNzFjNC40LTIuOTQgOC43My0zLjk0IDUuNS0xMi44My0yMy43LTYyLjUtMjEuNDgtNTguMTQtMjIuNzgtNTkuNDRsMi4zNi00LjQ1IDMzLjUyIDY3LjNjLTMuODQtMTEuODcgMS42OCAxLjY5LTMyLjk5LTc4LjgybC00MS45IDg4LjUxIDQuNzEtMTMuODgtMzUuODgtNDIuMTYgMjcuNzYgOTMuNDgtMTEuNzggOC4zOEM5NSAyMjguNTggMTAxLjA1IDIzMS44NyA5My4yMyAyMzEuNTJjLTUuNS0uMjYtMTMuNjIgNS41LTEzLjYyIDUuNUw3NC42MyAyMzFjMzAuNTYtMjMuNTMgMzEuNjItMjQuMzMgNTguNC00Mi42OGw0LjE5IDcuMDdzLTUuNzYgNC4xOS03Ljg2IDcuMDdjLTUuOSA5LjI4IDEuNjcgMTMuMjggNjEuOCA3NS42OGwtMTguODUtNTguOTIgMzkuOC0xMC4yMSAyNS42NiAzMC42NCA0LjQ1LTEyLjMxLTQuOTgtMjQuNjIgMTMuMDktMy40LjUyIDMuMTQgMy42Ny0xMC40Ny05NC4yNyAyOS4zMyAxMS4yNi00Ljk4LTEzLjYyLTQyLjQyIDE3LjI4LTkuMTcgMzAuMTEgMzYuMTQgMjguNTQtMTMuMDljLTEuNDEtNy40Ny0yLjQ3LTE0LjUtNC43MS0xOS42NGwxNy4yOCAxMy44OCA0LjcxLTIuMDktNTkuMTgtNDIuNjggMjMuMDggMTEuNWMxOC45OC02LjA3IDI1LjIzLTcuNDcgMzIuMjEtOS42OWwyLjYyIDExYy0xMi41NSAxMi41NSAxLjQzIDE2LjgyIDYuNTUgMTkuMzhsLTEzLjYyLTYxLjAxIDEyLjA1IDI4LjI4YzQuMTktMS4zMSA3LjMzLTIuMDkgNy4zMy0yLjA5bDIuNjIgOC42NHMtMy4xNCAxLjA1LTYuMjggMi4wOWw4LjkgMjAuOTUgMzMuNzgtNjUuNzMtMjAuNjkgNjEuMDFjNDIuNDItMjQuMDkgODEuNDQtMzYuNjYgMTMxLjk4LTM1Ljg4IDY3LjA0IDEuMDUgMTY3LjMzIDQwLjg1IDE5OS44IDEzOS44My43OCAyLjEtLjAxIDIuNjMtLjc5LjI3ek0yMDMuNDggMTUyLjQzczEuODMtLjUyIDQuMTktMS4zMWw5LjQzIDcuNTljLS40IDAtMy40NC0uMjUtMTEuMjYgMi4zNmwtMi4zNi04LjY0em0xNDMuNzYgMzguNWMtMS41Ny0uNi0yNi40Ni00LjgxLTMzLjI2IDIwLjY5bDIxLjczIDE3LjAyIDExLjUzLTM3Ljcxek0zMTguNDMgNjcuMDdjLTU4LjQgMC0xMDYuMDUgMTIuMDUtMTE0Ljk2IDE0LjR2Ljc5YzguMzggMi4wOSAxNC40IDQuMTkgMjEuMjEgMTEuNzhsMS41Ny4yNmM2LjU1LTEuODMgNDguOTctMTMuODggMTEwLjI0LTEzLjg4IDE4MC4xNiAwIDMwMS42NyAxMTYuNzkgMzAxLjY3IDIyMy4zN3Y5Ljk1YzAgMS4zMS43OSAyLjYyIDEuMDUuNTIuNTItMi4wOS43OS04LjY0Ljc5LTE5LjY0LjI2LTgzLjc5LTk2LjYzLTIyNy41NS0zMjEuNTctMjI3LjU1em0yMTEuMDYgMTY5LjY4YzEuMzEtNS43NiAwLTEyLjMxLTcuMzMtMTMuMDktOS42Mi0xLjEzLTE2LjE0IDIzLjc5LTE3LjAyIDMzLjUyLS43OSA1LjUtMS4zMSAxNC45MyA2LjAyIDE0LjkzIDQuNjgtLjAxIDkuNzItLjkxIDE4LjMzLTM1LjM2em0tNjEuNTMgNDIuOTVjLTIuNjItLjc5LTkuNDMtLjc5LTEyLjU3IDEwLjQ3LTEuODMgNi44MS41MiAxMy4zNSA2LjAyIDE0LjY2IDMuNjcgMS4wNSA4LjkuNTIgMTEuNzgtMTAuNzQgMi42Mi05Ljk0LTEuODMtMTMuNjEtNS4yMy0xNC4zOXpNNDkxIDMwMC42NWMxLjgzLjUyIDMuMTQgMS4wNSA1Ljc2IDEuODMgMC0xLjgzLjUyLTguMzguNzktMTIuMDUtMS4wNSAxLjMxLTUuNSA4LjEyLTYuNTUgOS45NXYuMjd6XCJdXG59O1xudmFyIGZhU3F1YXJlVmlhZGVvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS12aWFkZW8nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInZpYWRlby1zcXVhcmVcIl0sIFwiZjJhYVwiLCBcIk00NDggOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2ek0xMTguMyAzODEuMmMtNjgtNzMuNi0xOS44LTE5Ni4xIDgxLjItMTk2LjFjMTMuMyAwIDI2LjYgMi4xIDM5LjEgNi43Yy00LjMgOC40LTcuMyAxNy42LTguNCAyNy4xYy05LjctNC4xLTIwLjItNi0zMC43LTZjLTQ4LjggMC04NC42IDQxLjctODQuNiA4OC45YzAgNDMgMjguNSA3OC43IDY5LjUgODUuOWM2MS41LTI0IDcyLjktMTE3LjYgNzIuOS0xNzV2MGMwLTcuMyAwLTE0LjgtLjYtMjIuMWMtMTEuMi0zMi45LTI2LjYtNjQuNi00NC4yLTk0LjVjMjcuMSAxOC4zIDQxLjkgNjIuNSA0NC4yIDk0LjF2LjRjNy43IDIyLjUgMTEuOCA0Ni4yIDExLjggNzBjMCA1NC4xLTIxLjkgOTktNjguMyAxMjguMmwtMi40IC4yYzUwIDEgODYuMi0zOC42IDg2LjItODcuMmMwLTEyLjItMi4xLTI0LjMtNi45LTM1LjdjOS41LTEuOSAxOC41LTUuNiAyNi40LTEwLjVjMTUuMyAzNi42IDEyLjYgODcuMy0yMi44IDEyNS42Yy00Mi40IDQ2LjItMTIwIDQ2LjYtMTYyLjQgMHpNMjc0LjYgMjE3LjZjMjEuOS0xMiA0OS42LTMwLjcgNjIuMy01M2MxLjUtMyA0LjEtOC42IDQuNS0xMmMtMTIuNSAyNy45LTQ0LjIgNDkuOC03My45IDU2LjdjLTQuNy03LjMtNy41LTE1LjUtNy41LTI0LjNjMC0xMC4zIDUuMi0yNC4xIDEyLjktMzEuNmM4LjMtNy45IDE4LTEwLjkgMjcuOS0xNC4xYzE2LTUuMSAzMi41LTEwLjMgNDQuNS0zNS45YzMyLjUgNDYuMiAxMy4xIDEzMC4zLTM2LjMgMTMwLjNjLTEzLjMgMC0yNS4xLTcuMS0zNC40LTE2LjF6XCJdXG59O1xudmFyIGZhVmlhZGVvU3F1YXJlID0gZmFTcXVhcmVWaWFkZW87XG52YXIgZmFNZWV0dXAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWVldHVwJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMmUwXCIsIFwiTTk5IDQxNC4zYzEuMSA1LjctMi4zIDExLjEtOCAxMi4zLTUuNCAxLjEtMTAuOS0yLjMtMTItOC0xLjEtNS40IDIuMy0xMS4xIDcuNy0xMi4zIDUuNC0xLjIgMTEuMSAyLjMgMTIuMyA4em0xNDMuMSA3MS40Yy02LjMgNC42LTggMTMuNC0zLjcgMjAgNC42IDYuNiAxMy40IDguMyAyMCAzLjcgNi4zLTQuNiA4LTEzLjQgMy40LTIwLTQuMi02LjUtMTMuMS04LjMtMTkuNy0zLjd6bS04Ni00NjIuM2M2LjMtMS40IDEwLjMtNy43IDguOS0xNC0xLjEtNi42LTcuNC0xMC42LTEzLjctOS4xLTYuMyAxLjQtMTAuMyA3LjctOS4xIDE0IDEuNCA2LjYgNy42IDEwLjYgMTMuOSA5LjF6TTM0LjQgMjI2LjNjLTEwLTYuOS0yMy43LTQuMy0zMC42IDYtNi45IDEwLTQuMyAyNCA1LjcgMzAuOSAxMCA3LjEgMjMuNyA0LjYgMzAuNi01LjcgNi45LTEwLjQgNC4zLTI0LjEtNS43LTMxLjJ6bTI3Mi0xNzAuOWMxMC42LTYuMyAxMy43LTIwIDcuNy0zMC4zLTYuMy0xMC42LTE5LjctMTQtMzAtNy43cy0xMy43IDIwLTcuNCAzMC42YzYgMTAuMyAxOS40IDEzLjcgMjkuNyA3LjR6bS0xOTEuMSA1OGM3LjctNS40IDkuNC0xNiA0LjMtMjMuN3MtMTUuNy05LjQtMjMuMS00LjNjLTcuNyA1LjQtOS40IDE2LTQuMyAyMy43IDUuMSA3LjggMTUuNiA5LjUgMjMuMSA0LjN6bTM3Mi4zIDE1NmMtNy40IDEuNy0xMi4zIDkuMS0xMC42IDE2LjkgMS40IDcuNCA4LjkgMTIuMyAxNi4zIDEwLjYgNy40LTEuNCAxMi4zLTguOSAxMC42LTE2LjYtMS41LTcuNC04LjktMTIuMy0xNi4zLTEwLjl6bTM5LjctNTYuOGMtMS4xLTUuNy02LjYtOS4xLTEyLTgtNS43IDEuMS05LjEgNi45LTggMTIuNiAxLjEgNS40IDYuNiA5LjEgMTIuMyA4IDUuNC0xLjUgOS4xLTYuOSA3LjctMTIuNnpNNDQ3IDEzOC45Yy04LjYgNi0xMC42IDE3LjctNC45IDI2LjMgNS43IDguNiAxNy40IDEwLjYgMjYgNC45IDguMy02IDEwLjMtMTcuNyA0LjYtMjYuMy01LjctOC43LTE3LjQtMTAuOS0yNS43LTQuOXptLTYuMyAxMzkuNGMyNi4zIDQzLjEgMTUuMSAxMDAtMjYuMyAxMjkuMS0xNy40IDEyLjMtMzcuMSAxNy43LTU2LjkgMTcuMS0xMiA0Ny4xLTY5LjQgNjQuNi0xMDUuMSAzMi42LTEuMS45LTIuNiAxLjctMy43IDIuOS0zOS4xIDI3LjEtOTIuMyAxNy40LTExOS40LTIyLjMtOS43LTE0LjMtMTQuNi0zMC42LTE1LjEtNDYuOS02NS40LTEwLjktOTAtOTQtNDEuMS0xMzkuNy0yOC4zLTQ2LjkuNi0xMDcuNCA1My40LTExNC45QzE1MS42IDcwIDIzNC4xIDM4LjYgMjkwLjEgODJjNjcuNC0yMi4zIDEzNi4zIDI5LjQgMTMwLjkgMTAxLjEgNDEuMSAxMi42IDUyLjggNjYuOSAxOS43IDk1LjJ6bS03MCA3NC4zYy0zLjEtMjAuNi00MC45LTQuNi00My4xLTI3LjEtMy4xLTMyIDQzLjctMTAxLjEgNDAtMTI4LTMuNC0yNC0xOS40LTI5LjEtMzMuNC0yOS40LTEzLjQtLjMtMTYuOSAyLTIxLjQgNC42LTIuOSAxLjctNi42IDQuOS0xMS43LS4zLTYuMy02LTExLjEtMTEuNy0xOS40LTEyLjktMTIuMy0yLTE3LjcgMi0yNi42IDkuNy0zLjQgMi45LTEyIDEyLjktMjAgOS4xLTMuNC0xLjctMTUuNC03LjctMjQtMTEuNC0xNi4zLTcuMS00MCA0LjYtNDguNiAyMC0xMi45IDIyLjktMzggMTEzLjEtNDEuNyAxMjUuMS04LjYgMjYuNiAxMC45IDQ4LjYgMzYuOSA0Ny4xIDExLjEtLjYgMTguMy00LjYgMjUuNC0xNy40IDQtNy40IDQxLjctMTA3LjcgNDQuNi0xMTIuNiAyLTMuNCA4LjktOCAxNC42LTUuMSA1LjcgMy4xIDYuOSA5LjQgNiAxNS4xLTEuMSA5LjctMjggNzAuOS0yOC45IDc3LjctMy40IDIyLjkgMjYuOSAyNi42IDM4LjYgNCAzLjctNy4xIDQ1LjctOTIuNiA0OS40LTk4LjMgNC4zLTYuMyA3LjQtOC4zIDExLjctOCAzLjEgMCA4LjMuOSA3LjEgMTAuOS0xLjQgOS40LTM1LjEgNzIuMy0zOC45IDg3LjctNC42IDIwLjYgNi42IDQxLjQgMjQuOSA1MC42IDExLjQgNS43IDYyLjUgMTUuNyA1OC41LTExLjF6bTUuNyA5Mi4zYy0xMC4zIDcuNC0xMi45IDIyLTUuNyAzMi42IDcuMSAxMC42IDIxLjQgMTMuMSAzMiA2IDEwLjYtNy40IDEzLjEtMjIgNi0zMi42LTcuNC0xMC42LTIxLjctMTMuNS0zMi4zLTZ6XCJdXG59O1xudmFyIGZhQ2VudG9zID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NlbnRvcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjc4OVwiLCBcIk0yODkuNiA5Ny41bDMxLjYgMzEuNy03Ni4zIDc2LjVWOTcuNXptLTE2Mi40IDMxLjdsNzYuMyA3Ni41Vjk3LjVoLTQ0Ljd6bTQxLjUtNDEuNmg0NC43djEyNy45bDEwLjggMTAuOCAxMC44LTEwLjhWODcuNmg0NC43TDIyNC4yIDMyem0yNi4yIDE2OC4xbC0xMC44LTEwLjhINTUuNXYtNDQuOEwwIDI1NS43bDU1LjUgNTUuNnYtNDQuOGgxMjguNmwxMC44LTEwLjh6bTc5LjMtMjAuN2gxMDcuOXYtNDQuOGwtMzEuNi0zMS43em0xNzMuMyAyMC43TDM5MiAyMDAuMXY0NC44SDI2NC4zbC0xMC44IDEwLjggMTAuOCAxMC44SDM5MnY0NC44bDU1LjUtNTUuNnpNNjUuNCAxNzYuMmwzMi41LTMxLjcgOTAuMyA5MC41aDE1LjN2LTE1LjNsLTkwLjMtOTAuNSAzMS42LTMxLjdINjUuNHptMzE2LjctNzguN2gtNzguNWwzMS42IDMxLjctOTAuMyA5MC41VjIzNWgxNS4zbDkwLjMtOTAuNSAzMS42IDMxLjd6TTIwMy41IDQxMy45VjMwNS44bC03Ni4zIDc2LjUgMzEuNiAzMS43aDQ0Ljd6TTY1LjQgMjM1aDEwOC44bC03Ni4zLTc2LjUtMzIuNSAzMS43em0zMTYuNyAxMDAuMmwtMzEuNiAzMS43LTkwLjMtOTAuNWgtMTUuM3YxNS4zbDkwLjMgOTAuNS0zMS42IDMxLjdoNzguNXptMC01OC44SDI3NC4ybDc2LjMgNzYuNSAzMS42LTMxLjd6bS02MC45IDEwNS44bC03Ni4zLTc2LjV2MTA4LjFoNDQuN3pNOTcuOSAzNTIuOWw3Ni4zLTc2LjVINjUuNHY0NC44em0xODEuOCA3MC45SDIzNVYyOTUuOWwtMTAuOC0xMC44LTEwLjggMTAuOHYxMjcuOWgtNDQuN2w1NS41IDU1LjZ6bS0xNjYuNS00MS42bDkwLjMtOTAuNXYtMTUuM2gtMTUuM2wtOTAuMyA5MC41LTMyLjUtMzEuN3Y3OC43aDc5LjR6XCJdXG59O1xudmFyIGZhQWRuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FkbicsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjE3MFwiLCBcIk0yNDggMTY3LjVsNjQuOSA5OC44SDE4My4xbDY0LjktOTguOHpNNDk2IDI1NmMwIDEzNi45LTExMS4xIDI0OC0yNDggMjQ4UzAgMzkyLjkgMCAyNTYgMTExLjEgOCAyNDggOHMyNDggMTExLjEgMjQ4IDI0OHptLTk5LjggODIuN0wyNDggMTE1LjUgOTkuOCAzMzguN2gzMC40bDMzLjYtNTEuN2gxNjguNmwzMy42IDUxLjdoMzAuMnpcIl1cbn07XG52YXIgZmFDbG91ZHNtaXRoID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2Nsb3Vkc21pdGgnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzODRcIiwgXCJNNTEyIDIyNy42djU2LjlMMjg0LjQgNTEySDIyNy42TDAgMjg0LjRWMjI3LjZMMjI3LjYgMGg1Ni45TDUxMiAyMjcuNnptLTI1NiAxNjJhMTMzLjYgMTMzLjYgMCAxIDAgMC0yNjcuMSAxMzMuNiAxMzMuNiAwIDEgMCAwIDI2Ny4xelwiXVxufTtcbnZhciBmYU9wZW5zdXNlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ29wZW5zdXNlJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJlNjJiXCIsIFwiTTQ3MS4xIDEwMi43cy0uMyAxOC4zLS4zIDIwLjNjLTkuMS0zLTc0LjQtMjQuMS0xMzUuNy0yNi4zYy01MS45LTEuOC0xMjIuOC00LjMtMjIzIDU3LjNjLTE5LjQgMTIuNC03My45IDQ2LjEtOTkuNiAxMDkuN0M3IDI3Ny0uMSAzMDcgNyAzMzUuMWMzLjMgMTIuOCA4LjkgMjQuOSAxNi41IDM1LjdjMTcuNCAyNSA0Ni42IDQxLjYgNzguMSA0NC40YzQ0LjQgMy45IDc4LjEtMTYgOTAtNTMuM2M4LjItMjUuOCAwLTYzLjYtMzEuNS04Mi45Yy0yNS42LTE1LjctNTMuMy0xMi4xLTY5LjItMS42Yy0xMy45IDkuMi0yMS44IDIzLjUtMjEuNiAzOS4yYy4zIDI3LjggMjQuMyA0Mi42IDQxLjUgNDIuNmM1LjQgMCAxMC43LS45IDE1LjgtMi43YzYuNS0xLjggMTMuMy02LjUgMTMuMy0xNC45YzAtMTIuMS0xMS42LTE0LjgtMTYuOC0xMy45Yy0yLjkgLjUtNC41IDItMTEuOCAyLjRjLTItLjItMTItMy4xLTEyLTE0VjMxNmMuMi0xMi4zIDEzLjItMTggMjUuNS0xNi45YzMyLjMgMi44IDQ3LjcgNDAuNyAyOC41IDY1LjdDMTM1IDM4OC41IDc2LjcgMzg4IDUzLjYgMzQ0LjRjLTI2LTQ5LjIgMTIuNy0xMTEuMiA4Ny05OC40YzMzLjIgNS43IDgzLjYgMzUuNSAxMDIuNCAxMDQuM2g0NS45Yy01LjctMTcuNi04LjktNjguMyA0Mi43LTY4LjNjNTYuNyAwIDYzLjkgMzkuOSA3OS44IDY4LjNINDYwYy0xMi44LTE4LjMtMjEuNy0zOC43LTE4LjktNTUuOGM1LjYtMzMuOCAzOS43LTE4LjQgODIuNC0xNy40YzY2LjUgLjQgMTAyLjEtMjcgMTAzLjEtMjhjMy43LTMuMSA2LjUtMTUuOCA3LTE3LjdjMS4zLTUuMS0zLjItMi40LTMuMi0yLjRjLTguNyA1LjItMzAuNSAxNS4yLTUwLjkgMTUuNmMtMjUuMyAuNS03Ni4yLTI1LjQtODEuNi0yOC4yYy0uMy0uNCAuMSAxLjItMTEtMjUuNWM4OC40IDU4LjMgMTE4LjMgNDAuNSAxNDUuMiAyMS43Yy44LS42IDQuMy0yLjkgMy42LTUuN2MtMTMuOC00OC4xLTIyLjQtNjIuNy0zNC41LTY5LjZjLTM3LTIxLjYtMTI1LTM0LjctMTI5LjItMzUuM2MuMS0uMS0uOS0uMy0uOSAuN2wwIDB6bTEzNS42IDc1LjRhMzcuNiAzNy42IDAgMSAxIC03NS4yLTIuNiAzNy42IDM3LjYgMCAxIDEgNzUuMiAyLjZ6bS0zNi42LTI3LjlhMjYuMyAyNi4zIDAgMSAwIC0xLjcgNTIuNSAyNi4zIDI2LjMgMCAxIDAgMS43LTUyLjV6bTQuMyAyOC44Yy0xNS40IDAtMTUuNC0xNS42IDAtMTUuNnMxNS40IDE1LjYgMCAxNS42djB6XCJdXG59O1xudmFyIGZhUGllZFBpcGVyQWx0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BpZWQtcGlwZXItYWx0JyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMWE4XCIsIFwiTTI0NCAyNDZjLTMuMi0yLTYuMy0yLjktMTAuMS0yLjktNi42IDAtMTIuNiAzLjItMTkuMyAzLjdsMS43IDQuOXptMTM1LjkgMTk3LjljLTE5IDAtNjQuMSA5LjUtNzkuOSAxOS44bDYuOSA0NS4xYzM1LjcgNi4xIDcwLjEgMy42IDEwNi05LjgtNC44LTEwLTIzLjUtNTUuMS0zMy01NS4xek0zNDAuOCAxNzdjNi42IDIuOCAxMS41IDkuMiAyMi43IDIyLjEgMi0xLjQgNy41LTUuMiA3LjUtOC42IDAtNC45LTExLjgtMTMuMi0xMy4yLTIzIDExLjItNS43IDI1LjItNiAzNy42LTguOSA2OC4xLTE2LjQgMTE2LjMtNTIuOSAxNDYuOC0xMTYuN0M1NDguMyAyOS4zIDU1NCAxNi4xIDU1NC42IDJsLTIgMi42Yy0yOC40IDUwLTMzIDYzLjItODEuMyAxMDAtMzEuOSAyNC40LTY5LjIgNDAuMi0xMDYuNiA1NC42bC02LjMtLjN2LTIxLjhjLTE5LjYgMS42LTE5LjctMTQuNi0zMS42LTIzLTE4LjcgMjAuNi0zMS42IDQwLjgtNTguOSA1MS4xLTEyLjcgNC44LTE5LjYgMTAtMjUuOSAyMS44IDM0LjktMTYuNCA5MS4yLTEzLjUgOTguOC0xMHpNNTU1LjUgMGwtLjYgMS4xLS4zLjkuNi0uNnptLTU5LjIgMzgyLjFjLTMzLjktNTYuOS03NS4zLTExOC40LTE1MC0xMTUuNWwtLjMtNmMtMS4xLTEzLjUgMzIuOCAzLjIgMzUuMS0zMWwtMTQuNCA3LjJjLTE5LjgtNDUuNy04LjYtNTQuMy02NS41LTU0LjMtMTQuNyAwLTI2LjcgMS43LTQxLjQgNC42IDIuOSAxOC42IDIuMiAzNi43LTEwLjkgNTAuM2wxOS41IDUuNWMtMS43IDMuMi0yLjkgNi4zLTIuOSA5LjggMCAyMSA0Mi44IDIuOSA0Mi44IDMzLjYgMCAxOC40LTM2LjggNjAuMS01NC45IDYwLjEtOCAwLTUzLjctNTAtNTMuNC02MC4xbC4zLTQuNiA1Mi4zLTExLjVjMTMtMi42IDEyLjMtMjIuNy0yLjktMjIuNy0zLjcgMC00My4xIDkuMi00OS40IDEwLjYtMi01LjItNy41LTE0LjEtMTMuOC0xNC4xLTMuMiAwLTYuMyAzLjItOS41IDQtOS4yIDIuNi0zMSAyLjktMjEuNSAyMC4xTDE1LjkgMjk4LjVjLTUuNSAxLjEtOC45IDYuMy04LjkgMTEuOCAwIDYgNS41IDEwLjkgMTEuNSAxMC45IDggMCAxMzEuMy0yOC40IDE0Ny40LTMyLjIgMi42IDMuMiA0LjYgNi4zIDcuOCA4LjYgMjAuMSAxNC40IDU5LjggODUuOSA3Ni40IDg1LjkgMjQuMSAwIDU4LTIyLjQgNzEuMy00MS45IDMuMi00LjMgNi45LTcuNSAxMi40LTYuOS42IDEzLjgtMzEuNiAzNC4yLTMzIDQzLjctMS40IDEwLjItMSAzNS4yLS4zIDQxLjEgMjYuNyA4LjEgNTItMy42IDc3LjktMi45IDQuMy0yMSAxMC42LTQxLjkgOS44LTYzLjVsLS4zLTkuNWMtMS40LTM0LjItMTAuOS0zOC41LTM0LjgtNTguNi0xLjEtMS4xLTIuNi0yLjYtMy43LTQgMi4yLTEuNCAxLjEtMSA0LjYtMS43IDg4LjUgMCA1Ni4zIDE4My42IDExMS41IDIyOS45IDMzLjEtMTUgNzIuNS0yNy45IDEwMy41LTQ3LjItMjktMjUuNi01Mi42LTQ1LjctNzIuNy03OS45em0tMTk2LjIgNDYuMXYyNy4ybDExLjgtMy40LTIuOS0yMy44em0tNjguNy0xNTAuNGwyNC4xIDYxLjIgMjEtMTMuOC0zMS4zLTUwLjl6bTg0LjQgMTU0LjlsMiAxMi40YzktMS41IDU4LjQtNi42IDU4LjQtMTQuMSAwLTEuNC0uNi0zLjItLjktNC42LTI2LjggMC0zNi45IDMuOC01OS41IDYuM3pcIl1cbn07XG52YXIgZmFTcXVhcmVEcmliYmJsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtZHJpYmJibGUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImRyaWJiYmxlLXNxdWFyZVwiXSwgXCJmMzk3XCIsIFwiTTE2NS45IDEzMi41Yy0zOC4zIDE4LTY2LjggNTMuMy03NS43IDk1LjdjNi4xIC4xIDYyLjQgLjMgMTI2LjQtMTYuN2MtMjIuNy00MC4yLTQ3LjEtNzQuMS01MC43LTc5em0yNi4xLTkuMWMzLjggNS4xIDI4LjYgMzguOSA1MSA4MGM0OC42LTE4LjMgNjkuMS00NS45IDcxLjYtNDkuNEMyODEgMTI0LjIgMjM1LjMgMTEyLjkgMTkyIDEyMy40ek0yNzcuNCAzODJjLTItMTItMTAtNTMuOC0yOS4yLTEwMy42Yy01NS4xIDE4LjgtOTMuOCA1Ni40LTEwOC4xIDg1LjZjNDAuNSAzMS42IDkzLjMgMzYuNyAxMzcuMyAxOHpNMjI3LjggMjMyLjZDMTU5LjYgMjUzIDkzLjQgMjUyLjIgODcuNCAyNTJjMCAuNyAwIDEuNCAwIDIuMXMwIDEuNCAwIDIuMWMwIDM1LjEgMTMuMyA2Ny4xIDM1LjEgOTEuNGMyMi4yLTM3LjkgNjcuMS03Ny45IDExNi41LTkxLjhjLTMuNC03LjgtNy4yLTE1LjUtMTEuMS0yMy4yem03Mi41IDEzNi45YzMwLjctMjAuNyA1Mi41LTUzLjYgNTguNi05MS42Yy00LjYtMS41LTQyLjMtMTIuNy04NS4xLTUuOGMxNy45IDQ5LjEgMjUuMSA4OS4xIDI2LjUgOTcuNHptLTM0LjgtMTE5YzQ1LjUtNS43IDkwLjcgMy40IDk1LjIgNC40Yy0uMy0zMi4zLTExLjgtNjEuOS0zMC45LTg1LjFjLTIuOSAzLjktMjUuOCAzMy4yLTc2LjMgNTMuOWM0LjggOS44IDguMyAxNy44IDEyIDI2Ljh6TTM4NCAzMkg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjR6TTIyNCA0MTZhMTYwIDE2MCAwIDEgMSAwLTMyMCAxNjAgMTYwIDAgMSAxIDAgMzIwelwiXVxufTtcbnZhciBmYURyaWJiYmxlU3F1YXJlID0gZmFTcXVhcmVEcmliYmJsZTtcbnZhciBmYUNvZGllcGllID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NvZGllcGllJyxcbiAgaWNvbjogWzQ3MiwgNTEyLCBbXSwgXCJmMjg0XCIsIFwiTTQyMi41IDIwMi45YzMwLjcgMCAzMy41IDUzLjEtLjMgNTMuMWgtMTAuOHY0NC4zaC0yNi42di05Ny40aDM3Ljd6TTQ3MiAzNTIuNkM0MjkuOSA0NDQuNSAzNTAuNCA1MDQgMjQ4IDUwNCAxMTEgNTA0IDAgMzkzIDAgMjU2UzExMSA4IDI0OCA4Yzk3LjQgMCAxNzIuOCA1My43IDIxOC4yIDEzOC40bC0xODYgMTA4LjhMNDcyIDM1Mi42em0tMzguNSAxMi41bC02MC4zLTMwLjdjLTI3LjEgNDQuMy03MC40IDcxLjQtMTIyLjQgNzEuNC04Mi41IDAtMTQ5LjItNjYuNy0xNDkuMi0xNDguOSAwLTgyLjUgNjYuNy0xNDkuMiAxNDkuMi0xNDkuMiA0OC40IDAgODguOSAyMy41IDExNi45IDYzLjRsNTkuNS0zNC42Yy00MC43LTYyLjYtMTA0LjctMTAwLTE3OS4yLTEwMC0xMjEuMiAwLTIxOS41IDk4LjMtMjE5LjUgMjE5LjVTMTI2LjggNDc1LjUgMjQ4IDQ3NS41Yzc4LjYgMCAxNDYuNS00Mi4xIDE4NS41LTExMC40elwiXVxufTtcbnZhciBmYU5vZGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbm9kZScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjQxOVwiLCBcIk0zMTYuMyA0NTJjLTIuMSAwLTQuMi0uNi02LjEtMS42TDI5MSA0MzljLTIuOS0xLjYtMS41LTIuMi0uNS0yLjUgMy44LTEuMyA0LjYtMS42IDguNy00IC40LS4yIDEtLjEgMS40LjFsMTQuOCA4LjhjLjUuMyAxLjMuMyAxLjggMEwzNzUgNDA4Yy41LS4zLjktLjkuOS0xLjZ2LTY2LjdjMC0uNy0uMy0xLjMtLjktMS42bC01Ny44LTMzLjNjLS41LS4zLTEuMi0uMy0xLjggMGwtNTcuOCAzMy4zYy0uNi4zLS45IDEtLjkgMS42djY2LjdjMCAuNi40IDEuMi45IDEuNWwxNS44IDkuMWM4LjYgNC4zIDEzLjktLjggMTMuOS01Ljh2LTY1LjljMC0uOS43LTEuNyAxLjctMS43aDcuM2MuOSAwIDEuNy43IDEuNyAxLjd2NjUuOWMwIDExLjUtNi4yIDE4LTE3LjEgMTgtMy4zIDAtNiAwLTEzLjMtMy42bC0xNS4yLTguN2MtMy43LTIuMi02LjEtNi4yLTYuMS0xMC41di02Ni43YzAtNC4zIDIuMy04LjQgNi4xLTEwLjVsNTcuOC0zMy40YzMuNy0yLjEgOC41LTIuMSAxMi4xIDBsNTcuOCAzMy40YzMuNyAyLjIgNi4xIDYuMiA2LjEgMTAuNXY2Ni43YzAgNC4zLTIuMyA4LjQtNi4xIDEwLjVsLTU3LjggMzMuNGMtMS43IDEuMS0zLjggMS43LTYgMS43em00Ni43LTY1LjhjMC0xMi41LTguNC0xNS44LTI2LjItMTguMi0xOC0yLjQtMTkuOC0zLjYtMTkuOC03LjggMC0zLjUgMS41LTguMSAxNC44LTguMSAxMS45IDAgMTYuMyAyLjYgMTguMSAxMC42LjIuOC44IDEuMyAxLjYgMS4zaDcuNWMuNSAwIC45LS4yIDEuMi0uNS4zLS40LjUtLjguNC0xLjMtMS4yLTEzLjgtMTAuMy0yMC4yLTI4LjgtMjAuMi0xNi41IDAtMjYuMyA3LTI2LjMgMTguNiAwIDEyLjcgOS44IDE2LjEgMjUuNiAxNy43IDE4LjkgMS45IDIwLjQgNC42IDIwLjQgOC4zIDAgNi41LTUuMiA5LjItMTcuNCA5LjItMTUuMyAwLTE4LjctMy44LTE5LjgtMTEuNC0uMS0uOC0uOC0xLjQtMS43LTEuNGgtNy41Yy0uOSAwLTEuNy43LTEuNyAxLjcgMCA5LjcgNS4zIDIxLjMgMzAuNiAyMS4zIDE4LjUgMCAyOS03LjIgMjktMTkuOHptNTQuNS01MC4xYzAgNi4xLTUgMTEuMS0xMS4xIDExLjFzLTExLjEtNS0xMS4xLTExLjFjMC02LjMgNS4yLTExLjEgMTEuMS0xMS4xIDYtLjEgMTEuMSA0LjggMTEuMSAxMS4xem0tMS44IDBjMC01LjItNC4yLTkuMy05LjQtOS4zLTUuMSAwLTkuMyA0LjEtOS4zIDkuMyAwIDUuMiA0LjIgOS40IDkuMyA5LjQgNS4yLS4xIDkuNC00LjMgOS40LTkuNHptLTQuNSA2LjJoLTIuNmMtLjEtLjYtLjUtMy44LS41LTMuOS0uMi0uNy0uNC0xLjEtMS4zLTEuMWgtMi4ydjVoLTIuNHYtMTIuNWg0LjNjMS41IDAgNC40IDAgNC40IDMuMyAwIDIuMy0xLjUgMi44LTIuNCAzLjEgMS43LjEgMS44IDEuMiAyLjEgMi44LjEgMSAuMyAyLjcuNiAzLjN6bS0yLjgtOC44YzAtMS43LTEuMi0xLjctMS44LTEuN2gtMnYzLjVoMS45YzEuNiAwIDEuOS0xLjEgMS45LTEuOHpNMTM3LjMgMTkxYzAtMi43LTEuNC01LjEtMy43LTYuNGwtNjEuMy0zNS4zYy0xLS42LTIuMi0uOS0zLjQtMWgtLjZjLTEuMiAwLTIuMy40LTMuNCAxTDMuNyAxODQuNkMxLjQgMTg1LjkgMCAxODguNCAwIDE5MWwuMSA5NWMwIDEuMy43IDIuNSAxLjggMy4yIDEuMS43IDIuNS43IDMuNyAwTDQyIDI2OC4zYzIuMy0xLjQgMy43LTMuOCAzLjctNi40di00NC40YzAtMi42IDEuNC01LjEgMy43LTYuNGwxNS41LTguOWMxLjItLjcgMi40LTEgMy43LTEgMS4zIDAgMi42LjMgMy43IDFsMTUuNSA4LjljMi4zIDEuMyAzLjcgMy44IDMuNyA2LjR2NDQuNGMwIDIuNiAxLjQgNS4xIDMuNyA2LjRsMzYuNCAyMC45YzEuMS43IDIuNi43IDMuNyAwIDEuMS0uNiAxLjgtMS45IDEuOC0zLjJsLjItOTV6TTQ3Mi41IDg3LjN2MTc2LjRjMCAyLjYtMS40IDUuMS0zLjcgNi40bC02MS4zIDM1LjRjLTIuMyAxLjMtNS4xIDEuMy03LjQgMGwtNjEuMy0zNS40Yy0yLjMtMS4zLTMuNy0zLjgtMy43LTYuNHYtNzAuOGMwLTIuNiAxLjQtNS4xIDMuNy02LjRsNjEuMy0zNS40YzIuMy0xLjMgNS4xLTEuMyA3LjQgMGwxNS4zIDguOGMxLjcgMSAzLjktLjMgMy45LTIuMnYtOTRjMC0yLjggMy00LjYgNS41LTMuMmwzNi41IDIwLjRjMi4zIDEuMiAzLjggMy43IDMuOCA2LjR6bS00NiAxMjguOWMwLS43LS40LTEuMy0uOS0xLjZsLTIxLTEyLjJjLS42LS4zLTEuMy0uMy0xLjkgMGwtMjEgMTIuMmMtLjYuMy0uOS45LS45IDEuNnYyNC4zYzAgLjcuNCAxLjMuOSAxLjZsMjEgMTIuMWMuNi4zIDEuMy4zIDEuOCAwbDIxLTEyLjFjLjYtLjMuOS0uOS45LTEuNnYtMjQuM3ptMjA5LjgtLjdjMi4zLTEuMyAzLjctMy44IDMuNy02LjRWMTkyYzAtMi42LTEuNC01LjEtMy43LTYuNGwtNjAuOS0zNS40Yy0yLjMtMS4zLTUuMS0xLjMtNy40IDBsLTYxLjMgMzUuNGMtMi4zIDEuMy0zLjcgMy44LTMuNyA2LjR2NzAuOGMwIDIuNyAxLjQgNS4xIDMuNyA2LjRsNjAuOSAzNC43YzIuMiAxLjMgNSAxLjMgNy4zIDBsMzYuOC0yMC41YzIuNS0xLjQgMi41LTUgMC02LjRMNTUwIDI0MS42Yy0xLjItLjctMS45LTEuOS0xLjktMy4ydi0yMi4yYzAtMS4zLjctMi41IDEuOS0zLjJsMTkuMi0xMS4xYzEuMS0uNyAyLjYtLjcgMy43IDBsMTkuMiAxMS4xYzEuMS43IDEuOSAxLjkgMS45IDMuMnYxNy40YzAgMi44IDMuMSA0LjYgNS42IDMuMmwzNi43LTIxLjN6TTU1OSAyMTljLS40LjMtLjcuNy0uNyAxLjJ2MTMuNmMwIC41LjMgMSAuNyAxLjJsMTEuOCA2LjhjLjQuMyAxIC4zIDEuNCAwTDU4NCAyMzVjLjQtLjMuNy0uNy43LTEuMnYtMTMuNmMwLS41LS4zLTEtLjctMS4ybC0xMS44LTYuOGMtLjQtLjMtMS0uMy0xLjQgMEw1NTkgMjE5em0tMjU0LjIgNDMuNXYtNzAuNGMwLTIuNi0xLjYtNS4xLTMuOS02LjRsLTYxLjEtMzUuMmMtMi4xLTEuMi01LTEuNC03LjQgMGwtNjEuMSAzNS4yYy0yLjMgMS4zLTMuOSAzLjctMy45IDYuNHY3MC40YzAgMi44IDEuOSA1LjIgNCA2LjRsNjEuMiAzNS4yYzIuNCAxLjQgNS4yIDEuMyA3LjQgMGw2MS0zNS4yYzEuOC0xIDMuMS0yLjcgMy42LTQuNy4xLS41LjItMS4xLjItMS43em0tNzQuMy0xMjQuOWwtLjguNWgxLjFsLS4zLS41em03Ni4yIDEzMC4ybC0uNC0uN3YuOWwuNC0uMnpcIl1cbn07XG52YXIgZmFNaXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWl4JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2NiXCIsIFwiTTAgNjR2MzQ4LjljMCA1Ni4yIDg4IDU4LjEgODggMFYxNzQuM2M3LjktNTIuOSA4OC01MC40IDg4IDYuNXYxNzUuM2MwIDU3LjkgOTYgNTggOTYgMFYyNDBjNS4zLTU0LjcgODgtNTIuNSA4OCA0LjN2MjMuOGMwIDU5LjkgODggNTYuNiA4OCAwVjY0SDB6XCJdXG59O1xudmFyIGZhU3RlYW0gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3RlYW0nLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYxYjZcIiwgXCJNNDk2IDI1NmMwIDEzNy0xMTEuMiAyNDgtMjQ4LjQgMjQ4LTExMy44IDAtMjA5LjYtNzYuMy0yMzktMTgwLjRsOTUuMiAzOS4zYzYuNCAzMi4xIDM0LjkgNTYuNCA2OC45IDU2LjQgMzkuMiAwIDcxLjktMzIuNCA3MC4yLTczLjVsODQuNS02MC4yYzUyLjEgMS4zIDk1LjgtNDAuOSA5NS44LTkzLjUgMC01MS42LTQyLTkzLjUtOTMuNy05My41cy05My43IDQyLTkzLjcgOTMuNXYxLjJMMTc2LjYgMjc5Yy0xNS41LS45LTMwLjcgMy40LTQzLjUgMTIuMUwwIDIzNi4xQzEwLjIgMTA4LjQgMTE3LjEgOCAyNDcuNiA4IDM4NC44IDggNDk2IDExOSA0OTYgMjU2ek0xNTUuNyAzODQuM2wtMzAuNS0xMi42YTUyLjc5IDUyLjc5IDAgMCAwIDI3LjIgMjUuOGMyNi45IDExLjIgNTcuOC0xLjYgNjktMjguNCA1LjQtMTMgNS41LTI3LjMuMS00MC4zLTUuNC0xMy0xNS41LTIzLjItMjguNS0yOC42LTEyLjktNS40LTI2LjctNS4yLTM4LjktLjZsMzEuNSAxM2MxOS44IDguMiAyOS4yIDMwLjkgMjAuOSA1MC43LTguMyAxOS45LTMxIDI5LjItNTAuOCAyMXptMTczLjgtMTI5LjljLTM0LjQgMC02Mi40LTI4LTYyLjQtNjIuM3MyOC02Mi4zIDYyLjQtNjIuMyA2Mi40IDI4IDYyLjQgNjIuMy0yNy45IDYyLjMtNjIuNCA2Mi4zem0uMS0xNS42YzI1LjkgMCA0Ni45LTIxIDQ2LjktNDYuOCAwLTI1LjktMjEtNDYuOC00Ni45LTQ2LjhzLTQ2LjkgMjEtNDYuOSA0Ni44Yy4xIDI1LjggMjEuMSA0Ni44IDQ2LjkgNDYuOHpcIl1cbn07XG52YXIgZmFDY0FwcGxlUGF5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NjLWFwcGxlLXBheScsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjQxNlwiLCBcIk0zMDIuMiAyMTguNGMwIDE3LjItMTAuNSAyNy4xLTI5IDI3LjFoLTI0LjN2LTU0LjJoMjQuNGMxOC40IDAgMjguOSA5LjggMjguOSAyNy4xem00Ny41IDYyLjZjMCA4LjMgNy4yIDEzLjcgMTguNSAxMy43IDE0LjQgMCAyNS4yLTkuMSAyNS4yLTIxLjl2LTcuN2wtMjMuNSAxLjVjLTEzLjMuOS0yMC4yIDUuOC0yMC4yIDE0LjR6TTU3NiA3OXYzNTJjMCAyNi41LTIxLjUgNDgtNDggNDhINDhjLTI2LjUgMC00OC0yMS41LTQ4LTQ4Vjc5YzAtMjYuNSAyMS41LTQ4IDQ4LTQ4aDQ4MGMyNi41IDAgNDggMjEuNSA0OCA0OHpNMTI3LjggMTk3LjJjOC40LjcgMTYuOC00LjIgMjIuMS0xMC40IDUuMi02LjQgOC42LTE1IDcuNy0yMy43LTcuNC4zLTE2LjYgNC45LTIxLjkgMTEuMy00LjggNS41LTguOSAxNC40LTcuOSAyMi44em02MC42IDc0LjVjLS4yLS4yLTE5LjYtNy42LTE5LjgtMzAtLjItMTguNyAxNS4zLTI3LjcgMTYtMjguMi04LjgtMTMtMjIuNC0xNC40LTI3LjEtMTQuNy0xMi4yLS43LTIyLjYgNi45LTI4LjQgNi45LTUuOSAwLTE0LjctNi42LTI0LjMtNi40LTEyLjUuMi0yNC4yIDcuMy0zMC41IDE4LjYtMTMuMSAyMi42LTMuNCA1NiA5LjMgNzQuNCA2LjIgOS4xIDEzLjcgMTkuMSAyMy41IDE4LjcgOS4zLS40IDEzLTYgMjQuMi02IDExLjMgMCAxNC41IDYgMjQuMyA1LjkgMTAuMi0uMiAxNi41LTkuMSAyMi44LTE4LjIgNi45LTEwLjQgOS44LTIwLjQgMTAtMjF6bTEzNS40LTUzLjRjMC0yNi42LTE4LjUtNDQuOC00NC45LTQ0LjhoLTUxLjJ2MTM2LjRoMjEuMnYtNDYuNmgyOS4zYzI2LjggMCA0NS42LTE4LjQgNDUuNi00NXptOTAgMjMuN2MwLTE5LjctMTUuOC0zMi40LTQwLTMyLjQtMjIuNSAwLTM5LjEgMTIuOS0zOS43IDMwLjVoMTkuMWMxLjYtOC40IDkuNC0xMy45IDIwLTEzLjkgMTMgMCAyMC4yIDYgMjAuMiAxNy4ydjcuNWwtMjYuNCAxLjZjLTI0LjYgMS41LTM3LjkgMTEuNi0zNy45IDI5LjEgMCAxNy43IDEzLjcgMjkuNCAzMy40IDI5LjQgMTMuMyAwIDI1LjYtNi43IDMxLjItMTcuNGguNFYzMTBoMTkuNnYtNjh6TTUxNiAyMTAuOWgtMjEuNWwtMjQuOSA4MC42aC0uNGwtMjQuOS04MC42SDQyMmwzNS45IDk5LjMtMS45IDZjLTMuMiAxMC4yLTguNSAxNC4yLTE3LjkgMTQuMi0xLjcgMC00LjktLjItNi4yLS4zdjE2LjRjMS4yLjQgNi41LjUgOC4xLjUgMjAuNyAwIDMwLjQtNy45IDM4LjktMzEuOEw1MTYgMjEwLjl6XCJdXG59O1xudmFyIGZhU2NyaWJkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NjcmliZCcsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjI4YVwiLCBcIk00Mi4zIDI1Mi43Yy0xNi4xLTE5LTI0LjctNDUuOS0yNC44LTc5LjkgMC0xMDAuNCA3NS4yLTE1My4xIDE2Ny4yLTE1My4xIDk4LjYtMS42IDE1Ni44IDQ5IDE4NC4zIDcwLjZsLTUwLjUgNzIuMS0zNy4zLTI0LjYgMjYuOS0zOC42Yy0zNi41LTI0LTc5LjQtMzYuNS0xMjMtMzUuOC01MC43LS44LTExMS43IDI3LjItMTExLjcgNzYuMiAwIDE4LjcgMTEuMiAyMC43IDI4LjYgMTUuNiAyMy4zLTUuMyA0MS45LjYgNTUuOCAxNCAyNi40IDI0LjMgMjMuMiA2Ny42LS43IDkxLjktMjkuMiAyOS41LTg1LjIgMjcuMy0xMTQuOC04LjR6bTMxNy43IDUuOWMtMTUuNS0xOC44LTM4LjktMjkuNC02My4yLTI4LjYtMzguMS0yLTcxLjEgMjgtNzAuNSA2Ny4yLS43IDE2LjggNiAzMyAxOC40IDQ0LjMgMTQuMSAxMy45IDMzIDE5LjcgNTYuMyAxNC40IDE3LjQtNS4xIDI4LjYtMy4xIDI4LjYgMTUuNiAwIDQuMy0uNSA4LjUtMS40IDEyLjctMTYuNyA0MC45LTU5LjUgNjQuNC0xMjEuNCA2NC40LTUxLjkuMi0xMDIuNC0xNi40LTE0NC4xLTQ3LjNsMzMuNy0zOS40LTM1LjYtMjcuNEwwIDQwNi4zbDE1LjQgMTMuOGM1Mi41IDQ2LjggMTIwLjQgNzIuNSAxOTAuNyA3Mi4yIDUxLjQgMCA5NC40LTEwLjUgMTMzLjYtNDQuMSA1Ny4xLTUxLjQgNTQuMi0xNDkuMiAyMC4zLTE4OS42elwiXVxufTtcbnZhciBmYURlYmlhbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkZWJpYW4nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU2MGJcIiwgXCJNMzgwLjIgMjQ1LjZjMy03LjYgNS41LTE0IDUuMi0yNC40bC00LjMgOWM0LjQtMTMuMiA0LTI3LjEgMy42LTQwLjRjLS4yLTYtLjMtMTEuOCAwLTE3LjRsLTEuOC0uNWMtMS41LTQ1LjItNDAuNi05My4xLTc1LjMtMTA5LjRjLTMwLTEzLjgtNzYuMS0xNi4yLTk3LjMtNS44YzEuMy0xLjEgNC4yLTIgNi44LTIuN2wuMy0uMWMzLjMtMSA2LTEuNyA0LTIuOWMtMTkuMiAxLjktMjQuOSA1LjUtMzEuMSA5LjRsLS4xIDBjLTQuNiAyLjktOS41IDYtMjAuMyA4LjdjLTMuNSAzLjQgMS43IDIgNS44IC45bDAgMGM0LjEtMS4xIDcuMi0xLjktLjEgMi40Yy0zLjUgMS02LjYgMS4zLTkuNiAxLjZsLS4xIDBjLTguMyAuOC0xNS44IDEuNi0zMC43IDE3Yy44IDEuMyAzLjQtLjIgNS4zLTEuM2wuMS0uMWMyLjMtMS40IDMuNC0yLTEuNyA0LjRjLTE5LjEtMi40LTYwLjMgNDMuNy02OS4xIDU5bDQuNiAuOGMtMy4yIDgtNi44IDE0LjgtMTAgMjAuOGMtNC4zIDguMS03LjkgMTQuOS04LjcgMjEuM2MtLjMgNS4xLTEgMTEtMS43IDE3LjNsMCAwYy0uMSAxLS4yIDItLjMgM2wtLjEgLjZjLTMgMjcuMy02LjcgNjAuOCAzLjkgNzNsLTEuMyAxM2MuNiAxLjIgMS4xIDIuMyAxLjYgMy41Yy4yIC40IC40IC44IC41IDEuMWwwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDBjMSAyLjEgMiA0LjIgMy4zIDYuMmwtMyAuMmM3IDIyLjEgMTAuOCAyMi41IDE1LjEgMjIuOWwwIDBjNC40IC40IDkuMyAuOSAxOC43IDI0LjJjLTIuNy0uOS01LjUtMS45LTkuNC03LjJjLS41IDQuMSA1LjggMTYuMyAxMy4xIDI1LjhsLTMuMSAzLjZjMi4xIDMuNyA0LjggNi4yIDcuNiA4LjhsMCAwIDAgMGMxIC45IDIuMSAxLjkgMy4xIDIuOWMtMTEuOS02LjUgMy4yIDEzLjcgMTEuOSAyNS4yYy44IDEuMSAxLjUgMiAyLjIgMi45bDAgMCAwIDAgMCAwIDAgMCAwIDBjMS40IDEuOSAyLjUgMy40IDIuOSA0LjFsMi40LTQuMmMtLjMgNi4xIDQuMyAxMy45IDEzLjEgMjQuN2w3LjMtLjNjMyA2IDE0IDE2LjcgMjAuNyAxNy4ybC00LjQgNS44YzguMSAyLjYgMTAuMyA0LjMgMTIuNyA2LjJjMi42IDIuMSA1LjQgNC4zIDE2LjEgOC4xbC00LjItNy40YzMuNSAzIDYuMiA1LjkgOC44IDguN2wuMSAuMWM1LjIgNS42IDkuOSAxMC42IDE5LjcgMTUuM2MxMC43IDMuNyAxNi42IDQuNyAyMi43IDUuOGMuMyAwIC42IC4xIC45IC4xYzUuNCAuOCAxMS4yIDEuOCAyMC44IDQuNWMtMS4xLS4xLTIuMi0uMS0zLjMtLjFoMGMtMi4zLS4xLTQuNy0uMS03LS4xbDAgMCAwIDAgMCAwIDAgMCAwIDAgMCAwIDAgMGMtMTQuNC0uMi0yOS4yLS40LTQyLjctNS4yQzEwNy44IDQ4MC41IDE5LjUgMzY3LjIgMjYgMjUwLjZjLS42LTkuOS0uMy0yMC45IDAtMzAuN2MuNC0xMy41IC43LTI0LjgtMS42LTI4LjNsMS0zLjFjNS4zLTE3LjQgMTEuNy0zOC4yIDIzLjgtNjIuOGwtLjEtLjJ2LS4xYy40IC40IDMuNCAzLjQgOC44LTUuOGMuOC0xLjggMS42LTMuNyAyLjQtNS42Yy41LTEuMSAuOS0yLjIgMS40LTMuMmMyLjUtNi4xIDUuMS0xMi4zIDguNC0xNy45bDIuNi0uNmMxLjctMTAuMSAxNy0yMy44IDI5LjgtMzUuMmwxLjEtMWM1LjctNS4xIDEwLjctOS43IDEzLjYtMTMuMWwuNyA0LjRjMTctMTUuOSA0NC42LTI3LjUgNjUuNi0zNi40bC41LS4yYzQuOC0yIDkuMy0zLjkgMTMuMy01LjdjLTMuNCAzLjggMi4yIDIuNyAxMCAxYzQuOC0xIDEwLjQtMi4xIDE1LjMtMi40bC0zLjkgMi4xYy0yLjcgMS40LTUuNCAyLjgtOCA0LjZjOC4xLTIgMTEuNy0xLjQgMTUuNy0uOGwuMyAwYzMuNSAuNiA3LjMgMS4yIDE0LjYgLjJjLTUuNiAuOC0xMi4zIDMtMTEuMiAzLjhjNy45IC45IDEyLjgtLjEgMTcuMi0xbC4yIDBjNS41LTEuMSAxMC4zLTIgMTkuMyAuOWwtMS00LjhjNy4zIDIuNiAxMi43IDQuMyAxNy41IDUuOGwuNSAuMWMxMCAzIDE3LjYgNS4zIDM0LjIgMTQuMWMzLjIgLjIgNS4zLS41IDcuNC0xLjJsLjEgMGMzLjYtMS4xIDctMi4xIDE1LjIgMS4yYy4zIC41IC41IDEgLjcgMS40Yy4xIC4yIC4yIC41IC4zIC43bDAgLjFjMSAyLjYgMS44IDQuNiAxNC42IDEyLjFjMS43LS43LTIuNy00LjctNi40LTguMmMwIDAgMCAwLS4xLS4xYy0uMi0uMS0uMy0uMy0uNS0uNGMzMi4yIDE3LjMgNjcuMyA1NC4xIDc4IDkzLjVjLTYtMTEuMS01LjItNS41LTQuMyAuNWMuNiA0IDEuMiA4LjEtLjIgNy41YzQuNSAxMi4xIDguMSAyNC41IDEwLjQgMzcuNGwtLjgtMi45LS4xLS4zYy0zLjMtMTEuOS05LjYtMzQuMy0xOS45LTQ5LjNjLS40IDQuMy0yLjggMy45LTUuMiAzLjVsLS4xIDAgMCAwYy0zLjMtLjYtNi4yLTEuMS0xLjkgMTIuNmMyLjYgMy44IDMuMSAyLjQgMy41IDEuMWwwIDBjLjUtMS41IC45LTIuNyA0LjcgNS4yYy4xIDQuMSAxIDguMiAyLjEgMTIuN2wwIDAgMCAwIC4xIC42Yy4xIC4zIC4xIC41IC4yIC44bC4xIC42Yy42IDIuNiAxLjMgNS40IDEuOCA4LjRjLTEuMS0uMi0yLjMtMi4yLTMuNC00LjJjLTEuNC0yLjQtMi44LTQuNy0zLjctMy4yYzIuNCAxMS41IDYuNSAxNy40IDggMTguM2MtLjMgLjYtLjYgLjctMS4xIC43Yy0uOCAwLTEuOCAuMS0xLjkgNS4zYy43IDEzLjcgMy4zIDEyLjUgNS4zIDExLjZsMCAwYy42LS4zIDEuMi0uNiAxLjctLjRjLS42IDIuNS0xLjYgNS4xLTIuNyA3LjljLTIuOCA3LjEtNiAxNS40LTMuNCAyNi4xYy0uOC0zLTItNi0zLjEtOC45bC0uMS0uNGMtLjItLjUtLjQtMS0uNi0xLjVsMCAwYy0uMy0uOC0uNi0xLjYtLjktMi4zYy0uNiA0LjQtLjMgNy43LS4xIDEwLjZjMCAuMiAwIC41IDAgLjdjLjQgNS4zIC43IDEwLTMgMTkuOWM0LjMtMTQuMiAzLjgtMjYuOS0uMi0yMC44YzEgMTAuOS0zLjcgMjAuNC04IDI4LjlsLS4xIC4yYy0zLjYgNy4xLTYuOCAxMy41LTUuOSAxOS4zbC01LjItNy4xYy03LjUgMTAuOS03IDEzLjMtNi41IDE1LjVsMCAuMWMuNSAxLjkgMSAzLjgtMy40IDEwLjhjMS43LTIuOSAxLjMtMy42IDEtNC4ybDAgMGMtLjQtLjgtLjctMS41IDEuNy01LjFjLTEuNiAuMS01LjUgMy45LTEwLjEgOC41Yy0zLjkgMy45LTguNSA4LjQtMTIuOCAxMS44Yy0zNy41IDMwLjEtODIuMyAzNC0xMjUuNiAxNy44Yy4yLTEtLjItMi4xLTMuMS00LjFjLTM2LjgtMjguMi01OC41LTUyLjEtNTAuOS0xMDcuNWMyLjEtMS42IDMuNi01LjggNS4zLTEwLjhsMCAwIDAgMCAuMi0uNCAuMS0uMyAwLS4xYzIuOS04LjQgNi41LTE4LjggMTQuMy0yMy44YzcuOC0xNy4zIDMxLjMtMzMuMyA1Ni40LTMzLjdjMjUuNi0xLjQgNDcuMiAxMy43IDU4LjEgMjcuOWMtMTkuOC0xOC40LTUyLjEtMjQtNzkuNy0xMC40Yy0yOC4yIDEyLjctNDUgNDMuOC00Mi41IDc0LjdjLjMtLjQgLjYtLjYgLjktLjhsMCAwczAgMCAwIDBjMCAwIC4xLS4xIC4xLS4xbC4xLS4xYy42LS41IDEuMS0uOSAxLjQtMy4zYy0uOSA2MC4yIDY0LjggMTA0LjMgMTEyLjEgODJsLjYgMS4zYzEyLjctMy41IDE1LjktNi41IDIwLjMtMTAuN2wuMS0uMSAwIDBjMi4yLTIuMSA0LjctNC41IDguOS03LjNjLS4zIC43LTEuMyAxLjctMi40IDIuN2MtMi4yIDIuMS00LjYgNC41LTEuNiA0LjZjNS0xLjMgMTguNS0xMy40IDI4LjUtMjIuM2wwIDAgMCAwYy42LS41IDEuMi0xIDEuNy0xLjVjMS41LTEuMyAyLjgtMi41IDQtMy42bDAgMCAuMy0uM2MxLjktNC4yIDEuNi01LjYgMS4zLTdsMC0uMWMtLjQtMS42LS44LTMuMyAyLjQtOS42bDcuMy0zLjdjLjgtMi4xIDEuNS00LjEgMi4yLTZjLjItLjYgLjUtMS4yIC43LTEuOGwtLjQtLjJ6TTM0OS4zIDM0LjNsLS4yLS4xIC4yIC4xIDAgMHpNMjQ3LjggMzM0LjFjLTYtMy0xMy43LTguOS0xNC44LTExLjRsLS40IC4zYy0uMyAuNi0uNSAxLjMtLjIgMi4yYy0xMi4yLTUuNy0yMy40LTE0LjMtMzIuNi0yNC45YzQuOSA3LjEgMTAuMSAxNC4xIDE3IDE5LjVjLTYuOS0yLjMtMTUuMS0xMS44LTIxLjYtMTkuM2wtLjEtLjFjLTQuMy01LTcuOS05LjEtOS43LTkuNWMxOS44IDM1LjUgODAuNSA2Mi4zIDExMi4zIDQ5Yy0xNC43IC41LTMzLjQgLjMtNDkuOS01Ljh6bTc5LjMtMTE5LjdsLS4xLS4yYy0uNS0xLjUtMS4xLTMuMS0xLjctMy40YzEuNC01LjggNS40LTEwLjcgNC40IDQuNmMtMSAzLjgtMS44IDEuNS0yLjYtMXptLTQuMiAyMi4yYy0xLjMgNy45LTUgMTUuNS0xMC4xIDIyLjVjLjItMi0xLjItMi40LTIuNi0yLjhsMCAwYy0yLjktLjgtNS45LTEuNiA1LjYtMTYuMWMtLjUgMS45LTIuMSA0LjYtMy43IDcuM2wwIDAgMCAwLS4zIC40Yy0zLjYgNS45LTYuNyAxMSA0IDQuM2wxLTEuOGMyLjYtNC41IDUtOC44IDYtMTMuOGguMXptLTU1LjYgMzMuOWM3LjEgLjYgMTQuMSAuNiAyMS0xLjFjLTIuNSAyLjQtNS4yIDQuOC04LjMgNy4yYy0xMS4xLTEuNy0yMS4yLTYtMTIuNy02LjF6bS05Mi42IDExLjZjMy42IDcuMSA2LjQgMTEuNSA5IDE1LjdsLjEgLjJjMi4zIDMuNyA0LjQgNy4xIDYuOCAxMS43Yy01LjEtNC4yLTguNy05LjUtMTIuNS0xNWwtLjMtLjVjLTEuNC0yLjEtMi44LTQuMi00LjQtNi4ybDEuMi01LjloLjF6bTcuNS05LjZjMS42IDMuMyAzLjIgNi40IDUuNyA5LjFsMi42IDcuNy0xLjMtMi4xYy0zLjItNS4zLTYuMy0xMC42LTgtMTYuN2wuOCAxLjYgLjIgLjR6bTIzOC45LTQxLjZjLTIuMyAxNy40LTcuNyAzNC42LTE2IDUwLjNjNy42LTE0LjkgMTIuNS0zMC45IDE0LjgtNDcuMmwxLjItMy4xek0zNS42IDExMC42Yy40IC44IDEuNCAuNSAyLjMgLjNjMS45LS41IDMuNi0uOS0uMSA3LjZjLS41IC4zLTEgLjctMS41IDFsMCAwIDAgMGMtMS40IC45LTIuOCAxLjktMy45IDNjMS45LTMuOCAzLjUtNy40IDMuMi0xMS45ek0yNS4zIDE1Mi4zYy0uNyAzLjctMS41IDcuOS0zLjQgMTMuOWMuMi0xLjkgMC0zLjUtLjItNC45bDAtLjFjLS40LTMuNC0uNy02LjMgNC4zLTEyLjhjLS4zIDEuMi0uNSAyLjUtLjcgMy44di4xelwiXVxufTtcbnZhciBmYU9wZW5pZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdvcGVuaWQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxOWJcIiwgXCJNMjcxLjUgNDMybC02OCAzMkM4OC41IDQ1My43IDAgMzkyLjUgMCAzMTguMmMwLTcxLjUgODIuNS0xMzEgMTkxLjctMTQ0LjN2NDNjLTcxLjUgMTIuNS0xMjQgNTMtMTI0IDEwMS4zIDAgNTEgNTguNSA5My4zIDEzNS43IDEwM3YtMzQwbDY4LTMzLjJ2Mzg0ek00NDggMjkxbC0xMzEuMy0yOC41IDM2LjgtMjAuN2MtMTkuNS0xMS41LTQzLjUtMjAtNzAtMjQuOHYtNDNjNDYuMiA1LjUgODcuNyAxOS41IDEyMC4zIDM5LjNsMzUtMTkuOEw0NDggMjkxelwiXVxufTtcbnZhciBmYUluc3RhbG9kID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2luc3RhbG9kJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJlMDgxXCIsIFwiTTE1My4zODQsNDgwSDM4Ny4xMTNMNTAyLjU1NCwyNzUuNzY1LDIwNC4yMjksMzMzLjIxMVpNNTA0LjcyNiwyNDAuMDc4LDM4Ny4xMTMsMzJIMTU1LjY2OUwzNjAuMjMsMjY3LjlaTTEyNC4zODYsNDguODA5LDcuMjc0LDI1NiwxMjMuMjM2LDQ2MS4xNTQsMjI1LjYyNywxNjUuNTYxWlwiXVxufTtcbnZhciBmYUV4cGVkaXRlZHNzbCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdleHBlZGl0ZWRzc2wnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYyM2VcIiwgXCJNMjQ4IDQzLjRDMTMwLjYgNDMuNCAzNS40IDEzOC42IDM1LjQgMjU2UzEzMC42IDQ2OC42IDI0OCA0NjguNiA0NjAuNiAzNzMuNCA0NjAuNiAyNTYgMzY1LjQgNDMuNCAyNDggNDMuNHptLTk3LjQgMTMyLjljMC01My43IDQzLjctOTcuNCA5Ny40LTk3LjRzOTcuNCA0My43IDk3LjQgOTcuNHYyNi42YzAgNS0zLjkgOC45LTguOSA4LjloLTE3LjdjLTUgMC04LjktMy45LTguOS04Ljl2LTI2LjZjMC04Mi4xLTEyNC04Mi4xLTEyNCAwdjI2LjZjMCA1LTMuOSA4LjktOC45IDguOWgtMTcuN2MtNSAwLTguOS0zLjktOC45LTguOXYtMjYuNnpNMzg5LjcgMzgwYzAgOS43LTggMTcuNy0xNy43IDE3LjdIMTI0Yy05LjcgMC0xNy43LTgtMTcuNy0xNy43VjIzOC4zYzAtOS43IDgtMTcuNyAxNy43LTE3LjdoMjQ4YzkuNyAwIDE3LjcgOCAxNy43IDE3LjdWMzgwem0tMjQ4LTEzNy4zdjEzMi45YzAgMi41LTEuOSA0LjQtNC40IDQuNGgtOC45Yy0yLjUgMC00LjQtMS45LTQuNC00LjRWMjQyLjdjMC0yLjUgMS45LTQuNCA0LjQtNC40aDguOWMyLjUgMCA0LjQgMS45IDQuNCA0LjR6bTE0MS43IDQ4LjdjMCAxMy03LjIgMjQuNC0xNy43IDMwLjR2MzEuNmMwIDUtMy45IDguOS04LjkgOC45aC0xNy43Yy01IDAtOC45LTMuOS04LjktOC45di0zMS42Yy0xMC41LTYuMS0xNy43LTE3LjQtMTcuNy0zMC40IDAtMTkuNyAxNS44LTM1LjQgMzUuNC0zNS40czM1LjUgMTUuOCAzNS41IDM1LjR6TTI0OCA4QzExMSA4IDAgMTE5IDAgMjU2czExMSAyNDggMjQ4IDI0OCAyNDgtMTExIDI0OC0yNDhTMzg1IDggMjQ4IDh6bTAgNDc4LjNDMTIxIDQ4Ni4zIDE3LjcgMzgzIDE3LjcgMjU2UzEyMSAyNS43IDI0OCAyNS43IDQ3OC4zIDEyOSA0NzguMyAyNTYgMzc1IDQ4Ni4zIDI0OCA0ODYuM3pcIl1cbn07XG52YXIgZmFTZWxsY2FzdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzZWxsY2FzdCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjJkYVwiLCBcIk0zNTMuNCAzMkg5NC43QzQyLjYgMzIgMCA3NC42IDAgMTI2LjZ2MjU4LjdDMCA0MzcuNCA0Mi42IDQ4MCA5NC43IDQ4MGgyNTguN2M1Mi4xIDAgOTQuNy00Mi42IDk0LjctOTQuNlYxMjYuNmMwLTUyLTQyLjYtOTQuNi05NC43LTk0LjZ6bS01MCAzMTYuNGMtMjcuOSA0OC4yLTg5LjkgNjQuOS0xMzguMiAzNy4yLTIyLjkgMzkuOC01NC45IDguNi00Mi4zLTEzLjJsMTUuNy0yNy4yYzUuOS0xMC4zIDE5LjItMTMuOSAyOS41LTcuOSAxOC42IDEwLjgtLjEtLjEgMTguNSAxMC43IDI3LjYgMTUuOSA2My40IDYuMyA3OS40LTIxLjMgMTUuOS0yNy42IDYuMy02My40LTIxLjMtNzkuNC0xNy44LTEwLjItLjYtLjQtMTguNi0xMC42LTI0LjYtMTQuMi0zLjQtNTEuOSAyMS42LTM3LjUgMTguNiAxMC44LS4xLS4xIDE4LjUgMTAuNyA0OC40IDI4IDY1LjEgOTAuMyAzNy4yIDEzOC41em0yMS44LTIwOC44Yy0xNyAyOS41LTE2LjMgMjguOC0xOSAzMS41LTYuNSA2LjUtMTYuMyA4LjctMjYuNSAzLjYtMTguNi0xMC44LjEuMS0xOC41LTEwLjctMjcuNi0xNS45LTYzLjQtNi4zLTc5LjQgMjEuM3MtNi4zIDYzLjQgMjEuMyA3OS40YzAgMCAxOC41IDEwLjYgMTguNiAxMC42IDI0LjYgMTQuMiAzLjQgNTEuOS0yMS42IDM3LjUtMTguNi0xMC44LjEuMS0xOC41LTEwLjctNDguMi0yNy44LTY0LjktOTAuMS0zNy4xLTEzOC40IDI3LjktNDguMiA4OS45LTY0LjkgMTM4LjItMzcuMmw0LjgtOC40YzE0LjMtMjQuOSA1Mi0zLjMgMzcuNyAyMS41elwiXVxufTtcbnZhciBmYVNxdWFyZVR3aXR0ZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXR3aXR0ZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInR3aXR0ZXItc3F1YXJlXCJdLCBcImYwODFcIiwgXCJNNjQgMzJDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2YzAtMzUuMy0yOC43LTY0LTY0LTY0SDY0ek0zNTEuMyAxOTkuM3YwYzAgODYuNy02NiAxODYuNi0xODYuNiAxODYuNmMtMzcuMiAwLTcxLjctMTAuOC0xMDAuNy0yOS40YzUuMyAuNiAxMC40IC44IDE1LjggLjhjMzAuNyAwIDU4LjktMTAuNCA4MS40LTI4Yy0yOC44LS42LTUzLTE5LjUtNjEuMy00NS41YzEwLjEgMS41IDE5LjIgMS41IDI5LjYtMS4yYy0zMC02LjEtNTIuNS0zMi41LTUyLjUtNjQuNHYtLjhjOC43IDQuOSAxOC45IDcuOSAyOS42IDguM2MtOS02LTE2LjQtMTQuMS0yMS41LTIzLjZzLTcuOC0yMC4yLTcuNy0zMWMwLTEyLjIgMy4yLTIzLjQgOC45LTMzLjFjMzIuMyAzOS44IDgwLjggNjUuOCAxMzUuMiA2OC42Yy05LjMtNDQuNSAyNC04MC42IDY0LTgwLjZjMTguOSAwIDM1LjkgNy45IDQ3LjkgMjAuN2MxNC44LTIuOCAyOS04LjMgNDEuNi0xNS44Yy00LjkgMTUuMi0xNS4yIDI4LTI4LjggMzYuMWMxMy4yLTEuNCAyNi01LjEgMzcuOC0xMC4yYy04LjkgMTMuMS0yMC4xIDI0LjctMzIuOSAzNGMuMiAyLjggLjIgNS43IC4yIDguNXpcIl1cbn07XG52YXIgZmFUd2l0dGVyU3F1YXJlID0gZmFTcXVhcmVUd2l0dGVyO1xudmFyIGZhUlByb2plY3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnci1wcm9qZWN0JyxcbiAgaWNvbjogWzU4MSwgNTEyLCBbXSwgXCJmNGY3XCIsIFwiTTU4MSAyMjYuNkM1ODEgMTE5LjEgNDUwLjkgMzIgMjkwLjUgMzJTMCAxMTkuMSAwIDIyNi42QzAgMzIyLjQgMTAzLjMgNDAyIDIzOS40IDQxOC4xVjQ4MGg5OS4xdi02MS41YzI0LjMtMi43IDQ3LjYtNy40IDY5LjQtMTMuOUw0NDggNDgwaDExMmwtNjcuNC0xMTMuN2M1NC41LTM1LjQgODguNC04NC45IDg4LjQtMTM5Ljd6bS00NjYuOCAxNC41YzAtNzMuNSA5OC45LTEzMyAyMjAuOC0xMzNzMjExLjkgNDAuNyAyMTEuOSAxMzNjMCA1MC4xLTI2LjUgODUtNzAuMyAxMDYuNC0yLjQtMS42LTQuNy0yLjktNi40LTMuNy0xMC4yLTUuMi0yNy44LTEwLjUtMjcuOC0xMC41czg2LjYtNi40IDg2LjYtOTIuNy05MC42LTg3LjktOTAuNi04Ny45aC0xOTlWMzYxYy03NC4xLTIxLjUtMTI1LjItNjcuMS0xMjUuMi0xMTkuOXptMjI1LjEgMzguM3YtNTUuNmM1Ny44IDAgODcuOC02LjggODcuOCAyNy4zIDAgMzYuNS0zOC4yIDI4LjMtODcuOCAyOC4zem0tLjkgNzIuNUgzNjVjMTAuOCAwIDE4LjkgMTEuNyAyNCAxOS4yLTE2LjEgMS45LTMzIDIuOC01MC42IDIuOXYtMjIuMXpcIl1cbn07XG52YXIgZmFEZWxpY2lvdXMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGVsaWNpb3VzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMWE1XCIsIFwiTTQ0Ni41IDY4Yy0uNC0xLjUtLjktMy0xLjQtNC41LS45LTIuNS0yLTQuOC0zLjMtNy4xLTEuNC0yLjQtMy00LjgtNC43LTYuOS0yLjEtMi41LTQuNC00LjgtNi45LTYuOC0xLjEtLjktMi4yLTEuNy0zLjMtMi41LTEuMy0uOS0yLjYtMS43LTQtMi40LTEuOC0xLTMuNi0xLjgtNS41LTIuNS0xLjctLjctMy41LTEuMy01LjQtMS43LTMuOC0xLTcuOS0xLjUtMTItMS41SDQ4QzIxLjUgMzIgMCA1My41IDAgODB2MzUyYzAgNC4xLjUgOC4yIDEuNSAxMiAyIDcuNyA1LjggMTQuNiAxMSAyMC4zIDEgMS4xIDIuMSAyLjIgMy4zIDMuMyA1LjcgNS4yIDEyLjYgOSAyMC4zIDExIDMuOCAxIDcuOSAxLjUgMTIgMS41aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OFY4MGMtLjEtNC4xLS42LTguMi0xLjYtMTJ6TTQxNiA0MzJjMCA4LjgtNy4yIDE2LTE2IDE2SDIyNFYyNTZIMzJWODBjMC04LjggNy4yLTE2IDE2LTE2aDE3NnYxOTJoMTkyelwiXVxufTtcbnZhciBmYUZyZWVic2QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZnJlZWJzZCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNhNFwiLCBcIk0zMDMuNyA5Ni4yYzExLjEtMTEuMSAxMTUuNS03NyAxMzkuMi01My4yIDIzLjcgMjMuNy00Mi4xIDEyOC4xLTUzLjIgMTM5LjItMTEuMSAxMS4xLTM5LjQuOS02My4xLTIyLjktMjMuOC0yMy43LTM0LjEtNTItMjIuOS02My4xek0xMDkuOSA2OC4xQzczLjYgNDcuNSAyMiAyNC42IDUuNiA0MS4xYy0xNi42IDE2LjYgNy4xIDY5LjQgMjcuOSAxMDUuNyAxOC41LTMyLjIgNDQuOC01OS4zIDc2LjQtNzguN3pNNDA2LjcgMTc0YzMuMyAxMS4zIDIuNyAyMC43LTIuNyAyNi4xLTIwLjMgMjAuMy04Ny41LTI3LTEwOS4zLTcwLjEtMTgtMzIuMy0xMS4xLTUzLjQgMTQuOS00OC43IDUuNy0zLjYgMTIuMy03LjYgMTkuNi0xMS42LTI5LjgtMTUuNS02My42LTI0LjMtOTkuNS0yNC4zLTExOS4xIDAtMjE1LjYgOTYuNS0yMTUuNiAyMTUuNiAwIDExOSA5Ni41IDIxNS42IDIxNS42IDIxNS42UzQ0NS4zIDM4MC4xIDQ0NS4zIDI2MWMwLTM4LjQtMTAuMS03NC41LTI3LjctMTA1LjgtMy45IDctNy42IDEzLjMtMTAuOSAxOC44elwiXVxufTtcbnZhciBmYVZ1ZWpzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Z1ZWpzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNDFmXCIsIFwiTTM1Ni45IDY0LjNIMjgwbC01NiA4OC42LTQ4LTg4LjZIMEwyMjQgNDQ4IDQ0OCA2NC4zaC05MS4xem0tMzAxLjIgMzJoNTMuOEwyMjQgMjk0LjUgMzM4LjQgOTYuM2g1My44TDIyNCAzODQuNSA1NS43IDk2LjN6XCJdXG59O1xudmFyIGZhQWNjdXNvZnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYWNjdXNvZnQnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYzNjlcIiwgXCJNMzIyLjEgMjUydi0xbC01MS4yLTY1LjhzLTEyIDEuNi0yNSAxNS4xYy05IDkuMy0yNDIuMSAyMzkuMS0yNDMuNCAyNDAuOS03IDEwIDEuNiA2LjggMTUuNyAxLjcuOCAwIDExNC41LTM2LjYgMTE0LjUtMzYuNi41LS42LS4xLS4xLjYtLjYtLjQtNS4xLS44LTI2LjItMS0yNy43LS42LTUuMiAyLjItNi45IDctOC45bDkyLjYtMzMuOGMuNi0uOCA4OC41LTgxLjcgOTAuMi04My4zem0xNjAuMSAxMjAuMWMxMy4zIDE2LjEgMjAuNyAxMy4zIDMwLjggOS4zIDMuMi0xLjIgMTE1LjQtNDcuNiAxMTcuOC00OC45IDgtNC4zLTEuNy0xNi43LTcuMi0yMy40LTIuMS0yLjUtMjA1LjEtMjQ1LjYtMjA3LjItMjQ4LjMtOS43LTEyLjItMTQuMy0xMi45LTM4LjQtMTIuOC0xMC4yIDAtMTA2LjguNS0xMTYuNS42LTE5LjIuMS0zMi45LS4zLTE5LjIgMTYuOUMyNTAgNzUgNDc2LjUgMzY1LjIgNDgyLjIgMzcyLjF6bTE1Mi43IDEuNmMtMi4zLS4zLTI0LjYtNC43LTM4LTcuMiAwIDAtMTE1IDUwLjQtMTE3LjUgNTEuNi0xNiA3LjMtMjYuOS0zLjItMzYuNy0xNC42bC01Ny4xLTc0Yy01LjQtLjktNjAuNC05LjYtNjUuMy05LjMtMy4xLjItOS42LjgtMTQuNCAyLjktNC45IDIuMS0xNDUuMiA1Mi44LTE1MC4yIDU0LjctNS4xIDItMTEuNCAzLjYtMTEuMSA3LjYuMiAyLjUgMiAyLjYgNC42IDMuNSAyLjcuOCAzMDAuOSA2Ny42IDMwOCA2OS4xIDE1LjYgMy4zIDM4LjUgMTAuNSA1My42IDEuNyAyLjEtMS4yIDEyMy44LTc2LjQgMTI1LjgtNzcuOCA1LjQtNCA0LjMtNi44LTEuNy04LjJ6XCJdXG59O1xudmFyIGZhSW94aG9zdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdpb3hob3N0JyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMjA4XCIsIFwiTTYxNiAxNjBoLTY3LjNDNTExLjIgNzAuNyA0MjIuOSA4IDMyMCA4IDE4MyA4IDcyIDExOSA3MiAyNTZjMCAxNi40IDEuNiAzMi41IDQuNyA0OEgyNGMtMTMuMyAwLTI0IDEwLjgtMjQgMjQgMCAxMy4zIDEwLjcgMjQgMjQgMjRoNjcuM2MzNy41IDg5LjMgMTI1LjggMTUyIDIyOC43IDE1MiAxMzcgMCAyNDgtMTExIDI0OC0yNDggMC0xNi40LTEuNi0zMi41LTQuNy00OEg2MTZjMTMuMyAwIDI0LTEwLjggMjQtMjQgMC0xMy4zLTEwLjctMjQtMjQtMjR6bS05NiA5NmMwIDExMC41LTg5LjUgMjAwLTIwMCAyMDAtNzUuNyAwLTE0MS42LTQyLTE3NS41LTEwNEg0MjRjMTMuMyAwIDI0LTEwLjggMjQtMjQgMC0xMy4zLTEwLjctMjQtMjQtMjRIMTI1LjhjLTMuOC0xNS40LTUuOC0zMS40LTUuOC00OCAwLTExMC41IDg5LjUtMjAwIDIwMC0yMDAgNzUuNyAwIDE0MS42IDQyIDE3NS41IDEwNEgyMTZjLTEzLjMgMC0yNCAxMC44LTI0IDI0IDAgMTMuMyAxMC43IDI0IDI0IDI0aDI5OC4yYzMuOCAxNS40IDUuOCAzMS40IDUuOCA0OHptLTMwNC0yNGgyMDhjMTMuMyAwIDI0IDEwLjcgMjQgMjQgMCAxMy4yLTEwLjcgMjQtMjQgMjRIMjE2Yy0xMy4zIDAtMjQtMTAuNy0yNC0yNCAwLTEzLjIgMTAuNy0yNCAyNC0yNHpcIl1cbn07XG52YXIgZmFGb250aWNvbnNGaSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmb250aWNvbnMtZmknLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYzYTJcIiwgXCJNMTE0LjQgMjI0aDkyLjRsLTE1LjIgNTEuMmgtNzYuNFY0MzNjMCA4LTIuOCA5LjIgNC40IDEwbDU5LjYgNS42VjQ4M0gwdi0zNS4ybDI5LjItMi44YzcuMi0uOCA5LjItMy4yIDkuMi0xMC44VjI3OC40YzAtMy4yLTQtMy4yLTgtMy4ySDBWMjI0aDM4LjR2LTI4LjhjMC02OCAzNi40LTk2IDEwNi05NiA0Ni44IDAgODguOCAxMS4yIDg4LjggNzIuNGwtNjkuNiA4LjRjLjQtMjUuNi02LTMxLjYtMjIuNC0zMS42LTI1LjIgMC0yNiAxMy42LTI2IDM3LjZ2MzJjMCAzLjItNC44IDYtLjggNnpNMzg0IDQ4M0gyNDMuMnYtMzQuNGwyOC0zLjZjNy4yLS44IDEwLjQtMi40IDEwLjQtMTBWMjg3YzAtNS42LTQtOS4yLTkuMi0xMC44bC0zMy4yLTguOCA5LjItNDAuNGgxMTB2MjA4YzAgOC0zLjYgOC44IDQgMTBsMjEuNiAzLjZWNDgzem0tMzAtMzQ3LjJsMTIuNCA0NS42LTEwIDEwLTQyLjgtMjIuOC00Mi44IDIyLjgtMTAtMTAgMTIuNC00NS42LTMwLTM2LjQgNC44LTEwaDM4TDMwNy4yIDUxSDMyMGwyMS4yIDM4LjRoMzhsNC44IDEzLjItMzAgMzMuMnpcIl1cbn07XG52YXIgZmFBcHBTdG9yZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhcHAtc3RvcmUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzNmZcIiwgXCJNMjU1LjkgMTIwLjlsOS4xLTE1LjdjNS42LTkuOCAxOC4xLTEzLjEgMjcuOS03LjUgOS44IDUuNiAxMy4xIDE4LjEgNy41IDI3LjlsLTg3LjUgMTUxLjVoNjMuM2MyMC41IDAgMzIgMjQuMSAyMy4xIDQwLjhIMTEzLjhjLTExLjMgMC0yMC40LTkuMS0yMC40LTIwLjQgMC0xMS4zIDkuMS0yMC40IDIwLjQtMjAuNGg1Mmw2Ni42LTExNS40LTIwLjgtMzYuMWMtNS42LTkuOC0yLjMtMjIuMiA3LjUtMjcuOSA5LjgtNS42IDIyLjItMi4zIDI3LjkgNy41bDguOSAxNS43em0tNzguNyAyMThsLTE5LjYgMzRjLTUuNiA5LjgtMTguMSAxMy4xLTI3LjkgNy41LTkuOC01LjYtMTMuMS0xOC4xLTcuNS0yNy45bDE0LjYtMjUuMmMxNi40LTUuMSAyOS44LTEuMiA0MC40IDExLjZ6bTE2OC45LTYxLjdoNTMuMWMxMS4zIDAgMjAuNCA5LjEgMjAuNCAyMC40IDAgMTEuMy05LjEgMjAuNC0yMC40IDIwLjRoLTI5LjVsMTkuOSAzNC41YzUuNiA5LjggMi4zIDIyLjItNy41IDI3LjktOS44IDUuNi0yMi4yIDIuMy0yNy45LTcuNS0zMy41LTU4LjEtNTguNy0xMDEuNi03NS40LTEzMC42LTE3LjEtMjkuNS00LjktNTkuMSA3LjItNjkuMSAxMy40IDIzIDMzLjQgNTcuNyA2MC4xIDEwNHpNMjU2IDhDMTE5IDggOCAxMTkgOCAyNTZzMTExIDI0OCAyNDggMjQ4IDI0OC0xMTEgMjQ4LTI0OFMzOTMgOCAyNTYgOHptMjE2IDI0OGMwIDExOC43LTk2LjEgMjE2LTIxNiAyMTYtMTE4LjcgMC0yMTYtOTYuMS0yMTYtMjE2IDAtMTE4LjcgOTYuMS0yMTYgMjE2LTIxNiAxMTguNyAwIDIxNiA5Ni4xIDIxNiAyMTZ6XCJdXG59O1xudmFyIGZhQ2NNYXN0ZXJjYXJkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NjLW1hc3RlcmNhcmQnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYxZjFcIiwgXCJNNDgyLjkgNDEwLjNjMCA2LjgtNC42IDExLjctMTEuMiAxMS43LTYuOCAwLTExLjItNS4yLTExLjItMTEuNyAwLTYuNSA0LjQtMTEuNyAxMS4yLTExLjcgNi42IDAgMTEuMiA1LjIgMTEuMiAxMS43em0tMzEwLjgtMTEuN2MtNy4xIDAtMTEuMiA1LjItMTEuMiAxMS43IDAgNi41IDQuMSAxMS43IDExLjIgMTEuNyA2LjUgMCAxMC45LTQuOSAxMC45LTExLjctLjEtNi41LTQuNC0xMS43LTEwLjktMTEuN3ptMTE3LjUtLjNjLTUuNCAwLTguNyAzLjUtOS41IDguN2gxOS4xYy0uOS01LjctNC40LTguNy05LjYtOC43em0xMDcuOC4zYy02LjggMC0xMC45IDUuMi0xMC45IDExLjcgMCA2LjUgNC4xIDExLjcgMTAuOSAxMS43IDYuOCAwIDExLjItNC45IDExLjItMTEuNyAwLTYuNS00LjQtMTEuNy0xMS4yLTExLjd6bTEwNS45IDI2LjFjMCAuMy4zLjUuMyAxLjEgMCAuMy0uMy41LS4zIDEuMS0uMy4zLS4zLjUtLjUuOC0uMy4zLS41LjUtMS4xLjUtLjMuMy0uNS4zLTEuMS4zLS4zIDAtLjUgMC0xLjEtLjMtLjMgMC0uNS0uMy0uOC0uNS0uMy0uMy0uNS0uNS0uNS0uOC0uMy0uNS0uMy0uOC0uMy0xLjEgMC0uNSAwLS44LjMtMS4xIDAtLjUuMy0uOC41LTEuMS4zLS4zLjUtLjMuOC0uNS41LS4zLjgtLjMgMS4xLS4zLjUgMCAuOCAwIDEuMS4zLjUuMy44LjMgMS4xLjVzLjIuNi41IDEuMXptLTIuMiAxLjRjLjUgMCAuNS0uMy44LS4zLjMtLjMuMy0uNS4zLS44IDAtLjMgMC0uNS0uMy0uOC0uMyAwLS41LS4zLTEuMS0uM2gtMS42djMuNWguOFY0MjZoLjNsMS4xIDEuNGguOGwtMS4xLTEuM3pNNTc2IDgxdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODFjMC0yNi41IDIxLjUtNDggNDgtNDhoNDgwYzI2LjUgMCA0OCAyMS41IDQ4IDQ4ek02NCAyMjAuNmMwIDc2LjUgNjIuMSAxMzguNSAxMzguNSAxMzguNSAyNy4yIDAgNTMuOS04LjIgNzYuNS0yMy4xLTcyLjktNTkuMy03Mi40LTE3MS4yIDAtMjMwLjUtMjIuNi0xNS00OS4zLTIzLjEtNzYuNS0yMy4xLTc2LjQtLjEtMTM4LjUgNjItMTM4LjUgMTM4LjJ6bTIyNCAxMDguOGM3MC41LTU1IDcwLjItMTYyLjIgMC0yMTcuNS03MC4yIDU1LjMtNzAuNSAxNjIuNiAwIDIxNy41em0tMTQyLjMgNzYuM2MwLTguNy01LjctMTQuNC0xNC43LTE0LjctNC42IDAtOS41IDEuNC0xMi44IDYuNS0yLjQtNC4xLTYuNS02LjUtMTIuMi02LjUtMy44IDAtNy42IDEuNC0xMC42IDUuNFYzOTJoLTguMnYzNi43aDguMmMwLTE4LjktMi41LTMwLjIgOS0zMC4yIDEwLjIgMCA4LjIgMTAuMiA4LjIgMzAuMmg3LjljMC0xOC4zLTIuNS0zMC4yIDktMzAuMiAxMC4yIDAgOC4yIDEwIDguMiAzMC4yaDguMnYtMjN6bTQ0LjktMTMuN2gtNy45djQuNGMtMi43LTMuMy02LjUtNS40LTExLjctNS40LTEwLjMgMC0xOC4yIDguMi0xOC4yIDE5LjMgMCAxMS4yIDcuOSAxOS4zIDE4LjIgMTkuMyA1LjIgMCA5LTEuOSAxMS43LTUuNHY0LjZoNy45VjM5MnptNDAuNSAyNS42YzAtMTUtMjIuOS04LjItMjIuOS0xNS4yIDAtNS43IDExLjktNC44IDE4LjUtMS4xbDMuMy02LjVjLTkuNC02LjEtMzAuMi02LTMwLjIgOC4yIDAgMTQuMyAyMi45IDguMyAyMi45IDE1IDAgNi4zLTEzLjUgNS44LTIwLjcuOGwtMy41IDYuM2MxMS4yIDcuNiAzMi42IDYgMzIuNi03LjV6bTM1LjQgOS4zbC0yLjItNi44Yy0zLjggMi4xLTEyLjIgNC40LTEyLjItNC4xdi0xNi42aDEzLjFWMzkyaC0xMy4xdi0xMS4yaC04LjJWMzkyaC03LjZ2Ny4zaDcuNlY0MTZjMCAxNy42IDE3LjMgMTQuNCAyMi42IDEwLjl6bTEzLjMtMTMuNGgyNy41YzAtMTYuMi03LjQtMjIuNi0xNy40LTIyLjYtMTAuNiAwLTE4LjIgNy45LTE4LjIgMTkuMyAwIDIwLjUgMjIuNiAyMy45IDMzLjggMTQuMmwtMy44LTZjLTcuOCA2LjQtMTkuNiA1LjgtMjEuOS00Ljl6bTU5LjEtMjEuNWMtNC42LTItMTEuNi0xLjgtMTUuMiA0LjRWMzkyaC04LjJ2MzYuN2g4LjJWNDA4YzAtMTEuNiA5LjUtMTAuMSAxMi44LTguNGwyLjQtNy42em0xMC42IDE4LjNjMC0xMS40IDExLjYtMTUuMSAyMC43LTguNGwzLjgtNi41Yy0xMS42LTkuMS0zMi43LTQuMS0zMi43IDE1IDAgMTkuOCAyMi40IDIzLjggMzIuNyAxNWwtMy44LTYuNWMtOS4yIDYuNS0yMC43IDIuNi0yMC43LTguNnptNjYuNy0xOC4zSDQwOHY0LjRjLTguMy0xMS0yOS45LTQuOC0yOS45IDEzLjkgMCAxOS4yIDIyLjQgMjQuNyAyOS45IDEzLjl2NC42aDguMlYzOTJ6bTMzLjcgMGMtMi40LTEuMi0xMS0yLjktMTUuMiA0LjRWMzkyaC03Ljl2MzYuN2g3LjlWNDA4YzAtMTEgOS0xMC4zIDEyLjgtOC40bDIuNC03LjZ6bTQwLjMtMTQuOWgtNy45djE5LjNjLTguMi0xMC45LTI5LjktNS4xLTI5LjkgMTMuOSAwIDE5LjQgMjIuNSAyNC42IDI5LjkgMTMuOXY0LjZoNy45di01MS43em03LjYtNzUuMXY0LjZoLjhWMzAyaDEuOXYtLjhoLTQuNnYuOGgxLjl6bTYuNiAxMjMuOGMwLS41IDAtMS4xLS4zLTEuNi0uMy0uMy0uNS0uOC0uOC0xLjEtLjMtLjMtLjgtLjUtMS4xLS44LS41IDAtMS4xLS4zLTEuNi0uMy0uMyAwLS44LjMtMS40LjMtLjUuMy0uOC41LTEuMS44LS41LjMtLjguOC0uOCAxLjEtLjMuNS0uMyAxLjEtLjMgMS42IDAgLjMgMCAuOC4zIDEuNCAwIC4zLjMuOC44IDEuMS4zLjMuNS41IDEuMS44LjUuMyAxLjEuMyAxLjQuMy41IDAgMS4xIDAgMS42LS4zLjMtLjMuOC0uNSAxLjEtLjguMy0uMy41LS44LjgtMS4xLjMtLjYuMy0xLjEuMy0xLjR6bTMuMi0xMjQuN2gtMS40bC0xLjYgMy41LTEuNi0zLjVoLTEuNHY1LjRoLjh2LTQuMWwxLjYgMy41aDEuMWwxLjQtMy41djQuMWgxLjF2LTUuNHptNC40LTgwLjVjMC03Ni4yLTYyLjEtMTM4LjMtMTM4LjUtMTM4LjMtMjcuMiAwLTUzLjkgOC4yLTc2LjUgMjMuMSA3Mi4xIDU5LjMgNzMuMiAxNzEuNSAwIDIzMC41IDIyLjYgMTUgNDkuNSAyMy4xIDc2LjUgMjMuMSA3Ni40LjEgMTM4LjUtNjEuOSAxMzguNS0xMzguNHpcIl1cbn07XG52YXIgZmFJdHVuZXNOb3RlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2l0dW5lcy1ub3RlJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmM2I1XCIsIFwiTTM4MS45IDM4OC4yYy02LjQgMjcuNC0yNy4yIDQyLjgtNTUuMSA0OC0yNC41IDQuNS00NC45IDUuNi02NC41LTEwLjItMjMuOS0yMC4xLTI0LjItNTMuNC0yLjctNzQuNCAxNy0xNi4yIDQwLjktMTkuNSA3Ni44LTI1LjggNi0xLjEgMTEuMi0yLjUgMTUuNi03LjQgNi40LTcuMiA0LjQtNC4xIDQuNC0xNjMuMiAwLTExLjItNS41LTE0LjMtMTctMTIuMy04LjIgMS40LTE4NS43IDM0LjYtMTg1LjcgMzQuNi0xMC4yIDIuMi0xMy40IDUuMi0xMy40IDE2LjcgMCAyMzQuNyAxLjEgMjIzLjktMi41IDIzOS41LTQuMiAxOC4yLTE1LjQgMzEuOS0zMC4yIDM5LjUtMTYuOCA5LjMtNDcuMiAxMy40LTYzLjQgMTAuNC00My4yLTguMS01OC40LTU4LTI5LjEtODYuNiAxNy0xNi4yIDQwLjktMTkuNSA3Ni44LTI1LjggNi0xLjEgMTEuMi0yLjUgMTUuNi03LjQgMTAuMS0xMS41IDEuOC0yNTYuNiA1LjItMjcwLjIuOC01LjIgMy05LjYgNy4xLTEyLjkgNC4yLTMuNSAxMS44LTUuNSAxMy40LTUuNSAyMDQtMzguMiAyMjguOS00My4xIDIzMi40LTQzLjEgMTEuNS0uOCAxOC4xIDYgMTguMSAxNy42LjIgMzQ0LjUgMS4xIDMyNi0xLjggMzM4LjV6XCJdXG59O1xudmFyIGZhR29sYW5nID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dvbGFuZycsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTQwZlwiLCBcIk00MDAuMSAxOTQuOEMzODkuMiAxOTcuNiAzODAuMiAxOTkuMSAzNzEgMjAyLjRDMzYzLjcgMjA0LjMgMzU2LjMgMjA2LjMgMzQ3LjggMjA4LjVMMzQ3LjIgMjA4LjZDMzQzIDIwOS44IDM0Mi42IDIwOS45IDMzOC43IDIwNS40QzMzNCAyMDAuMSAzMzAuNiAxOTYuNyAzMjQuMSAxOTMuNUMzMDQuNCAxODMuOSAyODUuNCAxODYuNyAyNjcuNyAxOTguMkMyNDYuNSAyMTEuOSAyMzUuNiAyMzIuMiAyMzUuOSAyNTcuNEMyMzYuMiAyODIuNCAyNTMuMyAzMDIuOSAyNzcuMSAzMDYuM0MyOTkuMSAzMDkuMSAzMTYuOSAzMDEuNyAzMzAuOSAyODUuOEMzMzMgMjgzLjIgMzM0LjkgMjgwLjUgMzM3IDI3Ny41VjI3Ny41TDMzNyAyNzcuNUMzMzcuOCAyNzYuNSAzMzguNSAyNzUuNCAzMzkuMyAyNzQuMkgyNzkuMkMyNzIuNyAyNzQuMiAyNzEuMSAyNzAuMiAyNzMuMyAyNjQuOUMyNzcuMyAyNTUuMiAyODQuOCAyMzkgMjg5LjIgMjMwLjlDMjkwLjEgMjI5LjEgMjkyLjMgMjI1LjEgMjk2LjEgMjI1LjFIMzk3LjJDNDAxLjcgMjExLjcgNDA5IDE5OC4yIDQxOC44IDE4NS40QzQ0MS41IDE1NS41IDQ2OC4xIDEzOS45IDUwNiAxMzMuNEM1MzcuOCAxMjcuOCA1NjcuNyAxMzAuOSA1OTQuOSAxNDkuM0M2MTkuNSAxNjYuMSA2MzQuNyAxODguOSA2MzguOCAyMTguOEM2NDQuMSAyNjAuOSA2MzEuOSAyOTUuMSA2MDIuMSAzMjQuNEM1ODIuNCAzNDUuMyA1NTcuMiAzNTguNCA1MjguMiAzNjQuM0M1MjIuNiAzNjUuMyA1MTcuMSAzNjUuOCA1MTEuNyAzNjYuM0M1MDguOCAzNjYuNSA1MDYgMzY2LjggNTAzLjIgMzY3LjFDNDc0LjkgMzY2LjUgNDQ5IDM1OC40IDQyNy4yIDMzOS43QzQxMS45IDMyNi40IDQwMS4zIDMxMC4xIDM5Ni4xIDI5MS4yQzM5Mi40IDI5OC41IDM4OC4xIDMwNS42IDM4Mi4xIDMxMi4zQzM2MC41IDM0MS45IDMzMS4yIDM2MC4zIDI5NC4yIDM2NS4yQzI2My42IDM2OS4zIDIzNS4zIDM2My40IDIxMC4zIDM0NC43QzE4Ny4zIDMyNy4yIDE3NC4yIDMwNC4yIDE3MC44IDI3NS41QzE2Ni43IDI0MS41IDE3Ni43IDIxMC4xIDE5Ny4yIDE4NC4yQzIxOS40IDE1NS4yIDI0OC43IDEzNi44IDI4NC41IDEzMC4zQzMxMy44IDEyNC4xIDM0MS44IDEyOC40IDM2Ny4xIDE0NS42QzM4My42IDE1Ni41IDM5NS40IDE3MS40IDQwMy4yIDE4OS41QzQwNS4xIDE5Mi4zIDQwMy44IDE5My45IDQwMC4xIDE5NC44ek00OC4zIDIwMC40QzQ3LjA1IDIwMC40IDQ2Ljc0IDE5OS44IDQ3LjM2IDE5OC44TDUzLjkxIDE5MC40QzU0LjUzIDE4OS41IDU2LjA5IDE4OC45IDU3LjM0IDE4OC45SDE2OC42QzE2OS44IDE4OC45IDE3MC4xIDE4OS44IDE2OS41IDE5MC43TDE2NC4yIDE5OC44QzE2My42IDE5OS44IDE2MiAyMDAuNyAxNjEuMSAyMDAuN0w0OC4zIDIwMC40ek0xLjI0NiAyMjkuMUMwIDIyOS4xLS4zMTE2IDIyOC40IC4zMTE2IDIyNy41TDYuODU1IDIxOS4xQzcuNDc5IDIxOC4yIDkuMDM3IDIxNy41IDEwLjI4IDIxNy41SDE1Mi40QzE1My42IDIxNy41IDE1NC4yIDIxOC41IDE1My45IDIxOS40TDE1MS40IDIyNi45QzE1MS4xIDIyOC4xIDE0OS45IDIyOC44IDE0OC42IDIyOC44TDEuMjQ2IDIyOS4xek03NS43MiAyNTUuOUM3NS4xIDI1Ni44IDc1LjQxIDI1Ny43IDc2LjY1IDI1Ny43TDE0NC42IDI1OEMxNDUuNSAyNTggMTQ2LjggMjU3LjEgMTQ2LjggMjU1LjlMMTQ3LjQgMjQ4LjRDMTQ3LjQgMjQ3LjEgMTQ2LjggMjQ2LjIgMTQ1LjUgMjQ2LjJIODMuMkM4MS45NSAyNDYuMiA4MC43MSAyNDcuMSA4MC4wOCAyNDguMUw3NS43MiAyNTUuOXpNNTc3LjIgMjM3LjlDNTc3IDIzNS4zIDU3Ni45IDIzMy4xIDU3Ni41IDIzMC45QzU3MC45IDIwMC4xIDU0Mi41IDE4Mi42IDUxMi45IDE4OS41QzQ4My45IDE5NiA0NjUuMiAyMTQuNCA0NTguNCAyNDMuN0M0NTIuOCAyNjggNDY0LjYgMjkyLjYgNDg3IDMwMi42QzUwNC4yIDMxMC4xIDUyMS4zIDMwOS4yIDUzNy44IDMwMC43QzU2Mi40IDI4Ny4xIDU3NS44IDI2OCA1NzcuNCAyNDEuMkM1NzcuMyAyNDAgNTc3LjMgMjM4LjkgNTc3LjIgMjM3Ljl6XCJdXG59O1xudmFyIGZhS2lja3N0YXJ0ZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAna2lja3N0YXJ0ZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInNxdWFyZS1raWNrc3RhcnRlclwiXSwgXCJmM2JiXCIsIFwiTTY0IDMyQzI4LjcgMzIgMCA2MC43IDAgOTZMMCA0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRsMzIwIDBjMzUuMyAwIDY0LTI4LjcgNjQtNjRsMC0zMjBjMC0zNS4zLTI4LjctNjQtNjQtNjRMNjQgMzJ6TTMyMC44IDIzM2wtMjMuMyAyMy4xTDMyMC44IDI3OWMyNC4xIDIzLjkgMjQuMSA2MyAwIDg2LjlzLTYzLjQgMjMuOS04Ny42IDBsLTguNS04LjRjLTExLjMgMTYtMjkuNyAyNi41LTUwLjkgMjYuNWMtMzQuMSAwLTYxLjktMjcuNS02MS45LTYxLjRsMC0xMzMuMmMwLTMzLjggMjcuNy02MS40IDYxLjktNjEuNGMyMS4xIDAgMzkuNiAxMC41IDUwLjkgMjYuNWw4LjUtOC40YzI0LjEtMjMuOSA2My40LTIzLjkgODcuNiAwczI0LjEgNjMgMCA4Ni45elwiXVxufTtcbnZhciBmYVNxdWFyZUtpY2tzdGFydGVyID0gZmFLaWNrc3RhcnRlcjtcbnZhciBmYUdyYXYgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ3JhdicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjJkNlwiLCBcIk0zMDEuMSAyMTJjNC40IDQuNCA0LjQgMTEuOSAwIDE2LjNsLTkuNyA5LjdjLTQuNCA0LjctMTEuOSA0LjctMTYuNiAwbC0xMC41LTEwLjVjLTQuNC00LjctNC40LTExLjkgMC0xNi42bDkuNy05LjdjNC40LTQuNCAxMS45LTQuNCAxNi42IDBsMTAuNSAxMC44em0tMzAuMi0xOS43YzMtMyAzLTcuOCAwLTEwLjUtMi44LTMtNy41LTMtMTAuNSAwLTIuOCAyLjgtMi44IDcuNSAwIDEwLjUgMy4xIDIuOCA3LjggMi44IDEwLjUgMHptLTI2IDUuM2MtMyAyLjgtMyA3LjUgMCAxMC4yIDIuOCAzIDcuNSAzIDEwLjUgMCAyLjgtMi44IDIuOC03LjUgMC0xMC4yLTMtMy03LjctMy0xMC41IDB6bTcyLjUtMTMuM2MtMTkuOS0xNC40LTMzLjgtNDMuMi0xMS45LTY4LjEgMjEuNi0yNC45IDQwLjctMTcuMiA1OS44LjggMTEuOSAxMS4zIDI5LjMgMjQuOSAxNy4yIDQ4LjItMTIuNSAyMy41LTQ1LjEgMzMuMi02NS4xIDE5LjF6bTQ3LjctNDQuNWMtOC45LTEwLTIzLjMgNi45LTE1LjUgMTYuMSA3LjQgOSAzMi4xIDIuNCAxNS41LTE2LjF6TTUwNCAyNTZjMCAxMzctMTExIDI0OC0yNDggMjQ4UzggMzkzIDggMjU2IDExOSA4IDI1NiA4czI0OCAxMTEgMjQ4IDI0OHptLTY2LjIgNDIuNmMyLjUtMTYuMS0yMC4yLTE2LjYtMjUuMi0yNS43LTEzLjYtMjQuMS0yNy43LTM2LjgtNTQuNS0zMC40IDExLjYtOCAyMy41LTYuMSAyMy41LTYuMS4zLTYuNCAwLTEzLTkuNC0yNC45IDMuOS0xMi41LjMtMjIuNC4zLTIyLjQgMTUuNS04LjYgMjYuOC0yNC40IDI5LjEtNDMuMiAzLjYtMzEtMTguOC01OS4yLTQ5LjgtNjIuOC0yMi4xLTIuNS00My43IDcuNy01NC4zIDI1LjctMjMuMiA0MC4xIDEuNCA3MC45IDIyLjQgODEuNC0xNC40LTEuNC0zNC4zLTExLjktNDAuMS0zNC4zLTYuNi0yNS43IDIuOC00OS44IDguOS02MS40IDAgMC00LjQtNS44LTgtOC45IDAgMC0xMy44IDAtMjQuNiA1LjMgMTEuOS0xNS4yIDI1LjItMTQuNCAyNS4yLTE0LjQgMC02LjQtLjYtMTQuOS0zLjYtMjEuNi01LjQtMTEtMjMuOC0xMi45LTMxLjcgMi44LjEtLjIuMy0uNC40LS41LTUgMTEuOS0xLjEgNTUuOSAxNi45IDg3LjItMi41IDEuNC05LjEgNi4xLTEzIDEwLTIxLjYgOS43LTU2LjIgNjAuMy01Ni4yIDYwLjMtMjguMiAxMC44LTc3LjIgNTAuOS03MC42IDc5LjcuMyAzIDEuNCA1LjUgMyA3LjUtMi44IDIuMi01LjUgNS04LjMgOC4zLTExLjkgMTMuOC01LjMgMzUuMiAxNy43IDI0LjQgMTUuOC03LjIgMjkuNi0yMC4yIDM2LjMtMzAuNCAwIDAtNS41LTUtMTYuMy00LjQgMjcuNy02LjYgMzQuMy05LjQgNDYuMi05LjEgOCAzLjkgOC0zNC4zIDgtMzQuMyAwLTE0LjctMi4yLTMxLTExLjEtNDEuNSAxMi41IDEyLjIgMjkuMSAzMi43IDI4IDYwLjYtLjggMTguMy0xNS4yIDIzLTE1LjIgMjMtOS4xIDE2LjYtNDMuMiA2NS45LTMwLjQgMTA2IDAgMC05LjctMTQuOS0xMC4yLTIyLjEtMTcuNCAxOS40LTQ2LjUgNTIuMy0yNC42IDY0LjUgMjYuNiAxNC43IDEwOC44LTg4LjYgMTI2LjItMTQyLjMgMzQuNi0yMC44IDU1LjQtNDcuMyA2My45LTY1IDIyIDQzLjUgOTUuMyA5NC41IDEwMS4xIDU5elwiXVxufTtcbnZhciBmYVdlaWJvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dlaWJvJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMThhXCIsIFwiTTQwNyAxNzcuNmM3LjYtMjQtMTMuNC00Ni44LTM3LjQtNDEuNy0yMiA0LjgtMjguOC0yOC4xLTcuMS0zMi44IDUwLjEtMTAuOSA5Mi4zIDM3LjEgNzYuNSA4NC44LTYuOCAyMS4yLTM4LjggMTAuOC0zMi0xMC4zek0yMTQuOCA0NDYuN0MxMDguNSA0NDYuNyAwIDM5NS4zIDAgMzEwLjRjMC00NC4zIDI4LTk1LjQgNzYuMy0xNDMuN0MxNzYgNjcgMjc5LjUgNjUuOCAyNDkuOSAxNjFjLTQgMTMuMSAxMi4zIDUuNyAxMi4zIDYgNzkuNS0zMy42IDE0MC41LTE2LjggMTE0IDUxLjQtMy43IDkuNCAxLjEgMTAuOSA4LjMgMTMuMSAxMzUuNyA0Mi4zIDM0LjggMjE1LjItMTY5LjcgMjE1LjJ6bTE0My43LTE0Ni4zYy01LjQtNTUuNy03OC41LTk0LTE2My40LTg1LjctODQuOCA4LjYtMTQ4LjggNjAuMy0xNDMuNCAxMTZzNzguNSA5NCAxNjMuNCA4NS43Yzg0LjgtOC42IDE0OC44LTYwLjMgMTQzLjQtMTE2ek0zNDcuOSAzNS4xYy0yNS45IDUuNi0xNi44IDQzLjcgOC4zIDM4LjMgNzIuMy0xNS4yIDEzNC44IDUyLjggMTExLjcgMTI0LTcuNCAyNC4yIDI5LjEgMzcgMzcuNCAxMiAzMS45LTk5LjgtNTUuMS0xOTUuOS0xNTcuNC0xNzQuM3ptLTc4LjUgMzExYy0xNy4xIDM4LjgtNjYuOCA2MC0xMDkuMSA0Ni4zLTQwLjgtMTMuMS01OC01My40LTQwLjMtODkuNyAxNy43LTM1LjQgNjMuMS01NS40IDEwMy40LTQ1LjEgNDIgMTAuOCA2My4xIDUwLjIgNDYgODguNXptLTg2LjMtMzBjLTEyLjktNS40LTMwIC4zLTM4IDEyLjktOC4zIDEyLjktNC4zIDI4IDguNiAzNCAxMy4xIDYgMzAuOC4zIDM5LjEtMTIuOSA4LTEzLjEgMy43LTI4LjMtOS43LTM0em0zMi42LTEzLjRjLTUuMS0xLjctMTEuNC42LTE0LjMgNS40LTIuOSA1LjEtMS40IDEwLjYgMy43IDEyLjkgNS4xIDIgMTEuNy0uMyAxNC42LTUuNCAyLjgtNS4yIDEuMS0xMC45LTQtMTIuOXpcIl1cbn07XG52YXIgZmFVbmNoYXJ0ZWQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndW5jaGFydGVkJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlMDg0XCIsIFwiTTE3MS43MywyMzIuODEzQTUuMzgxLDUuMzgxLDAsMCwwLDE3Ni43LDIyOS41LDQ4LjA4MSw0OC4wODEsMCwwLDEsMTkxLjYsMjA0LjI0NGMxLjI0My0uODI4LDEuNjU3LTIuNDg0LDEuNjU3LTQuMTQxYTQuMjIsNC4yMiwwLDAsMC0yLjA3MS0zLjMxMkw3NC40MjksMTI4LjQ3MywxNDguOTU4LDg1YTkuOTQxLDkuOTQxLDAsMCwwLDQuOTY4LTguMjgxLDkuMTA4LDkuMTA4LDAsMCwwLTQuOTY4LTguMjgxTDEyNi42LDU1LjZhOS43NDgsOS43NDgsMCwwLDAtOS41MjMsMGwtMTAwLjIsNTcuOTY2YTkuOTQzLDkuOTQzLDAsMCwwLTQuOTY5LDguMjgxVjIzNi45NTRhOS4xMDksOS4xMDksMCwwLDAsNC45NjksOC4yODFMMzkuMjM1LDI1OC4wN2E4LjgyOSw4LjgyOSwwLDAsMCw0Ljk2OCwxLjI0Miw5LjQsOS40LDAsMCwwLDYuNjI1LTIuNDg0LDEwLjgsMTAuOCwwLDAsMCwyLjktNy4wMzlWMTY0LjVMMTY5LjY2LDIzMi40QTQuNSw0LjUsMCwwLDAsMTcxLjczLDIzMi44MTNaTTMyMy4yNzIsMzc3LjczYTEyLjQ3OCwxMi40NzgsMCwwLDAtNC45NjksMS4yNDJsLTc0LjUyOCw0My4wNjJWMjg3Ljg4MmMwLTIuOS0yLjktNS44LTYuMjExLTQuNTU1YTUzLjAzNiw1My4wMzYsMCwwLDEtMjguOTg0LjQxNCw0Ljg2LDQuODYsMCwwLDAtNi4yMSw0LjU1NVY0MjEuNjE5bC03NC41MjktNDMuMDYxYTguODMsOC44MywwLDAsMC00Ljk2OS0xLjI0Miw5LjYzMSw5LjYzMSwwLDAsMC05LjUyMyw5LjUyM3YyNi4wODVhOS4xMDcsOS4xMDcsMCwwLDAsNC45NjksOC4yODFsMTAwLjIsNTcuNTUzQTguODI5LDguODI5LDAsMCwwLDIyMy40ODYsNDgwYTExLjAyNywxMS4wMjcsMCwwLDAsNC45NjktMS4yNDJsMTAwLjItNTcuNTUzYTkuOTQxLDkuOTQxLDAsMCwwLDQuOTY4LTguMjgxVjM4Ni44MzlDMzMyLjgsMzgyLjI4NSwzMjguMjQsMzc3LjczLDMyMy4yNzIsMzc3LjczWk0yODYuMDA3LDc4YTIzLDIzLDAsMSwwLTIzLTIzQTIzLDIzLDAsMCwwLDI4Ni4wMDcsNzhabTYzLjYyNy0xMC4wODZhMjMsMjMsMCwxLDAsMjMsMjNBMjMsMjMsMCwwLDAsMzQ5LjYzNCw2Ny45MTRaTTQxMi44MTYsMTUxLjZhMjMsMjMsMCwxLDAtMjMtMjNBMjMsMjMsMCwwLDAsNDEyLjgxNiwxNTEuNlptLTYzLjE4Mi05LjJhMjMsMjMsMCwxLDAsMjMsMjNBMjMsMjMsMCwwLDAsMzQ5LjYzNCwxNDIuNFptLTYzLjYyNyw4My4yNDRhMjMsMjMsMCwxLDAtMjMtMjNBMjMsMjMsMCwwLDAsMjg2LjAwNywyMjUuNjQ4Wm0tNjIuMDc0LDM2LjM1OGEyMywyMywwLDEsMC0yMy0yM0EyMywyMywwLDAsMCwyMjMuOTMzLDI2Mi4wMDZabTE4OC44ODMtODIuMzU4YTIzLDIzLDAsMSwwLDIzLDIzQTIzLDIzLDAsMCwwLDQxMi44MTYsMTc5LjY0OFptMCw3Mi4yNzJhMjMsMjMsMCwxLDAsMjMsMjNBMjMsMjMsMCwwLDAsNDEyLjgxNiwyNTEuOTJaXCJdXG59O1xudmFyIGZhRmlyc3RkcmFmdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmaXJzdGRyYWZ0JyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmM2ExXCIsIFwiTTM4NCAxOTJoLTY0djEyOEgxOTJ2MTI4SDB2LTI1LjZoMTY2LjR2LTEyOGgxMjh2LTEyOEgzODRWMTkyem0tMjUuNiAzOC40djEyOGgtMTI4djEyOEg2NFY1MTJoMTkyVjM4NGgxMjhWMjMwLjRoLTI1LjZ6bTI1LjYgMTkyaC04OS42VjUxMkgzMjB2LTY0aDY0di0yNS42ek0wIDB2Mzg0aDEyOFYyNTZoMTI4VjEyOGgxMjhWMEgwelwiXVxufTtcbnZhciBmYVNxdWFyZVlvdXR1YmUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXlvdXR1YmUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFs2MTc5OCwgXCJ5b3V0dWJlLXNxdWFyZVwiXSwgXCJmNDMxXCIsIFwiTTI4MiAyNTYuMmwtOTUuMi01NC4xVjMxMC4zTDI4MiAyNTYuMnpNMzg0IDMySDY0QzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0SDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NmMwLTM1LjMtMjguNy02NC02NC02NHptMTQuNCAxMzYuMWM3LjYgMjguNiA3LjYgODguMiA3LjYgODguMnMwIDU5LjYtNy42IDg4LjFjLTQuMiAxNS44LTE2LjUgMjcuNy0zMi4yIDMxLjlDMzM3LjkgMzg0IDIyNCAzODQgMjI0IDM4NHMtMTEzLjkgMC0xNDIuMi03LjZjLTE1LjctNC4yLTI4LTE2LjEtMzIuMi0zMS45QzQyIDMxNS45IDQyIDI1Ni4zIDQyIDI1Ni4zczAtNTkuNyA3LjYtODguMmM0LjItMTUuOCAxNi41LTI4LjIgMzIuMi0zMi40QzExMC4xIDEyOCAyMjQgMTI4IDIyNCAxMjhzMTEzLjkgMCAxNDIuMiA3LjdjMTUuNyA0LjIgMjggMTYuNiAzMi4yIDMyLjR6XCJdXG59O1xudmFyIGZhWW91dHViZVNxdWFyZSA9IGZhU3F1YXJlWW91dHViZTtcbnZhciBmYVdpa2lwZWRpYVcgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2lraXBlZGlhLXcnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYyNjZcIiwgXCJNNjQwIDUxLjJsLS4zIDEyLjJjLTI4LjEuOC00NSAxNS44LTU1LjggNDAuMy0yNSA1Ny44LTEwMy4zIDI0MC0xNTUuMyAzNTguNkg0MTVsLTgxLjktMTkzLjFjLTMyLjUgNjMuNi02OC4zIDEzMC05OS4yIDE5My4xLS4zLjMtMTUgMC0xNS0uM0MxNzIgMzUyLjMgMTIyLjggMjQzLjQgNzUuOCAxMzMuNCA2NC40IDEwNi43IDI2LjQgNjMuNC4yIDYzLjdjMC0zLjEtLjMtMTAtLjMtMTQuMmgxNjEuOXYxMy45Yy0xOS4yIDEuMS01Mi44IDEzLjMtNDMuMyAzNC4yIDIxLjkgNDkuNyAxMDMuNiAyNDAuMyAxMjUuNiAyODguNiAxNS0yOS43IDU3LjgtMTA5LjIgNzUuMy0xNDIuOC0xMy45LTI4LjMtNTguNi0xMzMuOS03Mi44LTE2MC05LjctMTcuOC0zNi4xLTE5LjQtNTUuOC0xOS43VjQ5LjhsMTQyLjUuM3YxMy4xYy0xOS40LjYtMzguMSA3LjgtMjkuNCAyNi4xIDE4LjkgNDAgMzAuNiA2OC4xIDQ4LjEgMTA0LjcgNS42LTEwLjggMzQuNy02OS40IDQ4LjEtMTAwLjggOC45LTIwLjYtMy45LTI4LjYtMzguNi0yOS40LjMtMy42IDAtMTAuMy4zLTEzLjYgNDQuNC0uMyAxMTEuMS0uMyAxMjMuMS0uNnYxMy42Yy0yMi41LjgtNDUuOCAxMi44LTU4LjEgMzEuN2wtNTkuMiAxMjIuOGM2LjQgMTYuMSA2My4zIDE0Mi44IDY5LjIgMTU2LjdMNTU5LjIgOTEuOGMtOC42LTIzLjEtMzYuNC0yOC4xLTQ3LjItMjguM1Y0OS42bDEyNy44IDEuMS4yLjV6XCJdXG59O1xudmFyIGZhV3ByZXNzciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3cHJlc3NyJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXCJyZW5kYWN0XCJdLCBcImYzZTRcIiwgXCJNMjQ4IDhDMTExLjAzIDggMCAxMTkuMDMgMCAyNTZzMTExLjAzIDI0OCAyNDggMjQ4IDI0OC0xMTEuMDMgMjQ4LTI0OFMzODQuOTcgOCAyNDggOHptMTcxLjMzIDE1OC42Yy0xNS4xOCAzNC41MS0zMC4zNyA2OS4wMi00NS42MyAxMDMuNS0yLjQ0IDUuNTEtNi44OSA4LjI0LTEyLjk3IDguMjQtMjMuMDItLjAxLTQ2LjAzLjA2LTY5LjA1LS4wNS01LjEyLS4wMy04LjI1IDEuODktMTAuMzQgNi43Mi0xMC4xOSAyMy41Ni0yMC42MyA0Ny0zMC45NSA3MC41LTEuNTQgMy41MS00LjA2IDUuMjktNy45MiA1LjI5LTQ1Ljk0LS4wMS05MS44Ny0uMDItMTM3LjgxIDAtMy4xMyAwLTUuNjMtMS4xNS03LjcyLTMuNDUtMTEuMjEtMTIuMzMtMjIuNDYtMjQuNjMtMzMuNjgtMzYuOTQtMi42OS0yLjk1LTIuNzktNi4xOC0xLjIxLTkuNzMgOC42Ni0xOS41NCAxNy4yNy0zOS4xIDI1Ljg5LTU4LjY2IDEyLjkzLTI5LjM1IDI1Ljg5LTU4LjY5IDM4Ljc1LTg4LjA4IDEuNy0zLjg4IDQuMjgtNS42OCA4LjU0LTUuNjUgMTQuMjQuMSAyOC40OC4wMiA0Mi43Mi4wNSA2LjI0LjAxIDkuMiA0Ljg0IDYuNjYgMTAuNTktMTMuNiAzMC43Ny0yNy4xNyA2MS41NS00MC43NCA5Mi4zMy01LjcyIDEyLjk5LTExLjQyIDI1Ljk5LTE3LjA5IDM5LTMuOTEgOC45NSA3LjA4IDExLjk3IDEwLjk1IDUuNi4yMy0uMzctMS40MiA0LjE4IDMwLjAxLTY3LjY5IDEuMzYtMy4xIDMuNDEtNC40IDYuNzctNC4zOSAxNS4yMS4wOCAzMC40My4wMiA0NS42NC4wNCA1LjU2LjAxIDcuOTEgMy42NCA1LjY2IDguNzUtOC4zMyAxOC45Ni0xNi43MSAzNy45LTI0Ljk4IDU2Ljg5LTQuOTggMTEuNDMgOC4wOCAxMi40OSAxMS4yOCA1LjMzLjA0LS4wOCAyNy44OS02My4zMyAzMi4xOS03My4xNiAyLjAyLTQuNjEgNS40NC02LjUxIDEwLjM1LTYuNSAyNi40My4wNSA1Mi44NiAwIDc5LjI5LjA1IDEyLjQ0LjAyIDEzLjkzLTEzLjY1IDMuOS0xMy42NC0yNS4yNi4wMy01MC41Mi4wMi03NS43OC4wMi02LjI3IDAtNy44NC0yLjQ3LTUuMjctOC4yNyA1Ljc4LTEzLjA2IDExLjU5LTI2LjExIDE3LjMtMzkuMjEgMS43My0zLjk2IDQuNTItNS43OSA4Ljg0LTUuNzggMjMuMDkuMDYgMjUuOTguMDIgMTMwLjc4LjAzIDYuMDgtLjAxIDguMDMgMi43OSA1LjYyIDguMjd6XCJdXG59O1xudmFyIGZhUmVuZGFjdCA9IGZhV3ByZXNzcjtcbnZhciBmYUFuZ2VsbGlzdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhbmdlbGxpc3QnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyMDlcIiwgXCJNMzQ3LjEgMjE1LjRjMTEuNy0zMi42IDQ1LjQtMTI2LjkgNDUuNC0xNTcuMSAwLTI2LjYtMTUuNy00OC45LTQzLjctNDguOS00NC42IDAtODQuNiAxMzEuNy05Ny4xIDE2My4xQzI0MiAxNDQgMTk2LjYgMCAxNTYuNiAwYy0zMS4xIDAtNDUuNyAyMi45LTQ1LjcgNTEuNyAwIDM1LjMgMzQuMiAxMjYuOCA0Ni42IDE2Mi02LjMtMi4zLTEzLjEtNC4zLTIwLTQuMy0yMy40IDAtNDguMyAyOS4xLTQ4LjMgNTIuNiAwIDguOSA0LjkgMjEuNCA4IDI5LjctMzYuOSAxMC01MS4xIDM0LjYtNTEuMSA3MS43QzQ2IDQzNS42IDExNC40IDUxMiAyMTAuNiA1MTJjMTE4IDAgMTkxLjQtODguNiAxOTEuNC0yMDIuOSAwLTQzLjEtNi45LTgyLTU0LjktOTMuN3pNMzExLjcgMTA4YzQtMTIuMyAyMS4xLTY0LjMgMzcuMS02NC4zIDguNiAwIDEwLjkgOC45IDEwLjkgMTYgMCAxOS4xLTM4LjYgMTI0LjYtNDcuMSAxNDhsLTM0LTYgMzMuMS05My43ek0xNDIuMyA0OC4zYzAtMTEuOSAxNC41LTQ1LjcgNDYuMyA0Ny4xbDM0LjYgMTAwLjNjLTE1LjYtMS4zLTI3LjctMy0zNS40IDEuNC0xMC45LTI4LjgtNDUuNS0xMTkuNy00NS41LTE0OC44ek0xNDAgMjQ0YzI5LjMgMCA2Ny4xIDk0LjYgNjcuMSAxMDcuNCAwIDUuMS00LjkgMTEuNC0xMC42IDExLjQtMjAuOSAwLTc2LjktNzYuOS03Ni45LTk3LjcuMS03LjcgMTIuNy0yMS4xIDIwLjQtMjEuMXptMTg0LjMgMTg2LjNjLTI5LjEgMzItNjYuMyA0OC42LTEwOS43IDQ4LjYtNTkuNCAwLTEwNi4zLTMyLjYtMTI4LjktODguMy0xNy4xLTQzLjQgMy44LTY4LjMgMjAuNi02OC4zIDExLjQgMCA1NC4zIDYwLjMgNTQuMyA3My4xIDAgNC45LTcuNyA4LjMtMTEuNyA4LjMtMTYuMSAwLTIyLjQtMTUuNS01MS4xLTUxLjQtMjkuNyAyOS43IDIwLjUgODYuOSA1OC4zIDg2LjkgMjYuMSAwIDQzLjEtMjQuMiAzOC00MiAzLjcgMCA4LjMuMyAxMS43LS42IDEuMSAyNy4xIDkuMSA1OS40IDQxLjcgNjEuNyAwLS45IDItNy4xIDItNy40IDAtMTcuNC0xMC42LTMyLjYtMTAuNi01MC4zIDAtMjguMyAyMS43LTU1LjcgNDMuNy03MS43IDgtNiAxNy43LTkuNyAyNy4xLTEzLjEgOS43LTMuNyAyMC04IDI3LjQtMTUuNC0xLjEtMTEuMi01LjctMjEuMS0xNi45LTIxLjEtMjcuNyAwLTEyMC42IDQtMTIwLjYtMzkuNyAwLTYuNy4xLTEzLjEgMTcuNC0xMy4xIDMyLjMgMCAxMTQuMyA4IDEzOC4zIDI5LjEgMTguMSAxNi4xIDI0LjMgMTEzLjItMzEgMTc0Ljd6bS05OC42LTEyNmM5LjcgMy4xIDE5LjcgNCAyOS43IDYtNy40IDUuNC0xNCAxMi0yMC4zIDE5LjEtMi44LTguNS02LjItMTYuOC05LjQtMjUuMXpcIl1cbn07XG52YXIgZmFHYWxhY3RpY1JlcHVibGljID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dhbGFjdGljLXJlcHVibGljJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNTBjXCIsIFwiTTI0OCA1MDRDMTExLjI1IDUwNCAwIDM5Mi43NSAwIDI1NlMxMTEuMjUgOCAyNDggOHMyNDggMTExLjI1IDI0OCAyNDgtMTExLjI1IDI0OC0yNDggMjQ4em0wLTQ3OS40N0MxMjAuMzcgMjQuNTMgMTYuNTMgMTI4LjM3IDE2LjUzIDI1NlMxMjAuMzcgNDg3LjQ3IDI0OCA0ODcuNDcgNDc5LjQ3IDM4My42MyA0NzkuNDcgMjU2IDM3NS42MyAyNC41MyAyNDggMjQuNTN6bTI3LjYyIDIxLjgxdjI0LjYyYTE4NS45MzMgMTg1LjkzMyAwIDAgMSA4My41NyAzNC41NGwxNy4zOS0xNy4zNmMtMjguNzUtMjIuMDYtNjMuMy0zNi44OS0xMDAuOTYtNDEuOHptLTU1LjM3LjA3Yy0zNy42NCA0Ljk0LTcyLjE2IDE5LjgtMTAwLjg4IDQxLjg1bDE3LjI4IDE3LjM2aC4wOGMyNC4wNy0xNy44NCA1Mi41NS0zMC4wNiA4My41Mi0zNC42N1Y0Ni40MXptMTIuMjUgNTAuMTd2ODIuODdjLTEwLjA0IDIuMDMtMTkuNDIgNS45NC0yNy42NyAxMS40MmwtNTguNjItNTguNTktMjEuOTMgMjEuOTMgNTguNjcgNTguNjdjLTUuNDcgOC4yMy05LjQ1IDE3LjU5LTExLjQ3IDI3LjYyaC04Mi45djMxaDgyLjljMi4wMiAxMC4wMiA2LjAxIDE5LjMxIDExLjQ3IDI3LjU0bC01OC42NyA1OC42OSAyMS45MyAyMS45MyA1OC42Mi01OC42MmE3Ny44NzMgNzcuODczIDAgMCAwIDI3LjY3IDExLjQ3djgyLjloMzF2LTgyLjljMTAuMDUtMi4wMyAxOS4zNy02LjA2IDI3LjYyLTExLjU1bDU4LjY3IDU4LjY5IDIxLjkzLTIxLjkzLTU4LjY3LTU4LjY5YzUuNDYtOC4yMyA5LjQ3LTE3LjUyIDExLjUtMjcuNTRoODIuODd2LTMxaC04Mi44N2MtMi4wMi0xMC4wMi02LjAzLTE5LjM4LTExLjUtMjcuNjJsNTguNjctNTguNjctMjEuOTMtMjEuOTMtNTguNjcgNTguNjdjLTguMjUtNS40OS0xNy41Ny05LjQ3LTI3LjYyLTExLjVWOTYuNThoLTMxem0xODMuMjQgMzAuNzJsLTE3LjM2IDE3LjM2YTE4Ni4zMzcgMTg2LjMzNyAwIDAgMSAzNC42NyA4My42N2gyNC42MmMtNC45NS0zNy42OS0xOS44My03Mi4yOS00MS45My0xMDEuMDN6bS0zMzUuNTUuMTNjLTIyLjA2IDI4LjcyLTM2LjkxIDYzLjI2LTQxLjg1IDEwMC45MWgyNC42NWM0LjYtMzAuOTYgMTYuNzYtNTkuNDUgMzQuNTktODMuNTJsLTE3LjM5LTE3LjM5ek0zOC4zNCAyODMuNjdjNC45MiAzNy42NCAxOS43NSA3Mi4xOCA0MS44IDEwMC45bDE3LjM2LTE3LjM5Yy0xNy44MS0yNC4wNy0yOS45Mi01Mi41Ny0zNC41MS04My41MkgzOC4zNHptMzk0LjcgMGMtNC42MSAzMC45OS0xNi44IDU5LjUtMzQuNjcgODMuNmwxNy4zNiAxNy4zNmMyMi4wOC0yOC43NCAzNi45OC02My4yOSA0MS45My0xMDAuOTZoLTI0LjYyek0xMzYuNjYgNDA2LjM4bC0xNy4zNiAxNy4zNmMyOC43MyAyMi4wOSA2My4zIDM2Ljk4IDEwMC45NiA0MS45M3YtMjQuNjRjLTMwLjk5LTQuNjMtNTkuNTMtMTYuNzktODMuNi0zNC42NXptMjIyLjUzLjA1Yy0yNC4wOSAxNy44NC01Mi41OCAzMC4wOC04My41NyAzNC42N3YyNC41N2MzNy42Ny00LjkyIDcyLjIxLTE5Ljc5IDEwMC45Ni00MS44NWwtMTcuMzEtMTcuMzloLS4wOHpcIl1cbn07XG52YXIgZmFOZmNEaXJlY3Rpb25hbCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICduZmMtZGlyZWN0aW9uYWwnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImU1MzBcIiwgXCJNMjExLjggNDg4LjZDMjEzLjQgNDkxLjEgMjEzLjkgNDk0LjIgMjEzLjIgNDk3LjFDMjEyLjYgNTAwIDIxMC44IDUwMi42IDIwOC4zIDUwNC4yQzIwNS43IDUwNS44IDIwMi43IDUwNi4zIDE5OS43IDUwNS43QzEzOC4zIDQ5MS44IDg0LjEgNDU1LjggNDcuNTMgNDA0LjVDMTAuOTcgMzUzLjItNS4zOTUgMjkwLjMgMS41NyAyMjcuN0M4LjUzNiAxNjUgMzguMzQgMTA3LjIgODUuMjkgNjUuMjFDMTMyLjIgMjMuMiAxOTMtLjAxMzEgMjU2IDBDMjU3LjUgMCAyNTguMSAuMjkzMSAyNjAuMyAuODYyN0MyNjEuNyAxLjQzMiAyNjIuMSAyLjI2NyAyNjQgMy4zMTlDMjY1LjEgNC4zNzEgMjY1LjkgNS42MTkgMjY2LjUgNi45OTNDMjY3IDguMzY3IDI2Ny4zIDkuODM5IDI2Ny4zIDExLjMyVjExMi4zTDI5MS44IDg2LjM5QzI5Mi44IDg1LjMxIDI5NCA4NC40NCAyOTUuNCA4My44NEMyOTYuNyA4My4yMyAyOTguMiA4Mi45IDI5OS43IDgyLjg2QzMwMS4yIDgyLjgxIDMwMi42IDgzLjA2IDMwNCA4My41OUMzMDUuNCA4NC4xMiAzMDYuNyA4NC45MiAzMDcuOCA4NS45NEMzMDguOCA4Ni45NiAzMDkuNyA4OC4xOCAzMTAuMyA4OS41NEMzMTAuOSA5MC44OSAzMTEuMyA5Mi4zNSAzMTEuMyA5My44NEMzMTEuMyA5NS4zMiAzMTEuMSA5Ni44IDMxMC42IDk4LjE4QzMxMCA5OS41NyAzMDkuMiAxMDAuOCAzMDguMiAxMDEuOUwyNjQuMiAxNDguNUMyNjMuMSAxNDkuNiAyNjEuOSAxNTAuNSAyNjAuNSAxNTEuMUMyNTkgMTUxLjcgMjU3LjUgMTUyIDI1NS4xIDE1MkMyNTQuNSAxNTIgMjUyLjkgMTUxLjcgMjUxLjUgMTUxLjFDMjUwLjEgMTUwLjUgMjQ4LjggMTQ5LjYgMjQ3LjggMTQ4LjVMMjAzLjcgMTAxLjlDMjAxLjcgOTkuNzQgMjAwLjYgOTYuODMgMjAwLjcgOTMuODRDMjAwLjcgOTAuODQgMjAyIDg3LjEgMjA0LjIgODUuOTRDMjA2LjQgODMuODggMjA5LjMgODIuNzcgMjEyLjMgODIuODZDMjE1LjMgODIuOTQgMjE4LjEgODQuMjEgMjIwLjIgODYuMzlMMjQ0LjcgMTEyLjRWMjIuODlDMTg4LjMgMjUuNjQgMTM0LjkgNDguNzMgOTQuMjMgODcuODdDNTMuNTggMTI3IDI4LjQ5IDE3OS42IDIzLjYxIDIzNS44QzE4LjczIDI5MiAzNC4zOCAzNDguMSA2Ny42OCAzOTMuN0MxMDAuMSA0MzkuMiAxNDkuNyA0NzEuMiAyMDQuNyA0ODMuNkMyMDcuNiA0ODQuMyAyMTAuMiA0ODYuMSAyMTEuOCA0ODguNkwyMTEuOCA0ODguNnpNMTcxLjQgMTI2LjFDMTcwLjYgMTI3LjQgMTY5LjUgMTI4LjUgMTY4LjMgMTI5LjNDMTQ3LjggMTQzLjIgMTMxLjEgMTYxLjkgMTE5LjUgMTgzLjhDMTA3LjkgMjA1LjcgMTAxLjggMjMwLjEgMTAxLjggMjU0LjlDMTAxLjggMjc5LjcgMTA3LjkgMzA0LjEgMTE5LjUgMzI1LjFDMTMxLjEgMzQ3LjkgMTQ3LjggMzY2LjYgMTY4LjMgMzgwLjVDMTcwLjggMzgyLjIgMTcyLjUgMzg0LjggMTczIDM4Ny44QzE3My42IDM5MC43IDE3Mi4xIDM5My44IDE3MS4zIDM5Ni4yQzE2OS42IDM5OC43IDE2Ni4xIDQwMC40IDE2NCA0MDAuMUMxNjEuMSA0MDEuNSAxNTggNDAwLjkgMTU1LjYgMzk5LjJDMTMyIDM4My4yIDExMi44IDM2MS43IDk5LjQ2IDMzNi41Qzg2LjE1IDMxMS40IDc5LjE5IDI4My40IDc5LjE5IDI1NC45Qzc5LjE5IDIyNi41IDg2LjE1IDE5OC40IDk5LjQ2IDE3My4zQzExMi44IDE0OC4xIDEzMiAxMjYuNiAxNTUuNiAxMTAuNkMxNTYuOCAxMDkuOCAxNTguMiAxMDkuMiAxNTkuNiAxMDguOEMxNjEuMSAxMDguNSAxNjIuNiAxMDguNSAxNjQuMSAxMDguOEMxNjUuNSAxMDkgMTY2LjkgMTA5LjYgMTY4LjIgMTEwLjRDMTY5LjUgMTExLjIgMTcwLjUgMTEyLjMgMTcxLjQgMTEzLjVDMTcyLjIgMTE0LjcgMTcyLjggMTE2LjEgMTczLjEgMTE3LjZDMTczLjQgMTE5LjEgMTczLjQgMTIwLjYgMTczLjEgMTIyQzE3Mi44IDEyMy41IDE3Mi4zIDEyNC45IDE3MS40IDEyNi4xSDE3MS40ek0zNDAuOSAzODMuNUMzNDEuNyAzODIuMyAzNDIuOCAzODEuMiAzNDMuMSAzODAuNFYzODAuM0MzNjQuNCAzNjYuMyAzODEuMSAzNDcuNiAzOTIuNyAzMjUuN0M0MDQuMiAzMDMuOSA0MTAuMiAyNzkuNSA0MTAuMiAyNTQuOEM0MTAuMiAyMzAuMSA0MDQuMiAyMDUuNyAzOTIuNyAxODMuOEMzODEuMSAxNjEuMSAzNjQuNCAxNDMuMyAzNDMuMSAxMjkuM0MzNDIuOCAxMjguNSAzNDEuNyAxMjcuNCAzNDAuOSAxMjYuMkMzNDAuMSAxMjQuOSAzMzkuNSAxMjMuNSAzMzkuMyAxMjIuMUMzMzguMSAxMjAuNiAzMzkgMTE5LjEgMzM5LjMgMTE3LjdDMzM5LjYgMTE2LjIgMzQwLjIgMTE0LjggMzQxIDExMy42QzM0MS45IDExMi40IDM0Mi4xIDExMS4zIDM0NC4yIDExMC41QzM0NS40IDEwOS43IDM0Ni44IDEwOS4yIDM0OC4zIDEwOC45QzM0OS44IDEwOC42IDM1MS4yIDEwOC42IDM1Mi43IDEwOC45QzM1NC4yIDEwOS4yIDM1NS41IDEwOS44IDM1Ni44IDExMC43QzM4MC4yIDEyNi43IDM5OS41IDE0OC4yIDQxMi43IDE3My4zQzQyNiAxOTguNCA0MzIuMSAyMjYuNCA0MzIuMSAyNTQuOEM0MzIuMSAyODMuMyA0MjYgMzExLjMgNDEyLjcgMzM2LjRDMzk5LjUgMzYxLjUgMzgwLjIgMzgzIDM1Ni44IDM5OUMzNTUuNSAzOTkuOSAzNTQuMiA0MDAuNSAzNTIuNyA0MDAuOEMzNTEuMiA0MDEuMSAzNDkuOCA0MDEuMSAzNDguMyA0MDAuOEMzNDYuOCA0MDAuNSAzNDUuNCAzOTkuMSAzNDQuMiAzOTkuMkMzNDIuMSAzOTguNCAzNDEuOSAzOTcuMyAzNDEgMzk2LjFDMzQwLjIgMzk0LjkgMzM5LjYgMzkzLjUgMzM5LjMgMzkyQzMzOSAzOTAuNiAzMzguMSAzODkuMSAzMzkuMyAzODcuNkMzMzkuNSAzODYuMiAzNDAuMSAzODQuOCAzNDAuOSAzODMuNVYzODMuNXpNMzEyLjMgNi4zMDdDMzY4LjUgMTkuMDQgNDE4LjcgNTAuMjggNDU1IDk1LjAxQzQ4NS40IDEzMi42IDUwNC42IDE3OCA1MTAuMyAyMjZDNTE1LjkgMjc0IDUwNy45IDMyMi43IDQ4Ny4xIDM2Ni4zQzQ2Ni4yIDQwOS45IDQzMy41IDQ0Ni44IDM5Mi42IDQ3Mi42QzM1MS43IDQ5OC4zIDMwNC40IDUxMiAyNTYgNTEyQzI1NC41IDUxMiAyNTMuMSA1MTEuNyAyNTEuNyA1MTEuMUMyNTAuMyA1MTAuNiAyNDkuMSA1MDkuNyAyNDggNTA4LjdDMjQ2LjEgNTA3LjYgMjQ2LjEgNTA2LjQgMjQ1LjYgNTA1QzI0NSA1MDMuNiAyNDQuNyA1MDIuMiAyNDQuNyA1MDAuN1Y0MDEuNUwyMjAuMiA0MjcuNUMyMTguMSA0MjkuNyAyMTUuMyA0MzAuMSAyMTIuMyA0MzEuMUMyMDkuMyA0MzEuMiAyMDYuNCA0MzAgMjA0LjIgNDI3LjFDMjAyIDQyNS45IDIwMC43IDQyMy4xIDIwMC43IDQyMC4xQzIwMC42IDQxNy4xIDIwMS43IDQxNC4yIDIwMy43IDQxMkwyNDcuOCAzNjUuNEMyNDkuMSAzNjMuMiAyNTIuOSAzNjIgMjU1LjEgMzYyQzI1OS4xIDM2MiAyNjIgMzYzLjIgMjY0LjIgMzY1LjRMMzA4LjIgNDEyQzMxMC4zIDQxNC4yIDMxMS40IDQxNy4xIDMxMS4zIDQyMC4xQzMxMS4yIDQyMy4xIDMwOS45IDQyNS45IDMwNy44IDQyNy4xQzMwNS42IDQzMCAzMDIuNyA0MzEuMiAyOTkuNyA0MzEuMUMyOTYuNyA0MzAuMSAyOTMuOCA0MjkuNyAyOTEuOCA0MjcuNUwyNjcuMyA0MDEuNlY0ODkuMUMzMjMuNyA0ODYuMyAzNzcuMSA0NjMuMyA0MTcuOCA0MjQuMUM0NTguNSAzODQuMSA0ODMuNiAzMzIuNCA0ODguNSAyNzYuMkM0OTMuMyAyMTkuMSA0NzcuNyAxNjMuOSA0NDQuNCAxMTguM0M0MTEuMSA3Mi43NSAzNjIuNCA0MC43OSAzMDcuNCAyOC4zNkMzMDUuOSAyOC4wMyAzMDQuNiAyNy40MiAzMDMuMyAyNi41N0MzMDIuMSAyNS43MSAzMDEuMSAyNC42MyAzMDAuMyAyMy4zN0MyOTkuNSAyMi4xMiAyOTguMSAyMC43MiAyOTguNyAxOS4yNkMyOTguNSAxNy44IDI5OC41IDE2LjMgMjk4LjggMTQuODVDMjk5LjIgMTMuNDEgMjk5LjggMTIuMDQgMzAwLjYgMTAuODJDMzAxLjUgOS42MSAzMDIuNiA4LjU3NyAzMDMuOCA3Ljc4NEMzMDUuMSA2Ljk5IDMwNi41IDYuNDUxIDMwNy45IDYuMTk4QzMwOS40IDUuOTQ1IDMxMC45IDUuOTgyIDMxMi4zIDYuMzA3TDMxMi4zIDYuMzA3ek0zNTMuMSAyNTYuMUMzNTMuMSAyODcuNSAzMzUuNiAzMTcuMiAzMDMuOCAzMzkuNkMzMDEuNyAzNDEuMSAyOTkgMzQxLjkgMjk2LjQgMzQxLjZDMjkzLjcgMzQxLjQgMjkxLjIgMzQwLjMgMjg5LjQgMzM4LjRMMjE5LjMgMjY4LjZDMjE3LjEgMjY2LjUgMjE1LjEgMjYzLjYgMjE1LjkgMjYwLjZDMjE1LjkgMjU3LjYgMjE3LjEgMjU0LjcgMjE5LjIgMjUyLjZDMjIxLjQgMjUwLjUgMjI0LjIgMjQ5LjMgMjI3LjIgMjQ5LjNDMjMwLjIgMjQ5LjMgMjMzLjEgMjUwLjUgMjM1LjIgMjUyLjZMMjk4LjMgMzE1LjRDMzE5LjEgMjk4LjMgMzMwLjUgMjc3LjUgMzMwLjUgMjU2LjFDMzMwLjUgMjMyLjIgMzE2LjQgMjA5LjEgMjkwLjggMTkxQzI4OC4zIDE4OS4zIDI4Ni43IDE4Ni43IDI4Ni4yIDE4My43QzI4NS43IDE4MC44IDI4Ni4zIDE3Ny43IDI4OC4xIDE3NS4zQzI4OS44IDE3Mi44IDI5Mi40IDE3MS4yIDI5NS40IDE3MC43QzI5OC4zIDE3MC4yIDMwMS40IDE3MC44IDMwMy44IDE3Mi42QzMzNS42IDE5NSAzNTMuMSAyMjQuNyAzNTMuMSAyNTYuMVYyNTYuMXpNMjE2LjcgMzQxLjVDMjEzLjcgMzQyIDIxMC43IDM0MS4zIDIwOC4yIDMzOS42QzE3Ni41IDMxNy4yIDE1OC4xIDI4Ny41IDE1OC4xIDI1Ni4xQzE1OC4xIDIyNC43IDE3Ni41IDE5NSAyMDguMiAxNzIuNkMyMTAuNCAxNzEgMjEzLjEgMTcwLjMgMjE1LjcgMTcwLjVDMjE4LjQgMTcwLjggMjIwLjggMTcxLjkgMjIyLjcgMTczLjhMMjkyLjggMjQzLjZDMjk0LjkgMjQ1LjcgMjk2LjEgMjQ4LjYgMjk2LjEgMjUxLjZDMjk2LjEgMjU0LjYgMjk0LjEgMjU3LjQgMjkyLjggMjU5LjZDMjkwLjcgMjYxLjcgMjg3LjggMjYyLjkgMjg0LjkgMjYyLjlDMjgxLjkgMjYyLjkgMjc4LjEgMjYxLjcgMjc2LjkgMjU5LjZMMjEzLjggMTk2LjdDMTkyLjkgMjE0IDE4MS42IDIzNC43IDE4MS42IDI1Ni4xQzE4MS42IDI3OS4xIDE5NS43IDMwMy4xIDIyMS4zIDMyMS4xQzIyMy43IDMyMi45IDIyNS40IDMyNS41IDIyNS45IDMyOC41QzIyNi40IDMzMS40IDIyNS43IDMzNC40IDIyNCAzMzYuOUMyMjIuMyAzMzkuMyAyMTkuNiAzNDEgMjE2LjcgMzQxLjVMMjE2LjcgMzQxLjV6XCJdXG59O1xudmFyIGZhU2t5cGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2t5cGUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxN2VcIiwgXCJNNDI0LjcgMjk5LjhjMi45LTE0IDQuNy0yOC45IDQuNy00My44IDAtMTEzLjUtOTEuOS0yMDUuMy0yMDUuMy0yMDUuMy0xNC45IDAtMjkuNyAxLjctNDMuOCA0LjdDMTYxLjMgNDAuNyAxMzcuNyAzMiAxMTIgMzIgNTAuMiAzMiAwIDgyLjIgMCAxNDRjMCAyNS43IDguNyA0OS4zIDIzLjMgNjguMi0yLjkgMTQtNC43IDI4LjktNC43IDQzLjggMCAxMTMuNSA5MS45IDIwNS4zIDIwNS4zIDIwNS4zIDE0LjkgMCAyOS43LTEuNyA0My44LTQuNyAxOSAxNC42IDQyLjYgMjMuMyA2OC4yIDIzLjMgNjEuOCAwIDExMi01MC4yIDExMi0xMTIgLjEtMjUuNi04LjYtNDkuMi0yMy4yLTY4LjF6bS0xOTQuNiA5MS41Yy02NS42IDAtMTIwLjUtMjkuMi0xMjAuNS02NSAwLTE2IDktMzAuNiAyOS41LTMwLjYgMzEuMiAwIDM0LjEgNDQuOSA4OC4xIDQ0LjkgMjUuNyAwIDQyLjMtMTEuNCA0Mi4zLTI2LjMgMC0xOC43LTE2LTIxLjYtNDItMjgtNjIuNS0xNS40LTExNy44LTIyLTExNy44LTg3LjIgMC01OS4yIDU4LjYtODEuMSAxMDkuMS04MS4xIDU1LjEgMCAxMTAuOCAyMS45IDExMC44IDU1LjQgMCAxNi45LTExLjQgMzEuOC0zMC4zIDMxLjgtMjguMyAwLTI5LjItMzMuNS03NS0zMy41LTI1LjcgMC00MiA3LTQyIDIyLjUgMCAxOS44IDIwLjggMjEuOCA2OS4xIDMzIDQxLjQgOS4zIDkwLjcgMjYuOCA5MC43IDc3LjYgMCA1OS4xLTU3LjEgODYuNS0xMTIgODYuNXpcIl1cbn07XG52YXIgZmFKb2dldCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdqb2dldCcsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjNiN1wiLCBcIk0zNzguMSA0NUMzMzcuNiAxOS45IDI5Mi42IDggMjQ4LjIgOCAxNjUgOCA4My44IDQ5LjkgMzYuOSAxMjUuOWMtNzEuOSAxMTYuNi0zNS42IDI2OS4zIDgxIDM0MS4yczI2OS4zIDM1LjYgMzQxLjItODAuOWM3MS45LTExNi42IDM1LjYtMjY5LjQtODEtMzQxLjJ6bTUxLjggMzIzLjJjLTQwLjQgNjUuNS0xMTAuNCAxMDEuNS0xODIgMTAxLjUtNi44IDAtMTMuNi0uNC0yMC40LTEtOS0xMy42LTE5LjktMzMuMy0yMy43LTQyLjQtNS43LTEzLjctMjcuMi00NS42IDMxLjItNjcuMSA1MS43LTE5LjEgMTc2LjctMTYuNSAyMDguOC0xNy42LTQgOS04LjYgMTcuOS0xMy45IDI2LjZ6bS0yMDAuOC04Ni4zYy01NS41LTEuNC04MS43LTIwLjgtNTguNS00OC4yczUxLjEtNDAuNyA2OC45LTUxLjJjMTcuOS0xMC41IDI3LjMtMzMuNy0yMy42LTI5LjdDODcuMyAxNjEuNSA0OC42IDI1Mi4xIDM3LjYgMjkzYy04LjgtNDkuNy0uMS0xMDIuNyAyOC41LTE0OS4xQzEyOCA0My40IDI1OS42IDEyLjIgMzYwLjEgNzQuMWM3NC44IDQ2LjEgMTExLjIgMTMwLjkgOTkuMyAyMTIuNy0yNC45LS41LTE3OS4zLTMuNi0yMzAuMy00Ljl6bTE4My44LTU0LjhjLTIyLjctNi01NyAxMS4zLTg2LjcgMjcuMi0yOS43IDE1LjgtMzEuMSA4LjItMzEuMSA4LjJzNDAuMi0yOC4xIDUwLjctMzQuNSAzMS45LTE0IDEzLjQtMjQuNmMtMy4yLTEuOC02LjctMi43LTEwLjQtMi43LTE3LjggMC00MS41IDE4LjctNjcuNSAzNS42LTMxLjUgMjAuNS02NS4zIDMxLjMtNjUuMyAzMS4zbDE2OS41LTEuNiA0Ni41LTIzLjRzMy42LTkuNS0xOS4xLTE1LjV6XCJdXG59O1xudmFyIGZhRmVkb3JhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZlZG9yYScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjc5OFwiLCBcIk0uMDQxMyAyNTUuOEMuMTIxOSAxMzIuMiAxMDAuMyAzMiAyMjQgMzJDMzQ3LjcgMzIgNDQ4IDEzMi4zIDQ0OCAyNTZDNDQ4IDM3OS43IDM0Ny44IDQ3OS45IDIyNC4xIDQ4MEg1MC45M0MyMi44NCA0ODAgLjA4MzIgNDU3LjMgLjA0MTYgNDI5LjJIMFYyNTUuOEguMDQxM3pNMzQyLjYgMTkyLjdDMzQyLjYgMTUzIDMwNyAxMjQuMiAyNjkuNCAxMjQuMkMyMzQuNSAxMjQuMiAyMDMuNiAxNTAuNSAxOTkuMyAxODQuMUMxOTkuMSAxODcuOSAxOTguOSAxODkuMSAxOTguOSAxOTIuNkMxOTguOCAyMTMuNyAxOTguOSAyMzUuNCAxOTguMSAyNTdDMTk5IDI4My4xIDE5OS4xIDMwOS4xIDE5OC4xIDMzMy42QzE5OC4xIDM2MC43IDE3OC43IDM3OS4xIDE1My40IDM3OS4xQzEyOC4xIDM3OS4xIDEwNy42IDM1OC45IDEwNy42IDMzMy42QzEwOC4xIDMwNS45IDEzMC4yIDI4OC4zIDE1Ni4xIDI4Ny41SDE1Ni4zTDE4Mi42IDI4Ny4zVjI1MEwxNTYuMyAyNTAuMkMxMDkuMiAyNDkuOCA3MS43MiAyODYuNyA3MC4zNiAzMzMuNkM3MC4zNiAzNzkuMiAxMDcuOSA0MTYuNSAxNTMuNCA0MTYuNUMxOTYuNCA0MTYuNSAyMzIuMSAzODIuOSAyMzYgMzQwLjlMMjM2LjIgMjg3LjRMMjY4LjggMjg3LjFDMjk0LjEgMjg3LjMgMjkzLjggMjQ5LjMgMjY4LjYgMjQ5LjhMMjM2LjIgMjUwLjFDMjM2LjIgMjQzLjcgMjM2LjMgMjM3LjMgMjM2LjMgMjMwLjlDMjM2LjQgMjE4LjIgMjM2LjQgMjA1LjUgMjM2LjIgMTkyLjdDMjM2LjMgMTc2LjIgMjUyIDE2MS41IDI2OS40IDE2MS41QzI4Ni45IDE2MS41IDMwNS4zIDE3MC4yIDMwNS4zIDE5Mi43QzMwNS4zIDE5NS45IDMwNS4yIDE5Ny44IDMwNSAxOTlDMzAzLjEgMjA5LjUgMzEwLjIgMjE5LjQgMzIwLjcgMjIwLjlDMzMxLjMgMjIyLjQgMzQwLjkgMjE0LjggMzQxLjkgMjA0LjNDMzQyLjUgMjAwLjEgMzQyLjYgMTk2LjQgMzQyLjYgMTkyLjdIMzQyLjZ6XCJdXG59O1xudmFyIGZhU3RyaXBlUyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzdHJpcGUtcycsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjQyYVwiLCBcIk0xNTUuMyAxNTQuNmMwLTIyLjMgMTguNi0zMC45IDQ4LjQtMzAuOSA0My40IDAgOTguNSAxMy4zIDE0MS45IDM2LjdWMjYuMUMyOTguMyA3LjIgMjUxLjEgMCAyMDMuOCAwIDg4LjEgMCAxMSA2MC40IDExIDE2MS40YzAgMTU3LjkgMjE2LjggMTMyLjMgMjE2LjggMjAwLjQgMCAyNi40LTIyLjkgMzQuOS01NC43IDM0LjktNDcuMiAwLTEwOC4yLTE5LjUtMTU2LjEtNDUuNXYxMjguNWEzOTYuMDkgMzk2LjA5IDAgMCAwIDE1NiAzMi40YzExOC42IDAgMjAwLjMtNTEgMjAwLjMtMTUzLjYgMC0xNzAuMi0yMTgtMTM5LjctMjE4LTIwMy45elwiXVxufTtcbnZhciBmYU1ldGEgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWV0YScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTQ5YlwiLCBcIk02NDAgMzE3LjlDNjQwIDQwOS4yIDYwMC42IDQ2Ni40IDUyOS43IDQ2Ni40QzQ2Ny4xIDQ2Ni40IDQzMy45IDQzMS44IDM3Mi44IDMyOS44TDM0MS40IDI3Ny4yQzMzMy4xIDI2NC43IDMyNi45IDI1MyAzMjAuMiAyNDIuMkMzMDAuMSAyNzYgMjczLjEgMzI1LjIgMjczLjEgMzI1LjJDMjA2LjEgNDQxLjggMTY4LjUgNDY2LjQgMTE2LjIgNDY2LjRDNDMuNDIgNDY2LjQgMCA0MDkuMSAwIDMyMC41QzAgMTc3LjUgNzkuNzggNDIuNCAxODMuOSA0Mi40QzIzNC4xIDQyLjQgMjc3LjcgNjcuMDggMzI4LjcgMTMxLjlDMzY1LjggODEuOCA0MDYuOCA0Mi40IDQ1OS4zIDQyLjRDNTU4LjQgNDIuNCA2NDAgMTY4LjEgNjQwIDMxNy45SDY0MHpNMjg3LjQgMTkyLjJDMjQ0LjUgMTMwLjEgMjE2LjUgMTExLjcgMTgzIDExMS43QzEyMS4xIDExMS43IDY5LjIyIDIxNy44IDY5LjIyIDMyMS43QzY5LjIyIDM3MC4yIDg3LjcgMzk3LjQgMTE4LjggMzk3LjRDMTQ5IDM5Ny40IDE2Ny44IDM3OC40IDIyMiAyOTMuNkMyMjIgMjkzLjYgMjQ2LjcgMjU0LjUgMjg3LjQgMTkyLjJWMTkyLjJ6TTUzMS4yIDM5Ny40QzU2My40IDM5Ny40IDU3OC4xIDM2OS45IDU3OC4xIDMyMi41QzU3OC4xIDE5OC4zIDUyMy44IDk3LjA4IDQ1NC45IDk3LjA4QzQyMS43IDk3LjA4IDM5My44IDEyMyAzNjAgMTc1LjFDMzY5LjQgMTg4LjkgMzc5LjEgMjA0LjEgMzg5LjMgMjIwLjVMNDI2LjggMjgyLjlDNDg1LjUgMzc3IDUwMC4zIDM5Ny40IDUzMS4yIDM5Ny40TDUzMS4yIDM5Ny40elwiXVxufTtcbnZhciBmYUxhcmF2ZWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGFyYXZlbCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNiZFwiLCBcIk01MDQuNCwxMTUuODNhNS43Miw1LjcyLDAsMCwwLS4yOC0uNjgsOC41Miw4LjUyLDAsMCwwLS41My0xLjI1LDYsNiwwLDAsMC0uNTQtLjcxLDkuMzYsOS4zNiwwLDAsMC0uNzItLjk0Yy0uMjMtLjIyLS41Mi0uNC0uNzctLjZhOC44NCw4Ljg0LDAsMCwwLS45LS42OEw0MDQuNCw1NS41NWE4LDgsMCwwLDAtOCwwTDMwMC4xMiwxMTFoMGE4LjA3LDguMDcsMCwwLDAtLjg4LjY5LDcuNjgsNy42OCwwLDAsMC0uNzguNiw4LjIzLDguMjMsMCwwLDAtLjcyLjkzYy0uMTcuMjQtLjM5LjQ1LS41NC43MWE5LjcsOS43LDAsMCwwLS41MiwxLjI1Yy0uMDguMjMtLjIxLjQ0LS4yOC42OGE4LjA4LDguMDgsMCwwLDAtLjI4LDIuMDhWMjIzLjE4bC04MC4yMiw0Ni4xOVY2My40NGE3LjgsNy44LDAsMCwwLS4yOC0yLjA5Yy0uMDYtLjI0LS4yLS40NS0uMjgtLjY4YTguMzUsOC4zNSwwLDAsMC0uNTItMS4yNGMtLjE0LS4yNi0uMzctLjQ3LS41NC0uNzJhOS4zNiw5LjM2LDAsMCwwLS43Mi0uOTQsOS40Niw5LjQ2LDAsMCwwLS43OC0uNiw5LjgsOS44LDAsMCwwLS44OC0uNjhoMEwxMTUuNjEsMS4wN2E4LDgsMCwwLDAtOCwwTDExLjM0LDU2LjQ5aDBhNi41Miw2LjUyLDAsMCwwLS44OC42OSw3LjgxLDcuODEsMCwwLDAtLjc5LjYsOC4xNSw4LjE1LDAsMCwwLS43MS45M2MtLjE4LjI1LS40LjQ2LS41NS43MmE3Ljg4LDcuODgsMCwwLDAtLjUxLDEuMjQsNi40Niw2LjQ2LDAsMCwwLS4yOS42Nyw4LjE4LDguMTgsMCwwLDAtLjI4LDIuMXYzMjkuN2E4LDgsMCwwLDAsNCw2Ljk1bDE5Mi41LDExMC44NGE4LjgzLDguODMsMCwwLDAsMS4zMy41NGMuMjEuMDguNDEuMi42My4yNmE3LjkyLDcuOTIsMCwwLDAsNC4xLDBjLjItLjA1LjM3LS4xNi41NS0uMjJhOC42LDguNiwwLDAsMCwxLjQtLjU4TDQwNC40LDQwMC4wOWE4LDgsMCwwLDAsNC02Ljk1VjI4Ny44OGw5Mi4yNC01My4xMWE4LDgsMCwwLDAsNC03VjExNy45MkE4LjYzLDguNjMsMCwwLDAsNTA0LjQsMTE1LjgzWk0xMTEuNiwxNy4yOGgwbDgwLjE5LDQ2LjE1LTgwLjIsNDYuMThMMzEuNDEsNjMuNDRabTg4LjI1LDYwVjI3OC42bC00Ni41MywyNi43OS0zMy42OSwxOS40VjEyMy41bDQ2LjUzLTI2Ljc5Wm0wLDQxMi43OEwyMy4zNywzODguNVY3Ny4zMkw1Ny4wNiw5Ni43bDQ2LjUyLDI2LjhWMzM4LjY4YTYuOTQsNi45NCwwLDAsMCwuMTIuOSw4LDgsMCwwLDAsLjE2LDEuMThoMGE1LjkyLDUuOTIsMCwwLDAsLjM4LjksNi4zOCw2LjM4LDAsMCwwLC40MiwxdjBhOC41NCw4LjU0LDAsMCwwLC42Ljc4LDcuNjIsNy42MiwwLDAsMCwuNjYuODRsMCwwYy4yMy4yMi41Mi4zOC43Ny41OGE4LjkzLDguOTMsMCwwLDAsLjg2LjY2bDAsMCwwLDAsOTIuMTksNTIuMThabTgtMTA2LjE3LTgwLjA2LTQ1LjMyLDg0LjA5LTQ4LjQxLDkyLjI2LTUzLjExLDgwLjEzLDQ2LjEzLTU4LjgsMzMuNTZabTE4NC41Miw0LjU3TDIxNS44OCw0OTAuMTFWMzk3LjhMMzQ2LjYsMzIzLjJsNDUuNzctMjYuMTVabTAtMTE5LjEzTDM1OC42OCwyNTBsLTQ2LjUzLTI2Ljc5VjEzMS43OWwzMy42OSwxOS40TDM5Mi4zNywxNzhabTgtMTA1LjI4LTgwLjItNDYuMTcsODAuMi00Ni4xNiw4MC4xOCw0Ni4xNVptOCwxMDUuMjhWMTc4TDQ1NSwxNTEuMTlsMzMuNjgtMTkuNHY5MS4zOWgwWlwiXVxufTtcbnZhciBmYUhvdGphciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdob3RqYXInLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzYjFcIiwgXCJNMzYxLjUgMGMwIDEzMS42LTgwLjcgMTc2LjgtMTQwLjIgMjA5LjRjLS42IC4zLTEuMSAuNi0xLjYgLjljLTUzLjggMzAuMi04OC43IDQ5LjgtODkuNiAxMjJIMzJDMzIgMjAwLjggMTEyLjcgMTU1LjYgMTcyLjIgMTIzQzIyNyA5My4yIDI2Mi41IDczIDI2Mi41IDBoOTguOXpNMzAxIDMwMi42YzU0LjgtMjkuOCA5MC4zLTUwIDkwLjMtMTIzaDk4YzAgMTMxLjYtODAuNyAxNzYuNy0xNDAuMiAyMDkuNGMtNTQuOCAyOS44LTkwLjMgNTAtOTAuMyAxMjNoLTk4YzAtMTMxLjYgODAuNy0xNzYuOCAxNDAuMi0yMDkuNHpcIl1cbn07XG52YXIgZmFCbHVldG9vdGhCID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JsdWV0b290aC1iJyxcbiAgaWNvbjogWzMyMCwgNTEyLCBbXSwgXCJmMjk0XCIsIFwiTTE5Ni40OCAyNjAuMDIzbDkyLjYyNi0xMDMuMzMzTDE0My4xMjUgMHYyMDYuMzNsLTg2LjExMS04Ni4xMTEtMzEuNDA2IDMxLjQwNSAxMDguMDYxIDEwOC4zOTlMMjUuNjA4IDM2OC40MjJsMzEuNDA2IDMxLjQwNSA4Ni4xMTEtODYuMTExTDE0NS44NCA1MTJsMTQ4LjU1Mi0xNDguNjQ0LTk3LjkxMi0xMDMuMzMzem00MC44Ni0xMDIuOTk2bC00OS45NzcgNDkuOTc4LS4zMzgtMTAwLjI5NSA1MC4zMTUgNTAuMzE3ek0xODcuMzYzIDMxMy4wNGw0OS45NzcgNDkuOTc4LTUwLjMxNSA1MC4zMTYuMzM4LTEwMC4yOTR6XCJdXG59O1xudmFyIGZhU3F1YXJlTGV0dGVyYm94ZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtbGV0dGVyYm94ZCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTYyZVwiLCBcIk0zODQgMzJjMzUuMyAwIDY0IDI4LjcgNjQgNjRWNDE2YzAgMzUuMy0yOC43IDY0LTY0IDY0SDY0Yy0zNS4zIDAtNjQtMjguNy02NC02NFY5NkMwIDYwLjcgMjguNyAzMiA2NCAzMkgzODR6TTEwNS4xIDE4N0M2Ni40IDE4NyAzNSAyMTguMyAzNSAyNTdzMzEuNCA3MCA3MC4xIDcwYzI0LjggMCA0Ni41LTEyLjggNTktMzIuMmwuNS0uNy0uNC0uNmMtNi41LTEwLjYtMTAuMi0yMy4xLTEwLjItMzYuNWMwLTEzLjYgMy45LTI2LjMgMTAuNi0zNy4xYy0xMi40LTE5LjgtMzQuNC0zMi45LTU5LjUtMzIuOXpNMjI0IDE4N2MtMjQuOCAwLTQ2LjUgMTIuOC01OSAzMi4ybC0uNSAuNyAuNCAuNmM2LjUgMTAuNiAxMC4yIDIzLjEgMTAuMiAzNi41YzAgMTMuNi0zLjkgMjYuMy0xMC42IDM3LjFDMTc2LjkgMzEzLjggMTk4LjkgMzI3IDIyNCAzMjdjMjQuOCAwIDQ2LjUtMTIuOCA1OS0zMi4ybC41LS43LS40LS42Yy02LjUtMTAuNi0xMC4yLTIzLjEtMTAuMi0zNi41YzAtMTMuNiAzLjktMjYuMyAxMC42LTM3LjFDMjcxLjEgMjAwLjIgMjQ5LjEgMTg3IDIyNCAxODd6bTExOC45IDBjLTI0LjggMC00Ni41IDEyLjgtNTkgMzIuMmwtLjUgLjcgLjQgLjZjNi41IDEwLjYgMTAuMiAyMy4xIDEwLjIgMzYuNWMwIDEzLjYtMy45IDI2LjMtMTAuNiAzNy4xYzEyLjQgMTkuOCAzNC40IDMyLjkgNTkuNSAzMi45YzM4LjcgMCA3MC4xLTMxLjMgNzAuMS03MHMtMzEuNC03MC03MC4xLTcwelwiXVxufTtcbnZhciBmYVN0aWNrZXJNdWxlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0aWNrZXItbXVsZScsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjNmN1wiLCBcIk01NjEuNyAxOTkuNmMtMS4zLjMuMyAwIDAgMHptLTYuMi03Ny40Yy03LjctMjIuMy01LjEtNy4yLTEzLjQtMzYuOS0xLjYtNi41LTMuNi0xNC41LTYuMi0yMC00LjQtOC43LTQuNi03LjUtNC42LTkuNSAwLTUuMyAzMC43LTQ1LjMgMTktNDYuOS01LjctLjYtMTIuMiAxMS42LTIwLjYgMTctOC42IDQuMi04IDUtMTAuMyA1LTIuNiAwLTUuNy0zLTYuMi01LTItNS43IDEuOS0yNS45LTMuNi0yNS45LTMuNiAwLTEyLjMgMjQuOC0xNyAyNS44LTUuMiAxLjMtMjcuOS0xMS40LTc1LjEgMTgtMjUuMyAxMy4yLTg2LjkgNjUuMi04NyA2NS4zLTYuNyA0LjctMjAgNC43LTM1LjUgMTYtNDQuNCAzMC4xLTEwOS42IDkuNC0xMTAuNyA5LTExMC42LTI2LjgtMTI4LTE1LjItMTU5IDExLjUtMjAuOCAxNy45LTIzLjcgMzYuNS0yNC4yIDM4LjktNC4yIDIwLjQgNS4yIDQ4LjMgNi43IDY0LjMgMS44IDE5LjMtMi43IDE3LjcgNy43IDk4LjMuNSAxIDQuMSAwIDUuMSAxLjUgMCA4LjQtMy44IDEyLjEtNC4xIDEzLTEuNSA0LjUtMS41IDEwLjUgMCAxNiAyLjMgOC4yIDguMiAzNy4yIDguMiA0Ni45IDAgNDEuOC40IDQ0IDIuNiA0OS40IDMuOSAxMCAxMi41IDkuMSAxNyAxMiAzLjEgMy41LS41IDguNSAxIDEyLjUuNSAyIDMuNiA0IDYuMiA1IDkuMiAzLjYgMjcgLjMgMjkuOS0yLjUgMS42LTEuNS41LTQuNSAzLjEtNSA1LjEgMCAxMC44LS41IDE0LjQtMi41IDUuMS0yLjUgNC4xLTYgMS41LTEwLjUtLjQtLjgtNy0xMy4zLTkuOC0xNi0yLjEtMi01LjEtMy03LjItNC41LTUuOC00LjktMTAuMy0xOS40LTEwLjMtMTkuNS00LjYtMTkuNC0xMC4zLTQ2LjMtNC4xLTY2LjggNC42LTE3LjIgMzkuNS04Ny43IDM5LjYtODcuOCA0LjEtNi41IDE3LTExLjUgMjcuMy03IDYgMS45IDE5LjMgMjIgNjUuNCAzMC45IDQ3LjkgOC43IDk3LjQtMiAxMTIuMi0yIDIuOCAyLTEuOSAxMy0uNSAzOC45IDAgMjYuNC0uNCAxMy43LTQuMSAyOS45LTIuMiA5LjcgMy40IDIzLjItMS41IDQ2LjktMS40IDkuOC05LjkgMzIuNy04LjIgNDMuNC41IDEgMSAyIDEuNSAzLjUuNSA0LjUgMS41IDguNSA0LjYgMTAgNy4zIDMuNiAxMi0zLjUgOS44IDExLjUtLjcgMy4xLTIuNiAxMiAxLjUgMTUgNC40IDMuNyAzMC42IDMuNCAzNi41LjUgMi42LTEuNSAxLjYtNC41IDYuNC03LjQgMS45LS45IDExLjMtLjQgMTEuMy02LjUuMy0xLjgtOS4yLTE5LjktOS4zLTIwLTIuNi0zLjUtOS4yLTQuNS0xMS4zLTgtNi45LTEwLjEtMS43LTUyLjYuNS01OS40IDMtMTEgNS42LTIyLjQgOC43LTMyLjQgMTEtNDIuNSAxMC4zLTUwLjYgMTYuNS02OC4zLjgtMS44IDYuNC0yMy4xIDEwLjMtMjkuOSA5LjMtMTcgMjEuNy0zMi40IDMzLjUtNDcuNCAxOC0yMi45IDM0LTQ2LjkgNTItNjkuOCA2LjEtNyA4LjItMTMuNyAxOC04IDEwLjggNS43IDIxLjYgNyAzMS45IDE3IDE0LjYgMTIuOCAxMC4yIDE4LjIgMTEuOCAyMi45IDEuNSA1IDcuNyAxMC41IDE0LjkgOS41IDEwLjQtMiAxMy0yLjUgMTMuNC0yLjUgMi42LS41IDUuNy01IDcuMi04IDMuMS01LjUgNy4yLTkgNy4yLTE2LjUgMC03LjctLjQtMi44LTIwLjYtNTIuOXpcIl1cbn07XG52YXIgZmFDcmVhdGl2ZUNvbW1vbnNaZXJvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NyZWF0aXZlLWNvbW1vbnMtemVybycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjRmM1wiLCBcIk0yNDcuNiA4QzM4OS40IDggNDk2IDExOC4xIDQ5NiAyNTZjMCAxNDcuMS0xMTguNSAyNDgtMjQ4LjQgMjQ4QzExMy42IDUwNCAwIDM5NC41IDAgMjU2IDAgMTIzLjEgMTA0LjcgOCAyNDcuNiA4em0uOCA0NC43QzEzMC4yIDUyLjcgNDQuNyAxNTAuNiA0NC43IDI1NmMwIDEwOS44IDkxLjIgMjAyLjggMjAzLjcgMjAyLjggMTAzLjIgMCAyMDIuOC04MS4xIDIwMi44LTIwMi44LjEtMTEzLjgtOTAuMi0yMDMuMy0yMDIuOC0yMDMuM3ptLS40IDYwLjVjLTgxLjkgMC0xMDIuNSA3Ny4zLTEwMi41IDE0Mi44IDAgNjUuNSAyMC42IDE0Mi44IDEwMi41IDE0Mi44UzM1MC41IDMyMS41IDM1MC41IDI1NmMwLTY1LjUtMjAuNi0xNDIuOC0xMDIuNS0xNDIuOHptMCA1My45YzMuMyAwIDYuNC41IDkuMiAxLjIgNS45IDUuMSA4LjggMTIuMSAzLjEgMjEuOWwtNTQuNSAxMDAuMmMtMS43LTEyLjctMS45LTI1LjEtMS45LTM0LjQgMC0yOC44IDItODguOSA0NC4xLTg4Ljl6bTQwLjggNDYuMmMyLjkgMTUuNCAzLjMgMzEuNCAzLjMgNDIuNyAwIDI4LjktMiA4OC45LTQ0LjEgODguOS0xMy41IDAtMzIuNi03LjctMjAuMS0yNi40bDYwLjktMTA1LjJ6XCJdXG59O1xudmFyIGZhSGlwcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdoaXBzJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNDUyXCIsIFwiTTI1MS42IDE1Ny42YzAtMS45LS45LTIuOC0yLjgtMi44aC00MC45Yy0xLjYgMC0yLjcgMS40LTIuNyAyLjh2MjAxLjhjMCAxLjQgMS4xIDIuOCAyLjcgMi44aDQwLjljMS45IDAgMi44LS45IDIuOC0yLjh6TTE1Ni41IDE2OGMtMTYuMS0xMS44LTM2LjMtMTcuOS02MC4zLTE4LTE4LjEtLjEtMzQuNiAzLjctNDkuOCAxMS40VjgwLjJjMC0xLjgtLjktMi43LTIuOC0yLjdIMi43Yy0xLjggMC0yLjcuOS0yLjcgMi43djI3OS4yYzAgMS45LjkgMi44IDIuNyAyLjhoNDFjMS45IDAgMi44LS45IDIuOC0yLjhWMjIzLjNjMC0uOC0yLjgtMjcgNDUuOC0yNyA0OC41IDAgNDUuOCAyNi4xIDQ1LjggMjd2MTIyLjZjMCA5IDcuMyAxNi4zIDE2LjQgMTYuM2gyNy4zYzEuOCAwIDIuNy0uOSAyLjctMi44VjIyMy4zYzAtMjMuNC05LjMtNDEuOC0yOC01NS4zem00NzguNCAxMTAuMWMtNi44LTE1LjctMTguNC0yNy0zNC45LTM0LjFsLTU3LjYtMjUuM2MtOC42LTMuNi05LjItMTEuMi0yLjYtMTYuMSA3LjQtNS41IDQ0LjMtMTMuOSA4NCA2LjggMS43IDEgNC0uMyA0LTIuNHYtNDQuN2MwLTEuMy0uNi0yLjEtMS45LTIuNi0xNy43LTYuNi0zNi4xLTkuOS01NS4xLTkuOS0yNi41IDAtNDUuMyA1LjgtNTguNSAxNS40LS41LjQtMjguNCAyMC0yMi43IDUzLjcgMy40IDE5LjYgMTUuOCAzNC4yIDM3LjIgNDMuNmw1My42IDIzLjVjMTEuNiA1LjEgMTUuMiAxMy4zIDEyLjIgMjEuMi0zLjcgOS4xLTEzLjIgMTMuNi0zNi41IDEzLjYtMjQuMyAwLTQ0LjctOC45LTU4LjQtMTkuMS0yLjEtMS40LTQuNC4yLTQuNCAyLjN2MzQuNGMwIDEwLjQgNC45IDE3LjMgMTQuNiAyMC43IDE1LjYgNS41IDMxLjYgOC4yIDQ4LjIgOC4yIDEyLjcgMCAyNS44LTEuMiAzNi4zLTQuMy43LS4zIDM2LTguOSA0NS42LTQ1LjggMy41LTEzLjUgMi40LTI2LjUtMy4xLTM5LjF6TTM3Ni4yIDE0OS44Yy0zMS43IDAtMTA0LjIgMjAuMS0xMDQuMiAxMDMuNXYxODMuNWMwIC44LjYgMi43IDIuNyAyLjdoNDAuOWMxLjkgMCAyLjgtLjkgMi44LTIuN1YzNDhjMTYuNSAxMi43IDM1LjggMTkuMSA1Ny43IDE5LjEgNjAuNSAwIDEwOC43LTQ4LjUgMTA4LjctMTA4LjcuMS02MC4zLTQ4LjItMTA4LjYtMTA4LjYtMTA4LjZ6bTAgMTcwLjljLTE3LjIgMC0zMS45LTYuMS00NC0xOC4yLTEyLjItMTIuMi0xOC4yLTI2LjgtMTguMi00NCAwLTM0LjUgMjcuNi02Mi4yIDYyLjItNjIuMiAzNC41IDAgNjIuMiAyNy42IDYyLjIgNjIuMi4xIDM0LjMtMjcuMyA2Mi4yLTYyLjIgNjIuMnpNMjI4LjMgNzIuNWMtMTUuOSAwLTI4LjggMTIuOS0yOC45IDI4LjkgMCAxNS42IDEyLjcgMjguOSAyOC45IDI4LjlzMjguOS0xMy4xIDI4LjktMjguOWMwLTE2LjItMTMtMjguOS0yOC45LTI4Ljl6XCJdXG59O1xudmFyIGZhQmVoYW5jZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdiZWhhbmNlJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMWI0XCIsIFwiTTIzMiAyMzcuMmMzMS44LTE1LjIgNDguNC0zOC4yIDQ4LjQtNzQgMC03MC42LTUyLjYtODcuOC0xMTMuMy04Ny44SDB2MzU0LjRoMTcxLjhjNjQuNCAwIDEyNC45LTMwLjkgMTI0LjktMTAyLjkgMC00NC41LTIxLjEtNzcuNC02NC43LTg5Ljd6TTc3LjkgMTM1LjlIMTUxYzI4LjEgMCA1My40IDcuOSA1My40IDQwLjUgMCAzMC4xLTE5LjcgNDIuMi00Ny41IDQyLjJoLTc5di04Mi43em04My4zIDIzMy43SDc3LjlWMjcyaDg0LjljMzQuMyAwIDU2IDE0LjMgNTYgNTAuNiAwIDM1LjgtMjUuOSA0Ny01Ny42IDQ3em0zNTguNS0yNDAuN0gzNzZWOTRoMTQzLjd2MzQuOXpNNTc2IDMwNS4yYzAtNzUuOS00NC40LTEzOS4yLTEyNC45LTEzOS4yLTc4LjIgMC0xMzEuMyA1OC44LTEzMS4zIDEzNS44IDAgNzkuOSA1MC4zIDEzNC43IDEzMS4zIDEzNC43IDYxLjMgMCAxMDEtMjcuNiAxMjAuMS04Ni4zSDUwOWMtNi43IDIxLjktMzQuMyAzMy41LTU1LjcgMzMuNS00MS4zIDAtNjMtMjQuMi02My02NS4zaDE4NS4xYy4zLTQuMi42LTguNy42LTEzLjJ6TTM5MC40IDI3NGMyLjMtMzMuNyAyNC43LTU0LjggNTguNS01NC44IDM1LjQgMCA1My4yIDIwLjggNTYuMiA1NC44SDM5MC40elwiXVxufTtcbnZhciBmYVJlZGRpdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyZWRkaXQnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYxYTFcIiwgXCJNMCAyNTZDMCAxMTQuNiAxMTQuNiAwIDI1NiAwUzUxMiAxMTQuNiA1MTIgMjU2cy0xMTQuNiAyNTYtMjU2IDI1NkwzNy4xIDUxMmMtMTMuNyAwLTIwLjUtMTYuNS0xMC45LTI2LjJMNzUgNDM3QzI4LjcgMzkwLjcgMCAzMjYuNyAwIDI1NnpNMzQ5LjYgMTUzLjZjMjMuNiAwIDQyLjctMTkuMSA0Mi43LTQyLjdzLTE5LjEtNDIuNy00Mi43LTQyLjdjLTIwLjYgMC0zNy44IDE0LjYtNDEuOCAzNGMtMzQuNSAzLjctNjEuNCAzMy02MS40IDY4LjRsMCAuMmMtMzcuNSAxLjYtNzEuOCAxMi4zLTk5IDI5LjFjLTEwLjEtNy44LTIyLjgtMTIuNS0zNi41LTEyLjVjLTMzIDAtNTkuOCAyNi44LTU5LjggNTkuOGMwIDI0IDE0LjEgNDQuNiAzNC40IDU0LjFjMiA2OS40IDc3LjYgMTI1LjIgMTcwLjYgMTI1LjJzMTY4LjctNTUuOSAxNzAuNi0xMjUuM2MyMC4yLTkuNiAzNC4xLTMwLjIgMzQuMS01NGMwLTMzLTI2LjgtNTkuOC01OS44LTU5LjhjLTEzLjcgMC0yNi4zIDQuNi0zNi40IDEyLjRjLTI3LjQtMTctNjIuMS0yNy43LTEwMC0yOS4xbDAtLjJjMC0yNS40IDE4LjktNDYuNSA0My40LTQ5LjlsMCAwYzQuNCAxOC44IDIxLjMgMzIuOCA0MS41IDMyLjh6TTE3Ny4xIDI0Ni45YzE2LjcgMCAyOS41IDE3LjYgMjguNSAzOS4zcy0xMy41IDI5LjYtMzAuMyAyOS42cy0zMS40LTguOC0zMC40LTMwLjVzMTUuNC0zOC4zIDMyLjEtMzguM3ptMTkwLjEgMzguM2MxIDIxLjctMTMuNyAzMC41LTMwLjQgMzAuNXMtMjkuMy03LjktMzAuMy0yOS42Yy0xLTIxLjcgMTEuOC0zOS4zIDI4LjUtMzkuM3MzMS4yIDE2LjYgMzIuMSAzOC4zem0tNDguMSA1Ni43Yy0xMC4zIDI0LjYtMzQuNiA0MS45LTYzIDQxLjlzLTUyLjctMTcuMy02My00MS45Yy0xLjItMi45IC44LTYuMiAzLjktNi41YzE4LjQtMS45IDM4LjMtMi45IDU5LjEtMi45czQwLjcgMSA1OS4xIDIuOWMzLjEgLjMgNS4xIDMuNiAzLjkgNi41elwiXVxufTtcbnZhciBmYURpc2NvcmQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGlzY29yZCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjM5MlwiLCBcIk01MjQuNTMxLDY5LjgzNmExLjUsMS41LDAsMCwwLS43NjQtLjdBNDg1LjA2NSw0ODUuMDY1LDAsMCwwLDQwNC4wODEsMzIuMDNhMS44MTYsMS44MTYsMCwwLDAtMS45MjMuOTEsMzM3LjQ2MSwzMzcuNDYxLDAsMCwwLTE0LjksMzAuNiw0NDcuODQ4LDQ0Ny44NDgsMCwwLDAtMTM0LjQyNiwwLDMwOS41NDEsMzA5LjU0MSwwLDAsMC0xNS4xMzUtMzAuNiwxLjg5LDEuODksMCwwLDAtMS45MjQtLjkxQTQ4My42ODksNDgzLjY4OSwwLDAsMCwxMTYuMDg1LDY5LjEzN2ExLjcxMiwxLjcxMiwwLDAsMC0uNzg4LjY3NkMzOS4wNjgsMTgzLjY1MSwxOC4xODYsMjk0LjY5LDI4LjQzLDQwNC4zNTRhMi4wMTYsMi4wMTYsMCwwLDAsLjc2NSwxLjM3NUE0ODcuNjY2LDQ4Ny42NjYsMCwwLDAsMTc2LjAyLDQ3OS45MThhMS45LDEuOSwwLDAsMCwyLjA2My0uNjc2QTM0OC4yLDM0OC4yLDAsMCwwLDIwOC4xMiw0MzAuNGExLjg2LDEuODYsMCwwLDAtMS4wMTktMi41ODgsMzIxLjE3MywzMjEuMTczLDAsMCwxLTQ1Ljg2OC0yMS44NTMsMS44ODUsMS44ODUsMCwwLDEtLjE4NS0zLjEyNmMzLjA4Mi0yLjMwOSw2LjE2Ni00LjcxMSw5LjEwOS03LjEzN2ExLjgxOSwxLjgxOSwwLDAsMSwxLjktLjI1NmM5Ni4yMjksNDMuOTE3LDIwMC40MSw0My45MTcsMjk1LjUsMGExLjgxMiwxLjgxMiwwLDAsMSwxLjkyNC4yMzNjMi45NDQsMi40MjYsNi4wMjcsNC44NTEsOS4xMzIsNy4xNmExLjg4NCwxLjg4NCwwLDAsMS0uMTYyLDMuMTI2LDMwMS40MDcsMzAxLjQwNywwLDAsMS00NS44OSwyMS44MywxLjg3NSwxLjg3NSwwLDAsMC0xLDIuNjExLDM5MS4wNTUsMzkxLjA1NSwwLDAsMCwzMC4wMTQsNDguODE1LDEuODY0LDEuODY0LDAsMCwwLDIuMDYzLjdBNDg2LjA0OCw0ODYuMDQ4LDAsMCwwLDYxMC43LDQwNS43MjlhMS44ODIsMS44ODIsMCwwLDAsLjc2NS0xLjM1MkM2MjMuNzI5LDI3Ny41OTQsNTkwLjkzMywxNjcuNDY1LDUyNC41MzEsNjkuODM2Wk0yMjIuNDkxLDMzNy41OGMtMjguOTcyLDAtNTIuODQ0LTI2LjU4Ny01Mi44NDQtNTkuMjM5UzE5My4wNTYsMjE5LjEsMjIyLjQ5MSwyMTkuMWMyOS42NjUsMCw1My4zMDYsMjYuODIsNTIuODQzLDU5LjIzOUMyNzUuMzM0LDMxMC45OTMsMjUxLjkyNCwzMzcuNTgsMjIyLjQ5MSwzMzcuNThabTE5NS4zOCwwYy0yOC45NzEsMC01Mi44NDMtMjYuNTg3LTUyLjg0My01OS4yMzlTMzg4LjQzNywyMTkuMSw0MTcuODcxLDIxOS4xYzI5LjY2NywwLDUzLjMwNywyNi44Miw1Mi44NDQsNTkuMjM5QzQ3MC43MTUsMzEwLjk5Myw0NDcuNTM4LDMzNy41OCw0MTcuODcxLDMzNy41OFpcIl1cbn07XG52YXIgZmFDaHJvbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY2hyb21lJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMjY4XCIsIFwiTTAgMjU2QzAgMjA5LjQgMTIuNDcgMTY1LjYgMzQuMjcgMTI3LjFMMTQ0LjEgMzE4LjNDMTY2IDM1Ny41IDIwNy45IDM4NCAyNTYgMzg0QzI3MC4zIDM4NCAyODMuMSAzODEuNyAyOTYuOCAzNzcuNEwyMjAuNSA1MDkuNkM5NS45IDQ5Mi4zIDAgMzg1LjMgMCAyNTZ6TTM2NS4xIDMyMS42QzM3Ny40IDMwMi40IDM4NCAyNzkuMSAzODQgMjU2QzM4NCAyMTcuOCAzNjcuMiAxODMuNSAzNDAuNyAxNjBINDkzLjRDNTA1LjQgMTg5LjYgNTEyIDIyMi4xIDUxMiAyNTZDNTEyIDM5Ny40IDM5Ny40IDUxMS4xIDI1NiA1MTJMMzY1LjEgMzIxLjZ6TTQ3Ny44IDEyOEgyNTZDMTkzLjEgMTI4IDE0Mi4zIDE3Mi4xIDEzMC41IDIzMC43TDU0LjE5IDk4LjQ3QzEwMSAzOC41MyAxNzQgMCAyNTYgMEMzNTAuOCAwIDQzMy41IDUxLjQ4IDQ3Ny44IDEyOFYxMjh6TTE2OCAyNTZDMTY4IDIwNy40IDIwNy40IDE2OCAyNTYgMTY4QzMwNC42IDE2OCAzNDQgMjA3LjQgMzQ0IDI1NkMzNDQgMzA0LjYgMzA0LjYgMzQ0IDI1NiAzNDRDMjA3LjQgMzQ0IDE2OCAzMDQuNiAxNjggMjU2elwiXVxufTtcbnZhciBmYUFwcFN0b3JlSW9zID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FwcC1zdG9yZS1pb3MnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYzNzBcIiwgXCJNNDAwIDMySDQ4QzIxLjUgMzIgMCA1My41IDAgODB2MzUyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OFY4MGMwLTI2LjUtMjEuNS00OC00OC00OHpNMTI3IDM4NC41Yy01LjUgOS42LTE3LjggMTIuOC0yNy4zIDcuMy05LjYtNS41LTEyLjgtMTcuOC03LjMtMjcuM2wxNC4zLTI0LjdjMTYuMS00LjkgMjkuMy0xLjEgMzkuNiAxMS40TDEyNyAzODQuNXptMTM4LjktNTMuOUg4NGMtMTEgMC0yMC05LTIwLTIwczktMjAgMjAtMjBoNTFsNjUuNC0xMTMuMi0yMC41LTM1LjRjLTUuNS05LjYtMi4yLTIxLjggNy4zLTI3LjMgOS42LTUuNSAyMS44LTIuMiAyNy4zIDcuM2w4LjkgMTUuNCA4LjktMTUuNGM1LjUtOS42IDE3LjgtMTIuOCAyNy4zLTcuMyA5LjYgNS41IDEyLjggMTcuOCA3LjMgMjcuM2wtODUuOCAxNDguNmg2Mi4xYzIwLjIgMCAzMS41IDIzLjcgMjIuNyA0MHptOTguMSAwaC0yOWwxOS42IDMzLjljNS41IDkuNiAyLjIgMjEuOC03LjMgMjcuMy05LjYgNS41LTIxLjggMi4yLTI3LjMtNy4zLTMyLjktNTYuOS01Ny41LTk5LjctNzQtMTI4LjEtMTYuNy0yOS00LjgtNTggNy4xLTY3LjggMTMuMSAyMi43IDMyLjcgNTYuNyA1OC45IDEwMmg1MmMxMSAwIDIwIDkgMjAgMjAgMCAxMS4xLTkgMjAtMjAgMjB6XCJdXG59O1xudmFyIGZhQ2NEaXNjb3ZlciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjYy1kaXNjb3ZlcicsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjFmMlwiLCBcIk01MjAuNCAxOTYuMWMwLTcuOS01LjUtMTIuMS0xNS42LTEyLjFoLTQuOXYyNC45aDQuN2MxMC4zIDAgMTUuOC00LjQgMTUuOC0xMi44ek01MjggMzJINDhDMjEuNSAzMiAwIDUzLjUgMCA4MHYzNTJjMCAyNi41IDIxLjUgNDggNDggNDhoNDgwYzI2LjUgMCA0OC0yMS41IDQ4LTQ4VjgwYzAtMjYuNS0yMS41LTQ4LTQ4LTQ4em0tNDQuMSAxMzguOWMyMi42IDAgNTIuOS00LjEgNTIuOSAyNC40IDAgMTIuNi02LjYgMjAuNy0xOC43IDIzLjJsMjUuOCAzNC40aC0xOS42bC0yMi4yLTMyLjhoLTIuMnYzMi44aC0xNnptLTU1LjkuMWg0NS4zdjE0SDQ0NHYxOC4yaDI4LjNWMjE3SDQ0NHYyMi4yaDI5LjNWMjUzSDQyOHptLTY4LjcgMGwyMS45IDU1LjIgMjIuMi01NS4yaDE3LjVsLTM1LjUgODQuMmgtOC42bC0zNS04NC4yem0tNTUuOS0zYzI0LjcgMCA0NC42IDIwIDQ0LjYgNDQuNiAwIDI0LjctMjAgNDQuNi00NC42IDQ0LjYtMjQuNyAwLTQ0LjYtMjAtNDQuNi00NC42IDAtMjQuNyAyMC00NC42IDQ0LjYtNDQuNnptLTQ5LjMgNi4xdjE5Yy0yMC4xLTIwLjEtNDYuOC00LjctNDYuOCAxOSAwIDI1IDI3LjUgMzguNSA0Ni44IDE5LjJ2MTljLTI5LjcgMTQuMy02My4zLTUuNy02My4zLTM4LjIgMC0zMS4yIDMzLjEtNTMgNjMuMy0zOHptLTk3LjIgNjYuM2MxMS40IDAgMjIuNC0xNS4zLTMuMy0yNC40LTE1LTUuNS0yMC4yLTExLjQtMjAuMi0yMi43IDAtMjMuMiAzMC42LTMxLjQgNDkuNy0xNC4zbC04LjQgMTAuOGMtMTAuNC0xMS42LTI0LjktNi4yLTI0LjkgMi41IDAgNC40IDIuNyA2LjkgMTIuMyAxMC4zIDE4LjIgNi42IDIzLjYgMTIuNSAyMy42IDI1LjYgMCAyOS41LTM4LjggMzcuNC01Ni42IDExLjNsMTAuMy05LjljMy43IDcuMSA5LjkgMTAuOCAxNy41IDEwLjh6TTU1LjQgMjUzSDMydi04MmgyMy40YzI2LjEgMCA0NC4xIDE3IDQ0LjEgNDEuMSAwIDE4LjUtMTMuMiA0MC45LTQ0LjEgNDAuOXptNjcuNSAwaC0xNnYtODJoMTZ6TTU0NCA0MzNjMCA4LjItNi44IDE1LTE1IDE1SDEyOGMxODkuNi0zNS42IDM4Mi43LTEzOS4yIDQxNi0xNjB6TTc0LjEgMTkxLjZjLTUuMi00LjktMTEuNi02LjYtMjEuOS02LjZINDh2NTQuMmg0LjJjMTAuMyAwIDE3LTIgMjEuOS02LjQgNS43LTUuMiA4LjktMTIuOCA4LjktMjAuN3MtMy4yLTE1LjUtOC45LTIwLjV6XCJdXG59O1xudmFyIGZhV3BiZWdpbm5lciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3cGJlZ2lubmVyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMjk3XCIsIFwiTTQ2Mi43OTkgMzIyLjM3NEM1MTkuMDEgMzg2LjY4MiA0NjYuOTYxIDQ4MCAzNzAuOTQ0IDQ4MGMtMzkuNjAyIDAtNzguODI0LTE3LjY4Ny0xMDAuMTQyLTUwLjA0LTYuODg3LjM1Ni0yMi43MDIuMzU2LTI5LjU5IDBDMjE5Ljg0OCA0NjIuMzgxIDE4MC41ODggNDgwIDE0MS4wNjkgNDgwYy05NS40OSAwLTE0OC4zNDgtOTIuOTk2LTkxLjg1NS0xNTcuNjI2Qy0yOS45MjUgMTkwLjUyMyA4MC40NzkgMzIgMjU2LjAwNiAzMmMxNzUuNjMyIDAgMjg1Ljg3IDE1OC42MjYgMjA2Ljc5MyAyOTAuMzc0em0tMzM5LjY0Ny04Mi45NzJoNDEuNTI5di01OC4wNzVoLTQxLjUyOXY1OC4wNzV6bTIxNy4xOCA4Ni4wNzJ2LTIzLjgzOWMtNjAuNTA2IDIwLjkxNS0xMzIuMzU1IDkuMTk4LTE4Ny41ODktMzMuOTcxbC4yNDYgMjQuODk3YzUxLjEwMSA0Ni4zNjcgMTMxLjc0NiA1Ny44NzUgMTg3LjM0MyAzMi45MTN6bS0xNTAuNzUzLTg2LjA3MmgxNjYuMDU4di01OC4wNzVIMTg5LjU3OXY1OC4wNzV6XCJdXG59O1xudmFyIGZhQ29uZmx1ZW5jZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjb25mbHVlbmNlJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNzhkXCIsIFwiTTIuMyA0MTIuMmMtNC41IDcuNi0yLjEgMTcuNSA1LjUgMjIuMmwxMDUuOSA2NS4yYzcuNyA0LjcgMTcuNyAyLjQgMjIuNC01LjMgMC0uMS4xLS4yLjEtLjIgNjcuMS0xMTIuMiA4MC41LTk1LjkgMjgwLjktLjcgOC4xIDMuOSAxNy44LjQgMjEuNy03LjcuMS0uMS4xLS4zLjItLjRsNTAuNC0xMTQuMWMzLjYtOC4xLS4xLTE3LjYtOC4xLTIxLjMtMjIuMi0xMC40LTY2LjItMzEuMi0xMDUuOS01MC4zQzEyNy41IDE3OSA0NC42IDM0NS4zIDIuMyA0MTIuMnptNTA3LjQtMzEyLjFjNC41LTcuNiAyLjEtMTcuNS01LjUtMjIuMkwzOTguNCAxMi44Yy03LjUtNS0xNy42LTMuMS0yMi42IDQuNC0uMi4zLS40LjYtLjYgMS02Ny4zIDExMi42LTgxLjEgOTUuNi0yODAuNi45LTguMS0zLjktMTcuOC0uNC0yMS43IDcuNy0uMS4xLS4xLjMtLjIuNEwyMi4yIDE0MS4zYy0zLjYgOC4xLjEgMTcuNiA4LjEgMjEuMyAyMi4yIDEwLjQgNjYuMyAzMS4yIDEwNiA1MC40IDI0OCAxMjAgMzMwLjgtNDUuNCAzNzMuNC0xMTIuOXpcIl1cbn07XG52YXIgZmFTaG9lbGFjZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzaG9lbGFjZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTYwY1wiLCBcIk00MDQuOSAzMzFjMi4yLTEuMSA0LjQtMi4zIDYuNS0zLjdsOC4zLTQuOGMxLjUtMS4xIDQuNC0zLjQgOC43LTYuN2wuNS0uNWMzLjQtMy40IDcuMi01IDExLjMtNC45YzEuOCAwIDMuOSAuNSA2LjQgMS41bDMxLTI3LjVjLjktLjcgMS43LTEuMyAyLjYtMS44aC4yYzMuMy0xLjkgNi0xLjggOC4yIC40YzMuOSAyLjEgNC4yIDUuNiAuOSAxMC42TDQ1Ni45IDMyMmMuMiAuNSAuNCAxIC40IDEuNWMuNSAyLjIgLjMgNC40LS41IDYuNmMtLjcgMS41LTEuOCAyLjktMy4xIDQuMmMtMS40IDEuNC0yLjcgMi44LTQuMiA0LjJsLTE4LjggMTMuN2MtMS43IDEuMi0zLjQgMi4zLTUuMSAzLjNjLTIuMSAxLjMtNC4zIDIuNS02LjYgMy42Yy0xIC40LTEuOSAuOS0yLjkgMS4zYy01LjkgMi41LTExLjkgNC4yLTE4LjIgNWMtMi45IDI0LjUtMTEuMyA0Ny4xLTI1LjEgNjcuOGMtMTcuNSAyNS43LTQxLjQgNDUuNC03MS44IDU4LjhjLTMwLjIgMTMuNS02MyAyMC4yLTk4LjIgMjAuMmMtNDguNi0uNS04OC0xMS40LTExOC4yLTMyLjhDNDkuNSA0NTQuNCAzMiA0MjEuNSAzMiAzODAuM3YtNS42YzEuMi0yOC4xIDkuNS01NC42IDI0LjgtNzkuOGMxNS4xLTI0LjkgMzcuMS00MS43IDY2LjEtNTAuNWMxNC45LTQuNCAyOS45LTYuNiA0NS02LjZjMTUuNSAwIDMxLjYgMi45IDQ4LjEgOC42czM1LjIgMTUuNSA1NS45IDI5LjVMMzI2IDMxMi4yYzE1LjEgOS44IDI4LjggMTYuNSA0MS4yIDIwYy0yLjYtMjUuMS0xMS43LTQ2LjYtMjcuMy02NC41Yy0xNS43LTE4LjEtMzUuNi0zMS4zLTU5LjktMzkuN2wtMjMuMy04Yy0yMS40LTcuNS0zNy4zLTE0LjktNDcuNy0yMi4yYy0yOC4yLTE5LjEtNDMuOC00NS4yLTQ3LTc4LjVsLS41LTkuOGMwLTMyLjEgMTMtNTguOSAzOS04MC41QzIyMy41IDkuNyAyNTEuMSAwIDI4MyAwYzI0IDAgNDUuNiA2LjkgNjQuNyAyMC44YzE5LjIgMTQgMzAuMSAzMy44IDMyLjYgNTkuNGwuNSAxMGMwIDE4LjYtNC44IDM0LjUtMTQuNCA0Ny43Yy05LjggMTMuMi0xOC41IDE5LjktMjYgMTkuOWMtMS42LS4xLTMuMS0uMy00LjUtLjZsLTM0IDMyYy01LjUgMy05LjIgMi41LTExLjEtMS42Yy0xLjktMi4yLTEuOC00LjkgLjUtOC4ybC4yLS4yYy41LS43IDEuMi0xLjUgMi0yLjRsMzEuNi0zMGMtLjQtMS41LS42LTMuMS0uNi00LjhjMC00LjEgMS42LTcuNiA0LjktMTAuNGMxMy44LTEyLjQgMjAuOC0yNi43IDIwLjgtNDIuOGMwLTE2LTYuMS0yOS41LTE4LjItNDAuNHMtMjguNy0xNi41LTQ5LjctMTYuOGMtMjYuMiAwLTQ3LjggNy45LTY0LjcgMjMuN1MxOTIuMyA4OS45IDE5Mi4zIDExMmMwIDE3LjggNi45IDMzLjkgMjAuNiA0OC4zYzEzLjYgMTQuMiAzNC42IDI1LjQgNjMgMzMuNWMzOS44IDExLjUgNzAuMiAzMSA5MS4zIDU4LjNjMTguNyAyNC4yIDI5LjEgNTEuMyAzMS4zIDgxLjRjMi4yLS43IDQuMy0xLjUgNi41LTIuNnpNMjk0LjEgMTc4LjdjMCAxLjEgLjYgMS42IDEuOCAxLjZjLjEgMCA5LjctOC45IDI4LjgtMjYuNmMwLTIuNC01LjEgLjktMTUuMyAxMGMtMTAuMiA5LjItMTUuMyAxNC4yLTE1LjMgMTQuOXptOCA2LjRjMC0xLS41LTEuNS0xLjUtMS41Yy0xLjEgMC0yLjEgLjUtMi45IDEuNmMtMS45LS4xLTMuMyAuMS00LjIgLjdjLS40IC4yLS41IC41LS41IC43YzAgLjcgLjUgMS4zIDEuNSAxLjZoMy4zYzIuOS0xLjEgNC40LTIuMiA0LjQtMy4zem0yMi42LTE5LjljMC0yLjgtMS42LTIuOC00LjkgMGMtMS42IDEuNS0zLjYgMy41LTYgNi4yYy0uOCAuNi0yLjYgMi4yLTUuMyA0LjljLTIuOCAyLjktNC4yIDQuNy00LjIgNS4zbC4yIDEuM2MuNyAuMiAxLjIgLjQgMS41IC40Yy4xIDAgMy4zLTIuOSA5LjUtOC43czkuMy04LjkgOS4zLTkuM3ptMTU5LjcgMTIwbC0zMC42IDI3YzEuOCAxIDMuMiAyLjQgNCA0LjJsMzAuMi0yN2MuMi0xLjIgLjEtMi4yLS41LTIuOWMtLjYtLjUtMS42LS45LTMuMS0xLjN6bS0xLjYtLjlsLS43LS43LTI3IDIxLjkgMS42IDIgMjYtMjMuMXpNMzY2LjYgMzYzLjljLTgtMi4xLTE1LjQtNC42LTIyLjItNy41Yy0xNS4zLTYuMi0zNC4zLTE3LTU3LTMyLjRMMjUwIDI5OC43Yy0xNS44LTEwLjEtMzAuMi0xNy42LTQzLjItMjIuNmMtMTMuMS00LjktMjYtNy4zLTM4LjYtNy4zaC01LjVjLTMyLjIgMS43LTU3LjIgMTMuOC03NSAzNi4yYy0xNi42IDIwLjgtMjUgNDUuMy0yNSA3My42YzAgMzEuOCAxMi44IDU2LjcgMzguMiA3NC43YzI1LjQgMTguMSA2MC4yIDI3LjEgMTA0LjQgMjcuMWMzNC43IDAgNjQtNi4yIDg3LjgtMTguNmMyMy43LTEyLjQgNDIuMS0yOC44IDU1LjItNDkuMmM5LjgtMTUuNSAxNS45LTMxLjggMTguMi00OC44elwiXVxufTtcbnZhciBmYU1kYiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtZGInLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImY4Y2FcIiwgXCJNMTcuMzcgMTYwLjQxTDcgMzUyaDQzLjkxbDUuNTktNzkuODNMODQuNDMgMzUyaDQ0LjcxbDI1LjU0LTc3LjQzIDQuNzkgNzcuNDNIMjA1bC0xMi43OS0xOTEuNTlIMTQ2LjdMMTA2IDI3Ny43NCA2My42NyAxNjAuNDF6bTI4MSAwaC00Ny45VjM1Mmg0Ny45czk1IC44IDk0LjItOTUuNzljLS43OC05NC4yMS05NC4xOC05NS43OC05NC4xOC05NS43OHptLTEuMiAxNDYuNDZWMjA0Ljc4czQ2IDQuMjcgNDYuOCA1MC41Ny00Ni43OCA1MS41NC00Ni43OCA1MS41NHptMjM4LjI5LTc0LjI0YTU2LjE2IDU2LjE2IDAgMCAwIDgtMzguMzFjLTUuMzQtMzUuNzYtNTUuMDgtMzQuMzItNTUuMDgtMzQuMzJoLTUxLjl2MTkxLjU4SDQ4MnM4NyA0Ljc5IDg3LTYzLjg1YzAtNDMuMTQtMzMuNTItNTUuMDgtMzMuNTItNTUuMDh6bS01MS45LTMxLjk0czEzLjU3LTEuNTkgMTYgOS41OWMxLjQzIDYuNjYtNCAxMi00IDEyaC0xMnYtMjEuNTd6bS0uMSAxMDkuNDZsLjEtMjQuOTJWMjY3aC4wOHM0MS41OC00LjczIDQxLjE5IDIyLjQzYy0uMzMgMjUuNjUtNDEuMzUgMjAuNzQtNDEuMzUgMjAuNzR6XCJdXG59O1xudmFyIGZhRG9jaHViID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2RvY2h1YicsXG4gIGljb246IFs0MTYsIDUxMiwgW10sIFwiZjM5NFwiLCBcIk0zOTcuOSAxNjBIMjU2VjE5LjZMMzk3LjkgMTYwek0zMDQgMTkydjEzMGMwIDY2LjgtMzYuNSAxMDAuMS0xMTMuMyAxMDAuMUg5NlY4NC44aDk0LjdjMTIgMCAyMy4xLjggMzMuMSAyLjV2LTg0QzIxMi45IDEuMSAyMDEuNCAwIDE4OS4yIDBIMHY1MTJoMTg5LjJDMzI5LjcgNTEyIDQwMCA0NDcuNCA0MDAgMzE4LjFWMTkyaC05NnpcIl1cbn07XG52YXIgZmFBY2Nlc3NpYmxlSWNvbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhY2Nlc3NpYmxlLWljb24nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFs2MjEwN10sIFwiZjM2OFwiLCBcIk00MjMuOSAyNTUuOEw0MTEgNDEzLjFjLTMuMyA0MC43LTYzLjkgMzUuMS02MC42LTQuOWwxMC0xMjIuNS00MS4xIDIuM2MxMC4xIDIwLjcgMTUuOCA0My45IDE1LjggNjguNSAwIDQxLjItMTYuMSA3OC43LTQyLjMgMTA2LjVsLTM5LjMtMzkuM2M1Ny45LTYzLjcgMTMuMS0xNjcuMi03NC0xNjcuMi0yNS45IDAtNDkuNSA5LjktNjcuMiAyNkw3MyAyNDMuMmMyMi0yMC43IDUwLjEtMzUuMSA4MS40LTQwLjJsNzUuMy04NS43LTQyLjYtMjQuOC01MS42IDQ2Yy0zMCAyNi44LTcwLjYtMTguNS00MC41LTQ1LjRsNjgtNjAuN2M5LjgtOC44IDI0LjEtMTAuMiAzNS41LTMuNiAwIDAgMTM5LjMgODAuOSAxMzkuNSA4MS4xIDE2LjIgMTAuMSAyMC43IDM2IDYuMSA1Mi42TDI4NS43IDIyOWwxMDYuMS01LjljMTguNS0xLjEgMzMuNiAxNC40IDMyLjEgMzIuN3ptLTY0LjktMTU0YzI4LjEgMCA1MC45LTIyLjggNTAuOS01MC45QzQwOS45IDIyLjggMzg3LjEgMCAzNTkgMGMtMjguMSAwLTUwLjkgMjIuOC01MC45IDUwLjkgMCAyOC4xIDIyLjggNTAuOSA1MC45IDUwLjl6TTE3OS42IDQ1Ni41Yy04MC42IDAtMTI3LjQtOTAuNi04Mi43LTE1Ni4xbC0zOS43LTM5LjdDMzYuNCAyODcgMjQgMzIwLjMgMjQgMzU2LjRjMCAxMzAuNyAxNTAuNyAyMDEuNCAyNTEuNCAxMjIuNWwtMzkuNy0zOS43Yy0xNiAxMC45LTM1LjMgMTcuMy01Ni4xIDE3LjN6XCJdXG59O1xudmFyIGZhRWJheSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdlYmF5JyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNGY0XCIsIFwiTTYwNiAxODkuNWwtNTQuOCAxMDkuOS01NC45LTEwOS45aC0zNy41bDEwLjkgMjAuNmMtMTEuNS0xOS0zNS45LTI2LTYzLjMtMjYtMzEuOCAwLTY3LjkgOC43LTcxLjUgNDMuMWgzMy43YzEuNC0xMy44IDE1LjctMjEuOCAzNS0yMS44IDI2IDAgNDEgOS42IDQxIDMzdjMuNGMtMTIuNyAwLTI4IC4xLTQxLjcuNC00Mi40LjktNjkuNiAxMC03Ni43IDM0LjQgMS01LjIgMS41LTEwLjYgMS41LTE2LjIgMC01Mi4xLTM5LjctNzYuMi03NS40LTc2LjItMjEuMyAwLTQzIDUuNS01OC43IDI0LjJ2LTgwLjZoLTMyLjF2MTY5LjVjMCAxMC4zLS42IDIyLjktMS4xIDMzLjFoMzEuNWMuNy02LjMgMS4xLTEyLjkgMS4xLTE5LjUgMTMuNiAxNi42IDM1LjQgMjQuOSA1OC43IDI0LjkgMzYuOSAwIDY0LjktMjEuOSA3My4zLTU0LjItLjUgMi44LS43IDUuOC0uNyA5IDAgMjQuMSAyMS4xIDQ1IDYwLjYgNDUgMjYuNiAwIDQ1LjgtNS43IDYxLjktMjUuNSAwIDYuNi4zIDEzLjMgMS4xIDIwLjJoMjkuOGMtLjctOC4yLTEtMTcuNS0xLTI2Ljh2LTY1LjZjMC05LjMtMS43LTE3LjItNC44LTIzLjhsNjEuNSAxMTYuMS0yOC41IDU0LjFoMzUuOUw2NDAgMTg5LjV6TTI0My43IDMxMy44Yy0yOS42IDAtNTAuMi0yMS41LTUwLjItNTMuOCAwLTMyLjQgMjAuNi01My44IDUwLjItNTMuOCAyOS44IDAgNTAuMiAyMS40IDUwLjIgNTMuOCAwIDMyLjMtMjAuNCA1My44LTUwLjIgNTMuOHptMjAwLjktNDcuM2MwIDMwLTE3LjkgNDguNC01MS42IDQ4LjQtMjUuMSAwLTM1LTEzLjQtMzUtMjUuOCAwLTE5LjEgMTguMS0yNC40IDQ3LjItMjUuMyAxMy4xLS41IDI3LjYtLjYgMzkuNC0uNnptLTQxMS45IDEuNmgxMjguOHYtOC41YzAtNTEuNy0zMy4xLTc1LjQtNzguNC03NS40LTU2LjggMC04MyAzMC44LTgzIDc3LjYgMCA0Mi41IDI1LjMgNzQgODIuNSA3NCAzMS40IDAgNjgtMTEuNyA3NC40LTQ2LjFoLTMzLjFjLTEyIDM1LjgtODcuNyAzNi43LTkxLjItMjEuNnptOTUtMjEuNEgzMy4zYzYuOS01Ni42IDkyLjEtNTQuNyA5NC40IDB6XCJdXG59O1xudmFyIGZhQW1hem9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FtYXpvbicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI3MFwiLCBcIk0yNTcuMiAxNjIuN2MtNDguNyAxLjgtMTY5LjUgMTUuNS0xNjkuNSAxMTcuNSAwIDEwOS41IDEzOC4zIDExNCAxODMuNSA0My4yIDYuNSAxMC4yIDM1LjQgMzcuNSA0NS4zIDQ2LjhsNTYuOC01NlMzNDEgMjg4LjkgMzQxIDI2MS40VjExNC4zQzM0MSA4OSAzMTYuNSAzMiAyMjguNyAzMiAxNDAuNyAzMiA5NCA4NyA5NCAxMzYuM2w3My41IDYuOGMxNi4zLTQ5LjUgNTQuMi00OS41IDU0LjItNDkuNSA0MC43LS4xIDM1LjUgMjkuOCAzNS41IDY5LjF6bTAgODYuOGMwIDgwLTg0LjIgNjgtODQuMiAxNy4yIDAtNDcuMiA1MC41LTU2LjcgODQuMi01Ny44djQwLjZ6bTEzNiAxNjMuNWMtNy43IDEwLTcwIDY3LTE3NC41IDY3UzM0LjIgNDA4LjUgOS43IDM3OWMtNi44LTcuNyAxLTExLjMgNS41LTguM0M4OC41IDQxNS4yIDIwMyA0ODguNSAzODcuNyA0MDFjNy41LTMuNyAxMy4zIDIgNS41IDEyem0zOS44IDIuMmMtNi41IDE1LjgtMTYgMjYuOC0yMS4yIDMxLTUuNSA0LjUtOS41IDIuNy02LjUtMy44czE5LjMtNDYuNSAxMi43LTU1Yy02LjUtOC4zLTM3LTQuMy00OC0zLjItMTAuOCAxLTEzIDItMTQtLjMtMi4zLTUuNyAyMS43LTE1LjUgMzcuNS0xNy41IDE1LjctMS44IDQxLS44IDQ2IDUuNyAzLjcgNS4xIDAgMjcuMS02LjUgNDMuMXpcIl1cbn07XG52YXIgZmFVbnNwbGFzaCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd1bnNwbGFzaCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTA3Y1wiLCBcIk00NDgsMjMwLjE3VjQ4MEgwVjIzMC4xN0gxNDEuMTNWMzU1LjA5SDMwNi44N1YyMzAuMTdaTTMwNi44NywzMkgxNDEuMTNWMTU2LjkxSDMwNi44N1pcIl1cbn07XG52YXIgZmFZYXJuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3lhcm4nLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY3ZTNcIiwgXCJNMzkzLjkgMzQ1LjJjLTM5IDkuMy00OC40IDMyLjEtMTA0IDQ3LjQgMCAwLTIuNyA0LTEwLjQgNS44LTEzLjQgMy4zLTYzLjkgNi02OC41IDYuMS0xMi40LjEtMTkuOS0zLjItMjItOC4yLTYuNC0xNS4zIDkuMi0yMiA5LjItMjItOC4xLTUtOS05LjktOS44LTguMS0yLjQgNS44LTMuNiAyMC4xLTEwLjEgMjYuNS04LjggOC45LTI1LjUgNS45LTM1LjMuOC0xMC44LTUuNy44LTE5LjIuOC0xOS4ycy01LjggMy40LTEwLjUtMy42Yy02LTkuMy0xNy4xLTM3LjMgMTEuNS02Mi0xLjMtMTAuMS00LjYtNTMuNyA0MC42LTg1LjYgMCAwLTIwLjYtMjIuOC0xMi45LTQzLjMgNS0xMy40IDctMTMuMyA4LjYtMTMuOSA1LjctMi4yIDExLjMtNC42IDE1LjQtOS4xIDIwLjYtMjIuMiA0Ni44LTE4IDQ2LjgtMThzMTIuNC0zNy44IDIzLjktMzAuNGMzLjUgMi4zIDE2LjMgMzAuNiAxNi4zIDMwLjZzMTMuNi03LjkgMTUuMS01YzguMiAxNiA5LjIgNDYuNSA1LjYgNjUuMS02LjEgMzAuNi0yMS40IDQ3LjEtMjcuNiA1Ny41LTEuNCAyLjQgMTYuNSAxMCAyNy44IDQxLjMgMTAuNCAyOC42IDEuMSA1Mi43IDIuOCA1NS4zLjggMS40IDEzLjcuOCAzNi40LTEzLjIgMTIuOC03LjkgMjguMS0xNi45IDQ1LjQtMTcgMTYuNy0uNSAxNy42IDE5LjIgNC45IDIyLjJ6TTQ5NiAyNTZjMCAxMzYuOS0xMTEuMSAyNDgtMjQ4IDI0OFMwIDM5Mi45IDAgMjU2IDExMS4xIDggMjQ4IDhzMjQ4IDExMS4xIDI0OCAyNDh6bS03OS4zIDc1LjJjLTEuNy0xMy42LTEzLjItMjMtMjgtMjIuOC0yMiAuMy00MC41IDExLjctNTIuOCAxOS4yLTQuOCAzLTguOSA1LjItMTIuNCA2LjggMy4xLTQ0LjUtMjIuNS03My4xLTI4LjctNzkuNCA3LjgtMTEuMyAxOC40LTI3LjggMjMuNC01My4yIDQuMy0yMS43IDMtNTUuNS02LjktNzQuNS0xLjYtMy4xLTcuNC0xMS4yLTIxLTcuNC05LjctMjAtMTMtMjIuMS0xNS42LTIzLjgtMS4xLS43LTIzLjYtMTYuNC00MS40IDI4LTEyLjIuOS0zMS4zIDUuMy00Ny41IDIyLjgtMiAyLjItNS45IDMuOC0xMC4xIDUuNGguMWMtOC40IDMtMTIuMyA5LjktMTYuOSAyMi4zLTYuNSAxNy40LjIgMzQuNiA2LjggNDUuNy0xNy44IDE1LjktMzcgMzkuOC0zNS43IDgyLjUtMzQgMzYtMTEuOCA3My01LjYgNzkuNi0xLjYgMTEuMSAzLjcgMTkuNCAxMiAyMy44IDEyLjYgNi43IDMwLjMgOS42IDQzLjkgMi44IDQuOSA1LjIgMTMuOCAxMC4xIDMwIDEwLjEgNi44IDAgNTgtMi45IDcyLjYtNi41IDYuOC0xLjYgMTEuNS00LjUgMTQuNi03LjEgOS44LTMuMSAzNi44LTEyLjMgNjIuMi0yOC43IDE4LTExLjcgMjQuMi0xNC4yIDM3LjYtMTcuNCAxMi45LTMuMiAyMS0xNS4xIDE5LjQtMjguMnpcIl1cbn07XG52YXIgZmFTcXVhcmVTdGVhbSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtc3RlYW0nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInN0ZWFtLXNxdWFyZVwiXSwgXCJmMWI3XCIsIFwiTTE2NS42IDMwOS4xYzE4LjYgNy43IDI3LjMgMjguOSAxOS42IDQ3LjRzLTI5IDI3LjItNDcuNiAxOS40bC0yOC41LTExLjhjNSAxMC42IDEzLjggMTkuNCAyNS40IDI0LjJjMjUuMiAxMC41IDU0LjEtMS40IDY0LjYtMjYuNWM1LjEtMTIuMSA1LjEtMjUuNSAuMS0zNy43Yy01LjEtMTIuMS0xNC41LTIxLjYtMjYuNy0yNi43Yy0xMi4xLTUtMjUtNC44LTM2LjQtLjVsMjkuNSAxMi4yek00NDggOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NlYyNDAuN2wxMTYuNiA0OC4xYzEyLTguMiAyNi4yLTEyLjEgNDAuNy0xMS4zbDU1LjQtODAuMnYtMS4xYzAtNDguMiAzOS4zLTg3LjUgODcuNi04Ny41czg3LjYgMzkuMyA4Ny42IDg3LjVjMCA0OS4yLTQwLjkgODguNy04OS42IDg3LjVsLTc5IDU2LjNjMS42IDM4LjUtMjkuMSA2OC44LTY1LjcgNjguOGMtMzEuOCAwLTU4LjUtMjIuNy02NC41LTUyLjdMMCAzMTkuMlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2ek0yNDEuOSAxOTYuMmE1OC40IDU4LjQgMCAxIDAgMTE2LjggMCA1OC40IDU4LjQgMCAxIDAgLTExNi44IDB6bTE0LjYtLjFhNDMuOSA0My45IDAgMSAxIDg3LjggMCA0My45IDQzLjkgMCAxIDEgLTg3LjggMHpcIl1cbn07XG52YXIgZmFTdGVhbVNxdWFyZSA9IGZhU3F1YXJlU3RlYW07XG52YXIgZmE1MDBweCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICc1MDBweCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI2ZVwiLCBcIk0xMDMuMyAzNDQuM2MtNi41LTE0LjItNi45LTE4LjMgNy40LTIzLjEgMjUuNi04IDggOS4yIDQzLjIgNDkuMmguM3YtOTMuOWMxLjItNTAuMiA0NC05Mi4yIDk3LjctOTIuMiA1My45IDAgOTcuNyA0My41IDk3LjcgOTYuOCAwIDYzLjQtNjAuOCAxMTMuMi0xMjguNSA5My4zLTEwLjUtNC4yLTIuMS0zMS43IDguNS0yOC42IDUzIDAgODkuNC0xMC4xIDg5LjQtNjQuNCAwLTYxLTc3LjEtODkuNi0xMTYuOS00NC42LTIzLjUgMjYuNC0xNy42IDQyLjEtMTcuNiAxNTcuNiA1MC43IDMxIDExOC4zIDIyIDE2MC40LTIwLjEgMjQuOC0yNC44IDM4LjUtNTggMzguNS05MyAwLTM1LjItMTMuOC02OC4yLTM4LjgtOTMuMy0yNC44LTI0LjgtNTcuOC0zOC41LTkzLjMtMzguNXMtNjguOCAxMy44LTkzLjUgMzguNWMtLjMuMy0xNiAxNi41LTIxLjIgMjMuOWwtLjUuNmMtMy4zIDQuNy02LjMgOS4xLTIwLjEgNi4xLTYuOS0xLjctMTQuMy01LjgtMTQuMy0xMS44VjIwYzAtNSAzLjktMTAuNSAxMC41LTEwLjVoMjQxLjNjOC4zIDAgOC4zIDExLjYgOC4zIDE1LjEgMCAzLjkgMCAxNS4xLTguMyAxNS4xSDEzMC4zdjEzMi45aC4zYzEwNC4yLTEwOS44IDI4Mi44LTM2IDI4Mi44IDEwOC45IDAgMTc4LjEtMjQ0LjggMjIwLjMtMzEwLjEgNjIuOHptNjMuMy0yNjAuOGMtLjUgNC4yIDQuNiAyNC41IDE0LjYgMjAuNkMzMDYgNTYuNiAzODQgMTQ0LjUgMzkwLjYgMTQ0LjVjNC44IDAgMjIuOC0xNS4zIDE0LjMtMjIuOC05My4yLTg5LTIzNC41LTU3LTIzOC4zLTM4LjJ6TTM5MyA0MTQuN0MyODMgNTI0LjYgOTQgNDc1LjUgNjEgMzEwLjVjMC0xMi4yLTMwLjQtNy40LTI4LjkgMy4zIDI0IDE3My40IDI0NiAyNTYuOSAzODEuNiAxMjEuMyA2LjktNy44LTEyLjYtMjguNC0yMC43LTIwLjR6TTIxMy42IDMwNi42YzAgNCA0LjMgNy4zIDUuNSA4LjUgMyAzIDYuMSA0LjQgOC41IDQuNCAzLjggMCAyLjYuMiAyMi4zLTE5LjUgMTkuNiAxOS4zIDE5LjEgMTkuNSAyMi4zIDE5LjUgNS40IDAgMTguNS0xMC40IDEwLjctMTguMkwyNjUuNiAyODRsMTguMi0xOC4yYzYuMy02LjgtMTAuMS0yMS44LTE2LjItMTUuN0wyNDkuNyAyNjhjLTE4LjYtMTguOC0xOC40LTE5LjUtMjEuNS0xOS41LTUgMC0xOCAxMS43LTEyLjQgMTcuM0wyMzQgMjg0Yy0xOC4xIDE3LjktMjAuNCAxOS4yLTIwLjQgMjIuNnpcIl1cbn07XG52YXIgZmFTcXVhcmVWaW1lbyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtdmltZW8nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInZpbWVvLXNxdWFyZVwiXSwgXCJmMTk0XCIsIFwiTTQ0OCA5NmMwLTM1LjMtMjguNy02NC02NC02NEg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZ6TTMxOC41IDMwOS41QzI3NSAzNjYgMjM4LjIgMzk0LjMgMjA4LjEgMzk0LjNjLTE4LjcgMC0zNC40LTE3LjItNDcuMy01MS42Yy0zLjgtMTMuOS03LjMtMjYuOS0xMC41LTM5Yy0xOC4yLTY4LjMtMjguNi0xMDcuNC00Ni4yLTEwNy40Yy0yLjQgMC0xMC44IDUtMjUuMSAxNS4xTDY0IDE5MmM3LTYuMSAxMy45LTEyLjQgMjAuNi0xOC41YzI5LjEtMjYuMyA1NS42LTUwLjMgNzMuNS01MS45YzI0LjktMi40IDQwLjIgMTQuNiA0NiA1MS4xYzIwLjUgMTI5LjYgMjkuNiAxNDkuMiA2Ni44IDkwLjVjMTMuNC0yMS4yIDIwLjYtMzcuMiAyMS41LTQ4LjNjMy40LTMyLjgtMjUuNi0zMC42LTQ1LjItMjIuMmMxNS43LTUxLjUgNDUuOC03Ni41IDkwLjEtNzUuMWMzMi45IDEgNDguNCAyMi40IDQ2LjUgNjRjLTEuNCAzMS4xLTIzLjIgNzMuOC02NS4zIDEyNy45elwiXVxufTtcbnZhciBmYVZpbWVvU3F1YXJlID0gZmFTcXVhcmVWaW1lbztcbnZhciBmYUFzeW1tZXRyaWsgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXN5bW1ldHJpaycsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjM3MlwiLCBcIk01MTcuNSAzMDkuMmMzOC44LTQwIDU4LjEtODAgNTguNS0xMTYuMS44LTY1LjUtNTkuNC0xMTguMi0xNjkuNC0xMzVDMjc3LjkgMzguNCAxMTguMSA3My42IDAgMTQwLjUgNTIgMTE0IDExMC42IDkyLjMgMTcwLjcgODIuM2M3NC41LTIwLjUgMTUzLTI1LjQgMjIxLjMtMTQuOEM1NDQuNSA5MS4zIDU4OC44IDE5NSA0OTAuOCAyOTkuMmMtMTAuMiAxMC44LTIyIDIxLjEtMzUgMzAuNkwzMDQuOSAxMDMuNCAxMTQuNyAzODguOWMtNjUuNi0yOS40LTc2LjUtOTAuMi0xOS4xLTE1MS4yIDIwLjgtMjIuMiA0OC4zLTQxLjkgNzkuNS01OC4xIDIwLTEyLjIgMzkuNy0yMi42IDYyLTMwLjctNjUuMSAyMC4zLTEyMi43IDUyLjktMTYxLjYgOTIuOS0yNy43IDI4LjYtNDEuNCA1Ny4xLTQxLjcgODIuOS0uNSAzNS4xIDIzLjQgNjUuMSA2OC40IDgzbC0zNC41IDUxLjdoMTAxLjZsMjItMzQuNGMyMi4yIDEgNDUuMyAwIDY4LjYtMi43bC0yMi44IDM3LjFoMTM1LjVMMzQwIDQwNi4zYzE4LjYtNS4zIDM2LjktMTEuNSA1NC41LTE4LjdsNDUuOSA3MS44SDU0Mkw0NjguNiAzNDljMTguNS0xMi4xIDM1LTI1LjUgNDguOS0zOS44em0tMTg3LjYgODAuNWwtMjUtNDAuNi0zMi43IDUzLjNjLTIzLjQgMy41LTQ2LjcgNS4xLTY5LjIgNC40bDEwMS45LTE1OS4zIDc4LjcgMTIzYy0xNy4yIDcuNC0zNS4zIDEzLjktNTMuNyAxOS4yelwiXVxufTtcbnZhciBmYUZvbnRBd2Vzb21lID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZvbnQtYXdlc29tZScsXG4gIGljb246IFs1MTIsIDUxMiwgWzYyNTAxLCA2MjY5NCwgXCJmb250LWF3ZXNvbWUtZmxhZ1wiLCBcImZvbnQtYXdlc29tZS1sb2dvLWZ1bGxcIl0sIFwiZjJiNFwiLCBcIk05MS43IDk2QzEwNi4zIDg2LjggMTE2IDcwLjUgMTE2IDUyQzExNiAyMy4zIDkyLjcgMCA2NCAwUzEyIDIzLjMgMTIgNTJjMCAxNi43IDcuOCAzMS41IDIwIDQxbDAgMyAwIDM1MiAwIDY0IDY0IDAgMC02NCAzNzMuNiAwYzE0LjYgMCAyNi40LTExLjggMjYuNC0yNi40YzAtMy43LS44LTcuMy0yLjMtMTAuN0w0MzIgMjcybDYxLjctMTM4LjljMS41LTMuNCAyLjMtNyAyLjMtMTAuN2MwLTE0LjYtMTEuOC0yNi40LTI2LjQtMjYuNEw5MS43IDk2elwiXVxufTtcbnZhciBmYUZvbnRBd2Vzb21lRmxhZyA9IGZhRm9udEF3ZXNvbWU7XG52YXIgZmFGb250QXdlc29tZUxvZ29GdWxsID0gZmFGb250QXdlc29tZTtcbnZhciBmYUdyYXRpcGF5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dyYXRpcGF5JyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmMTg0XCIsIFwiTTI0OCA4QzExMS4xIDggMCAxMTkuMSAwIDI1NnMxMTEuMSAyNDggMjQ4IDI0OCAyNDgtMTExLjEgMjQ4LTI0OFMzODQuOSA4IDI0OCA4em0xMTQuNiAyMjYuNGwtMTEzIDE1Mi43LTExMi43LTE1Mi43Yy04LjctMTEuOS0xOS4xLTUwLjQgMTMuNi03MiAyOC4xLTE4LjEgNTQuNi00LjIgNjguNSAxMS45IDE1LjkgMTcuOSA0Ni42IDE2LjkgNjEuNyAwIDEzLjktMTYuMSA0MC40LTMwIDY4LjEtMTEuOSAzMi45IDIxLjYgMjIuNiA2MCAxMy44IDcyelwiXVxufTtcbnZhciBmYUFwcGxlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FwcGxlJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmMTc5XCIsIFwiTTMxOC43IDI2OC43Yy0uMi0zNi43IDE2LjQtNjQuNCA1MC04NC44LTE4LjgtMjYuOS00Ny4yLTQxLjctODQuNy00NC42LTM1LjUtMi44LTc0LjMgMjAuNy04OC41IDIwLjctMTUgMC00OS40LTE5LjctNzYuNC0xOS43QzYzLjMgMTQxLjIgNCAxODQuOCA0IDI3My41cTAgMzkuMyAxNC40IDgxLjJjMTIuOCAzNi43IDU5IDEyNi43IDEwNy4yIDEyNS4yIDI1LjItLjYgNDMtMTcuOSA3NS44LTE3LjkgMzEuOCAwIDQ4LjMgMTcuOSA3Ni40IDE3LjkgNDguNi0uNyA5MC40LTgyLjUgMTAyLjYtMTE5LjMtNjUuMi0zMC43LTYxLjctOTAtNjEuNy05MS45em0tNTYuNi0xNjQuMmMyNy4zLTMyLjQgMjQuOC02MS45IDI0LTcyLjUtMjQuMSAxLjQtNTIgMTYuNC02Ny45IDM0LjktMTcuNSAxOS44LTI3LjggNDQuMy0yNS42IDcxLjkgMjYuMSAyIDQ5LjktMTEuNCA2OS41LTM0LjN6XCJdXG59O1xudmFyIGZhSGl2ZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdoaXZlJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJlMDdmXCIsIFwiTTI2MC4zNTMsMjU0Ljg3OCwxMzEuNTM4LDMzLjFhMi4yMDgsMi4yMDgsMCwwLDAtMy44MjkuMDA5TC4zLDI1NC44ODdBMi4yMzQsMi4yMzQsMCwwLDAsLjMsMjU3LjEyMkwxMjkuMTE2LDQ3OC45YTIuMjA4LDIuMjA4LDAsMCwwLDMuODMtLjAwOUwyNjAuMzU4LDI1Ny4xMTNBMi4yMzksMi4yMzksMCwwLDAsMjYwLjM1MywyNTQuODc4Wm0zOS4wNzgtMjUuNzEzYTIuMTksMi4xOSwwLDAsMCwxLjksMS4xMTFoNjYuNTA5YTIuMjI2LDIuMjI2LDAsMCwwLDEuOS0zLjM0MUwyNTkuMTE1LDMzLjExMWEyLjE4NywyLjE4NywwLDAsMC0xLjktMS4xMTFIMTkwLjcwN2EyLjIyNiwyLjIyNiwwLDAsMC0xLjksMy4zNDFaTTUxMS43LDI1NC44ODYsMzg0LjksMzMuMTEyQTIuMiwyLjIsMCwwLDAsMzgyLjk5LDMyaC02Ni42YTIuMjI2LDIuMjI2LDAsMCwwLTEuOTA2LDMuMzRMNDQwLjY1MiwyNTYsMzE0LjQ4MSw0NzYuNjZhMi4yMjYsMi4yMjYsMCwwLDAsMS45MDYsMy4zNGg2Ni42YTIuMiwyLjIsMCwwLDAsMS45MDYtMS4xMTJMNTExLjcsMjU3LjExNEEyLjI0MywyLjI0MywwLDAsMCw1MTEuNywyNTQuODg2Wk0zNjYuMDE2LDI4NC45MTdIMjk5LjUwOGEyLjE4NywyLjE4NywwLDAsMC0xLjksMS4xMTFsLTEwOC44LDE5MC42MzFhMi4yMjYsMi4yMjYsMCwwLDAsMS45LDMuMzQxaDY2LjUwOWEyLjE4NywyLjE4NywwLDAsMCwxLjktMS4xMTFsMTA4LjgtMTkwLjYzMUEyLjIyNiwyLjIyNiwwLDAsMCwzNjYuMDE2LDI4NC45MTdaXCJdXG59O1xudmFyIGZhR2l0a3Jha2VuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dpdGtyYWtlbicsXG4gIGljb246IFs1OTIsIDUxMiwgW10sIFwiZjNhNlwiLCBcIk01NjUuNyAxMTguMWMtMi4zLTYuMS05LjMtOS4yLTE1LjMtNi42LTUuNyAyLjQtOC41IDguOS02LjMgMTQuNiAxMC45IDI5IDE2LjkgNjAuNSAxNi45IDkzLjMgMCAxMzQuNi0xMDAuMyAyNDUuNy0yMzAuMiAyNjIuN1YzNTguNGM3LjktMS41IDE1LjUtMy42IDIzLTYuMnYxMDRjMTA2LjctMjUuOSAxODUuOS0xMjIuMSAxODUuOS0yMzYuOCAwLTkxLjgtNTAuOC0xNzEuOC0xMjUuOC0yMTMuMy01LjctMy4yLTEzLS45LTE1LjkgNS0yLjcgNS41LS42IDEyLjIgNC43IDE1LjEgNjcuOSAzNy42IDExMy45IDExMCAxMTMuOSAxOTMuMiAwIDkzLjMtNTcuOSAxNzMuMS0xMzkuOCAyMDUuNHYtOTIuMmMxNC4yLTQuNSAyNC45LTE3LjcgMjQuOS0zMy41IDAtMTMuMS02LjgtMjQuNC0xNy4zLTMwLjUgOC4zLTc5LjUgNDQuNS01OC42IDQ0LjUtODMuOVYxNzBjMC0zOC04Ny45LTE2MS44LTEyOS0xNjQuNy0yLjUtLjItNS0uMi03LjYgMEMyNTEuMSA4LjMgMTYzLjIgMTMyIDE2My4yIDE3MHYxNC44YzAgMjUuMyAzNi4zIDQuMyA0NC41IDgzLjktMTAuNiA2LjEtMTcuMyAxNy40LTE3LjMgMzAuNSAwIDE1LjggMTAuNiAyOSAyNC44IDMzLjV2OTIuMmMtODEuOS0zMi4yLTEzOS44LTExMi0xMzkuOC0yMDUuNCAwLTgzLjEgNDYtMTU1LjUgMTEzLjktMTkzLjIgNS40LTMgNy40LTkuNiA0LjctMTUuMS0yLjktNS45LTEwLjEtOC4yLTE1LjktNS03NSA0MS41LTEyNS44IDEyMS41LTEyNS44IDIxMy4zIDAgMTE0LjcgNzkuMiAyMTAuOCAxODUuOSAyMzYuOHYtMTA0YzcuNiAyLjUgMTUuMSA0LjYgMjMgNi4ydjEyMy43QzEzMS40IDQ2NS4yIDMxIDM1NC4xIDMxIDIxOS41YzAtMzIuOCA2LTY0LjMgMTYuOS05My4zIDIuMi01LjgtLjYtMTIuMi02LjMtMTQuNi02LTIuNi0xMyAuNC0xNS4zIDYuNkMxNC41IDE0OS43IDggMTgzLjggOCAyMTkuNWMwIDE1NS4xIDEyMi42IDI4MS42IDI3Ni4zIDI4Ny44VjM2MS40YzYuOC40IDE1IC41IDIzLjQgMHYxNDUuOEM0NjEuNCA1MDEuMSA1ODQgMzc0LjYgNTg0IDIxOS41YzAtMzUuNy02LjUtNjkuOC0xOC4zLTEwMS40ek0zNjUuOSAyNzUuNWMxMyAwIDIzLjcgMTAuNSAyMy43IDIzLjcgMCAxMy4xLTEwLjYgMjMuNy0yMy43IDIzLjctMTMgMC0yMy43LTEwLjUtMjMuNy0yMy43IDAtMTMuMSAxMC42LTIzLjcgMjMuNy0yMy43em0tMTM5LjggNDcuM2MtMTMuMiAwLTIzLjctMTAuNy0yMy43LTIzLjdzMTAuNS0yMy43IDIzLjctMjMuN2MxMy4xIDAgMjMuNyAxMC42IDIzLjcgMjMuNyAwIDEzLTEwLjUgMjMuNy0yMy43IDIzLjd6XCJdXG59O1xudmFyIGZhS2V5YmFzZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdrZXliYXNlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNGY1XCIsIFwiTTI4Ni4xNyA0MTlhMTggMTggMCAxIDAgMTggMTggMTggMTggMCAwIDAtMTgtMTh6bTExMS45Mi0xNDcuNmMtOS41LTE0LjYyLTM5LjM3LTUyLjQ1LTg3LjI2LTczLjcxcS05LjEtNC4wNi0xOC4zOC03LjI3YTc4LjQzIDc4LjQzIDAgMCAwLTQ3Ljg4LTEwNC4xM2MtMTIuNDEtNC4xLTIzLjMzLTYtMzIuNDEtNS43Ny0uNi0yLTEuODktMTEgOS40LTM1TDE5OC42NiAzMmwtNS40OCA3LjU2Yy04LjY5IDEyLjA2LTE2LjkyIDIzLjU1LTI0LjM0IDM0Ljg5YTUxIDUxIDAgMCAwLTguMjktMS4yNWMtNDEuNTMtMi40NS0zOS0yLjMzLTQxLjA2LTIuMzMtNTAuNjEgMC01MC43NSA1Mi4xMi01MC43NSA0NS44OGwtMi4zNiAzNi42OGMtMS42MSAyNyAxOS43NSA1MC4yMSA0Ny42MyA1MS44NWw4LjkzLjU0YTIxNCAyMTQgMCAwIDAtNDYuMjkgMzUuNTRDMTQgMzA0LjY2IDE0IDM3NCAxNCA0MjkuNzd2MzMuNjRsMjMuMzItMjkuOGExNDguNiAxNDguNiAwIDAgMCAxNC41NiAzNy41NmM1Ljc4IDEwLjEzIDE0Ljg3IDkuNDUgMTkuNjQgNy4zMyA0LjIxLTEuODcgMTAtNi45MiAzLjc1LTIwLjExYTE3OC4yOSAxNzguMjkgMCAwIDEtMTUuNzYtNTMuMTNsNDYuODItNTkuODMtMjQuNjYgNzQuMTFjNTguMjMtNDIuNCAxNTcuMzgtNjEuNzYgMjM2LjI1LTM4LjU5IDM0LjIgMTAuMDUgNjcuNDUuNjkgODQuNzQtMjMuODQuNzItMSAxLjItMi4xNiAxLjg1LTMuMjJhMTU2LjA5IDE1Ni4wOSAwIDAgMSAyLjggMjguNDNjMCAyMy4zLTMuNjkgNTIuOTMtMTQuODggODEuNjQtMi41MiA2LjQ2IDEuNzYgMTQuNSA4LjYgMTUuNzQgNy40MiAxLjU3IDE1LjMzLTMuMSAxOC4zNy0xMS4xNUM0MjkgNDQzIDQzNCA0MTQgNDM0IDM4Mi4zMmMwLTM4LjU4LTEzLTc3LjQ2LTM1LjkxLTExMC45MnpNMTQyLjM3IDEyOC41OGwtMTUuNy0uOTMtMS4zOSAyMS43OSAxMy4xMy43OGE5MyA5MyAwIDAgMCAuMzIgMTkuNTdsLTIyLjM4LTEuMzRhMTIuMjggMTIuMjggMCAwIDEtMTEuNzYtMTIuNzlMMTA3IDExOWMxLTEyLjE3IDEzLjg3LTExLjI3IDEzLjI2LTExLjMybDI5LjExIDEuNzNhMTQ0LjM1IDE0NC4zNSAwIDAgMC03IDE5LjE3em0xNDguNDIgMTcyLjE4YTEwLjUxIDEwLjUxIDAgMCAxLTE0LjM1LTEuMzlsLTkuNjgtMTEuNDktMzQuNDIgMjdhOC4wOSA4LjA5IDAgMCAxLTExLjEzLTEuMDhsLTE1Ljc4LTE4LjY0YTcuMzggNy4zOCAwIDAgMSAxLjM0LTEwLjM0bDM0LjU3LTI3LjE4LTE0LjE0LTE2Ljc0LTE3LjA5IDEzLjQ1YTcuNzUgNy43NSAwIDAgMS0xMC41OS0xcy0zLjcyLTQuNDItMy44LTQuNTNhNy4zOCA3LjM4IDAgMCAxIDEuMzctMTAuMzRMMjE0IDIyNS4xOXMtMTguNTEtMjItMTguNi0yMi4xNGE5LjU2IDkuNTYgMCAwIDEgMS43NC0xMy40MiAxMC4zOCAxMC4zOCAwIDAgMSAxNC4zIDEuMzdsODEuMDkgOTYuMzJhOS41OCA5LjU4IDAgMCAxLTEuNzQgMTMuNDR6TTE4Ny40NCA0MTlhMTggMTggMCAxIDAgMTggMTggMTggMTggMCAwIDAtMTgtMTh6XCJdXG59O1xudmFyIGZhQXBwbGVQYXkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXBwbGUtcGF5JyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNDE1XCIsIFwiTTExNi45IDE1OC41Yy03LjUgOC45LTE5LjUgMTUuOS0zMS41IDE0LjktMS41LTEyIDQuNC0yNC44IDExLjMtMzIuNiA3LjUtOS4xIDIwLjYtMTUuNiAzMS4zLTE2LjEgMS4yIDEyLjQtMy43IDI0LjctMTEuMSAzMy44bTEwLjkgMTcuMmMtMTcuNC0xLTMyLjMgOS45LTQwLjUgOS45LTguNCAwLTIxLTkuNC0zNC44LTkuMS0xNy45LjMtMzQuNSAxMC40LTQzLjYgMjYuNS0xOC44IDMyLjMtNC45IDgwIDEzLjMgMTA2LjMgOC45IDEzIDE5LjUgMjcuMyAzMy41IDI2LjggMTMuMy0uNSAxOC41LTguNiAzNC41LTguNiAxNi4xIDAgMjAuOCA4LjYgMzQuOCA4LjQgMTQuNS0uMyAyMy42LTEzIDMyLjUtMjYgMTAuMS0xNC44IDE0LjMtMjkuMSAxNC41LTI5LjktLjMtLjMtMjgtMTAuOS0yOC4zLTQyLjktLjMtMjYuOCAyMS45LTM5LjUgMjIuOS00MC4zLTEyLjUtMTguNi0zMi0yMC42LTM4LjgtMjEuMW0xMDAuNC0zNi4ydjE5NC45aDMwLjN2LTY2LjZoNDEuOWMzOC4zIDAgNjUuMS0yNi4zIDY1LjEtNjQuM3MtMjYuNC02NC02NC4xLTY0aC03My4yem0zMC4zIDI1LjVoMzQuOWMyNi4zIDAgNDEuMyAxNCA0MS4zIDM4LjZzLTE1IDM4LjgtNDEuNCAzOC44aC0zNC44VjE2NXptMTYyLjIgMTcwLjljMTkgMCAzNi42LTkuNiA0NC42LTI0LjloLjZ2MjMuNGgyOHYtOTdjMC0yOC4xLTIyLjUtNDYuMy01Ny4xLTQ2LjMtMzIuMSAwLTU1LjkgMTguNC01Ni44IDQzLjZoMjcuM2MyLjMtMTIgMTMuNC0xOS45IDI4LjYtMTkuOSAxOC41IDAgMjguOSA4LjYgMjguOSAyNC41djEwLjhsLTM3LjggMi4zYy0zNS4xIDIuMS01NC4xIDE2LjUtNTQuMSA0MS41LjEgMjUuMiAxOS43IDQyIDQ3LjggNDJ6bTguMi0yMy4xYy0xNi4xIDAtMjYuNC03LjgtMjYuNC0xOS42IDAtMTIuMyA5LjktMTkuNCAyOC44LTIwLjVsMzMuNi0yLjF2MTFjMCAxOC4yLTE1LjUgMzEuMi0zNiAzMS4yem0xMDIuNSA3NC42YzI5LjUgMCA0My40LTExLjMgNTUuNS00NS40TDY0MCAxOTNoLTMwLjhsLTM1LjYgMTE1LjFoLS42TDUzNy40IDE5M2gtMzEuNkw1NTcgMzM0LjlsLTIuOCA4LjZjLTQuNiAxNC42LTEyLjEgMjAuMy0yNS41IDIwLjMtMi40IDAtNy0uMy04LjktLjV2MjMuNGMxLjguNCA5LjMuNyAxMS42Ljd6XCJdXG59O1xudmFyIGZhUGFkbGV0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BhZGxldCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTRhMFwiLCBcIk0yOTcuOSAwTDI5OCAuMDAxQzMwNS42IC4xMDc4IDMxMi40IDQuNzIgMzE1LjUgMTEuNzhMNDQ3LjUgMzIwLjNMNDQ3LjggMzIwLjJMNDQ4IDMyMC42TDQ0NS4yIDMzMC42TDQwMi4zIDQ4OC42QzM5OC42IDUwNC44IDM4Mi42IDUxNC45IDM2Ni41IDUxMS4yTDI5OC4xIDQ5NS42TDIyOS42IDUxMS4yQzIxMy41IDUxNC45IDE5Ny41IDUwNC44IDE5My44IDQ4OC42TDE1MC45IDMzMC42TDE0OC4yIDMyMC42TDE0OC4zIDMyMC4yTDI4MC40IDExLjc4QzI4My40IDQuNzk3IDI5MC4zIC4xODM3IDI5Ny45IC4wMDA2TDI5Ny45IDB6TTE2MC4xIDMyMi4xTDI5MS4xIDM2MS4yTDI5OCA0ODMuN0wzMDUuOSAzNjIuMkw0MzYuNSAzMjIuOUw0MzYuNyAzMjIuOEwzMDUuNyAzNDcuOUwyOTcuMSAyNy43MkwyOTEuOSAzNDcuOUwxNjAuMSAzMjIuMXpNNDI2IDIyMi42TDUyMC40IDE4MS42SDU5NC4yTDQzNy4yIDQyOS4yTDQ2OC44IDMyMC4yTDQyNiAyMjIuNnpNNTk3LjUgMTgxLjRMNjM4LjkgMjU3LjZDNjQyLjkgMjY1LjEgNjM1IDI3My41IDYyNy4zIDI2OS44TDU3OS43IDI0Ny4xTDU5Ny41IDE4MS40ek0xMjcuMyAzMTguNUwxNTguNyA0MzBMMS42MSAxNTQuNUMtNC4yOTIgMTQ0LjEgNy4xMjggMTMyLjUgMTcuNTUgMTM4LjNMMTY5LjQgMjIyLjVMMTI3LjMgMzE4LjV6XCJdXG59O1xudmFyIGZhQW1hem9uUGF5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FtYXpvbi1wYXknLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY0MmNcIiwgXCJNMTQgMzI1LjNjMi4zLTQuMiA1LjItNC45IDkuNy0yLjUgMTAuNCA1LjYgMjAuNiAxMS40IDMxLjIgMTYuN2E1OTUuODggNTk1Ljg4IDAgMCAwIDEyNy40IDQ2LjMgNjE2LjYxIDYxNi42MSAwIDAgMCA2My4yIDExLjggNjAzLjMzIDYwMy4zMyAwIDAgMCA5NSA1LjJjMTcuNC0uNCAzNC44LTEuOCA1Mi4xLTMuOGE2MDMuNjYgNjAzLjY2IDAgMCAwIDE2My4zLTQyLjhjMi45LTEuMiA1LjktMiA5LjEtMS4yIDYuNyAxLjggOSA5IDQuMSAxMy45YTcwIDcwIDAgMCAxLTkuNiA3LjRjLTMwLjcgMjEuMS02NC4yIDM2LjQtOTkuNiA0Ny45YTQ3My4zMSA0NzMuMzEgMCAwIDEtNzUuMSAxNy42IDQzMSA0MzEgMCAwIDEtNTMuMiA0LjggMjEuMyAyMS4zIDAgMCAwLTIuNS4zSDMwOGEyMS4zIDIxLjMgMCAwIDAtMi41LS4zYy0zLjYtLjItNy4yLS4zLTEwLjctLjRhNDI2LjMgNDI2LjMgMCAwIDEtNTAuNC01LjNBNDQ4LjQgNDQ4LjQgMCAwIDEgMTY0IDQyMGE0NDMuMzMgNDQzLjMzIDAgMCAxLTE0NS42LTg3Yy0xLjgtMS42LTMtMy44LTQuNC01Ljd6TTE3MiA2NS4xbC00LjMuNmE4MC45MiA4MC45MiAwIDAgMC0zOCAxNS4xYy0yLjQgMS43LTQuNiAzLjUtNy4xIDUuNGE0LjI5IDQuMjkgMCAwIDEtLjQtMS40Yy0uNC0yLjctLjgtNS41LTEuMy04LjItLjctNC42LTMtNi42LTcuNi02LjZoLTExLjVjLTYuOSAwLTguMiAxLjMtOC4yIDguMnYyMDkuM2MwIDEgMCAyIC4xIDMgLjIgMyAyIDQuOSA0LjkgNSA3IC4xIDE0LjEuMSAyMS4xIDAgMi45IDAgNC43LTIgNS01IC4xLTEgLjEtMiAuMS0zdi03Mi40YzEuMS45IDEuNyAxLjQgMi4yIDEuOSAxNy45IDE0LjkgMzguNSAxOS44IDYxIDE1LjQgMjAuNC00IDM0LjYtMTYuNSA0My44LTM0LjkgNy0xMy45IDkuOS0yOC43IDEwLjMtNDQuMS41LTE3LjEtMS4yLTMzLjktOC4xLTQ5LjgtOC41LTE5LjYtMjIuNi0zMi41LTQzLjktMzYuOS0zLjItLjctNi41LTEtOS44LTEuNS0yLjgtLjEtNS41LS4xLTguMy0uMXpNMTI0LjYgMTA3YTMuNDggMy40OCAwIDAgMSAxLjctMy4zYzEzLjctOS41IDI4LjgtMTQuNSA0NS42LTEzLjIgMTQuOSAxLjEgMjcuMSA4LjQgMzMuNSAyNS45IDMuOSAxMC43IDQuOSAyMS44IDQuOSAzMyAwIDEwLjQtLjggMjAuNi00IDMwLjYtNi44IDIxLjMtMjIuNCAyOS40LTQyLjYgMjguNS0xNC0uNi0yNi4yLTYtMzcuNC0xMy45YTMuNTcgMy41NyAwIDAgMS0xLjctMy4zYy4xLTE0LjEgMC0yOC4xIDAtNDIuMnMuMS0yOCAwLTQyLjF6bTIwNS43LTQxLjljLTEgLjEtMiAuMy0yLjkuNGExNDggMTQ4IDAgMCAwLTI4LjkgNC4xYy02LjEgMS42LTEyIDMuOC0xNy45IDUuOC0zLjYgMS4yLTUuNCAzLjgtNS4zIDcuNy4xIDMuMy0uMSA2LjYgMCA5LjkuMSA0LjggMi4xIDYuMSA2LjggNC45IDcuOC0yIDE1LjYtNC4yIDIzLjUtNS43IDEyLjMtMi4zIDI0LjctMy4zIDM3LjItMS40IDYuNSAxIDEyLjYgMi45IDE2LjggOC40IDMuNyA0LjggNS4xIDEwLjUgNS4zIDE2LjQuMyA4LjMuMiAxNi42LjMgMjQuOWE3Ljg0IDcuODQgMCAwIDEtLjIgMS40Yy0uNS0uMS0uOSAwLTEuMy0uMWExODAuNTYgMTgwLjU2IDAgMCAwLTMyLTQuOWMtMTEuMy0uNi0yMi41LjEtMzMuMyAzLjktMTIuOSA0LjUtMjMuMyAxMi4zLTI5LjQgMjQuOS00LjcgOS44LTUuNCAyMC4yLTMuOSAzMC43IDIgMTQgOSAyNC44IDIxLjQgMzEuNyAxMS45IDYuNiAyNC44IDcuNCAzNy45IDUuNCAxNS4xLTIuMyAyOC41LTguNyA0MC4zLTE4LjRhNy4zNiA3LjM2IDAgMCAxIDEuNi0xLjFjLjYgMy44IDEuMSA3LjQgMS44IDExIC42IDMuMSAyLjUgNS4xIDUuNCA1LjIgNS40LjEgMTAuOS4xIDE2LjMgMGE0Ljg0IDQuODQgMCAwIDAgNC44LTQuNyAyNi4yIDI2LjIgMCAwIDAgLjEtMi44di0xMDZhODAgODAgMCAwIDAtLjktMTIuOWMtMS45LTEyLjktNy40LTIzLjUtMTktMzAuNC02LjctNC0xNC4xLTYtMjEuOC03LjEtMy42LS41LTcuMi0uOC0xMC44LTEuMy0zLjkuMS03LjkuMS0xMS45LjF6bTM1IDEyNy43YTMuMzMgMy4zMyAwIDAgMS0xLjUgM2MtMTEuMiA4LjEtMjMuNSAxMy41LTM3LjQgMTQuOS01LjcuNi0xMS40LjQtMTYuOC0xLjhhMjAuMDggMjAuMDggMCAwIDEtMTIuNC0xMy4zIDMyLjkgMzIuOSAwIDAgMS0uMS0xOS40YzIuNS04LjMgOC40LTEzIDE2LjQtMTUuNmE2MS4zMyA2MS4zMyAwIDAgMSAyNC44LTIuMmM4LjQuNyAxNi42IDIuMyAyNSAzLjQgMS42LjIgMi4xIDEgMi4xIDIuNi0uMSA0LjggMCA5LjUgMCAxNC4zcy0uMiA5LjQtLjEgMTQuMXptMjU5LjkgMTI5LjRjLTEtNS00LjgtNi45LTkuMS04LjNhODguNDIgODguNDIgMCAwIDAtMjEtMy45IDE0Ny4zMiAxNDcuMzIgMCAwIDAtMzkuMiAxLjljLTE0LjMgMi43LTI3LjkgNy4zLTQwIDE1LjZhMTMuNzUgMTMuNzUgMCAwIDAtMy43IDMuNSA1LjExIDUuMTEgMCAwIDAtLjUgNGMuNCAxLjUgMi4xIDEuOSAzLjYgMS44YTE2LjIgMTYuMiAwIDAgMCAyLjItLjFjNy44LS44IDE1LjUtMS43IDIzLjMtMi41IDExLjQtMS4xIDIyLjktMS44IDM0LjMtLjlhNzEuNjQgNzEuNjQgMCAwIDEgMTQuNCAyLjdjNS4xIDEuNCA3LjQgNS4yIDcuNiAxMC40LjQgOC0xLjQgMTUuNy0zLjUgMjMuMy00LjEgMTUuNC0xMCAzMC4zLTE1LjggNDUuMWExNy42IDE3LjYgMCAwIDAtMSAzYy0uNSAyLjkgMS4yIDQuOCA0LjEgNC4xYTEwLjU2IDEwLjU2IDAgMCAwIDQuOC0yLjUgMTQ1LjkxIDE0NS45MSAwIDAgMCAxMi43LTEzLjRjMTIuOC0xNi40IDIwLjMtMzUuMyAyNC43LTU1LjYuOC0zLjYgMS40LTcuMyAyLjEtMTAuOXYtMTcuM3pNNDkzLjEgMTk5cS0xOS4zNS01My41NS0zOC43LTEwNy4yYy0yLTUuNy00LjItMTEuMy02LjMtMTYuOS0xLjEtMi45LTMuMi00LjgtNi40LTQuOC03LjYtLjEtMTUuMi0uMi0yMi45LS4xLTIuNSAwLTMuNyAyLTMuMiA0LjVhNDMuMSA0My4xIDAgMCAwIDEuOSA2LjFxMjkuNCA3Mi43NSA1OS4xIDE0NS41YzEuNyA0LjEgMi4xIDcuNi4yIDExLjgtMy4zIDcuMy01LjkgMTUtOS4zIDIyLjMtMyA2LjUtOCAxMS40LTE1LjIgMTMuM2E0Mi4xMyA0Mi4xMyAwIDAgMS0xNS40IDEuMWMtMi41LS4yLTUtLjgtNy41LTEtMy40LS4yLTUuMSAxLjMtNS4yIDQuOHEtLjE1IDUgMCA5LjljLjEgNS41IDIgOCA3LjQgOC45YTEwOC4xOCAxMDguMTggMCAwIDAgMTYuOSAyYzE3LjEuNCAzMC43LTYuNSAzOS41LTIxLjRhMTMxLjYzIDEzMS42MyAwIDAgMCA5LjItMTguNHEzNS41NS04OS43IDcwLjYtMTc5LjZhMjYuNjIgMjYuNjIgMCAwIDAgMS42LTUuNWMuNC0yLjgtLjktNC40LTMuNy00LjQtNi42LS4xLTEzLjMgMC0xOS45IDBhNy41NCA3LjU0IDAgMCAwLTcuNyA1LjJjLS41IDEuNC0xLjEgMi43LTEuNiA0LjFsLTM0LjggMTAwYy0yLjUgNy4yLTUuMSAxNC41LTcuNyAyMi4yLS40LTEuMS0uNi0xLjctLjktMi40elwiXVxufTtcbnZhciBmYVNxdWFyZUdpdGh1YiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtZ2l0aHViJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXCJnaXRodWItc3F1YXJlXCJdLCBcImYwOTJcIiwgXCJNNDQ4IDk2YzAtMzUuMy0yOC43LTY0LTY0LTY0SDY0QzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0SDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NnpNMjY1LjggNDA3LjdjMC0xLjggMC02IC4xLTExLjZjLjEtMTEuNCAuMS0yOC44IC4xLTQzLjdjMC0xNS42LTUuMi0yNS41LTExLjMtMzAuN2MzNy00LjEgNzYtOS4yIDc2LTczLjFjMC0xOC4yLTYuNS0yNy4zLTE3LjEtMzljMS43LTQuMyA3LjQtMjItMS43LTQ1Yy0xMy45LTQuMy00NS43IDE3LjktNDUuNyAxNy45Yy0xMy4yLTMuNy0yNy41LTUuNi00MS42LTUuNnMtMjguNCAxLjktNDEuNiA1LjZjMCAwLTMxLjgtMjIuMi00NS43LTE3LjljLTkuMSAyMi45LTMuNSA0MC42LTEuNyA0NWMtMTAuNiAxMS43LTE1LjYgMjAuOC0xNS42IDM5YzAgNjMuNiAzNy4zIDY5IDc0LjMgNzMuMWMtNC44IDQuMy05LjEgMTEuNy0xMC42IDIyLjNjLTkuNSA0LjMtMzMuOCAxMS43LTQ4LjMtMTMuOWMtOS4xLTE1LjgtMjUuNS0xNy4xLTI1LjUtMTcuMWMtMTYuMi0uMi0xLjEgMTAuMi0xLjEgMTAuMmMxMC44IDUgMTguNCAyNC4yIDE4LjQgMjQuMmM5LjcgMjkuNyA1Ni4xIDE5LjcgNTYuMSAxOS43YzAgOSAuMSAyMS43IC4xIDMwLjZjMCA0LjggLjEgOC42IC4xIDEwYzAgNC4zLTMgOS41LTExLjUgOEMxMDYgMzkzLjYgNTkuOCAzMzAuOCA1OS44IDI1Ny40YzAtOTEuOCA3MC4yLTE2MS41IDE2Mi0xNjEuNXMxNjYuMiA2OS43IDE2Ni4yIDE2MS41Yy4xIDczLjQtNDQuNyAxMzYuMy0xMTAuNyAxNTguM2MtOC40IDEuNS0xMS41LTMuNy0xMS41LTh6bS05MC41LTU0LjhjLS4yLTEuNSAxLjEtMi44IDMtMy4yYzEuOS0uMiAzLjcgLjYgMy45IDEuOWMuMyAxLjMtMSAyLjYtMyAzYy0xLjkgLjQtMy43LS40LTMuOS0xLjd6bS05LjEgMy4yYy0yLjIgLjItMy43LS45LTMuNy0yLjRjMC0xLjMgMS41LTIuNCAzLjUtMi40YzEuOS0uMiAzLjcgLjkgMy43IDIuNGMwIDEuMy0xLjUgMi40LTMuNSAyLjR6bS0xNC4zLTIuMmMtMS45LS40LTMuMi0xLjktMi44LTMuMnMyLjQtMS45IDQuMS0xLjVjMiAuNiAzLjMgMi4xIDIuOCAzLjRjLS40IDEuMy0yLjQgMS45LTQuMSAxLjN6bS0xMi41LTcuM2MtMS41LTEuMy0xLjktMy4yLS45LTQuMWMuOS0xLjEgMi44LS45IDQuMyAuNmMxLjMgMS4zIDEuOCAzLjMgLjkgNC4xYy0uOSAxLjEtMi44IC45LTQuMy0uNnptLTguNS0xMGMtMS4xLTEuNS0xLjEtMy4yIDAtMy45YzEuMS0uOSAyLjgtLjIgMy43IDEuM2MxLjEgMS41IDEuMSAzLjMgMCA0LjFjLS45IC42LTIuNiAwLTMuNy0xLjV6bS02LjMtOC44Yy0xLjEtMS4zLTEuMy0yLjgtLjQtMy41Yy45LS45IDIuNC0uNCAzLjUgLjZjMS4xIDEuMyAxLjMgMi44IC40IDMuNWMtLjkgLjktMi40IC40LTMuNS0uNnptLTYtNi40Yy0xLjMtLjYtMS45LTEuNy0xLjUtMi42Yy40LS42IDEuNS0uOSAyLjgtLjRjMS4zIC43IDEuOSAxLjggMS41IDIuNmMtLjQgLjktMS43IDEuMS0yLjggLjR6XCJdXG59O1xudmFyIGZhR2l0aHViU3F1YXJlID0gZmFTcXVhcmVHaXRodWI7XG52YXIgZmFTdHVtYmxldXBvbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzdHVtYmxldXBvbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjFhNFwiLCBcIk01MDIuOSAyNjZ2NjkuN2MwIDYyLjEtNTAuMyAxMTIuNC0xMTIuNCAxMTIuNC02MS44IDAtMTEyLjQtNDkuOC0xMTIuNC0xMTEuM3YtNzAuMmwzNC4zIDE2IDUxLjEtMTUuMlYzMzhjMCAxNC43IDEyIDI2LjUgMjYuNyAyNi41UzQxNyAzNTIuNyA0MTcgMzM4di03Mmg4NS45em0tMjI0LjctNTguMmwzNC4zIDE2IDUxLjEtMTUuMlYxNzNjMC02MC41LTUxLjEtMTA5LTExMi4xLTEwOS02MC44IDAtMTEyLjEgNDguMi0xMTIuMSAxMDguMnYxNjIuNGMwIDE0LjktMTIgMjYuNy0yNi43IDI2LjdTODYgMzQ5LjUgODYgMzM0LjZWMjY2SDB2NjkuN0MwIDM5Ny43IDUwLjMgNDQ4IDExMi40IDQ0OGM2MS42IDAgMTEyLjQtNDkuNSAxMTIuNC0xMTAuOFYxNzYuOWMwLTE0LjcgMTItMjYuNyAyNi43LTI2LjdzMjYuNyAxMiAyNi43IDI2Ljd2MzAuOXpcIl1cbn07XG52YXIgZmFGZWRleCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmZWRleCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjc5N1wiLCBcIk01ODYgMjg0LjVsNTMuMy01OS45aC02Mi40bC0yMS43IDI0LjgtMjIuNS0yNC44SDQxNHYtMTZoNTYuMXYtNDguMUgzMTguOVYyMzZoLS41Yy05LjYtMTEtMjEuNS0xNC44LTM1LjQtMTQuOC0yOC40IDAtNDkuOCAxOS40LTU3LjMgNDQuOS0xOC01OS40LTk3LjQtNTcuNi0xMjEuOS0xNHYtMjQuMkg0OXYtMjYuMmg2MHYtNDEuMUgwVjM0NWg0OXYtNzcuNWg0OC45Yy0xLjUgNS43LTIuMyAxMS44LTIuMyAxOC4yIDAgNzMuMSAxMDIuNiA5MS40IDEzMC4yIDIzLjdoLTQyYy0xNC43IDIwLjktNDUuOCA4LjktNDUuOC0xNC42aDg1LjVjMy43IDMwLjUgMjcuNCA1Ni45IDYwLjEgNTYuOSAxNC4xIDAgMjctNi45IDM0LjktMTguNmguNVYzNDVoMjEyLjJsMjIuMS0yNSAyMi4zIDI1SDY0MGwtNTQtNjAuNXptLTQ0Ni43LTE2LjZjNi4xLTI2LjMgNDEuNy0yNS42IDQ2LjUgMGgtNDYuNXptMTUzLjQgNDguOWMtMzQuNiAwLTM0LTYyLjggMC02Mi44IDMyLjYgMCAzNC41IDYyLjggMCA2Mi44em0xNjcuOCAxOS4xaC05NC40VjE2OS40aDk1djMwLjJINDA1djMzLjloNTUuNXYyOC4xaC01Ni4xdjQ0LjdoNTYuMXYyOS42em0tNDUuOS0zOS44di0yNC40aDU2LjF2LTQ0bDUwLjcgNTctNTAuNyA1N3YtNDUuNmgtNTYuMXptMTM4LjYgMTAuM2wtMjYuMSAyOS41SDQ4OWw0NS42LTUxLjItNDUuNi01MS4yaDM5LjdsMjYuNiAyOS4zIDI1LjYtMjkuM2gzOC41bC00NS40IDUxIDQ2IDUxLjRoLTQwLjVsLTI2LjMtMjkuNXpcIl1cbn07XG52YXIgZmFQaG9lbml4RnJhbWV3b3JrID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Bob2VuaXgtZnJhbWV3b3JrJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmM2RjXCIsIFwiTTIxMi45IDM0NC4zYzMuOC0uMSAyMi44LTEuNCAyNS42LTIuMi0yLjQtMi42LTQzLjYtMS02OC00OS42LTQuMy04LjYtNy41LTE3LjYtNi40LTI3LjYgMi45LTI1LjUgMzIuOS0zMCA1Mi0xOC41IDM2IDIxLjYgNjMuMyA5MS4zIDExMy43IDk3LjUgMzcgNC41IDg0LjYtMTcgMTA4LjItNDUuNC0uNi0uMS0uOC0uMi0xLS4xLS40LjEtLjguMi0xLjEuMy0zMy4zIDEyLjEtOTQuMyA5LjctMTM0LjctMTQuOC0zNy42LTIyLjgtNTMuMS01OC43LTUxLjgtNzQuNiAxLjgtMjEuMyAyMi45LTIzLjIgMzUuOS0xOS42IDE0LjQgMy45IDI0LjQgMTcuNiAzOC45IDI3LjQgMTUuNiAxMC40IDMyLjkgMTMuNyA1MS4zIDEwLjMgMTQuOS0yLjcgMzQuNC0xMi4zIDM2LjUtMTQuNS0xLjEtLjEtMS44LS4xLTIuNS0uMi02LjItLjYtMTIuNC0uOC0xOC41LTEuN0MyNzkuOCAxOTQuNSAyNjIuMSA0Ny40IDEzOC41IDM3LjkgOTQuMiAzNC41IDM5LjEgNDYgMi4yIDcyLjljLS44LjYtMS41IDEuMi0yLjIgMS44LjEuMi4xLjMuMi41LjggMCAxLjYtLjEgMi40LS4yIDYuMy0xIDEyLjUtLjggMTguNy4zIDIzLjggNC4zIDQ3LjcgMjMuMSA1NS45IDc2LjUgNS4zIDM0LjMtLjcgNTAuOCA4IDg2LjEgMTkgNzcuMSA5MSAxMDcuNiAxMjcuNyAxMDYuNHpNNzUuMyA2NC45Yy0uOS0xLS45LTEuMi0xLjMtMiAxMi4xLTIuNiAyNC4yLTQuMSAzNi42LTQuOC0xLjEgMTQuNy0yMi4yIDIxLjMtMzUuMyA2Ljh6bTE5Ni45IDM1MC41Yy00Mi44IDEuMi05Mi0yNi43LTEyMy41LTYxLjQtNC42LTUtMTYuOC0yMC4yLTE4LjYtMjMuNGwuNC0uNGM2LjYgNC4xIDI1LjcgMTguNiA1NC44IDI3IDI0LjIgNyA0OC4xIDYuMyA3MS42LTMuMyAyMi43LTkuMyA0MS0uNSA0My4xIDIuOS0xOC41IDMuOC0yMC4xIDQuNC0yNCA3LjktNS4xIDQuNC00LjYgMTEuNyA3IDE3LjIgMjYuMiAxMi40IDYzLTIuOCA5Ny4yIDI1LjQgMi40IDIgOC4xIDcuOCAxMC4xIDEwLjctLjEuMi0uMy4zLS40LjUtNC44LTEuNS0xNi40LTcuNS00MC4yLTkuMy0yNC43LTItNDYuMyA1LjMtNzcuNSA2LjJ6bTE3NC44LTI1MmMxNi40LTUuMiA0MS4zLTEzLjQgNjYuNS0zLjMgMTYuMSA2LjUgMjYuMiAxOC43IDMyLjEgMzQuNiAzLjUgOS40IDUuMSAxOS43IDUuMSAyOC43LS4yIDAtLjQgMC0uNi4xLS4yLS40LS40LS45LS41LTEuMy01LTIyLTI5LjktNDMuOC02Ny42LTI5LjktNTAuMiAxOC42LTEzMC40IDkuNy0xNzYuOS00OC0uNy0uOS0yLjQtMS43LTEuMy0zLjIuMS0uMiAyLjEuNiAzIDEuMyAxOC4xIDEzLjQgMzguMyAyMS45IDYwLjMgMjYuMiAzMC41IDYuMSA1NC42IDIuOSA3OS45LTUuMnptMTAyLjcgMTE3LjVjLTMyLjQuMi0zMy44IDUwLjEtMTAzLjYgNjQuNC0xOC4yIDMuNy0zOC43IDQuNi00NC45IDQuMnYtLjRjMi44LTEuNSAxNC43LTIuNiAyOS43LTE2LjYgNy45LTcuMyAxNS4zLTE1LjEgMjIuOC0yMi45IDE5LjUtMjAuMiA0MS40LTQyLjIgODEuOS0zOSAyMy4xIDEuOCAyOS4zIDguMiAzNi4xIDEyLjcuMy4yLjQuNS43LjktLjUgMC0uNy4xLS45IDAtNy0yLjctMTQuMy0zLjMtMjEuOC0zLjN6bS0xMi4zLTI0LjFjLS4xLjItLjEuNC0uMi42LTI4LjktNC40LTQ4LTcuOS02OC41IDQtMTcgOS45LTMxLjQgMjAuNS02MiAyNC40LTI3LjEgMy40LTQ1LjEgMi40LTY2LjEtOC0uMy0uMi0uNi0uNC0xLS42IDAtLjIuMS0uMy4xLS41IDI0LjkgMy44IDM2LjQgNS4xIDU1LjUtNS44IDIyLjMtMTIuOSA0MC4xLTI2LjYgNzEuMy0zMSAyOS42LTQuMSA1MS4zIDIuNSA3MC45IDE2Ljl6TTI2OC42IDk3LjNjLS42LS42LTEuMS0xLjItMi4xLTIuMyA3LjYgMCAyOS43LTEuMiA1My40IDguNCAxOS43IDggMzIuMiAyMSA1MC4yIDMyLjkgMTEuMSA3LjMgMjMuNCA5LjMgMzYuNCA4LjEgNC4zLS40IDguNS0xLjIgMTIuOC0xLjcuNC0uMS45IDAgMS41LjMtLjYuNC0xLjIuOS0xLjggMS4yLTguMSA0LTE2LjcgNi4zLTI1LjYgNy4xLTI2LjEgMi42LTUwLjMtMy43LTczLjQtMTUuNC0xOS4zLTkuOS0zNi40LTIyLjktNTEuNC0zOC42ek02NDAgMzM1LjdjLTMuNSAzLjEtMjIuNyAxMS42LTQyLjcgNS4zLTEyLjMtMy45LTE5LjUtMTQuOS0zMS42LTI0LjEtMTAtNy42LTIwLjktNy45LTI4LjEtOC40LjYtLjguOS0xLjIgMS4yLTEuNCAxNC44LTkuMiAzMC41LTEyLjIgNDcuMy02LjUgMTIuNSA0LjIgMTkuMiAxMy41IDMwLjQgMjQuMiAxMC44IDEwLjQgMjEgOS45IDIzLjEgMTAuNS4xLS4xLjIgMCAuNC40em0tMjEyLjUgMTM3YzIuMiAxLjIgMS42IDEuNSAxLjUgMi0xOC41LTEuNC0zMy45LTcuNi00Ni44LTIyLjItMjEuOC0yNC43LTQxLjctMjcuOS00OC42LTI5LjcuNS0uMi44LS40IDEuMS0uNCAxMy4xLjEgMjYuMS43IDM4LjkgMy45IDI1LjMgNi40IDM1IDI1LjQgNDEuNiAzNS4zIDMuMiA0LjggNy4zIDguMyAxMi4zIDExLjF6XCJdXG59O1xudmFyIGZhU2hvcGlmeSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzaG9waWZ5JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlMDU3XCIsIFwiTTM4OC4zMiwxMDQuMWE0LjY2LDQuNjYsMCwwLDAtNC40LTRjLTIsMC0zNy4yMy0uOC0zNy4yMy0uOHMtMjEuNjEtMjAuODItMjkuNjItMjguODNWNTAzLjJMNDQyLjc2LDQ3MlMzODguNzIsMTA2LjUsMzg4LjMyLDEwNC4xWk0yODguNjUsNzAuNDdhMTE2LjY3LDExNi42NywwLDAsMC03LjIxLTE3LjYxQzI3MSwzMi44NSwyNTUuNDIsMjIsMjM3LDIyYTE1LDE1LDAsMCwwLTQsLjRjLS40LS44LTEuMi0xLjItMS42LTJDMjIzLjQsMTEuNjMsMjEzLDcuNjMsMjAwLjU4LDhjLTI0LC44LTQ4LDE4LTY3LjI1LDQ4LjgzLTEzLjYxLDIxLjYyLTI0LDQ4Ljg0LTI2LjgyLDcwLjA2LTI3LjYyLDguNC00Ni44MywxNC40MS00Ny4yMywxNC44MS0xNCw0LjQtMTQuNDEsNC44LTE2LDE4LTEuMiwxMC0zOCwyOTEuODItMzgsMjkxLjgyTDMwNy44Niw1MDRWNjUuNjdhNDEuNjYsNDEuNjYsMCwwLDAtNC40LjRTMjk3Ljg2LDY3LjY3LDI4OC42NSw3MC40N1pNMjMzLjQxLDg3LjY5Yy0xNiw0LjgtMzMuNjMsMTAuNC01MC44NCwxNS42MSw0LjgtMTguODIsMTQuNDEtMzcuNjMsMjUuNjItNTAsNC40LTQuNCwxMC40MS05LjYxLDE3LjIxLTEyLjgxQzIzMi4yMSw1NC44NiwyMzMuODEsNzQuNDgsMjMzLjQxLDg3LjY5Wk0yMDAuNTgsMjQuNDRBMjcuNDksMjcuNDksMCwwLDEsMjE1LDI4Yy02LjQsMy4yLTEyLjgxLDguNDEtMTguODEsMTQuNDEtMTUuMjEsMTYuNDItMjYuODIsNDItMzEuNjIsNjYuNDUtMTQuNDIsNC40MS0yOC44Myw4LjgxLTQyLDEyLjgxQzEzMS4zMyw4My4yOCwxNjMuNzUsMjUuMjQsMjAwLjU4LDI0LjQ0Wk0xNTQuMTUsMjQ0LjYxYzEuNiwyNS42MSw2OS4yNSwzMS4yMiw3My4yNSw5MS42NiwyLjgsNDcuNjQtMjUuMjIsODAuMDYtNjUuNjUsODIuNDctNDguODMsMy4yLTc1LjY1LTI1LjYyLTc1LjY1LTI1LjYybDEwLjQtNDRzMjYuODIsMjAuNDIsNDguNDQsMTguODJjMTQtLjgsMTkuMjItMTIuNDEsMTguODEtMjAuNDItMi0zMy42Mi01Ny4yNC0zMS42Mi02MC44NC04Ni44Ni0zLjItNDYuNDQsMjcuMjItOTMuMjcsOTQuNDctOTcuNjgsMjYtMS42LDM5LjIzLDQuODEsMzkuMjMsNC44MUwyMjEuNCwyMjUuMzlzLTE3LjIxLTgtMzcuNjMtNi40QzE1NC4xNSwyMjEsMTUzLjc1LDIzOS44LDE1NC4xNSwyNDQuNjFaTTI0OS40Miw4Mi44OGMwLTEyLTEuNi0yOS4yMi03LjIxLTQzLjYzLDE4LjQyLDMuNiwyNy4yMiwyNCwzMS4yMywzNi40M1EyNjIuNjMsNzguNjgsMjQ5LjQyLDgyLjg4WlwiXVxufTtcbnZhciBmYU5lb3MgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbmVvcycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjYxMlwiLCBcIk00MTUuNDQgNTEyaC05NS4xMUwyMTIuMTIgMzU3LjQ2djkxLjFMMTI1LjY5IDUxMkgyOFYyOS44Mkw2OC40NyAwaDEwOC4wNWwxMjMuNzQgMTc2LjEzVjYzLjQ1TDM4Ni42OSAwaDk3LjY5djQ2MS41ek0zOC43NyAzNS4yN1Y0OTZsNzItNTIuODhWMTk0bDIxNS41IDMwNy42NGg4NC43OWw1Mi4zNS0zOC4xN2gtNzguMjdMNjkgMTN6bTgyLjU0IDQ2Ni42MWw4MC01OC43OHYtMTAxbC03OS43Ni0xMTQuNHYyMjAuOTRMNDkgNTAxLjg5aDcyLjM0ek04MC42MyAxMC43N2wzMTAuNiA0NDIuNTdoODIuMzdWMTAuNzdoLTc5Ljc1djMxNy41NkwxNzAuOTEgMTAuNzd6TTMxMSAxOTEuNjVsNzIgMTAyLjgxVjE1LjkzbC03MiA1M3YxMjIuNzJ6XCJdXG59O1xudmFyIGZhU3F1YXJlVGhyZWFkcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtdGhyZWFkcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTYxOVwiLCBcIk02NCAzMkMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjR6TTI5NC4yIDI0NC4zYzE5LjUgOS4zIDMzLjcgMjMuNSA0MS4yIDQwLjljMTAuNCAyNC4zIDExLjQgNjMuOS0yMC4yIDk1LjRjLTI0LjIgMjQuMS01My41IDM1LTk1LjEgMzUuM2gtLjJjLTQ2LjgtLjMtODIuOC0xNi4xLTEwNi45LTQ2LjhDOTEuNSAzNDEuOCA4MC40IDMwMy43IDgwIDI1NnYtLjEtLjFjLjQtNDcuNyAxMS41LTg1LjcgMzMtMTEzLjFjMjQuMi0zMC43IDYwLjItNDYuNSAxMDYuOS00Ni44aC4yYzQ2LjkgLjMgODMuMyAxNiAxMDguMiA0Ni42YzEyLjMgMTUuMSAyMS4zIDMzLjMgMjcgNTQuNGwtMjYuOSA3LjJjLTQuNy0xNy4yLTExLjktMzEuOS0yMS40LTQzLjZjLTE5LjQtMjMuOS00OC43LTM2LjEtODctMzYuNGMtMzggLjMtNjYuOCAxMi41LTg1LjUgMzYuMmMtMTcuNSAyMi4zLTI2LjYgNTQuNC0yNi45IDk1LjVjLjMgNDEuMSA5LjQgNzMuMyAyNi45IDk1LjVjMTguNyAyMy44IDQ3LjQgMzYgODUuNSAzNi4yYzM0LjMtLjMgNTYuOS04LjQgNzUuOC0yNy4zYzIxLjUtMjEuNSAyMS4xLTQ3LjkgMTQuMi02NGMtNC05LjQtMTEuNC0xNy4zLTIxLjMtMjMuM2MtMi40IDE4LTcuOSAzMi4yLTE2LjUgNDMuMmMtMTEuNCAxNC41LTI3LjcgMjIuNC00OC40IDIzLjVjLTE1LjcgLjktMzAuOC0yLjktNDIuNi0xMC43Yy0xMy45LTkuMi0yMi0yMy4yLTIyLjktMzkuNWMtMS43LTMyLjIgMjMuOC01NS4zIDYzLjUtNTcuNmMxNC4xLS44IDI3LjMtLjIgMzkuNSAxLjljLTEuNi05LjktNC45LTE3LjctOS44LTIzLjRjLTYuNy03LjgtMTcuMS0xMS44LTMwLjgtMTEuOWgtLjRjLTExIDAtMjYgMy4xLTM1LjYgMTcuNmwtMjMtMTUuOGMxMi44LTE5LjQgMzMuNi0zMC4xIDU4LjUtMzAuMWguNmM0MS44IC4zIDY2LjYgMjYuMyA2OS4xIDcxLjhjMS40IC42IDIuOCAxLjIgNC4yIDEuOWwuMSAuNXptLTcxLjggNjcuNWMxNy0uOSAzNi40LTcuNiAzOS43LTQ4LjhjLTguOC0xLjktMTguNi0yLjktMjktMi45Yy0zLjIgMC02LjQgLjEtOS42IC4zYy0yOC42IDEuNi0zOC4xIDE1LjUtMzcuNCAyNy45Yy45IDE2LjcgMTkgMjQuNSAzNi40IDIzLjZsLS4xLS4xelwiXVxufTtcbnZhciBmYUhhY2tlcnJhbmsgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaGFja2VycmFuaycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjVmN1wiLCBcIk00NzcuNSAxMjhDNDYzIDEwMy4wNSAyODUuMTMgMCAyNTYuMTYgMFM0OS4yNSAxMDIuNzkgMzQuODQgMTI4cy0xNC40OSAyMzAuOCAwIDI1NiAxOTIuMzggMTI4IDIyMS4zMiAxMjhTNDYzIDQwOS4wOCA0NzcuNDkgMzg0czE0LjUxLTIzMSAuMDEtMjU2ek0zMTYuMTMgNDE0LjIyYy00IDAtNDAuOTEtMzUuNzctMzgtMzguNjkuODctLjg3IDYuMjYtMS40OCAxNy41NS0xLjgzIDAtMjYuMjMuNTktNjguNTkuOTQtODYuMzIgMC0yLS40NC0zLjQzLS40NC01Ljg1aC03OS45M2MwIDcuMS0uNDYgMzYuMiAxLjM3IDcyLjg4LjIzIDQuNTQtMS41OCA2LTUuNzQgNS45NC0xMC4xMyAwLTIwLjI3LS4xMS0zMC40MS0uMDgtNC4xIDAtNS44Ny0xLjUzLTUuNzQtNi4xMS45Mi0zMy40NCAzLTg0LS4xNS0yMTIuNjd2LTMuMTdjLTkuNjctLjM1LTE2LjM4LTEtMTcuMjYtMS44NC0yLjkyLTIuOTIgMzQuNTQtMzguNjkgMzguNDktMzguNjlzNDEuMTcgMzUuNzggMzguMjcgMzguNjljLS44Ny44Ny03LjkgMS40OS0xNi43NyAxLjg0djMuMTZjLTIuNDIgMjUuNzUtMiA3OS41OS0yLjYzIDEwNS4zOWg4MC4yNmMwLTQuNTUuMzktMzQuNzQtMS4yLTgzLjY0LS4xLTMuMzkuOTUtNS4xNyA0LjIxLTUuMiAxMS4wNy0uMDggMjIuMTUtLjEzIDMzLjIzLS4wNiAzLjQ2IDAgNC41NyAxLjcyIDQuNSA1LjM4QzMzMyAzNTQuNjQgMzM2IDM0MS4yOSAzMzYgMzczLjY5YzguODcuMzUgMTYuODIgMSAxNy42OSAxLjg0IDIuODggMi45MS0zMy42MiAzOC42OS0zNy41OCAzOC42OXpcIl1cbn07XG52YXIgZmFSZXNlYXJjaGdhdGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncmVzZWFyY2hnYXRlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNGY4XCIsIFwiTTAgMzJ2NDQ4aDQ0OFYzMkgwem0yNjIuMiAzMzQuNGMtNi42IDMtMzMuMiA2LTUwLTE0LjItOS4yLTEwLjYtMjUuMy0zMy4zLTQyLjItNjMuNi04LjkgMC0xNC43IDAtMjEuNC0uNnY0Ni40YzAgMjMuNSA2IDIxLjIgMjUuOCAyMy45djguMWMtNi45LS4zLTIzLjEtLjgtMzUuNi0uOC0xMy4xIDAtMjYuMS42LTMzLjYuOHYtOC4xYzE1LjUtMi45IDIyLTEuMyAyMi0yMy45VjIyNWMwLTIyLjYtNi40LTIxLTIyLTIzLjlWMTkzYzI1LjggMSA1My4xLS42IDcwLjktLjYgMzEuNyAwIDU1LjkgMTQuNCA1NS45IDQ1LjYgMCAyMS4xLTE2LjcgNDIuMi0zOS4yIDQ3LjUgMTMuNiAyNC4yIDMwIDQ1LjYgNDIuMiA1OC45IDcuMiA3LjggMTcuMiAxNC43IDI3LjIgMTQuN3Y3LjN6bTIyLjktMTM1Yy0yMy4zIDAtMzIuMi0xNS43LTMyLjItMzIuMlYxNjdjMC0xMi4yIDguOC0zMC40IDM0LTMwLjRzMzAuNCAxNy45IDMwLjQgMTcuOWwtMTAuNyA3LjJzLTUuNS0xMi41LTE5LjctMTIuNWMtNy45IDAtMTkuNyA3LjMtMTkuNyAxOS43djI2LjhjMCAxMy40IDYuNiAyMy4zIDE3LjkgMjMuMyAxNC4xIDAgMjEuNS0xMC45IDIxLjUtMjYuOGgtMTcuOXYtMTAuN2gzMC40YzAgMjAuNSA0LjcgNDkuOS0zNCA0OS45em0tMTE2LjUgNDQuN2MtOS40IDAtMTMuNi0uMy0yMC0uOHYtNjkuN2M2LjQtLjYgMTUtLjYgMjIuNS0uNiAyMy4zIDAgMzcuMiAxMi4yIDM3LjIgMzQuNSAwIDIxLjktMTUgMzYuNi0zOS43IDM2LjZ6XCJdXG59O1xudmFyIGZhU3dpZnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3dpZnQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY4ZTFcIiwgXCJNNDQ4IDE1Ni4wOWMwLTQuNTEtLjA4LTktLjItMTMuNTJhMTk2LjMxIDE5Ni4zMSAwIDAgMC0yLjU4LTI5LjQyIDk5LjYyIDk5LjYyIDAgMCAwLTkuMjItMjhBOTQuMDggOTQuMDggMCAwIDAgMzk0Ljg0IDQ0YTk5LjE3IDk5LjE3IDAgMCAwLTI4LTkuMjIgMTk1IDE5NSAwIDAgMC0yOS40My0yLjU5Yy00LjUxLS4xMi05LS4xNy0xMy41Mi0uMkgxMjQuMTRjLTQuNTEgMC05IC4wOC0xMy41Mi4yLTIuNDUuMDctNC45MS4xNS03LjM3LjI3YTE3MS42OCAxNzEuNjggMCAwIDAtMjIuMDYgMi4zMiAxMDMuMDYgMTAzLjA2IDAgMCAwLTIxLjIxIDYuMXEtMy40NiAxLjQ1LTYuODEgMy4xMmE5NC42NiA5NC42NiAwIDAgMC0xOC4zOSAxMi4zMmMtMS44OCAxLjYxLTMuNjkgMy4yOC01LjQzIDVBOTMuODYgOTMuODYgMCAwIDAgMTIgODUuMTdhOTkuNDUgOTkuNDUgMCAwIDAtOS4yMiAyOCAxOTYuMzEgMTk2LjMxIDAgMCAwLTIuNTQgMjkuNGMtLjEzIDQuNTEtLjE4IDktLjIxIDEzLjUydjE5OS44M2MwIDQuNTEuMDggOSAuMjEgMTMuNTFhMTk2LjA4IDE5Ni4wOCAwIDAgMCAyLjU4IDI5LjQyIDk5LjMgOTkuMyAwIDAgMCA5LjIyIDI4QTk0LjMxIDk0LjMxIDAgMCAwIDUzLjE3IDQ2OGE5OS40NyA5OS40NyAwIDAgMCAyOCA5LjIxIDE5NSAxOTUgMCAwIDAgMjkuNDMgMi41OWM0LjUuMTIgOSAuMTcgMTMuNTIuMkgzMjMuOTFjNC41MSAwIDktLjA4IDEzLjUyLS4yYTE5Ni41OSAxOTYuNTkgMCAwIDAgMjkuNDQtMi41OSA5OS41NyA5OS41NyAwIDAgMCAyOC05LjIxQTk0LjIyIDk0LjIyIDAgMCAwIDQzNiA0MjYuODRhOTkuMyA5OS4zIDAgMCAwIDkuMjItMjggMTk0Ljc5IDE5NC43OSAwIDAgMCAyLjU5LTI5LjQyYy4xMi00LjUuMTctOSAuMi0xMy41MVYxNzIuMTRjLS4wMS01LjM1LS4wMS0xMC43LS4wMS0xNi4wNXptLTY5Ljg4IDI0MWMtMjAtMzguOTMtNTcuMjMtMjkuMjctNzYuMzEtMTkuNDctMS43MiAxLTMuNDggMi01LjI1IDNsLS40Mi4yNWMtMzkuNSAyMS05Mi41MyAyMi41NC0xNDUuODUtLjM4QTIzNC42NCAyMzQuNjQgMCAwIDEgNDUgMjkwLjEyYTIzMC42MyAyMzAuNjMgMCAwIDAgMzkuMTcgMjMuMzdjNTYuMzYgMjYuNCAxMTMgMjQuNDkgMTUzIDAtNTctNDMuODUtMTA0LjYtMTAxLTE0MS4wOS0xNDcuMjJhMTk3LjA5IDE5Ny4wOSAwIDAgMS0xOC43OC0yNS45YzQzLjcgNDAgMTEyLjcgOTAuMjIgMTM3LjQ4IDEwNC4xMi01Mi41Ny01NS40OS05OC44OS0xMjMuOTQtOTYuNzItMTIxLjc0IDgyLjc5IDgzLjQyIDE1OS4xOCAxMzAuNTkgMTU5LjE4IDEzMC41OSAyLjg4IDEuNTggNSAyLjg1IDYuNzMgNGExMjcuNDQgMTI3LjQ0IDAgMCAwIDQuMTYtMTIuNDdjMTMuMjItNDguMzMtMS42Ni0xMDMuNTgtMzUuMzEtMTQ5LjJDMzI5LjYxIDE0MS43NSAzNzUgMjI5LjM0IDM1Ni40IDMwMy40MmMtLjQ0IDEuNzMtLjk1IDMuNC0xLjQ0IDUuMDkgMzguNTIgNDcuNCAyOC4wNCA5OC4xNyAyMy4xMyA4OC41OXpcIl1cbn07XG52YXIgZmFBbmd1bGFyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FuZ3VsYXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY0MjBcIiwgXCJNMTg1LjcgMjY4LjFoNzYuMmwtMzguMS05MS42LTM4LjEgOTEuNnpNMjIzLjggMzJMMTYgMTA2LjRsMzEuOCAyNzUuNyAxNzYgOTcuOSAxNzYtOTcuOSAzMS44LTI3NS43ek0zNTQgMzczLjhoLTQ4LjZsLTI2LjItNjUuNEgxNjguNmwtMjYuMiA2NS40SDkzLjdMMjIzLjggODEuNXpcIl1cbn07XG52YXIgZmFTcGVha2FwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NwZWFrYXAnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYzZjNcIiwgXCJNNjQgMzkxLjc4Qy0xNS40MSAzMDMuNTktOCAxNjcuNDIgODAuNjQgODcuNjRzMjI0LjgtNzMgMzA0LjIxIDE1LjI0IDcyIDIyNC4zNi0xNi42NCAzMDQuMTRjLTE4Ljc0IDE2Ljg3IDY0IDQzLjA5IDQyIDUyLjI2LTgyLjA2IDM0LjIxLTI1My45MSAzNS0zNDYuMjMtNjcuNXptMjEzLjMxLTIxMS42bDM4LjUtNDAuODZjLTkuNjEtOC44OS0zMi0yNi44My03Ni4xNy0yNy42LTUyLjMzLS45MS05NS44NiAyOC4zLTk2Ljc3IDgwLS4yIDExLjMzLjI5IDM2LjcyIDI5LjQyIDU0LjgzIDM0LjQ2IDIxLjQyIDg2LjUyIDIxLjUxIDg2IDUyLjI2LS4zNyAyMS4yOC0yNi40MiAyNS44MS0zOC41OSAyNS42LTMtLjA1LTMwLjIzLS40Ni00Ny42MS0yNC42MmwtNDAgNDIuNjFjMjguMTYgMjcgNTkgMzIuNjIgODMuNDkgMzMuMDUgMTAuMjMuMTggOTYuNDIuMzMgOTcuODQtODEgLjI4LTE1LjgxLTIuMDctMzkuNzItMjguODYtNTYuNTktMzQuMzYtMjEuNjQtODUtMTkuNDUtODQuNDMtNDkuNzUuNDEtMjMuMjUgMzEtMjUuMzcgMzcuNTMtMjUuMjYuNDMgMCAyNi42Mi4yNiAzOS42MiAxNy4zN3pcIl1cbn07XG52YXIgZmFBbmdyeWNyZWF0aXZlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FuZ3J5Y3JlYXRpdmUnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYzNmVcIiwgXCJNNjQwIDIzOC4ybC0zLjIgMjguMi0zNC41IDIuMy0yIDE4LjEgMzQuNS0yLjMtMy4yIDI4LjItMzQuNCAyLjItMi4zIDIwLjEgMzQuNC0yLjItMyAyNi4xLTY0LjcgNC4xIDEyLjctMTEzLjJMNTI3IDM2NS4ybC0zMS45IDItMjMuOC0xMTcuOCAzMC4zLTIgMTMuNiA3OS40IDMxLjctODIuNCA5My4xLTYuMnpNNDI2LjggMzcxLjVsMjguMy0xLjhMNDY4IDI0OS42bC0yOC40IDEuOS0xMi44IDEyMHpNMTYyIDM4OC4xbC0xOS40LTM2LTMuNSAzNy40LTI4LjIgMS43IDIuNy0yOS4xYy0xMSAxOC0zMiAzNC4zLTU2LjkgMzUuOEMyMy45IDM5OS45LTMgMzc3IC4zIDMzOS43YzIuNi0yOS4zIDI2LjctNjIuOCA2Ny41LTY1LjQgMzcuNy0yLjQgNDcuNiAyMy4yIDUxLjMgMjguOGwyLjgtMzAuOCAzOC45LTIuNWMyMC4xLTEuMyAzOC43IDMuNyA0Mi41IDIzLjdsMi42LTI2LjYgNjQuOC00LjItMi43IDI3LjktMzYuNCAyLjQtMS43IDE3LjkgMzYuNC0yLjMtMi43IDI3LjktMzYuNCAyLjMtMS45IDE5LjkgMzYuMy0yLjMtMi4xIDIwLjggNTUtMTE3LjIgMjMuOC0xLjZMMzcwLjQgMzY5bDguOS04NS42LTIyLjMgMS40IDIuOS0yNy45IDc1LTQuOS0zIDI4LTI0LjMgMS42LTkuNyA5MS45LTU4IDMuNy00LjMtMTUuNi0zOS40IDIuNS04IDE2LjMtMTI2LjIgNy43em0tNDQuMy03MC4ybC0yNi40IDEuN0M4NC42IDMwNy4yIDc2LjkgMzAzIDY1IDMwMy44Yy0xOSAxLjItMzMuMyAxNy41LTM0LjYgMzMuMy0xLjQgMTYgNy4zIDMyLjUgMjguNyAzMS4yIDEyLjgtLjggMjEuMy04LjYgMjguOS0xOC45bDI3LTEuNyAyLjctMjkuOHptNTYuMS03LjdjMS4yLTEyLjktNy42LTEzLjYtMjYuMS0xMi40bC0yLjcgMjguNWMxNC4yLS45IDI3LjUtMi4xIDI4LjgtMTYuMXptMjEuMSA3MC44bDUuOC02MGMtNSAxMy41LTE0LjcgMjEuMS0yNy45IDI2LjZsMjIuMSAzMy40em0xMzUuNC00NWwtNy45LTM3LjgtMTUuOCAzOS4zIDIzLjctMS41em0tMTcwLjEtNzQuNmwtNC4zLTE3LjUtMzkuNiAyLjYtOC4xIDE4LjItMzEuOSAyLjEgNTctMTIxLjkgMjMuOS0xLjYgMzAuNyAxMDIgOS45LTEwNC43IDI3LTEuOCAzNy44IDYzLjYgNi41LTY2LjYgMjguNS0xLjktNCA0MS4yYzcuNC0xMy41IDIyLjktNDQuNyA2My42LTQ3LjUgNDAuNS0yLjggNTIuNCAyOS4zIDUzLjQgMzAuM2wzLjMtMzIgMzkuMy0yLjdjMTIuNy0uOSAyNy44LjMgMzYuMyA5LjdsLTQuNC0xMS45IDMyLjItMi4yIDEyLjkgNDMuMiAyMy00NS43IDMxLTIuMi00My42IDc4LjQtNC44IDQ0LjMtMjguNCAxLjkgNC44LTQ0LjMtMTUuOC00M2MxIDIyLjMtOS4yIDQwLjEtMzIgNDkuNmwyNS4yIDM4LjgtMzYuNCAyLjQtMTkuMi0zNi44LTQgMzguMy0yOC40IDEuOSAzLjMtMzEuNWMtNi43IDkuMy0xOS43IDM1LjQtNTkuNiAzOC0yNi4yIDEuNy00NS42LTEwLjMtNTUuNC0zOS4ybC00IDQwLjMtMjUgMS42LTM3LjYtNjMuMy02LjMgNjYuMi01Ni44IDMuN3ptMjc2LjYtODIuMWMxMC4yLS43IDE3LjUtMi4xIDIxLjYtNC4zIDQuNS0yLjQgNy02LjQgNy42LTEyLjEuNi01LjMtLjYtOC44LTMuNC0xMC40LTMuNi0yLjEtMTAuNi0yLjgtMjIuOS0ybC0yLjkgMjguOHpNMzI3LjcgMjE0YzUuNiA1LjkgMTIuNyA4LjUgMjEuMyA3LjkgNC43LS4zIDkuMS0xLjggMTMuMy00LjEgNS41LTMgMTAuNi04IDE1LjEtMTQuM2wtMzQuMiAyLjMgMi40LTIzLjkgNjMuMS00LjMgMS4yLTEyLTMxLjIgMi4xYy00LjEtMy43LTcuOC02LjYtMTEuMS04LjEtNC0xLjctOC4xLTIuOC0xMi4yLTIuNS04IC41LTE1LjMgMy42LTIyIDkuMi03LjcgNi40LTEyIDE0LjUtMTIuOSAyNC40LTEuMSA5LjYgMS40IDE3LjMgNy4yIDIzLjN6bS0yMDEuMyA4LjJsMjMuOC0xLjYtOC4zLTM3LjYtMTUuNSAzOS4yelwiXVxufTtcbnZhciBmYVlDb21iaW5hdG9yID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3ktY29tYmluYXRvcicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjIzYlwiLCBcIk00NDggMzJ2NDQ4SDBWMzJoNDQ4ek0yMzYgMjg3LjVMMzEzLjUgMTQyaC0zMi43TDIzNSAyMzNjLTQuNyA5LjMtOSAxOC4zLTEyLjggMjYuOEwyMTAgMjMzbC00NS4yLTkxaC0zNWw3Ni43IDE0My44djk0LjVIMjM2di05Mi44elwiXVxufTtcbnZhciBmYUVtcGlyZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdlbXBpcmUnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYxZDFcIiwgXCJNMjg3LjYgNTQuMmMtMTAuOC0yLjItMjIuMS0zLjMtMzMuNS0zLjZWMzIuNGM3OC4xIDIuMiAxNDYuMSA0NCAxODQuNiAxMDYuNmwtMTUuOCA5LjFjLTYuMS05LjctMTIuNy0xOC44LTIwLjItMjcuMWwtMTggMTUuNWMtMjYtMjkuNi02MS40LTUwLjctMTAxLjktNTguNGw0LjgtMjMuOXpNNTMuNCAzMjIuNGwyMy03LjdjLTYuNC0xOC4zLTEwLTM4LjItMTAtNTguN3MzLjMtNDAuNCA5LjctNTguN2wtMjIuNy03LjdjMy42LTEwLjggOC4zLTIxLjMgMTMuNi0zMWwtMTUuOC05LjFDMzQgMTgxIDI0LjEgMjE3LjUgMjQuMSAyNTZzMTAgNzUgMjcuMSAxMDYuNmwxNS44LTkuMWMtNS4zLTEwLTkuNy0yMC4zLTEzLjYtMzEuMXpNMjEzLjEgNDM0Yy00MC40LTgtNzUuOC0yOS4xLTEwMS45LTU4LjdsLTE4IDE1LjhjLTcuNS04LjYtMTQuNC0xNy43LTIwLjItMjcuNGwtMTYgOS40YzM4LjUgNjIuMyAxMDYuOCAxMDQuMyAxODQuOSAxMDYuNnYtMTguM2MtMTEuMy0uMy0yMi43LTEuNy0zMy41LTMuNmw0LjctMjMuOHpNOTMuMyAxMjAuOWwxOCAxNS41YzI2LTI5LjYgNjEuNC01MC43IDEwMS45LTU4LjRsLTQuNy0yMy44YzEwLjgtMi4yIDIyLjEtMy4zIDMzLjUtMy42VjMyLjRDMTYzLjkgMzQuNiA5NS45IDc2LjQgNTcuNCAxMzlsMTUuOCA5LjFjNi05LjcgMTIuNi0xOC45IDIwLjEtMjcuMnptMzA5LjQgMjcwLjJsLTE4LTE1LjhjLTI2IDI5LjYtNjEuNCA1MC43LTEwMS45IDU4LjdsNC43IDIzLjhjLTEwLjggMS45LTIyLjEgMy4zLTMzLjUgMy42djE4LjNjNzguMS0yLjIgMTQ2LjQtNDQuMyAxODQuOS0xMDYuNmwtMTYuMS05LjRjLTUuNyA5LjctMTIuNiAxOC44LTIwLjEgMjcuNHpNNDk2IDI1NmMwIDEzNy0xMTEgMjQ4LTI0OCAyNDhTMCAzOTMgMCAyNTYgMTExIDggMjQ4IDhzMjQ4IDExMSAyNDggMjQ4em0tMTIuMiAwYzAtMTMwLjEtMTA1LjctMjM1LjgtMjM1LjgtMjM1LjhTMTIuMiAxMjUuOSAxMi4yIDI1NiAxMTcuOSA0OTEuOCAyNDggNDkxLjggNDgzLjggMzg2LjEgNDgzLjggMjU2em0tMzktMTA2LjZsLTE1LjggOS4xYzUuMyA5LjcgMTAgMjAuMiAxMy42IDMxbC0yMi43IDcuN2M2LjQgMTguMyA5LjcgMzguMiA5LjcgNTguN3MtMy42IDQwLjQtMTAgNTguN2wyMyA3LjdjLTMuOSAxMC44LTguMyAyMS0xMy42IDMxbDE1LjggOS4xQzQ2MiAzMzEgNDcxLjkgMjk0LjUgNDcxLjkgMjU2cy05LjktNzUtMjcuMS0xMDYuNnptLTE4MyAxNzcuN2MxNi4zLTMuMyAzMC40LTExLjYgNDAuNy0yMy41bDUxLjIgNDQuOGMxMS45LTEzLjYgMjEuMy0yOS4zIDI3LjEtNDYuOGwtNjQuMi0yMi4xYzIuNS03LjUgMy45LTE1LjIgMy45LTIzLjVzLTEuNC0xNi4xLTMuOS0yMy41bDY0LjUtMjIuMWMtNi4xLTE3LjQtMTUuNS0zMy4yLTI3LjQtNDYuOGwtNTEuMiA0NC44Yy0xMC4yLTExLjktMjQuNC0yMC41LTQwLjctMjMuOGwxMy4zLTY2LjRjLTguNi0xLjktMTcuNy0yLjgtMjcuMS0yLjgtOS40IDAtMTguNS44LTI3LjEgMi44bDEzLjMgNjYuNGMtMTYuMyAzLjMtMzAuNCAxMS45LTQwLjcgMjMuOGwtNTEuMi00NC44Yy0xMS45IDEzLjYtMjEuMyAyOS4zLTI3LjQgNDYuOGw2NC41IDIyLjFjLTIuNSA3LjUtMy45IDE1LjItMy45IDIzLjVzMS40IDE2LjEgMy45IDIzLjVsLTY0LjIgMjIuMWM1LjggMTcuNCAxNS4yIDMzLjIgMjcuMSA0Ni44bDUxLjItNDQuOGMxMC4yIDExLjkgMjQuNCAyMC4yIDQwLjcgMjMuNWwtMTMuMyA2Ni43YzguNiAxLjcgMTcuNyAyLjggMjcuMSAyLjggOS40IDAgMTguNS0xLjEgMjcuMS0yLjhsLTEzLjMtNjYuN3pcIl1cbn07XG52YXIgZmFFbnZpcmEgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZW52aXJhJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMjk5XCIsIFwiTTAgMzJjNDc3LjYgMCAzNjYuNiAzMTcuMyAzNjcuMSAzNjYuM0w0NDggNDgwaC0yNmwtNzAuNC03MS4yYy0zOSA0LjItMTI0LjQgMzQuNS0yMTQuNC0zN0M0NyAzMDAuMyA1MiAyMTQuNyAwIDMyem03OS43IDQ2Yy00OS43LTIzLjUtNS4yIDkuMi01LjIgOS4yIDQ1LjIgMzEuMiA2NiA3My43IDkwLjIgMTE5LjkgMzEuNSA2MC4yIDc5IDEzOS43IDE0NC4yIDE2Ny43IDY1IDI4IDM0LjIgMTIuNSA2LTguNS0yOC4yLTIxLjItNjguMi04Ny05MS0xMzAuMi0zMS43LTYwLTYxLTExOC42LTE0NC4yLTE1OC4xelwiXVxufTtcbnZhciBmYUdvb2dsZVNjaG9sYXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ29vZ2xlLXNjaG9sYXInLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImU2M2JcIiwgXCJNMzkwLjkgMjk4LjVjMCAwIDAgLjEgLjEgLjFjOS4yIDE5LjQgMTQuNCA0MS4xIDE0LjQgNjRDNDA1LjMgNDQ1LjEgMzM4LjUgNTEyIDI1NiA1MTJzLTE0OS4zLTY2LjktMTQ5LjMtMTQ5LjNjMC0yMi45IDUuMi00NC42IDE0LjQtNjRoMGMxLjctMy42IDMuNi03LjIgNS42LTEwLjdjNC40LTcuNiA5LjQtMTQuNyAxNS0yMS4zYzI3LjQtMzIuNiA2OC41LTUzLjMgMTE0LjQtNTMuM2MzMy42IDAgNjQuNiAxMS4xIDg5LjYgMjkuOWM5LjEgNi45IDE3LjQgMTQuNyAyNC44IDIzLjVjNS42IDYuNiAxMC42IDEzLjggMTUgMjEuM2MyIDMuNCAzLjggNyA1LjUgMTAuNXptMjYuNC0xOC44Yy0zMC4xLTU4LjQtOTEtOTguNC0xNjEuMy05OC40cy0xMzEuMiA0MC0xNjEuMyA5OC40TDAgMjAyLjcgMjU2IDAgNTEyIDIwMi43bC05NC43IDc3LjF6XCJdXG59O1xudmFyIGZhU3F1YXJlR2l0bGFiID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS1naXRsYWInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImdpdGxhYi1zcXVhcmVcIl0sIFwiZTVhZVwiLCBcIk0wIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NnptMzM3LjUgMTIuNWw0NC42IDExNi40IC40IDEuMmM1LjYgMTYuOCA3LjIgMzUuMiAyLjMgNTIuNWMtNSAxNy4yLTE1LjQgMzIuNC0yOS44IDQzLjNsLS4yIC4xLTY4LjQgNTEuMi01NC4xIDQwLjljLS41IC4yLTEuMSAuNS0xLjcgLjhjLTIgMS00LjQgMi02LjcgMmMtMyAwLTYuOC0xLjgtOC4zLTIuOGwtNTQuMi00MC45TDkzLjUgMzIyLjNsLS40LS4zLS4yLS4xYy0xNC4zLTEwLjgtMjQuOC0yNi0yOS43LTQzLjNzLTQuMi0zNS43IDIuMi01Mi41bC41LTEuMiA0NC43LTExNi40Yy45LTIuMyAyLjUtNC4zIDQuNS01LjZjMS42LTEgMy40LTEuNiA1LjItMS44YzEuMy0uNyAyLjEtLjQgMy40IC4xYy42IC4yIDEuMiAuNSAyIC43YzEgLjQgMS42IC45IDIuNCAxLjVjLjYgLjQgMS4yIDEgMi4xIDEuNWMxLjIgMS40IDIuMiAzIDIuNyA0LjhsMjkuMiA5Mi4ySDI4NWwzMC4yLTkyLjJjLjUtMS44IDEuNC0zLjQgMi42LTQuOHMyLjgtMi40IDQuNS0zLjFjMS43LS42IDMuNi0uOSA1LjQtLjdzMy42IC44IDUuMiAxLjhjMiAxLjMgMy43IDMuMyA0LjYgNS42elwiXVxufTtcbnZhciBmYUdpdGxhYlNxdWFyZSA9IGZhU3F1YXJlR2l0bGFiO1xudmFyIGZhU3R1ZGlvdmluYXJpID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0dWRpb3ZpbmFyaScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNmOFwiLCBcIk00ODAuMyAxODcuN2w0LjIgMjh2MjhsLTI1LjEgNDQuMS0zOS44IDc4LjQtNTYuMSA2Ny41LTc5LjEgMzcuOC0xNy43IDI0LjUtNy43IDEyLTkuNiA0czE3LjMtNjMuNiAxOS40LTYzLjZjMi4xIDAgMjAuMy43IDIwLjMuN2w2Ni43LTM4LjYtOTIuNSAyNi4xLTU1LjkgMzYuOC0yMi44IDI4LTYuNiAxLjQgMjAuOC03My42IDYuOS01LjUgMjAuNyAxMi45IDg4LjMtNDUuMiA1Ni44LTUxLjUgMTQuOC02OC40LTEyNS40IDIzLjMgMTUuMi0xOC4yLTE3My40LTUzLjMgODEuOS0xMC41LTE2Ni0xMjIuOUwxMzMuNSAxMDggMzIuMiAwbDI1Mi45IDEyNi42LTMxLjUtMzhMMzc4IDE2MyAyMzQuNyA2NGwxOC43IDM4LjQtNDkuNi0xOC4xTDE1OC4zIDBsMTk0LjYgMTIyTDMxMCA2Ni4ybDEwOCA5Ni40IDEyLTguOS0yMS0xNi40IDQuMi0zNy44TDQ1MSA4OS4xbDI5LjIgMjQuNyAxMS41IDQuMi03IDYuMiA4LjUgMTItMTMuMSA3LjQtMTAuMyAyMC4yIDEwLjUgMjMuOXpcIl1cbn07XG52YXIgZmFQaWVkUGlwZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncGllZC1waXBlcicsXG4gIGljb246IFs0ODAsIDUxMiwgW10sIFwiZjJhZVwiLCBcIk00NTUuOTMsMjMuMkM0MjkuMjMsMzAsMzg3Ljc5LDUxLjY5LDM0MS4zNSw5MC42NkEyMDYsMjA2LDAsMCwwLDI0MCw2NEMxMjUuMTMsNjQsMzIsMTU3LjEyLDMyLDI3MnM5My4xMywyMDgsMjA4LDIwOCwyMDgtOTMuMTMsMjA4LTIwOGEyMDcuMjUsMjA3LjI1LDAsMCwwLTU4Ljc1LTE0NC44MSwxNTUuMzUsMTU1LjM1LDAsMCwwLTE3LDI3LjRBMTc2LjE2LDE3Ni4xNiwwLDAsMSw0MTcuMSwyNzJjMCw5Ny42Ni03OS40NCwxNzcuMTEtMTc3LjA5LDE3Ny4xMWExNzUuODEsMTc1LjgxLDAsMCwxLTg3LjYzLTIzLjRjODIuOTQtMTA3LjMzLDE1MC43OS0zNy43NywxODQuMzEtMjI2LjY1LDUuNzktMzIuNjIsMjgtOTQuMjYsMTI2LjIzLTE2MC4xOEM0NzEsMzMuNDUsNDY1LjM1LDIwLjgsNDU1LjkzLDIzLjJaTTEyNSw0MDYuNEExNzYuNjYsMTc2LjY2LDAsMCwxLDYyLjksMjcyQzYyLjksMTc0LjM0LDE0Mi4zNSw5NC45LDI0MCw5NC45YTE3NCwxNzQsMCwwLDEsNzYuNjMsMTcuNzVDMjUwLjY0LDE3NC43NiwxODkuNzcsMjY1LjUyLDEyNSw0MDYuNFpcIl1cbn07XG52YXIgZmFXb3JkcHJlc3MgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd29yZHByZXNzJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMTlhXCIsIFwiTTYxLjcgMTY5LjRsMTAxLjUgMjc4QzkyLjIgNDEzIDQzLjMgMzQwLjIgNDMuMyAyNTZjMC0zMC45IDYuNi02MC4xIDE4LjQtODYuNnptMzM3LjkgNzUuOWMwLTI2LjMtOS40LTQ0LjUtMTcuNS01OC43LTEwLjgtMTcuNS0yMC45LTMyLjQtMjAuOS00OS45IDAtMTkuNiAxNC44LTM3LjggMzUuNy0zNy44LjkgMCAxLjguMSAyLjguMi0zNy45LTM0LjctODguMy01NS45LTE0My43LTU1LjktNzQuMyAwLTEzOS43IDM4LjEtMTc3LjggOTUuOSA1IC4yIDkuNy4zIDEzLjcuMyAyMi4yIDAgNTYuNy0yLjcgNTYuNy0yLjcgMTEuNS0uNyAxMi44IDE2LjIgMS40IDE3LjUgMCAwLTExLjUgMS4zLTI0LjMgMmw3Ny41IDIzMC40TDI0OS44IDI0N2wtMzMuMS05MC44Yy0xMS41LS43LTIyLjMtMi0yMi4zLTItMTEuNS0uNy0xMC4xLTE4LjIgMS4zLTE3LjUgMCAwIDM1LjEgMi43IDU2IDIuNyAyMi4yIDAgNTYuNy0yLjcgNTYuNy0yLjcgMTEuNS0uNyAxMi44IDE2LjIgMS40IDE3LjUgMCAwLTExLjUgMS4zLTI0LjMgMmw3Ni45IDIyOC43IDIxLjItNzAuOWM5LTI5LjQgMTYtNTAuNSAxNi02OC43em0tMTM5LjkgMjkuM2wtNjMuOCAxODUuNWMxOS4xIDUuNiAzOS4yIDguNyA2MC4xIDguNyAyNC44IDAgNDguNS00LjMgNzAuNi0xMi4xLS42LS45LTEuMS0xLjktMS41LTIuOWwtNjUuNC0xNzkuMnptMTgzLTEyMC43Yy45IDYuOCAxLjQgMTQgMS40IDIxLjkgMCAyMS42LTQgNDUuOC0xNi4yIDc2LjJsLTY1IDE4Ny45QzQyNi4yIDQwMyA0NjguNyAzMzQuNSA0NjguNyAyNTZjMC0zNy05LjQtNzEuOC0yNi0xMDIuMXpNNTA0IDI1NmMwIDEzNi44LTExMS4zIDI0OC0yNDggMjQ4QzExOS4yIDUwNCA4IDM5Mi43IDggMjU2IDggMTE5LjIgMTE5LjIgOCAyNTYgOGMxMzYuNyAwIDI0OCAxMTEuMiAyNDggMjQ4em0tMTEuNCAwYzAtMTMwLjUtMTA2LjItMjM2LjYtMjM2LjYtMjM2LjZDMTI1LjUgMTkuNCAxOS40IDEyNS41IDE5LjQgMjU2UzEyNS42IDQ5Mi42IDI1NiA0OTIuNmMxMzAuNSAwIDIzNi42LTEwNi4xIDIzNi42LTIzNi42elwiXVxufTtcbnZhciBmYVByb2R1Y3RIdW50ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Byb2R1Y3QtaHVudCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjI4OFwiLCBcIk0zMjYuMyAyMTguOGMwIDIwLjUtMTYuNyAzNy4yLTM3LjIgMzcuMmgtNzAuM3YtNzQuNGg3MC4zYzIwLjUgMCAzNy4yIDE2LjcgMzcuMiAzNy4yek01MDQgMjU2YzAgMTM3LTExMSAyNDgtMjQ4IDI0OFM4IDM5MyA4IDI1NiAxMTkgOCAyNTYgOHMyNDggMTExIDI0OCAyNDh6bS0xMjguMS0zNy4yYzAtNDcuOS0zOC45LTg2LjgtODYuOC04Ni44SDE2OS4ydjI0OGg0OS42di03NC40aDcwLjNjNDcuOSAwIDg2LjgtMzguOSA4Ni44LTg2Ljh6XCJdXG59O1xudmFyIGZhRmlyZWZveCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmaXJlZm94JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMjY5XCIsIFwiTTUwMy41MiwyNDEuNDhjLS4xMi0xLjU2LS4yNC0zLjEyLS4yNC00LjY4di0uMTJsLS4zNi00LjY4di0uMTJhMjQ1Ljg2LDI0NS44NiwwLDAsMC03LjMyLTQxLjE1YzAtLjEyLDAtLjEyLS4xMi0uMjRsLTEuMDgtNGMtLjEyLS4yNC0uMTItLjQ4LS4yNC0uNi0uMzYtMS4yLS43Mi0yLjUyLTEuMDgtMy43Mi0uMTItLjI0LS4xMi0uNi0uMjQtLjg0LS4zNi0xLjItLjcyLTIuNC0xLjA4LTMuNDgtLjEyLS4zNi0uMjQtLjYtLjM2LTEtLjM2LTEuMi0uNzItMi4yOC0xLjItMy40OGwtLjM2LTEuMDhjLS4zNi0xLjA4LS44NC0yLjI4LTEuMi0zLjM2YTguMjcsOC4yNywwLDAsMC0uMzYtMWMtLjQ4LTEuMDgtLjg0LTIuMjgtMS4zMi0zLjM2LS4xMi0uMjQtLjI0LS42LS4zNi0uODQtLjQ4LTEuMi0xLTIuMjgtMS40NC0zLjQ4LDAtLjEyLS4xMi0uMjQtLjEyLS4zNi0xLjU2LTMuODQtMy4yNC03LjY4LTUtMTEuNGwtLjM2LS43MmMtLjQ4LTEtLjg0LTEuOC0xLjMyLTIuNjQtLjI0LS40OC0uNDgtMS4wOC0uNzItMS41Ni0uMzYtLjg0LS44NC0xLjU2LTEuMi0yLjQtLjM2LS42LS42LTEuMi0xLTEuOHMtLjg0LTEuNDQtMS4yLTIuMjhjLS4zNi0uNi0uNzItMS4zMi0xLjA4LTEuOTJzLS44NC0xLjQ0LTEuMi0yLjE2YTE4LjA3LDE4LjA3LDAsMCwwLTEuMi0yYy0uMzYtLjcyLS44NC0xLjMyLTEuMi0ycy0uODQtMS4zMi0xLjItMi0uODQtMS4zMi0xLjItMS45Mi0uODQtMS40NC0xLjMyLTIuMTZhMTUuNjMsMTUuNjMsMCwwLDAtMS4yLTEuOEw0NjMuMiwxMTlhMTUuNjMsMTUuNjMsMCwwLDAtMS4yLTEuOGMtLjQ4LS43Mi0xLjA4LTEuNTYtMS41Ni0yLjI4LS4zNi0uNDgtLjcyLTEuMDgtMS4wOC0xLjU2bC0xLjgtMi41MmMtLjM2LS40OC0uNi0uODQtMS0xLjMyLTEtMS4zMi0xLjgtMi41Mi0yLjc2LTMuNzJhMjQ4Ljc2LDI0OC43NiwwLDAsMC0yMy41MS0yNi42NEExODYuODIsMTg2LjgyLDAsMCwwLDQxMiw2Mi40NmMtNC0zLjQ4LTguMTYtNi43Mi0xMi40OC05Ljg0YTE2Mi40OSwxNjIuNDksMCwwLDAtMjQuNi0xNS4xMmMtMi40LTEuMzItNC44LTIuNTItNy4yLTMuNzJhMjU0LDI1NCwwLDAsMC01NS40My0xOS41NmMtMS45Mi0uMzYtMy44NC0uODQtNS42NC0xLjJoLS4xMmMtMS0uMTItMS44LS4zNi0yLjc2LS40OGEyMzYuMzUsMjM2LjM1LDAsMCwwLTM4LTRIMjU1LjE0YTIzNC42MiwyMzQuNjIsMCwwLDAtNDUuNDgsNWMtMzMuNTksNy4wOC02My4yMywyMS4yNC04Mi45MSwzOS0xLjA4LDEtMS45MiwxLjY4LTIuNCwyLjE2bC0uNDguNDhIMTI0bC0uMTIuMTIuMTItLjEyYS4xMi4xMiwwLDAsMCwuMTItLjEybC0uMTIuMTJhLjQyLjQyLDAsMCwxLC4yNC0uMTJjMTQuNjQtOC43NiwzNC45Mi0xNiw0OS40NC0xOS41Nmw1Ljg4LTEuNDRjLjM2LS4xMi44NC0uMTIsMS4yLS4yNCwxLjY4LS4zNiwzLjM2LS43Miw1LjE2LTEuMDguMjQsMCwuNi0uMTIuODQtLjEyQzI1MC45NCwyMC45NCwzMTkuMzQsNDAuMTQsMzY3LDg1LjYxYTE3MS40OSwxNzEuNDksMCwwLDEsMjYuODgsMzIuNzZjMzAuMzYsNDkuMiwyNy40OCwxMTEuMTEsMy44NCwxNDcuNTktMzQuNDQsNTMtMTExLjM1LDcxLjI3LTE1OSwyNC44NGE4NC4xOSw4NC4xOSwwLDAsMS0yNS41Ni01OSw3NC4wNSw3NC4wNSwwLDAsMSw2LjI0LTMxYzEuNjgtMy44NCwxMy4wOC0yNS42NywxOC4yNC0yNC41OS0xMy4wOC0yLjc2LTM3LjU1LDIuNjQtNTQuNzEsMjguMTktMTUuMzYsMjIuOTItMTQuNTIsNTguMi01LDgzLjI4YTEzMi44NSwxMzIuODUsMCwwLDEtMTIuMTItMzkuMjRjLTEyLjI0LTgyLjU1LDQzLjMxLTE1Myw5NC4zMS0xNzAuNTEtMjcuNDgtMjQtOTYuNDctMjIuMzEtMTQ3LjcxLDE1LjM2LTI5Ljg4LDIyLTUxLjIzLDUzLjE2LTYyLjUxLDkwLjM2LDEuNjgtMjAuODgsOS42LTUyLjA4LDI1LjgtODMuODgtMTcuMTYsOC44OC0zOSwzNy00OS44LDYyLjg4LTE1LjYsMzcuNDMtMjEsODIuMTktMTYuMDgsMTI0Ljc5LjM2LDMuMjQuNzIsNi4zNiwxLjA4LDkuNiwxOS45MiwxMTcuMTEsMTIyLDIwNi4zOCwyNDQuNzgsMjA2LjM4QzM5Mi43Nyw1MDMuNDIsNTA0LDM5Mi4xOSw1MDQsMjU1LDUwMy44OCwyNTAuNDgsNTAzLjc2LDI0NS45Miw1MDMuNTIsMjQxLjQ4WlwiXVxufTtcbnZhciBmYUxpbm9kZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdsaW5vZGUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyYjhcIiwgXCJNMzY2LjAzNiwxODYuODY3bC01OS41LDM2Ljg3MS0uODM4LDM2Ljg3MS0yOS4zMjktMTkuMjczLTM5LjM4NCwyNC4zYzIuMjM4LDU1LjIxMSwyLjQ4Myw1OS4yNzEsMi41MSw1OS41bC05Ny4yLDY1LjM1OUwxMjcuMjE0LDI4NS43NDhsMTA4LjEtNjIuMDFMMTk1LjA5LDE5Ny43NjFsLTc1LjQxNywzOC41NDdMOTguNzIzLDkzLjAxNSwyMjcuNzcxLDQzLjU3NCwxMzYuNDMyLDAsMTAuNzM3LDM5LjM4NSwzOC4zOSwxNzQuM2w0MS45LDMyLjY4MUw0OC40NDUsMjIyLjA2Miw2OS4zOTQsMzIzLjQ1Nyw5OC43MjMsMzUxLjExLDc3Ljc3NCwzNjMuNjc5bDE2Ljc2LDc4Ljc2OUwxNjAuNzMzLDUxMmMtMTAuOC03NC44NDItMTEuNjU4LTc4LjY0MS0xMS43MjUtNzguNzczbDc3LjkyNS01NS4zYzE2Ljc1OS0xMi41NywxNS4wODMtMTAuODk0LDE1LjA4My0xMC44OTRsLjgzOCwyNC4zLDMzLjUxOSwyOC40OTEtLjgzOC03Ny4wOTMsNDYuOTI3LTMzLjUxOSwyNi44MTUtMTguNDM1LTIuNTE0LDM2LjAzMywyNS4xMzksMTcuNiw2LjctNzQuNTc5LDU4LjY1Ny00My41NzVaXCJdXG59O1xudmFyIGZhR29vZHJlYWRzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dvb2RyZWFkcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNhOFwiLCBcIk0yOTkuOSAxOTEuMmM1LjEgMzcuMy00LjcgNzktMzUuOSAxMDAuNy0yMi4zIDE1LjUtNTIuOCAxNC4xLTcwLjggNS43LTM3LjEtMTcuMy00OS41LTU4LjYtNDYuOC05Ny4yIDQuMy02MC45IDQwLjktODcuOSA3NS4zLTg3LjUgNDYuOS0uMiA3MS44IDMxLjggNzguMiA3OC4zek00NDggODh2MzM2YzAgMzAuOS0yNS4xIDU2LTU2IDU2SDU2Yy0zMC45IDAtNTYtMjUuMS01Ni01NlY4OGMwLTMwLjkgMjUuMS01NiA1Ni01NmgzMzZjMzAuOSAwIDU2IDI1LjEgNTYgNTZ6TTMzMCAzMTMuMnMtLjEtMzQtLjEtMjE3LjNoLTI5djQwLjNjLS44LjMtMS4yLS41LTEuNi0xLjItOS42LTIwLjctMzUuOS00Ni4zLTc2LTQ2LTUxLjkuNC04Ny4yIDMxLjItMTAwLjYgNzcuOC00LjMgMTQuOS01LjggMzAuMS01LjUgNDUuNiAxLjcgNzcuOSA0NS4xIDExNy44IDExMi40IDExNS4yIDI4LjktMS4xIDU0LjUtMTcgNjktNDUuMi41LTEgMS4xLTEuOSAxLjctMi45LjIuMS40LjEuNi4yLjMgMy44LjIgMzAuNy4xIDM0LjUtLjIgMTQuOC0yIDI5LjUtNy4yIDQzLjUtNy44IDIxLTIyLjMgMzQuNy00NC41IDM5LjUtMTcuOCAzLjktMzUuNiAzLjgtNTMuMi0xLjItMjEuNS02LjEtMzYuNS0xOS00MS4xLTQxLjgtLjMtMS42LTEuMy0xLjMtMi4zLTEuM2gtMjYuOGMuOCAxMC42IDMuMiAyMC4zIDguNSAyOS4yIDI0LjIgNDAuNSA4Mi43IDQ4LjUgMTI4LjIgMzcuNCA0OS45LTEyLjMgNjcuMy01NC45IDY3LjQtMTA2LjN6XCJdXG59O1xudmFyIGZhU3F1YXJlT2Rub2tsYXNzbmlraSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtb2Rub2tsYXNzbmlraScsXG4gIGljb246IFs0NDgsIDUxMiwgW1wib2Rub2tsYXNzbmlraS1zcXVhcmVcIl0sIFwiZjI2NFwiLCBcIk0yMjQgMTM3LjFhMzkuOSAzOS45IDAgMSAwIDAgNzkuNyAzOS45IDM5LjkgMCAxIDAgMC03OS43ek0zODQgMzJINjRDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2YzAtMzUuMy0yOC43LTY0LTY0LTY0ek0yMjQgOTUuOUE4MSA4MSAwIDEgMSAyMjQgMjU4YTgxIDgxIDAgMSAxIDAtMTYyLjF6bTU5LjMgMTY4LjNjMTYuOC0xMy4yIDI5LjUtNS41IDM0LjEgMy42YzcuOCAxNi0xLjEgMjMuNy0yMS41IDM3Yy0xNy4xIDEwLjktNDAuNyAxNS4yLTU2LjIgMTYuOGwxMyAxMi45IDQ3LjcgNDcuN2MxNy40IDE3LjktMTEgNDUuOC0yOC42IDI4LjZjLTEyLTEyLjItMjkuNS0yOS43LTQ3LjctNDcuOWwwIDAtNDcuNyA0Ny45Yy0xNy43IDE3LjItNDYtMTEtMjguNC0yOC42YzMuNy0zLjcgNy45LTcuOSAxMi41LTEyLjVjMTAuNC0xMC40IDIyLjYtMjIuNyAzNS4yLTM1LjJsMTIuOS0xMi45Yy0xNS40LTEuNi0zOS4zLTUuNy01Ni42LTE2LjhjLTIwLjMtMTMuMy0yOS4zLTIwLjktMjEuNC0zN2M0LjYtOS4xIDE3LjMtMTYuOCAzNC4xLTMuNmMwIDAgMjIuNyAxOCA1OS4zIDE4czU5LjMtMTggNTkuMy0xOHpcIl1cbn07XG52YXIgZmFPZG5va2xhc3NuaWtpU3F1YXJlID0gZmFTcXVhcmVPZG5va2xhc3NuaWtpO1xudmFyIGZhSnNmaWRkbGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnanNmaWRkbGUnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYxY2NcIiwgXCJNNTEwLjYzNCAyMzcuNDYyYy00LjcyNy0yLjYyMS01LjY2NC01Ljc0OC02LjM4MS0xMC43NzYtMi4zNTItMTYuNDg4LTMuNTM5LTMzLjYxOS05LjA5Ny00OS4wOTUtMzUuODk1LTk5Ljk1Ny0xNTMuOTktMTQzLjM4Ni0yNDYuODQ5LTkxLjY0Ni0yNy4zNyAxNS4yNS00OC45NzEgMzYuMzY5LTY1LjQ5MyA2My45MDMtMy4xODQtMS41MDgtNS40NTgtMi43MS03LjgyNC0zLjY4Ni0zMC4xMDItMTIuNDIxLTU5LjA0OS0xMC4xMjEtODUuMzMxIDkuMTY3LTI1LjUzMSAxOC43MzctMzYuNDIyIDQ0LjU0OC0zMi42NzYgNzYuNDA4LjM1NSAzLjAyNS0xLjk2NyA3LjYyMS00LjUxNCA5LjU0NS0zOS43MTIgMjkuOTkyLTU2LjAzMSA3OC4wNjUtNDEuOTAyIDEyNC42MTUgMTMuODMxIDQ1LjU2OSA1Ny41MTQgNzkuNzk2IDEwNS42MDggODEuNDMzIDMwLjI5MSAxLjAzMSA2MC42MzcuNTQ2IDkwLjk1OS41MzkgODQuMDQxLS4wMjEgMTY4LjA5LjUzMSAyNTIuMTItLjQ4IDUyLjY2NC0uNjM0IDk2LjEwOC0zNi44NzMgMTA4LjIxMi04Ny4yOTMgMTEuNTQtNDguMDc0LTExLjE0NC05Ny4zLTU2LjgzMi0xMjIuNjM0em0yMS4xMDcgMTU2Ljg4Yy0xOC4yMyAyMi40MzItNDIuMzQzIDM1LjI1My03MS4yOCAzNS42NS01Ni44NzQuNzgxLTExMy43NjcuMjMtMTcwLjY1Mi4yMyAwIC43LTE2My4wMjguMTU5LTE2My43MjguMTU0LTQzLjg2MS0uMzMyLTc2LjczOS0xOS43NjYtOTUuMTc1LTU5Ljk5NS0xOC45MDItNDEuMjQ1LTQuMDA0LTkwLjg0OCAzNC4xODYtMTE2LjEwNiA5LjE4Mi02LjA3MyAxMi41MDUtMTEuNTY2IDEwLjA5Ni0yMy4xMzYtNS40OS0yNi4zNjEgNC40NTMtNDcuOTU2IDI2LjQyLTYyLjk4MSAyMi45ODctMTUuNzIzIDQ3LjQyMi0xNi4xNDYgNzIuMDM0LTMuMDgzIDEwLjI2OSA1LjQ1IDE0LjYwNyAxMS41NjQgMjIuMTk4LTIuNTI3IDE0LjIyMi0yNi4zOTkgMzQuNTU3LTQ2LjcyNyA2MC42NzEtNjEuMjk0IDk3LjQ2LTU0LjM2NiAyMjguMzcgNy41NjggMjMwLjI0IDEzMi42OTcuMTIyIDguMTUgMi40MTIgMTIuNDI4IDkuODQ4IDE1Ljg5NCA1Ny41NiAyNi44MjkgNzQuNDU2IDk2LjEyMiAzNS4xNDIgMTQ0LjQ5N3ptLTg3Ljc4OS04MC40OTljLTUuODQ4IDMxLjE1Ny0zNC42MjIgNTUuMDk2LTY2LjY2NiA1NS4wOTUtMTYuOTUzLS4wMDEtMzIuMDU4LTYuNTQ1LTQ0LjA3OS0xNy43MDUtMjcuNjk3LTI1LjcxMy03MS4xNDEtNzQuOTgtOTUuOTM3LTkzLjM4Ny0yMC4wNTYtMTQuODg4LTQxLjk5LTEyLjMzMy02MC4yNzIgMy43ODItNDkuOTk2IDQ0LjA3MSAxNS44NTkgMTIxLjc3NSA2Ny4wNjMgNzcuMTg4IDQuNTQ4LTMuOTYgNy44NC05LjU0MyAxMi43NDQtMTIuODQ0IDguMTg0LTUuNTA5IDIwLjc2Ni0uODg0IDEzLjE2OCAxMC42MjItMTcuMzU4IDI2LjI4NC00OS4zMyAzOC4xOTctNzguODYzIDI5LjMwMS0yOC44OTctOC43MDQtNDguODQtMzUuOTY4LTQ4LjYyNi03MC4xNzkgMS4yMjUtMjIuNDg1IDEyLjM2NC00My4wNiAzNS40MTQtNTUuOTY1IDIyLjU3NS0xMi42MzggNDYuMzY5LTEzLjE0NiA2Ni45OTEgMi40NzRDMjk1LjY4IDI4MC43IDMyMC40NjcgMzIzLjk3IDM1Mi4xODUgMzQzLjQ3YzI0LjU1OCAxNS4wOTkgNTQuMjU0IDcuMzYzIDY4LjgyMy0xNy41MDYgMjguODMtNDkuMjA5LTM0LjU5Mi0xMDUuMDE2LTc4Ljg2OC02My40Ni0zLjk4OSAzLjc0NC02LjkxNyA4LjkzMi0xMS40MSAxMS43Mi0xMC45NzUgNi44MTEtMTcuMzMzLTQuMTEzLTEyLjgwOS0xMC4zNTMgMjAuNzAzLTI4LjU1NCA1MC40NjQtNDAuNDQgODMuMjcxLTI4LjIxNCAzMS40MjkgMTEuNzE0IDQ5LjEwOCA0NC4zNjYgNDIuNzYgNzguMTg2elwiXVxufTtcbnZhciBmYVNpdGggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2l0aCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjUxMlwiLCBcIk0wIDMybDY5LjcxIDExOC43NS01OC44Ni0xMS41MiA2OS44NCA5MS4wM2ExNDYuNzQxIDE0Ni43NDEgMCAwIDAgMCA1MS40NWwtNjkuODQgOTEuMDMgNTguODYtMTEuNTJMMCA0ODBsMTE4Ljc1LTY5LjcxLTExLjUyIDU4Ljg2IDkxLjAzLTY5Ljg0YzE3LjAyIDMuMDQgMzQuNDcgMy4wNCA1MS40OCAwbDkxLjAzIDY5Ljg0LTExLjUyLTU4Ljg2TDQ0OCA0ODBsLTY5LjcxLTExOC43OCA1OC44NiAxMS41Mi02OS44NC05MS4wM2MzLjAzLTE3LjAxIDMuMDQtMzQuNDQgMC01MS40NWw2OS44NC05MS4wMy01OC44NiAxMS41Mkw0NDggMzJsLTExOC43NSA2OS43MSAxMS41Mi01OC45LTkxLjA2IDY5Ljg3Yy04LjUtMS41Mi0xNy4xLTIuMjktMjUuNzEtMi4yOXMtMTcuMjEuNzgtMjUuNzEgMi4yOWwtOTEuMDYtNjkuODcgMTEuNTIgNTguOUwwIDMyem0yMjQgOTkuNzhjMzEuOCAwIDYzLjYgMTIuMTIgODcuODUgMzYuMzcgNDguNSA0OC41IDQ4LjQ5IDEyNy4yMSAwIDE3NS43cy0xMjcuMiA0OC40Ni0xNzUuNy0uMDNjLTQ4LjUtNDguNS00OC40OS0xMjcuMjEgMC0xNzUuNyAyNC4yNC0yNC4yNSA1Ni4wNS0zNi4zNCA4Ny44NS0zNi4zNHptMCAzNi42NmMtMjIuNDIgMC00NC44MyA4LjUyLTYxLjkyIDI1LjYxLTM0LjE4IDM0LjE4LTM0LjE5IDg5LjY4IDAgMTIzLjg3czg5LjY1IDM0LjE4IDEyMy44NCAwYzM0LjE4LTM0LjE4IDM0LjE5LTg5LjY4IDAtMTIzLjg3LTE3LjA5LTE3LjA5LTM5LjUtMjUuNjEtNjEuOTItMjUuNjF6XCJdXG59O1xudmFyIGZhVGhlbWVpc2xlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3RoZW1laXNsZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjJiMlwiLCBcIk0yMDggODguMjg2YzAtMTAgNi4yODYtMjEuNzE0IDE3LjcxNS0yMS43MTQgMTEuMTQyIDAgMTcuNzE0IDExLjcxNCAxNy43MTQgMjEuNzE0IDAgMTAuMjg1LTYuNTcyIDIxLjcxNC0xNy43MTQgMjEuNzE0QzIxNC4yODYgMTEwIDIwOCA5OC41NzEgMjA4IDg4LjI4NnptMzA0IDE2MGMwIDM2LjAwMS0xMS40MjkgMTAyLjI4Ni0zNi4yODYgMTI5LjcxNC0yMi44NTggMjQuODU4LTg3LjQyOCA2MS4xNDMtMTIwLjg1NyA3MC41NzJsLTEuMTQzLjI4NnYzMi41NzFjMCAxNi4yODYtMTIuNTcyIDMwLjU3MS0yOS4xNDMgMzAuNTcxLTEwIDAtMTkuNDI5LTUuNzE0LTI0LjU3Mi0xNC4yODYtNS40MjcgOC41NzItMTQuODU2IDE0LjI4Ni0yNC44NTYgMTQuMjg2LTEwIDAtMTkuNDI5LTUuNzE0LTI0Ljg1OC0xNC4yODYtNS4xNDIgOC41NzItMTQuNTcxIDE0LjI4Ni0yNC41NyAxNC4yODYtMTAuMjg2IDAtMTkuNDI5LTUuNzE0LTI0Ljg1OC0xNC4yODYtNS4xNDMgOC41NzItMTQuNTcxIDE0LjI4Ni0yNC41NzEgMTQuMjg2LTE4Ljg1NyAwLTI5LjQyOS0xNS43MTQtMjkuNDI5LTMyLjg1Ny0xNi4yODYgMTIuMjg1LTM1LjcxNSAxOS40MjgtNTYuNTcxIDE5LjQyOC0yMiAwLTQzLjQyOS04LjI4NS02MC4yODYtMjIuODU3IDEwLjI4NS0uMjg2IDIwLjU3MS0yLjI4NiAzMC4yODUtNS43MTQtMjAuODU3LTUuNzE0LTM5LjQyOC0xOC44NTctNTItMzYuMjg2IDIxLjM3IDQuNjQ1IDQ2LjIwOSAxLjY3MyA2Ny4xNDMtMTEuMTQzLTIyLTIyLTU2LjU3MS01OC44NTctNjguNTcyLTg3LjQyOEMxLjE0MyAzMjEuNzE0IDAgMzAzLjcxNCAwIDI4OS40MjljMC00OS43MTQgMjAuMjg2LTE2MCA4Ni4yODYtMTYwIDEwLjU3MSAwIDE4Ljg1NyA0Ljg1OCAyMy4xNDMgMTQuODU3YTE1OC43OTIgMTU4Ljc5MiAwIDAgMSAxMi0xNS40MjhjMi0yLjU3MiA1LjcxNC01LjQyOSA3LjE0My04LjI4NiA3Ljk5OS0xMi41NzEgMTEuNzE0LTIxLjE0MiAyMS43MTQtMzRDMTgyLjU3MSA0NS40MjggMjMyIDE3LjE0MyAyODUuMTQzIDE3LjE0M2M2IDAgMTIgLjI4NSAxNy43MTQgMS4xNDNDMzEzLjcxNCA2LjU3MSAzMjguODU3IDAgMzQ0LjU3MiAwYzE0LjU3MSAwIDI5LjcxNCA2IDQwIDE2LjI4Ni44NTcuODU4IDEuNDI4IDIuMjg2IDEuNDI4IDMuNDI4IDAgMy43MTQtMTAuMjg1IDEzLjQyOS0xMi44NTcgMTYuMjg2IDQuMjg2IDEuNDI5IDE1LjcxNCA2Ljg1OCAxNS43MTQgMTIgMCAyLjg1Ny0yLjg1NyA1LjE0My00LjU3MSA3LjE0MyAzMS40MjkgMjcuNzE0IDQ5LjQyOSA2Ny4xNDMgNTYuMjg2IDEwOCA0LjI4Ni01LjE0MyAxMC4yODUtOC41NzIgMTcuMTQzLTguNTcyIDEwLjU3MSAwIDIwLjg1NyA3LjE0NCAyOC41NzEgMTQuMDAxQzUwNy4xNDMgMTg3LjE0MyA1MTIgMjIxLjcxNCA1MTIgMjQ4LjI4NnpNMTg4IDg5LjQyOGMwIDE4LjI4NiAxMi41NzEgMzcuMTQzIDMyLjI4NiAzNy4xNDMgMTkuNzE0IDAgMzIuMjg1LTE4Ljg1NyAzMi4yODUtMzcuMTQzIDAtMTgtMTIuNTcxLTM2Ljg1Ny0zMi4yODUtMzYuODU3LTE5LjcxNSAwLTMyLjI4NiAxOC44NTgtMzIuMjg2IDM2Ljg1N3pNMjM3LjcxNCAxOTRjMC0xOS43MTQgMy43MTQtMzkuMTQzIDguNTcxLTU4LjI4Ni01Mi4wMzkgNzkuNTM0LTEzLjUzMSAxODQuNTcxIDY4Ljg1OCAxODQuNTcxIDIxLjQyOCAwIDQyLjU3MS03LjcxNCA2MC0yMCAyLTcuNDI5IDMuNzE0LTE0Ljg1NyAzLjcxNC0yMi41NzIgMC0xNC4yODYtNi4yODYtMjEuNDI4LTIwLjU3Mi0yMS40MjgtNC41NzEgMC05LjE0My44NTctMTMuNDI5IDEuNzE0LTYzLjM0MyAxMi42NjgtMTA3LjE0MiAzLjY2OS0xMDcuMTQyLTYzLjk5OXptLTQxLjE0MiAyNTQuODU4YzAtMTEuMTQzLTguODU4LTIwLjg1Ny0yMC4yODYtMjAuODU3LTExLjQyOSAwLTIwIDkuNzE1LTIwIDIwLjg1N3YzMi41NzFjMCAxMS4xNDMgOC41NzEgMjEuMTQyIDIwIDIxLjE0MiAxMS40MjggMCAyMC4yODYtOS43MTUgMjAuMjg2LTIxLjE0MnYtMzIuNTcxem00OS4xNDMgMGMwLTExLjE0My04LjU3Mi0yMC44NTctMjAtMjAuODU3LTExLjQyOSAwLTIwLjI4NiA5LjcxNS0yMC4yODYgMjAuODU3djMyLjU3MWMwIDExLjE0MyA4Ljg1NyAyMS4xNDIgMjAuMjg2IDIxLjE0MiAxMS40MjggMCAyMC0xMCAyMC0yMS4xNDJ2LTMyLjU3MXptNDkuNzEzIDBjMC0xMS4xNDMtOC44NTctMjAuODU3LTIwLjI4NS0yMC44NTctMTEuNDI5IDAtMjAuMjg2IDkuNzE1LTIwLjI4NiAyMC44NTd2MzIuNTcxYzAgMTEuMTQzIDguODU3IDIxLjE0MiAyMC4yODYgMjEuMTQyIDExLjQyOCAwIDIwLjI4NS05LjcxNSAyMC4yODUtMjEuMTQydi0zMi41NzF6bTQ5LjcxNSAwYzAtMTEuMTQzLTguODU3LTIwLjg1Ny0yMC4yODYtMjAuODU3LTExLjQyOCAwLTIwLjI4NiA5LjcxNS0yMC4yODYgMjAuODU3djMyLjU3MWMwIDExLjE0MyA4Ljg1OCAyMS4xNDIgMjAuMjg2IDIxLjE0MiAxMS40MjkgMCAyMC4yODYtMTAgMjAuMjg2LTIxLjE0MnYtMzIuNTcxek00MjEuNzE0IDI4NmMtMzAuODU3IDU5LjE0Mi05MC4yODUgMTAyLjU3Mi0xNTguNTcxIDEwMi41NzItOTYuNTcxIDAtMTYwLjU3MS04NC41NzItMTYwLjU3MS0xNzYuNTcyIDAtMTYuODU3IDItMzMuNDI5IDYtNDkuNzE0LTIwIDMzLjcxNS0yOS43MTQgNzIuNTcyLTI5LjcxNCAxMTEuNDI5IDAgNjAuMjg2IDI0Ljg1NyAxMjEuNzE1IDcxLjQyOSAxNjAuODU3IDUuMTQzLTkuNzE0IDE0Ljg1Ny0xNi4yODYgMjYtMTYuMjg2IDEwIDAgMTkuNDI4IDUuNzE0IDI0LjU3MSAxNC4yODYgNS40MjktOC41NzEgMTQuNTcxLTE0LjI4NiAyNC44NTgtMTQuMjg2IDEwIDAgMTkuNDI4IDUuNzE0IDI0LjU3MSAxNC4yODYgNS40MjktOC41NzEgMTQuODU3LTE0LjI4NiAyNC44NTgtMTQuMjg2IDEwIDAgMTkuNDI4IDUuNzE0IDI0Ljg1NyAxNC4yODYgNS4xNDMtOC41NzEgMTQuNTcxLTE0LjI4NiAyNC41NzItMTQuMjg2IDEwLjg1NyAwIDIwLjg1NyA2LjU3MiAyNS43MTQgMTYgNDMuNDI3LTM2LjI4NiA2OC41NjktOTIgNzEuNDI2LTE0OC4yODZ6bTEwLjU3Mi05OS43MTRjMC01My43MTQtMzQuNTcxLTEwNS43MTQtOTIuNTcyLTEwNS43MTQtMzAuMjg1IDAtNTguNTcxIDE1LjE0My03OC44NTcgMzYuODU3QzI0MC44NjIgMTgzLjgxMiAyMzMuNDEgMjU0IDMwMi4yODYgMjU0YzI4LjgwNSAwIDk3LjM1Ny0yOC41MzggODQuMjg2IDM2Ljg1NyAyOC44NTctMjYgNDUuNzE0LTY1LjcxNCA0NS43MTQtMTA0LjU3MXpcIl1cbn07XG52YXIgZmFQYWdlNCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwYWdlNCcsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjNkN1wiLCBcIk0yNDggNTA0QzExMSA1MDQgMCAzOTMgMCAyNTZTMTExIDggMjQ4IDhjMjAuOSAwIDQxLjMgMi42IDYwLjcgNy41TDQyLjMgMzkySDI0OHYxMTJ6bTAtMTQzLjZWMTQ2LjhMOTguNiAzNjAuNEgyNDh6bTk2IDMxLjZ2OTIuN2M0NS43LTE5LjIgODQuNS01MS43IDExMS40LTkyLjdIMzQ0em01Ny40LTEzOC4ybC0yMS4yIDguNCAyMS4yIDguM3YtMTYuN3ptLTIwLjMgNTQuNWMtNi43IDAtOCA2LjMtOCAxMi45djcuN2gxNi4ydi0xMGMwLTUuOS0yLjMtMTAuNi04LjItMTAuNnpNNDk2IDI1NmMwIDM3LjMtOC4yIDcyLjctMjMgMTA0LjRIMzQ0VjI3LjNDNDMzLjMgNjQuOCA0OTYgMTUzLjEgNDk2IDI1NnpNMzYwLjQgMTQzLjZoNjguMlY5NmgtMTMuOXYzMi42aC0xMy45Vjk5aC0xMy45djI5LjZoLTEyLjdWOTZoLTEzLjl2NDcuNnptNjguMSAxODUuM0g0MDJ2LTExYzAtMTUuNC01LjYtMjUuMi0yMC45LTI1LjItMTUuNCAwLTIwLjcgMTAuNi0yMC43IDI1Ljl2MjUuM2g2OC4ydi0xNXptMC0xMDNsLTY4LjIgMjkuN1YyNjhsNjguMiAyOS41di0xNi42bC0xNC40LTUuN3YtMjYuNWwxNC40LTUuOXYtMTYuOXptLTQuOC02OC41aC0zNS42VjE4NEg0MDJ2LTEyLjJoMTFjOC42IDE1LjggMS4zIDM1LjMtMTguNiAzNS4zLTIyLjUgMC0yOC4zLTI1LjMtMTUuNS0zNy43bC0xMS42LTEwLjZjLTE2LjIgMTcuNS0xMi4yIDYzLjkgMjcuMSA2My45IDM0IDAgNDQuNy0zNS45IDI5LjMtNjUuM3pcIl1cbn07XG52YXIgZmFIYXNobm9kZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdoYXNobm9kZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTQ5OVwiLCBcIk0zNS4xOSAxNzEuMUMtMTEuNzIgMjE3LjEtMTEuNzIgMjk0IDM1LjE5IDM0MC45TDE3MS4xIDQ3Ni44QzIxNy4xIDUyMy43IDI5NCA1MjMuNyAzNDAuOSA0NzYuOEw0NzYuOCAzNDAuOUM1MjMuNyAyOTQgNTIzLjcgMjE3LjEgNDc2LjggMTcxLjFMMzQwLjkgMzUuMTlDMjk0LTExLjcyIDIxNy4xLTExLjcyIDE3MS4xIDM1LjE5TDM1LjE5IDE3MS4xek0zMTUuNSAzMTUuNUMyODIuNiAzNDguMyAyMjkuNCAzNDguMyAxOTYuNiAzMTUuNUMxNjMuNyAyODIuNiAxNjMuNyAyMjkuNCAxOTYuNiAxOTYuNkMyMjkuNCAxNjMuNyAyODIuNiAxNjMuNyAzMTUuNSAxOTYuNkMzNDguMyAyMjkuNCAzNDguMyAyODIuNiAzMTUuNSAzMTUuNXpcIl1cbn07XG52YXIgZmFSZWFjdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyZWFjdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjQxYlwiLCBcIk00MTguMiAxNzcuMmMtNS40LTEuOC0xMC44LTMuNS0xNi4yLTUuMS45LTMuNyAxLjctNy40IDIuNS0xMS4xIDEyLjMtNTkuNiA0LjItMTA3LjUtMjMuMS0xMjMuMy0yNi4zLTE1LjEtNjkuMi42LTExMi42IDM4LjQtNC4zIDMuNy04LjUgNy42LTEyLjUgMTEuNS0yLjctMi42LTUuNS01LjItOC4zLTcuNy00NS41LTQwLjQtOTEuMS01Ny40LTExOC40LTQxLjUtMjYuMiAxNS4yLTM0IDYwLjMtMjMgMTE2LjcgMS4xIDUuNiAyLjMgMTEuMSAzLjcgMTYuNy02LjQgMS44LTEyLjcgMy44LTE4LjYgNS45QzM4LjMgMTk2LjIgMCAyMjUuNCAwIDI1NS42YzAgMzEuMiA0MC44IDYyLjUgOTYuMyA4MS41IDQuNSAxLjUgOSAzIDEzLjYgNC4zLTEuNSA2LTIuOCAxMS45LTQgMTgtMTAuNSA1NS41LTIuMyA5OS41IDIzLjkgMTE0LjYgMjcgMTUuNiA3Mi40LS40IDExNi42LTM5LjEgMy41LTMuMSA3LTYuMyAxMC41LTkuNyA0LjQgNC4zIDkgOC40IDEzLjYgMTIuNCA0Mi44IDM2LjggODUuMSA1MS43IDExMS4yIDM2LjYgMjctMTUuNiAzNS44LTYyLjkgMjQuNC0xMjAuNS0uOS00LjQtMS45LTguOS0zLTEzLjUgMy4yLS45IDYuMy0xLjkgOS40LTIuOSA1Ny43LTE5LjEgOTkuNS01MCA5OS41LTgxLjcgMC0zMC4zLTM5LjQtNTkuNy05My44LTc4LjR6TTI4Mi45IDkyLjNjMzcuMi0zMi40IDcxLjktNDUuMSA4Ny43LTM2IDE2LjkgOS43IDIzLjQgNDguOSAxMi44IDEwMC40LS43IDMuNC0xLjQgNi43LTIuMyAxMC0yMi4yLTUtNDQuNy04LjYtNjcuMy0xMC42LTEzLTE4LjYtMjcuMi0zNi40LTQyLjYtNTMuMSAzLjktMy43IDcuNy03LjIgMTEuNy0xMC43ek0xNjcuMiAzMDcuNWM1LjEgOC43IDEwLjMgMTcuNCAxNS44IDI1LjktMTUuNi0xLjctMzEuMS00LjItNDYuNC03LjUgNC40LTE0LjQgOS45LTI5LjMgMTYuMy00NC41IDQuNiA4LjggOS4zIDE3LjUgMTQuMyAyNi4xem0tMzAuMy0xMjAuM2MxNC40LTMuMiAyOS43LTUuOCA0NS42LTcuOC01LjMgOC4zLTEwLjUgMTYuOC0xNS40IDI1LjQtNC45IDguNS05LjcgMTcuMi0xNC4yIDI2LTYuMy0xNC45LTExLjYtMjkuNS0xNi00My42em0yNy40IDY4LjljNi42LTEzLjggMTMuOC0yNy4zIDIxLjQtNDAuNnMxNS44LTI2LjIgMjQuNC0zOC45YzE1LTEuMSAzMC4zLTEuNyA0NS45LTEuN3MzMSAuNiA0NS45IDEuN2M4LjUgMTIuNiAxNi42IDI1LjUgMjQuMyAzOC43czE0LjkgMjYuNyAyMS43IDQwLjRjLTYuNyAxMy44LTEzLjkgMjcuNC0yMS42IDQwLjgtNy42IDEzLjMtMTUuNyAyNi4yLTI0LjIgMzktMTQuOSAxLjEtMzAuNCAxLjYtNDYuMSAxLjZzLTMwLjktLjUtNDUuNi0xLjRjLTguNy0xMi43LTE2LjktMjUuNy0yNC42LTM5cy0xNC44LTI2LjgtMjEuNS00MC42em0xODAuNiA1MS4yYzUuMS04LjggOS45LTE3LjcgMTQuNi0yNi43IDYuNCAxNC41IDEyIDI5LjIgMTYuOSA0NC4zLTE1LjUgMy41LTMxLjIgNi4yLTQ3IDggNS40LTguNCAxMC41LTE3IDE1LjUtMjUuNnptMTQuNC03Ni41Yy00LjctOC44LTkuNS0xNy42LTE0LjUtMjYuMi00LjktOC41LTEwLTE2LjktMTUuMy0yNS4yIDE2LjEgMiAzMS41IDQuNyA0NS45IDgtNC42IDE0LjgtMTAgMjkuMi0xNi4xIDQzLjR6TTI1Ni4yIDExOC4zYzEwLjUgMTEuNCAyMC40IDIzLjQgMjkuNiAzNS44LTE5LjgtLjktMzkuNy0uOS01OS41IDAgOS44LTEyLjkgMTkuOS0yNC45IDI5LjktMzUuOHpNMTQwLjIgNTdjMTYuOC05LjggNTQuMSA0LjIgOTMuNCAzOSAyLjUgMi4yIDUgNC42IDcuNiA3LTE1LjUgMTYuNy0yOS44IDM0LjUtNDIuOSA1My4xLTIyLjYgMi00NSA1LjUtNjcuMiAxMC40LTEuMy01LjEtMi40LTEwLjMtMy41LTE1LjUtOS40LTQ4LjQtMy4yLTg0LjkgMTIuNi05NHptLTI0LjUgMjYzLjZjLTQuMi0xLjItOC4zLTIuNS0xMi40LTMuOS0yMS4zLTYuNy00NS41LTE3LjMtNjMtMzEuMi0xMC4xLTctMTYuOS0xNy44LTE4LjgtMjkuOSAwLTE4LjMgMzEuNi00MS43IDc3LjItNTcuNiA1LjctMiAxMS41LTMuOCAxNy4zLTUuNSA2LjggMjEuNyAxNSA0MyAyNC41IDYzLjYtOS42IDIwLjktMTcuOSA0Mi41LTI0LjggNjQuNXptMTE2LjYgOThjLTE2LjUgMTUuMS0zNS42IDI3LjEtNTYuNCAzNS4zLTExLjEgNS4zLTIzLjkgNS44LTM1LjMgMS4zLTE1LjktOS4yLTIyLjUtNDQuNS0xMy41LTkyIDEuMS01LjYgMi4zLTExLjIgMy43LTE2LjcgMjIuNCA0LjggNDUgOC4xIDY3LjkgOS44IDEzLjIgMTguNyAyNy43IDM2LjYgNDMuMiA1My40LTMuMiAzLjEtNi40IDYuMS05LjYgOC45em0yNC41LTI0LjNjLTEwLjItMTEtMjAuNC0yMy4yLTMwLjMtMzYuMyA5LjYuNCAxOS41LjYgMjkuNS42IDEwLjMgMCAyMC40LS4yIDMwLjQtLjctOS4yIDEyLjctMTkuMSAyNC44LTI5LjYgMzYuNHptMTMwLjcgMzBjLS45IDEyLjItNi45IDIzLjYtMTYuNSAzMS4zLTE1LjkgOS4yLTQ5LjgtMi44LTg2LjQtMzQuMi00LjItMy42LTguNC03LjUtMTIuNy0xMS41IDE1LjMtMTYuOSAyOS40LTM0LjggNDIuMi01My42IDIyLjktMS45IDQ1LjctNS40IDY4LjItMTAuNSAxIDQuMSAxLjkgOC4yIDIuNyAxMi4yIDQuOSAyMS42IDUuNyA0NC4xIDIuNSA2Ni4zem0xOC4yLTEwNy41Yy0yLjguOS01LjYgMS44LTguNSAyLjYtNy0yMS44LTE1LjYtNDMuMS0yNS41LTYzLjggOS42LTIwLjQgMTcuNy00MS40IDI0LjUtNjIuOSA1LjIgMS41IDEwLjIgMy4xIDE1IDQuNyA0Ni42IDE2IDc5LjMgMzkuOCA3OS4zIDU4IDAgMTkuNi0zNC45IDQ0LjktODQuOCA2MS40em0tMTQ5LjctMTVjMjUuMyAwIDQ1LjgtMjAuNSA0NS44LTQ1LjhzLTIwLjUtNDUuOC00NS44LTQ1LjhjLTI1LjMgMC00NS44IDIwLjUtNDUuOCA0NS44czIwLjUgNDUuOCA0NS44IDQ1Ljh6XCJdXG59O1xudmFyIGZhQ2NQYXlwYWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY2MtcGF5cGFsJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMWY0XCIsIFwiTTE4Ni4zIDI1OC4yYzAgMTIuMi05LjcgMjEuNS0yMiAyMS41LTkuMiAwLTE2LTUuMi0xNi0xNSAwLTEyLjIgOS41LTIyIDIxLjctMjIgOS4zIDAgMTYuMyA1LjcgMTYuMyAxNS41ek04MC41IDIwOS43aC00LjdjLTEuNSAwLTMgMS0zLjIgMi43bC00LjMgMjYuNyA4LjItLjNjMTEgMCAxOS41LTEuNSAyMS41LTE0LjIgMi4zLTEzLjQtNi4yLTE0LjktMTcuNS0xNC45em0yODQgMEgzNjBjLTEuOCAwLTMgMS0zLjIgMi43bC00LjIgMjYuNyA4LS4zYzEzIDAgMjItMyAyMi0xOC0uMS0xMC42LTkuNi0xMS4xLTE4LjEtMTEuMXpNNTc2IDgwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoNDgwYzI2LjUgMCA0OCAyMS41IDQ4IDQ4ek0xMjguMyAyMTUuNGMwLTIxLTE2LjItMjgtMzQuNy0yOGgtNDBjLTIuNSAwLTUgMi01LjIgNC43TDMyIDI5NC4yYy0uMyAyIDEuMiA0IDMuMiA0aDE5YzIuNyAwIDUuMi0yLjkgNS41LTUuN2w0LjUtMjYuNmMxLTcuMiAxMy4yLTQuNyAxOC00LjcgMjguNiAwIDQ2LjEtMTcgNDYuMS00NS44em04NC4yIDguOGgtMTljLTMuOCAwLTQgNS41LTQuMiA4LjItNS44LTguNS0xNC4yLTEwLTIzLjctMTAtMjQuNSAwLTQzLjIgMjEuNS00My4yIDQ1LjIgMCAxOS41IDEyLjIgMzIuMiAzMS43IDMyLjIgOSAwIDIwLjItNC45IDI2LjUtMTEuOS0uNSAxLjUtMSA0LjctMSA2LjIgMCAyLjMgMSA0IDMuMiA0SDIwMGMyLjcgMCA1LTIuOSA1LjUtNS43bDEwLjItNjQuM2MuMy0xLjktMS4yLTMuOS0zLjItMy45em00MC41IDk3LjlsNjMuNy05Mi42Yy41LS41LjUtMSAuNS0xLjcgMC0xLjctMS41LTMuNS0zLjItMy41aC0xOS4yYy0xLjcgMC0zLjUgMS00LjUgMi41bC0yNi41IDM5LTExLTM3LjVjLS44LTIuMi0zLTQtNS41LTRoLTE4LjdjLTEuNyAwLTMuMiAxLjgtMy4yIDMuNSAwIDEuMiAxOS41IDU2LjggMjEuMiA2Mi4xLTIuNyAzLjgtMjAuNSAyOC42LTIwLjUgMzEuNiAwIDEuOCAxLjUgMy4yIDMuMiAzLjJoMTkuMmMxLjgtLjEgMy41LTEuMSA0LjUtMi42em0xNTkuMy0xMDYuN2MwLTIxLTE2LjItMjgtMzQuNy0yOGgtMzkuN2MtMi43IDAtNS4yIDItNS41IDQuN2wtMTYuMiAxMDJjLS4yIDIgMS4zIDQgMy4yIDRoMjAuNWMyIDAgMy41LTEuNSA0LTMuMmw0LjUtMjljMS03LjIgMTMuMi00LjcgMTgtNC43IDI4LjQgMCA0NS45LTE3IDQ1LjktNDUuOHptODQuMiA4LjhoLTE5Yy0zLjggMC00IDUuNS00LjMgOC4yLTUuNS04LjUtMTQtMTAtMjMuNy0xMC0yNC41IDAtNDMuMiAyMS41LTQzLjIgNDUuMiAwIDE5LjUgMTIuMiAzMi4yIDMxLjcgMzIuMiA5LjMgMCAyMC41LTQuOSAyNi41LTExLjktLjMgMS41LTEgNC43LTEgNi4yIDAgMi4zIDEgNCAzLjIgNEg0ODRjMi43IDAgNS0yLjkgNS41LTUuN2wxMC4yLTY0LjNjLjMtMS45LTEuMi0zLjktMy4yLTMuOXptNDcuNS0zMy4zYzAtMi0xLjUtMy41LTMuMi0zLjVoLTE4LjVjLTEuNSAwLTMgMS4yLTMuMiAyLjdsLTE2LjIgMTA0LS4zLjVjMCAxLjggMS41IDMuNSAzLjUgMy41aDE2LjVjMi41IDAgNS0yLjkgNS4yLTUuN0w1NDQgMTkxLjJ2LS4zem0tOTAgNTEuOGMtMTIuMiAwLTIxLjcgOS43LTIxLjcgMjIgMCA5LjcgNyAxNSAxNi4yIDE1IDEyIDAgMjEuNy05LjIgMjEuNy0yMS41LjEtOS44LTYuOS0xNS41LTE2LjItMTUuNXpcIl1cbn07XG52YXIgZmFTcXVhcmVzcGFjZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmVzcGFjZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjViZVwiLCBcIk0xODYuMTIgMzQzLjM0Yy05LjY1IDkuNjUtOS42NSAyNS4yOSAwIDM0Ljk0IDkuNjUgOS42NSAyNS4yOSA5LjY1IDM0Ljk0IDBMMzc4LjI0IDIyMS4xYzE5LjI5LTE5LjI5IDUwLjU3LTE5LjI5IDY5Ljg2IDBzMTkuMjkgNTAuNTcgMCA2OS44NkwyOTMuOTUgNDQ1LjFjMTkuMjcgMTkuMjkgNTAuNTMgMTkuMzEgNjkuODIuMDRsLjA0LS4wNCAxMTkuMjUtMTE5LjI0YzM4LjU5LTM4LjU5IDM4LjU5LTEwMS4xNCAwLTEzOS43Mi0zOC41OS0zOC41OS0xMDEuMTUtMzguNTktMTM5LjcyIDBsLTE1Ny4yMiAxNTcuMnptMjQ0LjUzLTEwNC44Yy05LjY1LTkuNjUtMjUuMjktOS42NS0zNC45MyAwbC0xNTcuMiAxNTcuMThjLTE5LjI3IDE5LjI5LTUwLjUzIDE5LjMxLTY5LjgyLjA1bC0uMDUtLjA1Yy05LjY0LTkuNjQtMjUuMjctOS42NS0zNC45Mi0uMDFsLS4wMS4wMWMtOS42NSA5LjY0LTkuNjYgMjUuMjgtLjAyIDM0LjkzbC4wMi4wMmMzOC41OCAzOC41NyAxMDEuMTQgMzguNTcgMTM5LjcyIDBsMTU3LjItMTU3LjJjOS42NS05LjY1IDkuNjUtMjUuMjkuMDEtMzQuOTN6bS0yNjEuOTkgODcuMzNsMTU3LjE4LTE1Ny4xOGM5LjY0LTkuNjUgOS42NC0yNS4yOSAwLTM0Ljk0LTkuNjQtOS42NC0yNS4yNy05LjY0LTM0LjkxIDBMMTMzLjcyIDI5MC45M2MtMTkuMjggMTkuMjktNTAuNTYgMTkuMy02OS44NS4wMWwtLjAxLS4wMWMtMTkuMjktMTkuMjgtMTkuMzEtNTAuNTQtLjAzLTY5Ljg0bC4wMy0uMDNMMjE4LjAzIDY2Ljg5Yy0xOS4yOC0xOS4yOS01MC41NS0xOS4zLTY5Ljg1LS4wMmwtLjAyLjAyTDI4LjkzIDE4Ni4xNGMtMzguNTggMzguNTktMzguNTggMTAxLjE0IDAgMTM5LjcyIDM4LjYgMzguNTkgMTAxLjEzIDM4LjU5IDEzOS43My4wMXptLTg3LjMzLTUyLjRjOS42NCA5LjY0IDI1LjI3IDkuNjQgMzQuOTEgMGwxNTcuMjEtMTU3LjE5YzE5LjI4LTE5LjI5IDUwLjU1LTE5LjMgNjkuODQtLjAybC4wMi4wMmM5LjY1IDkuNjUgMjUuMjkgOS42NSAzNC45MyAwIDkuNjUtOS42NSA5LjY1LTI1LjI5IDAtMzQuOTMtMzguNTktMzguNTktMTAxLjEzLTM4LjU5LTEzOS43MiAwTDgxLjMzIDIzOC41NGMtOS42NSA5LjY0LTkuNjUgMjUuMjgtLjAxIDM0LjkzaC4wMXpcIl1cbn07XG52YXIgZmFDY1N0cmlwZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjYy1zdHJpcGUnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYxZjVcIiwgXCJNNDkyLjQgMjIwLjhjLTguOSAwLTE4LjcgNi43LTE4LjcgMjIuN2gzNi43YzAtMTYtOS4zLTIyLjctMTgtMjIuN3pNMzc1IDIyMy40Yy04LjIgMC0xMy4zIDIuOS0xNyA3bC4yIDUyLjhjMy41IDMuNyA4LjUgNi43IDE2LjggNi43IDEzLjEgMCAyMS45LTE0LjMgMjEuOS0zMy40IDAtMTguNi05LTMzLjItMjEuOS0zMy4xek01MjggMzJINDhDMjEuNSAzMiAwIDUzLjUgMCA4MHYzNTJjMCAyNi41IDIxLjUgNDggNDggNDhoNDgwYzI2LjUgMCA0OC0yMS41IDQ4LTQ4VjgwYzAtMjYuNS0yMS41LTQ4LTQ4LTQ4ek0xMjIuMiAyODEuMWMwIDI1LjYtMjAuMyA0MC4xLTQ5LjkgNDAuMy0xMi4yIDAtMjUuNi0yLjQtMzguOC04LjF2LTMzLjljMTIgNi40IDI3LjEgMTEuMyAzOC45IDExLjMgNy45IDAgMTMuNi0yLjEgMTMuNi04LjcgMC0xNy01NC0xMC42LTU0LTQ5LjkgMC0yNS4yIDE5LjItNDAuMiA0OC00MC4yIDExLjggMCAyMy41IDEuOCAzNS4zIDYuNXYzMy40Yy0xMC44LTUuOC0yNC41LTkuMS0zNS4zLTkuMS03LjUgMC0xMi4xIDIuMi0xMi4xIDcuNyAwIDE2IDU0LjMgOC40IDU0LjMgNTAuN3ptNjguOC01Ni42aC0yN1YyNzVjMCAyMC45IDIyLjUgMTQuNCAyNyAxMi42djI4LjljLTQuNyAyLjYtMTMuMyA0LjctMjQuOSA0LjctMjEuMSAwLTM2LjktMTUuNS0zNi45LTM2LjVsLjItMTEzLjkgMzQuNy03LjR2MzAuOEgxOTF6bTc0IDIuNGMtNC41LTEuNS0xOC43LTMuNi0yNy4xIDcuNHY4NC40aC0zNS41VjE5NC4yaDMwLjdsMi4yIDEwLjVjOC4zLTE1LjMgMjQuOS0xMi4yIDI5LjYtMTAuNWguMXptNDQuMSA5MS44aC0zNS43VjE5NC4yaDM1Ljd6bTAtMTQyLjlsLTM1LjcgNy42di0yOC45bDM1LjctNy42em03NC4xIDE0NS41Yy0xMi40IDAtMjAtNS4zLTI1LjEtOWwtLjEgNDAuMi0zNS41IDcuNVYxOTQuMmgzMS4zbDEuOCA4LjhjNC45LTQuNSAxMy45LTExLjEgMjcuOC0xMS4xIDI0LjkgMCA0OC40IDIyLjUgNDguNCA2My44IDAgNDUuMS0yMy4yIDY1LjUtNDguNiA2NS42em0xNjAuNC01MS41aC02OS41YzEuNiAxNi42IDEzLjggMjEuNSAyNy42IDIxLjUgMTQuMSAwIDI1LjItMyAzNC45LTcuOVYzMTJjLTkuNyA1LjMtMjIuNCA5LjItMzkuNCA5LjItMzQuNiAwLTU4LjgtMjEuNy01OC44LTY0LjUgMC0zNi4yIDIwLjUtNjQuOSA1NC4zLTY0LjkgMzMuNyAwIDUxLjMgMjguNyA1MS4zIDY1LjEgMCAzLjUtLjMgMTAuOS0uNCAxMi45elwiXVxufTtcbnZhciBmYUNyZWF0aXZlQ29tbW9uc1NoYXJlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NyZWF0aXZlLWNvbW1vbnMtc2hhcmUnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY0ZjJcIiwgXCJNMjQ3LjYgOEMzODkuNCA4IDQ5NiAxMTguMSA0OTYgMjU2YzAgMTQ3LjEtMTE4LjUgMjQ4LTI0OC40IDI0OEMxMTMuNiA1MDQgMCAzOTQuNSAwIDI1NiAwIDEyMy4xIDEwNC43IDggMjQ3LjYgOHptLjggNDQuN0MxMzAuMiA1Mi43IDQ0LjcgMTUwLjYgNDQuNyAyNTZjMCAxMDkuOCA5MS4yIDIwMi44IDIwMy43IDIwMi44IDEwMy4yIDAgMjAyLjgtODEuMSAyMDIuOC0yMDIuOC4xLTExMy44LTkwLjItMjAzLjMtMjAyLjgtMjAzLjN6bTEwMSAxMzIuNGM3LjggMCAxMy43IDYuMSAxMy43IDEzLjd2MTgyLjVjMCA3LjctNi4xIDEzLjctMTMuNyAxMy43SDIxNC4zYy03LjcgMC0xMy43LTYtMTMuNy0xMy43di01NGgtNTRjLTcuOCAwLTEzLjctNi0xMy43LTEzLjdWMTMxLjFjMC04LjIgNi42LTEyLjcgMTIuNC0xMy43aDEzNi40YzcuNyAwIDEzLjcgNiAxMy43IDEzLjd2NTRoNTR6TTE1OS45IDMwMC4zaDQwLjdWMTk4LjljMC03LjQgNS44LTEyLjYgMTItMTMuN2g1NS44di00MC4zSDE1OS45djE1NS40em0xNzYuMi04OC4xSDIyNy42djE1NS40aDEwOC41VjIxMi4yelwiXVxufTtcbnZhciBmYUJpdGNvaW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYml0Y29pbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjM3OVwiLCBcIk01MDQgMjU2YzAgMTM2Ljk2Ny0xMTEuMDMzIDI0OC0yNDggMjQ4UzggMzkyLjk2NyA4IDI1NiAxMTkuMDMzIDggMjU2IDhzMjQ4IDExMS4wMzMgMjQ4IDI0OHptLTE0MS42NTEtMzUuMzNjNC45MzctMzIuOTk5LTIwLjE5MS01MC43MzktNTQuNTUtNjIuNTczbDExLjE0Ni00NC43MDItMjcuMjEzLTYuNzgxLTEwLjg1MSA0My41MjRjLTcuMTU0LTEuNzgzLTE0LjUwMi0zLjQ2NC0yMS44MDMtNS4xM2wxMC45MjktNDMuODEtMjcuMTk4LTYuNzgxLTExLjE1MyA0NC42ODZjLTUuOTIyLTEuMzQ5LTExLjczNS0yLjY4Mi0xNy4zNzctNC4wODRsLjAzMS0uMTQtMzcuNTMtOS4zNy03LjIzOSAyOS4wNjJzMjAuMTkxIDQuNjI3IDE5Ljc2NSA0LjkxM2MxMS4wMjIgMi43NTEgMTMuMDE0IDEwLjA0NCAxMi42OCAxNS44MjVsLTEyLjY5NiA1MC45MjVjLjc2LjE5NCAxLjc0NC40NzMgMi44MjkuOTA3LS45MDctLjIyNS0xLjg3Ni0uNDczLTIuODc2LS43MTNsLTE3Ljc5NiA3MS4zMzhjLTEuMzQ5IDMuMzQ4LTQuNzY3IDguMzctMTIuNDcxIDYuNDY0LjI3MS4zOTUtMTkuNzgtNC45MzctMTkuNzgtNC45MzdsLTEzLjUxIDMxLjE0NyAzNS40MTQgOC44MjdjNi41ODggMS42NTEgMTMuMDQ1IDMuMzc5IDE5LjQgNS4wMDZsLTExLjI2MiA0NS4yMTMgMjcuMTgyIDYuNzgxIDExLjE1My00NC43MzNhMTAzOC4yMDkgMTAzOC4yMDkgMCAwIDAgMjEuNjg3IDUuNjI3bC0xMS4xMTUgNDQuNTIzIDI3LjIxMyA2Ljc4MSAxMS4yNjItNDUuMTI4YzQ2LjQwNCA4Ljc4MSA4MS4yOTkgNS4yMzkgOTUuOTg2LTM2LjcyNyAxMS44MzYtMzMuNzktLjU4OS01My4yODEtMjUuMDA0LTY1Ljk5MSAxNy43OC00LjA5OCAzMS4xNzQtMTUuNzkyIDM0Ljc0Ny0zOS45NDl6bS02Mi4xNzcgODcuMTc5Yy04LjQxIDMzLjc5LTY1LjMwOCAxNS41MjMtODMuNzU1IDEwLjk0M2wxNC45NDQtNTkuODk5YzE4LjQ0NiA0LjYwMyA3Ny42IDEzLjcxNyA2OC44MTEgNDguOTU2em04LjQxNy04Ny42NjdjLTcuNjczIDMwLjczNi01NS4wMzEgMTUuMTItNzAuMzkzIDExLjI5MmwxMy41NDgtNTQuMzI3YzE1LjM2MyAzLjgyOCA2NC44MzYgMTAuOTczIDU2Ljg0NSA0My4wMzV6XCJdXG59O1xudmFyIGZhS2V5Y2RuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2tleWNkbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNiYVwiLCBcIk02My44IDQwOS4zbDYwLjUtNTljMzIuMSA0Mi44IDcxLjEgNjYgMTI2LjYgNjcuNCAzMC41LjcgNjAuMy03IDg2LjQtMjIuNCA1LjEgNS4zIDE4LjUgMTkuNSAyMC45IDIyLTMyLjIgMjAuNy02OS42IDMxLjEtMTA4LjEgMzAuMi00My4zLTEuMS04NC42LTE2LjctMTE3LjctNDQuNC4zLS42LTM4LjIgMzcuNS0zOC42IDM3LjkgOS41IDI5LjgtMTMuMSA2Mi40LTQ2LjMgNjIuNEMyMC43IDUwMy4zIDAgNDgxLjcgMCA0NTQuOWMwLTM0LjMgMzMuMS01Ni42IDYzLjgtNDUuNnptMzU0LjktMjUyLjRjMTkuMSAzMS4zIDI5LjYgNjcuNCAyOC43IDEwNC0xLjEgNDQuOC0xOSA4Ny41LTQ4LjYgMTIxIC4zLjMgMjMuOCAyNS4yIDI0LjEgMjUuNSA5LjYtMS4zIDE5LjIgMiAyNS45IDkuMSAxMS4zIDEyIDEwLjkgMzAuOS0xLjEgNDIuNC0xMiAxMS4zLTMwLjkgMTAuOS00Mi40LTEuMS02LjctNy05LjQtMTYuOC03LjYtMjYuMy0yNC45LTI2LjYtNDQuNC00Ny4yLTQ0LjQtNDcuMiA0Mi43LTM0LjEgNjMuMy03OS42IDY0LjQtMTI0LjIuNy0yOC45LTcuMi01Ny4yLTIxLjEtODIuMmwyMi4xLTIxek0xMDQgNTMuMWM2LjcgNyA5LjQgMTYuOCA3LjYgMjYuM2w0NS45IDQ4LjFjLTQuNyAzLjgtMTMuMyAxMC40LTIyLjggMjEuMy0yNS40IDI4LjUtMzkuNiA2NC44LTQwLjcgMTAyLjktLjcgMjguOSA2LjEgNTcuMiAyMCA4Mi40bC0yMiAyMS41QzcyLjcgMzI0IDYzLjEgMjg3LjkgNjQuMiAyNTAuOWMxLTQ0LjYgMTguMy04Ny42IDQ3LjUtMTIxLjFsLTI1LjMtMjYuNGMtOS42IDEuMy0xOS4yLTItMjUuOS05LjEtMTEuMy0xMi0xMC45LTMwLjkgMS4xLTQyLjRDNzMuNSA0MC43IDkyLjIgNDEgMTA0IDUzLjF6TTQ2NC45IDhjMjYgMCA0Ny4xIDIyLjQgNDcuMSA0OC4zUzQ5MC45IDEwNCA0NjQuOSAxMDRjLTYuMy4xLTE0LTEuMS0xNS45LTEuOGwtNjIuOSA1OS43Yy0zMi43LTQzLjYtNzYuNy02NS45LTEyNi45LTY3LjItMzAuNS0uNy02MC4zIDYuOC04Ni4yIDIyLjRsLTIxLjEtMjJDMTg0LjEgNzQuMyAyMjEuNSA2NCAyNjAgNjQuOWM0My4zIDEuMSA4NC42IDE2LjcgMTE3LjcgNDQuNmw0MS4xLTM4LjZjLTEuNS00LjctMi4yLTkuNi0yLjItMTQuNUM0MTYuNSAyOS43IDQzOC45IDggNDY0LjkgOHpNMjU2LjcgMTEzLjRjNS41IDAgMTAuOS40IDE2LjQgMS4xIDc4LjEgOS44IDEzMy40IDgxLjEgMTIzLjggMTU5LjEtOS44IDc4LjEtODEuMSAxMzMuNC0xNTkuMSAxMjMuOC03OC4xLTkuOC0xMzMuNC04MS4xLTEyMy44LTE1OS4yIDkuMy03Mi40IDcwLjEtMTI0LjYgMTQyLjctMTI0Ljh6bS01OSAxMTkuNGMuNiAyMi43IDEyLjIgNDEuOCAzMi40IDUyLjJsLTExIDUxLjdoNzMuN2wtMTEtNTEuN2MyMC4xLTEwLjkgMzIuMS0yOSAzMi40LTUyLjItLjQtMzIuOC0yNS44LTU3LjUtNTguMy01OC4zLTMyLjEuOC01Ny4zIDI0LjgtNTguMiA1OC4zek0yNTYgMTYwXCJdXG59O1xudmFyIGZhT3BlcmEgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnb3BlcmEnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYyNmFcIiwgXCJNMzEzLjkgMzIuN2MtMTcwLjIgMC0yNTIuNiAyMjMuOC0xNDcuNSAzNTUuMSAzNi41IDQ1LjQgODguNiA3NS42IDE0Ny41IDc1LjYgMzYuMyAwIDcwLjMtMTEuMSA5OS40LTMwLjQtNDMuOCAzOS4yLTEwMS45IDYzLTE2NS4zIDYzLTMuOSAwLTggMC0xMS45LS4zQzEwNC42IDQ4OS42IDAgMzgxLjEgMCAyNDggMCAxMTEgMTExIDAgMjQ4IDBoLjhjNjMuMS4zIDEyMC43IDI0LjEgMTY0LjQgNjMuMS0yOS0xOS40LTYzLjEtMzAuNC05OS4zLTMwLjR6bTEwMS44IDM5Ny43Yy00MC45IDI0LjctOTAuNyAyMy42LTEzMi01LjggNTYuMi0yMC41IDk3LjctOTEuNiA5Ny43LTE3Ni42IDAtODQuNy00MS4yLTE1NS44LTk3LjQtMTc2LjYgNDEuOC0yOS4yIDkxLjItMzAuMyAxMzIuOS01IDEwNS45IDk4LjcgMTA1LjUgMjY1LjctMS4yIDM2NHpcIl1cbn07XG52YXIgZmFJdGNoSW8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaXRjaC1pbycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjgzYVwiLCBcIk03MS45MiAzNC43N0M1MC4yIDQ3LjY3IDcuNCA5Ni44NCA3IDEwOS43M3YyMS4zNGMwIDI3LjA2IDI1LjI5IDUwLjg0IDQ4LjI1IDUwLjg0IDI3LjU3IDAgNTAuNTQtMjIuODUgNTAuNTQtNTAgMCAyNy4xMiAyMi4xOCA1MCA0OS43NiA1MHM0OS0yMi44NSA0OS01MGMwIDI3LjEyIDIzLjU5IDUwIDUxLjE2IDUwaC41YzI3LjU3IDAgNTEuMTYtMjIuODUgNTEuMTYtNTAgMCAyNy4xMiAyMS40NyA1MCA0OSA1MHM0OS43Ni0yMi44NSA0OS43Ni01MGMwIDI3LjEyIDIzIDUwIDUwLjU0IDUwIDIzIDAgNDguMjUtMjMuNzggNDguMjUtNTAuODR2LTIxLjM0Yy0uNC0xMi45LTQzLjItNjIuMDctNjQuOTItNzVDMzcyLjU2IDMyLjQgMzI1Ljc2IDMyIDI1NiAzMlM5MS4xNCAzMy4xIDcxLjkyIDM0Ljc3em0xMzIuMzIgMTM0LjM5Yy0yMiAzOC40LTc3LjkgMzguNzEtOTkuODUuMjUtMTMuMTcgMjMuMTQtNDMuMTcgMzIuMDctNTYgMjcuNjYtMy44NyA0MC4xNS0xMy42NyAyMzcuMTMgMTcuNzMgMjY5LjE1IDgwIDE4LjY3IDMwMi4wOCAxOC4xMiAzNzkuNzYgMCAzMS42NS0zMi4yNyAyMS4zMi0yMzIgMTcuNzUtMjY5LjE1LTEyLjkyIDQuNDQtNDIuODgtNC42LTU2LTI3LjY2LTIyIDM4LjUyLTc3Ljg1IDM4LjEtOTkuODUtLjI0LTcuMSAxMi40OS0yMy4wNSAyOC45NC01MS43NiAyOC45NGE1Ny41NCA1Ny41NCAwIDAgMS01MS43NS0yOC45NHptLTQxLjU4IDUzLjc3YzE2LjQ3IDAgMzEuMDkgMCA0OS4yMiAxOS43OGE0MzYuOTEgNDM2LjkxIDAgMCAxIDg4LjE4IDBDMzE4LjIyIDIyMyAzMzIuODUgMjIzIDM0OS4zMSAyMjNjNTIuMzMgMCA2NS4yMiA3Ny41MyA4My44NyAxNDQuNDUgMTcuMjYgNjIuMTUtNS41MiA2My42Ny0zMy45NSA2My43My00Mi4xNS0xLjU3LTY1LjQ5LTMyLjE4LTY1LjQ5LTYyLjc5LTM5LjI1IDYuNDMtMTAxLjkzIDguNzktMTU1LjU1IDAgMCAzMC42MS0yMy4zNCA2MS4yMi02NS40OSA2Mi43OS0yOC40Mi0uMDYtNTEuMi0xLjU4LTMzLjk0LTYzLjczIDE4LjY3LTY3IDMxLjU2LTE0NC40NSA4My44OC0xNDQuNDV6TTI1NiAyNzAuNzlzLTQ0LjM4IDQwLjc3LTUyLjM1IDU1LjIxbDI5LTEuMTd2MjUuMzJjMCAxLjU1IDIxLjM0LjE2IDIzLjMzLjE2IDExLjY1LjU0IDIzLjMxIDEgMjMuMzEtLjE2di0yNS4yOGwyOSAxLjE3Yy04LTE0LjQ4LTUyLjM1LTU1LjI0LTUyLjM1LTU1LjI0elwiXVxufTtcbnZhciBmYVVtYnJhY28gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndW1icmFjbycsXG4gIGljb246IFs1MTAsIDUxMiwgW10sIFwiZjhlOFwiLCBcIk0yNTUuMzUgOEMxMTguMzYgNy44MyA3LjE0IDExOC43MiA3IDI1NS42OGMtLjA3IDEzNyAxMTEgMjQ4LjIgMjQ4IDI0OC4yNyAxMzYuODUgMCAyNDcuODItMTEwLjcgMjQ4LTI0Ny42N1MzOTIuMzQgOC4xNyAyNTUuMzUgOHptMTQ1IDI2NnEtMS4xNCA0MC42OC0xNCA2NXQtNDMuNTEgMzVxLTMwLjYxIDEwLjctODUuNDUgMTAuNDdoLTQuNnEtNTQuNzguMjItODUuNDQtMTAuNDd0LTQzLjUyLTM1cS0xMi44NS0yNC4zNi0xNC02NWEyMjQuODEgMjI0LjgxIDAgMCAxIDAtMzAuNzEgNDE4LjM3IDQxOC4zNyAwIDAgMSAzLjYtNDMuODhjMS44OC0xMy4zOSAzLjU3LTIyLjU4IDUuNC0zMiAxLTQuODggMS4yOC02LjQyIDEuODItOC40NWE1LjA5IDUuMDkgMCAwIDEgNC45LTMuODloLjY5bDMyIDVhNS4wNyA1LjA3IDAgMCAxIDQuMTYgNSA1IDUgMCAwIDEgMCAuNzdsLTEuNyA4Ljc4cS0yLjQxIDEzLjI1LTQuODQgMzMuNjhhMzgwLjYyIDM4MC42MiAwIDAgMC0yLjY0IDQyLjE1cS0uMjggNDAuNDMgOC4xMyA1OS44M2E0My44NyA0My44NyAwIDAgMCAzMS4zMSAyNS4xOEEyNDMgMjQzIDAgMCAwIDI1MCAzNDAuNmgxMC4yNWEyNDIuNjQgMjQyLjY0IDAgMCAwIDU3LjI3LTUuMTYgNDMuODYgNDMuODYgMCAwIDAgMzEuMTUtMjUuMjNxOC41My0xOS40MiA4LjEzLTU5Ljc4YTM4OCAzODggMCAwIDAtMi42LTQyLjE1cS0yLjQ4LTIwLjM4LTQuODktMzMuNjhsLTEuNjktOC43OGE1IDUgMCAwIDEgMC0uNzcgNSA1IDAgMCAxIDQuMi01bDMyLTVoLjgyYTUgNSAwIDAgMSA0LjkgMy44OWMuNTUgMi4wNS44MSAzLjU3IDEuODMgOC40NSAxLjgyIDkuNjIgMy41MiAxOC43OCA1LjM5IDMyYTQxNS43MSA0MTUuNzEgMCAwIDEgMy42MSA0My44OCAyMjguMDYgMjI4LjA2IDAgMCAxLS4wNCAzMC43M3pcIl1cbn07XG52YXIgZmFHYWxhY3RpY1NlbmF0ZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnYWxhY3RpYy1zZW5hdGUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY1MGRcIiwgXCJNMjQ5Ljg2IDMzLjQ4djI2LjA3QzIzNi4yOCA4MC4xNyAyMjYgMTY4LjE0IDIyNS4zOSAyNzQuOWMxMS43NC0xNS42MiAxOS4xMy0zMy4zMyAxOS4xMy00OC4yNHYtMTYuODhjLS4wMy01LjMyLjc1LTEwLjUzIDIuMTktMTUuNjUuNjUtMi4xNCAxLjM5LTQuMDggMi42Mi01LjgyIDEuMjMtMS43NSAzLjQzLTMuNzkgNi42OC0zLjc5IDMuMjQgMCA1LjQ1IDIuMDUgNi42OCAzLjc5IDEuMjMgMS43NSAxLjk3IDMuNjggMi42MiA1LjgyIDEuNDQgNS4xMiAyLjIyIDEwLjMzIDIuMTkgMTUuNjV2MTYuODhjMCAxNC45MSA3LjM5IDMyLjYyIDE5LjEzIDQ4LjI0LS42My0xMDYuNzYtMTAuOTEtMTk0LjczLTI0LjQ5LTIxNS4zNVYzMy40OGgtMTIuMjh6bS0yNi4zNCAxNDcuNzdjLTkuNTIgMi4xNS0xOC43IDUuMTktMjcuNDYgOS4wOCA4LjkgMTYuMTIgOS43NiAzMi42NCAxLjcxIDM3LjI5LTggNC42Mi0yMS44NS00LjIzLTMxLjM2LTE5LjgyLTExLjU4IDguNzktMjEuODggMTkuMzItMzAuNTYgMzEuMDkgMTQuNzMgOS42MiAyMi44OSAyMi45MiAxOC4zMiAzMC42Ni00LjU0IDcuNy0yMC4wMyA3LjE0LTM1LjQ3LS45Ni01Ljc4IDEzLjI1LTkuNzUgMjcuNTEtMTEuNjUgNDIuNDIgOS42OC4xOCAxOC42NyAyLjM4IDI2LjE4IDYuMDQgMTcuNzgtLjMgMzIuNzctMS45NiA0MC40OS00LjIyIDUuNTUtMjYuMzUgMjMuMDItNDguMjMgNDYuMzItNTkuNTEuNzMtMjUuNTUgMS44OC00OS42NyAzLjQ4LTcyLjA3em02NC45NiAwYzEuNTkgMjIuNCAyLjc1IDQ2LjUyIDMuNDcgNzIuMDcgMjMuMjkgMTEuMjggNDAuNzcgMzMuMTYgNDYuMzIgNTkuNTEgNy43MiAyLjI2IDIyLjcxIDMuOTIgNDAuNDkgNC4yMiA3LjUxLTMuNjYgMTYuNS01Ljg1IDI2LjE4LTYuMDQtMS45LTE0LjkxLTUuODYtMjkuMTctMTEuNjUtNDIuNDItMTUuNDQgOC4xLTMwLjkzIDguNjYtMzUuNDcuOTYtNC41Ny03Ljc0IDMuNi0yMS4wNSAxOC4zMi0zMC42Ni04LjY4LTExLjc3LTE4Ljk4LTIyLjMtMzAuNTYtMzEuMDktOS41MSAxNS41OS0yMy4zNiAyNC40NC0zMS4zNiAxOS44Mi04LjA1LTQuNjUtNy4xOS0yMS4xNiAxLjcxLTM3LjI5YTE0Ny40OSAxNDcuNDkgMCAwIDAtMjcuNDUtOS4wOHptLTMyLjQ4IDguNmMtMy4yMyAwLTUuODYgOC44MS02LjA5IDE5LjkzaC0uMDV2MTYuODhjMCA0MS40Mi00OS4wMSA5NS4wNC05My40OSA5NS4wNC01MiAwLTEyMi43NS0xLjQ1LTE1Ni4zNyAyOS4xN3YyLjUxYzkuNDIgMTcuMTIgMjAuNTggMzMuMTcgMzMuMTggNDcuOTdDNDUuNyAzODAuMjYgODQuNzcgMzYwLjQgMTQxLjIgMzYwYzQ1LjY4IDEuMDIgNzkuMDMgMjAuMzMgOTAuNzYgNDAuODcuMDEuMDEtLjAxLjA0IDAgLjA1IDcuNjcgMi4xNCAxNS44NSAzLjIzIDI0LjA0IDMuMjEgOC4xOS4wMiAxNi4zNy0xLjA3IDI0LjA0LTMuMjEuMDEtLjAxLS4wMS0uMDQgMC0uMDUgMTEuNzQtMjAuNTQgNDUuMDgtMzkuODUgOTAuNzYtNDAuODcgNTYuNDMuMzkgOTUuNDkgMjAuMjYgMTA4LjAyIDQxLjM1IDEyLjYtMTQuOCAyMy43Ni0zMC44NiAzMy4xOC00Ny45N3YtMi41MWMtMzMuNjEtMzAuNjItMTA0LjM3LTI5LjE3LTE1Ni4zNy0yOS4xNy00NC40OCAwLTkzLjQ5LTUzLjYyLTkzLjQ5LTk1LjA0di0xNi44OGgtLjA1Yy0uMjMtMTEuMTItMi44Ni0xOS45My02LjA5LTE5Ljkzem0wIDk2LjU5YzIyLjQyIDAgNDAuNiAxOC4xOCA0MC42IDQwLjZzLTE4LjE4IDQwLjY1LTQwLjYgNDAuNjUtNDAuNi0xOC4yMy00MC42LTQwLjY1YzAtMjIuNDIgMTguMTgtNDAuNiA0MC42LTQwLjZ6bTAgNy42NGMtMTguMTkgMC0zMi45NiAxNC43Ny0zMi45NiAzMi45NlMyMzcuODEgMzYwIDI1NiAzNjBzMzIuOTYtMTQuNzcgMzIuOTYtMzIuOTYtMTQuNzctMzIuOTYtMzIuOTYtMzIuOTZ6bTAgNi4xNGMxNC44MSAwIDI2LjgyIDEyLjAxIDI2LjgyIDI2Ljgycy0xMi4wMSAyNi44Mi0yNi44MiAyNi44Mi0yNi44Mi0xMi4wMS0yNi44Mi0yNi44MiAxMi4wMS0yNi44MiAyNi44Mi0yNi44MnptLTExNC44IDY2LjY3Yy0xMC4xOS4wNy0yMS42LjM2LTMwLjUgMS42Ni40MyA0LjQyIDEuNTEgMTguNjMgNy4xMSAyOS43NiA5LjExLTIuNTYgMTguMzYtMy45IDI3LjYyLTMuOSA0MS4yOC45NCA3MS40OCAzNC4zNSA3OC4yNiA3NC40N2wuMTEgNC43YzEwLjQgMS45MSAyMS4xOSAyLjk0IDMyLjIxIDIuOTQgMTEuMDMgMCAyMS44MS0xLjAyIDMyLjIxLTIuOTRsLjExLTQuN2M2Ljc4LTQwLjEyIDM2Ljk4LTczLjUzIDc4LjI2LTc0LjQ3IDkuMjYgMCAxOC41MSAxLjM0IDI3LjYyIDMuOSA1LjYtMTEuMTMgNi42OC0yNS4zNCA3LjExLTI5Ljc2LTguOS0xLjMtMjAuMzItMS41OC0zMC41LTEuNjYtMTguNzYuNDItMzUuMTkgNC4xNy00OC42MSA5LjY3LTEyLjU0IDE2LjAzLTI5LjE2IDMwLjAzLTQ5LjU4IDMzLjA3LS4wOS4wMi0uMTcuMDQtLjI3LjA1LS4wNS4wMS0uMTEuMDQtLjE2LjA1LTUuMjQgMS4wNy0xMC42MyAxLjYtMTYuMTkgMS42LTUuNTUgMC0xMC45NS0uNTMtMTYuMTktMS42LS4wNS0uMDEtLjExLS4wNC0uMTYtLjA1LS4xLS4wMi0uMTctLjA0LS4yNy0uMDUtMjAuNDItMy4wMy0zNy4wMy0xNy4wNC00OS41OC0zMy4wNy0xMy40Mi01LjQ5LTI5Ljg2LTkuMjUtNDguNjEtOS42N3pcIl1cbn07XG52YXIgZmFVYnVudHUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndWJ1bnR1JyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmN2RmXCIsIFwiTTQ2OS4yIDc1QTc1LjYgNzUuNiAwIDEgMCAzMTcuOSA3NWE3NS42IDc1LjYgMCAxIDAgMTUxLjIgMHpNMTU0LjIgMjQwLjdBNzUuNiA3NS42IDAgMSAwIDMgMjQwLjdhNzUuNiA3NS42IDAgMSAwIDE1MS4yIDB6TTU3IDM0NkM3NS42IDM5Mi45IDEwOCA0MzMgMTUwIDQ2MS4xczkxLjUgNDIuNiAxNDIgNDEuN2MtMTQuNy0xOC42LTIyLjktNDEuNS0yMy4yLTY1LjJjLTYuOC0uOS0xMy4zLTIuMS0xOS41LTMuNGMtMjYuOC01LjctNTEuOS0xNy4zLTczLjYtMzRzLTM5LjMtMzguMS01MS43LTYyLjVjLTIwLjkgOS45LTQ0LjUgMTIuOC02Ny4xIDguMnptMzk1LjEgODkuOGE3NS42IDc1LjYgMCAxIDAgLTE1MS4yIDAgNzUuNiA3NS42IDAgMSAwIDE1MS4yIDB6TTQ0NCAzNTEuNmMxOC41IDE0LjggMzEuNiAzNS4yIDM3LjIgNTguMmMzMy4zLTQxLjMgNTIuNi05Mi4yIDU0LjgtMTQ1LjJzLTEyLjUtMTA1LjQtNDIuMi0xNDkuNGMtOC42IDIxLjUtMjQgMzkuNi00My44IDUxLjZjMTUuNCAyOC42IDIyLjkgNjAuOCAyMS45IDkzLjJzLTEwLjcgNjQtMjggOTEuNnpNMTAxLjEgMTM1LjRjMTIuNCAyLjcgMjQuMyA3LjUgMzUuMSAxNC4zYzE2LjYtMjQuMiAzOC45LTQ0LjEgNjQuOC01OFMyNTUuOCA3MC40IDI4NS4yIDcwYy4yLTUuOSAuOS0xMS45IDItMTcuN2MzLjYtMTYuNyAxMS4xLTMyLjMgMjEuOC00NS41Yy00Ny43LTMuOC05NS40IDYtMTM3LjYgMjguNVM5NC4zIDkxLjcgNzAuOCAxMzMuNGMyLjctLjIgNS4zLS4zIDgtLjNjNy41IDAgMTUgLjggMjIuNCAyLjN6XCJdXG59O1xudmFyIGZhRHJhZnQyZGlnaXRhbCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkcmFmdDJkaWdpdGFsJyxcbiAgaWNvbjogWzQ4MCwgNTEyLCBbXSwgXCJmMzk2XCIsIFwiTTQ4MCAzOTguMWwtMTQ0LTgyLjJ2NjQuN2gtOTEuM2MzMC44LTM1IDgxLjgtOTUuOSAxMTEuOC0xNDkuMyAzNS4yLTYyLjYgMTYuMS0xMjMuNC0xMi44LTE1My4zLTQuNC00LjYtNjIuMi02Mi45LTE2Ni00MS4yLTU5LjEgMTIuNC04OS40IDQzLjQtMTA0LjMgNjcuMy0xMy4xIDIwLjktMTcgMzkuOC0xOC4yIDQ3LjctNS41IDMzIDE5LjQgNjcuMSA1Ni43IDY3LjEgMzEuNyAwIDU3LjMtMjUuNyA1Ny4zLTU3LjQgMC0yNy4xLTE5LjctNTIuMS00OC01Ni44IDEuOC03LjMgMTcuNy0yMS4xIDI2LjMtMjQuNyA0MS4xLTE3LjMgNzggNS4yIDgzLjMgMzMuNSA4LjMgNDQuMy0zNy4xIDkwLjQtNjkuNyAxMjcuNkM4NC41IDMyOC4xIDE4LjMgMzk2LjggMCA0MTUuOWwzMzYtLjFWNDgwek0zNjkuOSAzNzFsNDcuMSAyNy4yLTQ3LjEgMjcuMnpNMTM0LjIgMTYxLjRjMCAxMi40LTEwIDIyLjQtMjIuNCAyMi40cy0yMi40LTEwLTIyLjQtMjIuNCAxMC0yMi40IDIyLjQtMjIuNCAyMi40IDEwLjEgMjIuNCAyMi40ek04Mi41IDM4MC41YzI1LjYtMjcuNCA5Ny43LTEwNC43IDE1MC44LTE2OS45IDM1LjEtNDMuMSA0MC4zLTgyLjQgMjguNC0xMTIuNy03LjQtMTguOC0xNy41LTMwLjItMjQuMy0zNS43IDQ1LjMgMi4xIDY4IDIzLjQgODIuMiAzOC4zIDAgMCA0Mi40IDQ4LjIgNS44IDExMy4zLTM3IDY1LjktMTEwLjkgMTQ3LjUtMTI4LjUgMTY2Ljd6XCJdXG59O1xudmFyIGZhU3RyaXBlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0cmlwZScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjQyOVwiLCBcIk0xNjUgMTQ0LjdsLTQzLjMgOS4yLS4yIDE0Mi40YzAgMjYuMyAxOS44IDQzLjMgNDYuMSA0My4zIDE0LjYgMCAyNS4zLTIuNyAzMS4yLTUuOXYtMzMuOGMtNS43IDIuMy0zMy43IDEwLjUtMzMuNy0xNS43VjIyMWgzMy43di0zNy44aC0zMy43em04OS4xIDUxLjZsLTIuNy0xMy4xSDIxM3YxNTMuMmg0NC4zVjIzMy4zYzEwLjUtMTMuOCAyOC4yLTExLjEgMzMuOS05LjN2LTQwLjhjLTYtMi4xLTI2LjctNi0zNy4xIDEzLjF6bTkyLjMtNzIuM2wtNDQuNiA5LjV2MzYuMmw0NC42LTkuNXpNNDQuOSAyMjguM2MwLTYuOSA1LjgtOS42IDE1LjEtOS43IDEzLjUgMCAzMC43IDQuMSA0NC4yIDExLjR2LTQxLjhjLTE0LjctNS44LTI5LjQtOC4xLTQ0LjEtOC4xLTM2IDAtNjAgMTguOC02MCA1MC4yIDAgNDkuMiA2Ny41IDQxLjIgNjcuNSA2Mi40IDAgOC4yLTcuMSAxMC45LTE3IDEwLjktMTQuNyAwLTMzLjctNi4xLTQ4LjYtMTQuMnY0MGMxNi41IDcuMSAzMy4yIDEwLjEgNDguNSAxMC4xIDM2LjkgMCA2Mi4zLTE1LjggNjIuMy00Ny44IDAtNTIuOS02Ny45LTQzLjQtNjcuOS02My40ek02NDAgMjYxLjZjMC00NS41LTIyLTgxLjQtNjQuMi04MS40cy02Ny45IDM1LjktNjcuOSA4MS4xYzAgNTMuNSAzMC4zIDc4LjIgNzMuNSA3OC4yIDIxLjIgMCAzNy4xLTQuOCA0OS4yLTExLjV2LTMzLjRjLTEyLjEgNi4xLTI2IDkuOC00My42IDkuOC0xNy4zIDAtMzIuNS02LjEtMzQuNS0yNi45aDg2LjljLjItMi4zLjYtMTEuNi42LTE1Ljl6bS04Ny45LTE2LjhjMC0yMCAxMi4zLTI4LjQgMjMuNC0yOC40IDEwLjkgMCAyMi41IDguNCAyMi41IDI4LjR6bS0xMTIuOS02NC42Yy0xNy40IDAtMjguNiA4LjItMzQuOCAxMy45bC0yLjMtMTFIMzYzdjIwNC44bDQ0LjQtOS40LjEtNTAuMmM2LjQgNC43IDE1LjkgMTEuMiAzMS40IDExLjIgMzEuOCAwIDYwLjgtMjMuMiA2MC44LTc5LjYuMS01MS42LTI5LjMtNzkuNy02MC41LTc5Ljd6bS0xMC42IDEyMi41Yy0xMC40IDAtMTYuNi0zLjgtMjAuOS04LjRsLS4zLTY2YzQuNi01LjEgMTEtOC44IDIxLjItOC44IDE2LjIgMCAyNy40IDE4LjIgMjcuNCA0MS40LjEgMjMuOS0xMC45IDQxLjgtMjcuNCA0MS44em0tMTI2LjcgMzMuN2g0NC42VjE4My4yaC00NC42elwiXVxufTtcbnZhciBmYUhvdXp6ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2hvdXp6JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMjdjXCIsIFwiTTI3NS45IDMzMC43SDE3MS4zVjQ4MEgxN1YzMmgxMDkuNXYxMDQuNWwzMDUuMSA4NS42VjQ4MEgyNzUuOXpcIl1cbn07XG52YXIgZmFHZyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnZycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjI2MFwiLCBcIk0xNzkuMiAyMzAuNGwxMDIuNCAxMDIuNC0xMDIuNCAxMDIuNEwwIDI1NiAxNzkuMiA3Ni44bDQ0LjggNDQuOC0yNS42IDI1LjYtMTkuMi0xOS4yLTEyOCAxMjggMTI4IDEyOCA1MS41LTUxLjUtNzcuMS03Ni41IDI1LjYtMjUuNnpNMzMyLjggNzYuOEwyMzAuNCAxNzkuMmwxMDIuNCAxMDIuNCAyNS42LTI1LjYtNzcuMS03Ni41IDUxLjUtNTEuNSAxMjggMTI4LTEyOCAxMjgtMTkuMi0xOS4yLTI1LjYgMjUuNiA0NC44IDQ0LjhMNTEyIDI1NiAzMzIuOCA3Ni44elwiXVxufTtcbnZhciBmYURobCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkaGwnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY3OTBcIiwgXCJNMjM4IDMwMS4yaDU4LjdMMzE5IDI3MWgtNTguN0wyMzggMzAxLjJ6TTAgMjgyLjl2Ni40aDgxLjhsNC43LTYuNEgwek0xNzIuOSAyNzFjLTguNyAwLTYtMy42LTQuNi01LjUgMi44LTMuOCA3LjYtMTAuNCAxMC40LTE0LjEgMi44LTMuNyAyLjgtNS45LTIuOC01LjloLTUxbC00MS4xIDU1LjhoMTAwLjFjMzMuMSAwIDUxLjUtMjIuNSA1Ny4yLTMwLjNoLTY4LjJ6bTMxNy41LTYuOWwzOS4zLTUzLjRoLTYyLjJsLTM5LjMgNTMuNGg2Mi4yek05NS4zIDI3MUgwdjYuNGg5MC42bDQuNy02LjR6bTExMS0yNi42Yy0yLjggMy44LTcuNSAxMC40LTEwLjMgMTQuMi0xLjQgMi00LjEgNS41IDQuNiA1LjVoNDUuNnM3LjMtMTAgMTMuNS0xOC40YzguNC0xMS40LjctMzUtMjkuMi0zNUgxMTIuNmwtMjAuNCAyNy44aDExMS40YzUuNiAwIDUuNSAyLjIgMi43IDUuOXpNMCAzMDEuMmg3My4xbDQuNy02LjRIMHY2LjR6bTMyMyAwaDU4LjdMNDA0IDI3MWgtNTguN2MtLjEgMC0yMi4zIDMwLjItMjIuMyAzMC4yem0yMjIgLjFoOTV2LTYuNGgtOTAuM2wtNC43IDYuNHptMjIuMy0zMC4zbC00LjcgNi40SDY0MFYyNzFoLTcyLjd6bS0xMy41IDE4LjNINjQwdi02LjRoLTgxLjVsLTQuNyA2LjR6bS0xNjQuMi03OC42bC0yMi41IDMwLjZoLTI2LjJsMjIuNS0zMC42aC01OC43bC0zOS4zIDUzLjRINDA5bDM5LjMtNTMuNGgtNTguN3ptMzMuNSA2MC4zcy00LjMgNS45LTYuNCA4LjdjLTcuNCAxMC0uOSAyMS42IDIzLjIgMjEuNmg5NC4zbDIyLjMtMzAuM0g0MjMuMXpcIl1cbn07XG52YXIgZmFTcXVhcmVQaW50ZXJlc3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXBpbnRlcmVzdCcsXG4gIGljb246IFs0NDgsIDUxMiwgW1wicGludGVyZXN0LXNxdWFyZVwiXSwgXCJmMGQzXCIsIFwiTTM4NCAzMkg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NGg3Mi42bC0yLjItLjhjLTUuNC00OC4xLTMuMS01Ny41IDE1LjctMTM0LjdjMy45LTE2IDguNS0zNSAxMy45LTU3LjljMCAwLTcuMy0xNC44LTcuMy0zNi41YzAtNzAuNyA3NS41LTc4IDc1LjUtMjVjMCAxMy41LTUuNCAzMS4xLTExLjIgNDkuOGMtMy4zIDEwLjYtNi42IDIxLjUtOS4xIDMyYy01LjcgMjQuNSAxMi4zIDQ0LjQgMzYuNCA0NC40YzQzLjcgMCA3Ny4yLTQ2IDc3LjItMTEyLjRjMC01OC44LTQyLjMtOTkuOS0xMDIuNi05OS45QzE1MyAxMzkgMTEyIDE5MS40IDExMiAyNDUuNmMwIDIxLjEgOC4yIDQzLjcgMTguMyA1NmMyIDIuNCAyLjMgNC41IDEuNyA3Yy0xLjEgNC43LTMuMSAxMi45LTQuNyAxOS4yYy0xIDQtMS44IDcuMy0yLjEgOC42Yy0xLjEgNC41LTMuNSA1LjUtOC4yIDMuM2MtMzAuNi0xNC4zLTQ5LjgtNTkuMS00OS44LTk1LjFDNjcuMiAxNjcuMSAxMjMuNCA5NiAyMjkuNCA5NmM4NS4yIDAgMTUxLjQgNjAuNyAxNTEuNCAxNDEuOGMwIDg0LjYtNTMuMyAxNTIuNy0xMjcuNCAxNTIuN2MtMjQuOSAwLTQ4LjMtMTIuOS01Ni4zLTI4LjJjMCAwLTEyLjMgNDYuOS0xNS4zIDU4LjRjLTUgMTkuMy0xNy42IDQyLjktMjcuNCA1OS4zSDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NmMwLTM1LjMtMjguNy02NC02NC02NHpcIl1cbn07XG52YXIgZmFQaW50ZXJlc3RTcXVhcmUgPSBmYVNxdWFyZVBpbnRlcmVzdDtcbnZhciBmYVhpbmcgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAneGluZycsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjE2OFwiLCBcIk0xNjIuNyAyMTBjLTEuOCAzLjMtMjUuMiA0NC40LTcwLjEgMTIzLjUtNC45IDguMy0xMC44IDEyLjUtMTcuNyAxMi41SDkuOGMtNy43IDAtMTIuMS03LjUtOC41LTE0LjRsNjktMTIxLjNjLjIgMCAuMi0uMSAwLS4zbC00My45LTc1LjZjLTQuMy03LjguMy0xNC4xIDguNS0xNC4xSDEwMGM3LjMgMCAxMy4zIDQuMSAxOCAxMi4ybDQ0LjcgNzcuNXpNMzgyLjYgNDYuMWwtMTQ0IDI1M3YuM0wzMzAuMiA0NjZjMy45IDcuMS4yIDE0LjEtOC41IDE0LjFoLTY1LjJjLTcuNiAwLTEzLjYtNC0xOC0xMi4ybC05Mi40LTE2OC41YzMuMy01LjggNTEuNS05MC44IDE0NC44LTI1NS4yIDQuNi04LjEgMTAuNC0xMi4yIDE3LjUtMTIuMmg2NS43YzggMCAxMi4zIDYuNyA4LjUgMTQuMXpcIl1cbn07XG52YXIgZmFCbGFja2JlcnJ5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JsYWNrYmVycnknLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzN2JcIiwgXCJNMTY2IDExNi45YzAgMjMuNC0xNi40IDQ5LjEtNzIuNSA0OS4xSDIzLjRsMjEtODguOGg2Ny44YzQyLjEgMCA1My44IDIzLjMgNTMuOCAzOS43em0xMjYuMi0zOS43aC02Ny44TDIwNS43IDE2Nmg3MC4xYzUzLjggMCA3MC4xLTI1LjcgNzAuMS00OS4xLjEtMTYuNC0xMS42LTM5LjctNTMuNy0zOS43ek04OC44IDIwOC4xSDIxTDAgMjk2LjloNzAuMWM1Ni4xIDAgNzIuNS0yMy40IDcyLjUtNDkuMSAwLTE2LjMtMTEuNy0zOS43LTUzLjgtMzkuN3ptMTgwLjEgMGgtNjcuOGwtMTguNyA4OC44aDcwLjFjNTMuOCAwIDcwLjEtMjMuNCA3MC4xLTQ5LjEgMC0xNi4zLTExLjctMzkuNy01My43LTM5Ljd6bTE4OS4zLTUzLjhoLTY3LjhsLTE4LjcgODguOGg3MC4xYzUzLjggMCA3MC4xLTIzLjQgNzAuMS00OS4xLjEtMTYuMy0xMS42LTM5LjctNTMuNy0zOS43em0tMjggMTM3LjloLTY3LjhMMzQzLjcgMzgxaDcwLjFjNTYuMSAwIDcwLjEtMjMuNCA3MC4xLTQ5LjEgMC0xNi4zLTExLjYtMzkuNy01My43LTM5Ljd6TTI0MC44IDM0NkgxNzNsLTE4LjcgODguOGg3MC4xYzU2LjEgMCA3MC4xLTI1LjcgNzAuMS00OS4xLjEtMTYuMy0xMS42LTM5LjctNTMuNy0zOS43elwiXVxufTtcbnZhciBmYUNyZWF0aXZlQ29tbW9uc1BkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NyZWF0aXZlLWNvbW1vbnMtcGQnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY0ZWNcIiwgXCJNMjQ4IDhDMTExIDggMCAxMTkuMSAwIDI1NmMwIDEzNyAxMTEgMjQ4IDI0OCAyNDhzMjQ4LTExMSAyNDgtMjQ4QzQ5NiAxMTkuMSAzODUgOCAyNDggOHptMCA0NDkuNWMtMTM5LjIgMC0yMzUuOC0xMzgtMTkwLjItMjY3LjlsNzguOCAzNS4xYy0yLjEgMTAuNS0zLjMgMjEuNS0zLjMgMzIuOSAwIDk5IDczLjkgMTI2LjkgMTIwLjQgMTI2LjkgMjIuOSAwIDUzLjUtNi43IDc5LjQtMjkuNUwyOTcgMzExLjFjLTUuNSA2LjMtMTcuNiAxNi43LTM2LjMgMTYuNy0zNy44IDAtNTMuNy0zOS45LTUzLjktNzEuOSAyMzAuNCAxMDIuNiAyMTYuNSA5Ni41IDIxNy45IDk2LjgtMzQuMyA2Mi40LTEwMC42IDEwNC44LTE3Ni43IDEwNC44em0xOTQuMi0xNTBsLTIyNC0xMDBjMTguOC0zNCA1NC45LTMwLjcgNzQuNy0xMWw0MC40LTQxLjZjLTI3LjEtMjMuMy01OC0yNy41LTc4LjEtMjcuNS00Ny40IDAtODAuOSAyMC41LTEwMC43IDUxLjZsLTc0LjktMzMuNGMzNi4xLTU0LjkgOTguMS05MS4yIDE2OC41LTkxLjIgMTExLjEgMCAyMDEuNSA5MC40IDIwMS41IDIwMS41IDAgMTgtMi40IDM1LjQtNi44IDUyLS4zLS4xLS40LS4yLS42LS40elwiXVxufTtcbnZhciBmYVBsYXlzdGF0aW9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BsYXlzdGF0aW9uJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmM2RmXCIsIFwiTTU3MC45IDM3Mi4zYy0xMS4zIDE0LjItMzguOCAyNC4zLTM4LjggMjQuM0wzMjcgNDcwLjJ2LTU0LjNsMTUwLjktNTMuOGMxNy4xLTYuMSAxOS44LTE0LjggNS44LTE5LjQtMTMuOS00LjYtMzkuMS0zLjMtNTYuMiAyLjlMMzI3IDM4MS4xdi01Ni40YzIzLjItNy44IDQ3LjEtMTMuNiA3NS43LTE2LjggNDAuOS00LjUgOTAuOS42IDEzMC4yIDE1LjUgNDQuMiAxNCA0OS4yIDM0LjcgMzggNDguOXptLTIyNC40LTkyLjV2LTEzOWMwLTE2LjMtMy0zMS4zLTE4LjMtMzUuNi0xMS43LTMuOC0xOSA3LjEtMTkgMjMuNHYzNDcuOWwtOTMuOC0yOS44VjMyYzM5LjkgNy40IDk4IDI0LjkgMTI5LjIgMzUuNEM0MjQuMSA5NC43IDQ1MSAxMjguNyA0NTEgMjA1LjJjMCA3NC41LTQ2IDEwMi44LTEwNC41IDc0LjZ6TTQzLjIgNDEwLjJjLTQ1LjQtMTIuOC01My0zOS41LTMyLjMtNTQuOCAxOS4xLTE0LjIgNTEuNy0yNC45IDUxLjctMjQuOWwxMzQuNS00Ny44djU0LjVsLTk2LjggMzQuNmMtMTcuMSA2LjEtMTkuNyAxNC44LTUuOCAxOS40IDEzLjkgNC42IDM5LjEgMy4zIDU2LjItMi45bDQ2LjQtMTYuOXY0OC44Yy01MS42IDkuMy0xMDEuNCA3LjMtMTUzLjktMTB6XCJdXG59O1xudmFyIGZhUXVpbnNjYXBlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3F1aW5zY2FwZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjQ1OVwiLCBcIk0zMTMuNiA0NzQuNmgtMWExNTguMSAxNTguMSAwIDAgMSAwLTMxNi4yYzk0LjkgMCAxNjguMiA4My4xIDE1NyAxNzYuNiA0IDUuMSA4LjIgOS42IDExLjIgMTUuMyAxMy40LTMwLjMgMjAuMy02Mi40IDIwLjMtOTcuN0M1MDEuMSAxMTcuNSAzOTEuNiA4IDI1Ni41IDhTMTIgMTE3LjUgMTIgMjUyLjZzMTA5LjUgMjQ0LjYgMjQ0LjUgMjQ0LjZhMjM3LjM2IDIzNy4zNiAwIDAgMCA3MC40LTEwLjFjLTUuMi0zLjUtOC45LTguMS0xMy4zLTEyLjV6bS0uMS0uMWwuNC4xem03OC40LTE2OC45YTk5LjIgOTkuMiAwIDEgMCA5OS4yIDk5LjIgOTkuMTggOTkuMTggMCAwIDAtOTkuMi05OS4yelwiXVxufTtcbnZhciBmYUxlc3MgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGVzcycsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjQxZFwiLCBcIk02MTIuNyAyMTljMC0yMC41IDMuMi0zMi42IDMuMi01NC42IDAtMzQuMi0xMi42LTQ1LjItNDAuNS00NS4yaC0yMC41djI0LjJoNi4zYzE0LjIgMCAxNy4zIDQuNyAxNy4zIDIyLjEgMCAxNi4zLTEuNiAzMi42LTEuNiA1MS41IDAgMjQuMiA3LjkgMzMuNiAyMy42IDM3LjN2MS42Yy0xNS44IDMuNy0yMy42IDEzLjEtMjMuNiAzNy4zIDAgMTguOSAxLjYgMzQuMiAxLjYgNTEuNSAwIDE3LjktMy43IDIyLjYtMTcuMyAyMi42di41aC02LjNWMzkzaDIwLjVjMjcuOCAwIDQwLjUtMTEgNDAuNS00NS4yIDAtMjIuNi0zLjItMzQuMi0zLjItNTQuNiAwLTExIDYuOC0yMi42IDI3LjMtMjMuNnYtMjcuM2MtMjAuNS0uNy0yNy4zLTEyLjMtMjcuMy0yMy4zem0tMTA1LjYgMzJjLTE1LjgtNi4zLTMwLjUtMTAtMzAuNS0yMC41IDAtNy45IDYuMy0xMi42IDE3LjktMTIuNnMyMi4xIDQuNyAzMy42IDEzLjFsMjEtMjcuOGMtMTMuMS0xMC0zMS0yMC41LTU1LjItMjAuNS0zNS43IDAtNTkuOSAyMC41LTU5LjkgNDkuNCAwIDI1LjcgMjIuNiAzOC45IDQxLjUgNDYuMiAxNi4zIDYuMyAzMi4xIDExLjYgMzIuMSAyMi4xIDAgNy45LTYuMyAxMy4xLTIwLjUgMTMuMS0xMy4xIDAtMjYuMy01LjMtNDAuNS0xNi4zbC0yMSAzMC41YzE1LjggMTMuMSAzOS45IDIyLjEgNTkuOSAyMi4xIDQyIDAgNjQuNi0yMi4xIDY0LjYtNTFzLTIyLjUtNDEtNDMtNDcuOHptLTM1OC45IDU5LjRjLTMuNyAwLTguNC0zLjItOC40LTEzLjFWMTE5LjFINjUuMmMtMjguNCAwLTQxIDExLTQxIDQ1LjIgMCAyMi42IDMuMiAzNS4yIDMuMiA1NC42IDAgMTEtNi44IDIyLjYtMjcuMyAyMy42djI3LjNjMjAuNS41IDI3LjMgMTIuMSAyNy4zIDIzLjEgMCAxOS40LTMuMiAzMS0zLjIgNTMuNiAwIDM0LjIgMTIuNiA0NS4yIDQwLjUgNDUuMmgyMC41di0yNC4yaC02LjNjLTEzLjEgMC0xNy4zLTUuMy0xNy4zLTIyLjZzMS42LTMyLjEgMS42LTUxLjVjMC0yNC4yLTcuOS0zMy42LTIzLjYtMzcuM3YtMS42YzE1LjgtMy43IDIzLjYtMTMuMSAyMy42LTM3LjMgMC0xOC45LTEuNi0zNC4yLTEuNi01MS41czMuNy0yMi4xIDE3LjMtMjIuMUg5M3YxNTAuOGMwIDMyLjEgMTEgNTMuMSA0My4xIDUzLjEgMTAgMCAxNy45LTEuNiAyMy42LTMuN2wtNS4zLTM0LjJjLTMuMS44LTQuNi44LTYuMi44ek0zNzkuOSAyNTFjLTE2LjMtNi4zLTMxLTEwLTMxLTIwLjUgMC03LjkgNi4zLTEyLjYgMTcuOS0xMi42IDExLjYgMCAyMi4xIDQuNyAzMy42IDEzLjFsMjEtMjcuOGMtMTMuMS0xMC0zMS0yMC41LTU1LjItMjAuNS0zNS43IDAtNTkuOSAyMC41LTU5LjkgNDkuNCAwIDI1LjcgMjIuNiAzOC45IDQxLjUgNDYuMiAxNi4zIDYuMyAzMi4xIDExLjYgMzIuMSAyMi4xIDAgNy45LTYuMyAxMy4xLTIwLjUgMTMuMS0xMy4xIDAtMjYuMy01LjMtNDAuNS0xNi4zbC0yMC41IDMwLjVjMTUuOCAxMy4xIDM5LjkgMjIuMSA1OS45IDIyLjEgNDIgMCA2NC42LTIyLjEgNjQuNi01MSAuMS0yOC45LTIyLjUtNDEtNDMtNDcuOHptLTE1NS02OC44Yy0zOC40IDAtNzUuMSAzMi4xLTc0LjEgODIuNSAwIDUyIDM0LjIgODIuNSA3OS4zIDgyLjUgMTguOSAwIDM5LjktNi44IDU2LjItMTcuOWwtMTUuOC0yNy44Yy0xMS42IDYuOC0yMi42IDEwLTM0LjIgMTAtMjEgMC0zNy4zLTEwLTQxLjUtMzQuMkgyOTBjLjUtMy43IDEuNi0xMSAxLjYtMTkuNC42LTQyLjYtMjIuNi03NS43LTY2LjctNzUuN3ptLTMwIDY2LjJjMy4yLTIxIDE1LjgtMzEgMzAuNS0zMSAxOC45IDAgMjYuMyAxMy4xIDI2LjMgMzFoLTU2Ljh6XCJdXG59O1xudmFyIGZhQmxvZ2dlckIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYmxvZ2dlci1iJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMzdkXCIsIFwiTTQ0Ni42IDIyMi43Yy0xLjgtOC02LjgtMTUuNC0xMi41LTE4LjUtMS44LTEtMTMtMi4yLTI1LTIuNy0yMC4xLS45LTIyLjMtMS4zLTI4LjctNS0xMC4xLTUuOS0xMi44LTEyLjMtMTIuOS0yOS41LS4xLTMzLTEzLjgtNjMuNy00MC45LTkxLjMtMTkuMy0xOS43LTQwLjktMzMtNjUuNS00MC41LTUuOS0xLjgtMTkuMS0yLjQtNjMuMy0yLjktNjkuNC0uOC04NC44LjYtMTA4LjQgMTBDNDUuOSA1OS41IDE0LjcgOTYuMSAzLjMgMTQyLjkgMS4yIDE1MS43LjcgMTY1LjguMiAyNDYuOGMtLjYgMTAxLjUuMSAxMTYuNCA2LjQgMTM2LjUgMTUuNiA0OS42IDU5LjkgODYuMyAxMDQuNCA5NC4zIDE0LjggMi43IDE5Ny4zIDMuMyAyMTYgLjggMzIuNS00LjQgNTgtMTcuNSA4MS45LTQxLjkgMTcuMy0xNy43IDI4LjEtMzYuOCAzNS4yLTYyLjEgNC45LTE3LjYgNC41LTE0Mi44IDIuNS0xNTEuN3ptLTMyMi4xLTYzLjZjNy44LTcuOSAxMC04LjIgNTguOC04LjIgNDMuOSAwIDQ1LjQuMSA1MS44IDMuNCA5LjMgNC43IDEzLjQgMTEuMyAxMy40IDIxLjkgMCA5LjUtMy44IDE2LjItMTIuMyAyMS42LTQuNiAyLjktNy4zIDMuMS01MC4zIDMuMy0yNi41LjItNDcuNy0uNC01MC44LTEuMi0xNi42LTQuNy0yMi44LTI4LjUtMTAuNi00MC44em0xOTEuOCAxOTkuOGwtMTQuOSAyLjQtNzcuNS45Yy02OC4xLjgtODcuMy0uNC05MC45LTItNy4xLTMuMS0xMy44LTExLjctMTQuOS0xOS40LTEuMS03LjMgMi42LTE3LjMgOC4yLTIyLjQgNy4xLTYuNCAxMC4yLTYuNiA5Ny4zLTYuNyA4OS42LS4xIDg5LjEtLjEgOTcuNiA3LjggMTIuMSAxMS4zIDkuNSAzMS4yLTQuOSAzOS40elwiXVxufTtcbnZhciBmYU9wZW5jYXJ0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ29wZW5jYXJ0JyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMjNkXCIsIFwiTTQyMy4zIDQ0MC43YzAgMjUuMy0yMC4zIDQ1LjYtNDUuNiA0NS42cy00NS44LTIwLjMtNDUuOC00NS42IDIwLjYtNDUuOCA0NS44LTQ1LjhjMjUuNCAwIDQ1LjYgMjAuNSA0NS42IDQ1Ljh6bS0yNTMuOS00NS44Yy0yNS4zIDAtNDUuNiAyMC42LTQ1LjYgNDUuOHMyMC4zIDQ1LjYgNDUuNiA0NS42IDQ1LjgtMjAuMyA0NS44LTQ1LjYtMjAuNS00NS44LTQ1LjgtNDUuOHptMjkxLjctMjcwQzE1OC45IDEyNC45IDgxLjkgMTEyLjEgMCAyNS43YzM0LjQgNTEuNyA1My4zIDE0OC45IDM3My4xIDE0NC4yIDMzMy4zLTUgMTMwIDg2LjEgNzAuOCAxODguOSAxODYuNy0xNjYuNyAzMTkuNC0yMzMuOSAxNy4yLTIzMy45elwiXVxufTtcbnZhciBmYVZpbmUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndmluZScsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjFjYVwiLCBcIk0zODQgMjU0Ljd2NTIuMWMtMTguNCA0LjItMzYuOSA2LjEtNTIuMSA2LjEtMzYuOSA3Ny40LTEwMyAxNDMuOC0xMjUuMSAxNTYuMi0xNCA3LjktMjcuMSA4LjQtNDIuNy0uOEMxMzcgNDUyIDM0LjIgMzY3LjcgMCAxMDIuN2g3NC41QzkzLjIgMjYxLjggMTM5IDM0My40IDE4OS4zIDQwNC41YzI3LjktMjcuOSA1NC44LTY1LjEgNzUuNi0xMDYuOS00OS44LTI1LjMtODAuMS04MC45LTgwLjEtMTQ1LjYgMC02NS42IDM3LjctMTE1LjEgMTAyLjItMTE1LjEgMTE0LjkgMCAxMDYuMiAxMjcuOSA4MS42IDE4MS41IDAgMC00Ni40IDkuMi02My41LTIwLjUgMy40LTExLjMgOC4yLTMwLjggOC4yLTQ4LjUgMC0zMS4zLTExLjMtNDYuNi0yOC40LTQ2LjYtMTguMiAwLTMwLjggMTcuMS0zMC44IDUwIC4xIDc5LjIgNTkuNCAxMTguNyAxMjkuOSAxMDEuOXpcIl1cbn07XG52YXIgZmFTaWduYWxNZXNzZW5nZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2lnbmFsLW1lc3NlbmdlcicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTY2M1wiLCBcIk0xOTQuNiA3LjVsNS44IDIzLjNDMTc3LjcgMzYuMyAxNTYgNDUuMyAxMzYgNTcuNEwxMjMuNyAzNi44YzIyLTEzLjMgNDUuOS0yMy4yIDcwLjktMjkuM3ptMTIyLjkgMGwtNS44IDIzLjNDMzM0LjMgMzYuMyAzNTYgNDUuMyAzNzYgNTcuNGwxMi40LTIwLjZjLTIyLTEzLjMtNDYtMjMuMi03MS0yOS4zek0zNi44IDEyMy43Yy0xMy4zIDIyLTIzLjIgNDUuOS0yOS4zIDcwLjlsMjMuMyA1LjhDMzYuMyAxNzcuNyA0NS4zIDE1NiA1Ny40IDEzNkwzNi44IDEyMy43ek0yNCAyNTZjMC0xMS42IC45LTIzLjMgMi42LTM0LjhMMi45IDIxNy42Yy0zLjggMjUuNC0zLjggNTEuMyAwIDc2LjdsMjMuNy0zLjZDMjQuOSAyNzkuMyAyNCAyNjcuNiAyNCAyNTZ6TTM4OC4zIDQ3NS4yTDM3NiA0NTQuNmMtMjAgMTIuMS00MS42IDIxLTY0LjIgMjYuNmw1LjggMjMuM2MyNC45LTYuMiA0OC44LTE2IDcwLjgtMjkuM3pNNDg4IDI1NmMwIDExLjYtLjkgMjMuMy0yLjYgMzQuOGwyMy43IDMuNmMzLjgtMjUuNCAzLjgtNTEuMyAwLTc2LjdsLTIzLjcgMy42YzEuNyAxMS41IDIuNiAyMy4xIDIuNiAzNC44em0xNi41IDYxLjRsLTIzLjMtNS44Yy01LjYgMjIuNy0xNC41IDQ0LjMtMjYuNiA2NC4zbDIwLjYgMTIuNGMxMy4zLTIyIDIzLjItNDYgMjkuMy03MXptLTIxMy44IDE2OGMtMjMgMy41LTQ2LjUgMy41LTY5LjUgMGwtMy42IDIzLjdjMjUuNCAzLjggNTEuMyAzLjggNzYuNyAwbC0zLjYtMjMuN3ptMTUyLTkxLjhjLTEzLjggMTguNy0zMC40IDM1LjMtNDkuMiA0OS4xbDE0LjIgMTkuM2MyMC43LTE1LjIgMzktMzMuNCA1NC4yLTU0LjFsLTE5LjMtMTQuNHpNMzkzLjYgNjkuMmMxOC44IDEzLjggMzUuMyAzMC40IDQ5LjIgNDkuMkw0NjIuMSAxMDRDNDQ2LjkgODMuNCA0MjguNiA2NS4xIDQwOCA0OS45TDM5My42IDY5LjJ6TTY5LjIgMTE4LjRjMTMuOC0xOC44IDMwLjQtMzUuMyA0OS4yLTQ5LjJMMTA0IDQ5LjlDODMuNCA2NS4xIDY1LjEgODMuNCA0OS45IDEwNGwxOS4zIDE0LjR6bTQwNiA1LjNMNDU0LjYgMTM2YzEyLjEgMjAgMjEgNDEuNiAyNi42IDY0LjJsMjMuMy01LjhjLTYuMi0yNC45LTE2LTQ4LjgtMjkuMy03MC44em0tMjU0LTk3LjFjMjMtMy41IDQ2LjUtMy41IDY5LjUgMGwzLjYtMjMuN0MyNjguOS0xIDI0My4xLTEgMjE3LjYgMi45bDMuNiAyMy43ek04MS42IDQ2OC40TDMyIDQ4MGwxMS42LTQ5LjZMMjAuMiA0MjUgOC42IDQ3NC41Yy0uOSA0LS44IDguMSAuMyAxMi4xczMuMiA3LjUgNi4xIDEwLjRzNi41IDUgMTAuNCA2LjFzOC4xIDEuMiAxMi4xIC4zTDg3IDQ5MmwtNS40LTIzLjZ6TTI1LjIgNDAzLjZMNDguNiA0MDlsOC0zNC40Yy0xMS43LTE5LjYtMjAuNC00MC44LTI1LjgtNjNMNy41IDMxNy40YzUuMiAyMS4yIDEzLjIgNDEuNyAyMy42IDYwLjhsLTUuOSAyNS4zem0xMTIgNTJsLTM0LjQgOCA1LjQgMjMuNCAyNS4zLTUuOWMxOS4yIDEwLjQgMzkuNiAxOC40IDYwLjggMjMuNmw1LjgtMjMuM2MtMjIuMS01LjUtNDMuMy0xNC4zLTYyLjgtMjZsLS4yIC4yek0yNTYgNDhjLTM3LjIgMC03My42IDEwLTEwNS42IDI4LjlzLTU4LjQgNDYtNzYuMyA3OC42cy0yNi45IDY5LjMtMjUuOCAxMDYuNHMxMiA3My4zIDMxLjggMTA0LjhMNjAgNDUybDg1LjMtMjBjMjcuMyAxNy4yIDU4LjIgMjcuOCA5MC4zIDMxczY0LjUtMS4xIDk0LjYtMTIuNnM1Ny4yLTI5LjggNzktNTMuNnMzNy44LTUyLjIgNDYuOC04My4yczEwLjUtNjMuNiA0LjctOTUuM3MtMTktNjEuNi0zOC40LTg3LjRzLTQ0LjUtNDYuNy03My40LTYxUzI4OC4zIDQ4IDI1NiA0OHpcIl1cbn07XG52YXIgZmFQYXlwYWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncGF5cGFsJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmMWVkXCIsIFwiTTExMS40IDI5NS45Yy0zLjUgMTkuMi0xNy40IDEwOC43LTIxLjUgMTM0LS4zIDEuOC0xIDIuNS0zIDIuNUgxMi4zYy03LjYgMC0xMy4xLTYuNi0xMi4xLTEzLjlMNTguOCA0Ni42YzEuNS05LjYgMTAuMS0xNi45IDIwLTE2LjkgMTUyLjMgMCAxNjUuMS0zLjcgMjA0IDExLjQgNjAuMSAyMy4zIDY1LjYgNzkuNSA0NCAxNDAuMy0yMS41IDYyLjYtNzIuNSA4OS41LTE0MC4xIDkwLjMtNDMuNC43LTY5LjUtNy03NS4zIDI0LjJ6TTM1Ny4xIDE1MmMtMS44LTEuMy0yLjUtMS44LTMgMS4zLTIgMTEuNC01LjEgMjIuNS04LjggMzMuNi0zOS45IDExMy44LTE1MC41IDEwMy45LTIwNC41IDEwMy45LTYuMSAwLTEwLjEgMy4zLTEwLjkgOS40LTIyLjYgMTQwLjQtMjcuMSAxNjkuNy0yNy4xIDE2OS43LTEgNy4xIDMuNSAxMi45IDEwLjYgMTIuOWg2My41YzguNiAwIDE1LjctNi4zIDE3LjQtMTQuOS43LTUuNC0xLjEgNi4xIDE0LjQtOTEuMyA0LjYtMjIgMTQuMy0xOS43IDI5LjMtMTkuNyA3MSAwIDEyNi40LTI4LjggMTQyLjktMTEyLjMgNi41LTM0LjggNC42LTcxLjQtMjMuOC05Mi42elwiXVxufTtcbnZhciBmYUdpdGxhYiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnaXRsYWInLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyOTZcIiwgXCJNNTAzLjUgMjA0LjZMNTAyLjggMjAyLjhMNDMzLjEgMjEuMDJDNDMxLjcgMTcuNDUgNDI5LjIgMTQuNDMgNDI1LjkgMTIuMzhDNDIzLjUgMTAuODMgNDIwLjggOS44NjUgNDE3LjkgOS41N0M0MTUgOS4yNzUgNDEyLjIgOS42NTMgNDA5LjUgMTAuNjhDNDA2LjggMTEuNyA0MDQuNCAxMy4zNCA0MDIuNCAxNS40NkM0MDAuNSAxNy41OCAzOTkuMSAyMC4xMyAzOTguMyAyMi45TDM1MS4zIDE2Ni45SDE2MC44TDExMy43IDIyLjlDMTEyLjkgMjAuMTMgMTExLjUgMTcuNTkgMTA5LjYgMTUuNDdDMTA3LjYgMTMuMzUgMTA1LjIgMTEuNzIgMTAyLjUgMTAuN0M5OS44NiA5LjY3NSA5Ni45OCA5LjI5NSA5NC4xMiA5LjU4N0M5MS4yNiA5Ljg3OCA4OC41MSAxMC44MyA4Ni4wOCAxMi4zOEM4Mi44NCAxNC40MyA4MC4zMyAxNy40NSA3OC45MiAyMS4wMkw5LjI2NyAyMDIuOEw4LjU0MyAyMDQuNkMtMS40ODQgMjMwLjgtMi43MiAyNTkuNiA1LjAyMyAyODYuNkMxMi43NyAzMTMuNSAyOS4wNyAzMzcuMyA1MS40NyAzNTQuMkw1MS43NCAzNTQuNEw1Mi4zMyAzNTQuOEwxNTguMyA0MzQuM0wyMTAuOSA0NzRMMjQyLjkgNDk4LjJDMjQ2LjYgNTAwLjEgMjUxLjIgNTAyLjUgMjU1LjkgNTAyLjVDMjYwLjYgNTAyLjUgMjY1LjIgNTAwLjEgMjY4LjkgNDk4LjJMMzAwLjkgNDc0TDM1My41IDQzNC4zTDQ2MC4yIDM1NC40TDQ2MC41IDM1NC4xQzQ4Mi45IDMzNy4yIDQ5OS4yIDMxMy41IDUwNi4xIDI4Ni42QzUxNC43IDI1OS42IDUxMy41IDIzMC44IDUwMy41IDIwNC42elwiXVxufTtcbnZhciBmYVR5cG8zID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3R5cG8zJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNDJiXCIsIFwiTTE3OC43IDc4LjRjMC0yNC43IDUuNC0zMi40IDEzLjktMzkuNC02OS41IDguNS0xNDkuMyAzNC0xNzYuMyA2Ni40LTUuNCA3LjctOS4zIDIwLjgtOS4zIDM3LjFDNyAyNDYgMTEzLjggNDgwIDE5MS4xIDQ4MGMzNi4zIDAgOTcuMy01OS41IDE0Ni43LTEzOS03IDIuMy0xMS42IDIuMy0xOC41IDIuMy01Ny4yIDAtMTQwLjYtMTk4LjUtMTQwLjYtMjY0Ljl6TTMwMS41IDMyYy0zMC4xIDAtNDEuNyA1LjQtNDEuNyAzNi4zIDAgNjYuNCA1My44IDE5OC41IDEwMS43IDE5OC41IDI2LjMgMCA3OC44LTk5LjcgNzguOC0xODIuMyAwLTQwLjktNjctNTIuNS0xMzguOC01Mi41elwiXVxufTtcbnZhciBmYVJlZGRpdEFsaWVuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3JlZGRpdC1hbGllbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjI4MVwiLCBcIk0zNzMgMTM4LjZjLTI1LjIgMC00Ni4zLTE3LjUtNTEuOS00MWwwIDBjLTMwLjYgNC4zLTU0LjIgMzAuNy01NC4yIDYyLjRsMCAuMmM0Ny40IDEuOCA5MC42IDE1LjEgMTI0LjkgMzYuM2MxMi42LTkuNyAyOC40LTE1LjUgNDUuNS0xNS41YzQxLjMgMCA3NC43IDMzLjQgNzQuNyA3NC43YzAgMjkuOC0xNy40IDU1LjUtNDIuNyA2Ny41Yy0yLjQgODYuOC05NyAxNTYuNi0yMTMuMiAxNTYuNlM0NS41IDQxMC4xIDQzIDMyMy40QzE3LjYgMzExLjUgMCAyODUuNyAwIDI1NS43YzAtNDEuMyAzMy40LTc0LjcgNzQuNy03NC43YzE3LjIgMCAzMyA1LjggNDUuNyAxNS42YzM0LTIxLjEgNzYuOC0zNC40IDEyMy43LTM2LjRsMC0uM2MwLTQ0LjMgMzMuNy04MC45IDc2LjgtODUuNUMzMjUuOCA1MC4yIDM0Ny4yIDMyIDM3MyAzMmMyOS40IDAgNTMuMyAyMy45IDUzLjMgNTMuM3MtMjMuOSA1My4zLTUzLjMgNTMuM3pNMTU3LjUgMjU1LjNjLTIwLjkgMC0zOC45IDIwLjgtNDAuMiA0Ny45czE3LjEgMzguMSAzOCAzOC4xczM2LjYtOS44IDM3LjgtMzYuOXMtMTQuNy00OS4xLTM1LjctNDkuMXpNMzk1IDMwMy4xYy0xLjItMjcuMS0xOS4yLTQ3LjktNDAuMi00Ny45cy0zNi45IDIyLTM1LjcgNDkuMWMxLjIgMjcuMSAxNi45IDM2LjkgMzcuOCAzNi45czM5LjMtMTEgMzgtMzguMXptLTYwLjEgNzAuOGMxLjUtMy42LTEtNy43LTQuOS04LjFjLTIzLTIuMy00Ny45LTMuNi03My44LTMuNnMtNTAuOCAxLjMtNzMuOCAzLjZjLTMuOSAuNC02LjQgNC41LTQuOSA4LjFjMTIuOSAzMC44IDQzLjMgNTIuNCA3OC43IDUyLjRzNjUuOC0yMS42IDc4LjctNTIuNHpcIl1cbn07XG52YXIgZmFZYWhvbyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd5YWhvbycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjE5ZVwiLCBcIk0yMjMuNjksMTQxLjA2LDE2NywyODQuMjMsMTExLDE0MS4wNkgxNC45M0wxMjAuNzYsMzkwLjE5LDgyLjE5LDQ4MGg5NC4xN0wzMTcuMjcsMTQxLjA2Wm0xMDUuNCwxMzUuNzlhNTguMjIsNTguMjIsMCwxLDAsNTguMjIsNTguMjJBNTguMjIsNTguMjIsMCwwLDAsMzI5LjA5LDI3Ni44NVpNMzk0LjY1LDMybC05MywyMjMuNDdINDA2LjQ0TDQ5OS4wNywzMlpcIl1cbn07XG52YXIgZmFEYWlseW1vdGlvbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkYWlseW1vdGlvbicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTA1MlwiLCBcIk0yOTguOTMsMjY3YTQ4LjQsNDguNCwwLDAsMC0yNC4zNi02LjIxcS0xOS44MywwLTMzLjQ0LDEzLjI3dC0xMy42MSwzMy40MnEwLDIxLjE2LDEzLjI4LDM0LjZ0MzMuNDMsMTMuNDRxMjAuNSwwLDM0LjExLTEzLjc4VDMyMiwzMDcuNDdBNDcuMTMsNDcuMTMsMCwwLDAsMzE1LjksMjg0LDQ0LjEzLDQ0LjEzLDAsMCwwLDI5OC45MywyNjdaTTAsMzJWNDgwSDQ0OFYzMlpNMzc0LjcxLDQwNS4yNmgtNTMuMVYzODEuMzdoLS42N3EtMTUuNzksMjYuMi01NS43OCwyNi4yLTI3LjU2LDAtNDguODktMTMuMWE4OC4yOSw4OC4yOSwwLDAsMS0zMi45NC0zNS43N3EtMTEuNi0yMi42OC0xMS41OS01MC44OSwwLTI3LjU2LDExLjc2LTUwLjIyYTg5LjksODkuOSwwLDAsMSwzMi45My0zNS43OHEyMS4xOC0xMy4wOSw0Ny43Mi0xMy4xYTgwLjg3LDgwLjg3LDAsMCwxLDI5Ljc0LDUuMjFxMTMuMjgsNS4yMSwyNSwxN1YxNTNsNTUuNzktMTIuMDlaXCJdXG59O1xudmFyIGZhQWZmaWxpYXRldGhlbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYWZmaWxpYXRldGhlbWUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzNmJcIiwgXCJNMTU5LjcgMjM3LjRDMTA4LjQgMzA4LjMgNDMuMSAzNDguMiAxNCAzMjYuNi0xNS4yIDMwNC45IDIuOCAyMzAgNTQuMiAxNTkuMWM1MS4zLTcwLjkgMTE2LjYtMTEwLjggMTQ1LjctODkuMiAyOS4xIDIxLjYgMTEuMSA5Ni42LTQwLjIgMTY3LjV6bTM1MS4yLTU3LjNDNDM3LjEgMzAzLjUgMzE5IDM2Ny44IDI0Ni40IDMyMy43Yy0yNS0xNS4yLTQxLjMtNDEuMi00OS03My44LTMzLjYgNjQuOC05Mi44IDExMy44LTE2NC4xIDEzMy4yIDQ5LjggNTkuMyAxMjQuMSA5Ni45IDIwNyA5Ni45IDE1MCAwIDI3MS42LTEyMy4xIDI3MS42LTI3NC45LjEtOC41LS4zLTE2LjgtMS0yNXpcIl1cbn07XG52YXIgZmFQaWVkUGlwZXJQcCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwaWVkLXBpcGVyLXBwJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMWE3XCIsIFwiTTIwNS4zIDE3NC42YzAgMjEuMS0xNC4yIDM4LjEtMzEuNyAzOC4xLTcuMSAwLTEyLjgtMS4yLTE3LjItMy43di02OGM0LjQtMi43IDEwLjEtNC4yIDE3LjItNC4yIDE3LjUgMCAzMS43IDE2LjkgMzEuNyAzNy44em01Mi42IDY3Yy03LjEgMC0xMi44IDEuNS0xNy4yIDQuMnY2OGM0LjQgMi41IDEwLjEgMy43IDE3LjIgMy43IDE3LjQgMCAzMS43LTE2LjkgMzEuNy0zNy44IDAtMjEuMS0xNC4zLTM4LjEtMzEuNy0zOC4xek00NDggODB2MzUyYzAgMjYuNS0yMS41IDQ4LTQ4IDQ4SDQ4Yy0yNi41IDAtNDgtMjEuNS00OC00OFY4MGMwLTI2LjUgMjEuNS00OCA0OC00OGgzNTJjMjYuNSAwIDQ4IDIxLjUgNDggNDh6TTE4NSAyNTUuMWM0MSAwIDc0LjItMzUuNiA3NC4yLTc5LjYgMC00NC0zMy4yLTc5LjYtNzQuMi03OS42LTEyIDAtMjQuMSAzLjItMzQuNiA4LjhoLTQ1LjdWMzExbDUxLjgtMTAuMXYtNTAuNmM4LjYgMy4xIDE4LjEgNC44IDI4LjUgNC44em0xNTguNCAyNS4zYzAtNDQtMzMuMi03OS42LTczLjktNzkuNi0zLjIgMC02LjQuMi05LjYuNy0zLjcgMTIuNS0xMC4xIDIzLjgtMTkuMiAzMy40LTEzLjggMTUtMzIuMiAyMy44LTUxLjggMjQuOFY0MTZsNTEuOC0xMC4xdi01MC42YzguNiAzLjIgMTguMiA0LjcgMjguNyA0LjcgNDAuOCAwIDc0LTM1LjYgNzQtNzkuNnpcIl1cbn07XG52YXIgZmFCb290c3RyYXAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYm9vdHN0cmFwJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmODM2XCIsIFwiTTMzMy41LDIwMS40YzAtMjIuMS0xNS42LTM0LjMtNDMtMzQuM2gtNTAuNHY3MS4yaDQyLjVDMzE1LjQsMjM4LjIsMzMzLjUsMjI1LDMzMy41LDIwMS40eiBNNTE3LDE4OC42IGMtOS41LTMwLjktMTAuOS02OC44LTkuOC05OC4xYzEuMS0zMC41LTIyLjctNTguNS01NC43LTU4LjVIMTIzLjdjLTMyLjEsMC01NS44LDI4LjEtNTQuNyw1OC41YzEsMjkuMy0wLjMsNjcuMi05LjgsOTguMSBjLTkuNiwzMS0yNS43LDUwLjYtNTIuMiw1My4xdjI4LjVjMjYuNCwyLjUsNDIuNiwyMi4xLDUyLjIsNTMuMWM5LjUsMzAuOSwxMC45LDY4LjgsOS44LDk4LjFjLTEuMSwzMC41LDIyLjcsNTguNSw1NC43LDU4LjVoMzI4LjcgYzMyLjEsMCw1NS44LTI4LjEsNTQuNy01OC41Yy0xLTI5LjMsMC4zLTY3LjIsOS44LTk4LjFjOS42LTMxLDI1LjctNTAuNiw1Mi4xLTUzLjF2LTI4LjVDNTQyLjcsMjM5LjIsNTI2LjUsMjE5LjYsNTE3LDE4OC42eiBNMzAwLjIsMzc1LjFoLTk3LjlWMTM2LjhoOTcuNGM0My4zLDAsNzEuNywyMy40LDcxLjcsNTkuNGMwLDI1LjMtMTkuMSw0Ny45LTQzLjUsNTEuOHYxLjNjMzMuMiwzLjYsNTUuNSwyNi42LDU1LjUsNTguMyBDMzgzLjQsMzQ5LjcsMzUyLjEsMzc1LjEsMzAwLjIsMzc1LjF6IE0yOTAuMiwyNjYuNGgtNTAuMXY3OC40aDUyLjNjMzQuMiwwLDUyLjMtMTMuNyw1Mi4zLTM5LjUgQzM0NC43LDI3OS42LDMyNi4xLDI2Ni40LDI5MC4yLDI2Ni40elwiXVxufTtcbnZhciBmYU9kbm9rbGFzc25pa2kgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnb2Rub2tsYXNzbmlraScsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjI2M1wiLCBcIk0yNzUuMSAzMzRjLTI3LjQgMTcuNC02NS4xIDI0LjMtOTAgMjYuOWwyMC45IDIwLjYgNzYuMyA3Ni4zYzI3LjkgMjguNi0xNy41IDczLjMtNDUuNyA0NS43LTE5LjEtMTkuNC00Ny4xLTQ3LjQtNzYuMy03Ni42TDg0IDUwMy40Yy0yOC4yIDI3LjUtNzMuNi0xNy42LTQ1LjQtNDUuNyAxOS40LTE5LjQgNDcuMS00Ny40IDc2LjMtNzYuM2wyMC42LTIwLjZjLTI0LjYtMi42LTYyLjktOS4xLTkwLjYtMjYuOS0zMi42LTIxLTQ2LjktMzMuMy0zNC4zLTU5IDcuNC0xNC42IDI3LjctMjYuOSA1NC42LTUuNyAwIDAgMzYuMyAyOC45IDk0LjkgMjguOXM5NC45LTI4LjkgOTQuOS0yOC45YzI2LjktMjEuMSA0Ny4xLTguOSA1NC42IDUuNyAxMi40IDI1LjctMS45IDM4LTM0LjUgNTkuMXpNMzAuMyAxMjkuN0MzMC4zIDU4IDg4LjYgMCAxNjAgMHMxMjkuNyA1OCAxMjkuNyAxMjkuN2MwIDcxLjQtNTguMyAxMjkuNC0xMjkuNyAxMjkuNHMtMTI5LjctNTgtMTI5LjctMTI5LjR6bTY2IDBjMCAzNS4xIDI4LjYgNjMuNyA2My43IDYzLjdzNjMuNy0yOC42IDYzLjctNjMuN2MwLTM1LjQtMjguNi02NC02My43LTY0cy02My43IDI4LjYtNjMuNyA2NHpcIl1cbn07XG52YXIgZmFOZmNTeW1ib2wgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbmZjLXN5bWJvbCcsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZTUzMVwiLCBcIk0zOTIuOSAzMi40M0M0MDAuNiAzMS4xIDQwOC42IDMyLjg5IDQxNC4xIDM3LjQxQzQ5OC4yIDk2LjE0IDU0NCAxNzMuNyA1NDQgMjU1LjFDNTQ0IDMzOC4yIDQ5OC4yIDQxNS45IDQxNC4xIDQ3NC42QzQwOS4zIDQ3OC42IDQwMi40IDQ4MC41IDM5NS41IDQ3OS45QzM4OC41IDQ3OS4zIDM4MiA0NzYuMyAzNzcuMSA0NzEuNEwxOTMuNyAyODguN0MxODguMSAyODMuMiAxODUgMjc1LjcgMTg0LjEgMjY3LjhDMTg0LjEgMjYwIDE4OC4xIDI1Mi41IDE5My42IDI0Ni45QzE5OS4yIDI0MS40IDIwNi43IDIzOC4yIDIxNC41IDIzOC4yQzIyMi40IDIzOC4yIDIyOS45IDI0MS4zIDIzNS40IDI0Ni44TDQwMC41IDQxMS4yQzQ1NS4xIDM2Ni41IDQ4NC44IDMxMiA0ODQuOCAyNTUuMUM0ODQuOCAxOTMuNSA0NDcuOSAxMzIuOSAzODAuOSA4NS43NkMzNzQuNSA4MS4yNCAzNzAuMSA3NC4zNSAzNjguOCA2Ni42MkMzNjcuNCA1OC44OSAzNjkuMiA1MC45NCAzNzMuOCA0NC41M0MzNzguMyAzOC4xMiAzODUuMiAzMy43NyAzOTIuOSAzMi40M1YzMi40M3pNMTg2LjkgNDc5LjZDMTc5LjIgNDgwLjkgMTcxLjMgNDc5LjEgMTY0LjggNDc0LjZDODEuNjcgNDE1LjkgMzUuODQgMzM4LjIgMzUuODQgMjU1LjFDMzUuODQgMTczLjcgODEuNjcgOTYuMTQgMTY0LjggMzcuNDFDMTcwLjUgMzMuNCAxNzcuNCAzMS41MyAxODQuNCAzMi4xMkMxOTEuMyAzMi43MSAxOTcuOCAzNS43MiAyMDIuNyA0MC42M0wzODYuMSAyMjMuM0MzOTEuNyAyMjguOCAzOTQuOCAyMzYuMyAzOTQuOCAyNDQuMkMzOTQuOSAyNTEuMSAzOTEuOCAyNTkuNSAzODYuMiAyNjUuMUMzODAuNyAyNzAuNiAzNzMuMiAyNzMuOCAzNjUuMyAyNzMuOEMzNTcuNSAyNzMuOCAzNDkuMSAyNzAuNyAzNDQuNCAyNjUuMkwxNzkuMyAxMDAuN0MxMjQuNyAxNDUuOSA5NS4wMyAxOTkuOSA5NS4wMyAyNTUuMUM5NS4wMyAzMTguNSAxMzEuOSAzNzkuMSAxOTguMSA0MjYuMkMyMDUuNCA0MzAuOCAyMDkuNyA0MzcuNiAyMTEuMSA0NDUuNEMyMTIuNCA0NTMuMSAyMTAuNiA0NjEuMSAyMDYuMSA0NjcuNUMyMDEuNiA0NzMuOSAxOTQuNyA0NzguMiAxODYuOSA0NzkuNlY0NzkuNnpcIl1cbn07XG52YXIgZmFNaW50Yml0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ21pbnRiaXQnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImU2MmZcIiwgXCJNNzMuMiA1MTJWNDM4LjlIMzY1LjdWMzY1LjdoNzMuMlYyMTkuNEg1MTJWMEgyOTIuNlY3My4xSDE0Ni4zdjczLjJINzMuMlY0MzguOUgwVjUxMkg3My4yem03My4xLTIxOS40aDczLjJ2NzMuMUgxNDYuM1YyOTIuNnptNzMuMi03My4xaDczLjF2NzMuMUgyMTkuNFYyMTkuNHptNzMuMSAwVjE0Ni4zaDczLjJ2NzMuMUgyOTIuNnpNMzY1LjcgNzMuMWg3My4ydjczLjJIMzY1LjdWNzMuMXpcIl1cbn07XG52YXIgZmFFdGhlcmV1bSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdldGhlcmV1bScsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjQyZVwiLCBcIk0zMTEuOSAyNjAuOEwxNjAgMzUzLjYgOCAyNjAuOCAxNjAgMGwxNTEuOSAyNjAuOHpNMTYwIDM4My40TDggMjkwLjYgMTYwIDUxMmwxNTItMjIxLjQtMTUyIDkyLjh6XCJdXG59O1xudmFyIGZhU3BlYWtlckRlY2sgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3BlYWtlci1kZWNrJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmODNjXCIsIFwiTTIxMy44NiAyOTZIMTAwYTEwMCAxMDAgMCAwIDEgMC0yMDBoMTMyLjg0YTQwIDQwIDAgMCAxIDAgODBIOThjLTI2LjQ3IDAtMjYuNDUgNDAgMCA0MGgxMTMuODJhMTAwIDEwMCAwIDAgMSAwIDIwMEg0MGE0MCA0MCAwIDAgMSAwLTgwaDE3My44NmMyNi40OCAwIDI2LjQ2LTQwIDAtNDB6TTI5OCA0MTZhMTIwLjIxIDEyMC4yMSAwIDAgMCA1MS4xMS04MGg2NC41NWExOS44MyAxOS44MyAwIDAgMCAxOS42Ni0yMFYxOTZhMTkuODMgMTkuODMgMCAwIDAtMTkuNjYtMjBIMjk2LjQyYTYwLjc3IDYwLjc3IDAgMCAwIDAtODBoMTM2LjkzYzQzLjQ0IDAgNzguNjUgMzUuODIgNzguNjUgODB2MTYwYzAgNDQuMTgtMzUuMjEgODAtNzguNjUgODB6XCJdXG59O1xudmFyIGZhQ3JlYXRpdmVDb21tb25zTmNFdSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjcmVhdGl2ZS1jb21tb25zLW5jLWV1JyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNGU5XCIsIFwiTTI0Ny43IDhDMTAzLjYgOCAwIDEyNC44IDAgMjU2YzAgMTM2LjMgMTExLjcgMjQ4IDI0Ny43IDI0OEMzNzcuOSA1MDQgNDk2IDQwMy4xIDQ5NiAyNTYgNDk2IDExNyAzODguNCA4IDI0Ny43IDh6bS42IDQ1MC43Yy0xMTIgMC0yMDMuNi05Mi41LTIwMy42LTIwMi43IDAtMjMuMiAzLjctNDUuMiAxMC45LTY2bDY1LjcgMjkuMWgtNC43djI5LjVoMjMuM2MwIDYuMi0uNCAzLjItLjQgMTkuNWgtMjIuOHYyOS41aDI3YzExLjQgNjcgNjcuMiAxMDEuMyAxMjQuNiAxMDEuMyAyNi42IDAgNTAuNi03LjkgNjQuOC0xNS44bC0xMC00Ni4xYy04LjcgNC42LTI4LjIgMTAuOC00Ny4zIDEwLjgtMjguMiAwLTU4LjEtMTAuOS02Ny4zLTUwLjJoOTAuM2wxMjguMyA1Ni44Yy0xLjUgMi4xLTU2LjIgMTA0LjMtMTc4LjggMTA0LjN6bS0xNi43LTE5MC42bC0uNS0uNC45LjRoLS40em03Ny4yLTE5LjVoMy43di0yOS41aC03MC4zbC0yOC42LTEyLjZjMi41LTUuNSA1LjQtMTAuNSA4LjgtMTQuMyAxMi45LTE1LjggMzEuMS0yMi40IDUxLjEtMjIuNCAxOC4zIDAgMzUuMyA1LjQgNDYuMSAxMGwxMS42LTQ3LjNjLTE1LTYuNi0zNy0xMi40LTYyLjMtMTIuNC0zOSAwLTcyLjIgMTUuOC05NS45IDQyLjMtNS4zIDYuMS05LjggMTIuOS0xMy45IDIwLjFsLTgxLjYtMzYuMWM2NC42LTk2LjggMTU3LjctOTMuNiAxNzAuNy05My42IDExMyAwIDIwMyA5MC4yIDIwMyAyMDMuNCAwIDE4LjctMi4xIDM2LjMtNi4zIDUyLjlsLTEzNi4xLTYwLjV6XCJdXG59O1xudmFyIGZhUGF0cmVvbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwYXRyZW9uJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmM2Q5XCIsIFwiTTQ4OS43IDE1My44Yy0uMS02NS40LTUxLTExOS0xMTAuNy0xMzguM0MzMDQuOC04LjUgMjA3LTUgMTM2LjEgMjguNEM1MC4zIDY4LjkgMjMuMyAxNTcuNyAyMi4zIDI0Ni4yQzIxLjUgMzE5IDI4LjcgNTEwLjYgMTM2LjkgNTEyYzgwLjMgMSA5Mi4zLTEwMi41IDEyOS41LTE1Mi4zYzI2LjQtMzUuNSA2MC41LTQ1LjUgMTAyLjQtNTUuOWM3Mi0xNy44IDEyMS4xLTc0LjcgMTIxLTE1MHpcIl1cbn07XG52YXIgZmFBdmlhbmV4ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2F2aWFuZXgnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzNzRcIiwgXCJNNDUzLjEgMzJoLTMxMmMtMzguOSAwLTc2LjIgMzEuMi04My4zIDY5LjdMMS4yIDQxMC4zQy01LjkgNDQ4LjggMTkuOSA0ODAgNTguOSA0ODBoMzEyYzM4LjkgMCA3Ni4yLTMxLjIgODMuMy02OS43bDU2LjctMzA4LjVjNy0zOC42LTE4LjgtNjkuOC01Ny44LTY5Ljh6bS01OC4yIDM0Ny4zbC0zMiAxMy41LTExNS40LTExMGMtMTQuNyAxMC0yOS4yIDE5LjUtNDEuNyAyNy4xbDIyLjEgNjQuMi0xNy45IDEyLjctNDAuNi02MS01Mi40LTQ4LjEgMTUuNy0xNS40IDU4IDMxLjFjOS4zLTEwLjUgMjAuOC0yMi42IDMyLjgtMzQuOUwyMDMgMjI4LjlsLTY4LjgtOTkuOCAxOC44LTI4LjkgOC45LTQuOEwyNjUgMjA3LjhsNC45IDQuNWMxOS40LTE4LjggMzMuOC0zMi40IDMzLjgtMzIuNCA3LjctNi41IDIxLjUtMi45IDMwLjcgNy45IDkgMTAuNSAxMC42IDI0LjcgMi43IDMxLjMtMS44IDEuMy0xNS41IDExLjQtMzUuMyAyNS42bDQuNSA3LjMgOTQuOSAxMTkuNC02LjMgNy45elwiXVxufTtcbnZhciBmYUVsbG8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZWxsbycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjVmMVwiLCBcIk0yNDggOEMxMTEuMDMgOCAwIDExOS4wMyAwIDI1NnMxMTEuMDMgMjQ4IDI0OCAyNDggMjQ4LTExMS4wMyAyNDgtMjQ4UzM4NC45NyA4IDI0OCA4em0xNDMuODQgMjg1LjJDMzc1LjMxIDM1OC41MSAzMTUuNzkgNDA0LjggMjQ4IDQwNC44cy0xMjcuMzEtNDYuMjktMTQzLjg0LTExMS42Yy0xLjY1LTcuNDQgMi40OC0xNS43MSA5LjkyLTE3LjM2IDcuNDQtMS42NSAxNS43MSAyLjQ4IDE3LjM2IDkuOTIgMTQuMDUgNTIuOTEgNjIgOTAuMTEgMTE2LjU2IDkwLjExczEwMi41MS0zNy4yIDExNi41Ni05MC4xMWMxLjY1LTcuNDQgOS45Mi0xMi40IDE3LjM2LTkuOTIgNy40NCAxLjY1IDEyLjQgOS45MiA5LjkyIDE3LjM2elwiXVxufTtcbnZhciBmYUdvZm9yZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnb2ZvcmUnLFxuICBpY29uOiBbNDAwLCA1MTIsIFtdLCBcImYzYTdcIiwgXCJNMzI0IDMxOS44aC0xMy4ydjM0LjdjLTI0LjUgMjMuMS01Ni4zIDM1LjgtODkuOSAzNS44LTczLjIgMC0xMzIuNC02MC4yLTEzMi40LTEzNC40IDAtNzQuMSA1OS4yLTEzNC40IDEzMi40LTEzNC40IDM1LjMgMCA2OC42IDE0IDkzLjYgMzkuNGw2Mi4zLTYzLjNDMzM1IDU1LjMgMjc5LjcgMzIgMjIwLjcgMzIgOTggMzIgMCAxMzIuNiAwIDI1NmMwIDEyMi41IDk3IDIyNCAyMjAuNyAyMjQgNjMuMiAwIDEyNC41LTI2LjIgMTcxLTgyLjUtMi0yNy42LTEzLjQtNzcuNy02Ny43LTc3Ljd6bS0xMi4xLTExMi41SDIwNS42djg5SDMyNGMzMy41IDAgNjAuNSAxNS4xIDc2IDQxLjh2LTMwLjZjMC02NS4yLTQwLjQtMTAwLjItODguMS0xMDAuMnpcIl1cbn07XG52YXIgZmFCaW1vYmplY3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYmltb2JqZWN0JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMzc4XCIsIFwiTTQxNiAzMkgzMkMxNC40IDMyIDAgNDYuNCAwIDY0djM4NGMwIDE3LjYgMTQuNCAzMiAzMiAzMmgzODRjMTcuNiAwIDMyLTE0LjQgMzItMzJWNjRjMC0xNy42LTE0LjQtMzItMzItMzJ6bS02NCAyNTcuNGMwIDQ5LjQtMTEuNCA4Mi42LTEwMy44IDgyLjZoLTE2LjljLTQ0LjEgMC02Mi40LTE0LjktNzAuNC0zOC44aC0uOVYzNjhIOTZWMTM2aDY0djc0LjdoMS4xYzQuNi0zMC41IDM5LjctMzguOCA2OS43LTM4LjhoMTcuM2M5Mi40IDAgMTAzLjggMzMuMSAxMDMuOCA4Mi41djM1em0tNjQtMjguOXYyMi45YzAgMjEuNy0zLjQgMzMuOC0zOC40IDMzLjhoLTQ1LjNjLTI4LjkgMC00NC4xLTYuNS00NC4xLTM1Ljd2LTE5YzAtMjkuMyAxNS4yLTM1LjcgNDQuMS0zNS43aDQ1LjNjMzUtLjIgMzguNCAxMiAzOC40IDMzLjd6XCJdXG59O1xudmFyIGZhQnJhdmVSZXZlcnNlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JyYXZlLXJldmVyc2UnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU2M2RcIiwgXCJNMjk4IDBjMyAwIDUuOCAxLjMgNy44IDMuNmwzOC4xIDQ0Yy41LS4xIDEtLjIgMS41LS4zYzkuMi0xLjYgMTguNi0yLjIgMjcuNy0xLjJjMTEuNiAxLjQgMjEuNSA1LjQgMjguOSAxMi45YzcuNyA3LjggMTUuNCAxNS44IDIyLjYgMjMuNmMyLjUgMi43IDQuOSA1LjIgNi45IDcuNGMuNyAuOCAxLjQgMS41IDEuOSAyYzMuNCAzLjcgNC4yIDguMSAyLjcgMTEuOWwtOS44IDI0LjYgMTMuMSAzOC4xYy43IDIgLjggNC4xIC4yIDYuMmMtLjEgLjQtLjEgLjQtLjUgMi4xYy0uNiAyLjMtLjYgMi4zLTEuNSA1LjhjLTEuNiA2LjMtMy41IDEzLjMtNS40IDIwLjljLTUuNiAyMS42LTExLjIgNDMuMi0xNi40IDYzLjRjLTEyLjkgNDkuOS0yMS40IDgyLjctMjMuNCA5MC45Yy0xMS4xIDQ0LjUtMTkuOSA2MC00OC4zIDgwLjNjLTI0LjkgMTcuOC03Ni44IDUzLjYtODYuOCA2MGMtMSAuNi0yIDEuMy0zLjQgMi4zYy0uNSAuNC0zLjIgMi4yLTMuOSAyLjdjLTQuOSAzLjMtOC4zIDUuNS0xMi4xIDcuM2MtNC43IDIuMi05LjMgMy41LTEzLjkgMy41cy05LjEtMS4yLTEzLjktMy41Yy0zLjctMS44LTcuMi0zLjktMTIuMS03LjNjLS44LS41LTMuNC0yLjQtMy45LTIuN2MtMS40LTEtMi41LTEuNy0zLjQtMi4zYy0xMC02LjQtNjEuOS00Mi4xLTg2LjgtNjBjLTI4LjQtMjAuNC0zNy4yLTM1LjgtNDguMy04MC4zYy0yLTguMi0xMC41LTQxLTIzLjMtOTAuNWMtNS4zLTIwLjYtMTAuOS00Mi4yLTE2LjUtNjMuOGMtMi03LjYtMy44LTE0LjYtNS40LTIwLjljLS45LTMuNS0uOS0zLjUtMS41LTUuOGMtLjQtMS43LS40LTEuNy0uNS0yLjFjLS41LTItLjQtNC4yIC4yLTYuMmwxMy4xLTM4LjFMMTEuOCAxMDRjLTEuNS0zLjgtLjctOC4yIDItMTEuMmMxLjItMS4zIDEuOC0yIDIuNi0yLjhjMi0yLjIgNC40LTQuNyA2LjktNy40QzMwLjYgNzQuOSAzOC4zIDY2LjkgNDYgNTkuMWM3LjQtNy41IDE3LjMtMTEuNiAyOC45LTEyLjljOS4xLTEuMSAxOC41LS41IDI3LjcgMS4yYy41IC4xIDEgLjIgMS41IC4zbDM4LjEtNDRDMTQ0LjIgMS4zIDE0NyAwIDE1MCAwSDI5OHptLTQuNyAyMS4xSDE1NC43TDExNS42IDY2LjJjLTIuNiAzLTYuNyA0LjMtMTAuNiAzLjJjLS4yLS4xLS43LS4yLTEuNS0uNGMtMS4zLS4zLTIuOS0uNi00LjUtLjljLTcuNC0xLjMtMTQuOS0xLjgtMjEuNy0xQzcwIDY4IDY0LjMgNzAuMyA2MC43IDc0Yy03LjYgNy43LTE1LjIgMTUuNi0yMi4zIDIzLjNjLTEuNyAxLjgtMy4zIDMuNS00LjggNS4xbDguOCAyMmMxIDIuNCAxIDUgLjIgNy41TDI5LjIgMTcwLjZjLjQgMS40IC41IDEuOSAxLjIgNC44YzEuNiA2LjMgMy41IDEzLjMgNS40IDIwLjljNS42IDIxLjYgMTEuMiA0My4yIDE2LjQgNjMuNGMxMi45IDUwIDIxLjQgODIuOCAyMy40IDkxQzg1LjcgMzkwLjggOTIgNDAyIDExNS44IDQxOWMyNC42IDE3LjYgNzYuMyA1My4yIDg1LjkgNTkuM2MxLjIgLjggMi41IDEuNiA0IDIuN2MuNiAuNCAzLjIgMi4yIDMuOSAyLjdjNCAyLjggNi43IDQuNCA5LjIgNS42YzIuMiAxIDMuOSAxLjUgNS4xIDEuNXMyLjktLjUgNS4xLTEuNWMyLjUtMS4yIDUuMi0yLjggOS4yLTUuNmMuNy0uNSAzLjMtMi4zIDMuOS0yLjdjMS42LTEuMSAyLjgtMS45IDQtMi43YzkuNi02LjEgNjEuMy00MS43IDg1LjktNTkuM2MyMy44LTE3LjEgMzAuMi0yOC4yIDQwLjEtNjguM2MyLjEtOC4zIDEwLjUtNDEuMSAyMy4zLTkwLjdjNS4zLTIwLjYgMTAuOS00Mi4yIDE2LjUtNjMuOGMyLTcuNiAzLjgtMTQuNiA1LjQtMjAuOWMuNy0yLjkgLjktMy40IDEuMi00LjhsLTEzLjMtMzguOGMtLjgtMi40LS44LTUuMSAuMi03LjVsOC44LTIyYy0xLjUtMS42LTMuMS0zLjMtNC44LTUuMWMtNy4yLTcuNi0xNC43LTE1LjUtMjIuMy0yMy4zYy0zLjctMy43LTkuMy02LTE2LjYtNi45Yy02LjgtLjgtMTQuNC0uMy0yMS43IDFjLTEuNyAuMy0zLjIgLjYtNC41IC45Yy0uOCAuMi0xLjMgLjMtMS41IC40Yy0zLjggMS4xLTcuOS0uMi0xMC42LTMuMkwyOTMuMyAyMS4xek0yMjQgMzE2YzIuOCAwIDIwLjkgNi41IDM1LjQgMTQuMXMyNSAxMyAyOC4zIDE1LjJzMS4zIDYuMi0xLjcgOC40cy00NC4xIDM0LjYtNDguMSAzOC4ycy05LjggOS41LTEzLjggOS41cy05LjgtNS45LTEzLjgtOS41cy00NS4xLTM2LTQ4LjEtMzguMnMtNS4xLTYuMi0xLjctOC40czEzLjktNy41IDI4LjMtMTUuMnMzMi41LTE0LjEgMzUuNC0xNC4xem0uMS0yMzAuN2MuNyAwIDguOCAuMiAyMC41IDQuMmMxMi4zIDQuMiAyNS43IDkuNCAzMS45IDkuNHM1MS45LTguOSA1MS45LTguOXM1NC4yIDY2LjcgNTQuMiA4MXMtNi44IDE4LTEzLjcgMjUuNHMtMzYuOCAzOS44LTQwLjcgNDMuOXMtMTEuOSAxMC41LTcuMSAyMS44czExLjcgMjUuOCAzLjkgNDAuNHMtMjEgMjQuNC0yOS40IDIyLjhzLTI4LjQtMTIuMi0zNS43LTE3LjFzLTMwLjUtMjQuMy0zMC41LTMxLjhzMjQtMjAuOCAyOC40LTIzLjlzMjQuNy0xNC44IDI1LjEtMTkuNHMuMy02LTUuNy0xNy40cy0xNi43LTI2LjctMTQuOS0zNi44czE5LjEtMTUuNCAzMS41LTIwLjJzMzYuMi0xMy43IDM5LjItMTUuMXMyLjItMi43LTYuOC0zLjZzLTM0LjYtNC4zLTQ2LjEtMS4xcy0zMS4yIDguMi0zMi44IDEwLjlzLTMgMi43LTEuNCAxMS44czEwLjEgNTIuOCAxMC45IDYwLjZzMi40IDEyLjktNS44IDE0LjhzLTIyLjEgNS4yLTI2LjggNS4ycy0xOC42LTMuMy0yNi44LTUuMnMtNi42LTctNS44LTE0LjhzOS4zLTUxLjUgMTAuOS02MC42cy4yLTkuMi0xLjQtMTEuOHMtMjEuMy03LjYtMzIuOC0xMC45cy0zNy4xIC4yLTQ2LjEgMS4xcy05LjggMi4yLTYuOCAzLjZzMjYuOCAxMC40IDM5LjIgMTUuMXMyOS43IDEwIDMxLjUgMjAuMnMtOSAyNS40LTE0LjkgMzYuOHMtNi4xIDEyLjgtNS43IDE3LjRzMjAuNiAxNi40IDI1LjEgMTkuNHMyOC40IDE2LjQgMjguNCAyMy45cy0yMy4yIDI3LTMwLjUgMzEuOHMtMjcuMiAxNS40LTM1LjcgMTcuMXMtMjEuNy04LjItMjkuNC0yMi44cy0uOC0yOS4xIDMuOS00MC40cy0zLjMtMTcuNy03LjEtMjEuOHMtMzMuOC0zNi41LTQwLjctNDMuOXMtMTMuNy0xMS4yLTEzLjctMjUuNHM1NC4yLTgxIDU0LjItODFzNDUuOCA4LjkgNTEuOSA4LjlzMTkuNS01LjIgMzEuOS05LjRzMjAuNi00LjIgMjAuNi00LjJsLjEgMHpcIl1cbn07XG52YXIgZmFGYWNlYm9va0YgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZmFjZWJvb2stZicsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjM5ZVwiLCBcIk04MCAyOTkuM1Y1MTJIMTk2VjI5OS4zaDg2LjVsMTgtOTcuOEgxOTZWMTY2LjljMC01MS43IDIwLjMtNzEuNSA3Mi43LTcxLjVjMTYuMyAwIDI5LjQgLjQgMzcgMS4yVjcuOUMyOTEuNCA0IDI1Ni40IDAgMjM2LjIgMEMxMjkuMyAwIDgwIDUwLjUgODAgMTU5LjR2NDIuMUgxNHY5Ny44SDgwelwiXVxufTtcbnZhciBmYVNxdWFyZUdvb2dsZVBsdXMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLWdvb2dsZS1wbHVzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXCJnb29nbGUtcGx1cy1zcXVhcmVcIl0sIFwiZjBkNFwiLCBcIk00NDggOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2ek02NCAyNTZjMC01NS4zIDQ0LjctMTAwIDEwMC0xMDBjMjcgMCA0OS41IDkuOCA2NyAyNi4ybC0yNy4xIDI2LjFjLTcuNC03LjEtMjAuMy0xNS40LTM5LjgtMTUuNGMtMzQuMSAwLTYxLjkgMjguMi02MS45IDYzLjJjMCAzNC45IDI3LjggNjMuMiA2MS45IDYzLjJjMzkuNiAwIDU0LjQtMjguNSA1Ni44LTQzLjFIMTY0VjI0MS44aDk0LjRjMSA1IDEuNiAxMC4xIDEuNiAxNi42YzAgNTcuMS0zOC4zIDk3LjYtOTYgOTcuNmMtNTUuMyAwLTEwMC00NC43LTEwMC0xMDB6bTI5MSAxOC4ydjI5SDMyNS44di0yOWgtMjlWMjQ1aDI5VjIxNkgzNTV2MjloMjl2MjkuMkgzNTV6XCJdXG59O1xudmFyIGZhR29vZ2xlUGx1c1NxdWFyZSA9IGZhU3F1YXJlR29vZ2xlUGx1cztcbnZhciBmYVdlYkF3ZXNvbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2ViLWF3ZXNvbWUnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImU2ODJcIiwgXCJNMzcyLjIgNTJjMCAyMC45LTEyLjQgMzktMzAuMiA0Ny4yTDQ0OCAxOTJsMTA0LjQtMjAuOWMtNS4zLTcuNy04LjQtMTcuMS04LjQtMjcuMWMwLTI2LjUgMjEuNS00OCA0OC00OHM0OCAyMS41IDQ4IDQ4YzAgMjYtMjAuNiA0Ny4xLTQ2LjQgNDhMNDgxIDQ0Mi4zYy0xMC4zIDIzLTMzLjIgMzcuNy01OC40IDM3LjdsLTIwNS4yIDBjLTI1LjIgMC00OC0xNC44LTU4LjQtMzcuN0w0Ni40IDE5MkMyMC42IDE5MS4xIDAgMTcwIDAgMTQ0YzAtMjYuNSAyMS41LTQ4IDQ4LTQ4czQ4IDIxLjUgNDggNDhjMCAxMC4xLTMuMSAxOS40LTguNCAyNy4xTDE5MiAxOTIgMjk4LjEgOTkuMWMtMTcuNy04LjMtMzAtMjYuMy0zMC00Ny4xYzAtMjguNyAyMy4zLTUyIDUyLTUyczUyIDIzLjMgNTIgNTJ6XCJdXG59O1xudmFyIGZhTWFuZGFsb3JpYW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWFuZGFsb3JpYW4nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY1MGZcIiwgXCJNMjMyLjI3IDUxMS44OWMtMS0zLjI2LTEuNjktMTUuODMtMS4zOS0yNC41OC41NS0xNS44OSAxLTI0LjcyIDEuNC0yOC43Ni42NC02LjIgMi44Ny0yMC43MiAzLjI4LTIxLjM4LjYtMSAuNC0yNy44Ny0uMjQtMzMuMTMtLjMxLTIuNTgtLjYzLTExLjktLjY5LTIwLjczLS4xMy0xNi40Ny0uNTMtMjAuMTItMi43My0yNC43Ni0xLjEtMi4zMi0xLjIzLTMuODQtMS0xMS40M2E5Mi4zOCA5Mi4zOCAwIDAgMC0uMzQtMTIuNzFjLTItMTMtMy40Ni0yNy43LTMuMjUtMzMuOXMuNDMtNy4xNSAyLjA2LTkuNjdjMy4wNS00LjcxIDYuNTEtMTQgOC42Mi0yMy4yNyAyLjI2LTkuODYgMy44OC0xNy4xOCA0LjU5LTIwLjc0YTEwOS41NCAxMDkuNTQgMCAwIDEgNC40Mi0xNS4wNWMyLjI3LTYuMjUgMi40OS0xNS4zOS4zNy0xNS4zOS0uMyAwLTEuMzggMS4yMi0yLjQxIDIuNzFzLTQuNzYgNC44LTguMjkgNy4zNmMtOC4zNyA2LjA4LTExLjcgOS4zOS0xMi42NiAxMi41OHMtMSA3LjIzLS4xNiA3Ljc2Yy4zNC4yMSAxLjI5IDIuNCAyLjExIDQuODhhMjguODMgMjguODMgMCAwIDEgLjcyIDE1LjM2Yy0uMzkgMS43Ny0xIDUuNDctMS40NiA4LjIzcy0xIDYuNDYtMS4yNSA4LjIyYTkuODUgOS44NSAwIDAgMS0xLjU1IDQuMjZjLTEgMS0xLjE0LjkxLTIuMDUtLjUzYTE0Ljg3IDE0Ljg3IDAgMCAxLTEuNDQtNC43NWMtLjI1LTEuNzQtMS42My03LjExLTMuMDgtMTEuOTMtMy4yOC0xMC45LTMuNTItMTYuMTUtMS0yMWExNC4yNCAxNC4yNCAwIDAgMCAxLjY3LTQuNjFjMC0yLjM5LTIuMi01LjMyLTcuNDEtOS44OS03LTYuMTgtOC42My03LjkyLTEwLjIzLTExLjMtMS43MS0zLjYtMy4wNi00LjA2LTQuNTQtMS41NC0xLjc4IDMtMi42IDkuMTEtMyAyMmwtLjM0IDEyLjE5IDIgMi4yNWMzLjIxIDMuNyAxMi4wNyAxNi40NSAxMy43OCAxOS44MyAzLjQxIDYuNzQgNC4zNCAxMS42OSA0LjQxIDIzLjU2cy45NSAyMi43NSAyIDI0LjcxYy4zNi42Ni41MSAxLjM1LjM0IDEuNTJzLjQxIDIuMDkgMS4yOSA0LjI3YTM4LjE0IDM4LjE0IDAgMCAxIDIuMDYgOSA5MSA5MSAwIDAgMCAxLjcxIDEwLjM3YzIuMjMgOS41NiAyLjc3IDE0LjA4IDIuMzkgMjAuMTQtLjIgMy4yNy0uNTMgMTEuMDctLjczIDE3LjMyLTEuMzEgNDEuNzYtMS44NSA1OC0yIDYxLjIxLS4xMiAyLS4zOSAxMS41MS0uNiAyMS4wNy0uMzYgMTYuMy0xLjMgMjcuMzctMi40MiAyOC42NS0uNjQuNzMtOC4wNy00LjkxLTEyLjUyLTkuNDktMy43NS0zLjg3LTQtNC43OS0yLjgzLTkuOTUuNy0zIDIuMjYtMTguMjkgMy4zMy0zMi42Mi4zNi00Ljc4LjgxLTEwLjUgMS0xMi43MS44My05LjM3IDEuNjYtMjAuMzUgMi42MS0zNC43OC41Ni04LjQ2IDEuMzMtMTYuNDQgMS43Mi0xNy43M3MuODktOS44OSAxLjEzLTE5LjExbC40My0xNi43Ny0yLjI2LTQuM2MtMS43Mi0zLjI4LTQuODctNi45NC0xMy4yMi0xNS4zNC02LTYuMDctMTEuODQtMTIuMy0xMi45MS0xMy44NWwtMS45NS0yLjgxLjc1LTEwLjljMS4wOS0xNS43MSAxLjEtNDguNTcgMC01OS4wNmwtLjg5LTguNy0zLjI4LTQuNTJjLTUuODYtOC4wOC01LjgtNy43NS02LjIyLTMzLjI3LS4xLTYuMDctLjM4LTExLjUtLjYzLTEyLjA2LS44My0xLjg3LTMuMDUtMi42Ni04LjU0LTMuMDUtOC44Ni0uNjItMTEtMS45LTIzLjg1LTE0LjU1LTYuMTUtNi0xMi4zNC0xMi0xMy43NS0xMy4xOS0yLjgxLTIuNDItMi43OS0yLS41Ni05LjYzbDEuMzUtNC42NS0xLjY5LTNhMzIuMjIgMzIuMjIgMCAwIDAtMi41OS00LjA3Yy0xLjMzLTEuNTEtNS41LTEwLjg5LTYtMTMuNDlhNC4yNCA0LjI0IDAgMCAxIC44Ny0zLjljMi4yMy0yLjg2IDMuNC01LjY4IDQuNDUtMTAuNzMgMi4zMy0xMS4xOSA3Ljc0LTI2LjA5IDEwLjYtMjkuMjIgMy4xOC0zLjQ3IDcuNy0xIDkuNDEgNSAxLjM0IDQuNzkgMS4zNyA5Ljc5LjEgMTguNTVhMTAxLjIgMTAxLjIgMCAwIDAtMSAxMS4xMWMwIDQgLjE5IDQuNjkgMi4yNSA3LjM5IDMuMzMgNC4zNyA3LjczIDcuNDEgMTUuMiAxMC41MmExOC42NyAxOC42NyAwIDAgMSA0LjcyIDIuODVjMTEuMTcgMTAuNzIgMTguNjIgMTYuMTggMjIuOTUgMTYuODUgNS4xOC44IDggNC41NCAxMCAxMy4zOSAxLjMxIDUuNjUgNCAxMS4xNCA1LjQ2IDExLjE0YTkuMzggOS4zOCAwIDAgMCAzLjMzLTEuMzljMi0xLjIyIDIuMjUtMS43MyAyLjI1LTQuMThhMTMyLjg4IDEzMi44OCAwIDAgMC0yLTE3Ljg0Yy0uMzctMS42Ni0uNzgtNC4wNi0uOTMtNS4zNXMtLjYxLTMuODUtMS01LjY5Yy0yLjU1LTExLjE2LTMuNjUtMTUuNDYtNC4xLTE2LTEuNTUtMi00LjA4LTEwLjItNC45My0xNS45Mi0xLjY0LTExLjExLTQtMTQuMjMtMTIuOTEtMTcuMzlBNDMuMTUgNDMuMTUgMCAwIDEgMTY1LjI0IDc4Yy0xLjE1LTEtNC0zLjIyLTYuMzUtNS4wNnMtNC40MS0zLjUzLTQuNi0zLjc2YTIyLjcgMjIuNyAwIDAgMC0yLjY5LTJjLTYuMjQtNC4yMi04Ljg0LTctMTEuMjYtMTJsLTIuNDQtNS0uMjItMTMtLjIyLTEzIDYuOTEtNi41NWMzLjk1LTMuNzUgOC40OC03LjM1IDEwLjU5LTguNDMgMy4zMS0xLjY5IDQuNDUtMS44OSAxMS4zNy0yIDguNTMtLjE5IDEwLjEyIDAgMTEuNjYgMS41NnMxLjM2IDYuNC0uMjkgOC41YTYuNjYgNi42NiAwIDAgMC0xLjM0IDIuMzJjMCAuNTgtMi42MSA0LjkxLTUuNDIgOWEzMC4zOSAzMC4zOSAwIDAgMC0yLjM3IDYuODJjMjAuNDQgMTMuMzkgMjEuNTUgMy43NyAxNC4wNyAyOUwxOTQgNjYuOTJjMy4xMS04LjY2IDYuNDctMTcuMjYgOC42MS0yNi4yMi4yOS03LjYzLTEyLTQuMTktMTUuNC04LjY4LTIuMzMtNS45MyAzLjEzLTE0LjE4IDYuMDYtMTkuMiAxLjYtMi4zNCA2LjYyLTQuNyA4LjgyLTQuMTUuODguMjIgNC4xNi0uMzUgNy4zNy0xLjI4YTQ1LjMgNDUuMyAwIDAgMSA3LjU1LTEuNjggMjkuNTcgMjkuNTcgMCAwIDAgNi0xLjI5YzMuNjUtMS4xMSA0LjUtMS4xNyA2LjM1LS40YTI5LjU0IDI5LjU0IDAgMCAwIDUuODIgMS4zNiAxOC4xOCAxOC4xOCAwIDAgMSA2IDEuOTEgMjIuNjcgMjIuNjcgMCAwIDAgNSAyLjE3YzIuNTEuNjggMyAuNTcgNy4wNS0xLjY3bDQuMzUtMi40TDI2OC4zMiA1YzEwLjQ0LS40IDEwLjgxLS40NyAxNS4yNi0yLjY4TDI4OC4xNiAwbDIuNDYgMS40M2MxLjc2IDEgMy4xNCAyLjczIDQuODUgNiAyLjM2IDQuNTEgMi4zOCA0LjU4IDEuMzcgNy4zNy0uODggMi40NC0uODkgMy4zLS4xIDYuMzlhMzUuNzYgMzUuNzYgMCAwIDAgMi4xIDUuOTEgMTMuNTUgMTMuNTUgMCAwIDEgMS4zMSA0Yy4zMSA0LjMzIDAgNS4zLTIuNDEgNi45Mi0yLjE3IDEuNDctNyA3LjkxLTcgOS4zNGExNC43NyAxNC43NyAwIDAgMS0xLjA3IDNjLTUgMTEuNTEtNi43NiAxMy41Ni0xNC4yNiAxNy05LjIgNC4yLTEyLjMgNS4xOS0xNi4yMSA1LjE5LTMuMSAwLTQgLjI1LTQuNTQgMS4yNmExOC4zMyAxOC4zMyAwIDAgMS00LjA5IDMuNzEgMTMuNjIgMTMuNjIgMCAwIDAtNC4zOCA0Ljc4IDUuODkgNS44OSAwIDAgMS0yLjQ5IDIuOTEgNi44OCA2Ljg4IDAgMCAwLTIuNDUgMS43MSA2Ny42MiA2Ny42MiAwIDAgMS03IDUuMzhjLTMuMzMgMi4zNC02Ljg3IDUtNy44NyA2QTcuMjcgNy4yNyAwIDAgMSAyMjQgMTAwYTUuNzYgNS43NiAwIDAgMC0yLjEzIDEuNjVjLTEuMzEgMS4zOS0xLjQ5IDIuMTEtMS4xNCA0LjZhMzYuNDUgMzYuNDUgMCAwIDAgMS40MiA1Ljg4YzEuMzIgMy44IDEuMzEgNy44NiAwIDEwLjU3cy0uODkgNi42NSAxLjM1IDkuNTljMiAyLjYzIDIuMTYgNC41Ni43MSA4Ljg0YTMzLjQ1IDMzLjQ1IDAgMCAwLTEuMDYgOC45MWMwIDQuODguMjIgNi4yOCAxLjQ2IDguMzhzMS44MiAyLjQ4IDMuMjQgMi4zMmMyLS4yMyAyLjMtMS4wNSA0LjcxLTEyLjEyIDIuMTgtMTAgMy43MS0xMS45MiAxMy43Ni0xNy4wOCAyLjk0LTEuNTEgNy40Ni00IDEwLTUuNDRzNi43OS0zLjY5IDkuMzctNC45MWE0MC4wOSA0MC4wOSAwIDAgMCAxNS4yMi0xMS42N2M3LjExLTguNzkgMTAtMTYuMjIgMTIuODUtMzMuM2ExOC4zNyAxOC4zNyAwIDAgMSAyLjg2LTcuNzMgMjAuMzkgMjAuMzkgMCAwIDAgMi44OS03LjMxYzEtNS4zIDIuODUtOS4wOCA1LjU4LTExLjUxIDQuNy00LjE4IDYtMS4wOSA0LjU5IDEwLjg3LS40NiAzLjg2LTEuMSAxMC4zMy0xLjQ0IDE0LjM4bC0uNjEgNy4zNiA0LjQ1IDQuMDkgNC40NSA0LjA5LjExIDguNDJjLjA2IDQuNjMuNDcgOS41My45MiAxMC44OWwuODIgMi40Ny02LjQzIDYuMjhjLTguNTQgOC4zMy0xMi44OCAxMy45My0xNi43NiAyMS42MS0xLjc3IDMuNDktMy43NCA3LjExLTQuMzggOC0yLjE4IDMuMTEtNi40NiAxMy04Ljc2IDIwLjI2bC0yLjI5IDcuMjItNyA2LjQ5Yy0zLjgzIDMuNTctOCA3LjI1LTkuMTcgOC4xNy0zLjA1IDIuMzItNC4yNiA1LjE1LTQuMjYgMTBhMTQuNjIgMTQuNjIgMCAwIDAgMS41OSA3LjI2IDQyIDQyIDAgMCAxIDIuMDkgNC44MyA5LjI4IDkuMjggMCAwIDAgMS41NyAyLjg5YzEuNCAxLjU5IDEuOTIgMTYuMTIuODMgMjMuMjItLjY4IDQuNDgtMy42MyAxMi00LjcgMTItMS43OSAwLTQuMDYgOS4yNy01LjA3IDIwLjc0LS4xOCAyLS42MiA1Ljk0LTEgOC43cy0xIDEwLTEuMzUgMTYuMDVjLS43NyAxMi4yMi0uMTkgMTguNzcgMiAyMy4xNSAzLjQxIDYuNjkuNTIgMTIuNjktMTEgMjIuODRsLTQgMy40OS4wNyA1LjE5YTQwLjgxIDQwLjgxIDAgMCAwIDEuMTQgOC44N2M0LjYxIDE2IDQuNzMgMTYuOTIgNC4zOCAzNy4xMy0uNDYgMjYuNC0uMjYgNDAuMjcuNjMgNDQuMTVhNjEuMzEgNjEuMzEgMCAwIDEgMS4wOCA3Yy4xNyAyIC42NiA1LjMzIDEuMDggNy4zNi40NyAyLjI2Ljc4IDExIC43OSAyMi43NHYxOS4wNmwtMS44MSAyLjYzYy0yLjcxIDMuOTEtMTUuMTEgMTMuNTQtMTUuNDkgMTIuMjl6bTI5LjUzLTQ1LjExYy0uMTgtLjMtLjMzLTYuODctLjMzLTE0LjU5IDAtMTQuMDYtLjg5LTI3LjU0LTIuMjYtMzQuNDUtLjQtMi0uODEtOS43LS45LTE3LjA2LS4xNS0xMS45My0xLjQtMjQuMzctMi42NC0yNi4zOC0uNjYtMS4wNy0zLTE3LjY2LTMtMjEuMyAwLTQuMjMgMS02IDUuMjgtOS4xM3M0Ljg2LTMuMTQgNS40OC0uNzJjLjI4IDEuMSAxLjQ1IDUuNjIgMi42IDEwIDMuOTMgMTUuMTIgNC4xNCAxNi4yNyA0LjA1IDIxLjc0LS4xIDUuNzgtLjEzIDYuMTMtMS43NCAxNy43My0xIDcuMDctMS4xNyAxMi4zOS0xIDI4LjQzLjE3IDE5LjQtLjY0IDM1LjczLTIgNDEuMjctLjcxIDIuNzgtMi44IDUuNDgtMy40MyA0LjQzem0tNzEtMzcuNThhMTAxIDEwMSAwIDAgMS0xLjczLTEwLjc5IDEwMC41IDEwMC41IDAgMCAwLTEuNzMtMTAuNzkgMzcuNTMgMzcuNTMgMCAwIDEtMS02LjQ5Yy0uMzEtMy4xOS0uOTEtNy40Ni0xLjMzLTkuNDgtMS00Ljc5LTMuMzUtMTkuMzUtMy40Mi0yMS4wNyAwLS43NC0uMzQtNC4wNS0uNy03LjM2LS42Ny02LjIxLS44NC0yNy42Ny0uMjItMjguMjkgMS0xIDYuNjMgMi43NiAxMS4zMyA3LjQzbDUuMjggNS4yNS0uNDUgNi40N2MtLjI1IDMuNTYtLjYgMTAuMjMtLjc4IDE0Ljgzcy0uNDkgOS44Ny0uNjcgMTEuNzEtLjYxIDkuMzYtLjk0IDE2LjcyYy0uNzkgMTcuNDEtMS45NCAzMS4yOS0yLjY1IDMyYS42Mi42MiAwIDAgMS0xLS4xNHptLTg3LjE4LTI2Ni41OWMyMS4wNyAxMi43OSAxNy44NCAxNC4xNSAyOC40OSAxNy42NiAxMyA0LjI5IDE4Ljg3IDcuMTMgMjMuMTUgMTYuODdDMTExLjYgMjMzLjI4IDg2LjI1IDI1NSA3OC41NSAyNjhjLTMxIDUyLTYgMTAxLjU5IDYyLjc1IDg3LjIxLTE0LjE4IDI5LjIzLTc4IDI4LjYzLTk4LjY4LTQuOS0yNC42OC0zOS45NS0yMi4wOS0xMTguMyA2MS0xODcuNjZ6bTIxMC43OSAxNzljNTYuNjYgNi44OCA4Mi4zMi0zNy43NCA0Ni41NC04OS4yMyAwIDAtMjYuODctMjkuMzQtNjQuMjgtNjggMy0xNS40NSA5LjQ5LTMyLjEyIDMwLjU3LTUzLjgyIDg5LjIgNjMuNTEgOTIgMTQxLjYxIDkyLjQ2IDE0OS4zNiA0LjMgNzAuNjQtNzguNyA5MS4xOC0xMDUuMjkgNjEuNzF6XCJdXG59O1xudmFyIGZhRmlyc3RPcmRlckFsdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmaXJzdC1vcmRlci1hbHQnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY1MGFcIiwgXCJNMjQ4IDhDMTExLjAzIDggMCAxMTkuMDMgMCAyNTZzMTExLjAzIDI0OCAyNDggMjQ4IDI0OC0xMTEuMDMgMjQ4LTI0OFMzODQuOTcgOCAyNDggOHptMCA0ODguMjFDMTE1LjM0IDQ5Ni4yMSA3Ljc5IDM4OC42NiA3Ljc5IDI1NlMxMTUuMzQgMTUuNzkgMjQ4IDE1Ljc5IDQ4OC4yMSAxMjMuMzQgNDg4LjIxIDI1NiAzODAuNjYgNDk2LjIxIDI0OCA0OTYuMjF6bTAtNDU5LjkyQzEyNi42NiAzNi4yOSAyOC4yOSAxMzQuNjYgMjguMjkgMjU2UzEyNi42NiA0NzUuNzEgMjQ4IDQ3NS43MSA0NjcuNzEgMzc3LjM0IDQ2Ny43MSAyNTYgMzY5LjM0IDM2LjI5IDI0OCAzNi4yOXptMCA0MzEuMjJjLTExNi44MSAwLTIxMS41MS05NC42OS0yMTEuNTEtMjExLjUxUzEzMS4xOSA0NC40OSAyNDggNDQuNDkgNDU5LjUxIDEzOS4xOSA0NTkuNTEgMjU2IDM2NC44MSA0NjcuNTEgMjQ4IDQ2Ny41MXptMTg2LjIzLTE2Mi45OGExOTEuNjEzIDE5MS42MTMgMCAwIDEtMjAuMTMgNDguNjlsLTc0LjEzLTM1Ljg4IDYxLjQ4IDU0LjgyYTE5My41MTUgMTkzLjUxNSAwIDAgMS0zNy4yIDM3LjI5bC01NC44LTYxLjU3IDM1Ljg4IDc0LjI3YTE5MC45NDQgMTkwLjk0NCAwIDAgMS00OC42MyAyMC4yM2wtMjcuMjktNzguNDcgNC43OSA4Mi45M2MtOC42MSAxLjE4LTE3LjQgMS44LTI2LjMzIDEuOHMtMTcuNzItLjYyLTI2LjMzLTEuOGw0Ljc2LTgyLjQ2LTI3LjE1IDc4LjAzYTE5MS4zNjUgMTkxLjM2NSAwIDAgMS00OC42NS0yMC4ybDM1LjkzLTc0LjM0LTU0Ljg3IDYxLjY0YTE5My44NSAxOTMuODUgMCAwIDEtMzcuMjItMzcuMjhsNjEuNTktNTQuOS03NC4yNiAzNS45M2ExOTEuNjM4IDE5MS42MzggMCAwIDEtMjAuMTQtNDguNjlsNzcuODQtMjcuMTEtODIuMjMgNC43NmMtMS4xNi04LjU3LTEuNzgtMTcuMzItMS43OC0yNi4yMSAwLTkgLjYzLTE3Ljg0IDEuODItMjYuNTFsODIuMzggNC43Ny03Ny45NC0yNy4xNmExOTEuNzI2IDE5MS43MjYgMCAwIDEgMjAuMjMtNDguNjdsNzQuMjIgMzUuOTItNjEuNTItNTQuODZhMTkzLjg1IDE5My44NSAwIDAgMSAzNy4yOC0zNy4yMmw1NC43NiA2MS41My0zNS44My03NC4xN2ExOTEuNDkgMTkxLjQ5IDAgMCAxIDQ4LjY1LTIwLjEzbDI2Ljg3IDc3LjI1LTQuNzEtODEuNjFjOC42MS0xLjE4IDE3LjM5LTEuOCAyNi4zMi0xLjhzMTcuNzEuNjIgMjYuMzIgMS44bC00Ljc0IDgyLjE2IDI3LjA1LTc3Ljc2YzE3LjI3IDQuNSAzMy42IDExLjM1IDQ4LjYzIDIwLjE3bC0zNS44MiA3NC4xMiA1NC43Mi02MS40N2ExOTMuMTMgMTkzLjEzIDAgMCAxIDM3LjI0IDM3LjIzbC02MS40NSA1NC43NyA3NC4xMi0zNS44NmExOTEuNTE1IDE5MS41MTUgMCAwIDEgMjAuMiA0OC42NWwtNzcuODEgMjcuMSA4Mi4yNC00Ljc1YzEuMTkgOC42NiAxLjgyIDE3LjUgMS44MiAyNi40OSAwIDguODgtLjYxIDE3LjYzLTEuNzggMjYuMTlsLTgyLjEyLTQuNzUgNzcuNzIgMjcuMDl6XCJdXG59O1xudmFyIGZhT3NpID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ29zaScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjQxYVwiLCBcIk04IDI2Ni40NEMxMC4zIDEzMC42NCAxMDUuNCAzNCAyMjEuOCAxOC4zNGMxMzguOC0xOC42IDI1NS42IDc1LjggMjc4IDIwMS4xIDIxLjMgMTE4LjgtNDQgMjMwLTE1MS42IDI3NC05LjMgMy44LTE0LjQgMS43LTE4LTcuN3EtMjYuNy02OS40NS01My40LTEzOWMtMy4xLTguMS0xLTEzLjIgNy0xNi44IDI0LjItMTEgMzkuMy0yOS40IDQzLjMtNTUuOGE3MS40NyA3MS40NyAwIDAgMC02NC41LTgyLjJjLTM5LTMuNC03MS44IDIzLjctNzcuNSA1OS43LTUuMiAzMyAxMS4xIDYzLjcgNDEuOSA3Ny43IDkuNiA0LjQgMTEuNSA4LjYgNy44IDE4LjRxLTI2Ljg1IDY5LjktNTMuNyAxMzkuOWMtMi42IDYuOS04LjMgOS4zLTE1LjUgNi41LTUyLjYtMjAuMy0xMDEuNC02MS0xMzAuOC0xMTktMjQuOS00OS4yLTI1LjItODcuNy0yNi44LTEwOC43em0yMC45LTEuOWMuNCA2LjYuNiAxNC4zIDEuMyAyMi4xIDYuMyA3MS45IDQ5LjYgMTQzLjUgMTMxIDE4My4xIDMuMiAxLjUgNC40LjggNS42LTIuM3EyMi4zNS01OC42NSA0NS0xMTcuM2MxLjMtMy4zLjYtNC44LTIuNC02LjctMzEuNi0xOS45LTQ3LjMtNDguNS00NS42LTg2IDEtMjEuNiA5LjMtNDAuNSAyMy44LTU2LjMgMzAtMzIuNyA3Ny0zOS44IDExNS41LTE3LjZhOTEuNjQgOTEuNjQgMCAwIDEgNDUuMiA5MC40Yy0zLjYgMzAuNi0xOS4zIDUzLjktNDUuNyA2OS44LTIuNyAxLjYtMy41IDIuOS0yLjMgNnEyMi44IDU4LjggNDUuMiAxMTcuN2MxLjIgMy4xIDIuNCAzLjggNS42IDIuMyAzNS41LTE2LjYgNjUuMi00MC4zIDg4LjEtNzIgMzQuOC00OC4yIDQ5LjEtMTAxLjkgNDIuMy0xNjEtMTMuNy0xMTcuNS0xMTkuNC0yMTQuOC0yNTUuNS0xOTgtMTA2LjEgMTMtMTk1LjMgMTAyLjUtMTk3LjEgMjI1Ljh6XCJdXG59O1xudmFyIGZhR29vZ2xlV2FsbGV0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dvb2dsZS13YWxsZXQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxZWVcIiwgXCJNMTU2LjggMTI2LjhjMzcuNiA2MC42IDY0LjIgMTEzLjEgODQuMyAxNjIuNS04LjMgMzMuOC0xOC44IDY2LjUtMzEuMyA5OC4zLTEzLjItNTIuMy0yNi41LTEwMS4zLTU2LTE0OC41IDYuNS0zNi40IDIuMy03My42IDMtMTEyLjN6TTEwOS4zIDIwMEgxNi4xYy02LjUgMC0xMC41IDcuNS02LjUgMTIuN0M1MS44IDI2NyA4MS4zIDMzMC41IDEwMS4zIDQwMGgxMDMuNWMtMTYuMi02OS43LTM4LjctMTMzLjctODIuNS0xOTMuNS0zLTQtOC02LjUtMTMtNi41em00Ny44LTg4YzY4LjUgMTA4IDEzMCAyMzQuNSAxMzguMiAzNjhINDA5Yy0xMi0xMzgtNjguNC0yNjUtMTQzLjItMzY4SDE1Ny4xem0yNTEuOC02OC41Yy0xLjgtNi44LTguMi0xMS41LTE1LjItMTEuNWgtODguM2MtNS4zIDAtOSA1LTcuOCAxMC4zIDEzLjIgNDYuNSAyMi4zIDk1LjUgMjYuNSAxNDYgNDguMiA4Ni4yIDc5LjcgMTc4LjMgOTAuNiAyNzAuOCAxNS44LTYwLjUgMjUuMy0xMzMuNSAyNS4zLTIwMyAwLTczLjYtMTIuMS0xNDUuMS0zMS4xLTIxMi42elwiXVxufTtcbnZhciBmYURBbmREQmV5b25kID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2QtYW5kLWQtYmV5b25kJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNmNhXCIsIFwiTTMxMy44IDI0MS41YzEzLjggMCAyMS0xMC4xIDI0LjgtMTcuOS0xLTEuMS01LTQuMi03LjQtNi42LTIuNCA0LjMtOC4yIDEwLjctMTMuOSAxMC43LTEwLjIgMC0xNS40LTE0LjctMy4yLTI2LjYtLjUtLjItNC4zLTEuOC04IDIuNCAwLTMgMS01LjEgMi4xLTYuNi0zLjUgMS4zLTkuOCA1LjYtMTEuNCA3LjkuMi01LjggMS42LTcuNS42LTlsLS4yLS4ycy04LjUgNS42LTkuMyAxNC43YzAgMCAxLjEtMS42IDIuMS0xLjkuNi0uMyAxLjMgMCAuNiAxLjktLjIuNi01LjggMTUuNyA1LjEgMjYtLjYtMS42LTEuOS03LjYgMi40LTEuOS0uMy4xIDUuOCA3LjEgMTUuNyA3LjF6bTUyLjQtMjEuMWMwLTQtNC45LTQuNC01LjYtNC41IDIgMy45LjkgNy41LjIgOSAyLjUtLjQgNS40LTEuNiA1LjQtNC41em0xMC4zIDUuMmMwLTYuNC02LjItMTEuNC0xMy41LTEwLjcgOCAxLjMgNS42IDEzLjgtNSAxMS40IDMuNy0yLjYgMy4yLTkuOS0xLjMtMTIuNSAxLjQgNC4yLTMgOC4yLTcuNCA0LjYtMi40LTEuOS04LTYuNi0xMC42LTguNi0yLjQtMi4xLTUuNS0xLTYuNi0xLjgtMS4zLTEuMS0uNS0zLjgtMi4yLTUtMS42LS44LTMtLjMtNC44LTEtMS42LS42LTIuNy0xLjktMi42LTMuNS0yLjUgNC40IDMuNCA2LjMgNC41IDguNSAxIDEuOS0uOCA0LjggNCA4LjUgMTQuOCAxMS42IDkuMSA4IDEwLjQgMTguMS42IDQuMyA0LjIgNi43IDYuNCA3LjQtMi4xLTEuOS0yLjktNi40IDAtOS4zIDAgMTMuOSAxOS4yIDEzLjMgMjMuMSA2LjQtMi40IDEuMS03LS4yLTktMS45IDcuNyAxIDE0LjItNC4xIDE0LjYtMTAuNnptLTM5LjQtMTguNGMyIC44IDEuNi43IDYuNCA0LjUgMTAuMi0yNC41IDIxLjctMTUuNyAyMi0xNS41IDIuMi0xLjkgOS44LTMuOCAxMy44LTIuNy0yLjQtMi43LTcuNS02LjItMTMuMy02LjItNC43IDAtNy40IDIuMi04IDEuMy0uOC0xLjQgMy4yLTMuNCAzLjItMy40LTUuNC4yLTkuNiA2LjctMTEuMiA1LjktMS4xLS41IDEuNC0zLjcgMS40LTMuNy01LjEgMi45LTkuMyA5LjEtMTAuMiAxMyA0LjYtNS44IDEzLjgtOS44IDE5LjctOS0xMC41LjUtMTkuNSA5LjctMjMuOCAxNS44em0yNDIuNSA1MS45Yy0yMC43IDAtNDAgMS4zLTUwLjMgMi4xbDcuNCA4LjJ2NzcuMmwtNy40IDguMmMxMC40LjggMzAuOSAyLjEgNTEuNiAyLjEgNDIuMSAwIDU5LjEtMjAuNyA1OS4xLTQ4LjkgMC0yOS4zLTIzLjItNDguOS02MC40LTQ4Ljl6bS0xNS4xIDc1LjZ2LTUzLjNjMzAuMS0zLjMgNDYuOCAzLjggNDYuOCAyNi4zIDAgMjUuNi0yMS40IDMwLjItNDYuOCAyN3pNMzAxLjYgMTgxYy0xLTMuNC0uMi02LjkgMS4xLTkuNCAxIDMgMi42IDYuNCA3LjUgOS0uNS0yLjQtLjItNS42LjUtOC0xLjQtNS40IDIuMS05LjkgNi40LTkuOSA2LjkgMCA4LjUgOC44IDQuNyAxNC40IDIuMSAzLjIgNS41IDUuNiA3LjcgNy44IDMuMi0zLjcgNS41LTkuNSA1LjUtMTMuOCAwLTguMi01LjUtMTUuOS0xNi43LTE2LjUtMjAtLjktMjAuMiAxNi42LTIwIDE4LjkuNSA1LjIgMy40IDcuOCAzLjMgNy41em0tLjQgNmMtLjUgMS44LTcgMy43LTEwLjIgNi45IDQuOC0xIDctLjIgNy44IDEuOC41IDEuNC0uMiAzLjQtLjUgNS42IDEuNi0xLjggNy01LjUgMTEtNi4yLTEtLjMtMy40LS44LTQuMy0uOCAyLjktMy40IDkuMy00LjUgMTIuOC0zLjctMi4yLS4yLTYuNyAxLjEtOC41IDIuNiAxLjYuMyAzIC42IDQuMyAxLjEtMi4xLjgtNC44IDMuNC01LjggNi4xIDctNSAxMy4xIDUuMiA3IDguMi44LjIgMi43IDAgMy41LS41LS4zIDEuMS0xLjkgMy0zIDMuNCAyLjkgMCA3LTEuOSA4LjItNC42IDAgMC0xLjguNi0yLjYtLjJzLjMtNC4zLjMtNC4zYy0yLjMgMi45LTMuNC0xLjMtMS4zLTQuMi0xLS4zLTMuNS0uNi00LjYtLjUgMy4yLTEuMSAxMC40LTEuOCAxMS4yLS4zLjYgMS4xLTEgMy40LTEgMy40IDQtLjUgOC4zIDEuMSA2LjcgNS4xIDIuOS0xLjQgNS41LTUuOSA0LjgtMTAuNC0uMyAxLTEuNiAyLjQtMi45IDIuNy4yLTEuNC0xLTIuMi0xLjktMi42IDEuNy05LjYtMTQuNi0xNC4yLTE0LjEtMjMuOS0xIDEuMy0xLjggNS0uOCA3LjEgMi43IDMuMiA4LjcgNi43IDEwLjEgMTIuMi0yLjYtNi40LTE1LjEtMTEuNC0xNC42LTIwLjItMS42IDEuNi0yLjYgNy44LTEuMyAxMSAyLjQgMS40IDQuNSAzLjggNC44IDYuMS0yLjItNS4xLTExLjQtNi4xLTEzLjktMTIuMi0uNiAyLjItLjMgNSAxIDYuNyAwIDAtMi4yLS44LTctLjYgMS43LjYgNS4xIDMuNSA0LjggNS4yem0yNS45IDcuNGMtMi43IDAtMy41LTIuMS00LjItNC4zIDMuMyAxLjMgNC4yIDQuMyA0LjIgNC4zem0zOC45IDMuN2wtMS0uNmMtMS4xLTEtMi45LTEuNC00LjctMS40LTIuOSAwLTUuOCAxLjMtNy41IDMuNC0uOC44LTEuNCAxLjgtMi4xIDIuNnYxNS43YzMuNSAyLjYgNy4xLTIuOSAzLTcuMiAxLjUuMyA0LjYgMi43IDUuMSAzLjIgMCAwIDIuNi0uNSA1LS41IDIuMSAwIDMuOS4zIDUuNiAxLjFWMTk2Yy0xLjEuNS0yLjIgMS0yLjcgMS40ek03OS45IDMwNS45YzE3LjItNC42IDE2LjItMTggMTYuMi0xOS45IDAtMjAuNi0yNC4xLTI1LTM3LTI1SDNsOC4zIDguNnYyOS41SDBsMTEuNCAxNC42VjM0NkwzIDM1NC42YzYxLjcgMCA3My44IDEuNSA4Ni40LTUuOSA2LjctNCA5LjktOS44IDkuOS0xNy42IDAtNS4xIDIuNi0xOC44LTE5LjQtMjUuMnptLTQxLjMtMjcuNWMyMCAwIDI5LjYtLjggMjkuNiA5LjF2M2MwIDEyLjEtMTkgOC44LTI5LjYgOC44em0wIDU5LjJWMzE1YzEyLjIgMCAzMi43LTIuMyAzMi43IDguOHY0LjVoLjJjMCAxMS4yLTEyLjUgOS4zLTMyLjkgOS4zem0xMDEuMi0xOS4zbDIzLjEuMnYtLjJsMTQuMS0yMS4yaC0zNy4ydi0xNC45aDUyLjRsLTE0LjEtMjF2LS4ybC03My41LjIgNy40IDguMnY3Ny4xbC03LjQgOC4yaDgxLjJsMTQuMS0yMS4yLTYwLjEuMnptMjE0LjctNjAuMWMtNzMuOSAwLTc3LjUgOTkuMy0uMyA5OS4zIDc3LjkgMCA3NC4xLTk5LjMuMy05OS4zem0tLjMgNzcuNWMtMzcuNCAwLTM2LjktNTUuMy4yLTU1LjMgMzYuOC4xIDM4LjggNTUuMy0uMiA1NS4zem0tOTEuMy04LjNsNDQuMS02Ni4yaC00MS43bDYuMSA3LjItMjAuNSAzNy4yaC0uM2wtMjEtMzcuMiA2LjQtNy4yaC00NC45bDQ0LjEgNjUuOC4yIDE5LjQtNy43IDguMmg0Mi42bC03LjItOC4yem0tMjguNC0xNTEuM2MxLjYgMS4zIDIuOSAyLjQgMi45IDYuNnYzOC44YzAgNC4yLS44IDUuMy0yLjcgNi40LS4xLjEtNy41IDQuNS03LjkgNC42aDM1LjFjMTAgMCAxNy40LTEuNSAyNi04LjYtLjYtNSAuMi05LjUuOC0xMiAwLS4yLTEuOCAxLjQtMi43IDMuNSAwLTUuNyAxLjYtMTUuNCA5LjYtMjAuNS0uMSAwLTMuNy0uOC05IDEuMSAyLTMuMSAxMC03LjkgMTAuNC03LjktOC4yLTI2LTM4LTIyLjktMzIuMi0yMi45LTMwLjkgMC0zMi42LjMtMzkuOS00IC4xLjguNSA4LjIgOS42IDE0Ljl6bTIxLjUgNS41YzQuNiAwIDIzLjEtMy4zIDIzLjEgMTcuMyAwIDIwLjctMTguNCAxNy4zLTIzLjEgMTcuM3ptMjI4LjkgNzkuNmw3IDguM1YzMTJoLS4zYy01LjQtMTQuNC00Mi4zLTQxLjUtNDUuMi01MC45aC0zMS42bDcuNCA4LjV2NzYuOWwtNy4yIDguM2gzOWwtNy40LTguMnYtNDcuNGguM2MzLjcgMTAuNiA0NC41IDQyLjkgNDguNSA1NS42aDIxLjN2LTg1LjJsNy40LTguM3ptLTEwNi43LTk2LjFjLTMyLjIgMC0zMi44LjItMzkuOS00IC4xLjcuNSA4LjMgOS42IDE0LjkgMy4xIDIgMi45IDQuMyAyLjkgOS41IDEuOC0xLjEgMy44LTIuMiA2LjEtMy0xLjEgMS4xLTIuNyAyLjctMy41IDQuNSAxLTEuMSA3LjUtNS4xIDE0LjYtMy41LTEuNi4zLTQgMS4xLTYuMSAyLjkuMSAwIDIuMS0xLjEgNy41LS4zdi00LjNjNC43IDAgMjMuMS0zLjQgMjMuMSAxNy4zIDAgMjAuNS0xOC41IDE3LjMtMTkuNyAxNy4zIDUuNyA0LjQgNS44IDEyIDIuMiAxNi4zaC4zYzMzLjQgMCAzNi43LTI3LjMgMzYuNy0zNCAwLTMuOC0xLjEtMzItMzMuOC0zMy42elwiXVxufTtcbnZhciBmYVBlcmlzY29wZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwZXJpc2NvcGUnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYzZGFcIiwgXCJNMzcwIDYzLjZDMzMxLjQgMjIuNiAyODAuNSAwIDIyNi42IDAgMTExLjkgMCAxOC41IDk2LjIgMTguNSAyMTQuNGMwIDc1LjEgNTcuOCAxNTkuOCA4Mi43IDE5Mi43QzEzNy44IDQ1NS41IDE5Mi42IDUxMiAyMjYuNiA1MTJjNDEuNiAwIDExMi45LTk0LjIgMTIwLjktMTA1IDI0LjYtMzMuMSA4Mi0xMTguMyA4Mi0xOTIuNiAwLTU2LjUtMjEuMS0xMTAuMS01OS41LTE1MC44ek0yMjYuNiA0OTMuOWMtNDIuNSAwLTE5MC0xNjcuMy0xOTAtMjc5LjQgMC0xMDcuNCA4My45LTE5Ni4zIDE5MC0xOTYuMyAxMDAuOCAwIDE4NC43IDg5IDE4NC43IDE5Ni4zLjEgMTEyLjEtMTQ3LjQgMjc5LjQtMTg0LjcgMjc5LjR6TTMzOCAyMDYuOGMwIDU5LjEtNTEuMSAxMDkuNy0xMTAuOCAxMDkuNy0xMDAuNiAwLTE1MC43LTEwOC4yLTkyLjktMTgxLjh2LjRjMCAyNC41IDIwLjEgNDQuNCA0NC44IDQ0LjQgMjQuNyAwIDQ0LjgtMTkuOSA0NC44LTQ0LjQgMC0xOC4yLTExLjEtMzMuOC0yNi45LTQwLjcgNzYuNi0xOS4yIDE0MSAzOS4zIDE0MSAxMTIuNHpcIl1cbn07XG52YXIgZmFGdWxjcnVtID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2Z1bGNydW0nLFxuICBpY29uOiBbMzIwLCA1MTIsIFtdLCBcImY1MGJcIiwgXCJNOTUuNzUgMTY0LjE0bC0zNS4zOCA0My41NUwyNSAxNjQuMTRsMzUuMzgtNDMuNTV6TTE0NC4yMyAwbC0yMC41NCAxOTguMThMNzIuNzIgMjU2bDUxIDU3LjgyTDE0NC4yMyA1MTJWMzAwLjg5TDEwMy4xNSAyNTZsNDEuMDgtNDQuODl6bTc5LjY3IDE2NC4xNGwzNS4zOCA0My41NSAzNS4zOC00My41NS0zNS4zOC00My41NXptLTQ4LjQ4IDQ3TDIxNi41IDI1NmwtNDEuMDggNDQuODlWNTEyTDE5NiAzMTMuODIgMjQ3IDI1NmwtNTEtNTcuODJMMTc1LjQyIDB6XCJdXG59O1xudmFyIGZhQ2xvdWRzY2FsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjbG91ZHNjYWxlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMzgzXCIsIFwiTTMxOC4xIDE1NGwtOS40IDcuNmMtMjIuNS0xOS4zLTUxLjUtMzMuNi04My4zLTMzLjZDMTUzLjggMTI4IDk2IDE4OC44IDk2IDI2MC4zYzAgNi42LjQgMTMuMSAxLjQgMTkuNC0yLTU2IDQxLjgtOTcuNCA5Mi42LTk3LjQgMjQuMiAwIDQ2LjIgOS40IDYyLjYgMjQuN2wtMjUuMiAyMC40Yy04LjMtLjktMTYuOCAxLjgtMjMuMSA4LjEtMTEuMSAxMS0xMS4xIDI4LjkgMCA0MCAxMS4xIDExIDI4LjkgMTEgNDAgMCA2LjMtNi4zIDktMTQuOSA4LjEtMjMuMWw3NS4yLTg4LjhjNi4zLTYuNS0zLjMtMTUuOS05LjUtOS42em0tODMuOCAxMTEuNWMtNS42IDUuNS0xNC42IDUuNS0yMC4yIDAtNS42LTUuNi01LjYtMTQuNiAwLTIwLjJzMTQuNi01LjYgMjAuMiAwIDUuNiAxNC43IDAgMjAuMnpNMjI0IDMyQzEwMC41IDMyIDAgMTMyLjUgMCAyNTZzMTAwLjUgMjI0IDIyNCAyMjQgMjI0LTEwMC41IDIyNC0yMjRTMzQ3LjUgMzIgMjI0IDMyem0wIDM4NGMtODguMiAwLTE2MC03MS44LTE2MC0xNjBTMTM1LjggOTYgMjI0IDk2czE2MCA3MS44IDE2MCAxNjAtNzEuOCAxNjAtMTYwIDE2MHpcIl1cbn07XG52YXIgZmFGb3J1bWJlZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmb3J1bWJlZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjIxMVwiLCBcIk01LjggMzA5LjdDMiAyOTIuNyAwIDI3NS41IDAgMjU4LjMgMCAxMzUgOTkuOCAzNSAyMjMuMSAzNWMxNi42IDAgMzMuMyAyIDQ5LjMgNS41QzE0OSA4Ny41IDUxLjkgMTg2IDUuOCAzMDkuN3ptMzkyLjktMTg5LjJDMzg1IDEwMyAzNjkgODcuOCAzNTAuOSA3NS4yYy0xNDkuNiA0NC4zLTI2Ni4zIDE2Mi4xLTMwOS43IDMxMiAxMi41IDE4LjEgMjggMzUuNiA0NS4yIDQ5IDQzLjEtMTUxLjMgMTYxLjItMjcxLjcgMzEyLjMtMzE1Ljd6bTE1LjggMjUyLjdjMTUuMi0yNS4xIDI1LjQtNTMuNyAyOS41LTgyLjgtNzkuNCA0Mi45LTE0NSAxMTAuNi0xODcuNiAxOTAuMyAzMC00LjQgNTguOS0xNS4zIDg0LjYtMzEuMyAzNSAxMy4xIDcwLjkgMjQuMyAxMDcgMzMuNi05LjMtMzYuNS0yMC40LTc0LjUtMzMuNS0xMDkuOHptMjkuNy0xNDUuNWMtMi42LTE5LjUtNy45LTM4LjctMTUuOC01Ni44QzI5MC41IDIxNi43IDE4MiAzMjcuNSAxMzcuMSA0NjZjMTguMSA3LjYgMzcgMTIuNSA1Ni42IDE1LjJDMjQwIDM2Ny4xIDMzMC41IDI3NC40IDQ0NC4yIDIyNy43elwiXVxufTtcbnZhciBmYU1penVuaSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtaXp1bmknLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYzY2NcIiwgXCJNMjQ4IDhDMTExIDggMCAxMTkuMSAwIDI1NmMwIDEzNyAxMTEgMjQ4IDI0OCAyNDhzMjQ4LTExMSAyNDgtMjQ4QzQ5NiAxMTkuMSAzODUgOCAyNDggOHptLTgwIDM1MS45Yy0zMS40IDEwLjYtNTguOCAyNy4zLTgwIDQ4LjJWMTM2YzAtMjIuMSAxNy45LTQwIDQwLTQwczQwIDE3LjkgNDAgNDB2MjIzLjl6bTEyMC05LjljLTEyLjktMi0yNi4yLTMuMS0zOS44LTMuMS0xMy44IDAtMjcuMiAxLjEtNDAuMiAzLjFWMTM2YzAtMjIuMSAxNy45LTQwIDQwLTQwczQwIDE3LjkgNDAgNDB2MjE0em0xMjAgNTcuN2MtMjEuMi0yMC44LTQ4LjYtMzcuNC04MC00OFYxMzZjMC0yMi4xIDE3LjktNDAgNDAtNDBzNDAgMTcuOSA0MCA0MHYyNzEuN3pcIl1cbn07XG52YXIgZmFTY2hsaXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2NobGl4JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2VhXCIsIFwiTTM1MC41IDE1Ny43bC01NC4yLTQ2LjEgNzMuNC0zOSA3OC4zIDQ0LjItOTcuNSA0MC45ek0xOTIgMTIyLjFsNDUuNy0yOC4yIDM0LjcgMzQuNi01NS40IDI5LTI1LTM1LjR6bS02NS4xIDYuNmwzMS45LTIyLjFMMTc2IDEzNWwtMzYuNyAyMi41LTEyLjQtMjguOHptLTIzLjMgODguMmwtOC44LTM0LjggMjkuNi0xOC4zIDEzLjEgMzUuMy0zMy45IDE3Ljh6bS0yMS4yLTgzLjdsMjMuOS0xOC4xIDguOSAyNC0yNi43IDE4LjMtNi4xLTI0LjJ6TTU5IDIwNi41bC0zLjYtMjguNCAyMi4zLTE1LjUgNi4xIDI4LjdMNTkgMjA2LjV6bS0zMC42IDE2LjZsMjAuOC0xMi44IDMuMyAzMy40LTIyLjkgMTItMS4yLTMyLjZ6TTEuNCAyNjhsMTkuMi0xMC4yLjQgMzguMi0yMSA4LjhMMS40IDI2OHptNTkuMSA1OS4zbC0yOC4zIDguMy0xLjYtNDYuOCAyNS4xLTEwLjcgNC44IDQ5LjJ6TTk5IDI2My4ybC0zMS4xIDEzLTUuMi00MC44TDkwLjEgMjIxbDguOSA0Mi4yek0xMjMuMiAzNzdsLTQxLjYgNS45LTguMS02My41IDM1LjItMTAuOCAxNC41IDY4LjR6bTI4LjUtMTM5LjlsMjEuMiA1Ny4xLTQ2LjIgMTMuNi0xMy43LTU0LjEgMzguNy0xNi42em04NS43IDIzMC41bC03MC45LTMuMy0yNC4zLTk1LjggNTUuMi04LjYgNDAgMTA3Ljd6bS04NC45LTI3OS43bDQyLjItMjIuNCAyOCA0NS45LTUwLjggMjEuMy0xOS40LTQ0Ljh6bTQxIDk0LjlsNjEuMy0xOC43IDUyLjggODYuNi03OS44IDExLjMtMzQuMy03OS4yem01MS40LTg1LjZsNjcuMy0yOC44IDY1LjUgNjUuNC04OC42IDI2LjItNDQuMi02Mi44elwiXVxufTtcbnZhciBmYVNxdWFyZVhpbmcgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXhpbmcnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInhpbmctc3F1YXJlXCJdLCBcImYxNjlcIiwgXCJNNDQ4IDk2YzAtMzUuMy0yOC43LTY0LTY0LTY0SDY0QzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0SDM4NGMzNS4zIDAgNjQtMjguNyA2NC02NFY5NnpNOTMuOCAzMjAuMmMtNS41IDAtOC43LTUuMy02LTEwLjNsNDkuMy04Ni43Yy4xIDAgLjEtLjEgMC0uMmwtMzEuNC01NGMtMy01LjYgLjItMTAuMSA2LTEwLjFoNDYuNmM1LjIgMCA5LjUgMi45IDEyLjkgOC43bDMxLjkgNTUuM2MtMS4zIDIuMy0xOCAzMS43LTUwLjEgODguMmMtMy41IDYuMi03LjcgOS4xLTEyLjYgOS4xSDkzLjh6bTE2My41LTMzLjR2LjJsNjUuNSAxMTljMi44IDUuMSAuMSAxMC4xLTYgMTAuMUgyNzAuMmMtNS41IDAtOS43LTIuOS0xMi45LTguN2wtNjYtMTIwLjNjMS44LTMuMiAyMi45LTQwLjQgNjMuMy0xMTEuNmMxMS43LTIwLjcgMjUuMS00NC4zIDQwLjEtNzAuOGMzLjMtNS44IDcuNC04LjcgMTIuNS04LjdoNDYuOWM1LjctLjEgOC44IDQuNyA2IDEwTDI1Ny4zIDI4Ni44elwiXVxufTtcbnZhciBmYVhpbmdTcXVhcmUgPSBmYVNxdWFyZVhpbmc7XG52YXIgZmFCYW5kY2FtcCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdiYW5kY2FtcCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjJkNVwiLCBcIk0yNTYsOEMxMTksOCw4LDExOSw4LDI1NlMxMTksNTA0LDI1Niw1MDQsNTA0LDM5Myw1MDQsMjU2LDM5Myw4LDI1Niw4Wm00OC4yLDMyNi4xaC0xODFMMjA3LjksMTc4aDE4MVpcIl1cbn07XG52YXIgZmFXcGZvcm1zID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dwZm9ybXMnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYyOThcIiwgXCJNNDQ4IDc1LjJ2MzYxLjdjMCAyNC4zLTE5IDQzLjItNDMuMiA0My4ySDQzLjJDMTkuMyA0ODAgMCA0NjEuNCAwIDQzNi44Vjc1LjJDMCA1MS4xIDE4LjggMzIgNDMuMiAzMmgzNjEuN2MyNCAwIDQzLjEgMTguOCA0My4xIDQzLjJ6bS0zNy4zIDM2MS42Vjc1LjJjMC0zLTIuNi01LjgtNS44LTUuOGgtOS4zTDI4NS4zIDE0NCAyMjQgOTQuMSAxNjIuOCAxNDQgNTIuNSA2OS4zaC05LjNjLTMuMiAwLTUuOCAyLjgtNS44IDUuOHYzNjEuN2MwIDMgMi42IDUuOCA1LjggNS44aDM2MS43YzMuMi4xIDUuOC0yLjcgNS44LTUuOHpNMTUwLjIgMTg2djM3SDc2Ljd2LTM3aDczLjV6bTAgNzQuNHYzNy4zSDc2Ljd2LTM3LjNoNzMuNXptMTEuMS0xNDcuM2w1NC00My43SDk2LjhsNjQuNSA0My43em0yMTAgNzIuOXYzN2gtMTk2di0zN2gxOTZ6bTAgNzQuNHYzNy4zaC0xOTZ2LTM3LjNoMTk2em0tODQuNi0xNDcuM2w2NC41LTQzLjdIMjMyLjhsNTMuOSA0My43ek0zNzEuMyAzMzV2MzcuM2gtOTkuNFYzMzVoOTkuNHpcIl1cbn07XG52YXIgZmFDbG91ZHZlcnNpZnkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY2xvdWR2ZXJzaWZ5JyxcbiAgaWNvbjogWzYxNiwgNTEyLCBbXSwgXCJmMzg1XCIsIFwiTTE0OC42IDMwNGM4LjIgNjguNSA2Ny40IDExNS41IDE0NiAxMTEuMyA1MS4yIDQzLjMgMTM2LjggNDUuOCAxODYuNC01LjYgNjkuMiAxLjEgMTE4LjUtNDQuNiAxMzEuNS05OS41IDE0LjgtNjIuNS0xOC4yLTEzMi41LTkyLjEtMTU1LjEtMzMtODguMS0xMzEuNC0xMDEuNS0xODYuNS04NS01Ny4zIDE3LjMtODQuMyA1My4yLTk5LjMgMTA5LjctNy44IDIuNy0yNi41IDguOS00NSAyNC4xIDExLjcgMCAxNS4yIDguOSAxNS4yIDE5LjV2MjAuNGMwIDEwLjctOC43IDE5LjUtMTkuNSAxOS41aC0yMC4yYy0xMC43IDAtMTkuNS02LTE5LjUtMTYuN1YyNDBIOTguOEM5NSAyNDAgODggMjQ0LjMgODggMjUxLjl2NDAuNGMwIDYuNCA1LjMgMTEuOCAxMS43IDExLjhoNDguOXptMjI3LjQgOGMtMTAuNyA0Ni4zIDIxLjcgNzIuNCA1NS4zIDg2LjhDMzI0LjEgNDMyLjYgMjU5LjcgMzQ4IDI5NiAyODhjLTMzLjIgMjEuNi0zMy43IDcxLjItMjkuMiA5Mi45LTE3LjktMTIuNC01My44LTMyLjQtNTcuNC03OS44LTMtMzkuOSAyMS41LTc1LjcgNTctOTMuOUMyOTcgMTkxLjQgMzY5LjkgMTk4LjcgNDAwIDI0OGMtMTQuMS00OC01My44LTcwLjEtMTAxLjgtNzQuOCAzMC45LTMwLjcgNjQuNC01MC4zIDExNC4yLTQzLjcgNjkuOCA5LjMgMTMzLjIgODIuOCA2Ny43IDE1MC41IDM1LTE2LjMgNDguNy01NC40IDQ3LjUtNzYuOWwxMC41IDE5LjZjMTEuOCAyMiAxNS4yIDQ3LjYgOS40IDcyLTkuMiAzOS00MC42IDY4LjgtNzkuNyA3Ni41LTMyLjEgNi4zLTgzLjEtNS4xLTkxLjgtNTkuMnpNMTI4IDIwOEg4OC4yYy04LjkgMC0xNi4yLTcuMy0xNi4yLTE2LjJ2LTM5LjZjMC04LjkgNy4zLTE2LjIgMTYuMi0xNi4ySDEyOGM4LjkgMCAxNi4yIDcuMyAxNi4yIDE2LjJ2MzkuNmMwIDguOS03LjMgMTYuMi0xNi4yIDE2LjJ6TTEwLjEgMTY4QzQuNSAxNjggMCAxNjMuNSAwIDE1Ny45di0yNy44YzAtNS42IDQuNS0xMC4xIDEwLjEtMTAuMWgyNy43YzUuNSAwIDEwLjEgNC41IDEwLjEgMTAuMXYyNy44YzAgNS42LTQuNSAxMC4xLTEwLjEgMTAuMUgxMC4xek0xNjggMTQyLjd2LTIxLjRjMC01LjEgNC4yLTkuMyA5LjMtOS4zaDIxLjRjNS4xIDAgOS4zIDQuMiA5LjMgOS4zdjIxLjRjMCA1LjEtNC4yIDkuMy05LjMgOS4zaC0yMS40Yy01LjEgMC05LjMtNC4yLTkuMy05LjN6TTU2IDIzNS41djI1YzAgNi4zLTUuMSAxMS41LTExLjQgMTEuNUgxOS40QzEzLjEgMjcyIDggMjY2LjggOCAyNjAuNXYtMjVjMC02LjMgNS4xLTExLjUgMTEuNC0xMS41aDI1LjFjNi40IDAgMTEuNSA1LjIgMTEuNSAxMS41elwiXVxufTtcbnZhciBmYVVzcHMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndXNwcycsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjdlMVwiLCBcIk00NjAuMyAyNDEuN2MyNS44LTQxLjMgMTUuMi00OC44LTExLjctNDguOGgtMjdjLS4xIDAtMS41LTEuNC0xMC45IDgtMTEuMiA1LjYtMzcuOSA2LjMtMzcuOSA4LjcgMCA0LjUgNzAuMy0zLjEgODguMSAwIDkuNSAxLjUtMS41IDIwLjQtNC40IDMyLS41IDQuNSAyLjQgMi4zIDMuOC4xem0tMTEyLjEgMjIuNmM2NC0yMS4zIDk3LjMtMjMuOSAxMDItMjYuMiA0LjQtMi45LTQuNC02LjYtMjYuMi01LjgtNTEuNyAyLjItMTM3LjYgMzcuMS0xNzIuNiA1My45bC0zMC43LTkzLjNoMTk2LjZjLTIuNy0yOC4yLTE1Mi45LTIyLjYtMzM3LjktMjIuNkwyNyA0MTUuOGMxOTYuNC05Ny4zIDI1OC45LTEzMC4zIDMyMS4yLTE1MS41ek05NC43IDk2YzI1My4zIDUzLjcgMzMwIDY1LjcgMzMyLjEgODUuMiAzNi40IDAgNDUuOSAwIDUyLjQgNi42IDIxLjEgMTkuNy0xNC42IDY3LjctMTQuNiA2Ny43LTQuNCAyLjktNDA2LjQgMTYwLjItNDA2LjQgMTYwLjJoNDIzLjFMNTQ5IDk2elwiXVxufTtcbnZhciBmYU1lZ2Fwb3J0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ21lZ2Fwb3J0JyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNWEzXCIsIFwiTTIxNC41IDIwOS42djY2LjJsMzMuNSAzMy41IDMzLjMtMzMuM3YtNjYuNGwtMzMuNC0zMy40ek0yNDggOEMxMTEgOCAwIDExOSAwIDI1NnMxMTEgMjQ4IDI0OCAyNDggMjQ4LTExMSAyNDgtMjQ4UzM4NSA4IDI0OCA4em0xNDUuMSA0MTQuNEwzNjcgNDQxLjZsLTI2LTE5LjJ2LTY1LjVsLTMzLjQtMzMuNC0zMy40IDMzLjR2NjUuNUwyNDggNDQxLjZsLTI2LjEtMTkuMnYtNjUuNWwtMzMuNC0zMy40LTMzLjUgMzMuNHY2NS41bC0yNi4xIDE5LjItMjYuMS0xOS4ydi04N2w1OS41LTU5LjVWMTg4bDU5LjUtNTkuNVY1Mi45bDI2LjEtMTkuMkwyNzQgNTIuOXY3NS42bDU5LjUgNTkuNXY4Ny42bDU5LjcgNTkuN3Y4Ny4xelwiXVxufTtcbnZhciBmYU1hZ2VudG8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWFnZW50bycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNjNFwiLCBcIk00NDUuNyAxMjcuOVYzODRsLTYzLjQgMzYuNVYxNjQuN0wyMjMuOCA3My4xIDY1LjIgMTY0LjdsLjQgMjU1LjlMMi4zIDM4NFYxMjguMUwyMjQuMiAwbDIyMS41IDEyNy45ek0yNTUuNiA0MjAuNUwyMjQgNDM4LjlsLTMxLjgtMTguMnYtMjU2bC02My4zIDM2LjYuMSAyNTUuOSA5NC45IDU0LjkgOTUuMS01NC45di0yNTZsLTYzLjQtMzYuNnYyNTUuOXpcIl1cbn07XG52YXIgZmFTcG90aWZ5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Nwb3RpZnknLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYxYmNcIiwgXCJNMjQ4IDhDMTExLjEgOCAwIDExOS4xIDAgMjU2czExMS4xIDI0OCAyNDggMjQ4IDI0OC0xMTEuMSAyNDgtMjQ4UzM4NC45IDggMjQ4IDh6bTEwMC43IDM2NC45Yy00LjIgMC02LjgtMS4zLTEwLjctMy42LTYyLjQtMzcuNi0xMzUtMzkuMi0yMDYuNy0yNC41LTMuOSAxLTkgMi42LTExLjkgMi42LTkuNyAwLTE1LjgtNy43LTE1LjgtMTUuOCAwLTEwLjMgNi4xLTE1LjIgMTMuNi0xNi44IDgxLjktMTguMSAxNjUuNi0xNi41IDIzNyAyNi4yIDYuMSAzLjkgOS43IDcuNCA5LjcgMTYuNXMtNy4xIDE1LjQtMTUuMiAxNS40em0yNi45LTY1LjZjLTUuMiAwLTguNy0yLjMtMTIuMy00LjItNjIuNS0zNy0xNTUuNy01MS45LTIzOC42LTI5LjQtNC44IDEuMy03LjQgMi42LTExLjkgMi42LTEwLjcgMC0xOS40LTguNy0xOS40LTE5LjRzNS4yLTE3LjggMTUuNS0yMC43YzI3LjgtNy44IDU2LjItMTMuNiA5Ny44LTEzLjYgNjQuOSAwIDEyNy42IDE2LjEgMTc3IDQ1LjUgOC4xIDQuOCAxMS4zIDExIDExLjMgMTkuNy0uMSAxMC44LTguNSAxOS41LTE5LjQgMTkuNXptMzEtNzYuMmMtNS4yIDAtOC40LTEuMy0xMi45LTMuOS03MS4yLTQyLjUtMTk4LjUtNTIuNy0yODAuOS0yOS43LTMuNiAxLTguMSAyLjYtMTIuOSAyLjYtMTMuMiAwLTIzLjMtMTAuMy0yMy4zLTIzLjYgMC0xMy42IDguNC0yMS4zIDE3LjQtMjMuOSAzNS4yLTEwLjMgNzQuNi0xNS4yIDExNy41LTE1LjIgNzMgMCAxNDkuNSAxNS4yIDIwNS40IDQ3LjggNy44IDQuNSAxMi45IDEwLjcgMTIuOSAyMi42IDAgMTMuNi0xMSAyMy4zLTIzLjIgMjMuM3pcIl1cbn07XG52YXIgZmFPcHRpbk1vbnN0ZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnb3B0aW4tbW9uc3RlcicsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjIzY1wiLCBcIk01NzIuNiA0MjEuNGM1LjYtOS41IDQuNy0xNS4yLTUuNC0xMS42LTMtNC45LTctOS41LTExLjEtMTMuOCAyLjktOS43LS43LTE0LjItMTAuOC05LjItNC42LTMuMi0xMC4zLTYuNS0xNS45LTkuMiAwLTE1LjEtMTEuNi0xMS42LTE3LjYtNS43LTEwLjQtMS41LTE4LjctLjMtMjYuOCA1LjcuMy02LjUuMy0xMyAuMy0xOS43IDEyLjYgMCA0MC4yLTExIDQ1LjktMzYuMiAxLjQtNi44IDEuNi0xMy44LS4zLTIxLjktMy0xMy41LTE0LjMtMjEuMy0yNS4xLTI1LjctLjgtNS45LTcuNi0xNC4zLTE0LjktMTUuOXMtMTIuNCA0LjktMTQuMSAxMC4zYy04LjUgMC0xOS4yIDIuOC0yMS4xIDguNC01LjQtLjUtMTEuMS0xLjQtMTYuOC0xLjkgMi43LTEuOSA1LjQtMy41IDguNC00LjYgNS40LTkuMiAxNC42LTExLjQgMjUuNy0xMS42VjI1NmMxOS41LS41IDQzLTUuOSA1My44LTE4LjEgMTIuNy0xMy44IDE0LjYtMzcuMyAxMi40LTU1LjEtMi40LTE3LjMtOS43LTM3LjYtMjQuNi00OC4xLTguNC01LjktMjEuNi0uOC0yMi43IDkuNS0yLjIgMTkuNiAxLjIgMzAtMzguNiAyNS4xLTEwLjMtMjMuOC0yNC42LTQ0LjYtNDIuNy02MEMzNDEgNDkuNiAyNDIuOSA1NS41IDE2Ni40IDcxLjdjMTkuNyA0LjYgNDEuMSA4LjYgNTkuNyAxNi41LTI2LjIgMi40LTUyLjcgMTEuMy03Ni4yIDIzLjItMzIuOCAxNy00NCAyOS45LTU2LjcgNDIuNCAxNC45LTIuMiAyOC45LTUuMSA0My44LTMuOC05LjcgNS40LTE4LjQgMTIuMi0yNi41IDIwLTI1LjguOS0yMy44LTUuMy0yNi4yLTI1LjktMS4xLTEwLjUtMTQuMy0xNS40LTIyLjctOS43LTI4LjEgMTkuOS0zMy41IDc5LjktMTIuMiAxMDMuNSAxMC44IDEyLjIgMzUuMSAxNy4zIDU0LjkgMTcuOC0uMyAxLjEtLjMgMS45LS4zIDIuNyAxMC44LjUgMTkuNSAyLjcgMjQuNiAxMS42IDMgMS4xIDUuNyAyLjcgOC4xIDQuNi01LjQuNS0xMS4xIDEuNC0xNi41IDEuOS0zLjMtNi42LTEzLjctOC4xLTIxLjEtOC4xLTEuNi01LjctNi41LTEyLjItMTQuMS0xMC4zLTYuOCAxLjktMTQuMSAxMC0xNC45IDE1LjktMjIuNSA5LjUtMzAuMSAyNi44LTI1LjEgNDcuNiA1LjMgMjQuOCAzMyAzNi4yIDQ1LjkgMzYuMnYxOS43Yy02LjYtNS0xNC4zLTcuNS0yNi44LTUuNy01LjUtNS41LTE3LjMtMTAuMS0xNy4zIDUuNy01LjkgMi43LTExLjQgNS45LTE1LjkgOS4yLTkuOC00LjktMTMuNi0xLjctMTEuMSA5LjItNC4xIDQuMy03LjggOC42LTExLjEgMTMuOC0xMC4yLTMuNy0xMSAyLjItNS40IDExLjYtMS4xIDMuNS0xLjYgNy0xLjkgMTAuOC0uNSAzMS42IDQ0LjYgNjQgNzMuNSA2NS4xIDE3LjMuNSAzNC42LTguNCA0My0yMy41IDExMy4yIDQuOSAyMjYuNyA0LjEgMzQwLjIgMCA4LjEgMTUuMSAyNS40IDI0LjMgNDIuNyAyMy41IDI5LjItMS4xIDc0LjMtMzMuNSA3My41LTY1LjEuMi0zLjctLjctNy4yLTEuNy0xMC43em0tNzMuOC0yNTRjMS4xLTMgMi40LTguNCAyLjQtMTQuNiAwLTUuOSA2LjgtOC4xIDE0LjEtLjggMTEuMSAxMS42IDE0LjkgNDAuNSAxMy44IDUxLjEtNC4xLTEzLjYtMTMtMjktMzAuMy0zNS43em0tNC42IDYuN2MxOS41IDYuMiAyOC42IDI3LjYgMjkuNyA0OC45LTEuMSAyLjctMyA1LjQtNC45IDcuNi01LjcgNS45LTE1LjQgMTAtMjYuMiAxMi4yIDQuMy0yMS4zLjMtNDcuMy0xMi43LTYzIDQuOS0uOCAxMC45LTIuNCAxNC4xLTUuN3ptLTI0LjEgNi44YzEzLjggMTEuOSAyMCAzOS4yIDE0LjEgNjMuNS00LjEuNS04LjEuOC0xMS42LjgtMS45LTIxLjktNi44LTQ0LTE0LjMtNjQuNiAzLjcuMyA4LjEuMyAxMS44LjN6TTQ3LjUgMjAzYy0xLjEtMTAuNSAyLjQtMzkuNSAxMy44LTUxLjEgNy03LjMgMTQuMS01LjEgMTQuMS44IDAgNi4yIDEuNCAxMS42IDIuNCAxNC42LTE3LjMgNi44LTI2LjIgMjIuMi0zMC4zIDM1Ljd6bTkuNyAyNy42Yy0xLjktMi4yLTMuNS00LjktNC45LTcuNiAxLjQtMjEuMyAxMC4zLTQyLjcgMjkuNy00OC45IDMuMiAzLjIgOS4yIDQuOSAxNC4xIDUuNy0xMyAxNS43LTE3IDQxLjYtMTIuNyA2My0xMC44LTIuMi0yMC41LTYtMjYuMi0xMi4yem00Ny45IDE0LjZjLTQuMSAwLTguMS0uMy0xMi43LS44LTQuNi0xOC42LTEuOS0zOC45IDUuNC01M3YuM2wxMi4yLTUuMWM0LjktMS45IDkuNy0zLjggMTQuOS00LjktMTAuNyAxOS43LTE3LjQgNDEuMy0xOS44IDYzLjV6bTE4NC0xNjIuN2M0MS45IDAgNzYuMiAzNCA3Ni4yIDc1LjkgMCA0Mi4yLTM0LjMgNzYuMi03Ni4yIDc2LjJzLTc2LjItMzQtNzYuMi03Ni4yYzAtNDEuOCAzNC4zLTc1LjkgNzYuMi03NS45em0xMTUuNiAxNzQuM2MtLjMgMTcuOC03IDQ4LjktMjMgNTctMTMuMiA2LjYtNi41LTcuNS0xNi41LTU4LjEgMTMuMy4zIDI2LjYuMyAzOS41IDEuMXptLTU0LTEuNmMuOCA0LjkgMy44IDQwLjMtMS42IDQxLjktMTEuNiAzLjUtNDAgNC4zLTUxLjEtMS4xLTQuMS0zLTQuNi0zNS45LTQuMy00MS4xdi4zYzE4LjktLjMgMzguMS0uMyA1NyAwek0yNzguMyAzMDljLTEzIDMuNS00MS42IDQuMS01NC42LTEuNi02LjUtMi43LTMuOC00Mi40LTEuOS01MS42IDE5LjItLjUgMzguNC0uNSA1Ny44LS44di4zYzEuMSA4LjMgMy4zIDUxLjItMS4zIDUzLjd6bS0xMDYuNS01MS4xYzEyLjItLjggMjQuNi0xLjQgMzYuOC0xLjYtMi40IDE1LjQtMyA0My41LTQuOSA1Mi4yLTEuMSA2LjgtNC4zIDYuOC05LjcgNC4zLTIxLjktOS44LTI3LjYtMzUuMi0yMi4yLTU0Ljl6bS0zNS40IDMxLjNjNy44LTEuMSAxNS43LTEuOSAyMy41LTIuNyAxLjYgNi4yIDMuOCAxMS45IDcgMTcuNiAxMCAxNyA0NCAzNS43IDQ1LjEgNyA2LjIgMTQuOSA0MC44IDEyLjIgNTQuOSAxMC44IDE1LjctMS40IDIzLjgtMS40IDI2LjgtMTQuMyAxMi40IDQuMyAzMC44IDQuMSA0NCAzIDExLjMtLjggMjAuOC0uNSAyNC42LTguOSAxLjEgNS4xIDEuOSAxMS42IDQuNiAxNi44IDEwLjggMjEuMyAzNy4zIDEuNCA0Ni44LTMxLjYgOC42LjggMTcuNiAxLjkgMjYuNSAyLjctLjQgMS4zLTMuOCA3LjMgNy4zIDExLjYtNDcuNiA0Ny05NS43IDg3LjgtMTYzLjIgMTA3LTYzLjItMjAuOC0xMTIuMS01OS41LTE1NS45LTEwNi41IDkuNi0zLjQgMTAuNC04LjggOC0xMi41em0tMjEuNiAxNzIuNWMtMy44IDE3LjgtMjEuOSAyOS43LTM5LjcgMjguOS0xOS4yLS44LTQ2LjUtMTctNTkuMi0zNi41LTIuNy0zMS4xIDQzLjgtNjEuMyA2Ni4yLTU0LjYgMTQuOSA0LjMgMjcuOCAzMC44IDMzLjUgNTQgMCAzLS4zIDUuNy0uOCA4LjJ6bS04LjctNjZjLS41LTEzLjUtLjUtMjctLjMtNDAuNWguM2MyLjctMS42IDUuNy0zLjggNy44LTYuNSA2LjUtMS42IDEzLTUuMSAxNS4xLTkuMiAzLjMtNy4xLTctNy41LTUuNC0xMi40IDIuNy0xLjEgNS43LTIuMiA3LjgtMy41IDI5LjIgMjkuMiA1OC42IDU2LjUgOTcuMyA3Ny0zNi44IDExLjMtNzIuNCAyNy42LTEwNS45IDQ3LTEuMi0xOC42LTcuNy0zNS45LTE2LjctNTEuOXptMzM3LjYgNjQuNmMtMTAzIDMuNS0yMDYuMiA0LjEtMzA5LjQgMCAwIC4zIDAgLjMtLjMuM3YtLjNoLjNjMzUuMS0yMS42IDcyLjItMzkuMiAxMTIuNC01MC44IDExLjYgNS4xIDIzIDkuNSAzNC45IDEzLjIgMi4yLjggMi4yLjggNC4zIDAgMTQuMy00LjEgMjguNC05LjIgNDIuMi0xNS40IDQxLjUgMTEuNyA3OC44IDMxLjcgMTE1LjYgNTN6bTEwLjUtMTIuNGMtMzUuOS0xOS41LTczLTM1LjktMTExLjktNDcuNiAzOC4xLTIwIDcxLjktNDcuMyAxMDMuNS03Ni43IDIuMiAxLjQgNC42IDIuNCA3LjYgMy4yIDAgLjguMyAxLjkuNSAyLjQtNC42IDIuNy03LjggNi4yLTUuOSAxMC4zIDIuMiAzLjggOC42IDcuNiAxNS4xIDguOSAyLjQgMi43IDUuMSA1LjEgOC4xIDYuOCAwIDEzLjgtLjMgMjcuNi0uOCA0MS4zbC4zLS4zYy05LjMgMTUuOS0xNS41IDM3LTE2LjUgNTEuN3ptMTA1LjkgNi4yYy0xMi43IDE5LjUtNDAgMzUuNy01OS4yIDM2LjUtMTkuMy45LTQwLjUtMTMuMi00MC41LTM3IDUuNy0yMy4yIDE4LjktNDkuNyAzMy41LTU0IDIyLjctNi45IDY5LjIgMjMuNCA2Ni4yIDU0LjV6TTM3Mi45IDc1LjJjLTMuOC03Mi4xLTEwMC44LTc5LjctMTI2LTIzLjUgNDQuNi0yNC4zIDkwLjMtMTUuNyAxMjYgMjMuNXpNNzQuOCA0MDcuMWMtMTUuNyAxLjYtNDkuNSAyNS40LTQ5LjUgNDMuMiAwIDExLjYgMTUuNyAxOS41IDMyLjIgMTQuOSAxMi4yLTMuMiAzMS4xLTE3LjYgMzUuOS0yNy4zIDYtMTEuNi0zLjctMzIuNy0xOC42LTMwLjh6bTIxNS45LTE3Ni4yYzI4LjYgMCA1MS45LTIxLjYgNTEuOS00OC40IDAtMzYuMS00MC41LTU4LjEtNzIuMi00NC4zIDkuNSAzIDE2LjUgMTEuNiAxNi41IDIxLjYgMCAyMy4zLTMzLjMgMzItNDYuNSAxMS4zLTcuMyAzNC4xIDE5LjQgNTkuOCA1MC4zIDU5Ljh6TTY4IDQ3NC4xYy41IDYuNSAxMi4yIDEyLjcgMjEuNiA5LjUgNi44LTIuNyAxNC42LTEwLjUgMTcuMy0xNi4yIDMtNy0xLjEtMjAtOS43LTE4LjQtOC45IDEuNi0yOS43IDE2LjctMjkuMiAyNS4xem00MzMuMi02N2MtMTQuOS0xLjktMjQuNiAxOS4yLTE4LjkgMzAuOCA0LjkgOS43IDI0LjEgMjQuMSAzNi4yIDI3LjMgMTYuNSA0LjYgMzIuMi0zLjIgMzIuMi0xNC45IDAtMTcuOC0zMy44LTQxLjYtNDkuNS00My4yek00NzguOCA0NDljLTguNC0xLjYtMTIuNCAxMS4zLTkuNSAxOC40IDIuNCA1LjcgMTAuMyAxMy41IDE3LjMgMTYuMiA5LjIgMy4yIDIxLjEtMyAyMS4zLTkuNS45LTguNC0yMC4yLTIzLjUtMjkuMS0yNS4xelwiXVxufTtcbnZhciBmYUZseSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmbHknLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImY0MTdcIiwgXCJNMTk3LjggNDI3LjhjMTIuOSAxMS43IDMzLjcgMzMuMyAzMy4yIDUwLjcgMCAuOC0uMSAxLjYtLjEgMi41LTEuOCAxOS44LTE4LjggMzEuMS0zOS4xIDMxLTI1LS4xLTM5LjktMTYuOC0zOC43LTM1LjggMS0xNi4yIDIwLjUtMzYuNyAzMi40LTQ3LjYgMi4zLTIuMSAyLjctMi43IDUuNi0zLjYgMy40IDAgMy45LjMgNi43IDIuOHpNMzMxLjkgNjcuM2MtMTYuMy0yNS43LTM4LjYtNDAuNi02My4zLTUyLjFDMjQzLjEgNC41IDIxNC0uMiAxOTIgMGMtNDQuMSAwLTcxLjIgMTMuMi04MS4xIDE3LjNDNTcuMyA0NS4yIDI2LjUgODcuMiAyOCAxNTguNmM3LjEgODIuMiA5NyAxNzYgMTU1LjggMjMzLjggMS43IDEuNiA0LjUgNC41IDYuMiA1LjFsMy4zLjFjMi4xLS43IDEuOC0uNSAzLjUtMi4xIDUyLjMtNDkuMiAxNDAuNy0xNDUuOCAxNTUuOS0yMTUuNyA3LTM5LjIgMy4xLTcyLjUtMjAuOC0xMTIuNXpNMTg2LjggMzUxLjljLTI4LTUxLjEtNjUuMi0xMzAuNy02OS4zLTE4OS0zLjQtNDcuNSAxMS40LTEzMS4yIDY5LjMtMTM2Ljd2MzI1Ljd6TTMyOC43IDE4MGMtMTYuNCA1Ni44LTc3LjMgMTI4LTExOC45IDE3MC4zQzIzNy42IDI5OC40IDI3NSAyMTcgMjc3IDE1OC40YzEuNi00NS45LTkuOC0xMDUuOC00OC0xMzEuNCA4OC44IDE4LjMgMTE1LjUgOTguMSA5OS43IDE1M3pcIl1cbn07XG52YXIgZmFBdmlhdG8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXZpYXRvJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNDIxXCIsIFwiTTEwNy4yIDI4My41bC0xOS00MS44SDM2LjFsLTE5IDQxLjhIMGw2Mi4yLTEzMS40IDYyLjIgMTMxLjRoLTE3LjJ6bS00NS05OC4xbC0xOS42IDQyLjVoMzkuMmwtMTkuNi00Mi41em0xMTIuNyAxMDIuNGwtNjIuMi0xMzEuNGgxNy4xbDQ1LjEgOTYgNDUuMS05NmgxN2wtNjIuMSAxMzEuNHptODAuNi00LjNWMTU2LjRIMjcxdjEyNy4xaC0xNS41em0yMDkuMS0xMTUuNnYxMTUuNmgtMTcuM1YxNjcuOWgtNDEuMnYtMTEuNWg5OS42djExLjVoLTQxLjF6TTY0MCAyMTguOGMwIDkuMi0xLjcgMTcuOC01LjEgMjUuOC0zLjQgOC04LjIgMTUuMS0xNC4yIDIxLjEtNiA2LTEzLjEgMTAuOC0yMS4xIDE0LjItOCAzLjQtMTYuNiA1LjEtMjUuOCA1LjFzLTE3LjgtMS43LTI1LjgtNS4xYy04LTMuNC0xNS4xLTguMi0yMS4xLTE0LjItNi02LTEwLjgtMTMtMTQuMi0yMS4xLTMuNC04LTUuMS0xNi42LTUuMS0yNS44czEuNy0xNy44IDUuMS0yNS44YzMuNC04IDguMi0xNS4xIDE0LjItMjEuMSA2LTYgMTMtOC40IDIxLjEtMTEuOSA4LTMuNCAxNi42LTUuMSAyNS44LTUuMXMxNy44IDEuNyAyNS44IDUuMWM4IDMuNCAxNS4xIDUuOCAyMS4xIDExLjkgNiA2IDEwLjcgMTMuMSAxNC4yIDIxLjEgMy40IDggNS4xIDE2LjYgNS4xIDI1Ljh6bS0xNS41IDBjMC03LjMtMS4zLTE0LTMuOS0yMC4zLTIuNi02LjMtNi4yLTExLjctMTAuOC0xNi4zLTQuNi00LjYtMTAtOC4yLTE2LjItMTAuOS02LjItMi43LTEyLjgtNC0xOS44LTRzLTEzLjYgMS4zLTE5LjggNGMtNi4yIDIuNy0xMS42IDYuMy0xNi4yIDEwLjktNC42IDQuNi04LjIgMTAtMTAuOCAxNi4zLTIuNiA2LjMtMy45IDEzLjEtMy45IDIwLjMgMCA3LjMgMS4zIDE0IDMuOSAyMC4zIDIuNiA2LjMgNi4yIDExLjcgMTAuOCAxNi4zIDQuNiA0LjYgMTAgOC4yIDE2LjIgMTAuOSA2LjIgMi43IDEyLjggNCAxOS44IDRzMTMuNi0xLjMgMTkuOC00YzYuMi0yLjcgMTEuNi02LjMgMTYuMi0xMC45IDQuNi00LjYgOC4yLTEwIDEwLjgtMTYuMyAyLjYtNi4zIDMuOS0xMy4xIDMuOS0yMC4zem0tOTQuOCA5Ni43di02LjNsODguOS0xMC0yNDIuOSAxMy40Yy42LTIuMiAxLjEtNC42IDEuNC03LjIuMy0yIC41LTQuMi42LTYuNWw2NC44LTguMS02NC45IDEuOWMwLS40LS4xLS43LS4xLTEuMS0yLjgtMTcuMi0yNS41LTIzLjctMjUuNS0yMy43bC0xLjEtMjYuM2gyMy44bDE5IDQxLjhoMTcuMUwzNDguNiAxNTJsLTYyLjIgMTMxLjRoMTcuMWwxOS00MS44aDIzLjZMMzQ1IDI2OHMtMjIuNyA2LjUtMjUuNSAyMy43Yy0uMS4zLS4xLjctLjEgMS4xbC02NC45LTEuOSA2NC44IDguMWMuMSAyLjMuMyA0LjQuNiA2LjUuMyAyLjYuOCA1IDEuNCA3LjJMNzguNCAyOTkuMmw4OC45IDEwdjYuM2MtNS45LjktMTAuNSA2LTEwLjUgMTIuMiAwIDYuOCA1LjYgMTIuNCAxMi40IDEyLjQgNi44IDAgMTIuNC01LjYgMTIuNC0xMi40IDAtNi4yLTQuNi0xMS4zLTEwLjUtMTIuMnYtNS44bDgwLjMgOXY1LjRjLTUuNyAxLjEtOS45IDYuMi05LjkgMTIuMSAwIDYuOCA1LjYgMTAuMiAxMi40IDEwLjIgNi44IDAgMTIuNC0zLjQgMTIuNC0xMC4yIDAtNi00LjMtMTEtOS45LTEyLjF2LTQuOWwyOC40IDMuMnYyMy43aC01LjlWMzYwaDUuOXYtNi42aDV2Ni42aDUuOXYtMTMuOGgtNS45VjMyM2wzOC4zIDQuM2M4LjEgMTEuNCAxOSAxMy42IDE5IDEzLjZsLS4xIDYuNy01LjEuMi0uMSAxMi4xaDQuMWwuMS01aDUuMmwuMSA1aDQuMWwtLjEtMTIuMS01LjEtLjItLjEtNi43czEwLjktMi4xIDE5LTEzLjZsMzguMy00LjN2MjMuMmgtNS45VjM2MGg1Ljl2LTYuNmg1djYuNmg1Ljl2LTEzLjhoLTUuOXYtMjMuN2wyOC40LTMuMnY0LjljLTUuNyAxLjEtOS45IDYuMi05LjkgMTIuMSAwIDYuOCA1LjYgMTAuMiAxMi40IDEwLjIgNi44IDAgMTIuNC0zLjQgMTIuNC0xMC4yIDAtNi00LjMtMTEtOS45LTEyLjF2LTUuNGw4MC4zLTl2NS44Yy01LjkuOS0xMC41IDYtMTAuNSAxMi4yIDAgNi44IDUuNiAxMi40IDEyLjQgMTIuNCA2LjggMCAxMi40LTUuNiAxMi40LTEyLjQtLjItNi4zLTQuNy0xMS40LTEwLjctMTIuM3ptLTIwMC44LTg3LjZsMTkuNi00Mi41IDE5LjYgNDIuNWgtMTcuOWwtMS43LTQwLjMtMS43IDQwLjNoLTE3Ljl6XCJdXG59O1xudmFyIGZhSXR1bmVzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2l0dW5lcycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNiNFwiLCBcIk0yMjMuNiA4MC4zQzEyOSA4MC4zIDUyLjUgMTU3IDUyLjUgMjUxLjVTMTI5IDQyMi44IDIyMy42IDQyMi44czE3MS4yLTc2LjcgMTcxLjItMTcxLjJjMC05NC42LTc2LjctMTcxLjMtMTcxLjItMTcxLjN6bTc5LjQgMjQwYy0zLjIgMTMuNi0xMy41IDIxLjItMjcuMyAyMy44LTEyLjEgMi4yLTIyLjIgMi44LTMxLjktNS0xMS44LTEwLTEyLTI2LjQtMS40LTM2LjggOC40LTggMjAuMy05LjYgMzgtMTIuOCAzLS41IDUuNi0xLjIgNy43LTMuNyAzLjItMy42IDIuMi0yIDIuMi04MC44IDAtNS42LTIuNy03LjEtOC40LTYuMS00IC43LTkxLjkgMTcuMS05MS45IDE3LjEtNSAxLjEtNi43IDIuNi02LjcgOC4zIDAgMTE2LjEuNSAxMTAuOC0xLjIgMTE4LjUtMi4xIDktNy42IDE1LjgtMTQuOSAxOS42LTguMyA0LjYtMjMuNCA2LjYtMzEuNCA1LjItMjEuNC00LTI4LjktMjguNy0xNC40LTQyLjkgOC40LTggMjAuMy05LjYgMzgtMTIuOCAzLS41IDUuNi0xLjIgNy43LTMuNyA1LTUuNy45LTEyNyAyLjYtMTMzLjcuNC0yLjYgMS41LTQuOCAzLjUtNi40IDIuMS0xLjcgNS44LTIuNyA2LjctMi43IDEwMS0xOSAxMTMuMy0yMS40IDExNS4xLTIxLjQgNS43LS40IDkgMyA5IDguNy0uMSAxNzAuNi40IDE2MS40LTEgMTY3LjZ6TTM0NS4yIDMySDEwMi44QzQ1LjkgMzIgMCA3Ny45IDAgMTM0Ljh2MjQyLjRDMCA0MzQuMSA0NS45IDQ4MCAxMDIuOCA0ODBoMjQyLjRjNTcgMCAxMDIuOC00NS45IDEwMi44LTEwMi44VjEzNC44QzQ0OCA3Ny45IDQwMi4xIDMyIDM0NS4yIDMyek0yMjMuNiA0NDRjLTEwNi4zIDAtMTkyLjUtODYuMi0xOTIuNS0xOTIuNVMxMTcuMyA1OSAyMjMuNiA1OXMxOTIuNSA4Ni4yIDE5Mi41IDE5Mi41UzMyOS45IDQ0NCAyMjMuNiA0NDR6XCJdXG59O1xudmFyIGZhQ3V0dGxlZmlzaCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjdXR0bGVmaXNoJyxcbiAgaWNvbjogWzQ0MCwgNTEyLCBbXSwgXCJmMzhjXCIsIFwiTTM0NCAzMDUuNWMtMTcuNSAzMS42LTU3LjQgNTQuNS05NiA1NC41LTU2LjYgMC0xMDQtNDcuNC0xMDQtMTA0czQ3LjQtMTA0IDEwNC0xMDRjMzguNiAwIDc4LjUgMjIuOSA5NiA1NC41IDEzLjctNTAuOSA0MS43LTkzLjMgODctMTE3LjhDMzg1LjcgMzkuMSAzMjAuNSA4IDI0OCA4IDExMSA4IDAgMTE5IDAgMjU2czExMSAyNDggMjQ4IDI0OGM3Mi41IDAgMTM3LjctMzEuMSAxODMtODAuNy00NS4zLTI0LjUtNzMuMy02Ni45LTg3LTExNy44elwiXVxufTtcbnZhciBmYUJsb2dnZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYmxvZ2dlcicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjM3Y1wiLCBcIk0xNjIuNCAxOTZjNC44LTQuOSA2LjItNS4xIDM2LjQtNS4xIDI3LjIgMCAyOC4xLjEgMzIuMSAyLjEgNS44IDIuOSA4LjMgNyA4LjMgMTMuNiAwIDUuOS0yLjQgMTAtNy42IDEzLjQtMi44IDEuOC00LjUgMS45LTMxLjEgMi4xLTE2LjQuMS0yOS41LS4yLTMxLjUtLjgtMTAuMy0yLjktMTQuMS0xNy43LTYuNi0yNS4zem02MS40IDk0LjVjLTUzLjkgMC01NS44LjItNjAuMiA0LjEtMy41IDMuMS01LjcgOS40LTUuMSAxMy45LjcgNC43IDQuOCAxMC4xIDkuMiAxMiAyLjIgMSAxNC4xIDEuNyA1Ni4zIDEuMmw0Ny45LS42IDkuMi0xLjVjOS01LjEgMTAuNS0xNy40IDMuMS0yNC40LTUuMy00LjctNS00LjctNjAuNC00Ljd6bTIyMy40IDEzMC4xYy0zLjUgMjguNC0yMyA1MC40LTUxLjEgNTcuNS03LjIgMS44LTkuNyAxLjktMTcyLjkgMS44LTE1Ny44IDAtMTY1LjktLjEtMTcyLTEuOC04LjQtMi4yLTE1LjYtNS41LTIyLjMtMTAtNS42LTMuOC0xMy45LTExLjgtMTctMTYuNC0zLjgtNS42LTguMi0xNS4zLTEwLTIyQy4xIDQyMyAwIDQyMC4zIDAgMjU2LjMgMCA5My4yIDAgODkuNyAxLjggODIuNiA4LjEgNTcuOSAyNy43IDM5IDUzIDMzLjRjNy4zLTEuNiAzMzIuMS0xLjkgMzQwLS4zIDIxLjIgNC4zIDM3LjkgMTcuMSA0Ny42IDM2LjQgNy43IDE1LjMgNy0xLjUgNy4zIDE4MC42LjIgMTE1LjggMCAxNjQuNS0uNyAxNzAuNXptLTg1LjQtMTg1LjJjLTEuMS01LTQuMi05LjYtNy43LTExLjUtMS4xLS42LTgtMS4zLTE1LjUtMS43LTEyLjQtLjYtMTMuOC0uOC0xNy44LTMuMS02LjItMy42LTcuOS03LjYtOC0xOC4zIDAtMjAuNC04LjUtMzkuNC0yNS4zLTU2LjUtMTItMTIuMi0yNS4zLTIwLjUtNDAuNi0yNS4xLTMuNi0xLjEtMTEuOC0xLjUtMzkuMi0xLjgtNDIuOS0uNS01Mi41LjQtNjcuMSA2LjItMjcgMTAuNy00Ni4zIDMzLjQtNTMuNCA2Mi40LTEuMyA1LjQtMS42IDE0LjItMS45IDY0LjMtLjQgNjIuOCAwIDcyLjEgNCA4NC41IDkuNyAzMC43IDM3LjEgNTMuNCA2NC42IDU4LjQgOS4yIDEuNyAxMjIuMiAyLjEgMTMzLjcuNSAyMC4xLTIuNyAzNS45LTEwLjggNTAuNy0yNS45IDEwLjctMTAuOSAxNy40LTIyLjggMjEuOC0zOC41IDMuMi0xMC45IDIuOS04OC40IDEuNy05My45elwiXVxufTtcbnZhciBmYUZsaWNrciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmbGlja3InLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxNmVcIiwgXCJNNDAwIDMySDQ4QzIxLjUgMzIgMCA1My41IDAgODB2MzUyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OFY4MGMwLTI2LjUtMjEuNS00OC00OC00OHpNMTQ0LjUgMzE5Yy0zNS4xIDAtNjMuNS0yOC40LTYzLjUtNjMuNXMyOC40LTYzLjUgNjMuNS02My41IDYzLjUgMjguNCA2My41IDYzLjUtMjguNCA2My41LTYzLjUgNjMuNXptMTU5IDBjLTM1LjEgMC02My41LTI4LjQtNjMuNS02My41czI4LjQtNjMuNSA2My41LTYzLjUgNjMuNSAyOC40IDYzLjUgNjMuNS0yOC40IDYzLjUtNjMuNSA2My41elwiXVxufTtcbnZhciBmYVZpYmVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3ZpYmVyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNDA5XCIsIFwiTTQ0NCA0OS45QzQzMS4zIDM4LjIgMzc5LjkuOSAyNjUuMy40YzAgMC0xMzUuMS04LjEtMjAwLjkgNTIuM0MyNy44IDg5LjMgMTQuOSAxNDMgMTMuNSAyMDkuNWMtMS40IDY2LjUtMy4xIDE5MS4xIDExNyAyMjQuOWguMWwtLjEgNTEuNnMtLjggMjAuOSAxMyAyNS4xYzE2LjYgNS4yIDI2LjQtMTAuNyA0Mi4zLTI3LjggOC43LTkuNCAyMC43LTIzLjIgMjkuOC0zMy43IDgyLjIgNi45IDE0NS4zLTguOSAxNTIuNS0xMS4yIDE2LjYtNS40IDExMC41LTE3LjQgMTI1LjctMTQyIDE1LjgtMTI4LjYtNy42LTIwOS44LTQ5LjgtMjQ2LjV6TTQ1Ny45IDI4N2MtMTIuOSAxMDQtODkgMTEwLjYtMTAzIDExNS4xLTYgMS45LTYxLjUgMTUuNy0xMzEuMiAxMS4yIDAgMC01MiA2Mi43LTY4LjIgNzktNS4zIDUuMy0xMS4xIDQuOC0xMS01LjcgMC02LjkuNC04NS43LjQtODUuNy0uMSAwLS4xIDAgMCAwLTEwMS44LTI4LjItOTUuOC0xMzQuMy05NC43LTE4OS44IDEuMS01NS41IDExLjYtMTAxIDQyLjYtMTMxLjYgNTUuNy01MC41IDE3MC40LTQzIDE3MC40LTQzIDk2LjkuNCAxNDMuMyAyOS42IDE1NC4xIDM5LjQgMzUuNyAzMC42IDUzLjkgMTAzLjggNDAuNiAyMTEuMXptLTEzOS04MC44Yy40IDguNi0xMi41IDkuMi0xMi45LjYtMS4xLTIyLTExLjQtMzIuNy0zMi42LTMzLjktOC42LS41LTcuOC0xMy40LjctMTIuOSAyNy45IDEuNSA0My40IDE3LjUgNDQuOCA0Ni4yem0yMC4zIDExLjNjMS00Mi40LTI1LjUtNzUuNi03NS44LTc5LjMtOC41LS42LTcuNi0xMy41LjktMTIuOSA1OCA0LjIgODguOSA0NC4xIDg3LjggOTIuNS0uMSA4LjYtMTMuMSA4LjItMTIuOS0uM3ptNDcgMTMuNGMuMSA4LjYtMTIuOSA4LjctMTIuOS4xLS42LTgxLjUtNTQuOS0xMjUuOS0xMjAuOC0xMjYuNC04LjUtLjEtOC41LTEyLjkgMC0xMi45IDczLjcuNSAxMzMgNTEuNCAxMzMuNyAxMzkuMnpNMzc0LjkgMzI5di4yYy0xMC44IDE5LTMxIDQwLTUxLjggMzMuM2wtLjItLjNjLTIxLjEtNS45LTcwLjgtMzEuNS0xMDIuMi01Ni41LTE2LjItMTIuOC0zMS0yNy45LTQyLjQtNDIuNC0xMC4zLTEyLjktMjAuNy0yOC4yLTMwLjgtNDYuNi0yMS4zLTM4LjUtMjYtNTUuNy0yNi01NS43LTYuNy0yMC44IDE0LjItNDEgMzMuMy01MS44aC4yYzkuMi00LjggMTgtMy4yIDIzLjkgMy45IDAgMCAxMi40IDE0LjggMTcuNyAyMi4xIDUgNi44IDExLjcgMTcuNyAxNS4yIDIzLjggNi4xIDEwLjkgMi4zIDIyLTMuNyAyNi42bC0xMiA5LjZjLTYuMSA0LjktNS4zIDE0LTUuMyAxNHMxNy44IDY3LjMgODQuMyA4NC4zYzAgMCA5LjEuOCAxNC01LjNsOS42LTEyYzQuNi02IDE1LjctOS44IDI2LjYtMy43IDE0LjcgOC4zIDMzLjQgMjEuMiA0NS44IDMyLjkgNyA1LjcgOC42IDE0LjQgMy44IDIzLjZ6XCJdXG59O1xudmFyIGZhU291bmRjbG91ZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzb3VuZGNsb3VkJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMWJlXCIsIFwiTTExMS40IDI1Ni4zbDUuOCA2NS01LjggNjguM2MtLjMgMi41LTIuMiA0LjQtNC40IDQuNHMtNC4yLTEuOS00LjItNC40bC01LjYtNjguMyA1LjYtNjVjMC0yLjIgMS45LTQuMiA0LjItNC4yIDIuMiAwIDQuMSAyIDQuNCA0LjJ6bTIxLjQtNDUuNmMtMi44IDAtNC43IDIuMi01IDVsLTUgMTA1LjYgNSA2OC4zYy4zIDIuOCAyLjIgNSA1IDUgMi41IDAgNC43LTIuMiA0LjctNWw1LjgtNjguMy01LjgtMTA1LjZjMC0yLjgtMi4yLTUtNC43LTV6bTI1LjUtMjQuMWMtMy4xIDAtNS4zIDIuMi01LjYgNS4zbC00LjQgMTMwIDQuNCA2Ny44Yy4zIDMuMSAyLjUgNS4zIDUuNiA1LjMgMi44IDAgNS4zLTIuMiA1LjMtNS4zbDUuMy02Ny44LTUuMy0xMzBjMC0zLjEtMi41LTUuMy01LjMtNS4zek03LjIgMjgzLjJjLTEuNCAwLTIuMiAxLjEtMi41IDIuNUwwIDMyMS4zbDQuNyAzNWMuMyAxLjQgMS4xIDIuNSAyLjUgMi41czIuMi0xLjEgMi41LTIuNWw1LjYtMzUtNS42LTM1LjZjLS4zLTEuNC0xLjEtMi41LTIuNS0yLjV6bTIzLjYtMjEuOWMtMS40IDAtMi41IDEuMS0yLjUgMi41bC02LjQgNTcuNSA2LjQgNTYuMWMwIDEuNyAxLjEgMi44IDIuNSAyLjhzMi41LTEuMSAyLjgtMi41bDcuMi01Ni40LTcuMi01Ny41Yy0uMy0xLjQtMS40LTIuNS0yLjgtMi41em0yNS4zLTExLjRjLTEuNyAwLTMuMSAxLjQtMy4zIDMuM0w0NyAzMjEuM2w1LjggNjUuOGMuMyAxLjcgMS43IDMuMSAzLjMgMy4xIDEuNyAwIDMuMS0xLjQgMy4xLTMuMWw2LjktNjUuOC02LjktNjguMWMwLTEuOS0xLjQtMy4zLTMuMS0zLjN6bTI1LjMtMi4yYy0xLjkgMC0zLjYgMS40LTMuNiAzLjZsLTUuOCA3MCA1LjggNjcuOGMwIDIuMiAxLjcgMy42IDMuNiAzLjZzMy42LTEuNCAzLjktMy42bDYuNC02Ny44LTYuNC03MGMtLjMtMi4yLTItMy42LTMuOS0zLjZ6bTI0MS40LTExMC45Yy0xLjEtLjgtMi44LTEuNC00LjItMS40LTIuMiAwLTQuMi44LTUuNiAxLjktMS45IDEuNy0zLjEgNC4yLTMuMyA2Ljd2LjhsLTMuMyAxNzYuNyAxLjcgMzIuNSAxLjcgMzEuN2MuMyA0LjcgNC4yIDguNiA4LjkgOC42czguNi0zLjkgOC42LTguNmwzLjktNjQuMi0zLjktMTc3LjVjLS40LTMtMi01LjgtNC41LTcuMnptLTI2LjcgMTUuM2MtMS40LS44LTIuOC0xLjQtNC40LTEuNHMtMy4xLjYtNC40IDEuNGMtMi4yIDEuNC0zLjYgMy45LTMuNiA2LjdsLS4zIDEuNy0yLjggMTYwLjhzMCAuMyAzLjEgNjUuNnYuM2MwIDEuNy42IDMuMyAxLjcgNC43IDEuNyAxLjkgMy45IDMuMSA2LjQgMy4xIDIuMiAwIDQuMi0xLjEgNS42LTIuNSAxLjctMS40IDIuNS0zLjMgMi41LTUuNmwuMy02LjcgMy4xLTU4LjYtMy4zLTE2Mi44Yy0uMy0yLjgtMS43LTUuMy0zLjktNi43em0tMTExLjQgMjIuNWMtMy4xIDAtNS44IDIuOC01LjggNi4xbC00LjQgMTQwLjYgNC40IDY3LjJjLjMgMy4zIDIuOCA1LjggNS44IDUuOCAzLjMgMCA1LjgtMi41IDYuMS01LjhsNS02Ny4yLTUtMTQwLjZjLS4yLTMuMy0yLjctNi4xLTYuMS02LjF6bTM3Ni43IDYyLjhjLTEwLjggMC0yMS4xIDIuMi0zMC42IDYuMS02LjQtNzAuOC02NS44LTEyNi40LTEzOC4zLTEyNi40LTE3LjggMC0zNSAzLjMtNTAuMyA5LjQtNi4xIDIuMi03LjggNC40LTcuOCA5LjJ2MjQ5LjdjMCA1IDMuOSA4LjYgOC42IDkuMmgyMTguM2M0My4zIDAgNzguNi0zNSA3OC42LTc4LjMuMS00My42LTM1LjItNzguOS03OC41LTc4Ljl6bS0yOTYuNy02MC4zYy00LjIgMC03LjUgMy4zLTcuOCA3LjhsLTMuMyAxMzYuNyAzLjMgNjUuNmMuMyA0LjIgMy42IDcuNSA3LjggNy41IDQuMiAwIDcuNS0zLjMgNy41LTcuNWwzLjktNjUuNi0zLjktMTM2LjdjLS4zLTQuNS0zLjMtNy44LTcuNS03Ljh6bS01My42LTcuOGMtMy4zIDAtNi40IDMuMS02LjQgNi43bC0zLjkgMTQ1LjMgMy45IDY2LjljLjMgMy42IDMuMSA2LjQgNi40IDYuNCAzLjYgMCA2LjQtMi44IDYuNy02LjRsNC40LTY2LjktNC40LTE0NS4zYy0uMy0zLjYtMy4xLTYuNy02LjctNi43em0yNi43IDMuNGMtMy45IDAtNi45IDMuMS02LjkgNi45TDIyNyAzMjEuM2wzLjkgNjYuNGMuMyAzLjkgMy4xIDYuOSA2LjkgNi45czYuOS0zLjEgNi45LTYuOWw0LjItNjYuNC00LjItMTQxLjdjMC0zLjktMy02LjktNi45LTYuOXpcIl1cbn07XG52YXIgZmFEaWdnID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2RpZ2cnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYxYTZcIiwgXCJNODEuNyAxNzIuM0gwdjE3NC40aDEzMi43Vjk2aC01MXY3Ni4zem0wIDEzMy40SDUwLjl2LTkyLjNoMzAuOHY5Mi4zem0yOTcuMi0xMzMuNHYxNzQuNGg4MS44djI4LjVoLTgxLjhWNDE2SDUxMlYxNzIuM0gzNzguOXptODEuOCAxMzMuNGgtMzAuOHYtOTIuM2gzMC44djkyLjN6bS0yMzUuNiA0MWg4Mi4xdjI4LjVoLTgyLjFWNDE2aDEzMy4zVjE3Mi4zSDIyNS4xdjE3NC40em01MS4yLTEzMy4zaDMwLjh2OTIuM2gtMzAuOHYtOTIuM3pNMTUzLjMgOTZoNTEuM3Y1MWgtNTEuM1Y5NnptMCA3Ni4zaDUxLjN2MTc0LjRoLTUxLjNWMTcyLjN6XCJdXG59O1xudmFyIGZhVGVuY2VudFdlaWJvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3RlbmNlbnQtd2VpYm8nLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYxZDVcIiwgXCJNNzIuMyA0OTUuOGMxLjQgMTkuOS0yNy42IDIyLjItMjkuNyAyLjlDMzEgMzY4LjggNzMuNyAyNTkuMiAxNDQgMTg1LjVjLTE1LjYtMzQgOS4yLTc3LjEgNTAuNi03Ny4xIDMwLjMgMCA1NS4xIDI0LjYgNTUuMSA1NS4xIDAgNDQtNDkuNSA3MC44LTg2LjkgNDUuMS02NS43IDcxLjMtMTAxLjQgMTY5LjgtOTAuNSAyODcuMnpNMTkyIC4xQzY2LjEuMS0xMi4zIDEzNC4zIDQzLjcgMjQyLjQgNTIuNCAyNTkuOCA3OSAyNDYuOSA3MCAyMjkgMjMuNyAxMzYuNCA5MSAyOS44IDE5MiAyOS44Yzc1LjQgMCAxMzYuOSA2MS40IDEzNi45IDEzNi45IDAgOTAuOC04Ni45IDE1My45LTE2Ny43IDEzMy4xLTE5LjEtNC4xLTI1LjYgMjQuNC02LjYgMjkuMSAxMTAuNyAyMy4yIDIwNC02MCAyMDQtMTYyLjNDMzU4LjYgNzQuNyAyODQgLjEgMTkyIC4xelwiXVxufTtcbnZhciBmYUxldHRlcmJveGQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGV0dGVyYm94ZCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTYyZFwiLCBcIk01MjEuMyAxMjhDNTg2LjkgMTI4IDY0MCAxODEuMSA2NDAgMjQ2LjZzLTUzLjEgMTE4LjYtMTE4LjcgMTE4LjZjLTQyLjUgMC03OS43LTIyLjMtMTAwLjctNTUuOGMxMS40LTE4LjIgMTgtMzkuNyAxOC02Mi44cy02LjYtNDQuNi0xOC02Mi44bDAgMCAuOC0xLjJjMjAuOC0zMi4zIDU2LjgtNTMuOSA5Ny45LTU0LjZsMiAwek0zMjAgMTI4YzQyLjUgMCA3OS43IDIyLjMgMTAwLjcgNTUuOGMtMTEuNCAxOC4yLTE4IDM5LjctMTggNjIuOHM2LjYgNDQuNiAxOCA2Mi44bDAgMC0uOCAxLjJjLTIwLjggMzIuMy01Ni44IDUzLjktOTcuOSA1NC42bC0yIDBjLTQyLjUgMC03OS43LTIyLjMtMTAwLjctNTUuOGMxMS40LTE4LjIgMTgtMzkuNyAxOC02Mi44cy02LjYtNDQuNi0xOC02Mi44bDAgMCAuOC0xLjJjMjAuOC0zMi4zIDU2LjgtNTMuOSA5Ny45LTU0LjZsMiAwem0tMjAxLjMgMGM0Mi41IDAgNzkuNyAyMi4zIDEwMC43IDU1LjhjLTExLjQgMTguMi0xOCAzOS43LTE4IDYyLjhzNi42IDQ0LjYgMTggNjIuOGwwIDAtLjggMS4yYy0yMC44IDMyLjMtNTYuOCA1My45LTk3LjkgNTQuNmwtMiAwQzUzLjEgMzY1LjEgMCAzMTIuMSAwIDI0Ni42UzUzLjEgMTI4IDExOC43IDEyOHpcIl1cbn07XG52YXIgZmFTeW1mb255ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N5bWZvbnknLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY4M2RcIiwgXCJNMjU2IDhDMTE5IDggOCAxMTkgOCAyNTZzMTExIDI0OCAyNDggMjQ4IDI0OC0xMTEgMjQ4LTI0OFMzOTMgOCAyNTYgOHptMTMzLjc0IDE0My41NGMtMTEuNDcuNDEtMTkuNC02LjQ1LTE5Ljc3LTE2Ljg3LS4yNy05LjE4IDYuNjgtMTMuNDQgNi41My0xOC44NS0uMjMtNi41NS0xMC4xNi02LjgyLTEyLjg3LTYuNjctMzkuNzggMS4yOS00OC41OSA1Ny01OC44OSAxMTMuODUgMjEuNDMgMy4xNSAzNi42NS0uNzIgNDUuMTQtNi4yMiAxMi03Ljc1LTMuMzQtMTUuNzItMS40Mi0yNC41NiA0LTE4LjE2IDMyLjU1LTE5IDMyIDUuMy0uMzYgMTcuODYtMjUuOTIgNDEuODEtNzcuNiAzNS43LTEwLjc2IDU5LjUyLTE4LjM1IDExNS01OC4yIDE2MS43Mi0yOSAzNC40Ni01OC40IDM5LjgyLTcxLjU4IDQwLjI2LTI0LjY1Ljg1LTQxLTEyLjMxLTQxLjU4LTI5Ljg0LS41Ni0xNyAxNC40NS0yNi4yNiAyNC4zMS0yNi41OSAyMS44OS0uNzUgMzAuMTIgMjUuNjcgMTQuODggMzQtMTIuMDkgOS43MS4xMSAxMi42MSAyLjA1IDEyLjU1IDEwLjQyLS4zNiAxNy4zNC01LjUxIDIyLjE4LTkgMjQtMjAgMzMuMjQtNTQuODYgNDUuMzUtMTE4LjM1IDguMTktNDkuNjYgMTctNzggMTguMjMtODItMTYuOTMtMTIuNzUtMjcuMDgtMjguNTUtNDkuODUtMzQuNzItMTUuNjEtNC4yMy0yNS4xMi0uNjMtMzEuODEgNy44My03LjkyIDEwLTUuMjkgMjMgMi4zNyAzMC43bDEyLjYzIDE0YzE1LjUxIDE3LjkzIDI0IDMxLjg3IDIwLjggNTAuNjItNS4wNiAyOS45My00MC43MiA1Mi45LTgyLjg4IDM5Ljk0LTM2LTExLjExLTQyLjctMzYuNTYtMzguMzgtNTAuNjIgNy41MS0yNC4xNSA0Mi4zNi0xMS43MiAzNC42MiAxMy42LTIuNzkgOC42LTQuOTIgOC42OC02LjI4IDEzLjA3LTQuNTYgMTQuNzcgNDEuODUgMjguNCA1MS0xLjM5IDQuNDctMTQuNTItNS4zLTIxLjcxLTIyLjI1LTM5Ljg1LTI4LjQ3LTMxLjc1LTE2LTY1LjQ5IDIuOTUtNzkuNjdDMjA0LjIzIDE0MC4xMyAyNTEuOTQgMTk3IDI2MiAyMDUuMjljMzcuMTctMTA5IDEwMC41My0xMDUuNDYgMTAyLjQzLTEwNS41MyAyNS4xNi0uODEgNDQuMTkgMTAuNTkgNDQuODMgMjguNjUuMjUgNy42OS00LjE3IDIyLjU5LTE5LjUyIDIzLjEzelwiXVxufTtcbnZhciBmYU1heGNkbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtYXhjZG4nLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYxMzZcIiwgXCJNNDYxLjEgNDQyLjdoLTk3LjRMNDE1LjYgMjAwYzIuMy0xMC4yLjktMTkuNS00LjQtMjUuNy01LTYuMS0xMy43LTkuNi0yNC4yLTkuNmgtNDkuM2wtNTkuNSAyNzhoLTk3LjRsNTkuNS0yNzhoLTgzLjRsLTU5LjUgMjc4SDBsNTkuNS0yNzgtNDQuNi05NS40SDM4N2MzOS40IDAgNzUuMyAxNi4zIDk4LjMgNDQuOSAyMy4zIDI4LjYgMzEuOCA2Ny40IDIzLjYgMTA1LjlsLTQ3LjggMjIyLjZ6XCJdXG59O1xudmFyIGZhRXRzeSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdldHN5JyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmMmQ3XCIsIFwiTTM4NCAzNDhjLTEuNzUgMTAuNzUtMTMuNzUgMTEwLTE1LjUgMTMyLTExNy44NzktNC4yOTktMjE5Ljg5NS00Ljc0My0zNjguNSAwdi0yNS41YzQ1LjQ1Ny04Ljk0OCA2MC42MjctOC4wMTkgNjEtMzUuMjUgMS43OTMtNzIuMzIyIDMuNTI0LTI0NC4xNDMgMC0zMjItMS4wMjktMjguNDYtMTIuMTMtMjYuNzY1LTYxLTM2di0yNS41YzczLjg4NiAyLjM1OCAyNTUuOTMzIDguNTUxIDM2Mi45OTktMy43NS0zLjUgMzguMjUtNy43NSAxMjYuNS03Ljc1IDEyNi41SDMzMkMzMjAuOTQ3IDExNS42NjUgMzEzLjI0MSA2OCAyNzcuMjUgNjhoLTEzN2MtMTAuMjUgMC0xMC43NSAzLjUtMTAuNzUgOS43NVYyNDEuNWM1OCAuNSA4OC41LTIuNSA4OC41LTIuNSAyOS43Ny0uOTUxIDI3LjU2LTguNTAyIDQwLjc1LTY1LjI1MWgyNS43NWMtNC40MDcgMTAxLjM1MS0zLjkxIDYxLjgyOS0xLjc1IDE2MC4yNUgyNTdjLTkuMTU1LTQwLjA4Ni05LjA2NS02MS4wNDUtMzkuNTAxLTYxLjUgMCAwLTIxLjUtMi04OC0ydjEzOWMwIDI2IDE0LjI1IDM4LjI1IDQ0LjI1IDM4LjI1SDI2M2M2My42MzYgMCA2Ni41NjQtMjQuOTk2IDk4Ljc1MS05OS43NUgzODR6XCJdXG59O1xudmFyIGZhRmFjZWJvb2tNZXNzZW5nZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZmFjZWJvb2stbWVzc2VuZ2VyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMzlmXCIsIFwiTTI1Ni41NSA4QzExNi41MiA4IDggMTEwLjM0IDggMjQ4LjU3YzAgNzIuMyAyOS43MSAxMzQuNzggNzguMDcgMTc3Ljk0IDguMzUgNy41MSA2LjYzIDExLjg2IDguMDUgNTguMjNBMTkuOTIgMTkuOTIgMCAwIDAgMTIyIDUwMi4zMWM1Mi45MS0yMy4zIDUzLjU5LTI1LjE0IDYyLjU2LTIyLjdDMzM3Ljg1IDUyMS44IDUwNCA0MjMuNyA1MDQgMjQ4LjU3IDUwNCAxMTAuMzQgMzk2LjU5IDggMjU2LjU1IDh6bTE0OS4yNCAxODUuMTNsLTczIDExNS41N2EzNy4zNyAzNy4zNyAwIDAgMS01My45MSA5LjkzbC01OC4wOC00My40N2ExNSAxNSAwIDAgMC0xOCAwbC03OC4zNyA1OS40NGMtMTAuNDYgNy45My0yNC4xNi00LjYtMTcuMTEtMTUuNjdsNzMtMTE1LjU3YTM3LjM2IDM3LjM2IDAgMCAxIDUzLjkxLTkuOTNsNTguMDYgNDMuNDZhMTUgMTUgMCAwIDAgMTggMGw3OC40MS01OS4zOGMxMC40NC03Ljk4IDI0LjE0IDQuNTQgMTcuMDkgMTUuNjJ6XCJdXG59O1xudmFyIGZhQXVkaWJsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhdWRpYmxlJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMzczXCIsIFwiTTY0MCAxOTkuOXY1NGwtMzIwIDIwMEwwIDI1NHYtNTRsMzIwIDIwMCAzMjAtMjAwLjF6bS0xOTQuNSA3Mmw0Ny4xLTI5LjRjLTM3LjItNTUuOC0xMDAuNy05Mi42LTE3Mi43LTkyLjYtNzIgMC0xMzUuNSAzNi43LTE3Mi42IDkyLjRoLjNjMi41LTIuMyA1LjEtNC41IDcuNy02LjcgODkuNy03NC40IDIxOS40LTU4LjEgMjkwLjIgMzYuM3ptLTIyMC4xIDE4LjhjMTYuOS0xMS45IDM2LjUtMTguNyA1Ny40LTE4LjcgMzQuNCAwIDY1LjIgMTguNCA4Ni40IDQ3LjZsNDUuNC0yOC40Yy0yMC45LTI5LjktNTUuNi00OS41LTk0LjgtNDkuNS0zOC45IDAtNzMuNCAxOS40LTk0LjQgNDl6TTEwMy42IDE2MS4xYzEzMS44LTEwNC4zIDMxOC4yLTc2LjQgNDE3LjUgNjIuMWwuNyAxIDQ4LjgtMzAuNEM1MTcuMSAxMTIuMSA0MjQuOCA1OC4xIDMxOS45IDU4LjFjLTEwMy41IDAtMTk2LjYgNTMuNS0yNTAuNSAxMzUuNiA5LjktMTAuNSAyMi43LTIzLjUgMzQuMi0zMi42em00NjcgMzIuN3pcIl1cbn07XG52YXIgZmFUaGlua1BlYWtzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3RoaW5rLXBlYWtzJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmNzMxXCIsIFwiTTQ2NS40IDQwOS40bDg3LjEtMTUwLjItMzItLjMtNTUuMSA5NUwyNTkuMiAwIDIzIDQwNy40bDMyIC4zTDI1OS4yIDU1LjZ6bS0zNTUuMy00NC4xaDMyLjFsMTE3LjQtMjAyLjVMNDYzIDUxMS45bDMyLjUuMS0yMzUuOC00MDQuNnpcIl1cbn07XG52YXIgZmFCaWxpYmlsaSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdiaWxpYmlsaScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTNkOVwiLCBcIk00ODguNiAxMDQuMUM1MDUuMyAxMjIuMiA1MTMgMTQzLjggNTExLjkgMTY5LjhWMzcyLjJDNTExLjUgMzk4LjYgNTAyLjcgNDIwLjMgNDg1LjQgNDM3LjNDNDY4LjIgNDU0LjMgNDQ2LjMgNDYzLjIgNDE5LjkgNDY0SDkyLjAyQzY1LjU3IDQ2My4yIDQzLjgxIDQ1NC4yIDI2Ljc0IDQzNi44QzkuNjgyIDQxOS40IC43NjY3IDM5Ni41IDAgMzY4LjJWMTY5LjhDLjc2NjcgMTQzLjggOS42ODIgMTIyLjIgMjYuNzQgMTA0LjFDNDMuODEgODcuNzUgNjUuNTcgNzguNzcgOTIuMDIgNzhIMTIxLjRMOTYuMDUgNTIuMTlDOTAuMyA0Ni40NiA4Ny40MiAzOS4xOSA4Ny40MiAzMC40Qzg3LjQyIDIxLjYgOTAuMyAxNC4zNCA5Ni4wNSA4LjYwM0MxMDEuOCAyLjg2OCAxMDkuMSAwIDExNy45IDBDMTI2LjcgMCAxMzQgMi44NjggMTM5LjggOC42MDNMMjEzLjEgNzhIMzAxLjFMMzc1LjYgOC42MDNDMzgxLjcgMi44NjggMzg5LjIgMCAzOTggMEM0MDYuOCAwIDQxNC4xIDIuODY4IDQxOS45IDguNjAzQzQyNS42IDE0LjM0IDQyOC41IDIxLjYgNDI4LjUgMzAuNEM0MjguNSAzOS4xOSA0MjUuNiA0Ni40NiA0MTkuOSA1Mi4xOUwzOTQuNiA3OEw0MjMuOSA3OEM0NTAuMyA3OC43NyA0NzEuOSA4Ny43NSA0ODguNiAxMDQuMUg0ODguNnpNNDQ5LjggMTczLjhDNDQ5LjQgMTY0LjIgNDQ2LjEgMTU2LjQgNDM5LjEgMTUwLjNDNDMzLjkgMTQ0LjIgNDI1LjEgMTQwLjkgNDE2LjQgMTQwLjVIOTYuMDVDODYuNDYgMTQwLjkgNzguNiAxNDQuMiA3Mi40NyAxNTAuM0M2Ni4zMyAxNTYuNCA2My4wNyAxNjQuMiA2Mi42OSAxNzMuOFYzNjguMkM2Mi42OSAzNzcuNCA2NS45NSAzODUuMiA3Mi40NyAzOTEuN0M3OC45OSAzOTguMiA4Ni44NSA0MDEuNSA5Ni4wNSA0MDEuNUg0MTYuNEM0MjUuNiA0MDEuNSA0MzMuNCAzOTguMiA0MzkuNyAzOTEuN0M0NDYgMzg1LjIgNDQ5LjQgMzc3LjQgNDQ5LjggMzY4LjJMNDQ5LjggMTczLjh6TTE4NS41IDIxNi41QzE5MS44IDIyMi44IDE5NS4yIDIzMC42IDE5NS42IDIzOS43VjI3M0MxOTUuMiAyODIuMiAxOTEuOSAyODkuOSAxODUuOCAyOTYuMkMxNzkuNiAzMDIuNSAxNzEuOCAzMDUuNyAxNjIuMiAzMDUuN0MxNTIuNiAzMDUuNyAxNDQuNyAzMDIuNSAxMzguNiAyOTYuMkMxMzIuNSAyODkuOSAxMjkuMiAyODIuMiAxMjguOCAyNzNWMjM5LjdDMTI5LjIgMjMwLjYgMTMyLjYgMjIyLjggMTM4LjkgMjE2LjVDMTQ1LjIgMjEwLjIgMTUyLjEgMjA2LjkgMTYyLjIgMjA2LjVDMTcxLjQgMjA2LjkgMTc5LjIgMjEwLjIgMTg1LjUgMjE2LjVIMTg1LjV6TTM3NyAyMTYuNUMzODMuMyAyMjIuOCAzODYuNyAyMzAuNiAzODcuMSAyMzkuN1YyNzNDMzg2LjcgMjgyLjIgMzgzLjQgMjg5LjkgMzc3LjMgMjk2LjJDMzcxLjIgMzAyLjUgMzYzLjMgMzA1LjcgMzUzLjcgMzA1LjdDMzQ0LjEgMzA1LjcgMzM2LjMgMzAyLjUgMzMwLjEgMjk2LjJDMzIzLjEgMjg5LjkgMzIwLjcgMjgyLjIgMzIwLjQgMjczVjIzOS43QzMyMC43IDIzMC42IDMyNC4xIDIyMi44IDMzMC40IDIxNi41QzMzNi43IDIxMC4yIDM0NC41IDIwNi45IDM1My43IDIwNi41QzM2Mi45IDIwNi45IDM3MC43IDIxMC4yIDM3NyAyMTYuNUgzNzd6XCJdXG59O1xudmFyIGZhRXJsYW5nID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2VybGFuZycsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjM5ZFwiLCBcIk04Ny4yIDUzLjVIMHY0MDVoMTAwLjRjLTQ5LjctNTIuNi03OC44LTEyNS4zLTc4LjctMjEyLjEtLjEtNzYuNyAyNC0xNDIuNyA2NS41LTE5Mi45em0yMzguMiA5LjdjLTQ1LjkuMS04NS4xIDMzLjUtODkuMiA4My4yaDE2OS45Yy0xLjEtNDkuNy0zNC41LTgzLjEtODAuNy04My4yem0yMzAuNy05LjZoLjNsLS4xLS4xem0uMyAwYzMxLjQgNDIuNyA0OC43IDk3LjUgNDYuMiAxNjIuNy41IDYgLjUgMTEuNyAwIDI0LjFIMjMwLjJjLS4yIDEwOS43IDM4LjkgMTk0LjkgMTM4LjYgMTk1LjMgNjguNS0uMyAxMTgtNTEgMTUxLjktMTA2LjFsOTYuNCA0OC4yYy0xNy40IDMwLjktMzYuNSA1Ny44LTU3LjkgODAuOEg2NDB2LTQwNXpcIl1cbn07XG52YXIgZmFYVHdpdHRlciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd4LXR3aXR0ZXInLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImU2MWJcIiwgXCJNMzg5LjIgNDhoNzAuNkwzMDUuNiAyMjQuMiA0ODcgNDY0SDM0NUwyMzMuNyAzMTguNiAxMDYuNSA0NjRIMzUuOEwyMDAuNyAyNzUuNSAyNi44IDQ4SDE3Mi40TDI3Mi45IDE4MC45IDM4OS4yIDQ4ek0zNjQuNCA0MjEuOGgzOS4xTDE1MS4xIDg4aC00MkwzNjQuNCA0MjEuOHpcIl1cbn07XG52YXIgZmFDb3R0b25CdXJlYXUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY290dG9uLWJ1cmVhdScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjg5ZVwiLCBcIk00NzQuMzEgMzMwLjQxYy0yMy42NiA5MS44NS05NC4yMyAxNDQuNTktMjAxLjkgMTQ4LjM1VjQyOS42YzAtNDggMjYuNDEtNzQuMzkgNzQuMzktNzQuMzkgNjIgMCA5OS4yLTM3LjIgOTkuMi05OS4yMSAwLTYxLjM3LTM2LjUzLTk4LjI4LTk3LjM4LTk5LjA2LTMzLTY5LjMyLTE0Ni41LTY0LjY1LTE3Ny4yNCAwQzExMC41MiAxNTcuNzIgNzQgMTk0LjYzIDc0IDI1NmMwIDYyLjEzIDM3LjI3IDk5LjQxIDk5LjQgOTkuNDEgNDggMCA3NC41NSAyNi4yMyA3NC41NSA3NC4zOVY0NzljLTEzNC40My01LTIxMS4xLTg1LjA3LTIxMS4xLTIyMyAwLTE0MS44MiA4MS4zNS0yMjMuMiAyMjMuMi0yMjMuMiAxMTQuNzcgMCAxODkuODQgNTMuMiAyMTQuNjkgMTQ4LjgxSDUwMEM0NzMuODggNzEuNTEgMzg4LjIyIDggMjU5LjgyIDggMTA1IDggMTIgMTAxLjE5IDEyIDI1NS44MiAxMiA0MTEuMTQgMTA1LjE5IDUwNC4zNCAyNTkuODIgNTA0YzEyOC4yNyAwIDIxMy44Ny02My44MSAyMzkuNjctMTczLjU5ek0zNTcgMTgyLjMzYzQxLjM3IDMuNDUgNjQuMiAyOSA2NC4yIDczLjY3IDAgNDgtMjYuNDMgNzQuNDEtNzQuNCA3NC40MS0yOC42MSAwLTQ5LjMzLTkuNTktNjEuNTktMjcuMzMgODMuMDYtMTYuNTUgNzUuNTktOTkuNjcgNzEuNzktMTIwLjc1em0tODEuNjggOTcuMzZjLTIuNDYtMTAuMzQtMTYuMzMtODcgNTYuMjMtOTcgMi4yNyAxMC4wOSAxNi41MiA4Ny4xMS01Ni4yNiA5N3pNMjYwIDEzMmMyOC42MSAwIDQ5IDkuNjcgNjEuNDQgMjcuNjEtMjguMzYgNS40OC00OS4zNiAyMC41OS02MS41OSA0My40NS0xMi4yMy0yMi44Ni0zMy4yMy0zOC02MS42LTQzLjQ1IDEyLjQxLTE3LjY5IDMzLjI3LTI3LjM1IDYxLjU3LTI3LjM1em0tNzEuNTIgNTAuNzJjNzMuMTcgMTAuNTcgNTguOTEgODYuODEgNTYuNDkgOTctNzIuNDEtOS44NC01OS04Ni45NS01Ni4yNS05N3pNMTczLjIgMzMwLjQxYy00OCAwLTc0LjQtMjYuNC03NC40LTc0LjQxIDAtNDQuMzYgMjIuODYtNzAgNjQuMjItNzMuNjctNi43NSAzNy4yLTEuMzggMTA2LjUzIDcxLjY1IDEyMC43NS0xMi4xNCAxNy42My0zMi44NCAyNy4zLTYxLjE0IDI3LjN6bTUzLjIxIDEyLjM5QTgwLjggODAuOCAwIDAgMCAyNjAgMzA5LjI1YzcuNzcgMTQuNDkgMTkuMzMgMjUuNTQgMzMuODIgMzMuNTVhODAuMjggODAuMjggMCAwIDAtMzMuNTggMzMuODNjLTgtMTQuNS0xOS4wNy0yNi4yMy0zMy41Ni0zMy44M3pcIl1cbn07XG52YXIgZmFEYXNoY3ViZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkYXNoY3ViZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjIxMFwiLCBcIk0zMjYuNiAxMDRIMTEwLjRjLTUxLjEgMC05MS4yIDQzLjMtOTEuMiA5My41VjQyN2MwIDUwLjUgNDAuMSA4NSA5MS4yIDg1aDIyNy4yYzUxLjEgMCA5MS4yLTM0LjUgOTEuMi04NVYwTDMyNi42IDEwNHpNMTUzLjkgNDE2LjVjLTE3LjcgMC0zMi40LTE1LjEtMzIuNC0zMi44VjI0MC44YzAtMTcuNyAxNC43LTMyLjUgMzIuNC0zMi41aDE0MC43YzE3LjcgMCAzMiAxNC44IDMyIDMyLjV2MTIzLjVsNTEuMSA1Mi4zSDE1My45elwiXVxufTtcbnZhciBmYTQyR3JvdXAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnNDItZ3JvdXAnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtcImlubm9zb2Z0XCJdLCBcImUwODBcIiwgXCJNMzIwIDk2VjQxNkMzNDEuMDExIDQxNiAzNjEuODE4IDQxMS44NjEgMzgxLjIzIDQwMy44MjFDNDAwLjY0MSAzOTUuNzggNDE4LjI4IDM4My45OTUgNDMzLjEzOCAzNjkuMTM4QzQ0Ny45OTUgMzU0LjI4IDQ1OS43OCAzMzYuNjQxIDQ2Ny44MjEgMzE3LjIzQzQ3NS44NjEgMjk3LjgxOCA0ODAgMjc3LjAxMSA0ODAgMjU2QzQ4MCAyMzQuOTg5IDQ3NS44NjEgMjE0LjE4MiA0NjcuODIxIDE5NC43NzFDNDU5Ljc4IDE3NS4zNTkgNDQ3Ljk5NSAxNTcuNzIgNDMzLjEzOCAxNDIuODYzQzQxOC4yOCAxMjguMDA1IDQwMC42NDEgMTE2LjIyIDM4MS4yMyAxMDguMTc5QzM2MS44MTggMTAwLjEzOSAzNDEuMDExIDk2IDMyMCA5NlpNMCAyNTZMMTYwLjAwMiA0MTZMMzIwLjAwMyAyNTZMMTYwLjAwMiA5NkwwIDI1NlpNNDgwIDI1NkM0ODAgMjc3LjAxMSA0ODQuMTM4IDI5Ny44MTggNDkyLjE3OSAzMTcuMjNDNTAwLjIxOSAzMzYuNjQzIDUxMi4wMDUgMzU0LjI4IDUyNi44NjIgMzY5LjEzOEM1NDEuNzIgMzgzLjk5NSA1NTkuMzU3IDM5NS43ODEgNTc4Ljc3IDQwMy44MjFDNTk4LjE4MiA0MTEuODYyIDYxOC45ODkgNDE2IDY0MCA0MTZWOTZDNTk3LjU2NSA5NiA1NTYuODY5IDExMi44NTggNTI2Ljg2MiAxNDIuODYzQzQ5Ni44NTcgMTcyLjg2OSA0ODAgMjEzLjU2NSA0ODAgMjU2WlwiXVxufTtcbnZhciBmYUlubm9zb2Z0ID0gZmE0Mkdyb3VwO1xudmFyIGZhU3RhY2tFeGNoYW5nZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzdGFjay1leGNoYW5nZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjE4ZFwiLCBcIk0xNy43IDMzMi4zaDQxMi43djIyYzAgMzcuNy0yOS4zIDY4LTY1LjMgNjhoLTE5TDI1OS4zIDUxMnYtODkuN0g4M2MtMzYgMC02NS4zLTMwLjMtNjUuMy02OHYtMjJ6bTAtMjMuNmg0MTIuN3YtODVIMTcuN3Y4NXptMC0xMDkuNGg0MTIuN3YtODVIMTcuN3Y4NXpNMzY1IDBIODNDNDcgMCAxNy43IDMwLjMgMTcuNyA2Ny43VjkwaDQxMi43VjY3LjdDNDMwLjMgMzAuMyA0MDEgMCAzNjUgMHpcIl1cbn07XG52YXIgZmFFbGVtZW50b3IgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZWxlbWVudG9yJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNDMwXCIsIFwiTS4zNjEgMjU2Qy4zNjEgMzk3IDExNCA1MTEgMjU1IDUxMUMzOTcgNTExIDUxMSAzOTcgNTExIDI1NkM1MTEgMTE2IDM5NyAyLjA1IDI1NSAyLjA1QzExNCAyLjA1IC4zNjEgMTE2IC4zNjEgMjU2ek0xOTIgMTUwVjM2M0gxNDlWMTUwSDE5MnpNMjM0IDE1MEgzNjJWMTkzSDIzNFYxNTB6TTM2MiAyMzVWMjc4SDIzNFYyMzVIMzYyek0yMzQgMzIwSDM2MlYzNjNIMjM0VjMyMHpcIl1cbn07XG52YXIgZmFTcXVhcmVQaWVkUGlwZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXBpZWQtcGlwZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInBpZWQtcGlwZXItc3F1YXJlXCJdLCBcImUwMWVcIiwgXCJNMzIgNDE5TDAgNDc5LjJsLjgtMzI4Qy44IDg1LjMgNTQgMzIgMTIwIDMyaDMyNy4yYy05MyAyOC45LTE4OS45IDk0LjItMjUzLjkgMTY4LjZDMTIyLjcgMjgyIDgyLjYgMzM4IDMyIDQxOU00NDggMzJTMzA1LjIgOTguOCAyNjEuNiAxOTkuMWMtMjMuMiA1My42LTI4LjkgMTE4LjEtNzEgMTU4LjYtMjguOSAyNy44LTY5LjggMzguMi0xMDUuMyA1Ni4zLTIzLjIgMTItNjYuNCA0MC41LTg0LjkgNjZoMzI4LjRjNjYgMCAxMTkuMy01My4zIDExOS4zLTExOS4yLS4xIDAtLjEtMzI4LjgtLjEtMzI4Ljh6XCJdXG59O1xudmFyIGZhUGllZFBpcGVyU3F1YXJlID0gZmFTcXVhcmVQaWVkUGlwZXI7XG52YXIgZmFDcmVhdGl2ZUNvbW1vbnNOZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjcmVhdGl2ZS1jb21tb25zLW5kJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNGViXCIsIFwiTTI0Ny42IDhDMzg5LjQgOCA0OTYgMTE4LjEgNDk2IDI1NmMwIDE0Ny4xLTExOC41IDI0OC0yNDguNCAyNDhDMTEzLjYgNTA0IDAgMzk0LjUgMCAyNTYgMCAxMjMuMSAxMDQuNyA4IDI0Ny42IDh6bS44IDQ0LjdDMTMwLjIgNTIuNyA0NC43IDE1MC42IDQ0LjcgMjU2YzAgMTA5LjggOTEuMiAyMDIuOCAyMDMuNyAyMDIuOCAxMDMuMiAwIDIwMi44LTgxLjEgMjAyLjgtMjAyLjguMS0xMTMuOC05MC4yLTIwMy4zLTIwMi44LTIwMy4zem05NCAxNDQuM3Y0Mi41SDE2Mi4xVjE5N2gxODAuM3ptMCA3OS44djQyLjVIMTYyLjF2LTQyLjVoMTgwLjN6XCJdXG59O1xudmFyIGZhUGFsZmVkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BhbGZlZCcsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjNkOFwiLCBcIk0zODQuOSAxOTMuOWMwLTQ3LjQtNTUuMi00NC4yLTk1LjQtMjkuOC0xLjMgMzkuNC0yLjUgODAuNy0zIDExOS44LjcgMi44IDIuNiA2LjIgMTUuMSA2LjIgMzYuOCAwIDgzLjQtNDIuOCA4My4zLTk2LjJ6bS0xOTQuNSA3Mi4yYy4yIDAgNi41LTIuNyAxMS4yLTIuNyAyNi42IDAgMjAuNyA0NC4xLTE0LjQgNDQuMS0yMS41IDAtMzcuMS0xOC4xLTM3LjEtNDMgMC00MiA0Mi45LTk1LjYgMTAwLjctMTI2LjUgMS0xMi40IDMtMjIgMTAuNS0yOC4yIDExLjItOSAyNi42LTMuNSAyOS41IDExLjEgNzIuMi0yMi4yIDEzNS4yIDEgMTM1LjIgNzIgMCA3Ny45LTc5LjMgMTUyLjYtMTQwLjEgMTM4LjItLjEgMzkuNC45IDc0LjQgMi43IDEwMHYuMmMuMiAzLjQuNiAxMi41LTUuMyAxOS4xLTkuNiAxMC42LTMzLjQgMTAtMzYuNC0yMi4zLTQuMS00NC40LjItMjA2LjEgMS40LTI0Mi41LTIxLjUgMTUtNTguNSA1MC4zLTU4LjUgNzUuOS4yIDIuNS40IDQgLjYgNC42ek04IDE4MS4xcy0uMSAzNy40IDM4LjQgMzcuNGgzMGwyMi40IDIxNy4yczAgNDQuMyA0NC43IDQ0LjNoMjg4LjlzNDQuNy0uNCA0NC43LTQ0LjNsMjIuNC0yMTcuMmgzMHMzOC40IDEuMiAzOC40LTM3LjRjMCAwIC4xLTM3LjQtMzguNC0zNy40aC0zMC4xYy03LjMtMjUuNi0zMC4yLTc0LjMtMTE5LjQtNzQuM2gtMjhWNTAuM3MtMi43LTE4LjQtMjEuMS0xOC40aC04NS44cy0yMS4xIDAtMjEuMSAxOC40djE5LjFoLTI4LjFzLTEwNSA0LjItMTIwLjUgNzQuM2gtMjlTOCAxNDIuNSA4IDE4MS4xelwiXVxufTtcbnZhciBmYVN1cGVycG93ZXJzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N1cGVycG93ZXJzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMmRkXCIsIFwiTTQ0OCAzMmMtODMuMyAxMS0xNjYuOCAyMi0yNTAgMzMtOTIgMTIuNS0xNjMuMyA4Ni43LTE2OSAxODAtMy4zIDU1LjUgMTggMTA5LjUgNTcuOCAxNDguMkwwIDQ4MGM4My4zLTExIDE2Ni41LTIyIDI0OS44LTMzIDkxLjgtMTIuNSAxNjMuMy04Ni44IDE2OC43LTE3OS44IDMuNS01NS41LTE4LTEwOS41LTU3LjctMTQ4LjJMNDQ4IDMyem0tNzkuNyAyMzIuM2MtNC4yIDc5LjUtNzQgMTM5LjItMTUyLjggMTM0LjUtNzkuNS00LjctMTQwLjctNzEtMTM2LjMtMTUxIDQuNS03OS4yIDc0LjMtMTM5LjMgMTUzLTEzNC41IDc5LjMgNC43IDE0MC41IDcxIDEzNi4xIDE1MXpcIl1cbn07XG52YXIgZmFSZXNvbHZpbmcgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncmVzb2x2aW5nJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmM2U3XCIsIFwiTTI4MS4yIDI3OC4yYzQ2LTEzLjMgNDkuNi0yMy41IDQ0LTQzLjRMMzE0IDE5NS41Yy02LjEtMjAuOS0xOC40LTI4LjEtNzEuMS0xMi44TDU0LjcgMjM2LjhsMjguNiA5OC42IDE5Ny45LTU3LjJ6TTI0OC41IDhDMTMxLjQgOCAzMy4yIDg4LjcgNy4yIDE5Ny41bDIyMS45LTYzLjljMzQuOC0xMC4yIDU0LjItMTEuNyA3OS4zLTguMiAzNi4zIDYuMSA1Mi43IDI1IDYxLjQgNTUuMmwxMC43IDM3LjhjOC4yIDI4LjEgMSA1MC42LTIzLjUgNzMuNi0xOS40IDE3LjQtMzEuMiAyNC41LTYxLjQgMzMuMkwyMDMgMzUxLjhsMjIwLjQgMjcuMSA5LjcgMzQuMi00OC4xIDEzLjMtMjg2LjgtMzcuMyAyMyA4MC4yYzM2LjggMjIgODAuMyAzNC43IDEyNi4zIDM0LjcgMTM3IDAgMjQ4LjUtMTExLjQgMjQ4LjUtMjQ4LjNDNDk3IDExOS40IDM4NS41IDggMjQ4LjUgOHpNMzguMyAzODguNkwwIDI1Ni44YzAgNDguNSAxNC4zIDkzLjQgMzguMyAxMzEuOHpcIl1cbn07XG52YXIgZmFYYm94ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3hib3gnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY0MTJcIiwgXCJNMzY5LjkgMzE4LjJjNDQuMyA1NC4zIDY0LjcgOTguOCA1NC40IDExOC43LTcuOSAxNS4xLTU2LjcgNDQuNi05Mi42IDU1LjktMjkuNiA5LjMtNjguNCAxMy4zLTEwMC40IDEwLjItMzguMi0zLjctNzYuOS0xNy40LTExMC4xLTM5QzkzLjMgNDQ1LjggODcgNDM4LjMgODcgNDIzLjRjMC0yOS45IDMyLjktODIuMyA4OS4yLTE0Mi4xIDMyLTMzLjkgNzYuNS03My43IDgxLjQtNzIuNiA5LjQgMi4xIDg0LjMgNzUuMSAxMTIuMyAxMDkuNXpNMTg4LjYgMTQzLjhjLTI5LjctMjYuOS01OC4xLTUzLjktODYuNC02My40LTE1LjItNS4xLTE2LjMtNC44LTI4LjcgOC4xLTI5LjIgMzAuNC01My41IDc5LjctNjAuMyAxMjIuNC01LjQgMzQuMi02LjEgNDMuOC00LjIgNjAuNSA1LjYgNTAuNSAxNy4zIDg1LjQgNDAuNSAxMjAuOSA5LjUgMTQuNiAxMi4xIDE3LjMgOS4zIDkuOS00LjItMTEtLjMtMzcuNSA5LjUtNjQgMTQuMy0zOSA1My45LTExMi45IDEyMC4zLTE5NC40em0zMTEuNiA2My41QzQ4My4zIDEyNy4zIDQzMi43IDc3IDQyNS42IDc3Yy03LjMgMC0yNC4yIDYuNS0zNiAxMy45LTIzLjMgMTQuNS00MSAzMS40LTY0LjMgNTIuOEMzNjcuNyAxOTcgNDI3LjUgMjgzLjEgNDQ4LjIgMzQ2YzYuOCAyMC43IDkuNyA0MS4xIDcuNCA1Mi4zLTEuNyA4LjUtMS43IDguNSAxLjQgNC42IDYuMS03LjcgMTkuOS0zMS4zIDI1LjQtNDMuNSA3LjQtMTYuMiAxNS00MC4yIDE4LjYtNTguNyA0LjMtMjIuNSAzLjktNzAuOC0uOC05My40ek0xNDEuMyA0M0MxODkgNDAuNSAyNTEgNzcuNSAyNTUuNiA3OC40Yy43LjEgMTAuNC00LjIgMjEuNi05LjcgNjMuOS0zMS4xIDk0LTI1LjggMTA3LjQtMjUuMi02My45LTM5LjMtMTUyLjctNTAtMjMzLjktMTEuNy0yMy40IDExLjEtMjQgMTEuOS05LjQgMTEuMnpcIl1cbn07XG52YXIgZmFTcXVhcmVXZWJBd2Vzb21lU3Ryb2tlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS13ZWItYXdlc29tZS1zdHJva2UnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU2ODRcIiwgXCJNNjQgNjRDNDYuMyA2NCAzMiA3OC4zIDMyIDk2bDAgMzIwYzAgMTcuNyAxNC4zIDMyIDMyIDMybDMyMCAwYzE3LjcgMCAzMi0xNC4zIDMyLTMybDAtMzIwYzAtMTcuNy0xNC4zLTMyLTMyLTMyTDY0IDY0ek0wIDk2QzAgNjAuNyAyOC43IDMyIDY0IDMybDMyMCAwYzM1LjMgMCA2NCAyOC43IDY0IDY0bDAgMzIwYzAgMzUuMy0yOC43IDY0LTY0IDY0TDY0IDQ4MGMtMzUuMyAwLTY0LTI4LjctNjQtNjRMMCA5NnptMjM1IDgxLjZMMjg4IDIyNGw1Mi4yLTEwLjRjLTIuNi0zLjktNC4yLTguNS00LjItMTMuNmMwLTEzLjMgMTAuNy0yNCAyNC0yNHMyNCAxMC43IDI0IDI0YzAgMTMtMTAuMyAyMy42LTIzLjIgMjRMMzA0LjUgMzQ5LjFjLTUuMiAxMS41LTE2LjYgMTguOS0yOS4yIDE4LjlsLTEwMi42IDBjLTEyLjYgMC0yNC03LjQtMjkuMi0xOC45TDg3LjIgMjI0Qzc0LjMgMjIzLjYgNjQgMjEzIDY0IDIwMGMwLTEzLjMgMTAuNy0yNCAyNC0yNHMyNCAxMC43IDI0IDI0YzAgNS0xLjUgOS43LTQuMiAxMy42TDE2MCAyMjRsNTMuMS00Ni40Yy04LjktNC4xLTE1LTEzLjEtMTUtMjMuNmMwLTE0LjQgMTEuNi0yNiAyNi0yNnMyNiAxMS42IDI2IDI2YzAgMTAuNS02LjIgMTkuNS0xNS4xIDIzLjZ6XCJdXG59O1xudmFyIGZhU2VhcmNoZW5naW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2VhcmNoZW5naW4nLFxuICBpY29uOiBbNDYwLCA1MTIsIFtdLCBcImYzZWJcIiwgXCJNMjIwLjYgMTMwLjNsLTY3LjIgMjguMlY0My4yTDk4LjcgMjMzLjVsNTQuNy0yNC4ydjEzMC4zbDY3LjItMjA5LjN6bS04My4yLTk2LjdsLTEuMyA0LjctMTUuMiA1Mi45QzgwLjYgMTA2LjcgNTIgMTQ1LjggNTIgMTkxLjVjMCA1Mi4zIDM0LjMgOTUuOSA4My40IDEwNS41djUzLjZDNTcuNSAzNDAuMSAwIDI3Mi40IDAgMTkxLjZjMC04MC41IDU5LjgtMTQ3LjIgMTM3LjQtMTU4em0zMTEuNCA0NDcuMmMtMTEuMiAxMS4yLTIzLjEgMTIuMy0yOC42IDEwLjUtNS40LTEuOC0yNy4xLTE5LjktNjAuNC00NC40LTMzLjMtMjQuNi0zMy42LTM1LjctNDMtNTYuNy05LjQtMjAuOS0zMC40LTQyLjYtNTcuNS01Mi40bC05LjctMTQuN2MtMjQuNyAxNi45LTUzIDI2LjktODEuMyAyOC43bDIuMS02LjYgMTUuOS00OS41YzQ2LjUtMTEuOSA4MC45LTU0IDgwLjktMTA0LjIgMC01NC41LTM4LjQtMTAyLjEtOTYtMTA3LjFWMzIuM0MyNTQuNCAzNy40IDMyMCAxMDYuOCAzMjAgMTkxLjZjMCAzMy42LTExLjIgNjQuNy0yOSA5MC40bDE0LjYgOS42YzkuOCAyNy4xIDMxLjUgNDggNTIuNCA1Ny40czMyLjIgOS43IDU2LjggNDNjMjQuNiAzMy4yIDQyLjcgNTQuOSA0NC41IDYwLjNzLjcgMTcuMy0xMC41IDI4LjV6bS05LjktMTcuOWMwLTQuNC0zLjYtOC04LThzLTggMy42LTggOCAzLjYgOCA4IDggOC0zLjYgOC04elwiXVxufTtcbnZhciBmYVRpa3RvayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd0aWt0b2snLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImUwN2JcIiwgXCJNNDQ4LDIwOS45MWEyMTAuMDYsMjEwLjA2LDAsMCwxLTEyMi43Ny0zOS4yNVYzNDkuMzhBMTYyLjU1LDE2Mi41NSwwLDEsMSwxODUsMTg4LjMxVjI3OC4yYTc0LjYyLDc0LjYyLDAsMSwwLDUyLjIzLDcxLjE4VjBsODgsMGExMjEuMTgsMTIxLjE4LDAsMCwwLDEuODYsMjIuMTdoMEExMjIuMTgsMTIyLjE4LDAsMCwwLDM4MSwxMDIuMzlhMTIxLjQzLDEyMS40MywwLDAsMCw2NywyMC4xNFpcIl1cbn07XG52YXIgZmFTcXVhcmVGYWNlYm9vayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtZmFjZWJvb2snLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImZhY2Vib29rLXNxdWFyZVwiXSwgXCJmMDgyXCIsIFwiTTY0IDMyQzI4LjcgMzIgMCA2MC43IDAgOTZWNDE2YzAgMzUuMyAyOC43IDY0IDY0IDY0aDk4LjJWMzM0LjJIMTA5LjRWMjU2aDUyLjhWMjIyLjNjMC04Ny4xIDM5LjQtMTI3LjUgMTI1LTEyNy41YzE2LjIgMCA0NC4yIDMuMiA1NS43IDYuNFYxNzJjLTYtLjYtMTYuNS0xLTI5LjYtMWMtNDIgMC01OC4yIDE1LjktNTguMiA1Ny4yVjI1Nmg4My42bC0xNC40IDc4LjJIMjU1VjQ4MEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjR6XCJdXG59O1xudmFyIGZhRmFjZWJvb2tTcXVhcmUgPSBmYVNxdWFyZUZhY2Vib29rO1xudmFyIGZhUmVucmVuID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3JlbnJlbicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjE4YlwiLCBcIk0yMTQgMTY5LjFjMCAxMTAuNC02MSAyMDUuNC0xNDcuNiAyNDcuNEMzMCAzNzMuMiA4IDMxNy43IDggMjU2LjYgOCAxMzMuOSA5Ny4xIDMyLjIgMjE0IDEyLjV2MTU2LjZ6TTI1NSA1MDRjLTQyLjkgMC04My4zLTExLTExOC41LTMwLjRDMTkzLjcgNDM3LjUgMjM5LjkgMzgyLjkgMjU1IDMxOWMxNS41IDYzLjkgNjEuNyAxMTguNSAxMTguOCAxNTQuN0MzMzguNyA0OTMgMjk4LjMgNTA0IDI1NSA1MDR6bTE5MC42LTg3LjVDMzU5IDM3NC41IDI5OCAyNzkuNiAyOTggMTY5LjFWMTIuNWMxMTYuOSAxOS43IDIwNiAxMjEuNCAyMDYgMjQ0LjEgMCA2MS4xLTIyIDExNi42LTU4LjQgMTU5Ljl6XCJdXG59O1xudmFyIGZhTGludXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGludXgnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxN2NcIiwgXCJNMjIwLjggMTIzLjNjMSAuNSAxLjggMS43IDMgMS43IDEuMSAwIDIuOC0uNCAyLjktMS41LjItMS40LTEuOS0yLjMtMy4yLTIuOS0xLjctLjctMy45LTEtNS41LS4xLS40LjItLjguNy0uNiAxLjEuMyAxLjMgMi4zIDEuMSAzLjQgMS43em0tMjEuOSAxLjdjMS4yIDAgMi0xLjIgMy0xLjcgMS4xLS42IDMuMS0uNCAzLjUtMS42LjItLjQtLjItLjktLjYtMS4xLTEuNi0uOS0zLjgtLjYtNS41LjEtMS4zLjYtMy40IDEuNS0zLjIgMi45LjEgMSAxLjggMS41IDIuOCAxLjR6TTQyMCA0MDMuOGMtMy42LTQtNS4zLTExLjYtNy4yLTE5LjctMS44LTguMS0zLjktMTYuOC0xMC41LTIyLjQtMS4zLTEuMS0yLjYtMi4xLTQtMi45LTEuMy0uOC0yLjctMS41LTQuMS0yIDkuMi0yNy4zIDUuNi01NC41LTMuNy03OS4xLTExLjQtMzAuMS0zMS4zLTU2LjQtNDYuNS03NC40LTE3LjEtMjEuNS0zMy43LTQxLjktMzMuNC03MkMzMTEuMSA4NS40IDMxNS43LjEgMjM0LjggMCAxMzIuNC0uMiAxNTggMTAzLjQgMTU2LjkgMTM1LjJjLTEuNyAyMy40LTYuNCA0MS44LTIyLjUgNjQuNy0xOC45IDIyLjUtNDUuNSA1OC44LTU4LjEgOTYuNy02IDE3LjktOC44IDM2LjEtNi4yIDUzLjMtNi41IDUuOC0xMS40IDE0LjctMTYuNiAyMC4yLTQuMiA0LjMtMTAuMyA1LjktMTcgOC4zcy0xNCA2LTE4LjUgMTQuNWMtMi4xIDMuOS0yLjggOC4xLTIuOCAxMi40IDAgMy45LjYgNy45IDEuMiAxMS44IDEuMiA4LjEgMi41IDE1LjcuOCAyMC44LTUuMiAxNC40LTUuOSAyNC40LTIuMiAzMS43IDMuOCA3LjMgMTEuNCAxMC41IDIwLjEgMTIuMyAxNy4zIDMuNiA0MC44IDIuNyA1OS4zIDEyLjUgMTkuOCAxMC40IDM5LjkgMTQuMSA1NS45IDEwLjQgMTEuNi0yLjYgMjEuMS05LjYgMjUuOS0yMC4yIDEyLjUtLjEgMjYuMy01LjQgNDguMy02LjYgMTQuOS0xLjIgMzMuNiA1LjMgNTUuMSA0LjEuNiAyLjMgMS40IDQuNiAyLjUgNi43di4xYzguMyAxNi43IDIzLjggMjQuMyA0MC4zIDIzIDE2LjYtMS4zIDM0LjEtMTEgNDguMy0yNy45IDEzLjYtMTYuNCAzNi0yMy4yIDUwLjktMzIuMiA3LjQtNC41IDEzLjQtMTAuMSAxMy45LTE4LjMuNC04LjItNC40LTE3LjMtMTUuNS0yOS43ek0yMjMuNyA4Ny4zYzkuOC0yMi4yIDM0LjItMjEuOCA0NC0uNCA2LjUgMTQuMiAzLjYgMzAuOS00LjMgNDAuNC0xLjYtLjgtNS45LTIuNi0xMi42LTQuOSAxLjEtMS4yIDMuMS0yLjcgMy45LTQuNiA0LjgtMTEuOC0uMi0yNy05LjEtMjcuMy03LjMtLjUtMTMuOSAxMC44LTExLjggMjMtNC4xLTItOS40LTMuNS0xMy00LjQtMS02LjktLjMtMTQuNiAyLjktMjEuOHpNMTgzIDc1LjhjMTAuMSAwIDIwLjggMTQuMiAxOS4xIDMzLjUtMy41IDEtNy4xIDIuNS0xMC4yIDQuNiAxLjItOC45LTMuMy0yMC4xLTkuNi0xOS42LTguNC43LTkuOCAyMS4yLTEuOCAyOC4xIDEgLjggMS45LS4yLTUuOSA1LjUtMTUuNi0xNC42LTEwLjUtNTIuMSA4LjQtNTIuMXptLTEzLjYgNjAuN2M2LjItNC42IDEzLjYtMTAgMTQuMS0xMC41IDQuNy00LjQgMTMuNS0xNC4yIDI3LjktMTQuMiA3LjEgMCAxNS42IDIuMyAyNS45IDguOSA2LjMgNC4xIDExLjMgNC40IDIyLjYgOS4zIDguNCAzLjUgMTMuNyA5LjcgMTAuNSAxOC4yLTIuNiA3LjEtMTEgMTQuNC0yMi43IDE4LjEtMTEuMSAzLjYtMTkuOCAxNi0zOC4yIDE0LjktMy45LS4yLTctMS05LjYtMi4xLTgtMy41LTEyLjItMTAuNC0yMC0xNS04LjYtNC44LTEzLjItMTAuNC0xNC43LTE1LjMtMS40LTQuOSAwLTkgNC4yLTEyLjN6bTMuMyAzMzRjLTIuNyAzNS4xLTQzLjkgMzQuNC03NS4zIDE4LTI5LjktMTUuOC02OC42LTYuNS03Ni41LTIxLjktMi40LTQuNy0yLjQtMTIuNyAyLjYtMjYuNHYtLjJjMi40LTcuNi42LTE2LS42LTIzLjktMS4yLTcuOC0xLjgtMTUgLjktMjAgMy41LTYuNyA4LjUtOS4xIDE0LjgtMTEuMyAxMC4zLTMuNyAxMS44LTMuNCAxOS42LTkuOSA1LjUtNS43IDkuNS0xMi45IDE0LjMtMTggNS4xLTUuNSAxMC04LjEgMTcuNy02LjkgOC4xIDEuMiAxNS4xIDYuOCAyMS45IDE2bDE5LjYgMzUuNmM5LjUgMTkuOSA0My4xIDQ4LjQgNDEgNjguOXptLTEuNC0yNS45Yy00LjEtNi42LTkuNi0xMy42LTE0LjQtMTkuNiA3LjEgMCAxNC4yLTIuMiAxNi43LTguOSAyLjMtNi4yIDAtMTQuOS03LjQtMjQuOS0xMy41LTE4LjItMzguMy0zMi41LTM4LjMtMzIuNS0xMy41LTguNC0yMS4xLTE4LjctMjQuNi0yOS45cy0zLTIzLjMtLjMtMzUuMmM1LjItMjIuOSAxOC42LTQ1LjIgMjcuMi01OS4yIDIuMy0xLjcuOCAzLjItOC43IDIwLjgtOC41IDE2LjEtMjQuNCA1My4zLTIuNiA4Mi40LjYtMjAuNyA1LjUtNDEuOCAxMy44LTYxLjUgMTItMjcuNCAzNy4zLTc0LjkgMzkuMy0xMTIuNyAxLjEuOCA0LjYgMy4yIDYuMiA0LjEgNC42IDIuNyA4LjEgNi43IDEyLjYgMTAuMyAxMi40IDEwIDI4LjUgOS4yIDQyLjQgMS4yIDYuMi0zLjUgMTEuMi03LjUgMTUuOS05IDkuOS0zLjEgMTcuOC04LjYgMjIuMy0xNSA3LjcgMzAuNCAyNS43IDc0LjMgMzcuMiA5NS43IDYuMSAxMS40IDE4LjMgMzUuNSAyMy42IDY0LjYgMy4zLS4xIDcgLjQgMTAuOSAxLjQgMTMuOC0zNS43LTExLjctNzQuMi0yMy4zLTg0LjktNC43LTQuNi00LjktNi42LTIuNi02LjUgMTIuNiAxMS4yIDI5LjIgMzMuNyAzNS4yIDU5IDIuOCAxMS42IDMuMyAyMy43LjQgMzUuNyAxNi40IDYuOCAzNS45IDE3LjkgMzAuNyAzNC44LTIuMi0uMS0zLjIgMC00LjIgMCAzLjItMTAuMS0zLjktMTcuNi0yMi44LTI2LjEtMTkuNi04LjYtMzYtOC42LTM4LjMgMTIuNS0xMi4xIDQuMi0xOC4zIDE0LjctMjEuNCAyNy4zLTIuOCAxMS4yLTMuNiAyNC43LTQuNCAzOS45LS41IDcuNy0zLjYgMTgtNi44IDI5LTMyLjEgMjIuOS03Ni43IDMyLjktMTE0LjMgNy4yem0yNTcuNC0xMS41Yy0uOSAxNi44LTQxLjIgMTkuOS02My4yIDQ2LjUtMTMuMiAxNS43LTI5LjQgMjQuNC00My42IDI1LjVzLTI2LjUtNC44LTMzLjctMTkuM2MtNC43LTExLjEtMi40LTIzLjEgMS4xLTM2LjMgMy43LTE0LjIgOS4yLTI4LjggOS45LTQwLjYuOC0xNS4yIDEuNy0yOC41IDQuMi0zOC43IDIuNi0xMC4zIDYuNi0xNy4yIDEzLjctMjEuMS4zLS4yLjctLjMgMS0uNS44IDEzLjIgNy4zIDI2LjYgMTguOCAyOS41IDEyLjYgMy4zIDMwLjctNy41IDM4LjQtMTYuMyA5LS4zIDE1LjctLjkgMjIuNiA1LjEgOS45IDguNSA3LjEgMzAuMyAxNy4xIDQxLjYgMTAuNiAxMS42IDE0IDE5LjUgMTMuNyAyNC42ek0xNzMuMyAxNDguN2MyIDEuOSA0LjcgNC41IDggNy4xIDYuNiA1LjIgMTUuOCAxMC42IDI3LjMgMTAuNiAxMS42IDAgMjIuNS01LjkgMzEuOC0xMC44IDQuOS0yLjYgMTAuOS03IDE0LjgtMTAuNHM1LjktNi4zIDMuMS02LjYtMi42IDIuNi02IDUuMWMtNC40IDMuMi05LjcgNy40LTEzLjkgOS44LTcuNCA0LjItMTkuNSAxMC4yLTI5LjkgMTAuMnMtMTguNy00LjgtMjQuOS05LjdjLTMuMS0yLjUtNS43LTUtNy43LTYuOS0xLjUtMS40LTEuOS00LjYtNC4zLTQuOS0xLjQtLjEtMS44IDMuNyAxLjcgNi41elwiXVxufTtcbnZhciBmYUdsaWRlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dsaWRlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMmE1XCIsIFwiTTI1Mi44IDE0OC42YzAgOC44LTEuNiAxNy43LTMuNCAyNi40LTUuOCAyNy44LTExLjYgNTUuOC0xNy4zIDgzLjYtMS40IDYuMy04LjMgNC45LTEzLjcgNC45LTIzLjggMC0zMC41LTI2LTMwLjUtNDUuNSAwLTI5LjMgMTEuMi02OC4xIDM4LjUtODMuMSA0LjMtMi41IDkuMi00LjIgMTQuMS00LjIgMTEuNCAwIDEyLjMgOC4zIDEyLjMgMTcuOXpNNDQ4IDgwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoMzUyYzI2LjUgMCA0OCAyMS41IDQ4IDQ4em0tNjQgMTg3YzAtNS4xLTIwLjgtMzcuNy0yNS41LTM5LjUtMi4yLS45LTcuMi0yLjMtOS42LTIuMy0yMy4xIDAtMzguNyAxMC41LTU4LjIgMjEuNWwtLjUtLjVjNC4zLTI5LjQgMTQuNi01Ny4yIDE0LjYtODcuNCAwLTQ0LjYtMjMuOC02Mi43LTY3LjUtNjIuNy03MS43IDAtMTA4IDcwLjgtMTA4IDEyMy41IDAgNTQuNyAzMiA4NSA4Ni4zIDg1IDcuNSAwIDYuOS0uNiA2LjkgMi4zLTEwLjUgODAuMy01Ni41IDgyLjktNTYuNSA1OC45IDAtMjQuNCAyOC0zNi41IDI4LjMtMzgtLjItNy42LTI5LjMtMTcuMi0zNi43LTE3LjItMjEuMSAwLTMyLjcgMzMtMzIuNyA1MC42IDAgMzIuMyAyMC40IDU0LjcgNTMuMyA1NC43IDQ4LjIgMCA4My40LTQ5LjcgOTQuMy05MS43IDkuNC0zNy43IDctMzkuNCAxMi4zLTQyLjEgMjAtMTAuMSAzNS44LTE2LjggNTguNC0xNi44IDExLjEgMCAxOSAyLjMgMzYuNyA1LjIgMS44LjEgNC4xLTEuNyA0LjEtMy41elwiXVxufTtcbnZhciBmYUxpbmtlZGluID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2xpbmtlZGluJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMDhjXCIsIFwiTTQxNiAzMkgzMS45QzE0LjMgMzIgMCA0Ni41IDAgNjQuM3YzODMuNEMwIDQ2NS41IDE0LjMgNDgwIDMxLjkgNDgwSDQxNmMxNy42IDAgMzItMTQuNSAzMi0zMi4zVjY0LjNjMC0xNy44LTE0LjQtMzIuMy0zMi0zMi4zek0xMzUuNCA0MTZINjlWMjAyLjJoNjYuNVY0MTZ6bS0zMy4yLTI0M2MtMjEuMyAwLTM4LjUtMTcuMy0zOC41LTM4LjVTODAuOSA5NiAxMDIuMiA5NmMyMS4yIDAgMzguNSAxNy4zIDM4LjUgMzguNSAwIDIxLjMtMTcuMiAzOC41LTM4LjUgMzguNXptMjgyLjEgMjQzaC02Ni40VjMxMmMwLTI0LjgtLjUtNTYuNy0zNC41LTU2LjctMzQuNiAwLTM5LjkgMjctMzkuOSA1NC45VjQxNmgtNjYuNFYyMDIuMmg2My43djI5LjJoLjljOC45LTE2LjggMzAuNi0zNC41IDYyLjktMzQuNSA2Ny4yIDAgNzkuNyA0NC4zIDc5LjcgMTAxLjlWNDE2elwiXVxufTtcbnZhciBmYUh1YnNwb3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaHVic3BvdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNiMlwiLCBcIk0yNjcuNCAyMTEuNmMtMjUuMSAyMy43LTQwLjggNTcuMy00MC44IDk0LjYgMCAyOS4zIDkuNyA1Ni4zIDI2IDc4TDIwMy4xIDQzNGMtNC40LTEuNi05LjEtMi41LTE0LTIuNS0xMC44IDAtMjAuOSA0LjItMjguNSAxMS44LTcuNiA3LjYtMTEuOCAxNy44LTExLjggMjguNnM0LjIgMjAuOSAxMS44IDI4LjVjNy42IDcuNiAxNy44IDExLjYgMjguNSAxMS42IDEwLjggMCAyMC45LTMuOSAyOC42LTExLjYgNy42LTcuNiAxMS44LTE3LjggMTEuOC0yOC41IDAtNC4yLS42LTguMi0xLjktMTIuMWw1MC01MC4yYzIyIDE2LjkgNDkuNCAyNi45IDc5LjMgMjYuOSA3MS45IDAgMTMwLTU4LjMgMTMwLTEzMC4yIDAtNjUuMi00Ny43LTExOS4yLTExMC4yLTEyOC43VjExNmMxNy41LTcuNCAyOC4yLTIzLjggMjguMi00Mi45IDAtMjYuMS0yMC45LTQ3LjktNDctNDcuOVMzMTEuMiA0NyAzMTEuMiA3My4xYzAgMTkuMSAxMC43IDM1LjUgMjguMiA0Mi45djYxLjJjLTE1LjIgMi4xLTI5LjYgNi43LTQyLjcgMTMuNi0yNy42LTIwLjktMTE3LjUtODUuNy0xNjguOS0xMjQuOCAxLjItNC40IDItOSAyLTEzLjhDMTI5LjggMjMuNCAxMDYuMyAwIDc3LjQgMCA0OC42IDAgMjUuMiAyMy40IDI1LjIgNTIuMmMwIDI4LjkgMjMuNCA1Mi4zIDUyLjIgNTIuMyA5LjggMCAxOC45LTIuOSAyNi44LTcuNmwxNjMuMiAxMTQuN3ptODkuNSAxNjMuNmMtMzguMSAwLTY5LTMwLjktNjktNjlzMzAuOS02OSA2OS02OSA2OSAzMC45IDY5IDY5LTMwLjkgNjktNjkgNjl6XCJdXG59O1xudmFyIGZhRGVwbG95ZG9nID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2RlcGxveWRvZycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjM4ZVwiLCBcIk0zODIuMiAxMzZoNTEuN3YyMzkuNmgtNTEuN3YtMjAuN2MtMTkuOCAyNC44LTUyLjggMjQuMS03My44IDE0LjctMjYuMi0xMS43LTQ0LjMtMzguMS00NC4zLTcxLjggMC0yOS44IDE0LjgtNTcuOSA0My4zLTcwLjggMjAuMi05LjEgNTIuNy0xMC42IDc0LjggMTIuOVYxMzZ6bS02NC43IDE2MS44YzAgMTguMiAxMy42IDMzLjUgMzMuMiAzMy41IDE5LjggMCAzMy4yLTE2LjQgMzMuMi0zMi45IDAtMTcuMS0xMy43LTMzLjItMzMuMi0zMy4yLTE5LjYgMC0zMy4yIDE2LjQtMzMuMiAzMi42ek0xODguNSAxMzZoNTEuN3YyMzkuNmgtNTEuN3YtMjAuN2MtMTkuOCAyNC44LTUyLjggMjQuMS03My44IDE0LjctMjYuMi0xMS43LTQ0LjMtMzguMS00NC4zLTcxLjggMC0yOS44IDE0LjgtNTcuOSA0My4zLTcwLjggMjAuMi05LjEgNTIuNy0xMC42IDc0LjggMTIuOVYxMzZ6bS02NC43IDE2MS44YzAgMTguMiAxMy42IDMzLjUgMzMuMiAzMy41IDE5LjggMCAzMy4yLTE2LjQgMzMuMi0zMi45IDAtMTcuMS0xMy43LTMzLjItMzMuMi0zMy4yLTE5LjcgMC0zMy4yIDE2LjQtMzMuMiAzMi42ek00NDggOTZjMTcuNSAwIDMyIDE0LjQgMzIgMzJ2MjU2YzAgMTcuNS0xNC40IDMyLTMyIDMySDY0Yy0xNy41IDAtMzItMTQuNC0zMi0zMlYxMjhjMC0xNy41IDE0LjQtMzIgMzItMzJoMzg0bTAtMzJINjRDMjguOCA2NCAwIDkyLjggMCAxMjh2MjU2YzAgMzUuMiAyOC44IDY0IDY0IDY0aDM4NGMzNS4yIDAgNjQtMjguOCA2NC02NFYxMjhjMC0zNS4yLTI4LjgtNjQtNjQtNjR6XCJdXG59O1xudmFyIGZhVHdpdGNoID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3R3aXRjaCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjFlOFwiLCBcIk0zOTEuMTcsMTAzLjQ3SDM1Mi41NHYxMDkuN2gzOC42M1pNMjg1LDEwM0gyNDYuMzdWMjEyLjc1SDI4NVpNMTIwLjgzLDAsMjQuMzEsOTEuNDJWNDIwLjU4SDE0MC4xNFY1MTJsOTYuNTMtOTEuNDJoNzcuMjVMNDg3LjY5LDI1NlYwWk00NDkuMDcsMjM3Ljc1bC03Ny4yMiw3My4xMkgyOTQuNjFsLTY3LjYsNjR2LTY0SDE0MC4xNFYzNi41OEg0NDkuMDdaXCJdXG59O1xudmFyIGZhUmF2ZWxyeSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyYXZlbHJ5JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMmQ5XCIsIFwiTTQ5OC4yNTIsMjM0LjIyM2MtMS4yMDgtMTAuMzQtMS43LTIwLjgyNi0zLjc0Ni0zMWEzMTAuMzA2LDMxMC4zMDYsMCwwLDAtOS42MjItMzYuNiwxODQuMDY4LDE4NC4wNjgsMCwwLDAtMzAuODc0LTU3LjUsMjUxLjE1NCwyNTEuMTU0LDAsMCwwLTE4LjgxOC0yMS42ODksMjM3LjM2MiwyMzcuMzYyLDAsMCwwLTQ3LjExMy0zNi4xMTZBMjQwLjgsMjQwLjgsMCwwLDAsMzMxLjM1NiwyNi42NWMtMTEuMDE4LTMuMS0yMi4yNzItNS40MzEtMzMuNTE1LTcuNjE1LTYuNzgtMS4zMTQtMTMuNzQ5LTEuNjY3LTIwLjYyNy0yLjQ4Mi0uMzE2LS4wMzYtLjYtLjM1OC0uOS0uNTUzcS0xNi4xNDMuMDA5LTMyLjI4OC4wMDZjLTIuNDEuMzg5LTQuODA4LjkyNS03LjIzNiwxLjE1YTE3OS4zMzEsMTc5LjMzMSwwLDAsMC0zNC4yNTYsNy4xLDIyMS41LDIyMS41LDAsMCwwLTM5Ljc2OCwxNi4zNTUsMjgxLjM4NSwyODEuMzg1LDAsMCwwLTM4LjA4LDI0LjE1OGMtNi4xNjcsNC42MS0xMi4yNjgsOS4zNi0xNy45NzQsMTQuNTE4Qzk2LjUzOSw4OC40OTQsODYuMzQsOTcuNzIsNzYuNzg1LDEwNy41NTVhMjQzLjg3OCwyNDMuODc4LDAsMCwwLTMzLjY0OCw0My45NSwyMDYuNDg4LDIwNi40ODgsMCwwLDAtMjAuNDk0LDQ0LjYsMTk4LjIsMTk4LjIsMCwwLDAtNy42OTEsMzQuNzU5QTIwMS4xMywyMDEuMTMsMCwwLDAsMTMuNCwyNjYuMzg1YTI5OS43MTYsMjk5LjcxNiwwLDAsMCw0LjQyNSw0MC4yNCwyMjYuODY1LDIyNi44NjUsMCwwLDAsMTYuNzMsNTMuMywyMTAuNTQzLDIxMC41NDMsMCwwLDAsMjQsMzkuNTI4LDIxMy41ODksMjEzLjU4OSwwLDAsMCwyNi4zNTgsMjguNDE2QTI1MS4zMTMsMjUxLjMxMywwLDAsMCwxMjYuNyw0NTguNDU1YTI4Ny44MzEsMjg3LjgzMSwwLDAsMCw1NS45LDI1LjI3NywyNjkuNSwyNjkuNSwwLDAsMCw0MC42NDEsOS44MzVjNi4wNzEsMS4wMSwxMi4yNzUsMS4yNTMsMTguNDEyLDEuODczYTQuMTQ5LDQuMTQ5LDAsMCwxLDEuMTkuNTZoMzIuMjg5YzIuNTA3LS4zODksNS0uOTM3LDcuNTI3LTEuMTQzLDE2LjMzNi0xLjMzMiwzMi4xMDctNS4zMzUsNDcuNDg5LTEwLjcxN0EyMTkuOTkyLDIxOS45OTIsMCwwLDAsMzc5LjEsNDYwLjMyMmM5Ljc0OS02LjQ0NywxOS4zOTUtMTMuMDc3LDI4LjczNy0yMC4xLDUuNzg1LTQuMzQ4LDEwLjk4OC05LjUsMTYuMy0xNC40NTcsMy45NjQtMy43LDcuNzY0LTcuNTc4LDExLjUxLTExLjVhMjMyLjE2MiwyMzIuMTYyLDAsMCwwLDMxLjQyNy00MS42MzljOS41NDItMTYuMDQ1LDE3LjM1NS0zMi45MDUsMjIuMy01MC45MjYsMi44NTktMTAuNDEzLDQuOTQ3LTIxLjA0NSw3LjAxNy0zMS42NTIsMS4wMzItNS4yNzksMS4yNTEtMTAuNzIzLDEuODctMTYuMDg3LjAzNi0uMzE3LjM1OC0uNi41NTItLjlWMjM2LjAwNUE5Ljc1Nyw5Ljc1NywwLDAsMSw0OTguMjUyLDIzNC4yMjNabS0xNjEuMTE3LTEuMTVzLTE2LjU3Mi0yLjk4LTI4LjQ3LTIuOThjLTI3LjIsMC0zMy41NywxNC45LTMzLjU3LDM3LjA0VjM2MC44SDIwMS41ODJWMTcwLjA2MkgyNzUuMXYzMS45MzFjOC45MjQtMjYuODIyLDI2Ljc3MS0zNi4xODksNjIuMDQtMzYuMTg5WlwiXVxufTtcbnZhciBmYU1peGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ21peGVyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJlMDU2XCIsIFwiTTExNC41Nyw3Ni4wN2E0NS43MSw0NS43MSwwLDAsMC02Ny41MS02LjQxYy0xNy41OCwxNi4xOC0xOSw0My41Mi00Ljc1LDYyLjc3bDkxLjc4LDEyM0w0MS43NiwzNzkuNThjLTE0LjIzLDE5LjI1LTEzLjExLDQ2LjU5LDQuNzQsNjIuNzdBNDUuNzEsNDUuNzEsMCwwLDAsMTE0LDQzNS45NEwyNDIuODksMjYyLjdhMTIuMTQsMTIuMTQsMCwwLDAsMC0xNC4yM1pNNDcwLjI0LDM3OS41OCwzNzcuOTEsMjU1LjQ1bDkxLjc4LTEyM2MxNC4yMi0xOS4yNSwxMi44My00Ni41OS00Ljc1LTYyLjc3YTQ1LjcxLDQ1LjcxLDAsMCwwLTY3LjUxLDYuNDFsLTEyOCwxNzIuMTJhMTIuMTQsMTIuMTQsMCwwLDAsMCwxNC4yM0wzOTgsNDM1Ljk0YTQ1LjcxLDQ1LjcxLDAsMCwwLDY3LjUxLDYuNDFDNDgzLjM1LDQyNi4xNyw0ODQuNDcsMzk4LjgzLDQ3MC4yNCwzNzkuNThaXCJdXG59O1xudmFyIGZhU3F1YXJlTGFzdGZtID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS1sYXN0Zm0nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImxhc3RmbS1zcXVhcmVcIl0sIFwiZjIwM1wiLCBcIk00NDggOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2ek0yMTAuNyAyODAuOGMtMS44LTUuNS0zLjQtMTAuOC01LTE1LjljLTEyLjktNDEuOS0yMS02OC40LTU4LTY4LjRjLTIyLjQgMC00NS4xIDE2LjEtNDUuMSA2MS4yYzAgMzUuMiAxOCA1Ny4yIDQzLjMgNTcuMmMyOC42IDAgNDcuNi0yMS4zIDQ3LjYtMjEuM2wxMS43IDMxLjlzLTE5LjggMTkuNC02MS4yIDE5LjRjLTUxLjMgMC03OS45LTMwLjEtNzkuOS04NS44YzAtNTcuOSAyOC42LTkyIDgyLjUtOTJjNjcuOSAwIDc5LjMgMzUuMyA5Ni40IDg4LjRjMS40IDQuNCAyLjkgOC45IDQuNCAxMy41YzguOCAyNi44IDI0LjIgNDYuMiA2MS4yIDQ2LjJjMjQuOSAwIDM4LjEtNS41IDM4LjEtMTkuMWMwLTE3LjUtMTYuOS0yMS4yLTQwLTI2LjRjLTMuMi0uNy02LjUtMS40LTkuOS0yLjJjLTMwLjQtNy4zLTQyLjUtMjMuMS00Mi41LTQ4YzAtNDAgMzIuMy01Mi40IDY1LjItNTIuNGMzNy40IDAgNjAuMSAxMy42IDYzIDQ2LjZsLTM2LjcgNC40Yy0xLjUtMTUuOC0xMS0yMi40LTI4LjYtMjIuNGMtMTYuMSAwLTI2IDcuMy0yNiAxOS44YzAgMTEgNC44IDE3LjYgMjAuOSAyMS4zYzIuMiAuNSA0LjUgMSA2LjcgMS40YzMxLjEgNi41IDY1LjEgMTMuNyA2NS4xIDU2LjFjLjEgMzYuNy0zMC43IDUwLjYtNzYuMSA1MC42Yy02My40IDAtODUuNC0yOC42LTk3LjEtNjQuMXpcIl1cbn07XG52YXIgZmFMYXN0Zm1TcXVhcmUgPSBmYVNxdWFyZUxhc3RmbTtcbnZhciBmYVZpbWVvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3ZpbWVvJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNDBhXCIsIFwiTTQwMy4yIDMySDQ0LjhDMjAuMSAzMiAwIDUyLjEgMCA3Ni44djM1OC40QzAgNDU5LjkgMjAuMSA0ODAgNDQuOCA0ODBoMzU4LjRjMjQuNyAwIDQ0LjgtMjAuMSA0NC44LTQ0LjhWNzYuOGMwLTI0LjctMjAuMS00NC44LTQ0LjgtNDQuOHpNMzc3IDE4MC44Yy0xLjQgMzEuNS0yMy40IDc0LjctNjYgMTI5LjQtNDQgNTcuMi04MS4zIDg1LjgtMTExLjcgODUuOC0xOC45IDAtMzQuOC0xNy40LTQ3LjktNTIuMy0yNS41LTkzLjMtMzYuNC0xNDgtNTcuNC0xNDgtMi40IDAtMTAuOSA1LjEtMjUuNCAxNS4ybC0xNS4yLTE5LjZjMzcuMy0zMi44IDcyLjktNjkuMiA5NS4yLTcxLjIgMjUuMi0yLjQgNDAuNyAxNC44IDQ2LjUgNTEuNyAyMC43IDEzMS4yIDI5LjkgMTUxIDY3LjYgOTEuNiAxMy41LTIxLjQgMjAuOC0zNy43IDIxLjgtNDguOSAzLjUtMzMuMi0yNS45LTMwLjktNDUuOC0yMi40IDE1LjktNTIuMSA0Ni4zLTc3LjQgOTEuMi03NiAzMy4zLjkgNDkgMjIuNSA0Ny4xIDY0Ljd6XCJdXG59O1xudmFyIGZhTWVuZGVsZXkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWVuZGVsZXknLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY3YjNcIiwgXCJNNjI0LjYgMzI1LjJjLTEyLjMtMTIuNC0yOS43LTE5LjItNDguNC0xNy4yLTQzLjMtMS00OS43LTM0LjktMzcuNS05OC44IDIyLjgtNTcuNS0xNC45LTEzMS41LTg3LjQtMTMwLjgtNzcuNC43LTgxLjcgODItMTMwLjkgODItNDguMSAwLTU0LTgxLjMtMTMwLjktODItNzIuOS0uOC0xMTAuMSA3My4zLTg3LjQgMTMwLjggMTIuMiA2My45IDUuOCA5Ny44LTM3LjUgOTguOC0yMS4yLTIuMy0zNyA2LjUtNTMgMjIuNS0xOS45IDE5LjctMTkuMyA5NC44IDQyLjYgMTAyLjYgNDcuMSA1LjkgODEuNi00Mi45IDYxLjItODcuOC00Ny4zLTEwMy43IDE4NS45LTEwNi4xIDE0Ni41LTguMi0uMS4xLS4yLjItLjMuNC0yNi44IDQyLjggNi44IDk3LjQgNTguOCA5NS4yIDUyLjEgMi4xIDg1LjQtNTIuNiA1OC44LTk1LjItLjEtLjItLjItLjMtLjMtLjQtMzkuNC05Ny45IDE5My44LTk1LjUgMTQ2LjUgOC4yLTQuNiAxMC02LjcgMjEuMy01LjcgMzMgNC45IDUzLjQgNjguNyA3NC4xIDEwNC45IDM1LjIgMTcuOC0xNC44IDIzLjEtNjUuNiAwLTg4LjN6bS0zMDMuOS0xOS4xaC0uNmMtNDMuNCAwLTYyLjgtMzcuNS02Mi44LTYyLjggMC0zNC43IDI4LjItNjIuOCA2Mi44LTYyLjhoLjZjMzQuNyAwIDYyLjggMjguMSA2Mi44IDYyLjggMCAyNS0xOS4yIDYyLjgtNjIuOCA2Mi44elwiXVxufTtcbnZhciBmYVVuaXJlZ2lzdHJ5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3VuaXJlZ2lzdHJ5JyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmNDA0XCIsIFwiTTE5MiA0ODBjMzkuNSAwIDc2LjItMTEuOCAxMDYuOC0zMi4ySDg1LjNDMTE1LjggNDY4LjIgMTUyLjUgNDgwIDE5MiA0ODB6bS04OS4xLTE5My4xdi0xMi40SDB2MTIuNGMwIDIuNSAwIDUgLjEgNy40aDEwMy4xYy0uMi0yLjQtLjMtNC45LS4zLTcuNHptMjAuNSA1N0g4LjVjMi42IDguNSA1LjggMTYuOCA5LjYgMjQuOGgxMzguM2MtMTIuOS01LjctMjQuMS0xNC4yLTMzLTI0Ljh6bS0xNy43LTM0LjdIMS4zYy45IDcuNiAyLjIgMTUgMy45IDIyLjNoMTA5LjdjLTQtNi45LTcuMi0xNC40LTkuMi0yMi4zem0tMi44LTY5LjNIMHYxNy4zaDEwMi45em0wLTE3My4ySDB2NC45aDEwMi45em0wLTM0LjdIMHYyLjVoMTAyLjl6bTAgNjkuM0gwdjcuNGgxMDIuOXptMCAxMDRIMHYxNC44aDEwMi45em0wLTY5LjNIMHY5LjloMTAyLjl6bTAgMzQuNkgwVjE4M2gxMDIuOXptMTY2LjIgMTYwLjloMTA5LjdjMS44LTcuMyAzLjEtMTQuNyAzLjktMjIuM0gyNzguM2MtMi4xIDcuOS01LjIgMTUuNC05LjIgMjIuM3ptMTItMTg1LjdIMzg0VjEzNkgyODEuMXptMCAzNy4ySDM4NHYtMTIuNEgyODEuMXptMC03NC4zSDM4NHYtNy40SDI4MS4xem0wLTc2Ljd2Mi41SDM4NFYzMnptLTIwMyA0MTAuOWgyMjcuN2MxMS44LTguNyAyMi43LTE4LjYgMzIuMi0yOS43SDQ0LjljOS42IDExIDIxLjQgMjEgMzMuMiAyOS43em0yMDMtMzcxLjNIMzg0di00LjlIMjgxLjF6bTAgMTQ4LjVIMzg0di0xNC44SDI4MS4xek0zOC44IDQwNS43aDMwNS4zYzYuNy04LjUgMTIuNi0xNy42IDE3LjgtMjcuMkgyM2M1LjIgOS42IDkuMiAxOC43IDE1LjggMjcuMnptMTg4LjgtMzcuMUgzNjdjMy43LTggNS44LTE2LjIgOC41LTI0LjhoLTExNWMtOC44IDEwLjctMjAuMSAxOS4yLTMyLjkgMjQuOHptNTMuNS04MS43YzAgMi41LS4xIDUtLjQgNy40aDEwMy4xYy4xLTIuNS4yLTQuOS4yLTcuNHYtMTIuNEgyODEuMXptMC0yOS43SDM4NHYtMTcuM0gyODEuMXpcIl1cbn07XG52YXIgZmFGaWdtYSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmaWdtYScsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjc5OVwiLCBcIk0xNCA5NS43OTI0QzE0IDQyLjg4NzcgNTYuODg3OCAwIDEwOS43OTMgMEgyNzQuMTYxQzMyNy4wNjYgMCAzNjkuOTU0IDQyLjg4NzcgMzY5Ljk1NCA5NS43OTI0QzM2OS45NTQgMTI5LjI5MiAzNTIuNzU4IDE1OC43NzYgMzI2LjcxMSAxNzUuODk3QzM1Mi43NTggMTkzLjAxOSAzNjkuOTU0IDIyMi41MDIgMzY5Ljk1NCAyNTYuMDAyQzM2OS45NTQgMzA4LjkwNyAzMjcuMDY2IDM1MS43OTUgMjc0LjE2MSAzNTEuNzk1SDI3Mi4wODFDMjQ3LjI3OSAzNTEuNzk1IDIyNC42NzggMzQyLjM2OSAyMDcuNjY2IDMyNi45MDRWNDE1LjE2N0MyMDcuNjY2IDQ2OC43NzcgMTYzLjY1NyA1MTIgMTEwLjMwOSA1MTJDNTcuNTM2MSA1MTIgMTQgNDY5LjI0MyAxNCA0MTYuMjA3QzE0IDM4Mi43MDkgMzEuMTk0NSAzNTMuMjI3IDU3LjIzOTIgMzM2LjEwNUMzMS4xOTQ1IDMxOC45ODMgMTQgMjg5LjUgMTQgMjU2LjAwMkMxNCAyMjIuNTAyIDMxLjE5NiAxOTMuMDE5IDU3LjI0MjUgMTc1Ljg5N0MzMS4xOTYgMTU4Ljc3NiAxNCAxMjkuMjkyIDE0IDk1Ljc5MjRaTTE3Ni4yODggMTkxLjU4N0gxMDkuNzkzQzc0LjIxNzIgMTkxLjU4NyA0NS4zNzc4IDIyMC40MjcgNDUuMzc3OCAyNTYuMDAyQzQ1LjM3NzggMjkxLjQ0IDczLjk5NDggMzIwLjE5NCAxMDkuMzgxIDMyMC40MTZDMTA5LjUxOCAzMjAuNDE1IDEwOS42NTUgMzIwLjQxNSAxMDkuNzkzIDMyMC40MTVIMTc2LjI4OFYxOTEuNTg3Wk0yMDcuNjY2IDI1Ni4wMDJDMjA3LjY2NiAyOTEuNTc3IDIzNi41MDUgMzIwLjQxNyAyNzIuMDgxIDMyMC40MTdIMjc0LjE2MUMzMDkuNzM3IDMyMC40MTcgMzM4LjU3NiAyOTEuNTc3IDMzOC41NzYgMjU2LjAwMkMzMzguNTc2IDIyMC40MjcgMzA5LjczNyAxOTEuNTg3IDI3NC4xNjEgMTkxLjU4N0gyNzIuMDgxQzIzNi41MDUgMTkxLjU4NyAyMDcuNjY2IDIyMC40MjcgMjA3LjY2NiAyNTYuMDAyWk0xMDkuNzkzIDM1MS43OTVDMTA5LjY1NSAzNTEuNzk1IDEwOS41MTggMzUxLjc5NCAxMDkuMzgxIDM1MS43OTRDNzMuOTk0OCAzNTIuMDE1IDQ1LjM3NzggMzgwLjc2OSA0NS4zNzc4IDQxNi4yMDdDNDUuMzc3OCA0NTEuNjUyIDc0LjYwMjUgNDgwLjYyMiAxMTAuMzA5IDQ4MC42MjJDMTQ2LjU5MSA0ODAuNjIyIDE3Ni4yODggNDUxLjE4NiAxNzYuMjg4IDQxNS4xNjdWMzUxLjc5NUgxMDkuNzkzWk0xMDkuNzkzIDMxLjM3NzhDNzQuMjE3MiAzMS4zNzc4IDQ1LjM3NzggNjAuMjE3MyA0NS4zNzc4IDk1Ljc5MjRDNDUuMzc3OCAxMzEuMzY4IDc0LjIxNzIgMTYwLjIwNyAxMDkuNzkzIDE2MC4yMDdIMTc2LjI4OFYzMS4zNzc4SDEwOS43OTNaTTIwNy42NjYgMTYwLjIwN0gyNzQuMTYxQzMwOS43MzcgMTYwLjIwNyAzMzguNTc2IDEzMS4zNjggMzM4LjU3NiA5NS43OTI0QzMzOC41NzYgNjAuMjE3MyAzMDkuNzM3IDMxLjM3NzggMjc0LjE2MSAzMS4zNzc4SDIwNy42NjZWMTYwLjIwN1pcIl1cbn07XG52YXIgZmFDcmVhdGl2ZUNvbW1vbnNSZW1peCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjcmVhdGl2ZS1jb21tb25zLXJlbWl4JyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNGVlXCIsIFwiTTI0Ny42IDhDMzg5LjQgOCA0OTYgMTE4LjEgNDk2IDI1NmMwIDE0Ny4xLTExOC41IDI0OC0yNDguNCAyNDhDMTEzLjYgNTA0IDAgMzk0LjUgMCAyNTYgMCAxMjMuMSAxMDQuNyA4IDI0Ny42IDh6bS44IDQ0LjdDMTMwLjIgNTIuNyA0NC43IDE1MC42IDQ0LjcgMjU2YzAgMTA5LjggOTEuMiAyMDIuOCAyMDMuNyAyMDIuOCAxMDMuMiAwIDIwMi44LTgxLjEgMjAyLjgtMjAyLjguMS0xMTMuOC05MC4yLTIwMy4zLTIwMi44LTIwMy4zem0xNjEuNyAyMDcuN2w0LjkgMi4ydjcwYy03LjIgMy42LTYzLjQgMjcuNS02Ny4zIDI4LjgtNi41LTEuOC0xMTMuNy00Ni44LTEzNy4zLTU2LjJsLTY0LjIgMjYuNi02My4zLTI3LjV2LTYzLjhsNTkuMy0yNC44Yy0uNy0uNy0uNCA1LS40LTcwLjRsNjcuMy0yOS43TDM2MSAxNzguNXY2MS42bDQ5LjEgMjAuM3ptLTcwLjQgODEuNXYtNDMuOGgtLjR2LTEuOGwtMTEzLjgtNDYuNVYyOTVsMTEzLjggNDYuOXYtLjRsLjQuNHptNy41LTU3LjZsMzkuOS0xNi40LTM2LjgtMTUuNS0zOSAxNi40IDM1LjkgMTUuNXptNTIuMyAzOC4xdi00M0wzNTUuMiAyOTh2NDMuNGw0NC4zLTE5elwiXVxufTtcbnZhciBmYUNjQW1hem9uUGF5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NjLWFtYXpvbi1wYXknLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImY0MmRcIiwgXCJNMTI0LjcgMjAxLjhjLjEtMTEuOCAwLTIzLjUgMC0zNS4zdi0zNS4zYzAtMS4zLjQtMiAxLjQtMi43IDExLjUtOCAyNC4xLTEyLjEgMzguMi0xMS4xIDEyLjUuOSAyMi43IDcgMjguMSAyMS43IDMuMyA4LjkgNC4xIDE4LjIgNC4xIDI3LjcgMCA4LjctLjcgMTcuMy0zLjQgMjUuNi01LjcgMTcuOC0xOC43IDI0LjctMzUuNyAyMy45LTExLjctLjUtMjEuOS01LTMxLjQtMTEuNy0uOS0uOC0xLjQtMS42LTEuMy0yLjh6bTE1NC45IDE0LjZjNC42IDEuOCA5LjMgMiAxNC4xIDEuNSAxMS42LTEuMiAyMS45LTUuNyAzMS4zLTEyLjUuOS0uNiAxLjMtMS4zIDEuMy0yLjUtLjEtMy45IDAtNy45IDAtMTEuOCAwLTQtLjEtOCAwLTEyIDAtMS40LS40LTItMS44LTIuMi03LS45LTEzLjktMi4yLTIwLjktMi45LTctLjYtMTQtLjMtMjAuOCAxLjktNi43IDIuMi0xMS43IDYuMi0xMy43IDEzLjEtMS42IDUuNC0xLjYgMTAuOC4xIDE2LjIgMS42IDUuNSA1LjIgOS4yIDEwLjQgMTEuMnpNNTc2IDgwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoNDgwYzI2LjUgMCA0OCAyMS41IDQ4IDQ4em0tMjA3LjUgMjMuOWMuNCAxLjcuOSAzLjQgMS42IDUuMSAxNi41IDQwLjYgMzIuOSA4MS4zIDQ5LjUgMTIxLjkgMS40IDMuNSAxLjcgNi40LjIgOS45LTIuOCA2LjItNC45IDEyLjYtNy44IDE4LjctMi42IDUuNS02LjcgOS41LTEyLjcgMTEuMi00LjIgMS4xLTguNSAxLjMtMTIuOS45LTIuMS0uMi00LjItLjctNi4zLS44LTIuOC0uMi00LjIgMS4xLTQuMyA0LS4xIDIuOC0uMSA1LjYgMCA4LjMuMSA0LjYgMS42IDYuNyA2LjIgNy41IDQuNy44IDkuNCAxLjYgMTQuMiAxLjcgMTQuMy4zIDI1LjctNS40IDMzLjEtMTcuOSAyLjktNC45IDUuNi0xMC4xIDcuNy0xNS40IDE5LjgtNTAuMSAzOS41LTEwMC4zIDU5LjItMTUwLjUuNi0xLjUgMS4xLTMgMS4zLTQuNi40LTIuNC0uNy0zLjYtMy4xLTMuNy01LjYtLjEtMTEuMSAwLTE2LjcgMC0zLjEgMC01LjMgMS40LTYuNCA0LjMtLjQgMS4xLS45IDIuMy0xLjMgMy40bC0yOS4xIDgzLjdjLTIuMSA2LjEtNC4yIDEyLjEtNi41IDE4LjYtLjQtLjktLjYtMS40LS44LTEuOS0xMC44LTI5LjktMjEuNi01OS45LTMyLjQtODkuOC0xLjctNC43LTMuNS05LjUtNS4zLTE0LjItLjktMi41LTIuNy00LTUuNC00LTYuNC0uMS0xMi44LS4yLTE5LjItLjEtMi4yIDAtMy4zIDEuNi0yLjggMy43ek0yNDIuNCAyMDZjMS43IDExLjcgNy42IDIwLjggMTggMjYuNiA5LjkgNS41IDIwLjcgNi4yIDMxLjcgNC42IDEyLjctMS45IDIzLjktNy4zIDMzLjgtMTUuNS40LS4zLjgtLjYgMS40LTEgLjUgMy4yLjkgNi4yIDEuNSA5LjIuNSAyLjYgMi4xIDQuMyA0LjUgNC40IDQuNi4xIDkuMS4xIDEzLjcgMCAyLjMtLjEgMy44LTEuNiA0LTMuOS4xLS44LjEtMS42LjEtMi4zdi04OC44YzAtMy42LS4yLTcuMi0uNy0xMC44LTEuNi0xMC44LTYuMi0xOS43LTE1LjktMjUuNC01LjYtMy4zLTExLjgtNS0xOC4yLTUuOS0zLS40LTYtLjctOS4xLTEuMWgtMTBjLS44LjEtMS42LjMtMi41LjMtOC4yLjQtMTYuMyAxLjQtMjQuMiAzLjUtNS4xIDEuMy0xMCAzLjItMTUgNC45LTMgMS00LjUgMy4yLTQuNCA2LjUuMSAyLjgtLjEgNS42IDAgOC4zLjEgNC4xIDEuOCA1LjIgNS43IDQuMSA2LjUtMS43IDEzLjEtMy41IDE5LjctNC44IDEwLjMtMS45IDIwLjctMi43IDMxLjEtMS4yIDUuNC44IDEwLjUgMi40IDE0LjEgNyAzLjEgNCA0LjIgOC44IDQuNCAxMy43LjMgNi45LjIgMTMuOS4zIDIwLjggMCAuNC0uMS43LS4yIDEuMi0uNCAwLS44IDAtMS4xLS4xLTguOC0yLjEtMTcuNy0zLjYtMjYuOC00LjEtOS41LS41LTE4LjkuMS0yNy45IDMuMi0xMC44IDMuOC0xOS41IDEwLjMtMjQuNiAyMC44LTQuMSA4LjMtNC42IDE3LTMuNCAyNS44ek05OC43IDEwNi45djE3NS4zYzAgLjggMCAxLjcuMSAyLjUuMiAyLjUgMS43IDQuMSA0LjEgNC4yIDUuOS4xIDExLjguMSAxNy43IDAgMi41IDAgNC0xLjcgNC4xLTQuMS4xLS44LjEtMS43LjEtMi41di02MC43Yy45LjcgMS40IDEuMiAxLjkgMS42IDE1IDEyLjUgMzIuMiAxNi42IDUxLjEgMTIuOSAxNy4xLTMuNCAyOC45LTEzLjkgMzYuNy0yOS4yIDUuOC0xMS42IDguMy0yNC4xIDguNy0zNyAuNS0xNC4zLTEtMjguNC02LjgtNDEuNy03LjEtMTYuNC0xOC45LTI3LjMtMzYuNy0zMC45LTIuNy0uNi01LjUtLjgtOC4yLTEuMmgtN2MtMS4yLjItMi40LjMtMy42LjUtMTEuNyAxLjQtMjIuMyA1LjgtMzEuOCAxMi43LTIgMS40LTMuOSAzLTUuOSA0LjUtLjEtLjUtLjMtLjgtLjQtMS4yLS40LTIuMy0uNy00LjYtMS4xLTYuOS0uNi0zLjktMi41LTUuNS02LjQtNS42aC05LjdjLTUuOS0uMS02LjkgMS02LjkgNi44ek00OTMuNiAzMzljLTIuNy0uNy01LjEgMC03LjYgMS00My45IDE4LjQtODkuNSAzMC4yLTEzNi44IDM1LjgtMTQuNSAxLjctMjkuMSAyLjgtNDMuNyAzLjItMjYuNi43LTUzLjItLjgtNzkuNi00LjMtMTcuOC0yLjQtMzUuNS01LjctNTMtOS45LTM3LTguOS03Mi43LTIxLjctMTA2LjctMzguOC04LjgtNC40LTE3LjQtOS4zLTI2LjEtMTQtMy44LTIuMS02LjItMS41LTguMiAyLjF2MS43YzEuMiAxLjYgMi4yIDMuNCAzLjcgNC44IDM2IDMyLjIgNzYuNiA1Ni41IDEyMiA3Mi45IDIxLjkgNy45IDQ0LjQgMTMuNyA2Ny4zIDE3LjUgMTQgMi4zIDI4IDMuOCA0Mi4yIDQuNSAzIC4xIDYgLjIgOSAuNC43IDAgMS40LjIgMi4xLjNoMTcuN2MuNy0uMSAxLjQtLjMgMi4xLS4zIDE0LjktLjQgMjkuOC0xLjggNDQuNi00IDIxLjQtMy4yIDQyLjQtOC4xIDYyLjktMTQuNyAyOS42LTkuNiA1Ny43LTIyLjQgODMuNC00MC4xIDIuOC0xLjkgNS43LTMuOCA4LTYuMiA0LjMtNC40IDIuMy0xMC40LTMuMy0xMS45em01MC40LTI3LjdjLS44LTQuMi00LTUuOC03LjYtNy01LjctMS45LTExLjYtMi44LTE3LjYtMy4zLTExLS45LTIyLS40LTMyLjggMS42LTEyIDIuMi0yMy40IDYuMS0zMy41IDEzLjEtMS4yLjgtMi40IDEuOC0zLjEgMy0uNi45LS43IDIuMy0uNSAzLjQuMyAxLjMgMS43IDEuNiAzIDEuNS42IDAgMS4yIDAgMS44LS4xbDE5LjUtMi4xYzkuNi0uOSAxOS4yLTEuNSAyOC44LS44IDQuMS4zIDguMSAxLjIgMTIgMi4yIDQuMyAxLjEgNi4yIDQuNCA2LjQgOC43LjMgNi43LTEuMiAxMy4xLTIuOSAxOS41LTMuNSAxMi45LTguMyAyNS40LTEzLjMgMzcuOC0uMy44LS43IDEuNy0uOCAyLjUtLjQgMi41IDEgNCAzLjQgMy41IDEuNC0uMyAzLTEuMSA0LTIuMSAzLjctMy42IDcuNS03LjIgMTAuNi0xMS4yIDEwLjctMTMuOCAxNy0yOS42IDIwLjctNDYuNi43LTMgMS4yLTYuMSAxLjctOS4xLjItNC43LjItOS42LjItMTQuNXpcIl1cbn07XG52YXIgZmFEcm9wYm94ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2Ryb3Bib3gnLFxuICBpY29uOiBbNTI4LCA1MTIsIFtdLCBcImYxNmJcIiwgXCJNMjY0LjQgMTE2LjNsLTEzMiA4NC4zIDEzMiA4NC4zLTEzMiA4NC4zTDAgMjg0LjFsMTMyLjMtODQuM0wwIDExNi4zIDEzMi4zIDMybDEzMi4xIDg0LjN6TTEzMS42IDM5NS43bDEzMi04NC4zIDEzMiA4NC4zLTEzMiA4NC4zLTEzMi04NC4zem0xMzIuOC0xMTEuNmwxMzItODQuMy0xMzItODMuNkwzOTUuNyAzMiA1MjggMTE2LjNsLTEzMi4zIDg0LjNMNTI4IDI4NC44bC0xMzIuMyA4NC4zLTEzMS4zLTg1elwiXVxufTtcbnZhciBmYUluc3RhZ3JhbSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdpbnN0YWdyYW0nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxNmRcIiwgXCJNMjI0LjEgMTQxYy02My42IDAtMTE0LjkgNTEuMy0xMTQuOSAxMTQuOXM1MS4zIDExNC45IDExNC45IDExNC45UzMzOSAzMTkuNSAzMzkgMjU1LjkgMjg3LjcgMTQxIDIyNC4xIDE0MXptMCAxODkuNmMtNDEuMSAwLTc0LjctMzMuNS03NC43LTc0LjdzMzMuNS03NC43IDc0LjctNzQuNyA3NC43IDMzLjUgNzQuNyA3NC43LTMzLjYgNzQuNy03NC43IDc0Ljd6bTE0Ni40LTE5NC4zYzAgMTQuOS0xMiAyNi44LTI2LjggMjYuOC0xNC45IDAtMjYuOC0xMi0yNi44LTI2LjhzMTItMjYuOCAyNi44LTI2LjggMjYuOCAxMiAyNi44IDI2Ljh6bTc2LjEgMjcuMmMtMS43LTM1LjktOS45LTY3LjctMzYuMi05My45LTI2LjItMjYuMi01OC0zNC40LTkzLjktMzYuMi0zNy0yLjEtMTQ3LjktMi4xLTE4NC45IDAtMzUuOCAxLjctNjcuNiA5LjktOTMuOSAzNi4xcy0zNC40IDU4LTM2LjIgOTMuOWMtMi4xIDM3LTIuMSAxNDcuOSAwIDE4NC45IDEuNyAzNS45IDkuOSA2Ny43IDM2LjIgOTMuOXM1OCAzNC40IDkzLjkgMzYuMmMzNyAyLjEgMTQ3LjkgMi4xIDE4NC45IDAgMzUuOS0xLjcgNjcuNy05LjkgOTMuOS0zNi4yIDI2LjItMjYuMiAzNC40LTU4IDM2LjItOTMuOSAyLjEtMzcgMi4xLTE0Ny44IDAtMTg0Ljh6TTM5OC44IDM4OGMtNy44IDE5LjYtMjIuOSAzNC43LTQyLjYgNDIuNi0yOS41IDExLjctOTkuNSA5LTEzMi4xIDlzLTEwMi43IDIuNi0xMzIuMS05Yy0xOS42LTcuOC0zNC43LTIyLjktNDIuNi00Mi42LTExLjctMjkuNS05LTk5LjUtOS0xMzIuMXMtMi42LTEwMi43IDktMTMyLjFjNy44LTE5LjYgMjIuOS0zNC43IDQyLjYtNDIuNiAyOS41LTExLjcgOTkuNS05IDEzMi4xLTlzMTAyLjctMi42IDEzMi4xIDljMTkuNiA3LjggMzQuNyAyMi45IDQyLjYgNDIuNiAxMS43IDI5LjUgOSA5OS41IDkgMTMyLjFzMi43IDEwMi43LTkgMTMyLjF6XCJdXG59O1xudmFyIGZhQ21wbGlkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NtcGxpZCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTM2MFwiLCBcIk0yMjYuMTE5LDM4OC4xNjVhMy44MTYsMy44MTYsMCwwLDAtMi4yOTQtMy41LDMuOTQ2LDMuOTQ2LDAsMCwwLTEuNjI5LS4zODVMNzIuNiwzODQuM2ExOS4yNDMsMTkuMjQzLDAsMCwxLTE3LjkyNC0yNi4wMjVMODEuNTg1LDI1NS42OTJhMzUuNzIsMzUuNzIsMCwwLDEsMzIuMzczLTI2SDI2Mi41MjVhNy4wNyw3LjA3LDAsMCwwLDYuMzkyLTUuMTk0bDEwLjc2OS00MS4xMzFhMy44NDksMy44NDksMCwwLDAtMi4yMzctNC45MzcsMy43NTUsMy43NTUsMCwwLDAtMS4zNzctLjI2MWMtLjA2MywwLS4xMjYsMC0uMTg5LjAwNUgxMjcuMzhhMTA2LjgsMTA2LjgsMCwwLDAtOTYuOTksNzcuMUwzLjQ4MywzNTguODI0QTU3LjQ2OSw1Ny40NjksMCwwLDAsNTcuMzE0LDQzNnExLjQzLDAsMi44Ni0uMDcySDIwOC43NDJhNy4xMzEsNy4xMzEsMCwwLDAsNi4zOTEtNS4xOTNMMjI1LjgzOSwzODkuNkEzLjgyLDMuODIsMCwwLDAsMjI2LjExOSwzODguMTY1Wk0zMDYuNjU4LDgxLjJhMy44NjEsMy44NjEsMCwwLDAsLjI1MS0xLjM2N0EzLjgxMywzLjgxMywwLDAsMCwzMDMuMDc5LDc2Yy0uMDY0LDAtLjEyOCwwLS4xOTIsMGgtNDFBNy4wMzQsNy4wMzQsMCwwLDAsMjU1LjUsODEuMmwtMjEuMzQ3LDgwLjkxNWg1MS4xMzFaTTE4MC4zNjQsMzY4LjI0OUgyMzEuNUwyNjMuNDUyLDI0NS42OUgyMTIuMzIxWk01MTEuODUzLDc5LjcyM2EzLjgwOSwzLjgwOSwwLDAsMC0zLjgtMy42NjFjLS4wNTgsMC0uMTM3LDAtLjIzLjAwN2gtNDFhNy4xLDcuMSwwLDAsMC02LjU4NCw1LjEyOUwzNjguOTEsNDMwLjYzNGEzLjU0LDMuNTQsMCwwLDAtLjI2MiwxLjMzNSwzLjg3MywzLjg3MywwLDAsMCwzLjg2NCwzLjg2M2MuMDU2LDAsLjExMiwwLC4xNjksMGg0MWE3LjA2OCw3LjA2OCwwLDAsMCw2LjM5Mi01LjE5M0w1MTEuNTMzLDgxLjJBMy42MjQsMy42MjQsMCwwLDAsNTExLjg1Myw3OS43MjNaTTMyNC42NDksMzg0LjQ3aC00MWE3LjIsNy4yLDAsMCwwLTYuMzkyLDUuMTk0TDI2Ni41Miw0MzAuOGEzLjY2MiwzLjY2MiwwLDAsMC0uMjY4LDEuMzc0QTMuNzgzLDMuNzgzLDAsMCwwLDI3MC4wMjMsNDM2Yy4wNiwwLC4xNjYsMCwuMy0uMDEyaDQwLjkwNWE3LjAzNiw3LjAzNiwwLDAsMCw2LjM5MS01LjE5M2wxMC43NjktNDEuMTMxYTMuNzUsMy43NSwwLDAsMC0zLjQ0NS01LjIwOGMtLjEwOCwwLS4yMTcsMC0uMzI2LjAxNFptMzExLjMyNC0zMDguNGgtNDFhNy4wNjYsNy4wNjYsMCwwLDAtNi4zOTIsNS4xMjlsLTkxLjQ2LDM0OS40MzZhNC4wNzMsNC4wNzMsMCwwLDAtLjIyOSwxLjM0NywzLjg3MiwzLjg3MiwwLDAsMCwzLjg2MywzLjg1MWMuMDU2LDAsLjExMiwwLC4xNjksMGg0MC45NjhhNy4xLDcuMSwwLDAsMCw2LjM5Mi01LjE5M0w2MzkuNjgsODEuMmEzLjYyNCwzLjYyNCwwLDAsMCwuMzItMS40NzUsMy44NDEsMy44NDEsMCwwLDAtMy44MjEtMy41NjRjLS4wNjgsMC0uMTM3LDAtLjIwNi4wMDZaTTM3MS41NjIsMjI1LjIzNmwxMC44LTQxLjFhNC4zNjksNC4zNjksMCwwLDAsLjIyNy0xLjM4OCwzLjg2OSwzLjg2OSwwLDAsMC0zLjg2MS0zLjg0MmMtLjA1NywwLS4xMTMsMC0uMTY5LDBoLTQxLjFhNy4yOTIsNy4yOTIsMCwwLDAtNi4zOTEsNS4yMjZsLTEwLjgzNCw0MS4xYTQuNDE3LDQuNDE3LDAsMCwwLS4yNiwxLjQ5M2MwLC4wNjksMCwuMTM4LDAsLjIwNmEzLjc3NiwzLjc3NiwwLDAsMCwzLjc1NywzLjUwN2MuMDc2LDAsLjE4LDAsLjMtLjAxMmg0MS4xMjlBNy4wMzQsNy4wMzQsMCwwLDAsMzcxLjU2MiwyMjUuMjM2WlwiXVxufTtcbnZhciBmYVVwd29yayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd1cHdvcmsnLFxuICBpY29uOiBbNjQxLCA1MTIsIFtdLCBcImU2NDFcIiwgXCJNNDk0LjcgMjk1LjZjLTUwLjMgMC04My41LTM4LjktOTIuOC01My45YzExLjktOTUuMyA0Ni44LTEyNS40IDkyLjgtMTI1LjRjNDUuNSAwIDgwLjkgMzYuNCA4MC45IDg5LjdzLTM1LjQgODkuNy04MC45IDg5Ljd6bTAtMjM3LjhjLTgxLjkgMC0xMjcuOCA1My40LTE0MSAxMDguNGMtMTQuOS0yOC0yNS45LTY1LjUtMzQuNS0xMDAuM0gyMDZ2MTQxYzAgNTEuMS0yMy4zIDg5LTY4LjggODlzLTcxLjYtMzcuOC03MS42LTg5bC41LTE0MUguOHYxNDFjMCA0MS4xIDEzLjMgNzguNCAzNy42IDEwNS4xYzI1IDI3LjUgNTkuMiA0MS44IDk4LjggNDEuOGM3OC44IDAgMTMzLjgtNjAuNCAxMzMuOC0xNDYuOVYxMTIuMWM4LjIgMzEuMiAyNy44IDkxLjEgNjUuMyAxNDMuNmwtMzUgMTk5LjRoNjYuNGwyMy4xLTE0MS4zYzcuNiA2LjMgMTUuNyAxMiAyNC4yIDE3YzIyLjIgMTQgNDcuNyAyMS45IDczLjkgMjIuOGMwIDAgNCAuMiA2LjEgLjJjODEuMiAwIDE0NS45LTYyLjkgMTQ1LjktMTQ3LjhzLTY0LjgtMTQ4LjEtMTQ2LTE0OC4xelwiXVxufTtcbnZhciBmYUZhY2Vib29rID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZhY2Vib29rJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbNjIwMDBdLCBcImYwOWFcIiwgXCJNNTEyIDI1NkM1MTIgMTE0LjYgMzk3LjQgMCAyNTYgMFMwIDExNC42IDAgMjU2QzAgMzc2IDgyLjcgNDc2LjggMTk0LjIgNTA0LjVWMzM0LjJIMTQxLjRWMjU2aDUyLjhWMjIyLjNjMC04Ny4xIDM5LjQtMTI3LjUgMTI1LTEyNy41YzE2LjIgMCA0NC4yIDMuMiA1NS43IDYuNFYxNzJjLTYtLjYtMTYuNS0xLTI5LjYtMWMtNDIgMC01OC4yIDE1LjktNTguMiA1Ny4yVjI1Nmg4My42bC0xNC40IDc4LjJIMjg3VjUxMC4xQzQxMy44IDQ5NC44IDUxMiAzODYuOSA1MTIgMjU2aDB6XCJdXG59O1xudmFyIGZhR3JpcGZpcmUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ3JpcGZpcmUnLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYzYWNcIiwgXCJNMTEyLjUgMzAxLjRjMC03My44IDEwNS4xLTEyMi41IDEwNS4xLTIwMyAwLTQ3LjEtMzQtODgtMzkuMS05MC40LjQgMy4zLjYgNi43LjYgMTBDMTc5LjEgMTEwLjEgMzIgMTcxLjkgMzIgMjg2LjZjMCA0OS44IDMyLjIgNzkuMiA2Ni41IDEwOC4zIDY1LjEgNDYuNyA3OC4xIDcxLjQgNzguMSA4Ni42IDAgMTAuMS00LjggMTctNC44IDIyLjMgMTMuMS0xNi43IDE3LjQtMzEuOSAxNy41LTQ2LjQgMC0yOS42LTIxLjctNTYuMy00NC4yLTg2LjUtMTYtMjIuMy0zMi42LTQyLjYtMzIuNi02OS41em0yMDUuMy0zOWMtMTIuMS02Ni44LTc4LTEyNC40LTk0LjctMTMwLjlsNCA3LjJjMi40IDUuMSAzLjQgMTAuOSAzLjQgMTcuMSAwIDQ0LjctNTQuMiAxMTEuMi01Ni42IDExNi43LTIuMiA1LjEtMy4yIDEwLjUtMy4yIDE1LjggMCAyMC4xIDE1LjIgNDIuMSAxNy45IDQyLjEgMi40IDAgNTYuNi01NS40IDU4LjEtODcuNyA2LjQgMTEuNyA5LjEgMjIuNiA5LjEgMzMuNCAwIDQxLjItNDEuOCA5Ni45LTQxLjggOTYuOSAwIDExLjYgMzEuOSA1My4yIDM1LjUgNTMuMiAxIDAgMi4yLTEuNCAzLjItMi40IDM3LjktMzkuMyA2Ny4zLTg1IDY3LjMtMTM2LjggMC04LS43LTE2LjItMi4yLTI0LjZ6XCJdXG59O1xudmFyIGZhSmVkaU9yZGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2plZGktb3JkZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY1MGVcIiwgXCJNMzk4LjUgMzczLjZjOTUuOS0xMjIuMSAxNy4yLTIzMy4xIDE3LjItMjMzLjEgNDUuNCA4NS44LTQxLjQgMTcwLjUtNDEuNCAxNzAuNSAxMDUtMTcxLjUtNjAuNS0yNzEuNS02MC41LTI3MS41IDk2LjkgNzIuNy0xMC4xIDE5MC43LTEwLjEgMTkwLjcgODUuOCAxNTguNC02OC42IDIzMC4xLTY4LjYgMjMwLjFzLS40LTE2LjktMi4yLTg1LjdjNC4zIDQuNSAzNC41IDM2LjIgMzQuNSAzNi4ybC0yNC4yLTQ3LjQgNjIuNi05LjEtNjIuNi05LjEgMjAuMi01NS41LTMxLjQgNDUuOWMtMi4yLTg3LjctNy44LTMwNS4xLTcuOS0zMDYuOXYtMi40IDEtMSAyLjRjMCAxLTUuNiAyMTktNy45IDMwNi45bC0zMS40LTQ1LjkgMjAuMiA1NS41LTYyLjYgOS4xIDYyLjYgOS4xLTI0LjIgNDcuNCAzNC41LTM2LjJjLTEuOCA2OC44LTIuMiA4NS43LTIuMiA4NS43cy0xNTQuNC03MS43LTY4LjYtMjMwLjFjMCAwLTEwNy0xMTguMS0xMC4xLTE5MC43IDAgMC0xNjUuNSA5OS45LTYwLjUgMjcxLjUgMCAwLTg2LjgtODQuOC00MS40LTE3MC41IDAgMC03OC43IDExMSAxNy4yIDIzMy4xIDAgMC0yNi4yLTE2LjEtNDkuNC03Ny43IDAgMCAxNi45IDE4My4zIDIyMiAxODUuN2g0LjFjMjA1LTIuNCAyMjItMTg1LjcgMjIyLTE4NS43LTIzLjYgNjEuNS00OS45IDc3LjctNDkuOSA3Ny43elwiXVxufTtcbnZhciBmYVVpa2l0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Vpa2l0JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNDAzXCIsIFwiTTQ0My45IDEyOHYyNTZMMjE4IDUxMiAwIDM4NFYxNjkuN2w4Ny42IDQ1LjF2MTE3bDEzMy41IDc1LjUgMTM1LjgtNzUuNXYtMTUxbC0xMDEuMS01Ny42IDg3LjYtNTMuMUw0NDMuOSAxMjh6TTMwOC42IDQ5LjFMMjIzLjggMGwtODguNiA1NC44IDg2IDQ3LjMgODcuNC01M3pcIl1cbn07XG52YXIgZmFGb3J0QXdlc29tZUFsdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmb3J0LWF3ZXNvbWUtYWx0JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmM2EzXCIsIFwiTTIwOCAyMzcuNGgtMjIuMmMtMi4xIDAtMy43IDEuNi0zLjcgMy43djUxLjdjMCAyLjEgMS42IDMuNyAzLjcgMy43SDIwOGMyLjEgMCAzLjctMS42IDMuNy0zLjd2LTUxLjdjMC0yLjEtMS42LTMuNy0zLjctMy43em0xMTguMiAwSDMwNGMtMi4xIDAtMy43IDEuNi0zLjcgMy43djUxLjdjMCAyLjEgMS42IDMuNyAzLjcgMy43aDIyLjJjMi4xIDAgMy43LTEuNiAzLjctMy43di01MS43Yy0uMS0yLjEtMS43LTMuNy0zLjctMy43em0xMzItMTI1LjFjLTIuMy0zLjItNC42LTYuNC03LjEtOS41LTkuOC0xMi41LTIwLjgtMjQtMzIuOC0zNC40LTQuNS0zLjktOS4xLTcuNi0xMy45LTExLjItMS42LTEuMi0zLjItMi4zLTQuOC0zLjVDMzcyIDM0LjEgMzQwLjMgMjAgMzA2IDEzYy0xNi4yLTMuMy0zMi45LTUtNTAtNXMtMzMuOSAxLjctNTAgNWMtMzQuMyA3LjEtNjYgMjEuMi05My4zIDQwLjgtMS42IDEuMS0zLjIgMi4zLTQuOCAzLjUtNC44IDMuNi05LjQgNy4zLTEzLjkgMTEuMi0zIDIuNi01LjkgNS4zLTguOCA4cy01LjcgNS41LTguNCA4LjRjLTUuNSA1LjctMTAuNyAxMS44LTE1LjYgMTgtMi40IDMuMS00LjggNi4zLTcuMSA5LjVDMjUuMiAxNTMgOC4zIDIwMi41IDguMyAyNTZjMCAyIC4xIDQgLjEgNiAuMS43LjEgMS4zLjEgMiAuMSAxLjMuMSAyLjcuMiA0IDAgLjguMSAxLjUuMSAyLjMgMCAxLjMuMSAyLjUuMiAzLjcuMS44LjEgMS42LjIgMi40LjEgMS4xLjIgMi4zLjMgMy41IDAgLjguMSAxLjYuMiAyLjQuMSAxLjIuMyAyLjQuNCAzLjYuMS44LjIgMS41LjMgMi4zLjEgMS4zLjMgMi42LjUgMy45LjEuNi4yIDEuMy4zIDEuOWwuOSA1LjdjLjEuNi4yIDEuMS4zIDEuNy4zIDEuMy41IDIuNy44IDQgLjIuOC4zIDEuNi41IDIuNC4yIDEgLjUgMi4xLjcgMy4yLjIuOS40IDEuNy42IDIuNi4yIDEgLjQgMiAuNyAzIC4yLjkuNSAxLjguNyAyLjcuMyAxIC41IDEuOS44IDIuOS4zLjkuNSAxLjguOCAyLjcuMi45LjUgMS45LjggMi44cy41IDEuOC44IDIuN2MuMyAxIC42IDEuOS45IDIuOC42IDEuNiAxLjEgMy4zIDEuNyA0LjkuNCAxIC43IDEuOSAxIDIuOC4zIDEgLjcgMiAxLjEgMyAuMy44LjYgMS41LjkgMi4zbDEuMiAzYy4zLjcuNiAxLjUuOSAyLjIuNCAxIC45IDIgMS4zIDNsLjkgMi4xYy41IDEgLjkgMiAxLjQgMyAuMy43LjYgMS4zLjkgMiAuNSAxIDEgMi4xIDEuNSAzLjEuMi42LjUgMS4xLjggMS43LjYgMS4xIDEuMSAyLjIgMS43IDMuMy4xLjIuMi4zLjMuNSAyLjIgNC4xIDQuNCA4LjIgNi44IDEyLjIuMi40LjUuOC43IDEuMi43IDEuMSAxLjMgMi4yIDIgMy4zLjMuNS42LjkuOSAxLjQuNiAxLjEgMS4zIDIuMSAyIDMuMi4zLjUuNi45LjkgMS40LjcgMS4xIDEuNCAyLjEgMi4xIDMuMi4yLjQuNS44LjggMS4yLjcgMS4xIDEuNSAyLjIgMi4zIDMuMy4yLjIuMy41LjUuNyAzNy41IDUxLjcgOTQuNCA4OC41IDE2MCA5OS40LjkuMSAxLjcuMyAyLjYuNCAxIC4yIDIuMS40IDMuMS41czEuOS4zIDIuOC40YzEgLjIgMiAuMyAzIC40LjkuMSAxLjkuMiAyLjkuM3MxLjkuMiAyLjkuMyAyLjEuMiAzLjEuM2MuOS4xIDEuOC4xIDIuNy4yIDEuMS4xIDIuMy4xIDMuNC4yLjggMCAxLjcuMSAyLjUuMSAxLjMgMCAyLjYuMSAzLjkuMS43LjEgMS40LjEgMi4xLjEgMiAuMSA0IC4xIDYgLjFzNC0uMSA2LS4xYy43IDAgMS40LS4xIDIuMS0uMSAxLjMgMCAyLjYgMCAzLjktLjEuOCAwIDEuNy0uMSAyLjUtLjEgMS4xLS4xIDIuMy0uMSAzLjQtLjIuOSAwIDEuOC0uMSAyLjctLjIgMS0uMSAyLjEtLjIgMy4xLS4zczEuOS0uMiAyLjktLjNjLjktLjEgMS45LS4yIDIuOS0uM3MyLS4zIDMtLjQgMS45LS4zIDIuOC0uNGMxLS4yIDIuMS0uMyAzLjEtLjUuOS0uMSAxLjctLjMgMi42LS40IDY1LjYtMTEgMTIyLjUtNDcuNyAxNjAuMS0xMDIuNC4yLS4yLjMtLjUuNS0uNy44LTEuMSAxLjUtMi4yIDIuMy0zLjMuMi0uNC41LS44LjgtMS4yLjctMS4xIDEuNC0yLjEgMi4xLTMuMi4zLS41LjYtLjkuOS0xLjQuNi0xLjEgMS4zLTIuMSAyLTMuMi4zLS41LjYtLjkuOS0xLjQuNy0xLjEgMS4zLTIuMiAyLTMuMy4yLS40LjUtLjguNy0xLjIgMi40LTQgNC42LTguMSA2LjgtMTIuMi4xLS4yLjItLjMuMy0uNS42LTEuMSAxLjEtMi4yIDEuNy0zLjMuMi0uNi41LTEuMS44LTEuNy41LTEgMS0yLjEgMS41LTMuMS4zLS43LjYtMS4zLjktMiAuNS0xIDEtMiAxLjQtM2wuOS0yLjFjLjUtMSAuOS0yIDEuMy0zIC4zLS43LjYtMS41LjktMi4ybDEuMi0zYy4zLS44LjYtMS41LjktMi4zLjQtMSAuNy0yIDEuMS0zcy43LTEuOSAxLTIuOGMuNi0xLjYgMS4yLTMuMyAxLjctNC45LjMtMSAuNi0xLjkuOS0yLjhzLjUtMS44LjgtMi43Yy4yLS45LjUtMS45LjgtMi44cy42LTEuOC44LTIuN2MuMy0xIC41LTEuOS44LTIuOS4yLS45LjUtMS44LjctMi43LjItMSAuNS0yIC43LTMgLjItLjkuNC0xLjcuNi0yLjYuMi0xIC41LTIuMS43LTMuMi4yLS44LjMtMS42LjUtMi40LjMtMS4zLjYtMi43LjgtNCAuMS0uNi4yLTEuMS4zLTEuN2wuOS01LjdjLjEtLjYuMi0xLjMuMy0xLjkuMS0xLjMuMy0yLjYuNS0zLjkuMS0uOC4yLTEuNS4zLTIuMy4xLTEuMi4zLTIuNC40LTMuNiAwLS44LjEtMS42LjItMi40LjEtMS4xLjItMi4zLjMtMy41LjEtLjguMS0xLjYuMi0yLjQuMSAxLjcuMS41LjItLjcgMC0uOC4xLTEuNS4xLTIuMy4xLTEuMy4yLTIuNy4yLTQgLjEtLjcuMS0xLjMuMS0yIC4xLTIgLjEtNCAuMS02IDAtNTMuNS0xNi45LTEwMy00NS44LTE0My43ek00NDggMzcxLjVjLTkuNCAxNS41LTIwLjYgMjkuOS0zMy42IDQyLjktMjAuNiAyMC42LTQ0LjUgMzYuNy03MS4yIDQ4LTEzLjkgNS44LTI4LjIgMTAuMy00Mi45IDEzLjJ2LTc1LjhjMC01OC42LTg4LjYtNTguNi04OC42IDB2NzUuOGMtMTQuNy0yLjktMjktNy4zLTQyLjktMTMuMi0yNi43LTExLjMtNTAuNi0yNy40LTcxLjItNDgtMTMtMTMtMjQuMi0yNy40LTMzLjYtNDIuOXYtNzEuM2MwLTIuMSAxLjYtMy43IDMuNy0zLjdoMjIuMWMyLjEgMCAzLjcgMS42IDMuNyAzLjdWMzI2aDI5LjZWMTgyYzAtMi4xIDEuNi0zLjcgMy43LTMuN2gyMi4xYzIuMSAwIDMuNyAxLjYgMy43IDMuN3YyNS45aDI5LjVWMTgyYzAtMi4xIDEuNi0zLjcgMy43LTMuN0gyMDhjMi4xIDAgMy43IDEuNiAzLjcgMy43djI1LjloMjkuNVYxODJjMC00LjggNi41LTMuNyA5LjUtMy43Vjg4LjFjLTQuNC0yLTcuNC02LjctNy40LTExLjUgMC0xNi44IDI1LjQtMTYuOCAyNS40IDAgMCA0LjgtMyA5LjQtNy40IDExLjVWOTJjNi4zLTEuNCAxMi43LTIuMyAxOS4yLTIuMyA5LjQgMCAxOC40IDMuNSAyNi4zIDMuNSA3LjIgMCAxNS4yLTMuNSAxOS40LTMuNSAyLjEgMCAzLjcgMS42IDMuNyAzLjd2NDguNGMwIDUuNi0xOC43IDYuNS0yMi40IDYuNS04LjYgMC0xNi42LTMuNS0yNS40LTMuNS03IDAtMTQuMSAxLjItMjAuOCAyLjh2MzAuN2MzIDAgOS41LTEuMSA5LjUgMy43djI1LjloMjkuNVYxODJjMC0yLjEgMS42LTMuNyAzLjctMy43aDIyLjJjMi4xIDAgMy43IDEuNiAzLjcgMy43djI1LjloMjkuNVYxODJjMC0yLjEgMS42LTMuNyAzLjctMy43aDIyLjFjMi4xIDAgMy43IDEuNiAzLjcgMy43djE0NGgyOS41di0yNS44YzAtMi4xIDEuNi0zLjcgMy43LTMuN2gyMi4yYzIuMSAwIDMuNyAxLjYgMy43IDMuN3pcIl1cbn07XG52YXIgZmFQaGFicmljYXRvciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwaGFicmljYXRvcicsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjNkYlwiLCBcIk0zMjMgMjYyLjFsLS4xLTEzczIxLjctMTkuOCAyMS4xLTIxLjJsLTkuNS0yMGMtLjYtMS40LTI5LjUtLjUtMjkuNS0uNWwtOS40LTkuM3MuMi0yOC41LTEuMi0yOS4xbC0yMC4xLTkuMmMtMS40LS42LTIwLjcgMjEtMjAuNyAyMWwtMTMuMS0uMnMtMjAuNS0yMS40LTIxLjktMjAuOGwtMjAgOC4zYy0xLjQuNS4yIDI4LjkuMiAyOC45bC05LjEgOS4xcy0yOS4yLS45LTI5LjcuNGwtOC4xIDE5LjhjLS42IDEuNCAyMSAyMSAyMSAyMWwuMSAxMi45cy0yMS43IDE5LjgtMjEuMSAyMS4ybDkuNSAyMGMuNiAxLjQgMjkuNS41IDI5LjUuNWw5LjQgOS4zcy0uMiAzMS44IDEuMiAzMi4zbDIwLjEgOC4zYzEuNC42IDIwLjctMjMuNSAyMC43LTIzLjVsMTMuMS4yczIwLjUgMjMuOCAyMS44IDIzLjNsMjAtNy41YzEuNC0uNi0uMi0zMi4xLS4yLTMyLjFsOS4xLTkuMXMyOS4yLjkgMjkuNy0uNWw4LjEtMTkuOGMuNy0xLjEtMjAuOS0yMC43LTIwLjktMjAuN3ptLTQ0LjktOC43Yy43IDE3LjEtMTIuOCAzMS42LTMwLjEgMzIuNC0xNy4zLjgtMzIuMS0xMi41LTMyLjgtMjkuNi0uNy0xNy4xIDEyLjgtMzEuNiAzMC4xLTMyLjMgMTcuMy0uOCAzMi4xIDEyLjUgMzIuOCAyOS41em0yMDEuMi0zNy45bC05Ny05Ny0uMS4xYy03NS4xLTczLjMtMTk1LjQtNzIuOC0yNjkuOCAxLjYtNTAuOSA1MS0yNy44IDI3LjktOTUuNyA5NS4zLTIyLjMgMjIuMy0yMi4zIDU4LjcgMCA4MSA2OS45IDY5LjQgNDYuNCA0NiA5Ny40IDk3bC4xLS4xYzc1LjEgNzMuMyAxOTUuNCA3Mi45IDI2OS44LTEuNiA1MS01MC45IDI3LjktMjcuOSA5NS4zLTk1LjMgMjIuMy0yMi4zIDIyLjMtNTguNyAwLTgxek0xNDAuNCAzNjMuOGMtNTkuNi01OS41LTU5LjYtMTU2IDAtMjE1LjUgNTkuNS01OS42IDE1Ni01OS41IDIxNS42IDAgNTkuNSA1OS41IDU5LjYgMTU2IDAgMjE1LjYtNTkuNiA1OS41LTE1NiA1OS40LTIxNS42LS4xelwiXVxufTtcbnZhciBmYVVzc3VubmFoID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Vzc3VubmFoJyxcbiAgaWNvbjogWzQ4MiwgNTEyLCBbXSwgXCJmNDA3XCIsIFwiTTQ4MS45IDI2OC4xQTI0MC45IDI0MC45IDAgMSAxIC4xIDI2OGEyNDAuOSAyNDAuOSAwIDEgMSA0ODEuOSAwek0yNC41IDI2OGEyMTYuNSAyMTYuNSAwIDEgMCA0MzIuOSAwQTIxNi41IDIxNi41IDAgMSAwIDI0LjUgMjY4em0zODUuOSA2My4zYy0xMi43IDAtMjEuNi0xLjktMjYuNy01LjljLTUuNS00LjMtOC4yLTEyLjMtOC4yLTIzLjhWMjA1LjFjMC02LjUtNS4yLTIwLjItMTUuNy00MS4yYzcgMCAxNy05LjEgMzAtMjcuMlYyODQuNWMwIDExIDIuNCAxOS40IDcgMjUuM2MzLjcgNC43IDEwLjEgOC45IDE5IDEyLjZjMS4yIC40IDIuNiAuOSA0LjEgMS40YzIuOSAuOSA2LjMgMi4xIDEwLjMgMy41Yy0xLjggMi43LTguMyA0LTE5LjkgNHptLTIxOSAwYy0xLjMgMi40LTMuNiA1LjUtNi44IDkuNGwtMTguNSAyMi41Yy0xLTYuMS00LTEzLTkuMy0yMC42cy05LjctMTEuNC0xMy40LTExLjRoLTguM0g1My42YzMuMy01LjMgNC45LTguOCA0LjktMTAuOGMwLTItLjgtNS4zLTIuNC05LjdjLTEuNS00LjQtMi40LTguNS0yLjQtMTIuNGMwLTcuNCAyLjEtMTMuOSA2LjMtMTkuM0w4MCAyNTMuNGwtNy4xLTE3LjdMODkgMjE1LjlsNi43IDE2LjggOC0xMC4zYy0xLjggNi40LTIuNiAxMi4zLTIuNiAxNy43YzAgNC4yIDIuOCAxMy4zIDguMyAyNy4zbDE2LjIgNDAuN0gxMzVoOCAuM2MyLjggLjQgNy43IDUgMTQuNiAxMy45YzEuOCAyLjQgNC4zIDUuOCA3LjcgMTAuMmMxLjQgMS45IDIuOSAzLjkgNC42IDYuMWMxLjMtMi4zIDItNC42IDItNy4xYzAtMi0xLjMtNi42LTQtMTMuNEwxNjMgMzA0LjFjLTQtMTAuNi02LjEtMTcuNy02LjEtMjEuM2MwLTYuMyAxLjktMTIuMyA1LjgtMTcuOWMuNS0uNiAxLTEuMyAxLjUtMS45YzQuNC01LjYgOC44LTExLjEgMTMuMy0xNi41Yy0xLjEgNC42LTEuNyA4LjctMS43IDEyYzAgMy43IDEuNyA5LjkgNS4xIDE4LjhsNy45IDIwLjRjMS45IDQuNyAzIDguMiAzLjcgMTAuM2gxNy42IDguM2wtLjktMi42Yy0xLjQtMy45LTQtNy03LjctOS4zbDE1LjYtMjAuMSAxMi4zIDMyaDEzLjRMMjQ1IDI5Mi4yYy0xLjUtMy45LTQtNy03LjctOS4zTDI1MyAyNjIuOCAyNzAuMyAzMDhoMTMuNGwtMTEuNC0yOS40Yy0xLjUtMy45LTQtNy03LjctOS4zbDE1LjYtMjBMMzAyLjYgMzA4aDEwLjMgOC4zIDcuNmMxLjUgMCAzLTEuMSA0LjUtMy4xczIuMi00LjEgMi4yLTYuM1YyMDUuMWMwLTYuNS00LjUtMjAuMy0xMy43LTQxLjJjNS40IDAgMTQuMS05LjEgMjYuMi0yNy4yVjMwMC4yYzAgNy4yIC42IDEyIDEuNyAxNC42YzEuNiAzLjQgNS4zIDYuMiAxMS4xIDguMmMtMy45IDUuNi04LjcgOC41LTE0LjUgOC41SDMyMS4xaC04LjNIMjEwLjVoLTE5ek05My40IDI4Ny4zYy0yLjctNi43LTQtMTEuNy00LTE1Yy0uNiAxLjItMi40IDMuNy01LjQgNy42Yy0xLjQgMS45LTIuMiAzLjctMi4yIDUuM2MwIDIuNiAuOCA1LjcgMi4yIDkuM2w1LjYgMTMuOWgwYzUgMCA5IDAgMTEuOS0uMWwtOC4yLTIwLjl6bTEzLjUtNzIuNGMtMy01LjItNy05LjMtMTEuOS0xMS45Yy0zLjUtMS45LTUuMy00LjMtNS4zLTcuNGMwLTIuNCA0LjYtOC42IDE0LTE4LjNjLjIgMy44IDEuOSA3LjYgNC45IDExLjJjMy4xIDMuNiA0LjYgNyA0LjYgMTAuMWMwIDIuNi0yLjEgOC02LjIgMTYuM3ptLTI3LjYgMGMtMy01LjItNy05LjMtMTEuOS0xMS45Yy0zLjUtMS45LTUuMy00LjMtNS4zLTcuNGMwLTIuNCA0LjYtOC42IDE0LTE4LjNjLjIgMy44IDEuOSA3LjYgNC45IDExLjJjMy4xIDMuNiA0LjYgNyA0LjYgMTAuMWMwIDIuNi0yLjEgOC02LjIgMTYuM3ptODcgMjcuNWMtMy01LjItNy05LjMtMTEuOS0xMS45Yy0zLjUtMS45LTUuMy00LjMtNS4zLTcuNGMwLTIuNCA0LjYtOC42IDE0LTE4LjNjLjIgMy44IDEuOSA3LjYgNC45IDExLjJjMy4xIDMuNiA0LjYgNyA0LjYgMTAuMWMwIDIuNi0yLjEgOC02LjIgMTYuM3pcIl1cbn07XG52YXIgZmFFYXJseWJpcmRzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2Vhcmx5YmlyZHMnLFxuICBpY29uOiBbNDgwLCA1MTIsIFtdLCBcImYzOWFcIiwgXCJNMzEzLjIgNDcuNWMxLjItMTMgMjEuMy0xNCAzNi42LTguNy45LjMgMjYuMiA5LjcgMTkgMTUuMi0yNy45LTcuNC01Ni40IDE4LjItNTUuNi02LjV6bS0yMDEgNi45YzMwLjctOC4xIDYyIDIwIDYxLjEtNy4xLTEuMy0xNC4yLTIzLjQtMTUuMy00MC4yLTkuNi0xIC4zLTI4LjcgMTAuNS0yMC45IDE2Ljd6TTMxOS40IDE2MGMtOC44IDAtMTYgNy4yLTE2IDE2czcuMiAxNiAxNiAxNiAxNi03LjIgMTYtMTYtNy4yLTE2LTE2LTE2em0tMTU5LjcgMGMtOC44IDAtMTYgNy4yLTE2IDE2czcuMiAxNiAxNiAxNiAxNi03LjIgMTYtMTYtNy4yLTE2LTE2LTE2em0zMTguNSAxNjMuMmMtOS45IDI0LTQwLjcgMTEtNjMuOS0xLjItMTMuNSA2OS4xLTU4LjEgMTExLjQtMTI2LjMgMTI0LjIuMy45LTItLjEgMjQgMSAzMy42IDEuNCA2My44LTMuMSA5Ny40LTgtMTkuOC0xMy44LTExLjQtMzcuMS05LjgtMzguMSAxLjQtLjkgMTQuNyAxLjcgMjEuNiAxMS41IDguNi0xMi41IDI4LjQtMTQuOCAzMC4yLTEzLjYgMS42IDEuMSA2LjYgMjAuOS02LjkgMzQuNiA0LjctLjkgOC4yLTEuNiA5LjgtMi4xIDIuNi0uOCAxNy43IDExLjMgMy4xIDEzLjMtMTQuMyAyLjMtMjIuNiA1LjEtNDcuMSAxMC44LTQ1LjkgMTAuNy04NS45IDExLjgtMTE3LjcgMTIuOGwxIDExLjZjMy44IDE4LjEtMjMuNCAyNC4zLTI3LjYgNi4yLjggMTcuOS0yNy4xIDIxLjgtMjguNC0xbC0uNSA1LjNjLS43IDE4LjQtMjguNCAxNy45LTI4LjMtLjYtNy41IDEzLjUtMjguMSA2LjgtMjYuNC04LjVsMS4yLTEyLjRjLTM2LjcuOS01OS43IDMuMS02MS44IDMuMS0yMC45IDAtMjAuOS0zMS42IDAtMzEuNiAyLjQgMCAyNy43IDEuMyA2My4yIDIuOC02MS4xLTE1LjUtMTAzLjctNTUtMTE0LjktMTE4LjItMjUgMTIuOC01Ny41IDI2LjgtNjguMi44LTEwLjUtMjUuNCAyMS41LTQyLjYgNjYuOC03My40LjctNi42IDEuNi0xMy4zIDIuNy0xOS44LTE0LjQtMTkuNi0xMS42LTM2LjMtMTYuMS02MC40LTE2LjggMi40LTIzLjItOS4xLTIzLjYtMjMuMS4zLTcuMyAyLjEtMTQuOSAyLjQtMTUuNCAxLjEtMS44IDEwLjEtMiAxMi43LTIuNiA2LTMxLjcgNTAuNi0zMy4yIDkwLjktMzQuNSAxOS43LTIxLjggNDUuMi00MS41IDgwLjktNDguM0MyMDMuMyAyOSAyMTUuMiA4LjUgMjE2LjIgOGMxLjctLjggMjEuMiA0LjMgMjYuMyAyMy4yIDUuMi04LjggMTguMy0xMS40IDE5LjYtMTAuNyAxLjEuNiA2LjQgMTUtNC45IDI1LjkgNDAuMyAzLjUgNzIuMiAyNC43IDk2IDUwLjcgMzYuMSAxLjUgNzEuOCA1LjkgNzcuMSAzNCAyLjcuNiAxMS42LjggMTIuNyAyLjYuMy41IDIuMSA4LjEgMi40IDE1LjQtLjUgMTMuOS02LjggMjUuNC0yMy42IDIzLjEtMy4yIDE3LjMtMi43IDMyLjktOC43IDQ3LjcgMi40IDExLjcgNCAyMy44IDQuOCAzNi40IDM3IDI1LjQgNzAuMyA0Mi41IDYwLjMgNjYuOXpNMjA3LjQgMTU5LjljLjktNDQtMzcuOS00Mi4yLTc4LjYtNDAuMy0yMS43IDEtMzguOSAxLjktNDUuNSAxMy45LTExLjQgMjAuOSA1LjkgOTIuOSAyMy4yIDEwMS4yIDkuOCA0LjcgNzMuNCA3LjkgODYuMy03LjEgOC4yLTkuNCAxNS00OS40IDE0LjYtNjcuN3ptNTIgNTguM2MtNC4zLTEyLjQtNi0zMC4xLTE1LjMtMzIuNy0yLS41LTktLjUtMTEgMC0xMCAyLjgtMTAuOCAyMi4xLTE3IDM3LjIgMTUuNCAwIDE5LjMgOS43IDIzLjcgOS43IDQuMyAwIDYuMy0xMS4zIDE5LjYtMTQuMnptMTM1LjctODQuN2MtNi42LTEyLjEtMjQuOC0xMi45LTQ2LjUtMTMuOS00MC4yLTEuOS03OC4yLTMuOC03Ny4zIDQwLjMtLjUgMTguMyA1IDU4LjMgMTMuMiA2Ny44IDEzIDE0LjkgNzYuNiAxMS44IDg2LjMgNy4xIDE1LjgtNy42IDM2LjUtNzguOSAyNC4zLTEwMS4zelwiXVxufTtcbnZhciBmYVRyYWRlRmVkZXJhdGlvbiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd0cmFkZS1mZWRlcmF0aW9uJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNTEzXCIsIFwiTTI0OCA4LjhjLTEzNyAwLTI0OCAxMTEtMjQ4IDI0OHMxMTEgMjQ4IDI0OCAyNDggMjQ4LTExMSAyNDgtMjQ4LTExMS0yNDgtMjQ4LTI0OHptMCA0ODIuOGMtMTI5LjcgMC0yMzQuOC0xMDUuMS0yMzQuOC0yMzQuOFMxMTguMyAyMiAyNDggMjJzMjM0LjggMTA1LjEgMjM0LjggMjM0LjhTMzc3LjcgNDkxLjYgMjQ4IDQ5MS42em0xNTUuMS0zMjguNXYtNDYuOEgyMDkuM1YxOThINTQuMmwzNi43IDQ2aDExNy43djE5Ni44aDQ4LjhWMjQ1aDgzLjN2LTQ3aC04My4zdi0zNC44aDE0NS43em0tNzMuMyA0NS4xdjIzLjloLTgyLjl2MTk3LjRoLTI2LjhWMjMyLjFIOTYuM2wtMjAuMS0yMy45aDE0My45di04MC42aDE3MS44VjE1MmgtMTQ1djU2LjJ6bS0xNjEuMy02OWwtMTIuNC0yMC43IDIuMSAyMy44LTIzLjUgNS40IDIzLjMgNS40LTIuMSAyNCAxMi4zLTIwLjUgMjIuMiA5LjUtMTUuNy0xOC4xIDE1LjgtMTguMXptLTI5LjYtMTkuN2w5LjMtMTEuNS0xMi43IDUuOS04LTEyLjQgMS43IDEzLjktMTQuMyAzLjggMTMuNyAyLjctLjggMTQuNyA2LjgtMTIuMiAxMy44IDUuM3ptMTY1LjQgMTQ1LjJsLTEzLjEgNS42LTcuMy0xMi4yIDEuMyAxNC4yLTEzLjkgMy4yIDEzLjkgMy4yLTEuMiAxNC4yIDcuMy0xMi4yIDEzLjEgNS41LTkuNC0xMC43em0xMDYuOS03Ny4ybC0yMC45IDkuMS0xMi0xOS42IDIuMiAyMi43LTIyLjMgNS40IDIyLjIgNC45LTEuOCAyMi45IDExLjUtMTkuNiAyMS4yIDguOC0xNS4xLTE3ek0yNDggMjkuOWMtMTI1LjMgMC0yMjYuOSAxMDEuNi0yMjYuOSAyMjYuOVMxMjIuNyA0ODMuNyAyNDggNDgzLjdzMjI2LjktMTAxLjYgMjI2LjktMjI2LjlTMzczLjMgMjkuOSAyNDggMjkuOXpNMzQyLjYgMTk2djUxaC04My4zdjE5NS43aC01Mi43VjI0NS45SDg5LjlsLTQwLTQ5LjloMTU3LjR2LTgxLjZoMTk3Ljh2NTAuN0gyNTkuNFYxOTZ6TTI0OCA0My4yYzYwLjMgMCAxMTQuOCAyNSAxNTMuNiA2NS4ySDIwMi41VjE5MEg0NS4xQzczLjEgMTA0LjggMTUzLjQgNDMuMiAyNDggNDMuMnptMCA0MjcuMWMtMTE3LjkgMC0yMTMuNi05NS42LTIxMy42LTIxMy41IDAtMjEuMiAzLjEtNDEuOCA4LjktNjEuMUw4Ny4xIDI1MmgxMTQuN3YxOTYuOGg2NC42VjI1M2g4My4zdi02Mi43aC04My4ydi0xOS4yaDE0NS42di01MC44YzMwLjggMzcgNDkuMyA4NC42IDQ5LjMgMTM2LjUuMSAxMTcuOS05NS41IDIxMy41LTIxMy40IDIxMy41ek0xNzguOCAyNzVsLTExLTIxLjQgMS43IDI0LjUtMjMuNyAzLjkgMjMuOCA1LjktMy43IDIzLjggMTMtMjAuOSAyMS41IDEwLjgtMTUuOC0xOC44IDE2LjktMTcuMXpcIl1cbn07XG52YXIgZmFBdXRvcHJlZml4ZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXV0b3ByZWZpeGVyJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNDFjXCIsIFwiTTMxOC40IDE2bC0xNjEgNDgwaDc3LjVsMjUuNC04MS40aDExOS41TDQwNSA0OTZoNzcuNUwzMTguNCAxNnptLTQwLjMgMzQxLjlsNDEuMi0xMzAuNGgxLjVsNDAuOSAxMzAuNGgtODMuNnpNNjQwIDQwNWwtMTAtMzEuNEw0NjIuMSAzNThsMTkuNCA1Ni41TDY0MCA0MDV6bS00NjIuMS00N0wxMCAzNzMuNyAwIDQwNWwxNTguNSA5LjQgMTkuNC01Ni40elwiXVxufTtcbnZhciBmYVdoYXRzYXBwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3doYXRzYXBwJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMjMyXCIsIFwiTTM4MC45IDk3LjFDMzM5IDU1LjEgMjgzLjIgMzIgMjIzLjkgMzJjLTEyMi40IDAtMjIyIDk5LjYtMjIyIDIyMiAwIDM5LjEgMTAuMiA3Ny4zIDI5LjYgMTExTDAgNDgwbDExNy43LTMwLjljMzIuNCAxNy43IDY4LjkgMjcgMTA2LjEgMjdoLjFjMTIyLjMgMCAyMjQuMS05OS42IDIyNC4xLTIyMiAwLTU5LjMtMjUuMi0xMTUtNjcuMS0xNTd6bS0xNTcgMzQxLjZjLTMzLjIgMC02NS43LTguOS05NC0yNS43bC02LjctNC02OS44IDE4LjNMNzIgMzU5LjJsLTQuNC03Yy0xOC41LTI5LjQtMjguMi02My4zLTI4LjItOTguMiAwLTEwMS43IDgyLjgtMTg0LjUgMTg0LjYtMTg0LjUgNDkuMyAwIDk1LjYgMTkuMiAxMzAuNCA1NC4xIDM0LjggMzQuOSA1Ni4yIDgxLjIgNTYuMSAxMzAuNSAwIDEwMS44LTg0LjkgMTg0LjYtMTg2LjYgMTg0LjZ6bTEwMS4yLTEzOC4yYy01LjUtMi44LTMyLjgtMTYuMi0zNy45LTE4LTUuMS0xLjktOC44LTIuOC0xMi41IDIuOC0zLjcgNS42LTE0LjMgMTgtMTcuNiAyMS44LTMuMiAzLjctNi41IDQuMi0xMiAxLjQtMzIuNi0xNi4zLTU0LTI5LjEtNzUuNS02Ni01LjctOS44IDUuNy05LjEgMTYuMy0zMC4zIDEuOC0zLjcuOS02LjktLjUtOS43LTEuNC0yLjgtMTIuNS0zMC4xLTE3LjEtNDEuMi00LjUtMTAuOC05LjEtOS4zLTEyLjUtOS41LTMuMi0uMi02LjktLjItMTAuNi0uMi0zLjcgMC05LjcgMS40LTE0LjggNi45LTUuMSA1LjYtMTkuNCAxOS0xOS40IDQ2LjMgMCAyNy4zIDE5LjkgNTMuNyAyMi42IDU3LjQgMi44IDMuNyAzOS4xIDU5LjcgOTQuOCA4My44IDM1LjIgMTUuMiA0OSAxNi41IDY2LjYgMTMuOSAxMC43LTEuNiAzMi44LTEzLjQgMzcuNC0yNi40IDQuNi0xMyA0LjYtMjQuMSAzLjItMjYuNC0xLjMtMi41LTUtMy45LTEwLjUtNi42elwiXVxufTtcbnZhciBmYVNxdWFyZVVwd29yayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzcXVhcmUtdXB3b3JrJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlNjdjXCIsIFwiTTU2IDMybDMzNiAwYzMwLjkgMCA1NiAyNS4xIDU2IDU2bDAgMzM2YzAgMzAuOS0yNS4xIDU2LTU2IDU2TDU2IDQ4MGMtMzAuOSAwLTU2LTI1LjEtNTYtNTZMMCA4OEMwIDU3LjEgMjUuMSAzMiA1NiAzMnpNMjcwLjkgMjc0LjJjNi42LTUyLjkgMjUuOS02OS41IDUxLjQtNjkuNWMyNS4zIDAgNDQuOSAyMC4yIDQ0LjkgNDkuN3MtMTkuNyA0OS43LTQ0LjkgNDkuN2MtMjcuOSAwLTQ2LjMtMjEuNS01MS40LTI5Ljl6bS0yNi43LTQxLjhjLTguMi0xNS41LTE0LjMtMzYuMy0xOS4yLTU1LjZsLTI5LjcgMC0zMy4yIDAgMCA3OC4xYzAgMjguNC0xMi45IDQ5LjQtMzguMiA0OS40cy0zOS44LTIwLjktMzkuOC00OS4zbC4zLTc4LjEtMzYuMiAwIDAgNzguMWMwIDIyLjggNy40IDQzLjUgMjAuOSA1OC4yYzEzLjkgMTUuMiAzMi44IDIzLjIgNTQuOCAyMy4yYzQzLjcgMCA3NC4yLTMzLjUgNzQuMi04MS41bDAtNTIuNWM0LjYgMTcuMyAxNS40IDUwLjUgMzYuMiA3OS43TDIxNSAzOTIuNmwzNi44IDAgMTIuOC03OC40YzQuMiAzLjUgOC43IDYuNiAxMy40IDkuNGMxMi4zIDcuOCAyNi40IDEyLjIgNDAuOSAxMi42bC4xIDBjLjUgMCAxLjEgMCAxLjYgMGMuNiAwIDEuMSAwIDEuNyAwYzQ1LjEgMCA4MC45LTM0LjkgODAuOS04MS45cy0zNS45LTgyLjItODAuOS04Mi4yYy00NS40IDAtNzAuOSAyOS43LTc4LjEgNjAuMXpcIl1cbn07XG52YXIgZmFTbGlkZXNoYXJlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NsaWRlc2hhcmUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYxZTdcIiwgXCJNMTg3LjcgMTUzLjdjLTM0IDAtNjEuNyAyNS43LTYxLjcgNTcuNyAwIDMxLjcgMjcuNyA1Ny43IDYxLjcgNTcuN3M2MS43LTI2IDYxLjctNTcuN2MwLTMyLTI3LjctNTcuNy02MS43LTU3Ljd6bTE0My40IDBjLTM0IDAtNjEuNyAyNS43LTYxLjcgNTcuNyAwIDMxLjcgMjcuNyA1Ny43IDYxLjcgNTcuNyAzNC4zIDAgNjEuNy0yNiA2MS43LTU3LjcuMS0zMi0yNy40LTU3LjctNjEuNy01Ny43em0xNTYuNiA5MGwtNiA0LjNWNDkuN2MwLTI3LjQtMjAuNi00OS43LTQ2LTQ5LjdINzYuNmMtMjUuNCAwLTQ2IDIyLjMtNDYgNDkuN1YyNDhjLTItMS40LTQuMy0yLjktNi4zLTQuMy0xNS4xLTEwLjYtMjUuMSA0LTE2IDE3LjcgMTguMyAyMi42IDUzLjEgNTAuMyAxMDYuMyA3MkM1OC4zIDUyNS4xIDI1MiA1NTUuNyAyNDguOSA0NTcuNWMwLS43LjMtNTYuNi4zLTk2LjYgNS4xIDEuMSA5LjQgMi4zIDEzLjcgMy4xIDAgMzkuNy4zIDkyLjguMyA5My41LTMuMSA5OC4zIDE5MC42IDY3LjcgMTM0LjMtMTI0IDUzLjEtMjEuNyA4OC00OS40IDEwNi4zLTcyIDkuMS0xMy44LS45LTI4LjMtMTYuMS0xNy44em0tMzAuNSAxOS4yYy02OC45IDM3LjQtMTI4LjMgMzEuMS0xNjAuNiAyOS43LTIzLjctLjktMzIuNiA5LjEtMzMuNyAyNC45LTEwLjMtNy43LTE4LjYtMTUuNS0yMC4zLTE3LjEtNS4xLTUuNC0xMy43LTgtMjcuMS03LjctMzEuNyAxLjEtODkuNyA3LjQtMTU3LjQtMjhWNzIuM2MwLTM0LjkgOC45LTQ1LjcgNDAuNi00NS43aDMxNy43YzMwLjMgMCA0MC45IDEyLjkgNDAuOSA0NS43djE5MC42elwiXVxufTtcbnZhciBmYUdvb2dsZVBsYXkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ29vZ2xlLXBsYXknLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzYWJcIiwgXCJNMzI1LjMgMjM0LjNMMTA0LjYgMTNsMjgwLjggMTYxLjItNjAuMSA2MC4xek00NyAwQzM0IDYuOCAyNS4zIDE5LjIgMjUuMyAzNS4zdjQ0MS4zYzAgMTYuMSA4LjcgMjguNSAyMS43IDM1LjNsMjU2LjYtMjU2TDQ3IDB6bTQyNS4yIDIyNS42bC01OC45LTM0LjEtNjUuNyA2NC41IDY1LjcgNjQuNSA2MC4xLTM0LjFjMTgtMTQuMyAxOC00Ni41LTEuMi02MC44ek0xMDQuNiA0OTlsMjgwLjgtMTYxLjItNjAuMS02MC4xTDEwNC42IDQ5OXpcIl1cbn07XG52YXIgZmFWaWFkZW8gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndmlhZGVvJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMmE5XCIsIFwiTTI3Ni4yIDE1MC41di43QzI1OC4zIDk4LjYgMjMzLjYgNDcuOCAyMDUuNCAwYzQzLjMgMjkuMiA2NyAxMDAgNzAuOCAxNTAuNXptMzIuNyAxMjEuN2M3LjYgMTguMiAxMSAzNy41IDExIDU3IDAgNzcuNy01Ny44IDE0MS0xMzcuOCAxMzkuNGwzLjgtLjNjNzQuMi00Ni43IDEwOS4zLTExOC42IDEwOS4zLTIwNS4xIDAtMzguMS02LjUtNzUuOS0xOC45LTExMiAxIDExLjcgMSAyMy43IDEgMzUuNCAwIDkxLjgtMTguMSAyNDEuNi0xMTYuNiAyODBDOTUgNDU1LjIgNDkuNCAzOTggNDkuNCAzMjkuMmMwLTc1LjYgNTcuNC0xNDIuMyAxMzUuNC0xNDIuMyAxNi44IDAgMzMuNyAzLjEgNDkuMSA5LjYgMS43LTE1LjEgNi41LTI5LjkgMTMuNC00My4zLTE5LjktNy4yLTQxLjItMTAuNy02Mi41LTEwLjctMTYxLjUgMC0yMzguNyAxOTUuOS0xMjkuOSAzMTMuNyA2Ny45IDc0LjYgMTkyIDczLjkgMjU5LjggMCA1Ni42LTYxLjMgNjAuOS0xNDIuNCAzNi40LTIwMS0xMi43IDgtMjcuMSAxMy45LTQyLjIgMTd6TTQxOC4xIDExLjdjLTMxIDY2LjUtODEuMyA0Ny4yLTExNS44IDgwLjEtMTIuNCAxMi0yMC42IDM0LTIwLjYgNTAuNSAwIDE0LjEgNC41IDI3LjEgMTIgMzguOCA0Ny40LTExIDk4LjMtNDYgMTE4LjItOTAuNy0uNyA1LjUtNC44IDE0LjQtNy4yIDE5LjItMjAuMyAzNS43LTY0LjYgNjUuNi05OS43IDg0LjkgMTQuOCAxNC40IDMzLjcgMjUuOCA1NSAyNS44IDc5IDAgMTEwLjEtMTM0LjYgNTguMS0yMDguNnpcIl1cbn07XG52YXIgZmFMaW5lID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2xpbmUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzYzBcIiwgXCJNMzExIDE5Ni44djgxLjNjMCAyLjEtMS42IDMuNy0zLjcgMy43aC0xM2MtMS4zIDAtMi40LS43LTMtMS41bC0zNy4zLTUwLjN2NDguMmMwIDIuMS0xLjYgMy43LTMuNyAzLjdoLTEzYy0yLjEgMC0zLjctMS42LTMuNy0zLjdWMTk2LjljMC0yLjEgMS42LTMuNyAzLjctMy43aDEyLjljMS4xIDAgMi40IC42IDMgMS42bDM3LjMgNTAuM1YxOTYuOWMwLTIuMSAxLjYtMy43IDMuNy0zLjdoMTNjMi4xLS4xIDMuOCAxLjYgMy44IDMuNXptLTkzLjctMy43aC0xM2MtMi4xIDAtMy43IDEuNi0zLjcgMy43djgxLjNjMCAyLjEgMS42IDMuNyAzLjcgMy43aDEzYzIuMSAwIDMuNy0xLjYgMy43LTMuN1YxOTYuOGMwLTEuOS0xLjYtMy43LTMuNy0zLjd6bS0zMS40IDY4LjFIMTUwLjNWMTk2LjhjMC0yLjEtMS42LTMuNy0zLjctMy43aC0xM2MtMi4xIDAtMy43IDEuNi0zLjcgMy43djgxLjNjMCAxIC4zIDEuOCAxIDIuNWMuNyAuNiAxLjUgMSAyLjUgMWg1Mi4yYzIuMSAwIDMuNy0xLjYgMy43LTMuN3YtMTNjMC0xLjktMS42LTMuNy0zLjUtMy43em0xOTMuNy02OC4xSDMyNy4zYy0xLjkgMC0zLjcgMS42LTMuNyAzLjd2ODEuM2MwIDEuOSAxLjYgMy43IDMuNyAzLjdoNTIuMmMyLjEgMCAzLjctMS42IDMuNy0zLjdWMjY1YzAtMi4xLTEuNi0zLjctMy43LTMuN0gzNDRWMjQ3LjdoMzUuNWMyLjEgMCAzLjctMS42IDMuNy0zLjdWMjMwLjljMC0yLjEtMS42LTMuNy0zLjctMy43SDM0NFYyMTMuNWgzNS41YzIuMSAwIDMuNy0xLjYgMy43LTMuN3YtMTNjLS4xLTEuOS0xLjctMy43LTMuNy0zLjd6TTUxMiA5My40VjQxOS40Yy0uMSA1MS4yLTQyLjEgOTIuNy05My40IDkyLjZIOTIuNkM0MS40IDUxMS45LS4xIDQ2OS44IDAgNDE4LjZWOTIuNkMuMSA0MS40IDQyLjItLjEgOTMuNCAwSDQxOS40YzUxLjIgLjEgOTIuNyA0Mi4xIDkyLjYgOTMuNHpNNDQxLjYgMjMzLjVjMC04My40LTgzLjctMTUxLjMtMTg2LjQtMTUxLjNzLTE4Ni40IDY3LjktMTg2LjQgMTUxLjNjMCA3NC43IDY2LjMgMTM3LjQgMTU1LjkgMTQ5LjNjMjEuOCA0LjcgMTkuMyAxMi43IDE0LjQgNDIuMWMtLjggNC43LTMuOCAxOC40IDE2LjEgMTAuMXMxMDcuMy02My4yIDE0Ni41LTEwOC4yYzI3LTI5LjcgMzkuOS01OS44IDM5LjktOTMuMXpcIl1cbn07XG52YXIgZmFHb29nbGVEcml2ZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnb29nbGUtZHJpdmUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYzYWFcIiwgXCJNMzM5IDMxNC45TDE3NS40IDMyaDE2MS4ybDE2My42IDI4Mi45SDMzOXptLTEzNy41IDIzLjZMMTIwLjkgNDgwaDMxMC41TDUxMiAzMzguNUgyMDEuNXpNMTU0LjEgNjcuNEwwIDMzOC41IDgwLjYgNDgwIDIzNyAyMDguOCAxNTQuMSA2Ny40elwiXVxufTtcbnZhciBmYVNlcnZpY2VzdGFjayA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzZXJ2aWNlc3RhY2snLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYzZWNcIiwgXCJNODggMjE2YzgxLjcgMTAuMiAyNzMuNyAxMDIuMyAzMDQgMjMySDBjOTkuNS04LjEgMTg0LjUtMTM3IDg4LTIzMnptMzItMTUyYzMyLjMgMzUuNiA0Ny43IDgzLjkgNDYuNCAxMzMuNkMyNDkuMyAyMzEuMyAzNzMuNyAzMjEuMyA0MDAgNDQ4aDk2QzQ1NS4zIDIzMS45IDIyMi44IDc5LjUgMTIwIDY0elwiXVxufTtcbnZhciBmYVNpbXBseWJ1aWx0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NpbXBseWJ1aWx0JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMjE1XCIsIFwiTTQ4MS4yIDY0aC0xMDZjLTE0LjUgMC0yNi42IDExLjgtMjYuNiAyNi4zdjM5LjZIMTYzLjNWOTAuM2MwLTE0LjUtMTItMjYuMy0yNi42LTI2LjNoLTEwNkMxNi4xIDY0IDQuMyA3NS44IDQuMyA5MC4zdjMzMS40YzAgMTQuNSAxMS44IDI2LjMgMjYuNiAyNi4zaDQ1MC40YzE0LjggMCAyNi42LTExLjggMjYuNi0yNi4zVjkwLjNjLS4yLTE0LjUtMTItMjYuMy0yNi43LTI2LjN6TTE0OS44IDM1NS44Yy0zNi42IDAtNjYuNC0yOS43LTY2LjQtNjYuNCAwLTM2LjkgMjkuNy02Ni42IDY2LjQtNjYuNiAzNi45IDAgNjYuNiAyOS43IDY2LjYgNjYuNiAwIDM2LjctMjkuNyA2Ni40LTY2LjYgNjYuNHptMjEyLjQgMGMtMzYuOSAwLTY2LjYtMjkuNy02Ni42LTY2LjYgMC0zNi42IDI5LjctNjYuNCA2Ni42LTY2LjQgMzYuNiAwIDY2LjQgMjkuNyA2Ni40IDY2LjQgMCAzNi45LTI5LjggNjYuNi02Ni40IDY2LjZ6XCJdXG59O1xudmFyIGZhQml0YnVja2V0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JpdGJ1Y2tldCcsXG4gIGljb246IFs1MTIsIDUxMiwgWzYxODEwXSwgXCJmMTcxXCIsIFwiTTIyLjIgMzJBMTYgMTYgMCAwIDAgNiA0Ny44YTI2LjM1IDI2LjM1IDAgMCAwIC4yIDIuOGw2Ny45IDQxMi4xYTIxLjc3IDIxLjc3IDAgMCAwIDIxLjMgMTguMmgzMjUuN2ExNiAxNiAwIDAgMCAxNi0xMy40TDUwNSA1MC43YTE2IDE2IDAgMCAwLTEzLjItMTguMyAyNC41OCAyNC41OCAwIDAgMC0yLjgtLjJMMjIuMiAzMnptMjg1LjkgMjk3LjhoLTEwNGwtMjguMS0xNDdoMTU3LjNsLTI1LjIgMTQ3elwiXVxufTtcbnZhciBmYUltZGIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaW1kYicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjJkOFwiLCBcIk04OS41IDMyMy42SDUzLjkzVjE4Ni4ySDg5LjVWMzIzLjZ6TTE1Ni4xIDI1MC41TDE2NS4yIDE4Ni4ySDIxMS41VjMyMy42SDE4MC41VjIzMC45TDE2Ny4xIDMyMy42SDE0NS44TDEzMi44IDIzMi45TDEzMi43IDMyMy42SDEwMS41VjE4Ni4ySDE0Ny42QzE0OC4xIDE5NC41IDE1MC40IDIwNC4zIDE1MS45IDIxNS42TDE1Ni4xIDI1MC41ek0yMjMuNyAzMjMuNlYxODYuMkgyNTAuM0MyNjcuMyAxODYuMiAyNzcuMyAxODcuMSAyODMuMyAxODguNkMyODkuNCAxOTAuMyAyOTQgMTkyLjggMjk3LjIgMTk2LjVDMzAwLjMgMTk5LjggMzAyLjMgMjAzLjEgMzAzIDIwOC41QzMwMy45IDIxMi45IDMwNC40IDIyMS42IDMwNC40IDIzNC43VjI4Mi45QzMwNC40IDI5NS4yIDMwMy43IDMwMy40IDMwMi41IDMwNy42QzMwMS40IDMxMS43IDI5OS40IDMxNSAyOTYuNSAzMTcuM0MyOTMuNyAzMTkuNyAyOTAuMSAzMjEuNCAyODUuOCAzMjIuM0MyODEuNiAzMjMuMSAyNzUuMiAzMjMuNiAyNjYuNyAzMjMuNkgyMjMuN3pNMjU5LjIgMjA5LjdWMjk5LjFDMjY0LjMgMjk5LjEgMjY3LjUgMjk4LjEgMjY4LjYgMjk2LjhDMjY5LjcgMjk0LjggMjcwLjQgMjg5LjIgMjcwLjQgMjgwLjFWMjI2LjhDMjcwLjQgMjIwLjYgMjcwLjMgMjE2LjYgMjY5LjcgMjE0LjhDMjY5LjQgMjEzIDI2OC41IDIxMS44IDI2Ny4xIDIxMC4xQzI2NS43IDIxMC4xIDI2MyAyMDkuNyAyNTkuMiAyMDkuN1YyMDkuN3pNMzE2LjUgMzIzLjZWMTg2LjJIMzUwLjZWMjMwLjFDMzUzLjUgMjI3LjcgMzU2LjcgMjI1LjIgMzYwLjEgMjIzLjVDMzYzLjcgMjIyIDM2OC45IDIyMS4xIDM3Mi45IDIyMS4xQzM3Ny43IDIyMS4xIDM4MS44IDIyMS45IDM4NS4yIDIyMy4zQzM4OC42IDIyNC44IDM5MS4yIDIyNi44IDM5My4yIDIyOS41QzM5NC45IDIzMi4xIDM5NS45IDIzNC44IDM5Ni4zIDIzNy4zQzM5Ni43IDIzOS45IDM5Ni4xIDI0NS4zIDM5Ni4xIDI1My41VjI5Mi4xQzM5Ni4xIDMwMC4zIDM5Ni4zIDMwNi40IDM5NS4zIDMxMC41QzM5NC4yIDMxNC41IDM5MS41IDMxOC4xIDM4Ny41IDMyMC4xQzM4My40IDMyNCAzNzguNiAzMjUuNCAzNzIuOSAzMjUuNEMzNjguOSAzMjUuNCAzNjMuNyAzMjQuNSAzNjAuMiAzMjIuOUMzNTYuNyAzMjEuMSAzNTMuNSAzMTguNCAzNTAuNiAzMTQuOUwzNDguNSAzMjMuNkwzMTYuNSAzMjMuNnpNMzYxLjYgMzAyLjlDMzYyLjMgMzAxLjEgMzYyLjYgMjk2LjkgMzYyLjYgMjkwLjRWMjU1QzM2Mi42IDI0OS40IDM2Mi4zIDI0NS41IDM2MS41IDI0My44QzM2MC44IDI0MS45IDM1Ny44IDI0MS4xIDM1NS43IDI0MS4xQzM1My43IDI0MS4xIDM1Mi4zIDI0MS45IDM1MS42IDI0My40QzM1MSAyNDQuOSAzNTAuNiAyNDguOCAzNTAuNiAyNTVWMjkxLjRDMzUwLjYgMjk3LjUgMzUxIDMwMS40IDM1MS44IDMwM0MzNTIuNCAzMDQuNyAzNTMuOSAzMDUuNSAzNTUuOSAzMDUuNUMzNTguMSAzMDUuNSAzNjAuMSAzMDQuNyAzNjEuNiAzMDIuOUwzNjEuNiAzMDIuOXpNNDE4LjQgMzIuMDRDNDM0LjEgMzMuMjcgNDQ3LjEgNDcuMjggNDQ3LjEgNjMuOTJWNDQ4LjFDNDQ3LjEgNDY0LjUgNDM1LjIgNDc4LjUgNDE4LjkgNDc5LjFDNDE4LjYgNDc5LjEgNDE4LjQgNDgwIDQxOC4xIDQ4MEgyOS44OEMyOS42IDQ4MCAyOS4zMiA0NzkuMSAyOS4wNCA0NzkuOUMxMy4zMSA0NzguNSAxLjA5MyA0NjYuMSAwIDQ0OS43TC4wMTg2IDYxLjc4QzEuMDgxIDQ1Ljg4IDEzLjgyIDMzLjA5IDMwLjI2IDMxLjFINDE3LjdDNDE3LjkgMzEuMSA0MTguMiAzMi4wMSA0MTguNCAzMi4wNEw0MTguNCAzMi4wNHpNMzAuMjcgNDEuMjZDMTkgNDIuMDEgMTAuMDIgNTEuMDEgOS4yNTcgNjIuNFY0NDkuN0M5LjYzIDQ1NS4xIDExLjkxIDQ2MC4yIDE1LjcgNDY0QzE5LjQ4IDQ2Ny45IDI0LjUxIDQ3MC4zIDI5Ljg5IDQ3MC43SDQxOC4xQzQyOS42IDQ2OS43IDQzOC43IDQ1OS4xIDQzOC43IDQ0OC4xVjYzLjkxQzQzOC43IDU4LjE3IDQzNi42IDUyLjY1IDQzMi43IDQ4LjQ1QzQyOC44IDQ0LjI0IDQyMy40IDQxLjY3IDQxNy43IDQxLjI2TDMwLjI3IDQxLjI2elwiXVxufTtcbnZhciBmYURlZXplciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkZWV6ZXInLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImUwNzdcIiwgXCJNNDUxLjQ2LDI0NC43MUg1NzZWMTcySDQ1MS40NlptMC0xNzMuODl2NzIuNjdINTc2VjcwLjgyWm0wLDI3NS4wNkg1NzZWMjczLjJINDUxLjQ2Wk0wLDQ0Ny4wOUgxMjQuNTRWMzc0LjQySDBabTE1MC40NywwSDI3NVYzNzQuNDJIMTUwLjQ3Wm0xNTAuNTIsMEg0MjUuNTNWMzc0LjQySDMwMVptMTUwLjQ3LDBINTc2VjM3NC40Mkg0NTEuNDZaTTMwMSwzNDUuODhINDI1LjUzVjI3My4ySDMwMVptLTE1MC41MiwwSDI3NVYyNzMuMkgxNTAuNDdabTAtMTAxLjE3SDI3NVYxNzJIMTUwLjQ3WlwiXVxufTtcbnZhciBmYVJhc3BiZXJyeVBpID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Jhc3BiZXJyeS1waScsXG4gIGljb246IFs0MDcsIDUxMiwgW10sIFwiZjdiYlwiLCBcIk0zNzIgMjMyLjVsLTMuNy02LjVjLjEtNDYuNC0yMS40LTY1LjMtNDYuNS03OS43IDcuNi0yIDE1LjQtMy42IDE3LjYtMTMuMiAxMy4xLTMuMyAxNS44LTkuNCAxNy4xLTE1LjggMy40LTIuMyAxNC44LTguNyAxMy42LTE5LjcgNi40LTQuNCAxMC0xMC4xIDguMS0xOC4xIDYuOS03LjUgOC43LTEzLjcgNS44LTE5LjQgOC4zLTEwLjMgNC42LTE1LjYgMS4xLTIwLjkgNi4yLTExLjIuNy0yMy4yLTE2LjYtMjEuMi02LjktMTAuMS0yMS45LTcuOC0yNC4yLTcuOC0yLjYtMy4yLTYtNi0xNi41LTQuNy02LjgtNi4xLTE0LjQtNS0yMi4zLTIuMS05LjMtNy4zLTE1LjUtMS40LTIyLjYuOEMyNzEuNi42IDI2OSA1LjUgMjYzLjUgNy42Yy0xMi4zLTIuNi0xNi4xIDMtMjIgOC45bC02LjktLjFjLTE4LjYgMTAuOC0yNy44IDMyLjgtMzEuMSA0NC4xLTMuMy0xMS4zLTEyLjUtMzMuMy0zMS4xLTQ0LjFsLTYuOS4xYy01LjktNS45LTkuNy0xMS41LTIyLTguOS01LjYtMi04LjEtNy0xOS40LTMuNC00LjYtMS40LTguOS00LjQtMTMuOS00LjMtMi42LjEtNS41IDEtOC43IDMuNS03LjktMy0xNS41LTQtMjIuMyAyLjEtMTAuNS0xLjMtMTQgMS40LTE2LjUgNC43LTIuMyAwLTE3LjMtMi4zLTI0LjIgNy44QzIxLjIgMTYgMTUuOCAyOCAyMiAzOS4yYy0zLjUgNS40LTcuMiAxMC43IDEuMSAyMC45LTIuOSA1LjctMS4xIDExLjkgNS44IDE5LjQtMS44IDggMS44IDEzLjcgOC4xIDE4LjEtMS4yIDExIDEwLjIgMTcuNCAxMy42IDE5LjcgMS4zIDYuNCA0IDEyLjQgMTcuMSAxNS44IDIuMiA5LjUgMTAgMTEuMiAxNy42IDEzLjItMjUuMSAxNC40LTQ2LjYgMzMuMy00Ni41IDc5LjdsLTMuNyA2LjVjLTI4LjggMTcuMi01NC43IDcyLjctMTQuMiAxMTcuNyAyLjYgMTQuMSA3LjEgMjQuMiAxMSAzNS40IDUuOSA0NS4yIDQ0LjUgNjYuMyA1NC42IDY4LjggMTQuOSAxMS4yIDMwLjggMjEuOCA1Mi4yIDI5LjJDMTU5IDUwNC4yIDE4MSA1MTIgMjAzIDUxMmgxYzIyLjEgMCA0NC03LjggNjQuMi0yOC40IDIxLjUtNy40IDM3LjMtMTggNTIuMi0yOS4yIDEwLjItMi41IDQ4LjctMjMuNiA1NC42LTY4LjggMy45LTExLjIgOC40LTIxLjMgMTEtMzUuNCA0MC42LTQ1LjEgMTQuNy0xMDAuNS0xNC0xMTcuN3ptLTIyLjItOGMtMS41IDE4LjctOTguOS02NS4xLTgyLjEtNjcuOSA0NS43LTcuNSA4My42IDE5LjIgODIuMSA2Ny45em0tNDMgOTMuMWMtMjQuNSAxNS44LTU5LjggNS42LTc4LjgtMjIuOHMtMTQuNi02NC4yIDkuOS04MGMyNC41LTE1LjggNTkuOC01LjYgNzguOCAyMi44czE0LjYgNjQuMi05LjkgODB6TTIzOC45IDI5LjNjLjggNC4yIDEuOCA2LjggMi45IDcuNiA1LjQtNS44IDkuOC0xMS43IDE2LjgtMTcuMyAwIDMuMy0xLjcgNi44IDIuNSA5LjQgMy43LTUgOC44LTkuNSAxNS41LTEzLjMtMy4yIDUuNi0uNiA3LjMgMS4yIDkuNiA1LjEtNC40IDEwLTguOCAxOS40LTEyLjMtMi42IDMuMS02LjIgNi4yLTIuNCA5LjggNS4zLTMuMyAxMC42LTYuNiAyMy4xLTguOS0yLjggMy4xLTguNyA2LjMtNS4xIDkuNCA2LjYtMi41IDE0LTQuNCAyMi4xLTUuNC0zLjkgMy4yLTcuMSA2LjMtMy45IDguOCA3LjEtMi4yIDE2LjktNS4xIDI2LjQtMi42bC02IDYuMWMtLjcuOCAxNC4xLjYgMjMuOS44LTMuNiA1LTcuMiA5LjctOS4zIDE4LjIgMSAxIDUuOC40IDEwLjQgMC00LjcgOS45LTEyLjggMTIuMy0xNC43IDE2LjYgMi45IDIuMiA2LjggMS42IDExLjIuMS0zLjQgNi45LTEwLjQgMTEuNy0xNiAxNy4zIDEuNCAxIDMuOSAxLjYgOS43LjktNS4yIDUuNS0xMS40IDEwLjUtMTguOCAxNSAxLjMgMS41IDUuOCAxLjUgMTAgMS42LTYuNyA2LjUtMTUuMyA5LjktMjMuNCAxNC4yIDQgMi43IDYuOSAyLjEgMTAgMi4xLTUuNyA0LjctMTUuNCA3LjEtMjQuNCAxMCAxLjcgMi43IDMuNCAzLjQgNy4xIDQuMS05LjUgNS4zLTIzLjIgMi45LTI3IDUuNi45IDIuNyAzLjYgNC40IDYuNyA1LjgtMTUuNC45LTU3LjMtLjYtNjUuNC0zMi4zIDE1LjctMTcuMyA0NC40LTM3LjUgOTMuNy02Mi42LTM4LjQgMTIuOC03MyAzMC0xMDIgNTMuNS0zNC4zLTE1LjktMTAuOC01NS45IDUuOC03MS44em0tMzQuNCAxMTQuNmMyNC4yLS4zIDU0LjEgMTcuOCA1NCAzNC43LS4xIDE1LTIxIDI3LjEtNTMuOCAyNi45LTMyLjEtLjQtNTMuNy0xNS4yLTUzLjYtMjkuOCAwLTExLjkgMjYuMi0zMi41IDUzLjQtMzEuOHptLTEyMy0xMi44YzMuNy0uNyA1LjQtMS41IDcuMS00LjEtOS0yLjgtMTguNy01LjMtMjQuNC0xMCAzLjEgMCA2IC43IDEwLTIuMS04LjEtNC4zLTE2LjctNy43LTIzLjQtMTQuMiA0LjItLjEgOC43IDAgMTAtMS42LTcuNC00LjUtMTMuNi05LjUtMTguOC0xNSA1LjguNyA4LjMuMSA5LjctLjktNS42LTUuNi0xMi43LTEwLjQtMTYtMTcuMyA0LjMgMS41IDguMyAyIDExLjItLjEtMS45LTQuMi0xMC02LjctMTQuNy0xNi42IDQuNi40IDkuNCAxIDEwLjQgMC0yLjEtOC41LTUuOC0xMy4zLTkuMy0xOC4yIDkuOC0uMSAyNC42IDAgMjMuOS0uOGwtNi02LjFjOS41LTIuNSAxOS4zLjQgMjYuNCAyLjYgMy4yLTIuNS0uMS01LjYtMy45LTguOCA4LjEgMS4xIDE1LjQgMi45IDIyLjEgNS40IDMuNS0zLjEtMi4zLTYuMy01LjEtOS40IDEyLjUgMi4zIDE3LjggNS42IDIzLjEgOC45IDMuOC0zLjYuMi02LjctMi40LTkuOCA5LjQgMy40IDE0LjMgNy45IDE5LjQgMTIuMyAxLjctMi4zIDQuNC00IDEuMi05LjYgNi43IDMuOCAxMS44IDguMyAxNS41IDEzLjMgNC4xLTIuNiAyLjUtNi4yIDIuNS05LjQgNyA1LjYgMTEuNCAxMS41IDE2LjggMTcuMyAxLjEtLjggMi0zLjQgMi45LTcuNiAxNi42IDE1LjkgNDAuMSA1NS45IDYgNzEuOC0yOS0yMy41LTYzLjYtNDAuNy0xMDItNTMuNSA0OS4zIDI1IDc4IDQ1LjMgOTMuNyA2Mi42LTggMzEuOC01MCAzMy4yLTY1LjQgMzIuMyAzLjEtMS40IDUuOC0zLjIgNi43LTUuOC00LTIuOC0xNy42LS40LTI3LjItNS42em02MC4xIDI0LjFjMTYuOCAyLjgtODAuNiA4Ni41LTgyLjEgNjcuOS0xLjUtNDguNyAzNi41LTc1LjUgODIuMS02Ny45ek0zOC4yIDM0MmMtMjMuNy0xOC44LTMxLjMtNzMuNyAxMi42LTk4LjMgMjYuNS03IDkgMTA3LjgtMTIuNiA5OC4zem05MSA5OC4yYy0xMy4zIDcuOS00NS44IDQuNy02OC44LTI3LjktMTUuNS0yNy40LTEzLjUtNTUuMi0yLjYtNjMuNCAxNi4zLTkuOCA0MS41IDMuNCA2MC45IDI1LjYgMTYuOSAyMCAyNC42IDU1LjMgMTAuNSA2NS43em0tMjYuNC0xMTkuN2MtMjQuNS0xNS44LTI4LjktNTEuNi05LjktODBzNTQuMy0zOC42IDc4LjgtMjIuOCAyOC45IDUxLjYgOS45IDgwYy0xOS4xIDI4LjQtNTQuNCAzOC42LTc4LjggMjIuOHpNMjA1IDQ5NmMtMjkuNCAxLjItNTguMi0yMy43LTU3LjgtMzIuMy0uNC0xMi43IDM1LjgtMjIuNiA1OS4zLTIyIDIzLjctMSA1NS42IDcuNSA1NS43IDE4LjkuNSAxMS0yOC44IDM1LjktNTcuMiAzNS40em01OC45LTEyNC45Yy4yIDI5LjctMjYuMiA1My44LTU4LjggNTQtMzIuNi4yLTU5LjItMjMuOC01OS40LTUzLjR2LS42Yy0uMi0yOS43IDI2LjItNTMuOCA1OC44LTU0IDMyLjYtLjIgNTkuMiAyMy44IDU5LjQgNTMuNHYuNnptODIuMiA0Mi43Yy0yNS4zIDM0LjYtNTkuNiAzNS45LTcyLjMgMjYuMy0xMy4zLTEyLjQtMy4yLTUwLjkgMTUuMS03MiAyMC45LTIzLjMgNDMuMy0zOC41IDU4LjktMjYuNiAxMC41IDEwLjMgMTYuNyA0OS4xLTEuNyA3Mi4zem0yMi45LTczLjJjLTIxLjUgOS40LTM5LTEwNS4zLTEyLjYtOTguMyA0My45IDI0LjcgMzYuMyA3OS42IDEyLjYgOTguM3pcIl1cbn07XG52YXIgZmFKaXJhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ppcmEnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImY3YjFcIiwgXCJNNDkwIDI0MS43QzQxNy4xIDE2OSAzMjAuNiA3MS44IDI0OC41IDAgODMgMTY0LjkgNiAyNDEuNyA2IDI0MS43Yy03LjkgNy45LTcuOSAyMC43IDAgMjguN0MxMzguOCA0MDIuNyA2Ny44IDMzMS45IDI0OC41IDUxMmMzNzkuNC0zNzggMTUuNy0xNi43IDI0MS41LTI0MS43IDgtNy45IDgtMjAuNyAwLTI4LjZ6bS0yNDEuNSA5MGwtNzYtNzUuNyA3Ni03NS43IDc2IDc1LjctNzYgNzUuN3pcIl1cbn07XG52YXIgZmFEb2NrZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZG9ja2VyJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMzk1XCIsIFwiTTM0OS45IDIzNi4zaC02Ni4xdi01OS40aDY2LjF2NTkuNHptMC0yMDQuM2gtNjYuMXY2MC43aDY2LjFWMzJ6bTc4LjIgMTQ0LjhIMzYydjU5LjRoNjYuMXYtNTkuNHptLTE1Ni4zLTcyLjFoLTY2LjF2NjAuMWg2Ni4xdi02MC4xem03OC4xIDBoLTY2LjF2NjAuMWg2Ni4xdi02MC4xem0yNzYuOCAxMDBjLTE0LjQtOS43LTQ3LjYtMTMuMi03My4xLTguNC0zLjMtMjQtMTYuNy00NC45LTQxLjEtNjMuN2wtMTQtOS4zLTkuMyAxNGMtMTguNCAyNy44LTIzLjQgNzMuNi0zLjcgMTAzLjgtOC43IDQuNy0yNS44IDExLjEtNDguNCAxMC43SDIuNGMtOC43IDUwLjggNS44IDExNi44IDQ0IDE2Mi4xIDM3LjEgNDMuOSA5Mi43IDY2LjIgMTY1LjQgNjYuMiAxNTcuNCAwIDI3My45LTcyLjUgMzI4LjQtMjA0LjIgMjEuNC40IDY3LjYuMSA5MS4zLTQ1LjIgMS41LTIuNSA2LjYtMTMuMiA4LjUtMTcuMWwtMTMuMy04Ljl6bS01MTEuMS0yNy45aC02NnY1OS40aDY2LjF2LTU5LjR6bTc4LjEgMGgtNjYuMXY1OS40aDY2LjF2LTU5LjR6bTc4LjEgMGgtNjYuMXY1OS40aDY2LjF2LTU5LjR6bS03OC4xLTcyLjFoLTY2LjF2NjAuMWg2Ni4xdi02MC4xelwiXVxufTtcbnZhciBmYVNjcmVlbnBhbCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzY3JlZW5wYWwnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImU1NzBcIiwgXCJNMjMzLjUgMjIuNDlDMjMzLjUgMTAuMDcgMjQzLjYgMCAyNTYgMEMyNjguNCAwIDI3OC41IDEwLjA3IDI3OC41IDIyLjQ5QzI3OC41IDM0LjkxIDI2OC40IDQ0Ljk4IDI1NiA0NC45OEMyNDMuNiA0NC45OCAyMzMuNSAzNC45MSAyMzMuNSAyMi40OXpNMzEzLjQgMjU5QzMxMy40IDI5MC43IDI4Ny43IDMxNi40IDI1NiAzMTYuNEMyMjQuMyAzMTYuNCAxOTguNiAyOTAuNyAxOTguNiAyNTlDMTk4LjYgMjI3LjMgMjI0LjMgMjAxLjYgMjU2IDIwMS42QzI4Ny43IDIwMS42IDMxMy40IDIyNy4zIDMxMy40IDI1OXpNMzM3LjIgMzUwQzM1OS41IDMzMC4xIDM3My43IDMwMi43IDM3Ny4xIDI3M0g0OTYuNkM0OTMuMSAzMzQuNCA0NjYuMiAzOTIuMiA0MjEuNCA0MzQuNEMzNzYuNyA0NzYuNiAzMTcuNSA1MDAuMiAyNTYgNTAwLjJDMTk0LjUgNTAwLjIgMTM1LjMgNDc2LjYgOTAuNTYgNDM0LjRDNDUuODMgMzkyLjIgMTguOTQgMzM0LjQgMTUuMzkgMjczSDEzNS4xQzEzOC41IDMwMi43IDE1Mi43IDMzMC4xIDE3NSAzNTBDMTk3LjMgMzY5LjkgMjI2LjIgMzgwLjkgMjU2LjEgMzgwLjlDMjg1LjEgMzgwLjkgMzE0LjggMzY5LjkgMzM3LjIgMzUwek03My4xNCAxNDAuM0M3My41NCAxNTIuNyA2My44MSAxNjMuMSA1MS4zOSAxNjMuNUMzOC45NyAxNjMuOSAyOC41OSAxNTQuMiAyOC4xOCAxNDEuOEMyNy43OCAxMjkuMyAzNy41MiAxMTguOSA0OS45NCAxMTguNUM2Mi4zNSAxMTguMSA3Mi43NCAxMjcuOSA3My4xNCAxNDAuM3pNNDM4LjkgMTQxQzQzOC45IDEyOC42IDQ0OC45IDExOC41IDQ2MS40IDExOC41QzQ3My44IDExOC41IDQ4My44IDEyOC42IDQ4My44IDE0MUM0ODMuOCAxNTMuNSA0NzMuOCAxNjMuNSA0NjEuNCAxNjMuNUM0NDguOSAxNjMuNSA0MzguOSAxNTMuNSA0MzguOSAxNDF6TTMxNy45IDk1LjI3QzMwMC42IDEwOS4xIDI3OC43IDExOC4xIDI1NiAxMTguMUMyMzMuMyAxMTguMSAyMTEuNCAxMDkuMSAxOTQuMSA5NS4yN0MxNzYuOCA4MC41NSAxNjUuMyA2MC4xOCAxNjEuNyAzNy43OEMxNzYuOCAzMS4zNyAxOTIuNSAyNi41MiAyMDguNiAyMy4zMUMyMDguNiAzNS44OCAyMTMuNiA0Ny45MyAyMjIuNSA1Ni44MkMyMzEuNCA2NS43IDI0My40IDcwLjcgMjU2IDcwLjdDMjY4LjYgNzAuNyAyODAuNiA2NS43IDI4OS41IDU2LjgyQzI5OC40IDQ3LjkzIDMwMy40IDM1Ljg4IDMwMy40IDIzLjMxQzMxOS41IDI2LjUyIDMzNS4yIDMxLjM3IDM1MC4zIDM3Ljc4QzM0Ni43IDYwLjE4IDMzNS4yIDgwLjU1IDMxNy45IDk1LjI3SDMxNy45ek04Mi43OCAyMzFDNjEuNDIgMjM4LjYgMzguMDYgMjM4LjQgMTYuODYgMjMwLjRDMTguODIgMjE0LjEgMjIuNDYgMTk4LjEgMjcuNzEgMTgyLjVDMzMuMSAxODUuNiAzOS4wNSAxODcuNiA0NS4yMiAxODguNUM1MS4zOSAxODkuMyA1Ny42NyAxODguOSA2My42OCAxODcuM0M2OS42OSAxODUuNiA3NS4zMyAxODIuOSA4MC4yNyAxNzkuMUM4NS4yMSAxNzUuMyA4OS4zNiAxNzAuNiA5Mi40NyAxNjUuMkM5NS41OCAxNTkuOCA5Ny42MSAxNTMuOCA5OC40MiAxNDcuN0M5OS4yMyAxNDEuNSA5OC44MyAxMzUuMiA5Ny4yMiAxMjkuMkM5NS42MSAxMjMuMiA5Mi44MyAxMTcuNiA4OS4wNCAxMTIuNkM4NS4yNSAxMDcuNyA4MC41MyAxMDMuNSA3NS4xNCAxMDAuNEM4NS45NiA4OC4xMSA5OC4wMSA3Ni45NCAxMTEuMSA2Ny4wN0MxMjguNyA4MS40MiAxNDAuNiAxMDEuNiAxNDQuNyAxMjMuOUMxNDguOCAxNDYuMiAxNDQuOCAxNjkuMyAxMzMuNSAxODguOUMxMjIuMSAyMDguNSAxMDQuMSAyMjMuNCA4Mi43OCAyMzFWMjMxek00MjkuMiAyMzEuMUM0MDcuOSAyMjMuNSAzODkuOSAyMDguNSAzNzguNSAxODguOUMzNjcuMiAxNjkuMyAzNjMuMyAxNDYuMiAzNjcuNCAxMjMuOUMzNzEuNSAxMDEuNyAzODMuNCA4MS41NCA0MDAuOSA2Ny4xOUM0MTQgNzcuMDQgNDI2LjEgODguMjEgNDM2LjkgMTAwLjVDNDI2LjIgMTA2LjkgNDE4LjUgMTE3LjIgNDE1LjQgMTI5LjNDNDEyLjIgMTQxLjMgNDEzLjEgMTU0LjEgNDIwLjIgMTY0LjlDNDI2LjQgMTc1LjcgNDM2LjYgMTgzLjYgNDQ4LjYgMTg2LjlDNDYwLjYgMTkwLjIgNDczLjUgMTg4LjYgNDg0LjMgMTgyLjZDNDg5LjYgMTk4LjEgNDkzLjIgMjE0LjIgNDk1LjIgMjMwLjRDNDczLjEgMjM4LjUgNDUwLjYgMjM4LjcgNDI5LjIgMjMxLjFMNDI5LjIgMjMxLjF6XCJdXG59O1xudmFyIGZhQmx1ZXRvb3RoID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JsdWV0b290aCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI5M1wiLCBcIk0yOTIuNiAxNzEuMUwyNDkuNyAyMTRsLS4zLTg2IDQzLjIgNDMuMW0tNDMuMiAyMTkuOGw0My4xLTQzLjEtNDIuOS00Mi45LS4yIDg2ek00MTYgMjU5LjRDNDE2IDQ2NSAzNDQuMSA1MTIgMjMwLjkgNTEyUzMyIDQ2NSAzMiAyNTkuNCAxMTUuNCAwIDIyOC42IDAgNDE2IDUzLjkgNDE2IDI1OS40em0tMTU4LjUgMGw3OS40LTg4LjZMMjExLjggMzYuNXYxNzYuOUwxMzggMTM5LjZsLTI3IDI2LjkgOTIuNyA5My05Mi43IDkzIDI2LjkgMjYuOSA3My44LTczLjggMi4zIDE3MCAxMjcuNC0xMjcuNS04My45LTg4Ljd6XCJdXG59O1xudmFyIGZhR2l0dGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dpdHRlcicsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjQyNlwiLCBcIk02Ni40IDMyMi41SDE2VjBoNTAuNHYzMjIuNXpNMTY2LjkgNzYuMWgtNTAuNFY1MTJoNTAuNFY3Ni4xem0xMDAuNiAwaC01MC40VjUxMmg1MC40Vjc2LjF6TTM2OCA3NmgtNTAuNHYyNDdIMzY4Vjc2elwiXVxufTtcbnZhciBmYURBbmREID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2QtYW5kLWQnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYzOGRcIiwgXCJNODIuNSA5OC45Yy0uNi0xNy4yIDItMzMuOCAxMi43LTQ4LjIuMyA3LjQgMS4yIDE0LjUgNC4yIDIxLjYgNS45LTI3LjUgMTkuNy00OS4zIDQyLjMtNjUuNS0xLjkgNS45LTMuNSAxMS44LTMgMTcuNyA4LjctNy40IDE4LjgtMTcuOCA0NC40LTIyLjcgMTQuNy0yLjggMjkuNy0yIDQyLjEgMSAzOC41IDkuMyA2MSAzNC4zIDY5LjcgNzIuMyA1LjMgMjMuMS43IDQ1LTguMyA2Ni40LTUuMiAxMi40LTEyIDI0LjQtMjAuNyAzNS4xLTItMS45LTMuOS0zLjgtNS44LTUuNi00Mi44LTQwLjgtMjYuOC0yNS4yLTM3LjQtMzcuNC0xLjEtMS4yLTEtMi4yLS4xLTMuNiA4LjMtMTMuNSAxMS44LTI4LjIgMTAtNDQtMS4xLTkuOC00LjMtMTguOS0xMS4zLTI2LjItMTQuNS0xNS4zLTM5LjItMTUtNTMuNS42LTExLjQgMTIuNS0xNC4xIDI3LjQtMTAuOSA0My42LjIgMS4zLjQgMi43IDAgMy45LTMuNCAxMy43LTQuNiAyNy42LTIuNSA0MS42LjEuNS4xIDEuMS4xIDEuNiAwIC4zLS4xLjUtLjIgMS4xLTIxLjgtMTEtMzYtMjguMy00My4yLTUyLjItOC4zIDE3LjgtMTEuMSAzNS41LTYuNiA1NC4xLTE1LjYtMTUuMi0yMS4zLTM0LjMtMjItNTUuMnptNDY5LjYgMTIzLjJjLTExLjYtMTEuNi0yNS0yMC40LTQwLjEtMjYuNi0xMi44LTUuMi0yNi03LjktMzkuOS03LjEtMTAgLjYtMTkuNiAzLjEtMjkgNi40LTIuNS45LTUuMSAxLjYtNy43IDIuMi00LjkgMS4yLTcuMy0zLjEtNC43LTYuOCAzLjItNC42IDMuNC00LjIgMTUtMTIgLjYtLjQgMS4yLS44IDIuMi0xLjVoLTIuNWMtLjYgMC0xLjIuMi0xLjkuMy0xOS4zIDMuMy0zMC43IDE1LjUtNDguOSAyOS42LTEwLjQgOC4xLTEzLjggMy44LTEyLS41IDEuNC0zLjUgMy4zLTYuNyA1LjEtMTAgMS0xLjggMi4zLTMuNCAzLjUtNS4xLS4yLS4yLS41LS4zLS43LS41LTI3IDE4LjMtNDYuNyA0Mi40LTU3LjcgNzMuMy4zLjMuNy42IDEgLjkuMy0uNi41LTEuMi45LTEuNyAxMC40LTEyLjEgMjIuOC0yMS44IDM2LjYtMjkuOCAxOC4yLTEwLjYgMzcuNS0xOC4zIDU4LjctMjAuMiA0LjMtLjQgOC43LS4xIDEzLjEtLjEtMS44LjctMy41LjktNS4zIDEuMS0xOC41IDIuNC0zNS41IDktNTEuNSAxOC41LTMwLjIgMTcuOS01NC41IDQyLjItNzUuMSA3MC40LS4zLjQtLjQuOS0uNyAxLjMgMTQuNSA1LjMgMjQgMTcuMyAzNi4xIDI1LjYuMi0uMS4zLS4yLjQtLjRsMS4yLTIuN2MxMi4yLTI2LjkgMjctNTIuMyA0Ni43LTc0LjUgMTYuNy0xOC44IDM4LTI1LjMgNjIuNS0yMCA1LjkgMS4zIDExLjQgNC40IDE3LjIgNi44IDIuMy0xLjQgNS4xLTMuMiA4LTQuNyA4LjQtNC4zIDE3LjQtNyAyNi43LTkgMTQuNy0zLjEgMjkuNS00LjkgNDQuNS0xLjN2LS41Yy0uNS0uNC0xLjItLjgtMS43LTEuNHpNMzE2LjcgMzk3LjZjLTM5LjQtMzMtMjIuOC0xOS41LTQyLjctMzUuNi0uOC45IDAtLjItMS45IDMtMTEuMiAxOS4xLTI1LjUgMzUuMy00NCA0Ny42LTEwLjMgNi44LTIxLjUgMTEuOC0zNC4xIDExLjgtMjEuNiAwLTM4LjItOS41LTQ5LjQtMjcuOC0xMi0xOS41LTEzLjMtNDAuNy04LjItNjIuNiA3LjgtMzMuOCAzMC4xLTU1LjIgMzguNi02NC4zLTE4LjctNi4yLTMzIDEuNy00Ni40IDEzLjkuOC0xMy45IDQuMy0yNi4yIDExLjgtMzcuMy0yNC4zIDEwLjYtNDUuOSAyNS02NC44IDQzLjktLjMtNS44IDUuNC00My43IDUuNi00NC43LjMtMi43LS42LTUuMy0zLTcuNC0yNC4yIDI0LjctNDQuNSA1MS44LTU2LjEgODQuNiA3LjQtNS45IDE0LjktMTEuNCAyMy42LTE2LjItOC4zIDIyLjMtMTkuNiA1Mi44LTcuOCAxMDEuMSA0LjYgMTkgMTEuOSAzNi44IDI0LjEgNTIuMyAyLjkgMy43IDYuMyA2LjkgOS41IDEwLjMuMi0uMi40LS4zLjYtLjUtMS40LTctMi4yLTE0LjEtMS41LTIxLjkgMi4yIDMuMiAzLjkgNiA1LjkgOC42IDEyLjYgMTYgMjguNyAyNy40IDQ3LjIgMzUuNiAyNSAxMS4zIDUxLjEgMTMuMyA3Ny45IDguNiA1NC45LTkuNyA5MC43LTQ4LjYgMTE2LTk4LjggMS0xLjguNi0yLjktLjktNC4yem0xNzItNDYuNGMtOS41LTMuMS0yMi4yLTQuMi0yOC43LTIuOSA5LjkgNCAxNC4xIDYuNiAxOC44IDEyIDEyLjYgMTQuNCAxMC40IDM0LjctNS40IDQ1LjYtMTEuNyA4LjEtMjQuOSAxMC41LTM4LjkgOS4xLTEuMi0uMS0yLjMtLjQtMy0uNiAyLjgtMy43IDYtNyA4LjEtMTAuOCA5LjQtMTYuOCA1LjQtNDIuMS04LjctNTYuMS0yLjEtMi4xLTQuNi0zLjktNy01LjktLjMgMS4zLS4xIDIuMS4xIDIuOCA0LjIgMTYuNi04LjEgMzIuNC0yNC44IDMxLjgtNy42LS4zLTEzLjktMy44LTE5LjYtOC41LTE5LjUtMTYuMS0zOS4xLTMyLjEtNTguNS00OC4zLTUuOS00LjktMTIuNS04LjEtMjAuMS04LjctNC42LS40LTkuMy0uNi0xMy45LS45LTUuOS0uNC04LjgtMi44LTEwLjQtOC40LS45LTMuNC0xLjUtNi44LTIuMi0xMC4yLTEuNS04LjEtNi4yLTEzLTE0LjMtMTQuMi00LjQtLjctOC45LTEtMTMuMy0xLjUtMTMtMS40LTE5LjgtNy40LTIyLjYtMjAuMy01IDExLTEuNiAyMi40IDcuMyAyOS45IDQuNSAzLjggOS4zIDcuMyAxMy44IDExLjIgNC42IDMuOCA3LjQgOC43IDcuOSAxNC44LjQgNC43LjggOS41IDEuOCAxNC4xIDIuMiAxMC42IDguOSAxOC40IDE3IDI1LjEgMTYuNSAxMy43IDMzIDI3LjMgNDkuNSA0MS4xIDE3LjkgMTUgMTMuOSAzMi44IDEzIDU2LS45IDIyLjkgMTIuMiA0Mi45IDMzLjUgNTEuMiAxIC40IDIgLjYgMy42IDEuMS0xNS43LTE4LjItMTAuMS00NC4xLjctNTIuMy4zIDIuMi40IDQuMy45IDYuNCA5LjQgNDQuMSA0NS40IDY0LjIgODUgNTYuOSAxNi0yLjkgMzAuNi04LjkgNDIuOS0xOS44IDItMS44IDMuNy00LjEgNS45LTYuNS0xOS4zIDQuNi0zNS44LjEtNTAuOS0xMC42LjctLjMgMS4zLS4zIDEuOS0uMyAyMS4zIDEuOCA0MC42LTMuNCA1Ny0xNy40IDE5LjUtMTYuNiAyNi42LTQyLjkgMTcuNC02Ni04LjMtMjAuMS0yMy42LTMyLjMtNDMuOC0zOC45ek05OS40IDE3OS4zYy01LjMtOS4yLTEzLjItMTUuNi0yMi4xLTIxLjMgMTMuNy0uNSAyNi42LjIgMzkuNiAzLjctNy0xMi4yLTguNS0yNC43LTUtMzguNyA1LjMgMTEuOSAxMy43IDIwLjEgMjMuNiAyNi44IDE5LjcgMTMuMiAzNS43IDE5LjYgNDYuNyAzMC4yIDMuNCAzLjMgNi4zIDcuMSA5LjYgMTAuOS0uOC0yLjEtMS40LTQuMS0yLjItNi01LTEwLjYtMTMtMTguNi0yMi42LTI1LTEuOC0xLjItMi44LTIuNS0zLjQtNC41LTMuMy0xMi41LTMtMjUuMS0uNy0zNy42IDEtNS41IDIuOC0xMC45IDQuNS0xNi4zLjgtMi40IDIuMy00LjYgNC02LjYuNiA2LjkgMCAyNS41IDE5LjYgNDYgMTAuOCAxMS4zIDIyLjQgMjEuOSAzMy45IDMyLjcgOSA4LjUgMTguMyAxNi43IDI1LjUgMjYuOCAxLjEgMS42IDIuMiAzLjMgMy44IDQuNy01LTEzLTE0LjItMjQuMS0yNC4yLTMzLjgtOS42LTkuMy0xOS40LTE4LjQtMjkuMi0yNy40LTMuMy0zLTQuNi02LjctNS4xLTEwLjktMS4yLTEwLjQgMC0yMC42IDQuMy0zMC4yLjUtMSAxLjEtMiAxLjktMy4zLjUgNC4yLjYgNy45IDEuNCAxMS42IDQuOCAyMy4xIDIwLjQgMzYuMyA0OS4zIDYzLjUgMTAgOS40IDE5LjMgMTkuMiAyNS42IDMxLjYgNC44IDkuMyA3LjMgMTkgNS43IDI5LjYtLjEuNi41IDEuNyAxLjEgMiA2LjIgMi42IDEwIDYuOSA5LjcgMTQuMyA3LjctMi42IDEyLjUtOCAxNi40LTE0LjUgNC4yIDIwLjItOS4xIDUwLjMtMjcuMiA1OC43LjQtNC41IDUtMjMuNC0xNi41LTI3LjctNi44LTEuMy0xMi44LTEuMy0yMi45LTIuMSA0LjctOSAxMC40LTIwLjYuNS0yMi40LTI0LjktNC42LTUyLjggMS45LTU3LjggNC42IDguMi40IDE2LjMgMSAyMy41IDMuMy0yIDYuNS00IDEyLjctNS44IDE4LjktMS45IDYuNSAyLjEgMTQuNiA5LjMgOS42IDEuMi0uOSAyLjMtMS45IDMuMy0yLjctMy4xIDE3LjktMi45IDE1LjktMi44IDE4LjMuMyAxMC4yIDkuNSA3LjggMTUuNyA3LjMtMi41IDExLjgtMjkuNSAyNy4zLTQ1LjQgMjUuOCA3LTQuNyAxMi43LTEwLjMgMTUuOS0xNy45LTYuNS44LTEyLjkgMS42LTE5LjIgMi40bC0uMy0uOWM0LjctMy40IDgtNy44IDEwLjItMTMuMSA4LjctMjEuMS0zLjYtMzgtMjUtMzkuOS05LjEtLjgtMTcuOC44LTI1LjkgNS41IDYuMi0xNS42IDE3LjItMjYuNiAzMi42LTM0LjUtMTUuMi00LjMtOC45LTIuNy0yNC42LTYuMyAxNC42LTkuMyAzMC4yLTEzLjIgNDYuNS0xNC42LTUuMi0zLjItNDguMS0zLjYtNzAuMiAyMC45IDcuOSAxLjQgMTUuNSAyLjggMjMuMiA0LjItMjMuOCA3LTQ0IDE5LjctNjIuNCAzNS42IDEuMS00LjggMi43LTkuNSAzLjMtMTQuMy42LTQuNS44LTkuMi4xLTEzLjYtMS41LTkuNC04LjktMTUuMS0xOS43LTE2LjMtNy45LS45LTE1LjYuMS0yMy4zIDEuMy0uOS4xLTEuNy4zLTIuOSAwIDE1LjgtMTQuOCAzNi0yMS43IDUzLjEtMzMuNSA2LTQuNSA2LjgtOC4yIDMtMTQuOXptMTI4LjQgMjYuOGMzLjMgMTYgMTIuNiAyNS41IDIzLjggMjQuMy00LjYtMTEuMy0xMi4xLTE5LjUtMjMuOC0yNC4zelwiXVxufTtcbnZhciBmYU1pY3JvYmxvZyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtaWNyb2Jsb2cnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImUwMWFcIiwgXCJNMzk5LjM2LDM2Mi4yM2MyOS40OS0zNC42OSw0Ny4xLTc4LjM0LDQ3LjEtMTI1Ljc5QzQ0Ni40NiwxMjMuNDksMzQ2Ljg2LDMyLDIyNCwzMlMxLjU0LDEyMy40OSwxLjU0LDIzNi40NCwxMDEuMTQsNDQwLjg3LDIyNCw0NDAuODdhMjM5LjI4LDIzOS4yOCwwLDAsMCw3OS40NC0xMy40NCw3LjE4LDcuMTgsMCwwLDEsOC4xMiwyLjU2YzE4LjU4LDI1LjA5LDQ3LjYxLDQyLjc0LDc5Ljg5LDQ5LjkyYTQuNDIsNC40MiwwLDAsMCw1LjIyLTMuNDMsNC4zNyw0LjM3LDAsMCwwLS44NS0zLjYyLDg3LDg3LDAsMCwxLDMuNjktMTEwLjY5Wk0zMjkuNTIsMjEyLjRsLTU3LjMsNDMuNDlMMjkzLDMyNC43NWE2LjUsNi41LDAsMCwxLTkuOTQsNy4yMkwyMjQsMjkwLjkyLDE2NC45NCwzMzJhNi41MSw2LjUxLDAsMCwxLTkuOTUtNy4yMmwyMC43OS02OC44Ni01Ny4zLTQzLjQ5YTYuNSw2LjUsMCwwLDEsMy44LTExLjY4bDcxLjg4LTEuNTEsMjMuNjYtNjcuOTJhNi41LDYuNSwwLDAsMSwxMi4yOCwwbDIzLjY2LDY3LjkyLDcxLjg4LDEuNTFhNi41LDYuNSwwLDAsMSwzLjg4LDExLjY4WlwiXVxufTtcbnZhciBmYUNjRGluZXJzQ2x1YiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjYy1kaW5lcnMtY2x1YicsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjI0Y1wiLCBcIk0yMzkuNyA3OS45Yy05Ni45IDAtMTc1LjggNzguNi0xNzUuOCAxNzUuOCAwIDk2LjkgNzguOSAxNzUuOCAxNzUuOCAxNzUuOCA5Ny4yIDAgMTc1LjgtNzguOSAxNzUuOC0xNzUuOCAwLTk3LjItNzguNi0xNzUuOC0xNzUuOC0xNzUuOHptLTM5LjkgMjc5LjZjLTQxLjctMTUuOS03MS40LTU2LjQtNzEuNC0xMDMuOHMyOS43LTg3LjkgNzEuNC0xMDQuMXYyMDcuOXptNzkuOC4zVjE1MS42YzQxLjcgMTYuMiA3MS40IDU2LjcgNzEuNCAxMDQuMXMtMjkuNyA4Ny45LTcxLjQgMTA0LjF6TTUyOCAzMkg0OEMyMS41IDMyIDAgNTMuNSAwIDgwdjM1MmMwIDI2LjUgMjEuNSA0OCA0OCA0OGg0ODBjMjYuNSAwIDQ4LTIxLjUgNDgtNDhWODBjMC0yNi41LTIxLjUtNDgtNDgtNDh6TTMyOS43IDQ0OGgtOTAuM2MtMTA2LjIgMC0xOTMuOC04NS41LTE5My44LTE5MC4yQzQ1LjYgMTQzLjIgMTMzLjIgNjQgMjM5LjQgNjRoOTAuM2MxMDUgMCAyMDAuNyA3OS4yIDIwMC43IDE5My44IDAgMTA0LjctOTUuNyAxOTAuMi0yMDAuNyAxOTAuMnpcIl1cbn07XG52YXIgZmFHZ0NpcmNsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdnZy1jaXJjbGUnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYyNjFcIiwgXCJNMjU3IDhDMTIwIDggOSAxMTkgOSAyNTZzMTExIDI0OCAyNDggMjQ4IDI0OC0xMTEgMjQ4LTI0OFMzOTQgOCAyNTcgOHptLTQ5LjUgMzc0LjhMODEuOCAyNTcuMWwxMjUuNy0xMjUuNyAzNS4yIDM1LjQtMjQuMiAyNC4yLTExLjEtMTEuMS03Ny4yIDc3LjIgNzcuMiA3Ny4yIDI2LjYtMjYuNi01My4xLTUyLjkgMjQuNC0yNC40IDc3LjIgNzcuMi03NSA3NS4yem05OS0yLjJsLTM1LjItMzUuMiAyNC4xLTI0LjQgMTEuMSAxMS4xIDc3LjItNzcuMi03Ny4yLTc3LjItMjYuNSAyNi41IDUzLjEgNTIuOS0yNC40IDI0LjQtNzcuMi03Ny4yIDc1LTc1TDQzMi4yIDI1NSAzMDYuNSAzODAuNnpcIl1cbn07XG52YXIgZmFQaWVkUGlwZXJIYXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncGllZC1waXBlci1oYXQnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY0ZTVcIiwgXCJNNjQwIDI0LjljLTgwLjggNTMuNi04OS40IDkyLjUtOTYuNCAxMDQuNC02LjcgMTIuMi0xMS43IDYwLjMtMjMuMyA4My42LTExLjcgMjMuNi01NC4yIDQyLjItNjYuMSA1MC0xMS43IDcuOC0yOC4zIDM4LjEtNDEuOSA2NC4yLTEwOC4xLTQuNC0xNjcuNCAzOC44LTI1OS4yIDkzLjYgMjkuNC05LjcgNDMuMy0xNi43IDQzLjMtMTYuNyA5NC4yLTM2IDEzOS4zLTY4LjMgMjgxLjEtNDkuMiAxLjEgMCAxLjkuNiAyLjguOCAzLjkgMi4yIDUuMyA2LjkgMy4xIDEwLjhsLTUzLjkgOTUuOGMtMi41IDQuNy03LjggNy4yLTEzLjEgNi4xLTEyNi44LTIzLjgtMjI2LjkgMTcuMy0zMTguOSAxOC42QzI0LjEgNDg4IDAgNDUzLjQgMCA0NTEuOGMwLTEuMS42LTEuNyAxLjctMS43IDAgMCAzOC4zIDAgMTAzLjEtMTUuM0MxNzguNCAyOTQuNSAyNDQgMjQ1LjQgMzE1LjQgMjQ1LjRjMCAwIDcxLjcgMCA5MC42IDYxLjkgMjIuOC0zOS43IDI4LjMtNDkuMiAyOC4zLTQ5LjIgNS4zLTkuNCAzNS03Ny4yIDg2LjQtMTQxLjQgNTEuNS02NCA5MC40LTc5LjkgMTE5LjMtOTEuOHpcIl1cbn07XG52YXIgZmFLaWNrc3RhcnRlcksgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAna2lja3N0YXJ0ZXItaycsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNiY1wiLCBcIk0zNTYuNiAyNTYuMmw0MC44LTQwLjVjNDIuMi00MS45IDQyLjItMTEwLjMgMC0xNTIuMXMtMTExLTQxLjktMTUzLjIgMEwyMjkuMyA3OC40QzIwOS42IDUwLjMgMTc3LjEgMzIgMTQwLjIgMzJDODAuNSAzMiAzMiA4MC4yIDMyIDEzOS41VjM3Mi41QzMyIDQzMS45IDgwLjUgNDgwIDE0MC4yIDQ4MGMzNy4xIDAgNjkuMy0xOC4zIDg5LTQ2LjRsMTQuOSAxNC43YzQyLjIgNDEuOSAxMTEgNDEuOSAxNTMuMiAwczQyLjItMTEwLjMgMC0xNTIuMWwtNDAuOC00MHpcIl1cbn07XG52YXIgZmFZYW5kZXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAneWFuZGV4JyxcbiAgaWNvbjogWzI1NiwgNTEyLCBbXSwgXCJmNDEzXCIsIFwiTTE1My4xIDMxNS44TDY1LjcgNTEySDJsOTYtMjA5LjhjLTQ1LjEtMjIuOS03NS4yLTY0LjQtNzUuMi0xNDEuMUMyMi43IDUzLjcgOTAuOCAwIDE3MS43IDBIMjU0djUxMmgtNTUuMVYzMTUuOGgtNDUuOHptNDUuOC0yNjkuM2gtMjkuNGMtNDQuNCAwLTg3LjQgMjkuNC04Ny40IDExNC42IDAgODIuMyAzOS40IDEwOC44IDg3LjQgMTA4LjhoMjkuNFY0Ni41elwiXVxufTtcbnZhciBmYVJlYWRtZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyZWFkbWUnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImY0ZDVcIiwgXCJNNTI4LjMgNDYuNUgzODguNWMtNDguMSAwLTg5LjkgMzMuMy0xMDAuNCA4MC4zLTEwLjYtNDctNTIuMy04MC4zLTEwMC40LTgwLjNINDhjLTI2LjUgMC00OCAyMS41LTQ4IDQ4djI0NS44YzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDg5LjdjMTAyLjIgMCAxMzIuNyAyNC40IDE0Ny4zIDc1IC43IDIuOCA1LjIgMi44IDYgMCAxNC43LTUwLjYgNDUuMi03NSAxNDcuMy03NUg1MjhjMjYuNSAwIDQ4LTIxLjUgNDgtNDhWOTQuNmMwLTI2LjQtMjEuMy00Ny45LTQ3LjctNDguMXpNMjQyIDMxMS45YzAgMS45LTEuNSAzLjUtMy41IDMuNUg3OC4yYy0xLjkgMC0zLjUtMS41LTMuNS0zLjVWMjg5YzAtMS45IDEuNS0zLjUgMy41LTMuNWgxNjAuNGMxLjkgMCAzLjUgMS41IDMuNSAzLjV2MjIuOXptMC02MC45YzAgMS45LTEuNSAzLjUtMy41IDMuNUg3OC4yYy0xLjkgMC0zLjUtMS41LTMuNS0zLjV2LTIyLjljMC0xLjkgMS41LTMuNSAzLjUtMy41aDE2MC40YzEuOSAwIDMuNSAxLjUgMy41IDMuNVYyNTF6bTAtNjAuOWMwIDEuOS0xLjUgMy41LTMuNSAzLjVINzguMmMtMS45IDAtMy41LTEuNS0zLjUtMy41di0yMi45YzAtMS45IDEuNS0zLjUgMy41LTMuNWgxNjAuNGMxLjkgMCAzLjUgMS41IDMuNSAzLjV2MjIuOXptMjU5LjMgMTIxLjdjMCAxLjktMS41IDMuNS0zLjUgMy41SDMzNy41Yy0xLjkgMC0zLjUtMS41LTMuNS0zLjV2LTIyLjljMC0xLjkgMS41LTMuNSAzLjUtMy41aDE2MC40YzEuOSAwIDMuNSAxLjUgMy41IDMuNXYyMi45em0wLTYwLjljMCAxLjktMS41IDMuNS0zLjUgMy41SDMzNy41Yy0xLjkgMC0zLjUtMS41LTMuNS0zLjVWMjI4YzAtMS45IDEuNS0zLjUgMy41LTMuNWgxNjAuNGMxLjkgMCAzLjUgMS41IDMuNSAzLjV2MjIuOXptMC02MC45YzAgMS45LTEuNSAzLjUtMy41IDMuNUgzMzcuNWMtMS45IDAtMy41LTEuNS0zLjUtMy41di0yMi44YzAtMS45IDEuNS0zLjUgMy41LTMuNWgxNjAuNGMxLjkgMCAzLjUgMS41IDMuNSAzLjVWMTkwelwiXVxufTtcbnZhciBmYUh0bWw1ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2h0bWw1JyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmMTNiXCIsIFwiTTAgMzJsMzQuOSAzOTUuOEwxOTEuNSA0ODBsMTU3LjYtNTIuMkwzODQgMzJIMHptMzA4LjIgMTI3LjlIMTI0LjRsNC4xIDQ5LjRoMTc1LjZsLTEzLjYgMTQ4LjQtOTcuOSAyN3YuM2gtMS4xbC05OC43LTI3LjMtNi03NS44aDQ3LjdMMTM4IDMyMGw1My41IDE0LjUgNTMuNy0xNC41IDYtNjIuMkg4NC4zTDcxLjUgMTEyLjJoMjQxLjFsLTQuNCA0Ny43elwiXVxufTtcbnZhciBmYVNlbGxzeSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzZWxsc3knLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYyMTNcIiwgXCJNNTM5LjcxIDIzNy4zMDhjMy4wNjQtMTIuMjU3IDQuMjktMjQuODIxIDQuMjktMzcuMzg0QzU0NCAxMDcuMzgyIDQ2OC42MTggMzIgMzc2LjA3NiAzMmMtNzcuMjIgMC0xNDQuNjM0IDUzLjAxMi0xNjMuMDIgMTI3Ljc4MS0xNS4zMjItMTMuMTc2LTM0LjkzNC0yMC41My01NS4xNTctMjAuNTMtNDYuMjcxIDAtODMuOTYyIDM3LjY5LTgzLjk2MiA4My45NjEgMCA3LjM1NC45MiAxNS4wMTUgMy4wNjUgMjIuMzY5LTQyLjkgMjAuMjI1LTcwLjc4NSA2My43MzgtNzAuNzg1IDExMS4yMzRDNi4yMTYgNDI0Ljg0MyA2MS42OCA0ODAgMTI5LjQwMSA0ODBoMzgxLjE5OGM2Ny43MiAwIDEyMy4xODQtNTUuMTU3IDEyMy4xODQtMTIzLjE4NC4wMDEtNTYuMzg0LTM4LjkxNi0xMDYuMDI1LTk0LjA3My0xMTkuNTA4ek0xOTkuODggNDAxLjU1NGMwIDguMjc0LTcuMDQ4IDE1LjMyMS0xNS4zMjEgMTUuMzIxSDE1My42MWMtOC4yNzQgMC0xNS4zMjEtNy4wNDgtMTUuMzIxLTE1LjMyMVYyOTAuNjI2YzAtOC4yNzMgNy4wNDgtMTUuMzIxIDE1LjMyMS0xNS4zMjFoMzAuOTQ5YzguMjc0IDAgMTUuMzIxIDcuMDQ4IDE1LjMyMSAxNS4zMjF2MTEwLjkyOHptODkuNDc3IDBjMCA4LjI3NC03LjA0OCAxNS4zMjEtMTUuMzIyIDE1LjMyMWgtMzAuOTQ5Yy04LjI3NCAwLTE1LjMyMS03LjA0OC0xNS4zMjEtMTUuMzIxVjI3MC4wOTZjMC04LjI3NCA3LjA0OC0xNS4zMjEgMTUuMzIxLTE1LjMyMWgzMC45NDljOC4yNzQgMCAxNS4zMjIgNy4wNDggMTUuMzIyIDE1LjMyMXYxMzEuNDU4em04OS40NzcgMGMwIDguMjc0LTcuMDQ3IDE1LjMyMS0xNS4zMjEgMTUuMzIxaC0zMC45NDljLTguMjc0IDAtMTUuMzIyLTcuMDQ4LTE1LjMyMi0xNS4zMjFWMjM4Ljg0YzAtOC4yNzQgNy4wNDgtMTUuMzIxIDE1LjMyMi0xNS4zMjFoMzAuOTQ5YzguMjc0IDAgMTUuMzIxIDcuMDQ4IDE1LjMyMSAxNS4zMjF2MTYyLjcxNHptODcuMDI3IDBjMCA4LjI3NC03LjA0OCAxNS4zMjEtMTUuMzIyIDE1LjMyMWgtMjguNDk3Yy04LjI3NCAwLTE1LjMyMS03LjA0OC0xNS4zMjEtMTUuMzIxVjE3Ni45NDFjMC04LjU3OSA3LjA0Ny0xNS42MjggMTUuMzIxLTE1LjYyOGgyOC40OTdjOC4yNzQgMCAxNS4zMjIgNy4wNDggMTUuMzIyIDE1LjYyOHYyMjQuNjEzelwiXVxufTtcbnZhciBmYVNxdWFyZVdlYkF3ZXNvbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLXdlYi1hd2Vzb21lJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlNjgzXCIsIFwiTTY0IDMyQzI4LjcgMzIgMCA2MC43IDAgOTZMMCA0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRsMzIwIDBjMzUuMyAwIDY0LTI4LjcgNjQtNjRsMC0zMjBjMC0zNS4zLTI4LjctNjQtNjQtNjRMNjQgMzJ6TTIzNSAxNzcuNkwyODggMjI0bDUyLjItMTAuNGMtMi42LTMuOS00LjItOC41LTQuMi0xMy42YzAtMTMuMyAxMC43LTI0IDI0LTI0czI0IDEwLjcgMjQgMjRjMCAxMy0xMC4zIDIzLjYtMjMuMiAyNEwzMDQuNSAzNDkuMWMtNS4yIDExLjUtMTYuNiAxOC45LTI5LjIgMTguOWwtMTAyLjYgMGMtMTIuNiAwLTI0LTcuNC0yOS4yLTE4LjlMODcuMiAyMjRDNzQuMyAyMjMuNiA2NCAyMTMgNjQgMjAwYzAtMTMuMyAxMC43LTI0IDI0LTI0czI0IDEwLjcgMjQgMjRjMCA1LTEuNSA5LjctNC4yIDEzLjZMMTYwIDIyNGw1My4xLTQ2LjRjLTguOS00LjEtMTUtMTMuMS0xNS0yMy42YzAtMTQuNCAxMS42LTI2IDI2LTI2czI2IDExLjYgMjYgMjZjMCAxMC41LTYuMiAxOS41LTE1LjEgMjMuNnpcIl1cbn07XG52YXIgZmFTYXNzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3Nhc3MnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY0MWVcIiwgXCJNMzAxLjg0IDM3OC45MmMtLjMuNi0uNiAxLjA4IDAgMHptMjQ5LjEzLTg3YTEzMS4xNiAxMzEuMTYgMCAwIDAtNTggMTMuNWMtNS45LTExLjktMTItMjIuMy0xMy0zMC4xLTEuMi05LjEtMi41LTE0LjUtMS4xLTI1LjNzNy43LTI2LjEgNy42LTI3LjItMS40LTYuNi0xNC4zLTYuNy0yNCAyLjUtMjUuMjkgNS45YTEyMi44MyAxMjIuODMgMCAwIDAtNS4zIDE5LjFjLTIuMyAxMS43LTI1Ljc5IDUzLjUtMzkuMDkgNzUuMy00LjQtOC41LTguMS0xNi04LjktMjItMS4yLTkuMS0yLjUtMTQuNS0xLjEtMjUuM3M3LjctMjYuMSA3LjYtMjcuMi0xLjQtNi42LTE0LjI5LTYuNy0yNCAyLjUtMjUuMyA1LjktMi43IDExLjQtNS4zIDE5LjEtMzMuODkgNzcuMy00Mi4wOCA5NS40Yy00LjIgOS4yLTcuOCAxNi42LTEwLjQgMjEuNi0uNC44LS43IDEuMy0uOSAxLjcuMy0uNS41LTEgLjUtLjgtMi4yIDQuMy0zLjUgNi43LTMuNSA2Ljd2LjFjLTEuNyAzLjItMy42IDYuMS00LjUgNi4xLS42IDAtMS45LTguNC4zLTE5LjkgNC43LTI0LjIgMTUuOC02MS44IDE1LjctNjMuMS0uMS0uNyAyLjEtNy4yLTcuMy0xMC43LTkuMS0zLjMtMTIuNCAyLjItMTMuMiAyLjJzLTEuNCAyLTEuNCAyIDEwLjEtNDIuNC0xOS4zOS00Mi40Yy0xOC40IDAtNDQgMjAuMi01Ni41OCAzOC41LTcuOSA0LjMtMjUgMTMuNi00MyAyMy41LTYuOSAzLjgtMTQgNy43LTIwLjcgMTEuNC0uNS0uNS0uOS0xLTEuNC0xLjUtMzUuNzktMzguMi0xMDEuODctNjUuMi05OS4wNy0xMTYuNSAxLTE4LjcgNy41LTY3LjggMTI3LjA3LTEyNy40IDk4LTQ4LjggMTc2LjM1LTM1LjQgMTg5Ljg0LTUuNiAxOS40IDQyLjUtNDEuODkgMTIxLjYtMTQzLjY2IDEzMy0zOC43OSA0LjMtNTkuMTgtMTAuNy02NC4yOC0xNi4zLTUuMy01LjktNi4xLTYuMi04LjEtNS4xLTMuMyAxLjgtMS4yIDcgMCAxMC4xIDMgNy45IDE1LjUgMjEuOSAzNi43OSAyOC45IDE4LjcgNi4xIDY0LjE4IDkuNSAxMTkuMTctMTEuOCA2MS43OC0yMy44IDEwOS44Ny05MC4xIDk1Ljc3LTE0NS42QzM4Ni41MiAxOC4zMiAyOTMtLjE4IDIwNC41NyAzMS4yMmMtNTIuNjkgMTguNy0xMDkuNjcgNDguMS0xNTAuNjYgODYuNC00OC42OSA0NS42LTU2LjQ4IDg1LjMtNTMuMjggMTAxLjkgMTEuMzkgNTguOSA5Mi41NyA5Ny4zIDEyNS4wNiAxMjUuNy0xLjYuOS0zLjEgMS43LTQuNSAyLjUtMTYuMjkgOC4xLTc4LjE4IDQwLjUtOTMuNjcgNzQuNy0xNy41IDM4LjggMi45IDY2LjYgMTYuMjkgNzAuNCA0MS43OSAxMS42IDg0LjU4LTkuMyAxMDcuNTctNDMuNnMyMC4yLTc5LjEgOS42LTk5LjVjLS4xLS4zLS4zLS41LS40LS44IDQuMi0yLjUgOC41LTUgMTIuOC03LjUgOC4yOS00LjkgMTYuMzktOS40IDIzLjQ5LTEzLjMtNCAxMC44LTYuOSAyMy44LTguNCA0Mi42LTEuOCAyMiA3LjMgNTAuNSAxOS4xIDYxLjcgNS4yIDQuOSAxMS40OSA1IDE1LjM5IDUgMTMuOCAwIDIwLTExLjQgMjYuODktMjUgOC41LTE2LjYgMTYtMzUuOSAxNi0zNS45cy05LjQgNTIuMiAxNi4zIDUyLjJjOS4zOSAwIDE4Ljc5LTEyLjEgMjMtMTguM3YuMXMuMi0uNC43LTEuMmMxLTEuNSAxLjUtMi40IDEuNS0yLjR2LS4zYzMuOC02LjUgMTIuMS0yMS40IDI0LjU5LTQ2IDE2LjItMzEuOCAzMS42OS03MS41IDMxLjY5LTcxLjVhMjAxLjI0IDIwMS4yNCAwIDAgMCA2LjIgMjUuOGMyLjggOS41IDguNyAxOS45IDEzLjQgMzAtMy44IDUuMi02LjEgOC4yLTYuMSA4LjJhLjMxLjMxIDAgMCAwIC4xLjJjLTMgNC02LjQgOC4zLTkuOSAxMi41LTEyLjc5IDE1LjItMjggMzIuNi0zMCAzNy42LTIuNCA1LjktMS44IDEwLjMgMi44IDEzLjcgMy40IDIuNiA5LjQgMyAxNS42OSAyLjUgMTEuNS0uOCAxOS42LTMuNiAyMy41LTUuNGE4Mi4yIDgyLjIgMCAwIDAgMjAuMTktMTAuNmMxMi41LTkuMiAyMC4xLTIyLjQgMTkuNC0zOS44LS40LTkuNi0zLjUtMTkuMi03LjMtMjguMiAxLjEtMS42IDIuMy0zLjMgMy40LTVDNDM0LjggMzAxLjcyIDQ1MC4xIDI3MCA0NTAuMSAyNzBhMjAxLjI0IDIwMS4yNCAwIDAgMCA2LjIgMjUuOGMyLjQgOC4xIDcuMDkgMTcgMTEuMzkgMjUuNy0xOC41OSAxNS4xLTMwLjA5IDMyLjYtMzQuMDkgNDQuMS03LjQgMjEuMy0xLjYgMzAuOSA5LjMgMzMuMSA0LjkgMSAxMS45LTEuMyAxNy4xLTMuNWE3OS40NiA3OS40NiAwIDAgMCAyMS41OS0xMS4xYzEyLjUtOS4yIDI0LjU5LTIyLjEgMjMuNzktMzkuNi0uMy03LjktMi41LTE1LjgtNS40LTIzLjQgMTUuNy02LjYgMzYuMDktMTAuMiA2Mi4wOS03LjIgNTUuNjggNi41IDY2LjU4IDQxLjMgNjQuNDggNTUuOHMtMTMuOCAyMi42LTE3LjcgMjUtNS4xIDMuMy00LjggNS4xYy41IDIuNiAyLjMgMi41IDUuNiAxLjkgNC42LS44IDI5LjE5LTExLjggMzAuMjktMzguNyAxLjYtMzQtMzEuMDktNzEuNC04OS03MS4xem0tNDI5LjE4IDE0NC43Yy0xOC4zOSAyMC4xLTQ0LjE5IDI3LjctNTUuMjggMjEuM0M1NC42MSA0NTEgNTkuMzEgNDIxLjQyIDgyIDQwMGMxMy44LTEzIDMxLjU5LTI1IDQzLjM5LTMyLjQgMi43LTEuNiA2LjYtNCAxMS40LTYuOS44LS41IDEuMi0uNyAxLjItLjcuOS0uNiAxLjktMS4xIDIuOS0xLjcgOC4yOSAzMC40LjMgNTcuMi0xOS4xIDc4LjN6bTEzNC4zNi05MS40Yy02LjQgMTUuNy0xOS44OSA1NS43LTI4LjA5IDUzLjYtNy0xLjgtMTEuMy0zMi4zLTEuNC02Mi4zIDUtMTUuMSAxNS42LTMzLjEgMjEuOS00MC4xIDEwLjA5LTExLjMgMjEuMTktMTQuOSAyMy43OS0xMC40IDMuNSA1LjktMTIuMiA0OS40LTE2LjIgNTkuMnptMTExIDUzYy0yLjcgMS40LTUuMiAyLjMtNi40IDEuNi0uOS0uNSAxLjEtMi40IDEuMS0yLjRzMTMuOS0xNC45IDE5LjQtMjEuN2MzLjItNCA2LjktOC43IDEwLjg5LTEzLjkgMCAuNS4xIDEgLjEgMS42LS4xMyAxNy45LTE3LjMyIDMwLTI1LjEyIDM0Ljh6bTg1LjU4LTE5LjVjLTItMS40LTEuNy02LjEgNS0yMC43IDIuNi01LjcgOC41OS0xNS4zIDE5LTI0LjVhMzYuMTggMzYuMTggMCAwIDEgMS45IDEwLjhjLS4xIDIyLjUtMTYuMiAzMC45LTI1Ljg5IDM0LjR6XCJdXG59O1xudmFyIGZhV2lyc2luZGhhbmR3ZXJrID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dpcnNpbmRoYW5kd2VyaycsXG4gIGljb246IFs1MTIsIDUxMiwgW1wid3NoXCJdLCBcImUyZDBcIiwgXCJNNTAuNzcxNjEsNDc5LjgxMjEzaDgzLjM2MDcxVjM2Ny44NDc0MWwtODMuMzYwNzEsNDcuMDA5Wm0zMjkuMDQ2NzUsMGg4Mi4zNTAyMlY0MTQuODU2NDVsLTgyLjM1MDIyLTQ3LjAwOVptLjAwNTY4LTQ0OFYyNTEuNTY4TDI1Ni4xNzU5LDE3OS4xODYxLDEzNC41MDM3OCwyNTEuNTY4VjMxLjgxMjEzSDUwLjc3MTYxVjM5Mi42MDU2NUwyNTYuMTc1OSwyNzAuMzE5MDksNDYyLjE2ODU4LDM5Mi42MDU2NVYzMS44MTIxM1pcIl1cbn07XG52YXIgZmFXc2ggPSBmYVdpcnNpbmRoYW5kd2VyaztcbnZhciBmYUJ1cm9tb2JlbGV4cGVydGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYnVyb21vYmVsZXhwZXJ0ZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjM3ZlwiLCBcIk0wIDMydjEyOGgxMjhWMzJIMHptMTIwIDEyMEg4VjQwaDExMnYxMTJ6bTQwLTEyMHYxMjhoMTI4VjMySDE2MHptMTIwIDEyMEgxNjhWNDBoMTEydjExMnptNDAtMTIwdjEyOGgxMjhWMzJIMzIwem0xMjAgMTIwSDMyOFY0MGgxMTJ2MTEyek0wIDE5MnYxMjhoMTI4VjE5Mkgwem0xMjAgMTIwSDhWMjAwaDExMnYxMTJ6bTQwLTEyMHYxMjhoMTI4VjE5MkgxNjB6bTEyMCAxMjBIMTY4VjIwMGgxMTJ2MTEyem00MC0xMjB2MTI4aDEyOFYxOTJIMzIwem0xMjAgMTIwSDMyOFYyMDBoMTEydjExMnpNMCAzNTJ2MTI4aDEyOFYzNTJIMHptMTIwIDEyMEg4VjM2MGgxMTJ2MTEyem00MC0xMjB2MTI4aDEyOFYzNTJIMTYwem0xMjAgMTIwSDE2OFYzNjBoMTEydjExMnptNDAtMTIwdjEyOGgxMjhWMzUySDMyMHpcIl1cbn07XG52YXIgZmFTYWxlc2ZvcmNlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NhbGVzZm9yY2UnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY4M2JcIiwgXCJNMjQ4Ljg5IDI0NS42NGgtMjYuMzVjLjY5LTUuMTYgMy4zMi0xNC4xMiAxMy42NC0xNC4xMiA2Ljc1IDAgMTEuOTcgMy44MiAxMi43MSAxNC4xMnptMTM2LjY2LTEzLjg4Yy0uNDcgMC0xNC4xMS0xLjc3LTE0LjExIDIwczEzLjYzIDIwIDE0LjExIDIwYzEzIDAgMTQuMTEtMTMuNTQgMTQuMTEtMjAgMC0yMS43Ni0xMy42Ni0yMC0xNC4xMS0yMHptLTI0My4yMiAyMy43NmE4LjYzIDguNjMgMCAwIDAtMy4yOSA3LjI5YzAgNC43OCAyLjA4IDYuMDUgMy4yOSA3LjA1IDQuNyAzLjcgMTUuMDcgMi4xMiAyMC45My45NXYtMTYuOTRjLTUuMzItMS4wNy0xNi43My0xLjk2LTIwLjkzIDEuNjV6TTY0MCAyMzJjMCA4Ny41OC04MCAxNTQuMzktMTY1LjM2IDEzNi40My0xOC4zNyAzMy03MC43MyA3MC43NS0xMzIuMiA0MS42My00MS4xNiA5Ni4wNS0xNzcuODkgOTIuMTgtMjEzLjgxLTUuMTdDOC45MSA0MjguNzgtNTAuMTkgMjY2LjUyIDUzLjM2IDIwNS42MSAxOC42MSAxMjYuMTggNzYgMzIgMTY3LjY3IDMyYTEyNC4yNCAxMjQuMjQgMCAwIDEgOTguNTYgNDguN2MyMC43LTIxLjQgNDkuNC0zNC44MSA4MS4xNS0zNC44MSA0Mi4zNCAwIDc5IDIzLjUyIDk4LjggNTguNTdDNTM5IDYzLjc4IDY0MCAxMzIuNjkgNjQwIDIzMnptLTUxOS41NSAzMS44YzAtMTEuNzYtMTEuNjktMTUuMTctMTcuODctMTcuMTctNS4yNy0yLjExLTEzLjQxLTMuNTEtMTMuNDEtOC45NCAwLTkuNDYgMTctNi42NiAyNS4xNy0yLjEyIDAgMCAxLjE3LjcxIDEuNjQtLjQ3LjI0LS43IDIuMzYtNi41OCAyLjU5LTcuMjlhMS4xMyAxLjEzIDAgMCAwLS43LTEuNDFjLTEyLjMzLTcuNjMtNDAuNy04LjUxLTQwLjcgMTIuNyAwIDEyLjQ2IDExLjQ5IDE1LjQ0IDE3Ljg4IDE3LjE3IDQuNzIgMS41OCAxMy4xNyAzIDEzLjE3IDguNyAwIDQtMy41MyA3LjA2LTkuMTcgNy4wNmEzMS43NiAzMS43NiAwIDAgMS0xOS02LjM1Yy0uNDctLjIzLTEuNDItLjcxLTEuNjUuNzFsLTIuNCA3LjQ3Yy0uNDcuOTQuMjMgMS4xOC4yMyAxLjQxIDEuNzUgMS40IDEwLjMgNi41OSAyMi44MiA2LjU5IDEzLjE3IDAgMjEuNC03LjA2IDIxLjQtMTguMTF6bTMyLTQyLjU4Yy0xMC4xMyAwLTE4LjY2IDMuMTctMjEuNCA1LjE4YTEgMSAwIDAgMC0uMjQgMS40MWwyLjU5IDcuMDZhMSAxIDAgMCAwIDEuMTguN2MuNjUgMCA2LjgtNCAxNi45My00IDQgMCA3LjA2LjcxIDkuMTggMi4zNiAzLjYgMi44IDMuMDYgOC4yOSAzLjA2IDEwLjU4LTQuNzktLjMtMTkuMTEtMy40NC0yOS40MSAzLjc2YTE2LjkyIDE2LjkyIDAgMCAwLTcuMzQgMTQuNTRjMCA1LjkgMS41MSAxMC40IDYuNTkgMTQuMzUgMTIuMjQgOC4xNiAzNi4yOCAyIDM4LjEgMS40MSAxLjU4LS4zMiAzLjUzLS42NiAzLjUzLTEuODh2LTMzLjg4Yy4wNC00LjYxLjMyLTIxLjY0LTIyLjc4LTIxLjY0ek0xOTkgMjAwLjI0YTEuMTEgMS4xMSAwIDAgMC0xLjE4LTEuMThIMTg4YTEuMTEgMS4xMSAwIDAgMC0xLjE3IDEuMTh2NzlhMS4xMSAxLjExIDAgMCAwIDEuMTcgMS4xOGg5Ljg4YTEuMTEgMS4xMSAwIDAgMCAxLjE4LTEuMTh6bTU1Ljc1IDI4LjkzYy0yLjEtMi4zMS02Ljc5LTcuNTMtMTcuNjUtNy41My0zLjUxIDAtMTQuMTYuMjMtMjAuNyA4Ljk0LTYuMzUgNy42My02LjU4IDE4LjExLTYuNTggMjEuNDEgMCAzLjEyLjE1IDE0LjI2IDcuMDYgMjEuMTcgMi42NCAyLjkxIDkuMDYgOC4yMyAyMi44MSA4LjIzIDEwLjgyIDAgMTYuNDctMi4zNSAxOC41OC0zLjc2LjQ3LS4yNC43MS0uNzEuMjQtMS44OGwtMi4zNS02LjgzYTEuMjYgMS4yNiAwIDAgMC0xLjQxLS43Yy0yLjU5Ljk0LTYuMzUgMi44Mi0xNS4yOSAyLjgyLTE3LjQyIDAtMTYuODUtMTQuNzQtMTYuOTQtMTYuN2gzNy4xN2ExLjIzIDEuMjMgMCAwIDAgMS4xNy0uOTRjLS4yOSAwIDIuMDctMTQuNy02LjA5LTI0LjIzem0zNi42OSA1Mi42OWMxMy4xNyAwIDIxLjQxLTcuMDYgMjEuNDEtMTguMTEgMC0xMS43Ni0xMS43LTE1LjE3LTE3Ljg4LTE3LjE3LTQuMTQtMS42Ni0xMy40MS0zLjM4LTEzLjQxLTguOTQgMC0zLjc2IDMuMjktNi4zNSA4LjQ3LTYuMzVhMzguMTEgMzguMTEgMCAwIDEgMTYuNyA0LjIzczEuMTguNzEgMS42NS0uNDdjLjIzLS43IDIuMzUtNi41OCAyLjU4LTcuMjlhMS4xMyAxLjEzIDAgMCAwLS43LTEuNDFjLTcuOTEtNC45LTE2Ljc0LTQuOTQtMjAuMjMtNC45NC0xMiAwLTIwLjQ2IDcuMjktMjAuNDYgMTcuNjQgMCAxMi40NiAxMS40OCAxNS40NCAxNy44NyAxNy4xNyA2LjExIDIgMTMuMTcgMy4yNiAxMy4xNyA4LjcgMCA0LTMuNTIgNy4wNi05LjE3IDcuMDZhMzEuOCAzMS44IDAgMCAxLTE5LTYuMzUgMSAxIDAgMCAwLTEuNjUuNzFsLTIuMzUgNy41MmMtLjQ3Ljk0LjIzIDEuMTguMjMgMS40MSAxLjcyIDEuNCAxMC4zMyA2LjU5IDIyLjc5IDYuNTl6TTM1Ny4wOSAyMjRjMC0uNzEtLjI0LTEuMTgtMS4xOC0xLjE4aC0xMS43NmMwLS4xNC45NC04Ljk0IDQuNDctMTIuNDcgNC4xNi00LjE1IDExLjc2LTEuNjQgMTItMS42NCAxLjE3LjQ3IDEuNDEgMCAxLjY0LS40N2wyLjgzLTcuNzdjLjctLjk0IDAtMS4xNy0uMjQtMS40MS01LjA5LTItMTcuMzUtMi44Ny0yNC40NiA0LjI0LTUuNDggNS40OC03IDEzLjkyLTggMTkuNTJoLTguNDdhMS4yOCAxLjI4IDAgMCAwLTEuMTcgMS4xOGwtMS40MiA3Ljc2YzAgLjcuMjQgMS4xNyAxLjE4IDEuMTdoOC4yM2MtOC41MSA0Ny45LTguNzUgNTAuMjEtMTAuMzUgNTUuNTItMS4wOCAzLjYyLTMuMjkgNi45LTUuODggNy43Ni0uMDkgMC0zLjg4IDEuNjgtOS42NC0uMjQgMCAwLS45NC0uNDctMS40MS43MS0uMjQuNzEtMi41OSA2LjgyLTIuODMgNy41M3MwIDEuNDEuNDcgMS40MWM1LjExIDIgMTMgMS43NyAxNy44OCAwIDYuMjgtMi4yOCA5LjcyLTcuODkgMTEuNTMtMTIuOTQgMi43NS03LjcxIDIuODEtOS43OSAxMS43Ni01OS43NGgxMi4yM2ExLjI5IDEuMjkgMCAwIDAgMS4xOC0xLjE4em01My4zOSAxNmMtLjU2LTEuNjgtNS4xLTE4LjExLTI1LjE3LTE4LjExLTE1LjI1IDAtMjMgMTAtMjUuMTYgMTguMTEtMSAzLTMuMTggMTQgMCAyMy41Mi4wOS4zIDQuNDEgMTguMTIgMjUuMTYgMTguMTIgMTQuOTUgMCAyMi45LTkuNjEgMjUuMTctMTguMTIgMy4yMS05LjYxIDEuMDEtMjAuNTIgMC0yMy41MnptNDUuNC0xNi43Yy01LTEuNjUtMTYuNjItMS45LTIyLjExIDUuNDF2LTQuNDdhMS4xMSAxLjExIDAgMCAwLTEuMTgtMS4xN2gtOS40YTEuMTEgMS4xMSAwIDAgMC0xLjE4IDEuMTd2NTUuMjhhMS4xMiAxLjEyIDAgMCAwIDEuMTggMS4xOGg5LjY0YTEuMTIgMS4xMiAwIDAgMCAxLjE4LTEuMTh2LTI3Ljc3YzAtMi45MS4wNS0xMS4zNyA0LjQ2LTE1LjA1IDQuOS00LjkgMTItMy4zNiAxMy40MS0zLjA2YTEuNTcgMS41NyAwIDAgMCAxLjQxLS45NCA3NCA3NCAwIDAgMCAzLjA2LTggMS4xNiAxLjE2IDAgMCAwLS40Ny0xLjQxem00Ni44MSA1NC4xbC0yLjEyLTcuMjljLS40Ny0xLjE4LTEuNDEtLjcxLTEuNDEtLjcxLTQuMjMgMS44Mi0xMC4xNSAxLjg5LTExLjI5IDEuODktNC42NCAwLTE3LjE3LTEuMTMtMTcuMTctMTkuNzYgMC02LjIzIDEuODUtMTkuNzYgMTYuNDctMTkuNzZhMzQuODUgMzQuODUgMCAwIDEgMTEuNTIgMS42NXMuOTQuNDcgMS4xOC0uNzFjLjk0LTIuNTkgMS42NC00LjQ3IDIuNTktNy41My4yMy0uOTQtLjQ3LTEuMTctLjcxLTEuMTctMTEuNTktMy44Ny0yMi4zNC0yLjUzLTI3Ljc2IDAtMS41OS43NC0xNi4yMyA2LjQ5LTE2LjIzIDI3LjUyIDAgMi45LS41OCAzMC4xMSAyOC45NCAzMC4xMWE0NC40NSA0NC40NSAwIDAgMCAxNS41Mi0yLjgzIDEuMyAxLjMgMCAwIDAgLjQ3LTEuNDJ6bTUzLjg3LTM5LjUyYy0uOC0zLTUuMzctMTYuMjMtMjIuMzUtMTYuMjMtMTYgMC0yMy41MiAxMC4xMS0yNS42NCAxOC41OWEzOC41OCAzOC41OCAwIDAgMC0xLjY1IDExLjc2YzAgMjUuODcgMTguODQgMjkuNCAyOS44OCAyOS40IDEwLjgyIDAgMTYuNDYtMi4zNSAxOC41OC0zLjc2LjQ3LS4yNC43MS0uNzEuMjQtMS44OGwtMi4zNi02LjgzYTEuMjYgMS4yNiAwIDAgMC0xLjQxLS43Yy0yLjU5Ljk0LTYuMzUgMi44Mi0xNS4yOSAyLjgyLTE3LjQyIDAtMTYuODUtMTQuNzQtMTYuOTMtMTYuN2gzNy4xNmExLjI1IDEuMjUgMCAwIDAgMS4xOC0uOTRjLS4yNC0uMDEuOTQtNy4wNy0xLjQxLTE1LjU0em0tMjMuMjktNi4zNWMtMTAuMzMgMC0xMyA5LTEzLjY0IDE0LjEySDU0NmMtLjg4LTExLjkyLTcuNjItMTQuMTMtMTIuNzMtMTQuMTN6XCJdXG59O1xudmFyIGZhT2N0b3B1c0RlcGxveSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdvY3RvcHVzLWRlcGxveScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTA4MlwiLCBcIk00NTUuNiwzNDkuMmMtNDUuODkxLTM5LjA5LTM2LjY3LTc3Ljg3Ny0xNi4wOTUtMTI4LjExQzQ3NS4xNiwxMzQuMDQsNDE1Ljk2NywzNC4xNCwzMjkuOTMsOC4zLDIzNy4wNC0xOS42LDEzNC4yNTIsMjQuMzQxLDk5LjY3NywxMTcuMTQ3YTE4MC44NjIsMTgwLjg2MiwwLDAsMC0xMC45ODgsNzMuNTQ0YzEuNzMzLDI5LjU0MywxNC43MTcsNTIuOTcsMjQuMDksODAuMywxNy4yLDUwLjE2MS0yOC4xLDkyLjc0My02Ni42NjIsMTE3LjU4Mi00Ni44MDYsMzAuMi0zNi4zMTksMzkuODU3LTguNDI4LDQxLjg1OCwyMy4zNzgsMS42OCw0NC40NzgtNC41NDgsNjUuMjY1LTE1LjA0NSw5LjItNC42NDcsNDAuNjg3LTE4LjkzMSw0NS4xMy0yOC41ODhDMTM1LjksNDEzLjM4OCwxMTEuMTIyLDQ1OS41LDEyNi42MjEsNDg4LjljMTkuMSwzNi4yMjksNjcuMTEyLTMxLjc3LDc2LjcwOS00NS44MTIsOC41OTEtMTIuNTcyLDQyLjk2My04MS4yNzksNjMuNjI3LTQ2LjkyNiwxOC44NjUsMzEuMzYxLDguNiw3Ni4zOTEsMzUuNzM4LDEwNC42MjIsMzIuODU0LDM0LjIsNTEuMTU1LTE4LjMxMiw1MS40MTItNDQuMjIxLjE2My0xNi40MTEtNi4xLTk1Ljg1MiwyOS45LTU5Ljk0NEM0MDUuNDI4LDQxOCw0MzYuOTEyLDQ2Ny44LDQ3Mi41NjgsNDYzLjY0MmMzOC43MzYtNC41MTYtMjIuMTIzLTY3Ljk2Ny0yOC4yNjItNzguNjk1LDUuMzkzLDQuMjc5LDUzLjY2NSwzNC4xMjgsNTMuODE4LDkuNTJDNDk4LjIzNCwzNzUuNjc4LDQ2OC4wMzksMzU5LjgsNDU1LjYsMzQ5LjJaXCJdXG59O1xudmFyIGZhTWVkYXBwcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtZWRhcHBzJyxcbiAgaWNvbjogWzMyMCwgNTEyLCBbXSwgXCJmM2M2XCIsIFwiTTExOC4zIDIzOC40YzMuNS0xMi41IDYuOS0zMy42IDEzLjItMzMuNiA4LjMgMS44IDkuNiAyMy40IDE4LjYgMzYuNiA0LjYtMjMuNSA1LjMtODUuMSAxNC4xLTg2LjcgOS0uNyAxOS43IDY2LjUgMjIgNzcuNSA5LjkgNC4xIDQ4LjkgNi42IDQ4LjkgNi42IDEuOSA3LjMtMjQgNy42LTQwIDcuOC00LjYgMTQuOC01LjQgMjcuNy0xMS40IDI4LTQuNy4yLTguMi0yOC44LTE3LjUtNDkuNmwtOS40IDY1LjVjLTQuNCAxMy0xNS41LTIyLjUtMjEuOS0zOS4zLTMuMy0uMS02Mi40LTEuNi00Ny42LTcuOGwzMS01ek0yMjggNDQ4YzIxLjIgMCAyMS4yLTMyIDAtMzJIOTJjLTIxLjIgMC0yMS4yIDMyIDAgMzJoMTM2em0tMjQgNjRjMjEuMiAwIDIxLjItMzIgMC0zMmgtODhjLTIxLjIgMC0yMS4yIDMyIDAgMzJoODh6bTM0LjItMTQxLjVjMy4yLTE4LjkgNS4yLTM2LjQgMTEuOS00OC44IDcuOS0xNC43IDE2LjEtMjguMSAyNC00MSAyNC42LTQwLjQgNDUuOS03NS4yIDQ1LjktMTI1LjVDMzIwIDY5LjYgMjQ4LjIgMCAxNjAgMFMwIDY5LjYgMCAxNTUuMmMwIDUwLjIgMjEuMyA4NS4xIDQ1LjkgMTI1LjUgNy45IDEyLjkgMTYgMjYuMyAyNCA0MSA2LjcgMTIuNSA4LjcgMjkuOCAxMS45IDQ4LjkgMy41IDIxIDM2LjEgMTUuNyAzMi42LTUuMS0zLjYtMjEuNy01LjYtNDAuNy0xNS4zLTU4LjZDNjYuNSAyNDYuNSAzMyAyMTEuMyAzMyAxNTUuMiAzMyA4Ny4zIDkwIDMyIDE2MCAzMnMxMjcgNTUuMyAxMjcgMTIzLjJjMCA1Ni4xLTMzLjUgOTEuMy02Ni4xIDE1MS42LTkuNyAxOC0xMS43IDM3LjQtMTUuMyA1OC42LTMuNCAyMC42IDI5IDI2LjQgMzIuNiA1LjF6XCJdXG59O1xudmFyIGZhTnM4ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ25zOCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjNkNVwiLCBcIk0xMDQuMzI0LDI2OS4xNzJoMjYuMDY3VjI0Mi45OTRIMTA0LjMyNFptNTIuNDY2LTI2LjE3OC0uMDU1LTI2LjE3OHYtLjk0MWEzOS4zMjUsMzkuMzI1LDAsMCwwLTc4LjY0NC45NDF2LjE2NmgyNi40di0uMTY2YTEyLjk4LDEyLjk4LDAsMCwxLDI1Ljk1NiwwdjI2LjE3OFptNTIuMzU2LDI1Ljg0NmE5MS4xLDkxLjEsMCwwLDEtOTEuMSw5MS4xaC0uNjA5YTkxLjEsOTEuMSwwLDAsMS05MS4xLTkxLjFIMHYuMTY2QTExNy4zMywxMTcuMzMsMCwwLDAsMTE3LjQ0LDM4Ni4yOGguNzc1QTExNy4zMzEsMTE3LjMzMSwwLDAsMCwyMzUuNDksMjY4Ljg0VjI0Mi44MjhIMjA5LjE0NlptLTE1Ny4yMzMsMGE2NS4zNjIsNjUuMzYyLDAsMCwwLDEzMC43MjMsMEgxNTYuMjkyYTM5LjAyMywzOS4wMjMsMCwwLDEtNzguMDM1LDBWMjQyLjg4M0g1MS45Njh2LTI2LjYyQTY1LjQyLDY1LjQyLDAsMCwxLDE4Mi44LDIxNy40OHYyNS4yOTNoMjYuMzQ0VjIxNy40OGE5MS43NjEsOTEuNzYxLDAsMCwwLTE4My41MjIsMHYyNS40SDUxLjkxM1ptNDE4LjQtNzEuMTczYzEzLjY3LDAsMjQuNTczLDYuNjQyLDMwLjA1MiwxOC4yNjRsLjcxOSwxLjU0OSwyMy4yNDUtMTEuNTExLS42MDktMS40MzljLTguMDI1LTE5LjI2LTI4LjUtMzEuMjctNTMuNDA3LTMxLjI3LTIzLjEzNCwwLTQzLjYxMSwxMS40LTUwLjk3MiwyOC40NDctLjEyMywyNi44NzYtLjE1OCwyMy45LDAsMjQuODUsNC43LDExLjAxMywxNC41NTUsMTkuMzcsMjguNjY4LDI0LjI0MWExMDIuMDMzLDEwMi4wMzMsMCwwLDAsMTkuODEzLDMuOTg0YzUuNDc5LjcyLDEwLjYyNiwxLjM4NCwxNS44MjksMy4xLDYuMzY0LDIuMSwxMC40Niw1LjI1NywxMi44NCw5Ljg1MXY5Ljg1MWMtMy43MDgsNy41MjctMTMuNzgxLDEyLjM0Mi0yNS43OTEsMTIuMzQyLTE0LjMzNCwwLTI1Ljk1Ni02LjkxOC0zMS45MzMtMTkuMDM5bC0uNzItMS40OTRMNDE1LjAyNiwyODAuOWwuNTUzLDEuNDM5YzcuOTE1LDE5LjQyNiwyOS42MDksMzIuMDQ0LDU1LjI4OSwzMi4wNDQsMjMuNjMyLDAsNDQuNjA4LTExLjQsNTIuMy0yOC40NDdsLjE2Ni0yNS45LS4xNjYtLjY2NGMtNC44Ny0xMS4wMTQtMTUuMjE5LTE5LjY0Ny0yOC45NDQtMjQuMjQxLTcuNjkzLTIuNzEyLTE0LjMzNS0zLjYtMjAuNy00LjQyN2E4My43NzcsODMuNzc3LDAsMCwxLTE0LjgzMi0yLjg3OGMtNi4zMS0xLjkzNy0xMC40LTUuMDkyLTEyLjYxOS05LjYzdi04LjQxMkM0NDkuNDUsMjAyLjQyNyw0NTguOTY5LDE5Ny42NjcsNDcwLjMxNSwxOTcuNjY3Wk0yODcuNTY4LDMxMS4zNDRoMjYuMDY3di02OC40SDI4Ny41NjhabTM1Mi4yNjYtNTMuM2MtMi45MzMtNi4yNTQtOC4zLTEyLjAxLTE1LjQ0MS0xNi43MTRBMzcuOTksMzcuOTksMCwwLDAsNjM3LjQsMjI2bC4xNjYtMjUuMzQ3LS4xNjYtLjY2NEM2MzAuMDM4LDE4NCw2MTAuNjY3LDE3My4yNiw1ODkuMjUsMTczLjI2UzU0OC40NjEsMTg0LDU0MS4xLDE5OS45OTJsLS4xNjYsMjUuMzQ3LjE2Ni42NjRhMzkuNjQzLDM5LjY0MywwLDAsMCwxMy4wMDYsMTUuMzMxYy03LjIsNC43LTEyLjUwOCwxMC40Ni0xNS40NDEsMTYuNzE0bC0uMTY2LDI4Ljg4OS4xNjYuNzJjNy41ODIsMTUuOTk0LDI3Ljg5MywyNi43MzEsNTAuNTg1LDI2LjczMXM0My4wNTctMTAuNzM3LDUwLjU4NC0yNi43MzFsLjE2Ni0yOC44OVptLTczLjIyLTUwLjgwNmMzLjYtNi4zMSwxMi41NjMtMTAuNTE2LDIyLjU4LTEwLjUxNnMxOS4wMzgsNC4yMDYsMjIuNjM2LDEwLjUxNnYxMy43MjVjLTMuNTQyLDYuMi0xMi41NjMsMTAuMzQ5LTIyLjYzNiwxMC4zNDlzLTE5LjA5NC00LjE1LTIyLjU4LTEwLjM0OVptNDcuMzE5LDcyLjE2OWMtMy43NjQsNi42NDEtMTMuMzM4LDEwLjktMjQuNjgzLDEwLjktMTEuMTI1LDAtMjAuOTc2LTQuMzcyLTI0LjY4NC0xMC45VjI2My4yNWMzLjcwOC02LjMwOSwxMy41LTEwLjUxNSwyNC42ODQtMTAuNTE1LDExLjM0NSwwLDIwLjkxOSw0LjE1LDI0LjY4MywxMC41MTVaTTM3Ni40LDI2NS45NjJsLTU5LjgyNy04OS43MTNoLTI5djQwLjYyM2gyNi41MXYuMzg3bDYyLjUzOSw5NC4wODVINDAyLjNWMTc2LjI0OUgzNzYuNFpcIl1cbn07XG52YXIgZmFQaW50ZXJlc3RQID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BpbnRlcmVzdC1wJyxcbiAgaWNvbjogWzM4NCwgNTEyLCBbXSwgXCJmMjMxXCIsIFwiTTIwNCA2LjVDMTAxLjQgNi41IDAgNzQuOSAwIDE4NS42IDAgMjU2IDM5LjYgMjk2IDYzLjYgMjk2YzkuOSAwIDE1LjYtMjcuNiAxNS42LTM1LjQgMC05LjMtMjMuNy0yOS4xLTIzLjctNjcuOCAwLTgwLjQgNjEuMi0xMzcuNCAxNDAuNC0xMzcuNCA2OC4xIDAgMTE4LjUgMzguNyAxMTguNSAxMDkuOCAwIDUzLjEtMjEuMyAxNTIuNy05MC4zIDE1Mi43LTI0LjkgMC00Ni4yLTE4LTQ2LjItNDMuOCAwLTM3LjggMjYuNC03NC40IDI2LjQtMTEzLjQgMC02Ni4yLTkzLjktNTQuMi05My45IDI1LjggMCAxNi44IDIuMSAzNS40IDkuNiA1MC43LTEzLjggNTkuNC00MiAxNDcuOS00MiAyMDkuMSAwIDE4LjkgMi43IDM3LjUgNC41IDU2LjQgMy40IDMuOCAxLjcgMy40IDYuOSAxLjUgNTAuNC02OSA0OC42LTgyLjUgNzEuNC0xNzIuOCAxMi4zIDIzLjQgNDQuMSAzNiA2OS4zIDM2IDEwNi4yIDAgMTUzLjktMTAzLjUgMTUzLjktMTk2LjhDMzg0IDcxLjMgMjk4LjIgNi41IDIwNCA2LjV6XCJdXG59O1xudmFyIGZhQXBwZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYXBwZXInLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYzNzFcIiwgXCJNNDIuMSAyMzkuMWMyMi4yIDAgMjkgMi44IDMzLjUgMTQuNmguOHYtMjIuOWMwLTExLjMtNC44LTE1LjQtMTcuOS0xNS40LTExLjMgMC0xNC40IDIuNS0xNS4xIDEyLjhINC44Yy4zLTEzLjkgMS41LTE5LjEgNS44LTI0LjRDMTcuOSAxOTUgMjkuNSAxOTIgNTYuNyAxOTJjMzMgMCA0Ny4xIDUgNTMuOSAxOC45IDIgNC4zIDQgMTUuNiA0IDIzLjd2NzYuM0g3Ni4zbDEuMy0xOS4xaC0xYy01LjMgMTUuNi0xMy42IDIwLjQtMzUuNSAyMC40LTMwLjMgMC00MS4xLTEwLjEtNDEuMS0zNy4zIDAtMjUuMiAxMi4zLTM1LjggNDIuMS0zNS44em0xNy4xIDQ4LjFjMTMuMSAwIDE2LjktMyAxNi45LTEzLjQgMC05LjEtNC4zLTExLjYtMTkuNi0xMS42LTEzLjEgMC0xNy45IDMtMTcuOSAxMi4xLS4xIDEwLjQgMy43IDEyLjkgMjAuNiAxMi45em03Ny44LTk0LjloMzguM2wtMS41IDIwLjZoLjhjOS4xLTE3LjEgMTUuOS0yMC45IDM3LjUtMjAuOSAxNC40IDAgMjQuNyAzIDMxLjUgOS4xIDkuOCA4LjYgMTIuOCAyMC40IDEyLjggNDguMSAwIDMwLTMgNDMuMS0xMi4xIDUyLjktNi44IDcuMy0xNi40IDEwLjEtMzMuMiAxMC4xLTIwLjQgMC0yOS4yLTUuNS0zMy44LTIxLjJoLS44djcwLjNIMTM3di0xNjl6bTgwLjkgNjAuN2MwLTI3LjUtMy4zLTMyLjUtMjAuNy0zMi41LTE2LjkgMC0yMC43IDUtMjAuNyAyOC43IDAgMjggMy41IDMzLjUgMjEuMiAzMy41IDE2LjQgMCAyMC4yLTUuNiAyMC4yLTI5Ljd6bTU3LjktNjAuN2gzOC4zbC0xLjUgMjAuNmguOGM5LjEtMTcuMSAxNS45LTIwLjkgMzcuNS0yMC45IDE0LjQgMCAyNC43IDMgMzEuNSA5LjEgOS44IDguNiAxMi44IDIwLjQgMTIuOCA0OC4xIDAgMzAtMyA0My4xLTEyLjEgNTIuOS02LjggNy4zLTE2LjQgMTAuMS0zMy4zIDEwLjEtMjAuNCAwLTI5LjItNS41LTMzLjgtMjEuMmgtLjh2NzAuM2gtMzkuNXYtMTY5em04MC45IDYwLjdjMC0yNy41LTMuMy0zMi41LTIwLjctMzIuNS0xNi45IDAtMjAuNyA1LTIwLjcgMjguNyAwIDI4IDMuNSAzMy41IDIxLjIgMzMuNSAxNi40IDAgMjAuMi01LjYgMjAuMi0yOS43em01My44LTMuOGMwLTI1LjQgMy4zLTM3LjggMTIuMy00NS44IDguOC04LjEgMjIuMi0xMS4zIDQ1LjEtMTEuMyA0Mi44IDAgNTUuNyAxMi44IDU1LjcgNTUuN3YxMS4xaC03NS4zYy0uMyAyLS4zIDQtLjMgNC44IDAgMTYuOSA0LjUgMjEuOSAyMC4xIDIxLjkgMTMuOSAwIDE3LjktMyAxNy45LTEzLjloMzcuNXYyLjNjMCA5LjgtMi41IDE4LjktNi44IDI0LjctNy4zIDkuOC0xOS42IDEzLjYtNDQuMyAxMy42LTI3LjUgMC00MS42LTMuMy01MC42LTEyLjMtOC41LTguNS0xMS4zLTIxLjMtMTEuMy01MC44em03Ni40LTExLjZjLS4zLTEuOC0uMy0zLjMtLjMtMy44IDAtMTIuMy0zLjMtMTQuNi0xOS42LTE0LjYtMTQuNCAwLTE3LjEgMy0xOC4xIDE1LjFsLS4zIDMuM2gzOC4zem01NS42LTQ1LjNoMzguM2wtMS44IDE5LjloLjdjNi44LTE0LjkgMTQuNC0yMC4yIDI5LjctMjAuMiAxMC44IDAgMTkuMSAzLjMgMjMuNCA5LjMgNS4zIDcuMyA2LjggMTQuNCA2LjggMzQgMCAxLjUgMCA1IC4yIDkuM2gtMzVjLjMtMS44LjMtMy4zLjMtNCAwLTE1LjQtMi0xOS40LTEwLjMtMTkuNC02LjMgMC0xMC44IDMuMy0xMy4xIDkuMy0xIDMtMSA0LjMtMSAxMi4zdjY4aC0zOC4zVjE5Mi4zelwiXVxufTtcbnZhciBmYUZvcnRBd2Vzb21lID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZvcnQtYXdlc29tZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjI4NlwiLCBcIk00ODkuMiAyODcuOWgtMjcuNGMtMi42IDAtNC42IDItNC42IDQuNnYzMmgtMzYuNlYxNDYuMmMwLTIuNi0yLTQuNi00LjYtNC42aC0yNy40Yy0yLjYgMC00LjYgMi00LjYgNC42djMyaC0zNi42di0zMmMwLTIuNi0yLTQuNi00LjYtNC42aC0yNy40Yy0yLjYgMC00LjYgMi00LjYgNC42djMyaC0zNi42di0zMmMwLTYtOC00LjYtMTEuNy00LjZ2LTM4YzguMy0yIDE3LjEtMy40IDI1LjctMy40IDEwLjkgMCAyMC45IDQuMyAzMS40IDQuMyA0LjYgMCAyNy43LTEuMSAyNy43LTh2LTYwYzAtMi42LTItNC42LTQuNi00LjYtNS4xIDAtMTUuMSA0LjMtMjQgNC4zLTkuNyAwLTIwLjktNC4zLTMyLjYtNC4zLTggMC0xNiAxLjEtMjMuNyAyLjl2LTQuOWM1LjQtMi42IDkuMS04LjMgOS4xLTE0LjMgMC0yMC43LTMxLjQtMjAuOC0zMS40IDAgMCA2IDMuNyAxMS43IDkuMSAxNC4zdjExMS43Yy0zLjcgMC0xMS43LTEuNC0xMS43IDQuNnYzMmgtMzYuNnYtMzJjMC0yLjYtMi00LjYtNC42LTQuNmgtMjcuNGMtMi42IDAtNC42IDItNC42IDQuNnYzMkgxMjh2LTMyYzAtMi42LTItNC42LTQuNi00LjZIOTZjLTIuNiAwLTQuNiAyLTQuNiA0LjZ2MTc4LjNINTQuOHYtMzJjMC0yLjYtMi00LjYtNC42LTQuNkgyMi44Yy0yLjYgMC00LjYgMi00LjYgNC42VjUxMmgxODIuOXYtOTZjMC03Mi42IDEwOS43LTcyLjYgMTA5LjcgMHY5NmgxODIuOVYyOTIuNWMuMS0yLjYtMS45LTQuNi00LjUtNC42em0tMjg4LjEtNC41YzAgMi42LTIgNC42LTQuNiA0LjZoLTI3LjRjLTIuNiAwLTQuNi0yLTQuNi00LjZ2LTY0YzAtMi42IDItNC42IDQuNi00LjZoMjcuNGMyLjYgMCA0LjYgMiA0LjYgNC42djY0em0xNDYuNCAwYzAgMi42LTIgNC42LTQuNiA0LjZoLTI3LjRjLTIuNiAwLTQuNi0yLTQuNi00LjZ2LTY0YzAtMi42IDItNC42IDQuNi00LjZoMjcuNGMyLjYgMCA0LjYgMiA0LjYgNC42djY0elwiXVxufTtcbnZhciBmYVdhemUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2F6ZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjgzZlwiLCBcIk01MDIuMTcgMjAxLjY3QzUxNi42OSAyODcuNTMgNDcxLjIzIDM2OS41OSAzODkgNDA5LjhjMTMgMzQuMS0xMi40IDcwLjItNDguMzIgNzAuMmE1MS42OCA1MS42OCAwIDAgMS01MS41Ny00OWMtNi40NC4xOS02NC4yIDAtNzYuMzMtLjY0QTUxLjY5IDUxLjY5IDAgMCAxIDE1OSA0NzkuOTJjLTMzLjg2LTEuMzYtNTcuOTUtMzQuODQtNDctNjcuOTItMzcuMjEtMTMuMTEtNzIuNTQtMzQuODctOTkuNjItNzAuOC0xMy0xNy4yOC0uNDgtNDEuOCAyMC44NC00MS44IDQ2LjMxIDAgMzIuMjItNTQuMTcgNDMuMTUtMTEwLjI2Qzk0LjggOTUuMiAxOTMuMTIgMzIgMjg4LjA5IDMyYzEwMi40OCAwIDE5Ny4xNSA3MC42NyAyMTQuMDggMTY5LjY3ek0zNzMuNTEgMzg4LjI4YzQyLTE5LjE4IDgxLjMzLTU2LjcxIDk2LjI5LTEwMi4xNCA0MC40OC0xMjMuMDktNjQuMTUtMjI4LTE4MS43MS0yMjgtODMuNDUgMC0xNzAuMzIgNTUuNDItMTg2LjA3IDEzNi05LjUzIDQ4LjkxIDUgMTMxLjM1LTY4Ljc1IDEzMS4zNUM1OC4yMSAzNTguNiA5MS42IDM3OC4xMSAxMjcgMzg5LjU0YzI0LjY2LTIxLjggNjMuODctMTUuNDcgNzkuODMgMTQuMzQgMTQuMjIgMSA3OS4xOSAxLjE4IDg3LjkuODJhNTEuNjkgNTEuNjkgMCAwIDEgNzguNzgtMTYuNDJ6TTIwNS4xMiAxODcuMTNjMC0zNC43NCA1MC44NC0zNC43NSA1MC44NCAwcy01MC44NCAzNC43NC01MC44NCAwem0xMTYuNTcgMGMwLTM0Ljc0IDUwLjg2LTM0Ljc1IDUwLjg2IDBzLTUwLjg2IDM0Ljc1LTUwLjg2IDB6bS0xMjIuNjEgNzAuNjljLTMuNDQtMTYuOTQgMjIuMTgtMjIuMTggMjUuNjItNS4yMWwuMDYuMjhjNC4xNCAyMS40MiAyOS44NSA0NCA2NC4xMiA0My4wNyAzNS42OC0uOTQgNTkuMjUtMjIuMjEgNjQuMTEtNDIuNzcgNC40Ni0xNi4wNSAyOC42LTEwLjM2IDI1LjQ3IDYtNS4yMyAyMi4xOC0zMS4yMSA2Mi05MS40NiA2Mi45LTQyLjU1IDAtODAuODgtMjcuODQtODcuOS02NC4yNXpcIl1cbn07XG52YXIgZmFCbHVlc2t5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JsdWVza3knLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImU2NzFcIiwgXCJNNDA3LjggMjk0LjdjLTMuMy0uNC02LjctLjgtMTAtMS4zYzMuNCAuNCA2LjcgLjkgMTAgMS4zek0yODggMjI3LjFDMjYxLjkgMTc2LjQgMTkwLjkgODEuOSAxMjQuOSAzNS4zQzYxLjYtOS40IDM3LjUtMS43IDIxLjYgNS41QzMuMyAxMy44IDAgNDEuOSAwIDU4LjRTOS4xIDE5NCAxNSAyMTMuOWMxOS41IDY1LjcgODkuMSA4Ny45IDE1My4yIDgwLjdjMy4zLS41IDYuNi0uOSAxMC0xLjRjLTMuMyAuNS02LjYgMS0xMCAxLjRDNzQuMyAzMDguNi05LjEgMzQyLjggMTAwLjMgNDY0LjVDMjIwLjYgNTg5LjEgMjY1LjEgNDM3LjggMjg4IDM2MS4xYzIyLjkgNzYuNyA0OS4yIDIyMi41IDE4NS42IDEwMy40YzEwMi40LTEwMy40IDI4LjEtMTU2LTY1LjgtMTY5LjljLTMuMy0uNC02LjctLjgtMTAtMS4zYzMuNCAuNCA2LjcgLjkgMTAgMS4zYzY0LjEgNy4xIDEzMy42LTE1LjEgMTUzLjItODAuN0M1NjYuOSAxOTQgNTc2IDc1IDU3NiA1OC40cy0zLjMtNDQuNy0yMS42LTUyLjljLTE1LjgtNy4xLTQwLTE0LjktMTAzLjIgMjkuOEMzODUuMSA4MS45IDMxNC4xIDE3Ni40IDI4OCAyMjcuMXpcIl1cbn07XG52YXIgZmFDY0pjYiA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjYy1qY2InLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYyNGJcIiwgXCJNNDMxLjUgMjQ0LjNWMjEyYzQxLjIgMCAzOC41LjIgMzguNS4yIDcuMyAxLjMgMTMuMyA3LjMgMTMuMyAxNiAwIDguOC02IDE0LjUtMTMuMyAxNS44LTEuMi40LTMuMy4zLTM4LjUuM3ptNDIuOCAyMC4yYy0yLjgtLjctMy4zLS41LTQyLjgtLjV2MzVjMzkuNiAwIDQwIC4yIDQyLjgtLjUgNy41LTEuNSAxMy41LTggMTMuNS0xNyAwLTguNy02LTE1LjUtMTMuNS0xN3pNNTc2IDgwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoNDgwYzI2LjUgMCA0OCAyMS41IDQ4IDQ4ek0xODIgMTkyLjNoLTU3YzAgNjcuMSAxMC43IDEwOS43LTM1LjggMTA5LjctMTkuNSAwLTM4LjgtNS43LTU3LjItMTQuOHYyOGMzMCA4LjMgNjggOC4zIDY4IDguMyA5Ny45IDAgODItNDcuNyA4Mi0xMzEuMnptMTc4LjUgNC41Yy02My40LTE2LTE2NS0xNC45LTE2NSA1OS4zIDAgNzcuMSAxMDguMiA3My42IDE2NSA1OS4yVjI4N0MzMTIuOSAzMTEuNyAyNTMgMzA5IDI1MyAyNTZzNTkuOC01NS42IDEwNy41LTMxLjJ2LTI4ek01NDQgMjg2LjVjMC0xOC41LTE2LjUtMzAuNS0zOC0zMnYtLjhjMTkuNS0yLjcgMzAuMy0xNS41IDMwLjMtMzAuMiAwLTE5LTE1LjctMzAtMzctMzEgMCAwIDYuMy0uMy0xMjAuMy0uM3YxMjcuNWgxMjIuN2MyNC4zLjEgNDIuMy0xMi45IDQyLjMtMzMuMnpcIl1cbn07XG52YXIgZmFTbmFwY2hhdCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzbmFwY2hhdCcsXG4gIGljb246IFs1MTIsIDUxMiwgWzYyMTI0LCBcInNuYXBjaGF0LWdob3N0XCJdLCBcImYyYWJcIiwgXCJNNDk2LjkyNiwzNjYuNmMtMy4zNzMtOS4xNzYtOS44LTE0LjA4Ni0xNy4xMTItMTguMTUzLTEuMzc2LS44MDYtMi42NDEtMS40NTEtMy43Mi0xLjk0Ny0yLjE4Mi0xLjEyOC00LjQxNC0yLjIyLTYuNjM0LTMuMzczLTIyLjgtMTIuMDktNDAuNjA5LTI3LjM0MS01Mi45NTktNDUuNDJhMTAyLjg4OSwxMDIuODg5LDAsMCwxLTkuMDg5LTE2LjEyYy0xLjA1NC0zLjAxMy0xLTQuNzI0LS4yNDgtNi4yODdhMTAuMjIxLDEwLjIyMSwwLDAsMSwyLjkxNC0zLjAzOGMzLjkxOC0yLjU5MSw3Ljk2LTUuMjIsMTAuNy02Ljk5Myw0Ljg4NS0zLjE2Miw4Ljc1NC01LjY2NywxMS4yNDYtNy40NCw5LjM2Mi02LjU0NywxNS45MDktMTMuNSwyMC0yMS4yNzhhNDIuMzcxLDQyLjM3MSwwLDAsMCwyLjEtMzUuMTkxYy02LjItMTYuMzE4LTIxLjYxMy0yNi40NDktNDAuMjg3LTI2LjQ0OWE1NS41NDMsNTUuNTQzLDAsMCwwLTExLjcxOCwxLjI0Yy0xLjAyOS4yMjQtMi4wNTkuNDU5LTMuMDYzLjcyLjE3NC0xMS4xNi0uMDc0LTIyLjk0LTEuMDY2LTM0LjUzNC0zLjUyMi00MC43NTgtMTcuNzk0LTYyLjEyMy0zMi42NzQtNzkuMTZBMTMwLjE2NywxMzAuMTY3LDAsMCwwLDMzMi4xLDM2LjQ0M0MzMDkuNTE1LDIzLjU0NywyODMuOTEsMTcsMjU2LDE3UzIwMi42LDIzLjU0NywxODAsMzYuNDQzYTEyOS43MzUsMTI5LjczNSwwLDAsMC0zMy4yODEsMjYuNzgzYy0xNC44OCwxNy4wMzgtMjkuMTUyLDM4LjQ0LTMyLjY3Myw3OS4xNjEtLjk5MiwxMS41OTQtMS4yNCwyMy40MzUtMS4wNzksMzQuNTMzLTEtLjI2LTIuMDIxLS41LTMuMDUxLS43MTlhNTUuNDYxLDU1LjQ2MSwwLDAsMC0xMS43MTctMS4yNGMtMTguNjg3LDAtMzQuMTI1LDEwLjEzMS00MC4zLDI2LjQ0OWE0Mi40MjMsNDIuNDIzLDAsMCwwLDIuMDQ2LDM1LjIyOGM0LjEwNSw3Ljc3NCwxMC42NTIsMTQuNzMxLDIwLjAxNCwyMS4yNzgsMi40OCwxLjczNiw2LjM2MSw0LjI0LDExLjI0Niw3LjQ0LDIuNjQxLDEuNzExLDYuNSw0LjIxNiwxMC4yOCw2LjcyYTExLjA1NCwxMS4wNTQsMCwwLDEsMy4zLDMuMzExYy43OTQsMS42MjQuODE4LDMuMzczLS4zNiw2LjZhMTAyLjAyLDEwMi4wMiwwLDAsMS04Ljk0LDE1Ljc4NWMtMTIuMDc3LDE3LjY2OS0yOS4zNjMsMzIuNjQ4LTUxLjQzNCw0NC42MzlDMzIuMzU1LDM0OC42MDgsMjAuMiwzNTIuNzUsMTUuMDY5LDM2Ni43Yy0zLjg2OCwxMC41MjgtMS4zMzksMjIuNTA2LDguNDk0LDMyLjZhNDkuMTM3LDQ5LjEzNywwLDAsMCwxMi40LDkuMzg3LDEzNC4zMzcsMTM0LjMzNywwLDAsMCwzMC4zNDIsMTIuMTM5LDIwLjAyNCwyMC4wMjQsMCwwLDEsNi4xMjYsMi43NDFjMy41ODMsMy4xMzcsMy4wNzUsNy44NjEsNy44NDksMTQuNzhhMzQuNDY4LDM0LjQ2OCwwLDAsMCw4Ljk3Nyw5LjEyN2MxMC4wMTksNi45MTksMjEuMjc4LDcuMzUzLDMzLjIwNyw3LjgxMSwxMC43NzYuNDEsMjIuOTg5Ljg4MSwzNi45MzksNS40ODEsNS43NzgsMS45MSwxMS43OCw1LjYwNSwxOC43MzYsOS45MkMxOTQuODQyLDQ4MC45NTEsMjE3LjcwNyw0OTUsMjU1Ljk3Myw0OTVzNjEuMjkyLTE0LjEyMyw3OC4xMTgtMjQuNDI4YzYuOTA3LTQuMjQsMTIuODcyLTcuOSwxOC40ODktOS43NTgsMTMuOTQ5LTQuNjEzLDI2LjE2My01LjA3MiwzNi45MzktNS40ODEsMTEuOTI4LS40NTksMjMuMTg3LS44OTMsMzMuMjA2LTcuODEyYTM0LjU4NCwzNC41ODQsMCwwLDAsMTAuMjE4LTExLjE2YzMuNDM0LTUuODQsMy4zNDgtOS45MTksNi41NzItMTIuNzcxYTE4Ljk3MSwxOC45NzEsMCwwLDEsNS43NTMtMi42MjlBMTM0Ljg5MywxMzQuODkzLDAsMCwwLDQ3Ni4wMiw0MDguNzFhNDguMzQ0LDQ4LjM0NCwwLDAsMCwxMy4wMTktMTAuMTkzbC4xMjQtLjE0OUM0OTguMzg5LDM4OC41LDUwMC43MDgsMzc2Ljg2Nyw0OTYuOTI2LDM2Ni42Wm0tMzQuMDEzLDE4LjI3N2MtMjAuNzQ1LDExLjQ1OC0zNC41MzMsMTAuMjMtNDUuMjU5LDE3LjEzNy05LjExNCw1Ljg2NS0zLjcyLDE4LjUxMy0xMC4zNDIsMjMuMDc2LTguMTM0LDUuNjE3LTMyLjE3Ny0uNC02My4yMzksOS44NTgtMjUuNjE4LDguNDY5LTQxLjk2MSwzMi44MjItODguMDM4LDMyLjgyMnMtNjIuMDM2LTI0LjMtODguMDc2LTMyLjg4NGMtMzEtMTAuMjU1LTU1LjA5Mi00LjI0MS02My4yMzktOS44NTgtNi42MDktNC41NjMtMS4yNC0xNy4yMTEtMTAuMzQxLTIzLjA3Ni0xMC43MzktNi45MDctMjQuNTI3LTUuNjc5LTQ1LjI2LTE3LjA3NS0xMy4yMDYtNy4yOTEtNS43MTYtMTEuOC0xLjMxNC0xMy45MzcsNzUuMTQzLTM2LjM4MSw4Ny4xMzMtOTIuNTUyLDg3LjY2Ni05Ni43MTkuNjQ1LTUuMDQ2LDEuMzY0LTkuMDE0LTQuMTkxLTE0LjE0OC01LjM2OS00Ljk2LTI5LjE4OS0xOS43LTM1LjgtMjQuMzE2LTEwLjkzNy03LjYzOC0xNS43NDgtMTUuMjY0LTEyLjItMjQuNjM4LDIuNDgtNi40ODUsOC41MzEtOC45MjgsMTQuODc5LTguOTI4YTI3LjY0MywyNy42NDMsMCwwLDEsNS45NjUuNjdjMTIsMi42LDIzLjY1OSw4LjYxNywzMC4zOTIsMTAuMjQyYTEwLjc0OSwxMC43NDksMCwwLDAsMi40OC4zMzVjMy42LDAsNC44Ni0xLjgxMSw0LjYxMi01LjkyNy0uNzY4LTEzLjEzMi0yLjYyOC0zOC43MjUtLjU1OC02Mi42NDQsMi44NC0zMi45MDksMTMuNDQyLTQ5LjIxNSwyNi4wNC02My42MzYsNi4wNTEtNi45MzIsMzQuNDg0LTM2Ljk3Niw4OC44NTctMzYuOTc2czgyLjg4LDI5LjkyLDg4LjkzMSwzNi44MjdjMTIuNjExLDE0LjQyMSwyMy4yMjUsMzAuNzI3LDI2LjA0LDYzLjYzNiwyLjA3MSwyMy45MTkuMjg1LDQ5LjUyNS0uNTU4LDYyLjY0NC0uMjg1LDQuMzI3LDEuMDE3LDUuOTI3LDQuNjEzLDUuOTI3YTEwLjY0OCwxMC42NDgsMCwwLDAsMi40OC0uMzM1YzYuNzQ1LTEuNjI0LDE4LjQtNy42MzgsMzAuNC0xMC4yNDJhMjcuNjQxLDI3LjY0MSwwLDAsMSw1Ljk2NC0uNjdjNi4zODYsMCwxMi40LDIuNDgsMTQuODgsOC45MjgsMy41NDYsOS4zNzQtMS4yNCwxNy0xMi4xODksMjQuNjM5LTYuNjA5LDQuNjEyLTMwLjQyOSwxOS4zNDMtMzUuOCwyNC4zMTUtNS41NjgsNS4xMzQtNC44MzYsOS4xLTQuMTkxLDE0LjE0OS41MzMsNC4yMjgsMTIuNTExLDYwLjQsODcuNjY2LDk2LjcxOEM0NjguNjI5LDM3My4wMTEsNDc2LjExOSwzNzcuNTI0LDQ2Mi45MTMsMzg0Ljg3N1pcIl1cbn07XG52YXIgZmFTbmFwY2hhdEdob3N0ID0gZmFTbmFwY2hhdDtcbnZhciBmYUZhbnRhc3lGbGlnaHRHYW1lcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdmYW50YXN5LWZsaWdodC1nYW1lcycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjZkY1wiLCBcIk0yNTYgMzIuODZMMzIuODYgMjU2IDI1NiA0NzkuMTQgNDc5LjE0IDI1NiAyNTYgMzIuODZ6TTg4LjM0IDI1NS44M2MxLjk2LTIgMTEuOTItMTIuMyA5Ni40OS05Ny40OCA0MS40NS00MS43NSA4Ni4xOS00My43NyAxMTkuNzctMTguNjkgMjQuNjMgMTguNCA2Mi4wNiA1OC45IDYyLjE1IDU5IC42OC43NCAxLjA3IDIuODYuNTggMy4zOC0xMS4yNyAxMS44NC0yMi42OCAyMy41NC0zMy41IDM0LjY5LTM0LjIxLTMyLjMxLTQwLjUyLTM4LjI0LTQ4LjUxLTQzLjk1LTE3Ljc3LTEyLjY5LTQxLjQtMTAuMTMtNTYuOTggNS4xLTIuMTcgMi4xMy0xLjc5IDMuNDMuMTIgNS4zNSAyLjk0IDIuOTUgMjguMSAyOC4zMyAzNS4wOSAzNS43OC0xMS45NSAxMS42LTIzLjY2IDIyLjk3LTM1LjY5IDM0LjY2LTEyLjAyLTEyLjU0LTI0LjQ4LTI1LjUzLTM2LjU0LTM4LjExLTIxLjM5IDIxLjA5LTQxLjY5IDQxLjExLTYxLjg1IDYwLjk5em0yMzQuODIgMTAxLjZjLTM1LjQ5IDM1LjQzLTc4LjA5IDM4LjE0LTEwNi45OSAyMC40Ny0yMi4wOC0xMy41LTM5LjM4LTMyLjA4LTcyLjkzLTY2Ljg0IDEyLjA1LTEyLjM3IDIzLjc5LTI0LjQyIDM1LjM3LTM2LjMxIDMzLjAyIDMxLjkxIDM3LjA2IDM2LjAxIDQ0LjY4IDQyLjA5IDE4LjQ4IDE0Ljc0IDQyLjUyIDEzLjY3IDU5LjMyLTEuOCAzLjY4LTMuMzkgMy42OS0zLjY0LjE0LTcuMjQtMTAuNTktMTAuNzMtMjEuMTktMjEuNDQtMzEuNzctMzIuMTgtMS4zMi0xLjM0LTMuMDMtMi40OC0uOC00LjY5IDEwLjc5LTEwLjcxIDIxLjQ4LTIxLjUyIDMyLjIxLTMyLjI5LjI2LS4yNi42NS0uMzggMS45MS0xLjA3IDEyLjM3IDEyLjg3IDI0LjkyIDI1LjkyIDM3LjI1IDM4Ljc1IDIxLjAxLTIwLjczIDQxLjI0LTQwLjY4IDYxLjI1LTYwLjQyIDEzLjY4IDEzLjQgMjcuMTMgMjYuNTggNDAuODYgNDAuMDMtMjAuMTcgMjAuODYtODEuNjggODIuNzEtMTAwLjUgMTAxLjV6TTI1NiAwTDAgMjU2bDI1NiAyNTYgMjU2LTI1NkwyNTYgMHpNMTYgMjU2TDI1NiAxNmwyNDAgMjQwLTI0MCAyNDBMMTYgMjU2elwiXVxufTtcbnZhciBmYVJ1c3QgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncnVzdCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTA3YVwiLCBcIk01MDguNTIsMjQ5Ljc1LDQ4Ni43LDIzNi4yNGMtLjE3LTItLjM0LTMuOTMtLjU1LTUuODhsMTguNzItMTcuNWE3LjM1LDcuMzUsMCwwLDAtMi40NC0xMi4yNWwtMjQtOWMtLjU0LTEuODgtMS4wOC0zLjc4LTEuNjctNS42NGwxNS0yMC44M2E3LjM1LDcuMzUsMCwwLDAtNC43OS0xMS41NGwtMjUuNDItNC4xNWMtLjktMS43My0xLjc5LTMuNDUtMi43My01LjE1bDEwLjY4LTIzLjQyYTcuMzUsNy4zNSwwLDAsMC02Ljk1LTEwLjM5bC0yNS44Mi45MXEtMS43OS0yLjIyLTMuNjEtNC40TDQzOSw4MS44NEE3LjM2LDcuMzYsMCwwLDAsNDMwLjE2LDczTDQwNSw3OC45M3EtMi4xNy0xLjgzLTQuNC0zLjYxbC45MS0yNS44MmE3LjM1LDcuMzUsMCwwLDAtMTAuMzktN0wzNjcuNyw1My4yM2MtMS43LS45NC0zLjQzLTEuODQtNS4xNS0yLjczTDM1OC40LDI1LjA4YTcuMzUsNy4zNSwwLDAsMC0xMS41NC00Ljc5TDMyNiwzNS4yNmMtMS44Ni0uNTktMy43NS0xLjEzLTUuNjQtMS42N2wtOS0yNGE3LjM1LDcuMzUsMCwwLDAtMTIuMjUtMi40NGwtMTcuNSwxOC43MmMtMS45NS0uMjEtMy45MS0uMzgtNS44OC0uNTVMMjYyLjI1LDMuNDhhNy4zNSw3LjM1LDAsMCwwLTEyLjUsMEwyMzYuMjQsMjUuM2MtMiwuMTctMy45My4zNC01Ljg4LjU1TDIxMi44Niw3LjEzYTcuMzUsNy4zNSwwLDAsMC0xMi4yNSwyLjQ0bC05LDI0Yy0xLjg5LjU1LTMuNzksMS4wOC01LjY2LDEuNjhsLTIwLjgyLTE1YTcuMzUsNy4zNSwwLDAsMC0xMS41NCw0Ljc5bC00LjE1LDI1LjQxYy0xLjczLjktMy40NSwxLjc5LTUuMTYsMi43M0wxMjAuODgsNDIuNTVhNy4zNSw3LjM1LDAsMCwwLTEwLjM5LDdsLjkyLDI1LjgxYy0xLjQ5LDEuMTktMywyLjM5LTQuNDIsMy42MUw4MS44NCw3M0E3LjM2LDcuMzYsMCwwLDAsNzMsODEuODRMNzguOTMsMTA3Yy0xLjIzLDEuNDUtMi40MywyLjkzLTMuNjIsNC40MWwtMjUuODEtLjkxYTcuNDIsNy40MiwwLDAsMC02LjM3LDMuMjYsNy4zNSw3LjM1LDAsMCwwLS41Nyw3LjEzbDEwLjY2LDIzLjQxYy0uOTQsMS43LTEuODMsMy40My0yLjczLDUuMTZMMjUuMDgsMTUzLjZhNy4zNSw3LjM1LDAsMCwwLTQuNzksMTEuNTRsMTUsMjAuODJjLS41OSwxLjg3LTEuMTMsMy43Ny0xLjY4LDUuNjZsLTI0LDlhNy4zNSw3LjM1LDAsMCwwLTIuNDQsMTIuMjVsMTguNzIsMTcuNWMtLjIxLDEuOTUtLjM4LDMuOTEtLjU1LDUuODhMMy40OCwyNDkuNzVhNy4zNSw3LjM1LDAsMCwwLDAsMTIuNUwyNS4zLDI3NS43NmMuMTcsMiwuMzQsMy45Mi41NSw1Ljg3TDcuMTMsMjk5LjEzYTcuMzUsNy4zNSwwLDAsMCwyLjQ0LDEyLjI1bDI0LDljLjU1LDEuODksMS4wOCwzLjc4LDEuNjgsNS42NWwtMTUsMjAuODNhNy4zNSw3LjM1LDAsMCwwLDQuNzksMTEuNTRsMjUuNDIsNC4xNWMuOSwxLjcyLDEuNzksMy40NSwyLjczLDUuMTRMNDIuNTYsMzkxLjEyYTcuMzUsNy4zNSwwLDAsMCwuNTcsNy4xMyw3LjEzLDcuMTMsMCwwLDAsNi4zNywzLjI2bDI1LjgzLS45MXExLjc3LDIuMjIsMy42LDQuNEw3Myw0MzAuMTZBNy4zNiw3LjM2LDAsMCwwLDgxLjg0LDQzOUwxMDcsNDMzLjA3cTIuMTgsMS44Myw0LjQxLDMuNjFsLS45MiwyNS44MmE3LjM1LDcuMzUsMCwwLDAsMTAuMzksNi45NWwyMy40My0xMC42OGMxLjY5Ljk0LDMuNDIsMS44Myw1LjE0LDIuNzNsNC4xNSwyNS40MmE3LjM0LDcuMzQsMCwwLDAsMTEuNTQsNC43OGwyMC44My0xNWMxLjg2LjYsMy43NiwxLjEzLDUuNjUsMS42OGw5LDI0YTcuMzYsNy4zNiwwLDAsMCwxMi4yNSwyLjQ0bDE3LjUtMTguNzJjMS45NS4yMSwzLjkyLjM4LDUuODguNTVsMTMuNTEsMjEuODJhNy4zNSw3LjM1LDAsMCwwLDEyLjUsMGwxMy41MS0yMS44MmMyLS4xNywzLjkzLS4zNCw1Ljg4LS41NmwxNy41LDE4LjczYTcuMzYsNy4zNiwwLDAsMCwxMi4yNS0yLjQ0bDktMjRjMS44OS0uNTUsMy43OC0xLjA4LDUuNjUtMS42OGwyMC44MiwxNWE3LjM0LDcuMzQsMCwwLDAsMTEuNTQtNC43OGw0LjE1LTI1LjQyYzEuNzItLjksMy40NS0xLjc5LDUuMTUtMi43M2wyMy40MiwxMC42OGE3LjM1LDcuMzUsMCwwLDAsMTAuMzktNi45NWwtLjkxLTI1LjgycTIuMjItMS43OSw0LjQtMy42MUw0MzAuMTYsNDM5YTcuMzYsNy4zNiwwLDAsMCw4Ljg0LTguODRMNDMzLjA3LDQwNXExLjgzLTIuMTcsMy42MS00LjRsMjUuODIuOTFhNy4yMyw3LjIzLDAsMCwwLDYuMzctMy4yNiw3LjM1LDcuMzUsMCwwLDAsLjU4LTcuMTNMNDU4Ljc3LDM2Ny43Yy45NC0xLjcsMS44My0zLjQzLDIuNzMtNS4xNWwyNS40Mi00LjE1YTcuMzUsNy4zNSwwLDAsMCw0Ljc5LTExLjU0bC0xNS0yMC44M2MuNTktMS44NywxLjEzLTMuNzYsMS42Ny01LjY1bDI0LTlhNy4zNSw3LjM1LDAsMCwwLDIuNDQtMTIuMjVsLTE4LjcyLTE3LjVjLjIxLTEuOTUuMzgtMy45MS41NS01Ljg3bDIxLjgyLTEzLjUxYTcuMzUsNy4zNSwwLDAsMCwwLTEyLjVabS0xNTEsMTI5LjA4QTEzLjkxLDEzLjkxLDAsMCwwLDM0MSwzODkuNTFsLTcuNjQsMzUuNjdBMTg3LjUxLDE4Ny41MSwwLDAsMSwxNzcsNDI0LjQ0bC03LjY0LTM1LjY2YTEzLjg3LDEzLjg3LDAsMCwwLTE2LjQ2LTEwLjY4bC0zMS41MSw2Ljc2YTE4Ny4zOCwxODcuMzgsMCwwLDEtMTYuMjYtMTkuMjFIMjU4LjNjMS43MiwwLDIuODktLjI5LDIuODktMS45MVYzMDkuNTVjMC0xLjU3LTEuMTctMS45MS0yLjg5LTEuOTFIMjEzLjQ3bC4wNS0zNC4zNUgyNjJjNC40MSwwLDIzLjY2LDEuMjgsMjkuNzksMjUuODcsMS45MSw3LjU1LDYuMTcsMzIuMTQsOS4wNiw0MCwyLjg5LDguODIsMTQuNiwyNi40NiwyNy4xLDI2LjQ2SDQwN2ExODcuMywxODcuMywwLDAsMS0xNy4zNCwyMC4wOVptMjUuNzcsMzQuNDlBMTUuMjQsMTUuMjQsMCwxLDEsMzY4LDM5OC4wOGguNDRBMTUuMjMsMTUuMjMsMCwwLDEsMzgzLjI0LDQxMy4zMlptLTIyNS42Mi0uNjhhMTUuMjQsMTUuMjQsMCwxLDEtMTUuMjUtMTUuMjVoLjQ1QTE1LjI1LDE1LjI1LDAsMCwxLDE1Ny42Miw0MTIuNjRaTTY5LjU3LDIzNC4xNWwzMi44My0xNC42YTEzLjg4LDEzLjg4LDAsMCwwLDcuMDYtMTguMzNMMTAyLjY5LDE4NmgyNi41NlYzMDUuNzNINzUuNjVBMTg3LjY1LDE4Ny42NSwwLDAsMSw2OS41NywyMzQuMTVaTTU4LjMxLDE5OC4wOWExNS4yNCwxNS4yNCwwLDAsMSwxNS4yMy0xNS4yNUg3NGExNS4yNCwxNS4yNCwwLDEsMS0xNS42NywxNS4yNFptMTU1LjE2LDI0LjQ5LjA1LTM1LjMyaDYzLjI2YzMuMjgsMCwyMy4wNywzLjc3LDIzLjA3LDE4LjYyLDAsMTIuMjktMTUuMTksMTYuNy0yNy42OCwxNi43Wk0zOTksMzA2LjcxYy05LjgsMS4xMy0yMC42My00LjEyLTIyLTEwLjA5LTUuNzgtMzIuNDktMTUuMzktMzkuNC0zMC41Ny01MS40LDE4Ljg2LTExLjk1LDM4LjQ2LTI5LjY0LDM4LjQ2LTUzLjI2LDAtMjUuNTItMTcuNDktNDEuNTktMjkuNC00OS40OC0xNi43Ni0xMS0zNS4yOC0xMy4yMy00MC4yNy0xMy4yM0gxMTYuMzJBMTg3LjQ5LDE4Ny40OSwwLDAsMSwyMjEuMjEsNzAuMDZsMjMuNDcsMjQuNmExMy44MiwxMy44MiwwLDAsMCwxOS42LjQ0bDI2LjI2LTI1YTE4Ny41MSwxODcuNTEsMCwwLDEsMTI4LjM3LDkxLjQzbC0xOCw0MC41N0ExNCwxNCwwLDAsMCw0MDgsMjIwLjQzbDM0LjU5LDE1LjMzYTE4Ny4xMiwxODcuMTIsMCwwLDEsLjQsMzIuNTRINDIzLjcxYy0xLjkxLDAtMi42OSwxLjI3LTIuNjksMy4xM3Y4LjgyQzQyMSwzMDEsNDA5LjMxLDMwNS41OCwzOTksMzA2LjcxWk0yNDAsNjAuMjFBMTUuMjQsMTUuMjQsMCwwLDEsMjU1LjIxLDQ1aC40NUExNS4yNCwxNS4yNCwwLDEsMSwyNDAsNjAuMjFaTTQzNi44NCwyMTRhMTUuMjQsMTUuMjQsMCwxLDEsMC0zMC40OGguNDRhMTUuMjQsMTUuMjQsMCwwLDEtLjQ0LDMwLjQ4WlwiXVxufTtcbnZhciBmYVdpeCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3aXgnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY1Y2ZcIiwgXCJNMzkzLjM4IDEzMS42OWMwIDEzLjAzIDIuMDggMzIuNjktMjguNjggNDMuODMtOS41MiAzLjQ1LTE1Ljk1IDkuNjYtMTUuOTUgOS42NiAwLTMxIDQuNzItNDIuMjIgMTcuNC00OC44NiA5Ljc1LTUuMTEgMjcuMjMtNC42MyAyNy4yMy00LjYzem0tMTE1LjggMzUuNTRsLTM0LjI0IDEzMi42Ni0yOC40OC0xMDguNTdjLTcuNjktMzEuOTktMjAuODEtNDguNTMtNDguNDMtNDguNTMtMjcuMzcgMC00MC42NiAxNi4xOC00OC40MyA0OC41M0w4OS41MiAyOTkuODkgNTUuMjggMTY3LjIzQzQ5LjczIDE0MC41MSAyMy44NiAxMjguOTYgMCAxMzEuOTZsNjUuNTcgMjQ3LjkzczIxLjYzIDEuNTYgMzIuNDYtMy45NmMxNC4yMi03LjI1IDIwLjk4LTEyLjg0IDI5LjU5LTQ2LjU3IDcuNjctMzAuMDcgMjkuMTEtMTE4LjQxIDMxLjEyLTEyNC43IDQuNzYtMTQuOTQgMTEuMDktMTMuODEgMTUuNCAwIDEuOTcgNi4zIDIzLjQ1IDk0LjYzIDMxLjEyIDEyNC43IDguNiAzMy43MyAxNS4zNyAzOS4zMiAyOS41OSA0Ni41NyAxMC44MiA1LjUyIDMyLjQ2IDMuOTYgMzIuNDYgMy45Nmw2NS41Ny0yNDcuOTNjLTI0LjQyLTMuMDctNDkuODIgOC45My01NS4zIDM1LjI3em0xMTUuNzggNS4yMXMtNC4xIDYuMzQtMTMuNDYgMTEuNTdjLTYuMDEgMy4zNi0xMS43OCA1LjY0LTE3Ljk3IDguNjEtMTUuMTQgNy4yNi0xMy4xOCAxMy45NS0xMy4xOCAzNS4ydjE1Mi4wN3MxNi41NSAyLjA5IDI3LjM3LTMuNDNjMTMuOTMtNy4xIDE3LjEzLTEzLjk1IDE3LjI2LTQ0Ljc4VjE4MS40MWwtLjAyLjAxdi04Ljk4em0xNjMuNDQgODQuMDhMNjQwIDEzMi43OHMtMzUuMTEtNS45OC01Mi41IDkuODVjLTEzLjMgMTIuMS0yNC40MSAyOS41NS01NC4xOCA3Mi40Ny0uNDcuNzMtNi4yNSAxMC41NC0xMy4wNyAwLTI5LjI5LTQyLjIzLTQwLjgtNjAuMjktNTQuMTgtNzIuNDctMTcuMzktMTUuODMtNTIuNS05Ljg1LTUyLjUtOS44NWw4My4yIDEyMy43NC04Mi45NyAxMjMuMzZzMzYuNTcgNC42MiA1My45NS0xMS4yMWMxMS40OS0xMC40NiAxNy41OC0yMC4zNyA1Mi41MS03MC43MiA2LjgxLTEwLjUyIDEyLjU3LS43NyAxMy4wNyAwIDI5LjQgNDIuMzggMzkuMjMgNTguMDYgNTMuMTQgNzAuNzIgMTcuMzkgMTUuODMgNTMuMzIgMTEuMjEgNTMuMzIgMTEuMjFMNTU2LjggMjU2LjUyelwiXVxufTtcbnZhciBmYVNxdWFyZUJlaGFuY2UgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3F1YXJlLWJlaGFuY2UnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImJlaGFuY2Utc3F1YXJlXCJdLCBcImYxYjVcIiwgXCJNMTU1LjMgMzE4LjRjMTcuMiAwIDMxLjItNi4xIDMxLjItMjUuNGMwLTE5LjctMTEuNy0yNy40LTMwLjMtMjcuNWgtNDZ2NTIuOWg0NS4xem0tNS40LTEyOS42SDExMC4zdjQ0LjhIMTUzYzE1LjEgMCAyNS44LTYuNiAyNS44LTIyLjljMC0xNy43LTEzLjctMjEuOS0yOC45LTIxLjl6bTEyOS41IDc0LjhoNjIuMmMtMS43LTE4LjUtMTEuMy0yOS43LTMwLjUtMjkuN2MtMTguMyAwLTMwLjUgMTEuNC0zMS43IDI5Ljd6TTM4NCAzMkg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjR6TTM0OS41IDE4NUgyNzEuN1YxNjYuMWg3Ny44VjE4NXpNMTkzLjcgMjQzLjdjMjMuNiA2LjcgMzUgMjcuNSAzNSA1MS42YzAgMzktMzIuNyA1NS43LTY3LjYgNTUuOUg2OHYtMTkyaDkwLjVjMzIuOSAwIDYxLjQgOS4zIDYxLjQgNDcuNWMwIDE5LjMtOSAyOC44LTI2LjIgMzd6bTExOC43LTM4LjZjNDMuNSAwIDY3LjYgMzQuMyA2Ny42IDc1LjRjMCAxLjYtLjEgMy4zLS4yIDVjMCAuOC0uMSAxLjUtLjEgMi4ySDI3OS41YzAgMjIuMiAxMS43IDM1LjMgMzQuMSAzNS4zYzExLjYgMCAyNi41LTYuMiAzMC4yLTE4LjFoMzMuN2MtMTAuNCAzMS45LTMxLjkgNDYuOC02NS4xIDQ2LjhjLTQzLjggMC03MS4xLTI5LjctNzEuMS03M2MwLTQxLjggMjguNy03My42IDcxLjEtNzMuNnpcIl1cbn07XG52YXIgZmFCZWhhbmNlU3F1YXJlID0gZmFTcXVhcmVCZWhhbmNlO1xudmFyIGZhU3VwcGxlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N1cHBsZScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjNmOVwiLCBcIk02NDAgMjYyLjVjMCA2NC4xLTEwOSAxMTYuMS0yNDMuNSAxMTYuMS0yNC44IDAtNDguNi0xLjgtNzEuMS01IDcuNy40IDE1LjUuNiAyMy40LjYgMTM0LjUgMCAyNDMuNS01Ni45IDI0My41LTEyNy4xIDAtMjkuNC0xOS4xLTU2LjQtNTEuMi03OCA2MCAyMS4xIDk4LjkgNTUuMSA5OC45IDkzLjR6TTQ3LjcgMjI3LjljLS4xLTcwLjIgMTA4LjgtMTI3LjMgMjQzLjMtMTI3LjYgNy45IDAgMTUuNi4yIDIzLjMuNS0yMi41LTMuMi00Ni4zLTQuOS03MS00LjlDMTA4LjggOTYuMy0uMSAxNDguNSAwIDIxMi42Yy4xIDM4LjMgMzkuMSA3Mi4zIDk5LjMgOTMuMy0zMi4zLTIxLjUtNTEuNS00OC42LTUxLjYtNzh6bTYwLjIgMzkuOXMxMC41IDEzLjIgMjkuMyAxMy4yYzE3LjkgMCAyOC40LTExLjUgMjguNC0yNS4xIDAtMjgtNDAuMi0yNS4xLTQwLjItMzkuNyAwLTUuNCA1LjMtOS4xIDEyLjUtOS4xIDUuNyAwIDExLjMgMi42IDExLjMgNi42djMuOWgxNC4ydi03LjljMC0xMi4xLTE1LjQtMTYuOC0yNS40LTE2LjgtMTYuNSAwLTI4LjUgMTAuMi0yOC41IDI0LjEgMCAyNi42IDQwLjIgMjUuNCA0MC4yIDM5LjkgMCA2LjYtNS44IDEwLjEtMTIuMyAxMC4xLTExLjkgMC0yMC43LTEwLjEtMjAuNy0xMC4xbC04LjggMTAuOXptMTIwLjgtNzMuNnY1NC40YzAgMTEuMy03LjEgMTcuOC0xNy44IDE3LjgtMTAuNyAwLTE3LjgtNi41LTE3LjgtMTcuN3YtNTQuNWgtMTUuOHY1NWMwIDE4LjkgMTMuNCAzMS45IDMzLjcgMzEuOSAyMC4xIDAgMzMuNC0xMyAzMy40LTMxLjl2LTU1aC0xNS43em0zNC40IDg1LjRoMTUuOHYtMjkuNWgxNS41YzE2IDAgMjcuMi0xMS41IDI3LjItMjguMXMtMTEuMi0yNy44LTI3LjItMjcuOGgtMzkuMXYxMy40aDcuOHY3MnptMTUuOC00M3YtMjkuMWgxMi45YzguNyAwIDEzLjcgNS43IDEzLjcgMTQuNCAwIDguOS01LjEgMTQuNy0xNCAxNC43aC0xMi42em01NyA0M2gxNS44di0yOS41aDE1LjVjMTYgMCAyNy4yLTExLjUgMjcuMi0yOC4xcy0xMS4yLTI3LjgtMjcuMi0yNy44aC0zOS4xdjEzLjRoNy44djcyem0xNS43LTQzdi0yOS4xaDEyLjljOC43IDAgMTMuNyA1LjcgMTMuNyAxNC40IDAgOC45LTUgMTQuNy0xNCAxNC43aC0xMi42em01Ny4xIDM0LjhjMCA1LjggMi40IDguMiA4LjIgOC4yaDM3LjZjNS44IDAgOC4yLTIuNCA4LjItOC4ydi0xM2gtMTQuM3Y1LjJjMCAxLjctMSAyLjYtMi42IDIuNmgtMTguNmMtMS43IDAtMi42LTEtMi42LTIuNnYtNjEuMmMwLTUuNy0yLjQtOC4yLTguMi04LjJINDAxdjEzLjRoNS4yYzEuNyAwIDIuNiAxIDIuNiAyLjZ2NjEuMnptNjMuNCAwYzAgNS44IDIuNCA4LjIgOC4yIDguMkg1MTljNS43IDAgOC4yLTIuNCA4LjItOC4ydi0xM2gtMTQuM3Y1LjJjMCAxLjctMSAyLjYtMi42IDIuNmgtMTkuN2MtMS43IDAtMi42LTEtMi42LTIuNnYtMjAuM2gyNy43di0xMy40SDQ4OHYtMjIuNGgxOS4yYzEuNyAwIDIuNiAxIDIuNiAyLjZ2NS4ySDUyNHYtMTNjMC01LjctMi41LTguMi04LjItOC4yaC01MS42djEzLjRoNy44djYzLjl6bTU4LjktNzZ2NS45aDEuNnYtNS45aDIuN3YtMS4yaC03djEuMmgyLjd6bTUuNy0xLjJ2Ny4xaDEuNXYtNS43bDIuMyA1LjdoMS4zbDIuMy01Ljd2NS43aDEuNXYtNy4xaC0yLjNsLTIuMSA1LjEtMi4xLTUuMWgtMi40elwiXVxufTtcbnZhciBmYVdlYmZsb3cgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnd2ViZmxvdycsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTY1Y1wiLCBcIk02NDAgNjRMNDM1LjggNDYzLjJIMjQ0bDg1LjUtMTY1LjVoLTMuOEMyNTUuMSAzODkuMyAxNDkuOSA0NDkuNSAwIDQ2My4yVjMwMC4xczk1LjktNS43IDE1Mi4zLTY0LjlIMFY2NEgxNzEuMVYyMDQuOGwzLjggMEwyNDQuOSA2NEgzNzQuM1YyMDMuOWwzLjggMEw0NTAuNyA2NEg2NDB6XCJdXG59O1xudmFyIGZhUmViZWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncmViZWwnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYxZDBcIiwgXCJNMjU2LjUgNTA0QzExNy4yIDUwNCA5IDM4Ny44IDEzLjIgMjQ5LjkgMTYgMTcwLjcgNTYuNCA5Ny43IDEyOS43IDQ5LjVjLjMgMCAxLjktLjYgMS4xLjgtNS44IDUuNS0xMTEuMyAxMjkuOC0xNC4xIDIyNi40IDQ5LjggNDkuNSA5MCAyLjUgOTAgMi41IDM4LjUtNTAuMS0uNi0xMjUuOS0uNi0xMjUuOS0xMC0yNC45LTQ1LjctNDAuMS00NS43LTQwLjFsMjguOC0zMS44YzI0LjQgMTAuNSA0My4yIDM4LjcgNDMuMiAzOC43LjgtMjkuNi0yMS45LTYxLjQtMjEuOS02MS40TDI1NS4xIDhsNDQuMyA1MC4xYy0yMC41IDI4LjgtMjEuOSA2Mi42LTIxLjkgNjIuNiAxMy44LTIzIDQzLjUtMzkuMyA0My41LTM5LjNsMjguNSAzMS44Yy0yNy40IDguOS00NS40IDM5LjktNDUuNCAzOS45LTE1LjggMjguNS0yNy4xIDg5LjQuNiAxMjcuMyAzMi40IDQ0LjYgODcuNy0yLjggODcuNy0yLjggMTAyLjctOTEuOS0xMC41LTIyNS0xMC41LTIyNS02LjEtNS41LjgtMi44LjgtMi44IDUwLjEgMzYuNSAxMTQuNiA4NC40IDExNi4yIDIwNC44QzUwMC45IDQwMC4yIDM5OSA1MDQgMjU2LjUgNTA0elwiXVxufTtcbnZhciBmYUNzczMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3NzMycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjEzY1wiLCBcIk00ODAgMzJsLTY0IDM2OC0yMjMuMyA4MEwwIDQwMGwxOS42LTk0LjhoODJsLTggNDAuNkwyMTAgMzkwLjJsMTM0LjEtNDQuNCAxOC44LTk3LjFIMjkuNWwxNi04MmgzMzMuN2wxMC41LTUyLjdINTYuM2wxNi4zLTgySDQ4MHpcIl1cbn07XG52YXIgZmFTdGF5bGlua2VkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0YXlsaW5rZWQnLFxuICBpY29uOiBbNDQwLCA1MTIsIFtdLCBcImYzZjVcIiwgXCJNMzgyLjcgMjkyLjVsMi43IDIuNy0xNzAtMTY3LjNjLTMuNS0zLjUtOS43LTMuNy0xMy44LS41TDE0NC4zIDE3MWMtNC4yIDMuMi00LjYgOC43LTEuMSAxMi4ybDY4LjEgNjQuM2MzLjYgMy41IDkuOSAzLjcgMTQgLjVsLjEtLjFjNC4xLTMuMiAxMC40LTMgMTQgLjVsODQgODEuM2MzLjYgMy41IDMuMiA5LS45IDEyLjJsLTkzLjIgNzRjLTQuMiAzLjMtMTAuNSAzLjEtMTQuMi0uNEw2My4yIDI2OGMtMy41LTMuNS05LjctMy43LTEzLjktLjVMMy41IDMwMi40Yy00LjIgMy4yLTQuNyA4LjctMS4yIDEyLjJMMjExIDUxMC43czcuNCA2LjggMTcuMy0uOGwxOTgtMTYzLjljNC0zLjIgNC40LTguNy43LTEyLjJ6bTU0LjUtODMuNEwyMjYuNyAyLjVjLTEuNS0xLjItOC01LjUtMTYuMyAxLjFMMy42IDE2NS43Yy00LjIgMy4yLTQuOCA4LjctMS4yIDEyLjJsNDIuMyA0MS43IDE3MS43IDE2NS4xYzMuNyAzLjUgMTAuMSAzLjcgMTQuMy40bDUwLjItMzguOC0uMy0uMyA3LjctNmM0LjItMy4yIDQuNi04LjcuOS0xMi4ybC01Ny4xLTU0LjRjLTMuNi0zLjUtMTAtMy43LTE0LjItLjVsLS4xLjFjLTQuMiAzLjItMTAuNSAzLjEtMTQuMi0uNEwxMDkgMTgwLjhjLTMuNi0zLjUtMy4xLTguOSAxLjEtMTIuMmw5Mi4yLTcxLjVjNC4xLTMuMiAxMC4zLTMgMTMuOS41bDE2MC40IDE1OWMzLjcgMy41IDEwIDMuNyAxNC4xLjVsNDUuOC0zNS44YzQuMS0zLjIgNC40LTguNy43LTEyLjJ6XCJdXG59O1xudmFyIGZhS2FnZ2xlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2thZ2dsZScsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjVmYVwiLCBcIk0zMDQuMiA1MDEuNUwxNTguNCAzMjAuMyAyOTguMiAxODVjMi42LTIuNyAxLjctMTAuNS01LjMtMTAuNWgtNjkuMmMtMy41IDAtNyAxLjgtMTAuNSA1LjNMODAuOSAzMTMuNVY3LjVxMC03LjUtNy41LTcuNUgyMS41UTE0IDAgMTQgNy41djQ5N3EwIDcuNSA3LjUgNy41aDUxLjlxNy41IDAgNy41LTcuNXYtMTA5bDMwLjgtMjkuMyAxMTAuNSAxNDAuNmMzIDMuNSA2LjUgNS4zIDEwLjUgNS4zaDY2LjlxNS4yNSAwIDYtM3pcIl1cbn07XG52YXIgZmFTcGFjZUF3ZXNvbWUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3BhY2UtYXdlc29tZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTVhY1wiLCBcIk05NiAyNTZIMTI4VjUxMkgwVjM1MkgzMlYzMjBINjRWMjg4SDk2VjI1NnpNNTEyIDM1MlY1MTJIMzg0VjI1Nkg0MTZWMjg4SDQ0OFYzMjBINDgwVjM1Mkg1MTJ6TTMyMCA2NEgzNTJWNDQ4SDMyMFY0MTZIMTkyVjQ0OEgxNjBWNjRIMTkyVjMySDIyNFYwSDI4OFYzMkgzMjBWNjR6TTI4OCAxMjhIMjI0VjE5MkgyODhWMTI4elwiXVxufTtcbnZhciBmYURldmlhbnRhcnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGV2aWFudGFydCcsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjFiZFwiLCBcIk0zMjAgOTMuMmwtOTguMiAxNzkuMSA3LjQgOS41SDMyMHYxMjcuN0gxNTkuMWwtMTMuNSA5LjItNDMuNyA4NGMtLjMgMC04LjYgOC42LTkuMiA5LjJIMHYtOTMuMmw5My4yLTE3OS40LTcuNC05LjJIMFYxMDIuNWgxNTZsMTMuNS05LjIgNDMuNy04NGMuMyAwIDguNi04LjYgOS4yLTkuMkgzMjB2OTMuMXpcIl1cbn07XG52YXIgZmFDcGFuZWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3BhbmVsJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMzg4XCIsIFwiTTIxMC4zIDIyMC4yYy01LjYtMjQuOC0yNi45LTQxLjItNTEtNDEuMmgtMzdjLTcuMSAwLTEyLjUgNC41LTE0LjMgMTAuOUw3My4xIDMyMGwyNC43LS4xYzYuOCAwIDEyLjMtNC41IDE0LjItMTAuN2wyNS44LTk1LjdoMTkuOGM4LjQgMCAxNi4yIDUuNiAxOC4zIDE0LjggMi41IDEwLjktNS45IDIyLjYtMTguMyAyMi42aC0xMC4zYy03IDAtMTIuNSA0LjYtMTQuMyAxMC44bC02LjQgMjMuOGgzMmMzNy4yIDAgNTguMy0zNi4yIDUxLjctNjUuM3ptLTE1Ni41IDI4aDE4LjZjNi45IDAgMTIuNC00LjQgMTQuMy0xMC45bDYuMi0yMy42aC00MEMzMCAyMTMuNyA5IDIyNy44IDEuNyAyNTQuOC03IDI4OC42IDE4LjUgMzIwIDUyIDMyMGgxMi40bDcuMS0yNi4xYzEuMi00LjQtMi4yLTguMy02LjQtOC4zSDUzLjhjLTI0LjcgMC0yNC45LTM3LjQgMC0zNy40em0yNDcuNS0zNC44aC03Ny45bC0zLjUgMTMuNGMtMi40IDkuNiA0LjUgMTguNSAxNC4yIDE4LjVoNTcuNWM0IDAgMi40IDQuMyAyLjEgNS4zbC04LjYgMzEuOGMtLjQgMS40LS45IDUuMy01LjUgNS4zaC0zNC45Yy01LjMgMC01LjMtNy45IDAtNy45aDIxLjZjNi44IDAgMTIuMy00LjYgMTQuMi0xMC44bDMuNS0xMy4yaC00OC40Yy0zOS4yIDAtNDMuNiA2My44LS43IDYzLjhsNTcuNS4yYzExLjIgMCAyMC42LTcuMiAyMy40LTE3LjhsMTQtNTEuOGM0LjgtMTkuMi05LjctMzYuOC0yOC41LTM2Ljh6TTYzMy4xIDE3OWgtMTguOWMtNC45IDAtOS4yIDMuMi0xMC40IDcuOUw1NjguMiAzMjBjMjAuNyAwIDM5LjgtMTMuOCA0NC45LTM0LjVsMjYuNS05OC4yYzEuMi00LjMtMi04LjMtNi41LTguM3ptLTIzNi4zIDM0Ljd2LjFoLTQ4LjNsLTI2LjIgOThjLTEuMiA0LjQgMi4yIDguMyA2LjQgOC4zaDE4LjljNC44IDAgOS4yLTMgMTAuNC03LjhsMTcuMi02NEgzOTVjMTIuNSAwIDIxLjQgMTEuOCAxOC4xIDIzLjRsLTEwLjYgNDBjLTEuMiA0LjMgMS45IDguMyA2LjQgOC4zSDQyOGM0LjYgMCA5LjEtMi45IDEwLjMtNy44bDguOC0zMy4xYzktMzMuMS0xNS45LTY1LjQtNTAuMy02NS40em05OC4zIDc0LjZjLTMuNiAwLTYtMy40LTUuMS02LjdsOC0zMGMuOS0zLjkgMy43LTYgNy44LTZoMzIuOWMyLjYgMCA0LjYgMi40IDMuOSA1LjFsLS43IDIuNmMtLjYgMi0xLjkgMy0zLjkgM2gtMjEuNmMtNyAwLTEyLjYgNC42LTE0LjIgMTAuOGwtMy41IDEzaDUzLjRjMTAuNSAwIDIwLjMtNi42IDIzLjItMTcuNmwzLjItMTJjNC45LTE5LjEtOS4zLTM2LjgtMjguMy0zNi44aC00Ny4zYy0xNy45IDAtMzMuOCAxMi0zOC42IDI5LjZsLTEwLjggNDBjLTUgMTcuNyA4LjMgMzYuNyAyOC4zIDM2LjdoNjYuN2M2LjggMCAxMi4zLTQuNSAxNC4yLTEwLjdsNS43LTIxelwiXVxufTtcbnZhciBmYUdvb2RyZWFkc0cgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ29vZHJlYWRzLWcnLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYzYTlcIiwgXCJNNDIuNiA0MDMuM2gyLjhjMTIuNyAwIDI1LjUgMCAzOC4yLjEgMS42IDAgMy4xLS40IDMuNiAyLjEgNy4xIDM0LjkgMzAgNTQuNiA2Mi45IDYzLjkgMjYuOSA3LjYgNTQuMSA3LjggODEuMyAxLjggMzMuOC03LjQgNTYtMjguMyA2OC02MC40IDgtMjEuNSAxMC43LTQzLjggMTEtNjYuNS4xLTUuOC4zLTQ3LS4yLTUyLjhsLS45LS4zYy0uOCAxLjUtMS43IDIuOS0yLjUgNC40LTIyLjEgNDMuMS02MS4zIDY3LjQtMTA1LjQgNjkuMS0xMDMgNC0xNjkuNC01Ny0xNzItMTc2LjItLjUtMjMuNyAxLjgtNDYuOSA4LjMtNjkuN0M1OC4zIDQ3LjcgMTEyLjMuNiAxOTEuNiAwYzYxLjMtLjQgMTAxLjUgMzguNyAxMTYuMiA3MC4zLjUgMS4xIDEuMyAyLjMgMi40IDEuOVYxMC42aDQ0LjNjMCAyODAuMy4xIDMzMi4yLjEgMzMyLjItLjEgNzguNS0yNi43IDE0My43LTEwMyAxNjIuMi02OS41IDE2LjktMTU5IDQuOC0xOTYtNTcuMi04LTEzLjUtMTEuOC0yOC4zLTEzLTQ0LjV6TTE4OC45IDM2LjVjLTUyLjUtLjUtMTA4LjUgNDAuNy0xMTUgMTMzLjgtNC4xIDU5IDE0LjggMTIyLjIgNzEuNSAxNDguNiAyNy42IDEyLjkgNzQuMyAxNSAxMDguMy04LjcgNDcuNi0zMy4yIDYyLjctOTcgNTQuOC0xNTQtOS43LTcxLjEtNDcuOC0xMjAtMTE5LjYtMTE5Ljd6XCJdXG59O1xudmFyIGZhU3F1YXJlR2l0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS1naXQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcImdpdC1zcXVhcmVcIl0sIFwiZjFkMlwiLCBcIk0xMjAuOCAzMzUuNWMtNS45LS40LTEyLjYtLjgtMjAuMi0xLjNjLTMuMyA0LjEtNi42IDguNC02LjYgMTMuNWMwIDE4LjUgNjUuNSAxOC41IDY1LjUtMS41YzAtOC4zLTcuNC04LjctMzguOC0xMC43em03LjgtMTE3LjljLTMyLjMgMC0zMy43IDQ0LjUtLjcgNDQuNWMzMi41IDAgMzEuNy00NC41IC43LTQ0LjV6TTM4NCAzMkg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZjMC0zNS4zLTI4LjctNjQtNjQtNjR6TTI0My45IDE3Mi4yYy0xNC41IDAtMjIuOS04LjQtMjIuOS0yMi45YzAtMTQuNSA4LjQtMjIuMyAyMi45LTIyLjNjMTQuNyAwIDIzLjEgNy44IDIzLjEgMjIuM3MtOC40IDIyLjktMjMuMSAyMi45ek0xNDkuNiAxOTVoNDkuNWwwIDIxLjYtMjMuNCAxLjhjNC42IDUuOCA5LjQgMTQgOS40IDI1LjdjMCA0OC43LTU3LjIgNDcuMi03NC4yIDQyLjRsLTguNCAxMy40YzUgLjMgOS44IC42IDE0LjMgLjhjNTYuMyAzLjIgODAuNSA0LjYgODAuNSAzOC41YzAgMjkuMi0yNS43IDQ1LjctNjkuOSA0NS43Yy00NiAwLTYzLjUtMTEuNi02My41LTMxLjdjMC0xMS40IDUuMS0xNy41IDE0LTI1LjljLTguNC0zLjUtMTEuMi05LjktMTEuMi0xNi44YzAtOS42IDcuNC0xNi4zIDIzLTMwLjZsLjItLjJjLTEyLjQtNi4xLTIxLjgtMTkuMy0yMS44LTM4LjFjMC01MS42IDU2LjYtNTMuMyA4MS42LTQ2Ljh6TTI3MC41IDMwMy4xbDEzIDEuOCAwIDIwLjFIMjExLjFWMzA0LjljMi43LS40IDUtLjcgNi45LS45YzkuOS0xLjIgMTAuMS0xLjMgMTAuMS02VjIyMy4zYzAtNC40LS45LTQuNy0xMC4xLTcuOGMtMS45LS43LTQuMi0xLjQtNi45LTIuNGwyLjgtMjAuNmg1Mi42VjI5OGMwIDQuMSAuMiA0LjYgNC4xIDUuMXptMTA2LjYtMTAuNEwzODQgMzE1Yy0xMC45IDUuNC0yNi45IDEwLjItNDEuNCAxMC4yYy0zMC4yIDAtNDEuNy0xMi4yLTQxLjctNDAuOVYyMTcuN2MwLS44IDAtMS40LS4yLTEuOGMtLjgtMS4yLTQuMi0uNy0xOS42LS43VjE5Mi42YzIyLjMtMi41IDMxLjItMTMuNyAzNC00MS40aDI0LjJjMCAzMy4zLS42IDM4IC43IDM4LjZjLjMgLjEgLjcgMCAxLjMgMGgzNS44djI1LjRIMzM5LjN2NjAuN2MwIC4yIDAgLjUgMCAuOWMtLjIgNi4zLS45IDMwLjQgMzcuOSAxNS45elwiXVxufTtcbnZhciBmYUdpdFNxdWFyZSA9IGZhU3F1YXJlR2l0O1xudmFyIGZhU3F1YXJlVHVtYmxyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS10dW1ibHInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtcInR1bWJsci1zcXVhcmVcIl0sIFwiZjE3NFwiLCBcIk00NDggOTZjMC0zNS4zLTI4LjctNjQtNjQtNjRINjRDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2ek0yNTYuOCA0MTZjLTc1LjUgMC05MS45LTU1LjUtOTEuOS04Ny45di05MEgxMzUuMmMtMy40IDAtNi4yLTIuOC02LjItNi4yVjE4OS40YzAtNC41IDIuOC04LjUgNy4xLTEwYzM4LjgtMTMuNyA1MC45LTQ3LjUgNTIuNy03My4yYy41LTYuOSA0LjEtMTAuMiAxMC0xMC4yaDQ0LjNjMy40IDAgNi4yIDIuOCA2LjIgNi4ydjcyaDUxLjljMy40IDAgNi4yIDIuOCA2LjIgNi4ydjUxLjFjMCAzLjQtMi44IDYuMi02LjIgNi4ySDI0OS4xVjMyMWMwIDIxLjQgMTQuOCAzMy41IDQyLjUgMjIuNGMzLTEuMiA1LjYtMiA4LTEuNGMyLjIgLjUgMy42IDIuMSA0LjYgNC45TDMxOCAzODcuMWMxIDMuMiAyIDYuNy0uMyA5LjFjLTguNSA5LjEtMzEuMiAxOS44LTYwLjkgMTkuOHpcIl1cbn07XG52YXIgZmFUdW1ibHJTcXVhcmUgPSBmYVNxdWFyZVR1bWJscjtcbnZhciBmYVRyZWxsbyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd0cmVsbG8nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYxODFcIiwgXCJNMzkyLjMgMzJINTYuMUMyNS4xIDMyIDAgNTcuMSAwIDg4Yy0uMSAwIDAtNCAwIDMzNiAwIDMwLjkgMjUuMSA1NiA1NiA1NmgzMzYuMmMzMC44LS4yIDU1LjctMjUuMiA1NS43LTU2Vjg4Yy4xLTMwLjgtMjQuOC01NS44LTU1LjYtNTZ6TTE5NyAzNzEuM2MtLjIgMTQuNy0xMi4xIDI2LjYtMjYuOSAyNi42SDg3LjRjLTE0LjguMS0yNi45LTExLjgtMjctMjYuNlYxMTcuMWMwLTE0LjggMTItMjYuOSAyNi45LTI2LjloODIuOWMxNC44IDAgMjYuOSAxMiAyNi45IDI2Ljl2MjU0LjJ6bTE5My4xLTExMmMwIDE0LjgtMTIgMjYuOS0yNi45IDI2LjloLTgxYy0xNC44IDAtMjYuOS0xMi0yNi45LTI2LjlWMTE3LjJjMC0xNC44IDEyLTI2LjkgMjYuOC0yNi45aDgxLjFjMTQuOCAwIDI2LjkgMTIgMjYuOSAyNi45djE0Mi4xelwiXVxufTtcbnZhciBmYUNyZWF0aXZlQ29tbW9uc05jSnAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnY3JlYXRpdmUtY29tbW9ucy1uYy1qcCcsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjRlYVwiLCBcIk0yNDcuNyA4QzEwMy42IDggMCAxMjQuOCAwIDI1NmMwIDEzNi40IDExMS44IDI0OCAyNDcuNyAyNDhDMzc3LjkgNTA0IDQ5NiA0MDMuMiA0OTYgMjU2IDQ5NiAxMTcuMiAzODguNSA4IDI0Ny43IDh6bS42IDQ1MC43Yy0xMTIgMC0yMDMuNi05Mi41LTIwMy42LTIwMi43IDAtMjEuMSAzLTQxLjIgOS02MC4zbDEyNyA1Ni41aC0yNy45djM4LjZoNTguMWw1LjcgMTEuOHYxOC43aC02My44VjM2MGg2My44djU2aDYxLjd2LTU2aDY0LjJ2LTM1LjdsODEgMzYuMWMtMS41IDIuMi01Ny4xIDk4LjMtMTc1LjIgOTguM3ptODcuNi0xMzcuM2gtNTcuNnYtMTguN2wyLjktNS42IDU0LjcgMjQuM3ptNi41LTUxLjR2LTE3LjhoLTM4LjZsNjMtMTE2SDMwMWwtNDMuNCA5Ni0yMy0xMC4yLTM5LjYtODUuN2gtNjUuOGwyNy4zIDUxLTgxLjktMzYuNWMyNy44LTQ0LjEgODIuNi05OC4xIDE3My43LTk4LjEgMTEyLjggMCAyMDMgOTAgMjAzIDIwMy40IDAgMjEtMi43IDQwLjYtNy45IDU5bC0xMDEtNDUuMXpcIl1cbn07XG52YXIgZmFHZXRQb2NrZXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ2V0LXBvY2tldCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI2NVwiLCBcIk00MDcuNiA2NGgtMzY3QzE4LjUgNjQgMCA4Mi41IDAgMTA0LjZ2MTM1LjJDMCAzNjQuNSA5OS43IDQ2NCAyMjQuMiA0NjRjMTI0IDAgMjIzLjgtOTkuNSAyMjMuOC0yMjQuMlYxMDQuNmMwLTIyLjQtMTcuNy00MC42LTQwLjQtNDAuNnptLTE2MiAyNjguNWMtMTIuNCAxMS44LTMxLjQgMTEuMS00Mi40IDBDODkuNSAyMjMuNiA4OC4zIDIyNy40IDg4LjMgMjA5LjNjMC0xNi45IDEzLjgtMzAuNyAzMC43LTMwLjcgMTcgMCAxNi4xIDMuOCAxMDUuMiA4OS4zIDkwLjYtODYuOSA4OC42LTg5LjMgMTA1LjUtODkuMyAxNi45IDAgMzAuNyAxMy44IDMwLjcgMzAuNyAwIDE3LjgtMi45IDE1LjctMTE0LjggMTIzLjJ6XCJdXG59O1xudmFyIGZhUGVyYnl0ZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdwZXJieXRlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJlMDgzXCIsIFwiTTMwNS4zMTQsMjg0LjU3OEgyNDYuNlYzODMuM2g1OC43MTFxMjQuNDIzLDAsMzguMTkzLTEzLjc3dDEzLjc3LTM2LjExcTAtMjEuODI2LTE0LjAzMi0zNS4zMzVUMzA1LjMxNCwyODQuNTc4Wk0xNDkuNDM1LDEyOC43SDkwLjcyNHY5OC43MjNoNTguNzExcTI0LjQyLDAsMzguMTktMTMuNzczdDEzLjc3LTM2LjEwN3EwLTIxLjgyNi0xNC4wMjktMzUuMzM4VDE0OS40MzUsMTI4LjdaTTM2Ni42NDcsMzJIODEuMzUzQTgxLjQ0NSw4MS40NDUsMCwwLDAsMCwxMTMuMzUyVjM5OC42NDdBODEuNDQ1LDgxLjQ0NSwwLDAsMCw4MS4zNTMsNDgwSDM2Ni42NDdBODEuNDQ1LDgxLjQ0NSwwLDAsMCw0NDgsMzk4LjY0N1YxMTMuMzUyQTgxLjQ0NSw4MS40NDUsMCwwLDAsMzY2LjY0NywzMlptNjMuNjM1LDM2Ni42NDdhNjMuNzA2LDYzLjcwNiwwLDAsMS02My42MzUsNjMuNjM1SDgxLjM1M2E2My43MDYsNjMuNzA2LDAsMCwxLTYzLjYzNS02My42MzVWMTEzLjM1MkE2My43MDYsNjMuNzA2LDAsMCwxLDgxLjM1Myw0OS43MThIMzY2LjY0N2E2My43MDYsNjMuNzA2LDAsMCwxLDYzLjYzNSw2My42MzRaTTMwNS4zMTQsMTI4LjdIMjQ2LjZ2OTguNzIzaDU4LjcxMXEyNC40MjMsMCwzOC4xOTMtMTMuNzczdDEzLjc3LTM2LjEwN3EwLTIxLjgyNi0xNC4wMzItMzUuMzM4VDMwNS4zMTQsMTI4LjdaXCJdXG59O1xudmFyIGZhR3J1bnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ3J1bnQnLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYzYWRcIiwgXCJNNjEuMyAxODkuM2MtMS4xIDEwIDUuMiAxOS4xIDUuMiAxOS4xLjctNy41IDIuMi0xMi44IDQtMTYuNi40IDEwLjMgMy4yIDIzLjUgMTIuOCAzNC4xIDYuOSA3LjYgMzUuNiAyMy4zIDU0LjkgNi4xIDEgMi40IDIuMSA1LjMgMyA4LjUgMi45IDEwLjMtMi43IDI1LjMtMi43IDI1LjNzMTUuMS0xNy4xIDEzLjktMzIuNWMxMC44LS41IDIxLjQtOC40IDIxLjEtMTkuNSAwIDAtMTguOSAxMC40LTM1LjUtOC44LTkuNy0xMS4yLTQwLjktNDItODMuMS0zMS44IDQuMyAxIDguOSAyLjQgMTMuNSA0LjFoLS4xYy00LjIgMi02LjUgNy4xLTcgMTJ6bTI4LjMtMS44YzE5LjUgMTEgMzcuNCAyNS43IDQ0LjkgMzctNS43IDMuMy0yMS43IDEwLjQtMzgtMS43LTEwLjMtNy42LTkuOC0yNi4yLTYuOS0zNS4zem0xNDIuMSA0NS44Yy0xLjIgMTUuNSAxMy45IDMyLjUgMTMuOSAzMi41cy01LjYtMTUtMi43LTI1LjNjLjktMy4yIDItNiAzLTguNSAxOS4zIDE3LjMgNDggMS41IDU0LjgtNi4xIDkuNi0xMC42IDEyLjMtMjMuOCAxMi44LTM0LjEgMS44IDMuOCAzLjQgOS4xIDQgMTYuNiAwIDAgNi40LTkuMSA1LjItMTkuMS0uNi01LTIuOS0xMC03LTExLjhoLS4xYzQuNi0xLjggOS4yLTMuMiAxMy41LTQuMS00Mi4zLTEwLjItNzMuNCAyMC42LTgzLjEgMzEuOC0xNi43IDE5LjItMzUuNSA4LjgtMzUuNSA4LjgtLjIgMTAuOSAxMC40IDE4LjkgMjEuMiAxOS4zem02Mi43LTQ1LjhjMyA5LjEgMy40IDI3LjctNyAzNS40LTE2LjMgMTIuMS0zMi4yIDUtMzcuOSAxLjYgNy41LTExLjQgMjUuNC0yNiA0NC45LTM3ek0xNjAgNDE4LjVoLTI5LjRjLTUuNSAwLTguMiAxLjYtOS41IDIuOS0xLjkgMi0yLjIgNC43LS45IDguMSAzLjUgOS4xIDExLjQgMTYuNSAxMy43IDE4LjYgMy4xIDIuNyA3LjUgNC4zIDExLjggNC4zIDQuNCAwIDguMy0xLjcgMTEtNC42IDcuNS04LjIgMTEuOS0xNy4xIDEzLTE5LjguNi0xLjUgMS4zLTQuNS0uOS02LjgtMS44LTEuOC00LjctMi43LTguOC0yLjd6bTE4OS4yLTEwMS4yYy0yLjQgMTcuOS0xMyAzMy44LTI0LjYgNDMuNy0zLjEtMjIuNy0zLjctNTUuNS0zLjctNjIuNCAwLTE0LjcgOS41LTI0LjUgMTIuMi0yNi4xIDIuNS0xLjUgNS40LTMgOC4zLTQuNiAxOC05LjYgNDAuNC0yMS42IDQwLjQtNDMuNyAwLTE2LjItOS4zLTIzLjItMTUuNC0yNy44LS44LS42LTEuNS0xLjEtMi4yLTEuNy0yLjEtMS43LTMuNy0zLTQuMy00LjQtNC40LTkuOC0zLjYtMzQuMi0xLjctMzcuNi42LS42IDE2LjctMjAuOSAxMS44LTM5LjItMi03LjQtNi45LTEzLjMtMTQuMS0xNy01LjMtMi43LTExLjktNC4yLTE5LjUtNC41LS4xLTItLjUtMy45LS45LTUuOS0uNi0yLjYtMS4xLTUuMy0uOS04LjEuNC00LjcuOC05IDIuMi0xMS4zIDguNC0xMy4zIDI4LjgtMTcuNiAyOS0xNy42bDEyLjMtMi40LTguMS05LjVjLS4xLS4yLTE3LjMtMTcuNS00Ni4zLTE3LjUtNy45IDAtMTYgMS4zLTI0LjEgMy45LTI0LjIgNy44LTQyLjkgMzAuNS00OS40IDM5LjMtMy4xLTEtNi4zLTEuOS05LjYtMi43LTQuMi0xNS44IDktMzguNSA5LTM4LjVzLTEzLjYtMy0zMy43IDE1LjJjLTIuNi02LjUtOC4xLTIwLjUtMS44LTM3LjJDMTg0LjYgMTAuMSAxNzcuMiAyNiAxNzUgNDAuNGMtNy42LTUuNC02LjctMjMuMS03LjItMjcuNi03LjUuOS0yOS4yIDIxLjktMjguMiA0OC4zLTIgLjUtMy45IDEuMS01LjkgMS43LTYuNS04LjgtMjUuMS0zMS41LTQ5LjQtMzkuMy03LjktMi4yLTE2LTMuNS0yMy45LTMuNS0yOSAwLTQ2LjEgMTcuMy00Ni4zIDE3LjVMNiA0Ni45bDEyLjMgMi40Yy4yIDAgMjAuNiA0LjMgMjkgMTcuNiAxLjQgMi4yIDEuOCA2LjYgMi4yIDExLjMuMiAyLjgtLjQgNS41LS45IDguMS0uNCAxLjktLjggMy45LS45IDUuOS03LjcuMy0xNC4yIDEuOC0xOS41IDQuNS03LjIgMy43LTEyLjEgOS42LTE0LjEgMTctNSAxOC4yIDExLjIgMzguNSAxMS44IDM5LjIgMS45IDMuNCAyLjcgMjcuOC0xLjcgMzcuNi0uNiAxLjQtMi4yIDIuNy00LjMgNC40LS43LjUtMS40IDEuMS0yLjIgMS43LTYuMSA0LjYtMTUuNCAxMS43LTE1LjQgMjcuOCAwIDIyLjEgMjIuNCAzNC4xIDQwLjQgNDMuNyAzIDEuNiA1LjggMy4xIDguMyA0LjYgMi43IDEuNiAxMi4yIDExLjQgMTIuMiAyNi4xIDAgNi45LS42IDM5LjctMy43IDYyLjQtMTEuNi05LjktMjIuMi0yNS45LTI0LjYtNDMuOCAwIDAtMjkuMiAyMi42LTIwLjYgNzAuOCA1LjIgMjkuNSAyMy4yIDQ2LjEgNDcgNTQuNyA4LjggMTkuMSAyOS40IDQ1LjcgNjcuMyA0OS42QzE0MyA1MDQuMyAxNjMgNTEyIDE5Mi4yIDUxMmguMmMyOS4xIDAgNDkuMS03LjcgNjMuNi0xOS41IDM3LjktMy45IDU4LjUtMzAuNSA2Ny4zLTQ5LjYgMjMuOC04LjcgNDEuNy0yNS4yIDQ3LTU0LjcgOC4yLTQ4LjQtMjEuMS03MC45LTIxLjEtNzAuOXpNMzA1LjcgMzcuN2M1LjYtMS44IDExLjYtMi43IDE3LjctMi43IDExIDAgMTkuOSAzIDI0LjcgNS0zLjEgMS40LTYuNCAzLjItOS43IDUuMy0yLjQtLjQtNS42LS44LTkuMi0uOC0xMC41IDAtMjAuNSAzLjEtMjguNyA4LjktMTIuMyA4LjctMTggMTYuOS0yMC43IDIyLjQtMi4yLTEuMy00LjUtMi41LTcuMS0zLjctMS42LS44LTMuMS0xLjUtNC43LTIuMiA2LjEtOS4xIDE5LjktMjYuNSAzNy43LTMyLjJ6bTIxIDE4LjJjLS44IDEtMS42IDIuMS0yLjMgMy4yLTMuMyA1LjItMy45IDExLjYtNC40IDE3LjgtLjUgNi40LTEuMSAxMi41LTQuNCAxNy00LjIuOC04LjEgMS43LTExLjUgMi43LTIuMy0zLjEtNS42LTctMTAuNS0xMS4yIDEuNC00LjggNS41LTE2LjEgMTMuNS0yMi41IDUuNi00LjMgMTIuMi02LjcgMTkuNi03ek00NS42IDQ1LjNjLTMuMy0yLjItNi42LTQtOS43LTUuMyA0LjgtMiAxMy43LTUgMjQuNy01IDYuMSAwIDEyIC45IDE3LjcgMi43IDE3LjggNS44IDMxLjYgMjMuMiAzNy43IDMyLjEtMS42LjctMy4yIDEuNC00LjggMi4yLTIuNSAxLjItNC45IDIuNS03LjEgMy43LTIuNi01LjQtOC4zLTEzLjctMjAuNy0yMi40LTguMy01LjgtMTguMi04LjktMjguOC04LjktMy40LjEtNi42LjUtOSAuOXptNDQuNyA0MC4xYy00LjkgNC4yLTguMyA4LTEwLjUgMTEuMi0zLjQtLjktNy4zLTEuOS0xMS41LTIuN0M2NSA4OS41IDY0LjUgODMuNCA2NCA3N2MtLjUtNi4yLTEuMS0xMi42LTQuNC0xNy44LS43LTEuMS0xLjUtMi4yLTIuMy0zLjIgNy40LjMgMTQgMi42IDE5LjUgNyA4IDYuMyAxMi4xIDE3LjYgMTMuNSAyMi40ek01OC4xIDI1OS45Yy0yLjctMS42LTUuNi0zLjEtOC40LTQuNi0xNC45LTgtMzAuMi0xNi4zLTMwLjItMzAuNSAwLTExLjEgNC4zLTE0LjYgOC45LTE4LjJsLjUtLjRjLjctLjYgMS40LTEuMiAyLjItMS44LS45IDcuMi0xLjkgMTMuMy0yLjcgMTQuOSAwIDAgMTIuMS0xNSAxNS43LTQ0LjMgMS40LTExLjUtMS4xLTM0LjMtNS4xLTQzIC4yIDQuOSAwIDkuOC0uMyAxNC40LS40LS44LS44LTEuNi0xLjMtMi4yLTMuMi00LTExLjgtMTcuNS05LjQtMjYuNi45LTMuNSAzLjEtNiA2LjctNy44IDMuOC0xLjkgOC44LTIuOSAxNS4xLTIuOSAxMi4zIDAgMjUuOSAzLjcgMzIuOSA2IDI1LjEgOCA1NS40IDMwLjkgNjQuMSAzNy43LjIuMi40LjMuNC4zbDUuNiAzLjktMy41LTUuOGMtLjItLjMtMTkuMS0zMS40LTUzLjItNDYuNSAyLTIuOSA3LjQtOC4xIDIxLjYtMTUuMSAyMS40LTEwLjUgNDYuNS0xNS44IDc0LjMtMTUuOCAyNy45IDAgNTIuOSA1LjMgNzQuMyAxNS44IDE0LjIgNi45IDE5LjYgMTIuMiAyMS42IDE1LjEtMzQgMTUuMS01Mi45IDQ2LjItNTMuMSA0Ni41bC0zLjUgNS44IDUuNi0zLjlzLjItLjEuNC0uM2M4LjctNi44IDM5LTI5LjggNjQuMS0zNy43IDctMi4yIDIwLjYtNiAzMi45LTYgNi4zIDAgMTEuMyAxIDE1LjEgMi45IDMuNSAxLjggNS43IDQuNCA2LjcgNy44IDIuNSA5LjEtNi4xIDIyLjYtOS40IDI2LjYtLjUuNi0uOSAxLjMtMS4zIDIuMi0uMy00LjYtLjUtOS41LS4zLTE0LjQtNCA4LjgtNi41IDMxLjUtNS4xIDQzIDMuNiAyOS4zIDE1LjcgNDQuMyAxNS43IDQ0LjMtLjgtMS42LTEuOC03LjctMi43LTE0LjkuNy42IDEuNSAxLjIgMi4yIDEuOGwuNS40YzQuNiAzLjcgOC45IDcuMSA4LjkgMTguMiAwIDE0LjItMTUuNCAyMi41LTMwLjIgMzAuNS0yLjkgMS41LTUuNyAzLjEtOC40IDQuNi04LjcgNS0xOCAxNi43LTE5LjEgMzQuMi0uOSAxNC42LjkgNDkuOSAzLjQgNzUuOS0xMi40IDQuOC0yNi43IDYuNC0zOS43IDYuOC0yLTQuMS0zLjktOC41LTUuNS0xMy4xLS43LTItMTkuNi01MS4xLTI2LjQtNjIuMiA1LjUgMzkgMTcuNSA3My43IDIzLjUgODkuNi0zLjUtLjUtNy4zLS43LTExLjctLjdoLTExN2MtNC40IDAtOC4zLjMtMTEuNy43IDYtMTUuOSAxOC4xLTUwLjYgMjMuNS04OS42LTYuOCAxMS4yLTI1LjcgNjAuMy0yNi40IDYyLjItMS42IDQuNi0zLjUgOS01LjUgMTMuMS0xMy0uNC0yNy4yLTItMzkuNy02LjggMi41LTI2IDQuMy02MS4yIDMuNC03NS45LS45LTE3LjQtMTAuMy0yOS4yLTE5LTM0LjJ6TTM0LjggNDA0LjZjLTEyLjEtMjAtOC43LTU0LjEtMy43LTU5LjEgMTAuOSAzNC40IDQ3LjIgNDQuMyA3NC40IDQ1LjQtMi43IDQuMi01LjIgNy42LTcgMTBsLTEuNCAxLjRjLTcuMiA3LjgtOC42IDE4LjUtNC4xIDMxLjgtMjIuNy0uMS00Ni4zLTkuOC01OC4yLTI5LjV6bTQ1LjcgNDMuNWM2IDEuMSAxMi4yIDEuOSAxOC42IDIuNCAzLjUgOCA3LjQgMTUuOSAxMi4zIDIzLjEtMTQuNC01LjktMjQuNC0xNi0zMC45LTI1LjV6TTE5MiA0OTguMmMtNjAuNi0uMS03OC4zLTQ1LjgtODQuOS02NC43LTMuNy0xMC41LTMuNC0xOC4yLjktMjMuMSAyLjktMy4zIDkuNS03LjIgMjQuNi03LjJoMTE4LjhjMTUuMSAwIDIxLjggMy45IDI0LjYgNy4yIDQuMiA0LjggNC41IDEyLjYuOSAyMy4xLTYuNiAxOC44LTI0LjMgNjQuNi04NC45IDY0Ljd6bTgwLjYtMjQuNmM0LjktNy4yIDguOC0xNS4xIDEyLjMtMjMuMSA2LjQtLjUgMTIuNi0xLjMgMTguNi0yLjQtNi41IDkuNS0xNi41IDE5LjYtMzAuOSAyNS41em03Ni42LTY5Yy0xMiAxOS43LTM1LjYgMjkuMy01OC4xIDI5LjcgNC41LTEzLjMgMy4xLTI0LjEtNC4xLTMxLjgtLjQtLjUtLjktMS0xLjQtMS41LTEuOC0yLjQtNC4zLTUuOC03LTEwIDI3LjItMS4yIDYzLjUtMTEgNzQuNC00NS40IDUgNSA4LjQgMzkuMS0zLjggNTl6TTE5MS45IDE4Ny43aC4yYzEyLjctLjEgMjcuMi0xNy44IDI3LjItMTcuOC05LjkgNi0xOC44IDguMS0yNy4zIDguMy04LjUtLjItMTcuNC0yLjMtMjcuMy04LjMgMCAwIDE0LjUgMTcuNiAyNy4yIDE3Ljh6bTYxLjcgMjMwLjdoLTI5LjRjLTQuMiAwLTcuMi45LTguOSAyLjctMi4yIDIuMy0xLjUgNS4yLS45IDYuNyAxIDIuNiA1LjUgMTEuMyAxMyAxOS4zIDIuNyAyLjkgNi42IDQuNSAxMSA0LjVzOC43LTEuNiAxMS44LTQuMmMyLjMtMiAxMC4yLTkuMiAxMy43LTE4LjEgMS4zLTMuMyAxLTYtLjktNy45LTEuMy0xLjMtNC0yLjktOS40LTN6XCJdXG59O1xudmFyIGZhV2VlYmx5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dlZWJseScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjVjY1wiLCBcIk00MjUuMDkgNjUuODNjLTM5Ljg4IDAtNzMuMjggMjUuNzMtODMuNjYgNjQuMzMtMTguMTYtNTguMDYtNjUuNS02NC4zMy04NC45NS02NC4zMy0xOS43OCAwLTY2LjggNi4yOC04NS4yOCA2NC4zMy0xMC4zOC0zOC42LTQzLjQ1LTY0LjMzLTgzLjY2LTY0LjMzQzM4LjU5IDY1LjgzIDAgOTkuNzIgMCAxNDMuMDNjMCAyOC45NiA0LjE4IDMzLjI3IDc3LjE3IDIzMy40OCAyMi4zNyA2MC41NyA2Ny43NyA2OS4zNSA5Mi43NCA2OS4zNSAzOS4yMyAwIDcwLjA0LTE5LjQ2IDg1LjkzLTUzLjk4IDE1Ljg5IDM0LjgzIDQ2LjY5IDU0LjI5IDg1LjkzIDU0LjI5IDI0Ljk3IDAgNzAuMzYtOS4xIDkyLjc0LTY5LjY3IDc2LjU1LTIwOC42NSA3Ny41LTIwNS41OCA3Ny41LTIyNy4yLjYzLTQ4LjMyLTM2LjAxLTgzLjQ3LTg2LjkyLTgzLjQ3em0yNi4zNCAxMTQuODFsLTY1LjU3IDE3Ni40NGMtNy45MiAyMS40OS0yMS4yMiAzNy4yMi00Ni4yNCAzNy4yMi0yMy40NCAwLTM3LjM4LTEyLjQxLTQ0LjAzLTMzLjlsLTM5LjI4LTExNy40MmgtLjk1TDIxNi4wOCAzNjAuNGMtNi45NiAyMS41LTIwLjkgMzMuNi00NC4wMiAzMy42LTI1LjAyIDAtMzguMzMtMTUuNzQtNDYuMjQtMzcuMjJMNjAuODggMTgxLjU1Yy01LjM4LTE0LjgzLTcuOTItMjMuOTEtNy45Mi0zNC41IDAtMTYuMzQgMTUuODQtMjkuMzYgMzguMzMtMjkuMzYgMTguNjkgMCAzMS45OSAxMS44IDM2LjExIDI5LjA1bDQ0LjAzIDEzOS44MmguOTVsNDQuNjYtMTM2Ljc5YzYuMDItMTkuNjcgMTYuNDctMzIuMDggMzguOTYtMzIuMDhzMzIuOTQgMTIuMTEgMzguOTYgMzIuMDhsNDQuNjYgMTM2Ljc5aC45NWw0NC4wMy0xMzkuODJjNC4xMi0xNy4yNSAxNy40Mi0yOS4wNSAzNi4xMS0yOS4wNSAyMi4xNyAwIDM4LjMzIDEzLjMyIDM4LjMzIDM1LjcxLS4zMiA3Ljg3LTQuMTIgMTYuMDQtNy42MSAyNy4yNHpcIl1cbn07XG52YXIgZmFDb25uZWN0ZGV2ZWxvcCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjb25uZWN0ZGV2ZWxvcCcsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjIwZVwiLCBcIk01NTAuNSAyNDFsLTUwLjA4OS04Ni43ODZjMS4wNzEtMi4xNDIgMS44NzUtNC41NTMgMS44NzUtNy4yMzIgMC04LjAzNi02LjY5Ni0xNC43MzMtMTQuNzMyLTE1LjAwMWwtNTUuNDQ3LTk1Ljg5M2MuNTM2LTEuNjA3IDEuMDcxLTMuMjE0IDEuMDcxLTQuODIxIDAtOC41NzEtNi45NjQtMTUuMjY4LTE1LjI2OC0xNS4yNjgtNC44MjEgMC04LjgzOSAyLjE0My0xMS43ODYgNS42MjVIMjk5LjUxOEMyOTYuODM5IDE4LjE0MyAyOTIuODIxIDE2IDI4OCAxNnMtOC44MzkgMi4xNDMtMTEuNTE4IDUuNjI1SDE3MC40MTFDMTY3LjQ2NCAxOC4xNDMgMTYzLjQ0NyAxNiAxNTguNjI1IDE2Yy04LjMwMyAwLTE1LjI2OCA2LjY5Ni0xNS4yNjggMTUuMjY4IDAgMS42MDcuNTM2IDMuNDgyIDEuMDcyIDQuODIxbC01NS45ODMgOTcuMjMzYy01LjM1NiAyLjQxLTkuMTA3IDcuNS05LjEwNyAxMy42NjEgMCAuNTM1LjI2OCAxLjA3MS4yNjggMS42MDdsLTUzLjMwNCA5Mi4xNDNjLTcuMjMyIDEuMzM5LTEyLjU5IDcuNS0xMi41OSAxNSAwIDcuMjMyIDUuMDg5IDEzLjM5MyAxMi4wNTQgMTVsNTUuMTc5IDk1LjM1OGMtLjUzNiAxLjYwNy0uODA0IDIuOTQ2LS44MDQgNC44MjEgMCA3LjIzMiA1LjA4OSAxMy4zOTMgMTIuMDU0IDE0LjczMmw1MS42OTcgODkuNzMyYy0uNTM2IDEuNjA3LTEuMDcxIDMuNDgyLTEuMDcxIDUuMzU3IDAgOC41NzEgNi45NjQgMTUuMjY4IDE1LjI2OCAxNS4yNjggNC44MjEgMCA4LjgzOS0yLjE0MyAxMS41MTgtNS4zNTdoMTA2Ljg3NUMyNzkuMTYxIDQ5My44NTcgMjgzLjQ0NyA0OTYgMjg4IDQ5NnM4LjgzOS0yLjE0MyAxMS41MTgtNS4zNTdoMTA3LjE0M2MyLjY3OCAyLjk0NiA2LjY5NiA0LjgyMSAxMC45ODIgNC44MjEgOC41NzEgMCAxNS4yNjgtNi45NjQgMTUuMjY4LTE1LjI2OCAwLTEuNjA3LS4yNjctMi45NDYtLjgwMy00LjI4NWw1MS42OTctOTAuMjY4YzYuOTY0LTEuMzM5IDEyLjA1NC03LjUgMTIuMDU0LTE0LjczMiAwLTEuNjA3LS4yNjgtMy4yMTQtLjgwNC00LjgyMWw1NC45MTEtOTUuMzU4YzYuOTY0LTEuMzM5IDEyLjMyMi03LjUgMTIuMzIyLTE1LS4wMDItNy4yMzItNS4wOTItMTMuMzkzLTExLjc4OC0xNC43MzJ6TTE1My41MzUgNDUwLjczMmwtNDMuNjYtNzUuODAzaDQzLjY2djc1LjgwM3ptMC04My44MzloLTQzLjY2Yy0uMjY4LTEuMDcxLS44MDQtMi4xNDItMS4zMzktMy4yMTRsNDQuOTk5LTQ3LjQxdjUwLjYyNHptMC02Mi40MTFsLTUwLjM1NyA1My4zMDRjLTEuMzM5LS41MzYtMi42NzktMS4zNC00LjAxOC0xLjYwN0w0My40NDcgMjU5Ljc1Yy41MzUtMS4zMzkuNTM1LTIuNjc5LjUzNS00LjAxOHMwLTIuNDEtLjI2OC0zLjQ4Mmw1MS45NjUtOTBjMi42NzktLjI2OCA1LjM1Ny0xLjA3MiA3Ljc2OC0yLjY3OWw1MC4wODkgNTEuOTY1djkyLjk0NnptMC0xMDIuMzIybC00NS44MDMtNDcuNDFjMS4zMzktMi4xNDMgMi4xNDMtNC44MjEgMi4xNDMtNy43NjcgMC0uMjY4LS4yNjgtLjgwNC0uMjY4LTEuMDcybDQzLjkyOC0xNS44MDR2NzIuMDUzem0wLTgwLjYyNWwtNDMuNjYgMTUuODA0IDQzLjY2LTc1LjUzNnY1OS43MzJ6bTMyNi41MTkgMzkuMTA4bC44MDQgMS4zMzlMNDQ1LjUgMzI5LjEyNWwtNjMuNzUtNjcuMjMyIDk4LjAzNi0xMDEuNTE4LjI2OC4yNjh6TTI5MS43NSAzNTUuMTA3bDExLjUxOCAxMS43ODZIMjgwLjVsMTEuMjUtMTEuNzg2em0tLjI2OC0xMS4yNWwtODMuMzAzLTg1LjQ0NiA3OS41NTMtODQuMzc1IDgzLjAzNiA4Ny41ODktNzkuMjg2IDgyLjIzMnptNS4zNTcgNS44OTNsNzkuMjg2LTgyLjIzMiA2Ny41IDcxLjI1LTUuODkyIDI4LjEyNUgzMTMuNzE0bC0xNi44NzUtMTcuMTQzek00MTAuNDExIDQ0LjM5M2MxLjA3MS41MzYgMi4xNDIgMS4wNzIgMy40ODIgMS4zNGw1Ny44NTcgMTAwLjcxNHYuNTM2YzAgMi45NDYuODAzIDUuNjI0IDIuMTQzIDcuNzY3TDM3Ni4zOTMgMjU2bC04My4wMzUtODcuNTg5TDQxMC40MTEgNDQuMzkzem0tOS4xMDctMi4xNDNMMjg3LjczMiAxNjIuNTE4bC01Ny4wNTQtNjAuMjY4IDE2Ni4zMzktNjBoNC4yODd6bS0xMjMuNDgzIDBjMi42NzggMi42NzggNi4xNiA0LjI4NSAxMC4xNzkgNC4yODVzNy41LTEuNjA3IDEwLjE3OS00LjI4NWg3NUwyMjQuNzg2IDk1LjgyMSAxNzMuODkzIDQyLjI1aDEwMy45Mjh6bS0xMTYuMjQ5IDUuNjI1bDEuMDcxLTIuMTQyYTMzLjgzNCAzMy44MzQgMCAwIDAgMi42NzktLjgwNGw1MS4xNjEgNTMuODQtNTQuOTExIDE5LjgyMVY0Ny44NzV6bTAgNzkuMjg2bDYwLjgwMy0yMS45NjQgNTkuNzMyIDYzLjIxNC03OS41NTMgODQuMTA3LTQwLjk4Mi00Mi4wNTN2LTgzLjMwNHptMCA5Mi42NzhMMTk4IDI1Ny42MDdsLTM2LjQyOCAzOC4zMDR2LTc2LjA3MnptMCA4Ny44NThsNDIuMDUzLTQ0LjQ2NCA4Mi43NjggODUuOTgyLTE3LjE0MyAxNy42NzhIMTYxLjU3MnYtNTkuMTk2em02Ljk2NCAxNjIuMDUzYy0xLjYwNy0xLjYwNy0zLjQ4Mi0yLjY3OC01Ljg5My0zLjQ4MmwtMS4wNzEtMS42MDd2LTg5LjczMmg5OS45MWwtOTEuNjA3IDk0LjgyMWgtMS4zMzl6bTEyOS45MTEgMGMtMi42NzktMi40MS02LjQyOC00LjI4NS0xMC40NDctNC4yODVzLTcuNzY3IDEuODc1LTEwLjQ0NyA0LjI4NWgtOTYuNDI5bDkxLjYwNy05NC44MjFoMzguMzA0bDkxLjYwNyA5NC44MjFIMjk4LjQ0N3ptMTIwLTExLjc4NmwtNC4yODYgNy41Yy0xLjMzOS4yNjgtMi40MS44MDMtMy40ODIgMS4zMzlsLTg5LjE5Ni05MS44NzVoMTE0LjM3NmwtMTcuNDEyIDgzLjAzNnptMTIuODU2LTIyLjIzMmwxMi44NTgtNjAuODAzaDIxLjk2NGwtMzQuODIyIDYwLjgwM3ptMzQuODIyLTY4LjgzOWgtMjAuMzU3bDQuNTUzLTIxLjE2IDE3LjE0MyAxOC4yMTRjLS41MzUuODAzLTEuMDcxIDEuODc0LTEuMzM5IDIuOTQ2em02Ni4xNjEtMTA3LjQxMWwtNTUuNDQ3IDk2LjY5N2MtMS4zMzkuNTM1LTIuNjc5IDEuMDcxLTQuMDE4IDEuODc0bC0yMC42MjUtMjEuOTY0IDM0LjU1NC0xNjMuOTI4IDQ1LjgwMyA3OS4yODZjLS4yNjcgMS4zMzktLjgwMyAyLjY3OC0uODAzIDQuMjg1IDAgMS4zMzkuMjY4IDIuNDExLjUzNiAzLjc1elwiXVxufTtcbnZhciBmYUxlYW5wdWIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbGVhbnB1YicsXG4gIGljb246IFs1NzYsIDUxMiwgW10sIFwiZjIxMlwiLCBcIk0zODYuNTM5IDExMS40ODVsMTUuMDk2IDI0OC45NTUtMTAuOTc5LS4yNzVjLTM2LjIzMi0uODI0LTcxLjY0IDguNzgzLTEwMi42NTcgMjcuOTk3LTMxLjAxNi0xOS4yMTQtNjYuNDI0LTI3Ljk5Ny0xMDIuNjU3LTI3Ljk5Ny00NS41NjQgMC04Mi4wNyAxMC43MDUtMTIzLjUxNiAyNy43MjNMOTMuMTE3IDEyOS42YzI4LjU0Ni0xMS44MDMgNjEuNDg0LTE4LjExNSA5Mi4yMjYtMTguMTE1IDQxLjE3MyAwIDczLjgzNiAxMy4xNzUgMTAyLjY1NyA0Mi41NDQgMjcuNzIzLTI4LjI3MSA1OS4wMTMtNDEuNzIxIDk4LjUzOS00Mi41NDR6TTU2OS4wNyA0NDhjLTI1LjUyNiAwLTQ3LjQ4NS01LjIxNS03MC41NDItMTUuNjQ1LTM0LjMxLTE1LjY0NS02OS45OTMtMjQuOTc4LTEwNy44NzEtMjQuOTc4LTM4Ljk3NyAwLTc0LjkzNCAxMi45MDEtMTAyLjY1NyA0MC42MjMtMjcuNzIzLTI3LjcyMy02My42OC00MC42MjMtMTAyLjY1Ny00MC42MjMtMzcuODc4IDAtNzMuNTYxIDkuMzMzLTEwNy44NzEgMjQuOTc4QzU1LjIzOSA0NDIuMjM2IDMyLjczMSA0NDggOC4zMDMgNDQ4SDYuOTNMNDkuNDc1IDk4Ljg1OUM4OC43MjYgNzYuNjI2IDEzNi40ODYgNjQgMTgxLjc3NSA2NCAyMTguODMgNjQgMjU2Ljk4NCA3MS42ODUgMjg4IDkzLjA5NSAzMTkuMDE2IDcxLjY4NSAzNTcuMTcgNjQgMzk0LjIyNSA2NGM0NS4yODkgMCA5My4wNDkgMTIuNjI2IDEzMi4zIDM0Ljg1OUw1NjkuMDcgNDQ4em0tNDMuMzY4LTQ0Ljc0MWwtMzQuMDM2LTI4MC4yNDZjLTMwLjc0Mi0xMy45OTktNjcuMjQ4LTIxLjQxLTEwMS4wMDktMjEuNDEtMzguNDI4IDAtNzQuMzg1IDEyLjA3Ny0xMDIuNjU3IDM4LjcwMi0yOC4yNzItMjYuNjI1LTY0LjIyOC0zOC43MDItMTAyLjY1Ny0zOC43MDItMzMuNzYxIDAtNzAuMjY3IDcuNDExLTEwMS4wMDkgMjEuNDFMNTAuMjk4IDQwMy4yNTljNDcuMjExLTE5LjQ4NyA4Mi44OTQtMzMuNDg2IDEzNS4wNDUtMzMuNDg2IDM3LjYwNCAwIDcwLjgxNyA5LjYwNiAxMDIuNjU3IDI5LjY0NCAzMS44NC0yMC4wMzggNjUuMDUyLTI5LjY0NCAxMDIuNjU3LTI5LjY0NCA1Mi4xNTEgMCA4Ny44MzQgMTMuOTk5IDEzNS4wNDUgMzMuNDg2elwiXVxufTtcbnZhciBmYUJsYWNrVGllID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2JsYWNrLXRpZScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjI3ZVwiLCBcIk0wIDMydjQ0OGg0NDhWMzJIMHptMzE2LjUgMzI1LjJMMjI0IDQ0NS45bC05Mi41LTg4LjcgNjQuNS0xODQtNjQuNS04Ni42aDE4NC45TDI1MiAxNzMuMmw2NC41IDE4NHpcIl1cbn07XG52YXIgZmFUaGVtZWNvID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3RoZW1lY28nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY1YzZcIiwgXCJNMjAyLjkgOC40M2M5LjktNS43MyAyNi01LjgyIDM1Ljk1LS4yMUw0MzAgMTE1Ljg1YzEwIDUuNiAxOCAxOS40NCAxOCAzMC44NlYzNjRjMCAxMS40NC04LjA2IDI1LjI5LTE4IDMxTDIzOC44MSA1MDMuNzRjLTkuOTMgNS42Ni0yNiA1LjU3LTM1Ljg1LS4yMUwxNy44NiAzOTUuMTJDOCAzODkuMzQgMCAzNzUuMzggMCAzNjRWMTQ2LjcxYzAtMTEuNDQgOC0yNS4zNiAxNy45MS0zMS4wOHptLTc3LjQgMTk5LjgzYy0xNS45NCAwLTMxLjg5LjE0LTQ3LjgzLjE0djEwMS40NUg5Ni44VjI4MGgyOC43YzQ5LjcxIDAgNDkuNTYtNzEuNzQgMC03MS43NHptMTQwLjE0IDEwMC4yOWwtMzAuNzMtMzQuNjRjMzctNy41MSAzNC44LTY1LjIzLTEwLjg3LTY1LjUxLTE2LjA5IDAtMzIuMTctLjE0LTQ4LjI2LS4xNHYxMDEuNTloMTkuMTN2LTMzLjkxaDE4LjQxbDI5LjU2IDMzLjkxaDIyLjc2em0tNDEuNTktODIuMzJjMjMuMzQgMCAyMy4yNiAzMi40NiAwIDMyLjQ2aC0yOS4xM3YtMzIuNDZ6bS05NS41Ni0xLjZjMjEuMTggMCAyMS4xMSAzOC44NSAwIDM4Ljg1SDk2LjE4di0zOC44NHptMTkyLjY1LTE4LjI1Yy02OC40NiAwLTcxIDEwNS44IDAgMTA1LjggNjkuNDgtLjAxIDY5LjQxLTEwNS44IDAtMTA1Ljh6bTAgMTcuMzljNDQuMTIgMCA0NC44IDcwLjg2IDAgNzAuODZzLTQ0LjQzLTcwLjg2IDAtNzAuODZ6XCJdXG59O1xudmFyIGZhUHl0aG9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3B5dGhvbicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjNlMlwiLCBcIk00MzkuOCAyMDAuNWMtNy43LTMwLjktMjIuMy01NC4yLTUzLjQtNTQuMmgtNDAuMXY0Ny40YzAgMzYuOC0zMS4yIDY3LjgtNjYuOCA2Ny44SDE3Mi43Yy0yOS4yIDAtNTMuNCAyNS01My40IDU0LjN2MTAxLjhjMCAyOSAyNS4yIDQ2IDUzLjQgNTQuMyAzMy44IDkuOSA2Ni4zIDExLjcgMTA2LjggMCAyNi45LTcuOCA1My40LTIzLjUgNTMuNC01NC4zdi00MC43SDIyNi4ydi0xMy42aDE2MC4yYzMxLjEgMCA0Mi42LTIxLjcgNTMuNC01NC4yIDExLjItMzMuNSAxMC43LTY1LjcgMC0xMDguNnpNMjg2LjIgNDA0YzExLjEgMCAyMC4xIDkuMSAyMC4xIDIwLjMgMCAxMS4zLTkgMjAuNC0yMC4xIDIwLjQtMTEgMC0yMC4xLTkuMi0yMC4xLTIwLjQuMS0xMS4zIDkuMS0yMC4zIDIwLjEtMjAuM3pNMTY3LjggMjQ4LjFoMTA2LjhjMjkuNyAwIDUzLjQtMjQuNSA1My40LTU0LjNWOTEuOWMwLTI5LTI0LjQtNTAuNy01My40LTU1LjYtMzUuOC01LjktNzQuNy01LjYtMTA2LjguMS00NS4yIDgtNTMuNCAyNC43LTUzLjQgNTUuNnY0MC43aDEwNi45djEzLjZoLTE0N2MtMzEuMSAwLTU4LjMgMTguNy02Ni44IDU0LjItOS44IDQwLjctMTAuMiA2Ni4xIDAgMTA4LjYgNy42IDMxLjYgMjUuNyA1NC4yIDU2LjggNTQuMkgxMDF2LTQ4LjhjMC0zNS4zIDMwLjUtNjYuNCA2Ni44LTY2LjR6bS02LjctMTQyLjZjLTExLjEgMC0yMC4xLTkuMS0yMC4xLTIwLjMuMS0xMS4zIDktMjAuNCAyMC4xLTIwLjQgMTEgMCAyMC4xIDkuMiAyMC4xIDIwLjRzLTkgMjAuMy0yMC4xIDIwLjN6XCJdXG59O1xudmFyIGZhQW5kcm9pZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdhbmRyb2lkJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMTdiXCIsIFwiTTQyMC41NSwzMDEuOTNhMjQsMjQsMCwxLDEsMjQtMjQsMjQsMjQsMCwwLDEtMjQsMjRtLTI2NS4xLDBhMjQsMjQsMCwxLDEsMjQtMjQsMjQsMjQsMCwwLDEtMjQsMjRtMjczLjctMTQ0LjQ4LDQ3Ljk0LTgzYTEwLDEwLDAsMSwwLTE3LjI3LTEwaDBsLTQ4LjU0LDg0LjA3YTMwMS4yNSwzMDEuMjUsMCwwLDAtMjQ2LjU2LDBMMTE2LjE4LDY0LjQ1YTEwLDEwLDAsMSwwLTE3LjI3LDEwaDBsNDcuOTQsODNDNjQuNTMsMjAyLjIyLDguMjQsMjg1LjU1LDAsMzg0SDU3NmMtOC4yNC05OC40NS02NC41NC0xODEuNzgtMTQ2Ljg1LTIyNi41NVwiXVxufTtcbnZhciBmYUJvdHMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYm90cycsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZTM0MFwiLCBcIk04Ni4zNDQsMTk3LjgzNGE1MS43NjcsNTEuNzY3LDAsMCwwLTQxLjU3LDIwLjA1OFYxNTYuMDE4YTguMTksOC4xOSwwLDAsMC04LjE5LTguMTlIOC4xOUE4LjE5LDguMTksMCwwLDAsMCwxNTYuMDE4VjMzMy41NTFhOC4xODksOC4xODksMCwwLDAsOC4xOSw4LjE4OUgzNi41ODRhOC4xODksOC4xODksMCwwLDAsOC4xOS04LjE4OXYtOC4wODhjMTEuNjI4LDEzLjM3MywyNS44NzQsMTkuNzY5LDQxLjU3MywxOS43NjksMzQuNiwwLDYxLjkyMi0yNi4xNjQsNjEuOTIyLTczLjg0M0MxNDguMjY2LDIyNS40NTIsMTIxLjIyOSwxOTcuODM0LDg2LjM0NCwxOTcuODM0Wk03MS41MTYsMzA1LjY5MWMtOS41OTMsMC0yMS4yMjEtNC45NDItMjYuNzQ1LTEyLjVWMjUwLjE2NGM1LjUyOC03LjU1OCwxNy4xNTItMTIuNzkxLDI2Ljc0NS0xMi43OTEsMTcuNzM0LDAsMzEuMTA3LDEzLjA4MiwzMS4xMDcsMzQuMDEzQzEwMi42MjMsMjkyLjYwOSw4OS4yNSwzMDUuNjkxLDcxLjUxNiwzMDUuNjkxWm0xNTYuMzcyLTU5LjAzMmExNy40LDE3LjQsMCwxLDAsMTcuNCwxNy40QTE3LjQsMTcuNCwwLDAsMCwyMjcuODg4LDI0Ni42NTlaTTI3My45NTYsMTU2LjdWMTEyLjAzOWExMy4zMDgsMTMuMzA4LDAsMSwwLTEwLjIzNywwVjE1Ni43YTEwNy40OSwxMDcuNDksMCwxLDAsMTAuMjM3LDBabTg1Ljk5MywxMDcuMzY3YzAsMzAuNTMxLTQwLjc5Miw1NS4yODEtOTEuMTEyLDU1LjI4MXMtOTEuMTExLTI0Ljc1LTkxLjExMS01NS4yODEsNDAuNzkyLTU1LjI4MSw5MS4xMTEtNTUuMjgxUzM1OS45NDksMjMzLjUzMiwzNTkuOTQ5LDI2NC4wNjJabS01MC4xNjMsMTcuNGExNy40LDE3LjQsMCwxLDAtMTcuNC0xNy40aDBBMTcuNCwxNy40LDAsMCwwLDMwOS43ODYsMjgxLjQ2NlpNNTgwLjcsMjUwLjQ1NWMtMTQuODI4LTIuNjE3LTIyLjM4Ny0zLjc4LTIyLjM4Ny05Ljg4NSwwLTUuNTIzLDcuMjY4LTkuODg0LDE3LjczNS05Ljg4NGE2NS41Niw2NS41NiwwLDAsMSwzNC40ODQsMTAuMSw4LjE3MSw4LjE3MSwwLDAsMCwxMS4yODgtMi40NjhjLjA3LS4xMS4xMzgtLjIyMS4yLS4zMzNsOC42MTEtMTQuODg2YTguMiw4LjIsMCwwLDAtMi44NjctMTEuMTIzLDk5Ljg2Myw5OS44NjMsMCwwLDAtNTIuMDE0LTE0LjEzOGMtMzguOTU2LDAtNjAuMTc5LDIxLjUxNC02MC4xNzksNDYuMjI1LDAsMzYuMzQyLDMzLjcyNSw0MS44NjQsNTcuNTYzLDQ1LjY0MiwxMy4zNzMsMi4zMjYsMjQuMTMsNC4zNjEsMjQuMTMsMTEuMDQ4LDAsNi40LTUuNTIzLDEwLjc1Ny0xOC45LDEwLjc1Ny0xMy41NTIsMC0zMC45OTQtNi4yMjItNDIuNjIzLTEzLjU3OWE4LjIwNiw4LjIwNiwwLDAsMC0xMS4zMzUsMi40OTFjLS4wMzUuMDU0LS4wNjkuMTA4LS4xLjE2NGwtMTAuMiwxNi44OTFhOC4yMjIsOC4yMjIsMCwwLDAsMi40OTEsMTEuMDY2YzE1LjIyNCwxMC4zLDM3LjY2MywxNi42OTIsNTkuNDQxLDE2LjY5Miw0MC40MDksMCw2My45NTctMTkuNzY5LDYzLjk1Ny00Ni41MTVDNjQwLDI2MC42Myw2MDQuNTM3LDI1NC44MTYsNTgwLjcsMjUwLjQ1NVptLTk1LjkyOCw2MC43ODdhOC4yMTEsOC4yMTEsMCwwLDAtOS41MjEtNS45MzgsMjMuMTY4LDIzLjE2OCwwLDAsMS00LjE1NS4zODdjLTcuODQ5LDAtMTIuNS02LjEwNi0xMi41LTE0LjI0NVYyNDAuMjhoMjAuMzQ5YTguMTQzLDguMTQzLDAsMCwwLDguMTQxLTguMTQzVjIwOS40NjZhOC4xNDMsOC4xNDMsMCwwLDAtOC4xNDEtOC4xNDNINDU4LjU5NFYxNzEuMDkxYTguMTQzLDguMTQzLDAsMCwwLTguMTQzLTguMTQzSDQyMi4yNTdhOC4xNDMsOC4xNDMsMCwwLDAtOC4xNDMsOC4xNDNoMHYzMC4yMzJIMzk5YTguMTQzLDguMTQzLDAsMCwwLTguMTQzLDguMTQzaDB2MjIuNjcxQTguMTQzLDguMTQzLDAsMCwwLDM5OSwyNDAuMjhoMTUuMTE1djYzLjY2N2MwLDI3LjAzNywxNS40MDgsNDEuMjgyLDQzLjksNDEuMjgyLDEyLjE4MywwLDIxLjM4My0yLjIsMjcuNi01LjQ0NmE4LjE2MSw4LjE2MSwwLDAsMCw0LjE0NS05LjI3OFpcIl1cbn07XG52YXIgZmFGcmVlQ29kZUNhbXAgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZnJlZS1jb2RlLWNhbXAnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYyYzVcIiwgXCJNOTcuMjIsOTYuMjFjMTAuMzYtMTAuNjUsMTYtMTcuMTIsMTYtMjEuOSwwLTIuNzYtMS45Mi01LjUxLTMuODMtNy40MkExNC44MSwxNC44MSwwLDAsMCwxMDEsNjQuMDVjLTguNDgsMC0yMC45Miw4Ljc5LTM1Ljg0LDI1LjY5QzIzLjY4LDEzNywyLjUxLDE4Mi44MSwzLjM3LDI1MC4zNHMxNy40NywxMTcsNTQuMDYsMTYxLjg3Qzc2LjIyLDQzNS44Niw5MC42Miw0NDgsMTAwLjksNDQ4YTEzLjU1LDEzLjU1LDAsMCwwLDguMzctMy44NGMxLjkxLTIuNzYsMy44MS01LjYzLDMuODEtOC4zOCwwLTUuNjMtMy44Ni0xMi4yLTEzLjItMjAuNTUtNDQuNDUtNDIuMzMtNjcuMzItOTctNjcuNDgtMTY1QzMyLjI1LDE4OC44LDU0LDEzNy44Myw5Ny4yMiw5Ni4yMVpNMjM5LjQ3LDQyMC4wN2MuNTguMzcuOTEuNTUuOTEuNTVabTkzLjc5LjU1LjE3LS4xM0MzMzMuMjQsNDIwLjYyLDMzMy4xNyw0MjAuNjcsMzMzLjI2LDQyMC42MlptMy4xMy0xNTguMThjLTE2LjI0LTQuMTUsNTAuNDEtODIuODktNjguMDUtMTc3LjE3LDAsMCwxNS41NCw0OS4zOC02Mi44MywxNTkuNTctNzQuMjcsMTA0LjM1LDIzLjQ2LDE2OC43MywzNCwxNzUuMjMtNi43My00LjM1LTQ3LjQtMzUuNyw5LjU1LTEyOC42NCwxMS0xOC4zLDI1LjUzLTM0Ljg3LDQzLjUtNzIuMTYsMCwwLDE1LjkxLDIyLjQ1LDcuNiw3MS4xM0MyODcuNywzNjQsMzU0LDM0Mi45MSwzNTUsMzQzLjk0YzIyLjc1LDI2Ljc4LTE3LjcyLDczLjUxLTIxLjU4LDc2LjU1LDUuNDktMy42NSwxMTcuNzEtNzgsMzMtMTg4LjFDMzYwLjQzLDIzOC40LDM1Mi42MiwyNjYuNTksMzM2LjM5LDI2Mi40NFpNNTEwLjg4LDg5LjY5QzQ5Niw3Mi43OSw0ODMuNTIsNjQsNDc1LDY0YTE0LjgxLDE0LjgxLDAsMCwwLTguMzksMi44NGMtMS45MSwxLjkxLTMuODMsNC42Ni0zLjgzLDcuNDIsMCw0Ljc4LDUuNiwxMS4yNiwxNiwyMS45LDQzLjIzLDQxLjYxLDY1LDkyLjU5LDY0LjgyLDE1NC4wNi0uMTYsNjgtMjMsMTIyLjYzLTY3LjQ4LDE2NS05LjM0LDguMzUtMTMuMTgsMTQuOTItMTMuMiwyMC41NSwwLDIuNzUsMS45LDUuNjIsMy44MSw4LjM4QTEzLjYxLDEzLjYxLDAsMCwwLDQ3NS4xLDQ0OGMxMC4yOCwwLDI0LjY4LTEyLjEzLDQzLjQ3LTM1Ljc5LDM2LjU5LTQ0Ljg1LDUzLjE0LTk0LjM4LDU0LjA2LTE2MS44N1M1NTIuMzIsMTM3LDUxMC44OCw4OS42OVpcIl1cbn07XG52YXIgZmFIb3JuYmlsbCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdob3JuYmlsbCcsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjU5MlwiLCBcIk03Ni4zOCAzNzAuM2EzNy44IDM3LjggMCAxIDEtMzIuMDctMzIuNDJjLTc4LjI4LTExMS4zNSA1Mi0xOTAuNTMgNTItMTkwLjUzLTUuODYgNDMtOC4yNCA5MS4xNi04LjI0IDkxLjE2LTY3LjMxIDQxLjQ5LjkzIDY0LjA2IDM5LjgxIDcyLjg3YTE0MC4zOCAxNDAuMzggMCAwIDAgMTMxLjY2IDkxLjk0YzEuOTIgMCAzLjc3LS4yMSA1LjY3LS4yOGwuMTEgMTguODZjLTk5LjIyIDEuMzktMTU4LjctMjkuMTQtMTg4Ljk0LTUxLjZ6bTEwOC0zMjcuN0EzNy41NyAzNy41NyAwIDAgMCAxODEgMjEuNDVhMzcuOTUgMzcuOTUgMCAxIDAtMzEuMTcgNTQuMjJjLTIyLjU1IDI5LjkxLTUzLjgzIDg5LjU3LTUyLjQyIDE5MGwyMS44NC0uMTVjMC0uOS0uMTQtMS43Ny0uMTQtMi42OEExNDAuNDIgMTQwLjQyIDAgMCAxIDIwNyAxMzIuNzFjOC0zNy43MSAzMC43LTExNC4zIDczLjgtNDQuMjkgMCAwIDQ4LjE0IDIuMzggOTEuMTggOC4yNCAwIDAtNzcuODQtMTI4LTE4Ny41OS01NC4wNnptMzA0LjE5IDEzNC4xN2EzNy45NCAzNy45NCAwIDEgMC01My44NC0yOC43QzQwMyAxMjYuMTMgMzQ0Ljg5IDk5IDI1MS4yOCAxMDAuMzNsLjE0IDIyLjVjMi43LS4xNSA1LjM5LS40MSA4LjE0LS40MWExNDAuMzcgMTQwLjM3IDAgMCAxIDEzMC40OSA4OC43NmMzOS4xIDkgMTA1LjA2IDMxLjU4IDM4LjQ2IDcyLjU0IDAgMC0yLjM0IDQ4LjEzLTguMjEgOTEuMTYgMCAwIDEzMy40NS04MS4xNiA0OS0xOTQuNjFhMzcuNDUgMzcuNDUgMCAwIDAgMTkuMzEtMy41ek0zNzQuMDYgNDM2LjI0YzIxLjQzLTMyLjQ2IDQ2LjQyLTg5LjY5IDQ1LjE0LTE3OS42NmwtMTkuNTIuMTRjLjA4IDIuMDYuMyA0LjA3LjMgNi4xNWExNDAuMzQgMTQwLjM0IDAgMCAxLTkxLjM5IDEzMS40NWMtOC44NSAzOC45NS0zMS40NCAxMDYuNjYtNzIuNzcgMzkuNDkgMCAwLTQ4LjEyLTIuMzQtOTEuMTktOC4yMiAwIDAgNzkuOTIgMTMxLjM0IDE5MS45IDUxYTM3LjUgMzcuNSAwIDAgMCAzLjY0IDE0IDM3LjkzIDM3LjkzIDAgMSAwIDMzLjg5LTU0LjI5elwiXVxufTtcbnZhciBmYUpzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2pzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2I4XCIsIFwiTTAgMzJ2NDQ4aDQ0OFYzMkgwem0yNDMuOCAzNDkuNGMwIDQzLjYtMjUuNiA2My41LTYyLjkgNjMuNS0zMy43IDAtNTMuMi0xNy40LTYzLjItMzguNWwzNC4zLTIwLjdjNi42IDExLjcgMTIuNiAyMS42IDI3LjEgMjEuNiAxMy44IDAgMjIuNi01LjQgMjIuNi0yNi41VjIzNy43aDQyLjF2MTQzLjd6bTk5LjYgNjMuNWMtMzkuMSAwLTY0LjQtMTguNi03Ni43LTQzbDM0LjMtMTkuOGM5IDE0LjcgMjAuOCAyNS42IDQxLjUgMjUuNiAxNy40IDAgMjguNi04LjcgMjguNi0yMC44IDAtMTQuNC0xMS40LTE5LjUtMzAuNy0yOGwtMTAuNS00LjVjLTMwLjQtMTIuOS01MC41LTI5LjItNTAuNS02My41IDAtMzEuNiAyNC4xLTU1LjYgNjEuNi01NS42IDI2LjggMCA0NiA5LjMgNTkuOCAzMy43TDM2OCAyOTBjLTcuMi0xMi45LTE1LTE4LTI3LjEtMTgtMTIuMyAwLTIwLjEgNy44LTIwLjEgMTggMCAxMi42IDcuOCAxNy43IDI1LjkgMjUuNmwxMC41IDQuNWMzNS44IDE1LjMgNTUuOSAzMSA1NS45IDY2LjIgMCAzNy44LTI5LjggNTguNi02OS43IDU4LjZ6XCJdXG59O1xudmFyIGZhSWRlYWwgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnaWRlYWwnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImUwMTNcIiwgXCJNMTI1LjYxLDE2NS40OGE0OS4wNyw0OS4wNywwLDEsMCw0OS4wNiw0OS4wNkE0OS4wOCw0OS4wOCwwLDAsMCwxMjUuNjEsMTY1LjQ4Wk04Ni4xNSw0MjUuODRoNzguOTRWMjg1LjMySDg2LjE1Wm0xNTEuNDYtMjExLjZjMC0yMC0xMC0yMi41My0xOC43NC0yMi41M0gyMDQuODJWMjM3LjVoMTQuMDVDMjI4LjYyLDIzNy41LDIzNy42MSwyMzQuNjksMjM3LjYxLDIxNC4yNFptMjAxLjY5LDQ2VjE2OC45M2gyMi43NVYyMzcuNWgzMy42OUM0ODYuNSwxMTMuMDgsMzg4LjYxLDg2LjE5LDI5OS42Nyw4Ni4xOUgyMDQuODRWMTY5aDE0YzI1LjYsMCw0MS41LDE3LjM1LDQxLjUsNDUuMjYsMCwyOC44MS0xNS41Miw0Ni00MS41LDQ2aC0xNFY0MjUuODhoOTQuODNjMTQ0LjYxLDAsMTk0Ljk0LTY3LjE2LDE5Ni43Mi0xNjUuNjRabS0xMDkuNzUsMEgyNzMuM1YxNjloNTQuNDN2MjIuNzNIMjk2djEwLjU4aDMwVjIyNUgyOTZWMjM3LjVoMzMuNTFabTc0LjY2LDAtNS4xNi0xNy42N0gzNjkuMzFsLTUuMTgsMTcuNjdIMzQwLjQ3TDM2OCwxNjguOTJoMzIuMzVsMjcuNTMsOTEuMzRaTTI5OS42NSwzMkgzMlY0ODBIMjk5LjY1YzE2MS44NSwwLDI1MS03OS43MywyNTEtMjI0LjUyQzU1MC42MiwxNzIsNTE4LDMyLDI5OS42NSwzMlptMCw0MjYuOTJINTMuMDdWNTMuMDdIMjk5LjY1YzE0Mi4xLDAsMjI5LjksNjQuNjEsMjI5LjksMjAyLjQxQzUyOS41NSwzODkuNTcsNDQ4LjU1LDQ1OC45MiwyOTkuNjUsNDU4LjkyWm04My44Ni0yNjQuODVMMzc2LDIxOS44OEgzOTIuNGwtNy41Mi0yNS44MVpcIl1cbn07XG52YXIgZmFHaXQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZ2l0JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMWQzXCIsIFwiTTIxNi4yOSAxNTguMzlIMTM3Qzk3IDE0Ny45IDYuNTEgMTUwLjYzIDYuNTEgMjMzLjE4YzAgMzAuMDkgMTUgNTEuMjMgMzUgNjEtMjUuMSAyMy0zNyAzMy44NS0zNyA0OS4yMSAwIDExIDQuNDcgMjEuMTQgMTcuODkgMjYuODFDOC4xMyAzODMuNjEgMCAzOTMuMzUgMCA0MTEuNjVjMCAzMi4xMSAyOC4wNSA1MC44MiAxMDEuNjMgNTAuODIgNzAuNzUgMCAxMTEuNzktMjYuNDIgMTExLjc5LTczLjE4IDAtNTguNjYtNDUuMTYtNTYuNS0xNTEuNjMtNjNsMTMuNDMtMjEuNTVjMjcuMjcgNy41OCAxMTguNyAxMCAxMTguNy02Ny44OSAwLTE4LjctNy43My0zMS43MS0xNS00MS4wN2wzNy40MS0yLjg0em0tNjMuNDIgMjQxLjljMCAzMi4wNi0xMDQuODkgMzIuMS0xMDQuODkgMi40MyAwLTguMTQgNS4yNy0xNSAxMC41Ny0yMS41NCA3Ny43MSA1LjMgOTQuMzIgMy4zNyA5NC4zMiAxOS4xMXptLTUwLjgxLTEzNC41OGMtNTIuOCAwLTUwLjQ2LTcxLjE2IDEuMi03MS4xNiA0OS41NCAwIDUwLjgyIDcxLjE2LTEuMiA3MS4xNnptMTMzLjMgMTAwLjUxdi0zMi4xYzI2Ljc1LTMuNjYgMjcuMjQtMiAyNy4yNC0xMVYyMDMuNjFjMC04LjUtMi4wNS03LjM4LTI3LjI0LTE2LjI2bDQuNDctMzIuOTJIMzI0djE2OC43MWMwIDYuNTEuNCA3LjMyIDYuNTEgOC4xNGwyMC43MyAyLjg0djMyLjF6bTUyLjQ1LTI0NC4zMWMtMjMuMTcgMC0zNi41OS0xMy40My0zNi41OS0zNi42MXMxMy40Mi0zNS43NyAzNi41OS0zNS43N2MyMy41OCAwIDM3IDEyLjYyIDM3IDM1Ljc3cy0xMy40MiAzNi42MS0zNyAzNi42MXpNNTEyIDM1MC40NmMtMTcuNDkgOC41My00My4xIDE2LjI2LTY2LjI4IDE2LjI2LTQ4LjM4IDAtNjYuNjctMTkuNS02Ni42Ny02NS40NlYxOTQuNzVjMC01LjQyIDEuMDUtNC4wNi0zMS43MS00LjA2VjE1NC41YzM1Ljc4LTQuMDcgNTAtMjIgNTQuNDctNjYuMjdoMzguNjNjMCA2NS44My0xLjM0IDYxLjgxIDMuMjYgNjEuODFINTAxdjQwLjY1aC02MC41NnY5Ny4xNWMwIDYuOTItNC45MiA1MS40MSA2MC41NyAyNi44NHpcIl1cbn07XG52YXIgZmFEZXYgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGV2JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNmNjXCIsIFwiTTEyMC4xMiAyMDguMjljLTMuODgtMi45LTcuNzctNC4zNS0xMS42NS00LjM1SDkxLjAzdjEwNC40N2gxNy40NWMzLjg4IDAgNy43Ny0xLjQ1IDExLjY1LTQuMzUgMy44OC0yLjkgNS44Mi03LjI1IDUuODItMTMuMDZ2LTY5LjY1Yy0uMDEtNS44LTEuOTYtMTAuMTYtNS44My0xMy4wNnpNNDA0LjEgMzJINDMuOUMxOS43IDMyIC4wNiA1MS41OSAwIDc1Ljh2MzYwLjRDLjA2IDQ2MC40MSAxOS43IDQ4MCA0My45IDQ4MGgzNjAuMmMyNC4yMSAwIDQzLjg0LTE5LjU5IDQzLjktNDMuOFY3NS44Yy0uMDYtMjQuMjEtMTkuNy00My44LTQzLjktNDMuOHpNMTU0LjIgMjkxLjE5YzAgMTguODEtMTEuNjEgNDcuMzEtNDguMzYgNDcuMjVoLTQ2LjRWMTcyLjk4aDQ3LjM4YzM1LjQ0IDAgNDcuMzYgMjguNDYgNDcuMzcgNDcuMjhsLjAxIDcwLjkzem0xMDAuNjgtODguNjZIMjAxLjZ2MzguNDJoMzIuNTd2MjkuNTdIMjAxLjZ2MzguNDFoNTMuMjl2MjkuNTdoLTYyLjE4Yy0xMS4xNi4yOS0yMC40NC04LjUzLTIwLjcyLTE5LjY5VjE5My43Yy0uMjctMTEuMTUgOC41Ni0yMC40MSAxOS43MS0yMC42OWg2My4xOWwtLjAxIDI5LjUyem0xMDMuNjQgMTE1LjI5Yy0xMy4yIDMwLjc1LTM2Ljg1IDI0LjYzLTQ3LjQ0IDBsLTM4LjUzLTE0NC44aDMyLjU3bDI5LjcxIDExMy43MiAyOS41Ny0xMTMuNzJoMzIuNThsLTM4LjQ2IDE0NC44elwiXVxufTtcbnZhciBmYVNrZXRjaCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdza2V0Y2gnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY3YzZcIiwgXCJNMjcuNSAxNjIuMkw5IDE4Ny4xaDkwLjVsNi45LTEzMC43LTc4LjkgMTA1Ljh6TTM5Ni4zIDQ1LjdMMjY3LjcgMzJsMTM1LjcgMTQ3LjItNy4xLTEzMy41ek0xMTIuMiAyMTguM2wtMTEuMi0yMkg5LjlMMjM0LjggNDU4em0yLTMxLjJoMjg0bC04MS41LTg4LjVMMjU2LjMgMzN6bTI5Ny4zIDkuMUwyNzcuNiA0NThsMjI0LjgtMjYxLjdoLTkwLjl6TTQxNS40IDY5TDQwNiA1Ni40bC45IDE3LjMgNi4xIDExMy40aDkwLjN6TTExMy41IDkzLjVsLTQuNiA4NS42TDI0NC43IDMyIDExNi4xIDQ1Ljd6bTI4Ny43IDEwMi43aC0yOTBsNDIuNCA4Mi45TDI1Ni4zIDQ4MGwxNDQuOS0yODMuOHpcIl1cbn07XG52YXIgZmFZYW5kZXhJbnRlcm5hdGlvbmFsID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3lhbmRleC1pbnRlcm5hdGlvbmFsJyxcbiAgaWNvbjogWzMyMCwgNTEyLCBbXSwgXCJmNDE0XCIsIFwiTTEyOS41IDUxMlYzNDUuOUwxOC41IDQ4aDU1LjhsODEuOCAyMjkuN0wyNTAuMiAwaDUxLjNMMTgwLjggMzQ3LjhWNTEyaC01MS4zelwiXVxufTtcbnZhciBmYUNjQW1leCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjYy1hbWV4JyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmMWYzXCIsIFwiTTAgNDMyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4SDUyOGMyNi41IDAgNDgtMjEuNSA0OC00OHYtMS4xSDUxNC4zbC0zMS45LTM1LjEtMzEuOSAzNS4xSDI0Ni44VjI2Ny4xSDE4MUwyNjIuNyA4Mi40aDc4LjZsMjguMSA2My4yVjgyLjRoOTcuMkw0ODMuNSAxMzBsMTctNDcuNkg1NzZWODBjMC0yNi41LTIxLjUtNDgtNDgtNDhINDhDMjEuNSAzMiAwIDUzLjUgMCA4MFY0MzJ6bTQ0MC40LTIxLjdMNDgyLjYgMzY0bDQyIDQ2LjNINTc2bC02OC03Mi4xIDY4LTcyLjFINTI1LjRsLTQyIDQ2LjctNDEuNS00Ni43SDM5MC41TDQ1OCAzMzguNmwtNjcuNCA3MS42VjM3Ny4xaC04M1YzNTQuOWg4MC45VjMyMi42SDMwNy42VjMwMC4yaDgzVjI2Ny4xaC0xMjJWNDEwLjNINDQwLjR6bTk2LjMtNzJMNTc2IDM4MC4yVjI5Ni45bC0zOS4zIDQxLjR6bS0zNi4zLTkybDM2LjktMTAwLjZWMjQ2LjNINTc2VjEwM0g1MTUuOGwtMzIuMiA4OS4zTDQ1MS43IDEwM0gzOTAuNVYyNDYuMUwzMjcuMyAxMDNIMjc2LjFMMjEzLjcgMjQ2LjNoNDNsMTEuOS0yOC43aDY1LjlsMTIgMjguN2g4Mi43VjE0Nkw0NjYgMjQ2LjNoMzQuNHpNMjgyIDE4NS40bDE5LjUtNDYuOSAxOS40IDQ2LjlIMjgyelwiXVxufTtcbnZhciBmYVViZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndWJlcicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjQwMlwiLCBcIk00MTQuMSAzMkgzMy45QzE1LjIgMzIgMCA0Ny4yIDAgNjUuOVY0NDZjMCAxOC44IDE1LjIgMzQgMzMuOSAzNEg0MTRjMTguNyAwIDMzLjktMTUuMiAzMy45LTMzLjlWNjUuOUM0NDggNDcuMiA0MzIuOCAzMiA0MTQuMSAzMnpNMjM3LjYgMzkxLjFDMTYzIDM5OC42IDk2LjQgMzQ0LjIgODguOSAyNjkuNmg5NC40VjI5MGMwIDMuNyAzIDYuOCA2LjggNi44SDI1OGMzLjcgMCA2LjgtMyA2LjgtNi44di02Ny45YzAtMy43LTMtNi44LTYuOC02LjhoLTY3LjljLTMuNyAwLTYuOCAzLTYuOCA2Ljh2MjAuNEg4OC45YzctNjkuNCA2NS40LTEyMi4yIDEzNS4xLTEyMi4yIDY5LjcgMCAxMjguMSA1Mi44IDEzNS4xIDEyMi4yIDcuNSA3NC41LTQ2LjkgMTQxLjEtMTIxLjUgMTQ4LjZ6XCJdXG59O1xudmFyIGZhR2l0aHViID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dpdGh1YicsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjA5YlwiLCBcIk0xNjUuOSAzOTcuNGMwIDItMi4zIDMuNi01LjIgMy42LTMuMy4zLTUuNi0xLjMtNS42LTMuNiAwLTIgMi4zLTMuNiA1LjItMy42IDMtLjMgNS42IDEuMyA1LjYgMy42em0tMzEuMS00LjVjLS43IDIgMS4zIDQuMyA0LjMgNC45IDIuNiAxIDUuNiAwIDYuMi0ycy0xLjMtNC4zLTQuMy01LjJjLTIuNi0uNy01LjUuMy02LjIgMi4zem00NC4yLTEuN2MtMi45LjctNC45IDIuNi00LjYgNC45LjMgMiAyLjkgMy4zIDUuOSAyLjYgMi45LS43IDQuOS0yLjYgNC42LTQuNi0uMy0xLjktMy0zLjItNS45LTIuOXpNMjQ0LjggOEMxMDYuMSA4IDAgMTEzLjMgMCAyNTJjMCAxMTAuOSA2OS44IDIwNS44IDE2OS41IDIzOS4yIDEyLjggMi4zIDE3LjMtNS42IDE3LjMtMTIuMSAwLTYuMi0uMy00MC40LS4zLTYxLjQgMCAwLTcwIDE1LTg0LjctMjkuOCAwIDAtMTEuNC0yOS4xLTI3LjgtMzYuNiAwIDAtMjIuOS0xNS43IDEuNi0xNS40IDAgMCAyNC45IDIgMzguNiAyNS44IDIxLjkgMzguNiA1OC42IDI3LjUgNzIuOSAyMC45IDIuMy0xNiA4LjgtMjcuMSAxNi0zMy43LTU1LjktNi4yLTExMi4zLTE0LjMtMTEyLjMtMTEwLjUgMC0yNy41IDcuNi00MS4zIDIzLjYtNTguOS0yLjYtNi41LTExLjEtMzMuMyAyLjYtNjcuOSAyMC45LTYuNSA2OSAyNyA2OSAyNyAyMC01LjYgNDEuNS04LjUgNjIuOC04LjVzNDIuOCAyLjkgNjIuOCA4LjVjMCAwIDQ4LjEtMzMuNiA2OS0yNyAxMy43IDM0LjcgNS4yIDYxLjQgMi42IDY3LjkgMTYgMTcuNyAyNS44IDMxLjUgMjUuOCA1OC45IDAgOTYuNS01OC45IDEwNC4yLTExNC44IDExMC41IDkuMiA3LjkgMTcgMjIuOSAxNyA0Ni40IDAgMzMuNy0uMyA3NS40LS4zIDgzLjYgMCA2LjUgNC42IDE0LjQgMTcuMyAxMi4xQzQyOC4yIDQ1Ny44IDQ5NiAzNjIuOSA0OTYgMjUyIDQ5NiAxMTMuMyAzODMuNSA4IDI0NC44IDh6TTk3LjIgMzUyLjljLTEuMyAxLTEgMy4zLjcgNS4yIDEuNiAxLjYgMy45IDIuMyA1LjIgMSAxLjMtMSAxLTMuMy0uNy01LjItMS42LTEuNi0zLjktMi4zLTUuMi0xem0tMTAuOC04LjFjLS43IDEuMy4zIDIuOSAyLjMgMy45IDEuNiAxIDMuNi43IDQuMy0uNy43LTEuMy0uMy0yLjktMi4zLTMuOS0yLS42LTMuNi0uMy00LjMuN3ptMzIuNCAzNS42Yy0xLjYgMS4zLTEgNC4zIDEuMyA2LjIgMi4zIDIuMyA1LjIgMi42IDYuNSAxIDEuMy0xLjMuNy00LjMtMS4zLTYuMi0yLjItMi4zLTUuMi0yLjYtNi41LTF6bS0xMS40LTE0LjdjLTEuNiAxLTEuNiAzLjYgMCA1LjkgMS42IDIuMyA0LjMgMy4zIDUuNiAyLjMgMS42LTEuMyAxLjYtMy45IDAtNi4yLTEuNC0yLjMtNC0zLjMtNS42LTJ6XCJdXG59O1xudmFyIGZhUGhwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BocCcsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjQ1N1wiLCBcIk0zMjAgMTA0LjVjMTcxLjQgMCAzMDMuMiA3Mi4yIDMwMy4yIDE1MS41UzQ5MS4zIDQwNy41IDMyMCA0MDcuNWMtMTcxLjQgMC0zMDMuMi03Mi4yLTMwMy4yLTE1MS41UzE0OC43IDEwNC41IDMyMCAxMDQuNW0wLTE2LjhDMTQzLjMgODcuNyAwIDE2MyAwIDI1NnMxNDMuMyAxNjguMyAzMjAgMTY4LjNTNjQwIDM0OSA2NDAgMjU2IDQ5Ni43IDg3LjcgMzIwIDg3Ljd6TTIxOC4yIDI0Mi41Yy03LjkgNDAuNS0zNS44IDM2LjMtNzAuMSAzNi4zbDEzLjctNzAuNmMzOCAwIDYzLjgtNC4xIDU2LjQgMzQuM3pNOTcuNCAzNTAuM2gzNi43bDguNy00NC44YzQxLjEgMCA2Ni42IDMgOTAuMi0xOS4xIDI2LjEtMjQgMzIuOS02Ni43IDE0LjMtODguMS05LjctMTEuMi0yNS4zLTE2LjctNDYuNS0xNi43aC03MC43TDk3LjQgMzUwLjN6bTE4NS43LTIxMy42aDM2LjVsLTguNyA0NC44YzMxLjUgMCA2MC43LTIuMyA3NC44IDEwLjcgMTQuOCAxMy42IDcuNyAzMS04LjMgMTEzLjFoLTM3YzE1LjQtNzkuNCAxOC4zLTg2IDEyLjctOTItNS40LTUuOC0xNy43LTQuNi00Ny40LTQuNmwtMTguOCA5Ni42aC0zNi41bDMyLjctMTY4LjZ6TTUwNSAyNDIuNWMtOCA0MS4xLTM2LjcgMzYuMy03MC4xIDM2LjNsMTMuNy03MC42YzM4LjIgMCA2My44LTQuMSA1Ni40IDM0LjN6TTM4NC4yIDM1MC4zSDQyMWw4LjctNDQuOGM0My4yIDAgNjcuMSAyLjUgOTAuMi0xOS4xIDI2LjEtMjQgMzIuOS02Ni43IDE0LjMtODguMS05LjctMTEuMi0yNS4zLTE2LjctNDYuNS0xNi43SDQxN2wtMzIuOCAxNjguN3pcIl1cbn07XG52YXIgZmFBbGlwYXkgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYWxpcGF5JyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNjQyXCIsIFwiTTM3Ny43NCAzMkg3MC4yNkMzMS40MSAzMiAwIDYzLjQxIDAgMTAyLjI2djMwNy40OEMwIDQ0OC41OSAzMS40MSA0ODAgNzAuMjYgNDgwaDMwNy40OGMzOC41MiAwIDY5Ljc2LTMxLjA4IDcwLjI2LTY5LjYtNDUuOTYtMjUuNjItMTEwLjU5LTYwLjM0LTE3MS42LTg4LjQ0LTMyLjA3IDQzLjk3LTg0LjE0IDgxLTE0OC42MiA4MS03MC41OSAwLTkzLjczLTQ1LjMtOTcuMDQtNzYuMzctMy45Ny0zOS4wMSAxNC44OC04MS41IDk5LjUyLTgxLjUgMzUuMzggMCA3OS4zNSAxMC4yNSAxMjcuMTMgMjQuOTYgMTYuNTMtMzAuMDkgMjYuNDUtNjAuMzQgMjYuNDUtNjAuMzRoLTE3OC4ydi0xNi43aDkyLjA4di0zMS4yNEg4OC4yOHYtMTkuMDFoMTA5LjQ0VjkyLjM0aDUwLjkydjUwLjQyaDEwOS40NHYxOS4wMUgyNDguNjN2MzEuMjRoODguNzdzLTE1LjIxIDQ2LjYyLTM4LjM1IDkwLjkyYzQ4LjkzIDE2LjcgMTAwLjAxIDM2LjA0IDE0OC42MiA1Mi43NFYxMDIuMjZDNDQ3LjgzIDYzLjU3IDQxNi40MyAzMiAzNzcuNzQgMzJ6TTQ3LjI4IDMyMi45NWMuOTkgMjAuMTcgMTAuMjUgNTMuNzMgNjkuOTMgNTMuNzMgNTIuMDcgMCA5Mi41OC0zOS42OCAxMTcuODctNzIuOS00NC42My0xOC42OC04NC40OC0zMS40MS0xMDkuNDQtMzEuNDEtNjcuNDUgMC03OS4zNSAzMy4wNi03OC4zNiA1MC41OHpcIl1cbn07XG52YXIgZmFZb3V0dWJlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3lvdXR1YmUnLFxuICBpY29uOiBbNTc2LCA1MTIsIFs2MTgwMl0sIFwiZjE2N1wiLCBcIk01NDkuNjU1IDEyNC4wODNjLTYuMjgxLTIzLjY1LTI0Ljc4Ny00Mi4yNzYtNDguMjg0LTQ4LjU5N0M0NTguNzgxIDY0IDI4OCA2NCAyODggNjRTMTE3LjIyIDY0IDc0LjYyOSA3NS40ODZjLTIzLjQ5NyA2LjMyMi00Mi4wMDMgMjQuOTQ3LTQ4LjI4NCA0OC41OTctMTEuNDEyIDQyLjg2Ny0xMS40MTIgMTMyLjMwNS0xMS40MTIgMTMyLjMwNXMwIDg5LjQzOCAxMS40MTIgMTMyLjMwNWM2LjI4MSAyMy42NSAyNC43ODcgNDEuNSA0OC4yODQgNDcuODIxQzExNy4yMiA0NDggMjg4IDQ0OCAyODggNDQ4czE3MC43OCAwIDIxMy4zNzEtMTEuNDg2YzIzLjQ5Ny02LjMyMSA0Mi4wMDMtMjQuMTcxIDQ4LjI4NC00Ny44MjEgMTEuNDEyLTQyLjg2NyAxMS40MTItMTMyLjMwNSAxMS40MTItMTMyLjMwNXMwLTg5LjQzOC0xMS40MTItMTMyLjMwNXptLTMxNy41MSAyMTMuNTA4VjE3NS4xODVsMTQyLjczOSA4MS4yMDUtMTQyLjczOSA4MS4yMDF6XCJdXG59O1xudmFyIGZhU2t5YXRsYXMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc2t5YXRsYXMnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImYyMTZcIiwgXCJNNjQwIDMyOS4zYzAgNjUuOS01Mi41IDExNC40LTExNy41IDExNC40LTE2NS45IDAtMTk2LjYtMjQ5LjctMzU5LjctMjQ5LjctMTQ2LjkgMC0xNDcuMSAyMTIuMiA1LjYgMjEyLjIgNDIuNSAwIDkwLjktMTcuOCAxMjUuMy00Mi41IDUuNi00LjEgMTYuOS0xNi4zIDIyLjgtMTYuM3MxMC45IDUgMTAuOSAxMC45YzAgNy44LTEzLjEgMTkuMS0xOC43IDI0LjEtNDAuOSAzNS42LTEwMC4zIDYxLjItMTU0LjcgNjEuMi04My40LjEtMTU0LTU5LTE1NC0xNDQuOXM2Ny41LTE0OS4xIDE1Mi44LTE0OS4xYzE4NS4zIDAgMjIyLjUgMjQ1LjkgMzYxLjkgMjQ1LjkgOTkuOSAwIDk0LjgtMTM5LjcgMy40LTEzOS43LTE3LjUgMC0zNSAxMS42LTQ2LjkgMTEuNi04LjQgMC0xNS45LTcuMi0xNS45LTE1LjYgMC0xMS42IDUuMy0yMy43IDUuMy0zNi4zIDAtNjYuNi01MC45LTExNC43LTExNi45LTExNC43LTUzLjEgMC04MCAzNi45LTg4LjggMzYuOS02LjIgMC0xMS4yLTUtMTEuMi0xMS4yIDAtNS42IDQuMS0xMC4zIDcuOC0xNC40IDI1LjMtMjguOCA2NC43LTQzLjcgMTAyLjgtNDMuNyA3OS40IDAgMTM5LjEgNTguNCAxMzkuMSAxMzcuOCAwIDYuOS0uMyAxMy43LTEuMiAyMC42IDExLjktMy4xIDI0LjEtNC43IDM1LjktNC43IDYwLjcgMCAxMTEuOSA0NS4zIDExMS45IDEwNy4yelwiXVxufTtcbnZhciBmYUZpcmVmb3hCcm93c2VyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ZpcmVmb3gtYnJvd3NlcicsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTAwN1wiLCBcIk0xMzAuMjIgMTI3LjU0OEMxMzAuMzggMTI3LjU1OCAxMzAuMyAxMjcuNTU4IDEzMC4yMiAxMjcuNTQ4VjEyNy41NDhaTTQ4MS42NCAxNzIuODk4QzQ3MS4wMyAxNDcuMzk4IDQ0OS41NiAxMTkuODk4IDQzMi43IDExMS4xNjhDNDQ2LjQyIDEzOC4wNTggNDU0LjM3IDE2NS4wNDggNDU3LjQgMTg1LjE2OEM0NTcuNDA1IDE4NS4zMDYgNDU3LjQyMiAxODUuNDQzIDQ1Ny40NSAxODUuNTc4QzQyOS44NyAxMTYuODI4IDM4My4wOTggODkuMTA4OSAzNDQuOSAyOC43NDc5QzMyOS45MDggNS4wNTc5MiAzMzMuOTc2IDMuNTE3OTIgMzMxLjgyIDQuMDg3OTJMMzMxLjcgNC4xNTc5MkMyODQuOTkgMzAuMTEwOSAyNTYuMzY1IDgyLjUyODkgMjQ5LjEyIDEyNi44OThDMjMyLjUwMyAxMjcuNzcxIDIxNi4yMTkgMTMxLjg5NSAyMDEuMTkgMTM5LjAzNUMxOTkuODM4IDEzOS42NDkgMTk4LjczNiAxNDAuNzA2IDE5OC4wNjYgMTQyLjAzMUMxOTcuMzk2IDE0My4zNTYgMTk3LjE5OSAxNDQuODcgMTk3LjUwNiAxNDYuMzIzQzE5Ny43IDE0Ny4xNjIgMTk4LjA2OCAxNDcuOTUxIDE5OC41ODYgMTQ4LjYzOUMxOTkuMTAzIDE0OS4zMjcgMTk5Ljc2IDE0OS44OTkgMjAwLjUxMiAxNTAuMzE4QzIwMS4yNjQgMTUwLjczNyAyMDIuMDk2IDE1MC45OTMgMjAyLjk1NCAxNTEuMDcxQzIwMy44MTEgMTUxLjE0OCAyMDQuNjc2IDE1MS4wNDUgMjA1LjQ5MSAxNTAuNzY4TDIwNi4wMTEgMTUwLjU1OEMyMjEuNTExIDE0My4yNTUgMjM4LjQwOCAxMzkuMzkzIDI1NS41NDEgMTM5LjIzOEMzMTguMzY5IDEzOC42NjkgMzUyLjY5OCAxODMuMjYyIDM2My4xNjEgMjAxLjUyOEMzNTAuMTYxIDE5Mi4zNzggMzI2LjgxMSAxODMuMzM4IDMwNC4zNDEgMTg3LjI0OEMzOTIuMDgxIDIzMS4xMDggMzY4LjU0MSAzODEuNzg0IDI0Ni45NTEgMzc2LjQ0OEMxODcuNDg3IDM3My44MzggMTQ5Ljg4MSAzMjUuNDY3IDE0Ni40MjEgMjg1LjY0OEMxNDYuNDIxIDI4NS42NDggMTU3LjY3MSAyNDMuNjk4IDIyNy4wNDEgMjQzLjY5OEMyMzQuNTQxIDI0My42OTggMjU1Ljk3MSAyMjIuNzc4IDI1Ni4zNzEgMjE2LjY5OEMyNTYuMjgxIDIxNC42OTggMjEzLjgzNiAxOTcuODIyIDE5Ny4yODEgMTgxLjUxOEMxODguNDM0IDE3Mi44MDUgMTg0LjIyOSAxNjguNjExIDE4MC41MTEgMTY1LjQ1OEMxNzguNDk5IDE2My43NSAxNzYuMzkyIDE2Mi4xNTggMTc0LjIwMSAxNjAuNjg4QzE2OC42MzggMTQxLjIzMSAxNjguMzk5IDEyMC42MzggMTczLjUxIDEwMS4wNThDMTQ4LjQ1IDExMi40NjggMTI4Ljk2IDEzMC41MDggMTE0LjggMTQ2LjQyOEgxMTQuNjhDMTA1LjAxIDEzNC4xNzggMTA1LjY4IDkzLjc3NzkgMTA2LjI1IDg1LjM0NzlDMTA2LjEzIDg0LjgxNzkgOTkuMDIyIDg5LjAxNTkgOTguMSA4OS42NTc5Qzg5LjUzNDIgOTUuNzEwMyA4MS41NTI4IDEwMi41NSA3NC4yNiAxMTAuMDg4QzU3Ljk2OSAxMjYuNjg4IDMwLjEyOCAxNjAuMjQyIDE4Ljc2IDIxMS4zMThDMTQuMjI0IDIzMS43MDEgMTIgMjU1LjczOSAxMiAyNjMuNjE4QzEyIDM5OC4zMTggMTIxLjIxIDUwNy41MDggMjU1LjkyIDUwNy41MDhDMzc2LjU2IDUwNy41MDggNDc4LjkzOSA0MjAuMjgxIDQ5Ni4zNSAzMDQuODg4QzUwNy45MjIgMjI4LjE5MiA0ODEuNjQgMTczLjgyIDQ4MS42NCAxNzIuODk4WlwiXVxufTtcbnZhciBmYVJlcGx5ZCA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdyZXBseWQnLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImYzZTZcIiwgXCJNMzIwIDQ4MEgxMjhDNTcuNiA0ODAgMCA0MjIuNCAwIDM1MlYxNjBDMCA4OS42IDU3LjYgMzIgMTI4IDMyaDE5MmM3MC40IDAgMTI4IDU3LjYgMTI4IDEyOHYxOTJjMCA3MC40LTU3LjYgMTI4LTEyOCAxMjh6TTE5My40IDI3My4yYy02LjEtMi0xMS42LTMuMS0xNi40LTMuMS03LjIgMC0xMy41IDEuOS0xOC45IDUuNi01LjQgMy43LTkuNiA5LTEyLjggMTUuOGgtMS4xbC00LjItMTguM2gtMjh2MTM4LjloMzYuMXYtODkuN2MxLjUtNS40IDQuNC05LjggOC43LTEzLjIgNC4zLTMuNCA5LjgtNS4xIDE2LjItNS4xIDQuNiAwIDkuOCAxIDE1LjYgMy4xbDQuOC0zNHptMTE1LjIgMTAzLjRjLTMuMiAyLjQtNy43IDQuOC0xMy43IDcuMS02IDIuMy0xMi44IDMuNS0yMC40IDMuNS0xMi4yIDAtMjEuMS0zLTI2LjUtOC45LTUuNS01LjktOC41LTE0LjctOS0yNi40aDgzLjNjLjktNC44IDEuNi05LjQgMi4xLTEzLjkuNS00LjQuNy04LjYuNy0xMi41IDAtMTAuNy0xLjYtMTkuNy00LjctMjYuOS0zLjItNy4yLTcuMy0xMy0xMi41LTE3LjItNS4yLTQuMy0xMS4xLTcuMy0xNy44LTkuMi02LjctMS44LTEzLjUtMi44LTIwLjYtMi44LTIxLjEgMC0zNy41IDYuMS00OS4yIDE4LjNzLTE3LjUgMzAuNS0xNy41IDU1YzAgMjIuOCA1LjIgNDAuNyAxNS42IDUzLjcgMTAuNCAxMy4xIDI2LjggMTkuNiA0OS4yIDE5LjYgMTAuNyAwIDIwLjktMS41IDMwLjQtNC42IDkuNS0zLjEgMTcuMS02LjggMjIuNi0xMS4ybC0xMi0yMy42em0tMjEuOC03MC4zYzMuOCA1LjQgNS4zIDEzLjEgNC42IDIzLjFoLTUxLjdjLjktOS40IDMuNy0xNyA4LjItMjIuNiA0LjUtNS42IDExLjUtOC41IDIxLTguNSA4LjItLjEgMTQuMSAyLjYgMTcuOSA4em03OS45IDIuNWM0LjEgMy45IDkuNCA1LjggMTYuMSA1LjggNyAwIDEyLjYtMS45IDE2LjctNS44czYuMS05LjEgNi4xLTE1LjYtMi0xMS42LTYuMS0xNS40Yy00LjEtMy44LTkuNi01LjctMTYuNy01LjctNi43IDAtMTIgMS45LTE2LjEgNS43LTQuMSAzLjgtNi4xIDguOS02LjEgMTUuNHMyIDExLjcgNi4xIDE1LjZ6bTAgMTAwLjVjNC4xIDMuOSA5LjQgNS44IDE2LjEgNS44IDcgMCAxMi42LTEuOSAxNi43LTUuOHM2LjEtOS4xIDYuMS0xNS42LTItMTEuNi02LjEtMTUuNGMtNC4xLTMuOC05LjYtNS43LTE2LjctNS43LTYuNyAwLTEyIDEuOS0xNi4xIDUuNy00LjEgMy44LTYuMSA4LjktNi4xIDE1LjQgMCA2LjYgMiAxMS43IDYuMSAxNS42elwiXVxufTtcbnZhciBmYVN1c2UgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3VzZScsXG4gIGljb246IFs2NDAsIDUxMiwgW10sIFwiZjdkNlwiLCBcIk01OTMuMSAxOTIuNkExMC40IDEwLjQgMCAxIDEgNjA0LjUgMjEwYTEwLjQgMTAuNCAwIDEgMSAtMTEuNC0xNy40em0tNDcuMSAxMi4yYTM4LjUgMzguNSAwIDEgMSA3NS0xNy42IDM4LjUgMzguNSAwIDEgMSAtNzUgMTcuNnpNNDMzLjcgMzM2LjdjMy4yIDQuNiA1LjggOSA3LjMgMTMuNGMxIDMuMSAyLjQgNy4zIDUuNSA4LjljLjIgLjEgLjMgLjIgLjUgLjJjNS43IDIuMSAyMC4zIDEuNyAyMC4zIDEuN2gyNi44YzIuMyAwIDIyLjQgMCAyMS45LTIuM2MtMi40LTEwLjgtMTQuOS0xMi43LTI0LjQtMTguM2MtOC43LTUuMi0xNy0xMS4xLTIwLjgtMjEuM2MtMi01LjItLjgtMTcuNCAyLjYtMjEuOGMyLjUtMy4yIDYuMS01LjMgMTAtNi4yYzQuMy0uOSA4LjgtLjEgMTMuMSAuM2M1LjMgLjUgMTAuNiAxLjUgMTUuOSAyLjJjMTAuMyAxLjMgMjAuNiAxLjkgMzEgMS42YzE3LjEtLjUgMzQuMi0zLjIgNTAuNC04LjdjMTEuMy0zLjggMjIuNC04LjkgMzItMTYuMWMxMC45LTguMSA4LjEtNy40LTMtNi4yYy0xMy4zIDEuNC0yNi42IDEuNi0zOS45IC44Yy0xMi40LS43LTI0LjctMi4yLTM1LjktNy45Yy04LjgtNC42LTE2LjQtOS4xLTIzLjQtMTYuMmMtMS0xLjEtMS43LTQuMiAuMi02LjJjMS45LTEuOSA1LjgtLjggNyAuMmMxMi4yIDEwLjIgMzAuNSAxOC42IDQ5LjMgMTkuNWMxMC4yIC41IDIwLjEgLjcgMzAuNCAuM2M1LjEtLjIgMTIuOC0uMiAxNy45LS4zYzIuNiAwIDkuOCAuNyAxMS4yLTIuMWMuNC0uOCAuNC0xLjggLjMtMi43Yy0xLjUtNDAuOS00LjUtODYuOS00Ny4zLTEwNi41Yy0zMS45LTE0LjYtNzkuNy0zNy4yLTk5LjktNDYuNmMtNC43LTIuMi0xMC4yIDEuMy0xMC4yIDYuNWMwIDEzLjYgLjcgMzMuMyAuNyA1MS4xYy05LjctOS45LTI2LTE2LjEtMzguNC0yMS44Yy0xNC4xLTYuNS0yOC43LTEyLTQzLjUtMTYuNmMtMjkuOC05LjItNjAuNy0xNC45LTkxLjctMThjLTM1LjItMy41LTcxLTEuOC0xMDUuNyA1LjNDMTQ3IDExNS4xIDkwLjggMTQyLjYgNDguMiAxODIuN0MyMi4xIDIwNy4zIDEuNiAyNDIuNCAuMiAyNzcuOWMtMiA1MC4zIDEyLjEgNzcuMyAzOCAxMDUuMmM0MS4zIDQ0LjQgMTMwLjIgNTAuNiAxNjYuMi0yYzE2LjItMjMuNyAxOS43LTU1LjggOC04MmMtMTEuOC0yNi4yLTM4LjgtNDUuMS02Ny40LTQ2Yy0yMi4yLS43LTQ1LjkgMTAuNi01NC41IDMxLjFjLTYuNSAxNS43LTIuOCAzNS4xIDkgNDcuM2M0LjYgNC44IDEwLjkgOC43IDE3LjcgNy4xYzQtLjkgNy40LTMuOSA4LThjLjktNi00LjQtOS45LTcuNi0xNC41Yy01LjgtOC4zLTQuNy0yMC45IDIuNy0yNy45YzYuMi02IDE1LjMtNy44IDIzLjktNy43YzggMCAxNi4yIDEuNCAyMy4xIDUuNWM5LjcgNS43IDE2LjIgMTYuMiAxOC40IDI3LjJjNi43IDMzLTIwLjIgNTkuOS01Ni42IDYyYy0xOC42IDEuMS0zNy42LTMuOC01Mi4xLTE1LjVDNDAuMSAzMjkuOSAzMS4xIDI2OS40IDczLjIgMjM3YzQwLTMwLjcgOTAuNC0yMi44IDEyMC4yLTYuOGMyMy44IDEyLjggNDEuNSAzMy42IDU1IDU2LjdjNi43IDExLjYgMTIuNSAyMy43IDE3LjggMzYuMWM1LjEgMTEuOCA5LjkgMjMuOCAyMC4yIDMyLjVjNi44IDUuOCAxNS4yIDUuNiAyNC4xIDUuNmg1MC44YzYuOSAwIDUuMi00LjYgMi4yLTcuN2MtNi43LTYuOS0xNi40LTguNC0yNS40LTEwLjljLTIwLjUtNS42LTE4LjQtMzIuOC0xMi43LTMyLjhjMTguMyAwIDE4LjkgLjYgMzQuOSAuM2MyMy4yLS4zIDMwLjItMS43IDQ4LjMgNWM5LjcgMy42IDE5IDEzLjEgMjUuMSAyMS43elwiXVxufTtcbnZhciBmYUplbmtpbnMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnamVua2lucycsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjNiNlwiLCBcIk00ODcuMSA0MjVjLTEuNC0xMS4yLTE5LTIzLjEtMjguMi0zMS45LTUuMS01LTI5LTIzLjEtMzAuNC0yOS45LTEuNC02LjYgOS43LTIxLjUgMTMuMy0yOC45IDUuMS0xMC43IDguOC0yMy43IDExLjMtMzIuNiAxOC44LTY2LjEgMjAuNy0xNTYuOS02LjItMjExLjItMTAuMi0yMC42LTM4LjYtNDktNTYuNC02Mi41LTQyLTMxLjctMTE5LjYtMzUuMy0xNzAuMS0xNi42LTE0LjEgNS4yLTI3LjggOS44LTQwLjEgMTcuMS0zMy4xIDE5LjQtNjguMyAzMi41LTc4LjEgNzEuNi0yNC4yIDEwLjgtMzEuNSA0MS44LTMwLjMgNzcuOC4yIDcgNC4xIDE1LjggMi43IDIyLjQtLjcgMy4zLTUuMiA3LjYtNi4xIDkuOC0xMS42IDI3LjctMi4zIDY0IDExLjEgODMuNyA4LjEgMTEuOSAyMS41IDIyLjQgMzkuMiAyNS4yLjcgMTAuNiAzLjMgMTkuNyA4LjIgMzAuNCAzLjEgNi44IDE0LjcgMTkgMTAuNCAyNy43LTIuMiA0LjQtMjEgMTMuOC0yNy4zIDE3LjZDODkgNDA3LjIgNzMuNyA0MTUgNTQuMiA0MjljLTEyLjYgOS0zMi4zIDEwLjItMjkuMiAzMS4xIDIuMSAxNC4xIDEwLjEgMzEuNiAxNC43IDQ1LjguNyAyIDEuNCA0LjEgMi4xIDZoNDIyYzQuOS0xNS4zIDkuNy0zMC45IDE0LjYtNDcuMiAzLjQtMTEuNCAxMC4yLTI3LjggOC43LTM5Ljd6TTIwNS45IDMzLjdjMS44LS41IDMuNC43IDQuOSAyLjQtLjIgNS4yLTUuNCA1LjEtOC45IDYuOC01LjQgNi43LTEzLjQgOS44LTIwIDE3LjItNi44IDcuNS0xNC40IDI3LjctMjMuNCAzMC00LjUgMS4xLTkuNy0uOC0xMy42LS41LTEwLjQuNy0xNy43IDYtMjguMyA3LjUgMTMuNi0yOS45IDU2LjEtNTQgODkuMy02My40em0tMTA0LjggOTMuNmMxMy41LTE0LjkgMzIuMS0yNC4xIDU0LjgtMjUuOSAxMS43IDI5LjctOC40IDY1LS45IDk3LjYgMi4zIDkuOSAxMC4yIDI1LjQtMi40IDI1LjcuMy0yOC4zLTM0LjgtNDYuMy02MS4zLTI5LjYtMS44LTIxLjUtNC45LTUxLjcgOS44LTY3Ljh6bTM2LjcgMjAwLjJjLTEtNC4xLTIuNy0xMi45LTIuMy0xNS4xIDEuNi04LjcgMTcuMS0xMi41IDExLTI0LjctMTEuMy0uMS0xMy44IDEwLjItMjQuMSAxMS4zLTI2LjcgMi42LTQ1LjYtMzUuNC00NC40LTU4LjQgMS0xOS41IDE3LjYtMzguMiA0MC4xLTM1LjggMTYgMS44IDIxLjQgMTkuMiAyNC41IDM0LjcgOS4yLjUgMjIuNS0uNCAyNi45LTcuNi0uNi0xNy41LTguOC0zMS42LTguMi00Ny43IDEtMzAuMyAxNy41LTU3LjYgNC44LTg3LjQgMTMuNi0zMC45IDUzLjUtNTUuMyA4My4xLTcwIDM2LjYtMTguMyA5NC45LTMuNyAxMjkuMyAxNS44IDE5LjcgMTEuMSAzNC40IDMyLjcgNDguMyA1MC43LTE5LjUtNS44LTM2LjEgNC4yLTMzLjEgMjAuMyAxNi4zLTE0LjkgNDQuMi0uMiA1Mi41IDE2LjQgNy45IDE1LjggNy44IDM5LjMgOSA2Mi44IDIuOSA1Ny0xMC40IDExNS45LTM5LjEgMTU3LjEtNy43IDExLTE0LjEgMjMtMjQuOSAzMC42LTI2IDE4LjItNjUuNCAzNC43LTk5LjIgMjMuNC00NC43LTE1LTY1LTQ0LjgtODkuNS03OC44LjcgMTguNyAxMy44IDM0LjEgMjYuOCA0OC40IDExLjMgMTIuNSAyNSAyNi42IDM5LjcgMzIuNC0xMi4zLTIuOS0zMS4xLTMuOC0zNi4yIDcuMi0yOC42LTEuOS01NS4xLTQuOC02OC43LTI0LjItMTAuNi0xNS40LTIxLjQtNDEuNC0yNi4zLTYxLjR6bTIyMiAxMjQuMWM0LjEtMyAxMS4xLTIuOSAxNy40LTMuNi01LjQtMi43LTEzLTMuNy0xOS4zLTIuMi0uMS00LjItMi02LjgtMy4yLTEwLjIgMTAuNi0zLjggMzUuNS0yOC41IDQ5LjYtMjAuMyA2LjcgMy45IDkuNSAyNi4yIDEwLjEgMzcgLjQgOS0uOCAxOC00LjUgMjIuOC0xOC44LS42LTM1LjgtMi44LTUwLjctNyAuOS02LjEtMS0xMi4xLjYtMTYuNXptLTE3LjItMjBjLTE2LjguOC0yNi0xLjItMzguMy0xMC44LjItLjggMS40LS41IDEuNS0xLjQgMTggOCA0MC44LTMuMyA1OS00LjktNy45IDUuMS0xNC42IDExLjYtMjIuMiAxNy4xem0tMTIuMSAzMy4yYy0xLjYtOS40LTMuNS0xMi0yLjgtMjAuMiAyNS0xNi42IDI5LjcgMjguNiAyLjggMjAuMnpNMjI2IDQzOC42Yy0xMS42LS43LTQ4LjEtMTQtMzguNS0yMy43IDkuNCA2LjUgMjcuNSA0LjkgNDEuMyA3LjMuOCA0LjQtMi44IDEwLjItMi44IDE2LjR6TTU3LjcgNDk3LjFjLTQuMy0xMi43LTkuMi0yNS4xLTE0LjgtMzYuOSAzMC44LTIzLjggNjUuMy00OC45IDEwMi4yLTYzLjUgMi44LTEuMSAyMy4yIDI1LjQgMjYuMiAyNy42IDE2LjUgMTEuNyAzNyAyMSA1Ni4yIDMwLjIgMS4yIDguOCAzLjkgMjAuMiA4LjcgMzUuNS43IDIuMyAxLjQgNC43IDIuMiA3LjJINTcuN3ptMjQwLjYgNS43aC0uOGMuMy0uMi41LS40LjgtLjV2LjV6bTcuNS01LjdjMi4xLTEuNCA0LjMtMi44IDYuNC00LjMgMS4xIDEuNCAyLjIgMi44IDMuMiA0LjNoLTkuNnptMTUuMS0yNC43Yy0xMC44IDcuMy0yMC42IDE4LjMtMzMuMyAyNS4yLTYgMy4zLTI3IDExLjctMzMuNCAxMC4yLTMuNi0uOC0zLjktNS4zLTUuNC05LjUtMy4xLTktMTAuMS0yMy40LTEwLjgtMzctLjgtMTcuMi0yLjUtNDYgMTYtNDIuNCAxNC45IDIuOSAzMi4zIDkuNyA0My45IDE2LjEgNy4xIDMuOSAxMS4xIDguNiAyMS45IDkuNS0uMSAxLjQtLjEgMi44LS4yIDQuMy01LjkgMy45LTE1LjMgMy44LTIxLjggNy4xIDkuNS40IDE3IDIuNyAyMy41IDUuOS0uMSAzLjQtLjMgNy0uNCAxMC42em01My40IDI0LjdoLTE0Yy0uMS0zLjItMi44LTUuOC02LjEtNS44cy01LjkgMi42LTYuMSA1LjhoLTE3LjRjLTIuOC00LjQtNS43LTguNi04LjktMTIuNSAyLjEtMi4yIDQtNC43IDYtNi45IDkgMy43IDE0LjgtNC45IDIxLjctNC4yIDcuOS44IDE0LjIgMTEuNyAyNS40IDExbC0uNiAxMi42em04LjcgMGMuMi00IC40LTcuOC42LTExLjUgMTUuNi03LjMgMjkgMS4zIDM1LjcgMTEuNUgzODN6bTgzLjQtMzdjLTIuMyAxMS4yLTUuOCAyNC05LjkgMzcuMS0uMi0uMS0uNC0uMS0uNi0uMUg0MjhjLjYtMS4xIDEuMi0yLjIgMS45LTMuMy0yLjYtNi4xLTktOC43LTEwLjktMTUuNSAxMi4xLTIyLjcgNi41LTkzLjQtMjQuMi03OC41IDQuMy02LjMgMTUuNi0xMS41IDIwLjgtMTkuMyAxMyAxMC40IDIwLjggMjAuMyAzMy4yIDMxLjQgNi44IDYgMjAgMTMuMyAyMS40IDIzLjEuOCA1LjUtMi42IDE4LjktMy44IDI1LjF6TTIyMi4yIDEzMC41YzUuNC0xNC45IDI3LjItMzQuNyA0NS0zMiA3LjcgMS4yIDE4IDguMiAxMi4yIDE3LjctMzAuMi03LTQ1LjIgMTIuNi01NC40IDMzLjEtOC4xLTItNC45LTEzLjEtMi44LTE4Ljh6bTE4NC4xIDYzLjFjOC4yLTMuNiAyMi40LS43IDI5LjYtNS4zLTQuMi0xMS41LTEwLjMtMjEuNC05LjMtMzcuNy41IDAgMSAwIDEuNC4xIDYuOCAxNC4yIDEyLjcgMjkuMiAyMS40IDQxLjctNS43IDEzLjUtNDMuNiAyNS40LTQzLjEgMS4yem0yMC40LTQzem0tMTE3LjIgNDUuN2MtNi44LTEwLjktMTktMzIuNS0xNC41LTQ1LjMgNi41IDExLjkgOC42IDI0LjQgMTcuOCAzMy4zIDQuMSA0IDEyLjIgOSA4LjIgMjAuMi0uOSAyLjctNy44IDguNi0xMS43IDkuNy0xNC40IDQuMy00Ny45LjktMzYuNi0xNy4xIDExLjkuNyAyNy45IDcuOCAzNi44LS44em0yNy4zIDcwYzMuOCA2LjYgMS40IDE4LjcgMTIuMSAyMC42IDIwLjIgMy40IDQzLjYtMTIuMyA1OC4xLTE3LjggOS0xNS4yLS44LTIwLjctOC45LTMwLjUtMTYuNi0yMC0zOC44LTQ0LjgtMzgtNzQuNyA2LjctNC45IDcuMyA3LjQgOC4yIDkuNyA4LjcgMjAuMyAzMC40IDQ2LjIgNDYuMyA2My41IDMuOSA0LjMgMTAuMyA4LjQgMTEgMTEuMiAyLjEgOC4yLTUuNCAxOC00LjUgMjMuNS0yMS43IDEzLjktNDUuOCAyOS4xLTgxLjQgMjUuNi03LjQtNi43LTEwLjMtMjEuNC0yLjktMzEuMXptLTIwMS4zLTkuMmMtNi44LTMuOS04LjQtMjEtMTYuNC0yMS40LTExLjQtLjctOS4zIDIyLjItOS4zIDM1LjUtNy44LTcuMS05LjItMjkuMS0zLjUtNDAuMy02LjYtMy4yLTkuNSAzLjYtMTMuMSA1LjkgNC43LTM0LjEgNDkuOC0xNS44IDQyLjMgMjAuM3ptMjk5LjYgMjguOGMtMTAuMSAxOS4yLTI0LjQgNDAuNC01NCA0MS0uNi02LjItMS4xLTE1LjYgMC0xOS40IDIyLjctMi4yIDM2LjYtMTMuNyA1NC0yMS42em0tMTQxLjkgMTIuNGMxOC45IDkuOSA1My42IDExIDc5LjMgMTAuMiAxLjQgNS42IDEuMyAxMi42IDEuNCAxOS40LTMzIDEuOC03Mi02LjQtODAuNy0yOS42em05Mi4yIDQ2LjdjLTEuNyA0LjMtNS4zIDkuMy05LjggMTEuMS0xMi4xIDQuOS00NS42IDguNy02Mi40LS4zLTEwLjctNS43LTE3LjUtMTguNS0yMy40LTI2LTIuOC0zLjYtMTYuOS0xMi45LS4yLTEyLjkgMTMuMSAzMi43IDU4IDI5IDk1LjggMjguMXpcIl1cbn07XG52YXIgZmFUd2l0dGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3R3aXR0ZXInLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImYwOTlcIiwgXCJNNDU5LjM3IDE1MS43MTZjLjMyNSA0LjU0OC4zMjUgOS4wOTcuMzI1IDEzLjY0NSAwIDEzOC43Mi0xMDUuNTgzIDI5OC41NTgtMjk4LjU1OCAyOTguNTU4LTU5LjQ1MiAwLTExNC42OC0xNy4yMTktMTYxLjEzNy00Ny4xMDYgOC40NDcuOTc0IDE2LjU2OCAxLjI5OSAyNS4zNCAxLjI5OSA0OS4wNTUgMCA5NC4yMTMtMTYuNTY4IDEzMC4yNzQtNDQuODMyLTQ2LjEzMi0uOTc1LTg0Ljc5Mi0zMS4xODgtOTguMTEyLTcyLjc3MiA2LjQ5OC45NzQgMTIuOTk1IDEuNjI0IDE5LjgxOCAxLjYyNCA5LjQyMSAwIDE4Ljg0My0xLjMgMjcuNjE0LTMuNTczLTQ4LjA4MS05Ljc0Ny04NC4xNDMtNTEuOTgtODQuMTQzLTEwMi45ODV2LTEuMjk5YzEzLjk2OSA3Ljc5NyAzMC4yMTQgMTIuNjcgNDcuNDMxIDEzLjMxOS0yOC4yNjQtMTguODQzLTQ2Ljc4MS01MS4wMDUtNDYuNzgxLTg3LjM5MSAwLTE5LjQ5MiA1LjE5Ny0zNy4zNiAxNC4yOTQtNTIuOTU0IDUxLjY1NSA2My42NzUgMTI5LjMgMTA1LjI1OCAyMTYuMzY1IDEwOS44MDctMS42MjQtNy43OTctMi41OTktMTUuOTE4LTIuNTk5LTI0LjA0IDAtNTcuODI4IDQ2Ljc4Mi0xMDQuOTM0IDEwNC45MzQtMTA0LjkzNCAzMC4yMTMgMCA1Ny41MDIgMTIuNjcgNzYuNjcgMzMuMTM3IDIzLjcxNS00LjU0OCA0Ni40NTYtMTMuMzIgNjYuNTk5LTI1LjM0LTcuNzk4IDI0LjM2Ni0yNC4zNjYgNDQuODMzLTQ2LjEzMiA1Ny44MjcgMjEuMTE3LTIuMjczIDQxLjU4NC04LjEyMiA2MC40MjYtMTYuMjQzLTE0LjI5MiAyMC43OTEtMzIuMTYxIDM5LjMwOC01Mi42MjggNTQuMjUzelwiXVxufTtcbnZhciBmYVJvY2tybXMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncm9ja3JtcycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjNlOVwiLCBcIk0yNDggOEMxMTEgOCAwIDExOSAwIDI1NnMxMTEgMjQ4IDI0OCAyNDggMjQ4LTExMSAyNDgtMjQ4UzM4NSA4IDI0OCA4em0xNTcuNCA0MTkuNWgtOTBsLTExMi0xMzEuM2MtMTcuOS0yMC40LTMuOS01Ni4xIDI2LjYtNTYuMWg3NS4zbC04NC42LTk5LjMtODQuMyA5OC45aC05MEwxOTMuNSA2Ny4yYzE0LjQtMTguNCA0MS4zLTE3LjMgNTQuNSAwbDE1Ny43IDE4NS4xYzE5IDIyLjggMiA1Ny4yLTI3LjYgNTYuMS0uNiAwLTc0LjIuMi03NC4yLjJsMTAxLjUgMTE4Ljl6XCJdXG59O1xudmFyIGZhUGludGVyZXN0ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3BpbnRlcmVzdCcsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjBkMlwiLCBcIk00OTYgMjU2YzAgMTM3LTExMSAyNDgtMjQ4IDI0OC0yNS42IDAtNTAuMi0zLjktNzMuNC0xMS4xIDEwLjEtMTYuNSAyNS4yLTQzLjUgMzAuOC02NSAzLTExLjYgMTUuNC01OSAxNS40LTU5IDguMSAxNS40IDMxLjcgMjguNSA1Ni44IDI4LjUgNzQuOCAwIDEyOC43LTY4LjggMTI4LjctMTU0LjMgMC04MS45LTY2LjktMTQzLjItMTUyLjktMTQzLjItMTA3IDAtMTYzLjkgNzEuOC0xNjMuOSAxNTAuMSAwIDM2LjQgMTkuNCA4MS43IDUwLjMgOTYuMSA0LjcgMi4yIDcuMiAxLjIgOC4zLTMuMy44LTMuNCA1LTIwLjMgNi45LTI4LjEuNi0yLjUuMy00LjctMS43LTcuMS0xMC4xLTEyLjUtMTguMy0zNS4zLTE4LjMtNTYuNiAwLTU0LjcgNDEuNC0xMDcuNiAxMTItMTA3LjYgNjAuOSAwIDEwMy42IDQxLjUgMTAzLjYgMTAwLjkgMCA2Ny4xLTMzLjkgMTEzLjYtNzggMTEzLjYtMjQuMyAwLTQyLjYtMjAuMS0zNi43LTQ0LjggNy0yOS41IDIwLjUtNjEuMyAyMC41LTgyLjYgMC0xOS0xMC4yLTM0LjktMzEuNC0zNC45LTI0LjkgMC00NC45IDI1LjctNDQuOSA2MC4yIDAgMjIgNy40IDM2LjggNy40IDM2LjhzLTI0LjUgMTAzLjgtMjkgMTIzLjJjLTUgMjEuNC0zIDUxLjYtLjkgNzEuMkM2NS40IDQ1MC45IDAgMzYxLjEgMCAyNTYgMCAxMTkgMTExIDggMjQ4IDhzMjQ4IDExMSAyNDggMjQ4elwiXVxufTtcbnZhciBmYUJ1ZmZlciA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdidWZmZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY4MzdcIiwgXCJNNDI3Ljg0IDM4MC42N2wtMTk2LjUgOTcuODJhMTguNiAxOC42IDAgMCAxLTE0LjY3IDBMMjAuMTYgMzgwLjY3Yy00LTItNC01LjI4IDAtNy4yOUw2Ny4yMiAzNTBhMTguNjUgMTguNjUgMCAwIDEgMTQuNjkgMGwxMzQuNzYgNjdhMTguNTEgMTguNTEgMCAwIDAgMTQuNjcgMGwxMzQuNzYtNjdhMTguNjIgMTguNjIgMCAwIDEgMTQuNjggMGw0Ny4wNiAyMy40M2M0LjA1IDEuOTYgNC4wNSA1LjI0IDAgNy4yNHptMC0xMzYuNTNsLTQ3LjA2LTIzLjQzYTE4LjYyIDE4LjYyIDAgMCAwLTE0LjY4IDBsLTEzNC43NiA2Ny4wOGExOC42OCAxOC42OCAwIDAgMS0xNC42NyAwTDgxLjkxIDIyMC43MWExOC42NSAxOC42NSAwIDAgMC0xNC42OSAwbC00Ny4wNiAyMy40M2MtNCAyLTQgNS4yOSAwIDcuMzFsMTk2LjUxIDk3LjhhMTguNiAxOC42IDAgMCAwIDE0LjY3IDBsMTk2LjUtOTcuOGM0LjA1LTIuMDIgNC4wNS01LjMgMC03LjMxek0yMC4xNiAxMzAuNDJsMTk2LjUgOTAuMjlhMjAuMDggMjAuMDggMCAwIDAgMTQuNjcgMGwxOTYuNTEtOTAuMjljNC0xLjg2IDQtNC44OSAwLTYuNzRMMjMxLjMzIDMzLjRhMTkuODggMTkuODggMCAwIDAtMTQuNjcgMGwtMTk2LjUgOTAuMjhjLTQuMDUgMS44NS00LjA1IDQuODggMCA2Ljc0elwiXVxufTtcbnZhciBmYU5wbSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICducG0nLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImYzZDRcIiwgXCJNMjg4IDI4OGgtMzJ2LTY0aDMydjY0em0yODgtMTI4djE5MkgyODh2MzJIMTYwdi0zMkgwVjE2MGg1NzZ6bS00MTYgMzJIMzJ2MTI4aDY0di05NmgzMnY5NmgzMlYxOTJ6bTE2MCAwSDE5MnYxNjBoNjR2LTMyaDY0VjE5MnptMjI0IDBIMzUydjEyOGg2NHYtOTZoMzJ2OTZoMzJ2LTk2aDMydjk2aDMyVjE5MnpcIl1cbn07XG52YXIgZmFZYW1tZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAneWFtbWVyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmODQwXCIsIFwiTTUwMC42NzYsMTU5LjQ4NmExMi43NzksMTIuNzc5LDAsMCwwLTYuNC04LjI4MiwxMy45NTQsMTMuOTU0LDAsMCwwLTEwLjA3OC0xLjEyNUw0NTcuOCwxNTYuN2wtLjA0My0uMi0yMi4zLDUuNzg1LTEuMjQzLjMzMy0uNjA4LTIuMTdBMzY5LjAzNywzNjkuMDM3LDAsMCwwLDM0Ny41MzgsNC4yODlhMTQuMSwxNC4xLDAsMCwwLTE5Ljc4NC0uNDYzbC0xMDIuOSwxMDIuNzQ3SDI0Ljk0N0EyNC45LDI0LjksMCwwLDAsMCwxMzEuNDE3VjM4MC4zOGEyNC45NjMsMjQuOTYzLDAsMCwwLDI0LjkxOCwyNC45SDIyNC45ODZMMzI4LjA3Miw1MDhhMTMuNjY3LDEzLjY2NywwLDAsMCwxOS4zMjcsMGMuMTI2LS4xMjYuMjQ5LS4yNTUuMzctLjM4NWEzNjguMDI1LDM2OC4wMjUsMCwwLDAsNjkuNTc3LTEwNy4zNzQsNDAzLjQ1LDQwMy40NSwwLDAsMCwxNy4zLTUwLjh2LS4wMjhsMjAuNDA2LDUuMzM2LjAyOS0uMDczTDQ4My4zNDUsMzYyYTIwLjI1MywyMC4yNTMsMCwwLDAsMi42MTkuNSwxMy4zNTksMTMuMzU5LDAsMCwwLDQuMTM5LS4wNzIsMTMuNSwxMy41LDAsMCwwLDEwLjUxNS05LjkyNCw0MTUuODU1LDQxNS44NTUsMCwwLDAsLjA1OC0xOTMuMDEzWk0zMzcuMTI1LDI0LjY1bC4wMTMuMDE0aC0uMDEzWm0tMTEwLjIsMTY1LjE2MUwxNzQuMzExLDI4MS4xYTExLjMzOCwxMS4zMzgsMCwwLDAtMS40ODksNS42NTV2NDYuMTg5YTIyLjA0LDIyLjA0LDAsMCwxLTIyLjA0MSwyMmgtMy40QTIyLjA2OCwyMi4wNjgsMCwwLDEsMTI1LjMsMzMyLjk2MlYyODcuMjk0YTExLjUzMiwxMS41MzIsMCwwLDAtMS4zODgtNS41MWwtNTEuNi05Mi4yYTIxLjk4OCwyMS45ODgsMCwwLDEsMTkuMjY0LTMyLjcyNmgzLjI2OGEyMi4wNTksMjIuMDU5LDAsMCwxLDE5LjYxMSwxMS45MTZsMzYuMzU3LDcwLjI4MSwzNy41MTUtNzAuNTEyYTIyLjA2NiwyMi4wNjYsMCwwLDEsMzguNTU2LS42OTUsMjEuNywyMS43LDAsMCwxLDAsMjEuOTY3Wk0zMzcuMTQ1LDI0LjY3M2EzNDguMTQ3LDM0OC4xNDcsMCwwLDEsNzUuOCwxNDEuMzM1bC41NjQsMS45NTItMTE0LjEzNCwyOS42VjEzMS40MTdhMjUuMDA2LDI1LjAwNiwwLDAsMC0yNC45NDctMjQuOUgyNTUuMDY3Wm02MC41LDM2Ny4zMDV2LS4wNDNsLS4wMTQuMDE0YTM0Ny4xOSwzNDcuMTksMCwwLDEtNjAuMTc3LDk1LjIyN2wtODIuMi04MS44OTNoMTkuMTc3YTI0Ljk3OCwyNC45NzgsMCwwLDAsMjQuOTQ3LTI0Ljl2LTY2LjJsMTE0LjYsMjkuODYyQTM4NS4xOTEsMzg1LjE5MSwwLDAsMSwzOTcuNjQ4LDM5MS45NzhabTg0LTUyLjQ1LjAxNS4wMTQtNTAuNjE4LTEzLjEzMUwyOTkuMzc5LDI5Mi4xVjIxOS41NzJsMTE5Ljc0Ni0zMC45OSw0LjQ2OC0xLjE1NywzOS41NC0xMC4yNTMsMTguNTExLTQuODE2QTM5MywzOTMsMCwwLDEsNDgxLjY0NCwzMzkuNTI4WlwiXVxufTtcbnZhciBmYUJ0YyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdidGMnLFxuICBpY29uOiBbMzg0LCA1MTIsIFtdLCBcImYxNWFcIiwgXCJNMzEwLjIwNCAyNDIuNjM4YzI3LjczLTE0LjE4IDQ1LjM3Ny0zOS4zOSA0MS4yOC04MS4zLTUuMzU4LTU3LjM1MS01Mi40NTgtNzYuNTczLTExNC44NS04MS45MjlWMGgtNDguNTI4djc3LjIwM2MtMTIuNjA1IDAtMjUuNTI1LjMxNS0zOC40NDQuNjNWMGgtNDguNTI4djc5LjQwOWMtMTcuODQyLjUzOS0zOC42MjIuMjc2LTk3LjM3IDB2NTEuNjc4YzM4LjMxNC0uNjc4IDU4LjQxNy0zLjE0IDYzLjAyMyAyMS40Mjd2MjE3LjQyOWMtMi45MjUgMTkuNDkyLTE4LjUyNCAxNi42ODUtNTMuMjU1IDE2LjA3MUwzLjc2NSA0NDMuNjhjODguNDgxIDAgOTcuMzcuMzE1IDk3LjM3LjMxNVY1MTJoNDguNTI4di02Ny4wNmMxMy4yMzQuMzE1IDI2LjE1NC4zMTUgMzguNDQ0LjMxNVY1MTJoNDguNTI4di02OC4wMDVjODEuMjk5LTQuNDEyIDEzNS42NDctMjQuODk0IDE0Mi44OTUtMTAxLjQ2NyA1LjY3MS02MS40NDYtMjMuMzItODguODYyLTY5LjMyNi05OS44OXpNMTUwLjYwOCAxMzQuNTUzYzI3LjQxNSAwIDExMy4xMjYtOC41MDcgMTEzLjEyNiA0OC41MjggMCA1NC41MTUtODUuNzEgNDguMjEyLTExMy4xMjYgNDguMjEydi05Ni43NHptMCAyNTEuNzc2VjI3OS44MjFjMzIuNzcyIDAgMTMzLjEyNy05LjEzOCAxMzMuMTI3IDUzLjI1NS0uMDAxIDYwLjE4Ni0xMDAuMzU1IDUzLjI1My0xMzMuMTI3IDUzLjI1M3pcIl1cbn07XG52YXIgZmFEcmliYmJsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdkcmliYmJsZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZjE3ZFwiLCBcIk0yNTYgOEMxMTkuMjUyIDggOCAxMTkuMjUyIDggMjU2czExMS4yNTIgMjQ4IDI0OCAyNDggMjQ4LTExMS4yNTIgMjQ4LTI0OFMzOTIuNzQ4IDggMjU2IDh6bTE2My45NyAxMTQuMzY2YzI5LjUwMyAzNi4wNDYgNDcuMzY5IDgxLjk1NyA0Ny44MzUgMTMxLjk1NS02Ljk4NC0xLjQ3Ny03Ny4wMTgtMTUuNjgyLTE0Ny41MDItNi44MTgtNS43NTItMTQuMDQxLTExLjE4MS0yNi4zOTMtMTguNjE3LTQxLjYxNCA3OC4zMjEtMzEuOTc3IDExMy44MTgtNzcuNDgyIDExOC4yODQtODMuNTIzek0zOTYuNDIxIDk3Ljg3Yy0zLjgxIDUuNDI3LTM1LjY5NyA0OC4yODYtMTExLjAyMSA3Ni41MTktMzQuNzEyLTYzLjc3Ni03My4xODUtMTE2LjE2OC03OS4wNC0xMjQuMDA4IDY3LjE3Ni0xNi4xOTMgMTM3Ljk2NiAxLjI3IDE5MC4wNjEgNDcuNDg5em0tMjMwLjQ4LTMzLjI1YzUuNTg1IDcuNjU5IDQzLjQzOCA2MC4xMTYgNzguNTM3IDEyMi41MDktOTkuMDg3IDI2LjMxMy0xODYuMzYgMjUuOTM0LTE5NS44MzQgMjUuODA5QzYyLjM4IDE0Ny4yMDUgMTA2LjY3OCA5Mi41NzMgMTY1Ljk0MSA2NC42MnpNNDQuMTcgMjU2LjMyM2MwLTIuMTY2LjA0My00LjMyMi4xMDgtNi40NzMgOS4yNjguMTkgMTExLjkyIDEuNTEzIDIxNy43MDYtMzAuMTQ2IDYuMDY0IDExLjg2OCAxMS44NTcgMjMuOTE1IDE3LjE3NCAzNS45NDktNzYuNTk5IDIxLjU3NS0xNDYuMTk0IDgzLjUyNy0xODAuNTMxIDE0Mi4zMDZDNjQuNzk0IDM2MC40MDUgNDQuMTcgMzEwLjczIDQ0LjE3IDI1Ni4zMjN6bTgxLjgwNyAxNjcuMTEzYzIyLjEyNy00NS4yMzMgODIuMTc4LTEwMy42MjIgMTY3LjU3OS0xMzIuNzU2IDI5Ljc0IDc3LjI4MyA0Mi4wMzkgMTQyLjA1MyA0NS4xODkgMTYwLjYzOC02OC4xMTIgMjkuMDEzLTE1MC4wMTUgMjEuMDUzLTIxMi43NjgtMjcuODgyem0yNDguMzggOC40ODljLTIuMTcxLTEyLjg4Ni0xMy40NDYtNzQuODk3LTQxLjE1Mi0xNTEuMDMzIDY2LjM4LTEwLjYyNiAxMjQuNyA2Ljc2OCAxMzEuOTQ3IDkuMDU1LTkuNDQyIDU4Ljk0MS00My4yNzMgMTA5Ljg0NC05MC43OTUgMTQxLjk3OHpcIl1cbn07XG52YXIgZmFTdHVtYmxldXBvbkNpcmNsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdzdHVtYmxldXBvbi1jaXJjbGUnLFxuICBpY29uOiBbNDk2LCA1MTIsIFtdLCBcImYxYTNcIiwgXCJNMjU2IDhDMTE5IDggOCAxMTkgOCAyNTZzMTExIDI0OCAyNDggMjQ4IDI0OC0xMTEgMjQ4LTI0OFMzOTMgOCAyNTYgOHptMCAxNzcuNWMtOS44IDAtMTcuOCA4LTE3LjggMTcuOHYxMDYuOWMwIDQwLjktMzMuOSA3My45LTc0LjkgNzMuOS00MS40IDAtNzQuOS0zMy41LTc0LjktNzQuOXYtNDYuNWg1Ny4zdjQ1LjhjMCAxMCA4IDE3LjggMTcuOCAxNy44czE3LjgtNy45IDE3LjgtMTcuOFYyMDAuMWMwLTQwIDM0LjItNzIuMSA3NC43LTcyLjEgNDAuNyAwIDc0LjcgMzIuMyA3NC43IDcyLjZ2MjMuN2wtMzQuMSAxMC4xLTIyLjktMTAuN3YtMjAuNmMuMS05LjYtNy45LTE3LjYtMTcuNy0xNy42em0xNjcuNiAxMjMuNmMwIDQxLjQtMzMuNSA3NC45LTc0LjkgNzQuOS00MS4yIDAtNzQuOS0zMy4yLTc0LjktNzQuMlYyNjNsMjIuOSAxMC43IDM0LjEtMTAuMXY0Ny4xYzAgOS44IDggMTcuNiAxNy44IDE3LjZzMTcuOC03LjkgMTcuOC0xNy42di00OGg1Ny4zYy0uMSA0NS45LS4xIDQ2LjQtLjEgNDYuNHpcIl1cbn07XG52YXIgZmFJbnRlcm5ldEV4cGxvcmVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2ludGVybmV0LWV4cGxvcmVyJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmMjZiXCIsIFwiTTQ4My4wNDkgMTU5LjcwNmMxMC44NTUtMjQuNTc1IDIxLjQyNC02MC40MzggMjEuNDI0LTg3Ljg3MSAwLTcyLjcyMi03OS42NDEtOTguMzcxLTIwOS42NzMtMzguNTc3LTEwNy42MzItNy4xODEtMjExLjIyMSA3My42Ny0yMzcuMDk4IDE4Ni40NTcgMzAuODUyLTM0Ljg2MiA3OC4yNzEtODIuMjk4IDEyMS45NzctMTAxLjE1OEMxMjUuNDA0IDE2Ni44NSA3OS4xMjggMjI4LjAwMiA0My45OTIgMjkxLjcyNSAyMy4yNDYgMzI5LjY1MSAwIDM5MC45NCAwIDQzNi43NDdjMCA5OC41NzUgOTIuODU0IDg2LjUgMTgwLjI1MSA0Mi4wMDYgMzEuNDIzIDE1LjQzIDY2LjU1OSAxNS41NzMgMTAxLjY5NSAxNS41NzMgOTcuMTI0IDAgMTg0LjI0OS01NC4yOTQgMjE2LjgxNC0xNDYuMDIySDM3Ny45MjdjLTUyLjUwOSA4OC41OTMtMTk2LjgxOSA1Mi45OTYtMTk2LjgxOS00Ny40MzZINTA5LjljNi40MDctNDMuNTgxLTEuNjU1LTk1LjcxNS0yNi44NTEtMTQxLjE2MnpNNjQuNTU5IDM0Ni44NzdjMTcuNzExIDUxLjE1IDUzLjcwMyA5NS44NzEgMTAwLjI2NiAxMjMuMzA0LTg4Ljc0MSA0OC45NC0xNzMuMjY3IDI5LjA5Ni0xMDAuMjY2LTEyMy4zMDR6bTExNS45NzctMTA4Ljg3M2MyLTU1LjE1MSA1MC4yNzYtOTQuODcxIDEwMy45OC05NC44NzEgNTMuNDE4IDAgMTAxLjk4MSAzOS43MiAxMDMuOTgxIDk0Ljg3MUgxODAuNTM2em0xODQuNTM2LTE4Ny42YzIxLjQyNS0xMC4yODcgNDguNTYzLTIyLjAwMyA3Mi41NTgtMjIuMDAzIDMxLjQyMiAwIDU0LjI3NCAyMS43MTcgNTQuMjc0IDUzLjcyMiAwIDIwLjAwMy03LjQyNyA0OS4wMDctMTQuNTY5IDY3Ljg2Ny0yNi4yOC00Mi4yOTItNjUuOTg2LTgxLjU4NC0xMTIuMjYzLTk5LjU4NnpcIl1cbn07XG52YXIgZmFTdHViYmVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0dWJiZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU1YzdcIiwgXCJNMTM2LjUgMjk0LjJsNTguOCAyMi45YzkuMS0zNi44IDI1LjQtNjEuMSA1NS02MS4xYzQ5LjQgMCA3MS40IDYzLjYgMTQyLjQgNjMuNmMxNS42IDAgMzUuOS0yLjggNTUuMy0xMy4zVjM2OGMwIDYxLjgtNTAuNCAxMTItMTEyLjMgMTEySDBsNDEuOC01NkwwIDM2OGw0MS43LTU2TDAgMjU2LjFsNDEuOC01NkwwIDE0NC4xIDQxLjggODggMCAzMkgzMzUuN0MzOTcuNiAzMiA0NDggODIuMyA0NDggMTQ0LjF2NTEuM2MtOS4yIDM2LjMtMjUuOSA2MC42LTU1IDYwLjZjLTQ5LjYgMC03MS42LTYzLjUtMTQyLjQtNjMuNWMtMzUuOSAwLTk1LjIgMTQuNi0xMTQuMSAxMDEuNmgwelwiXVxufTtcbnZhciBmYVRlbGVncmFtID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3RlbGVncmFtJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbNjI0NjIsIFwidGVsZWdyYW0tcGxhbmVcIl0sIFwiZjJjNlwiLCBcIk0yNDgsOEMxMTEuMDMzLDgsMCwxMTkuMDMzLDAsMjU2UzExMS4wMzMsNTA0LDI0OCw1MDQsNDk2LDM5Mi45NjcsNDk2LDI1NiwzODQuOTY3LDgsMjQ4LDhaTTM2Mi45NTIsMTc2LjY2Yy0zLjczMiwzOS4yMTUtMTkuODgxLDEzNC4zNzgtMjguMSwxNzguMy0zLjQ3NiwxOC41ODQtMTAuMzIyLDI0LjgxNi0xNi45NDgsMjUuNDI1LTE0LjQsMS4zMjYtMjUuMzM4LTkuNTE3LTM5LjI4Ny0xOC42NjEtMjEuODI3LTE0LjMwOC0zNC4xNTgtMjMuMjE1LTU1LjM0Ni0zNy4xNzctMjQuNDg1LTE2LjEzNS04LjYxMi0yNSw1LjM0Mi0zOS41LDMuNjUyLTMuNzkzLDY3LjEwNy02MS41MSw2OC4zMzUtNjYuNzQ2LjE1My0uNjU1LjMtMy4xLTEuMTU0LTQuMzg0cy0zLjU5LS44NDktNS4xMzUtLjVxLTMuMjgzLjc0Ni0xMDQuNjA4LDY5LjE0Mi0xNC44NDUsMTAuMTk0LTI2Ljg5NCw5LjkzNGMtOC44NTUtLjE5MS0yNS44ODgtNS4wMDYtMzguNTUxLTkuMTIzLTE1LjUzMS01LjA0OC0yNy44NzUtNy43MTctMjYuOC0xNi4yOTFxLjg0LTYuNywxOC40NS0xMy43LDEwOC40NDYtNDcuMjQ4LDE0NC42MjgtNjIuM2M2OC44NzItMjguNjQ3LDgzLjE4My0zMy42MjMsOTIuNTExLTMzLjc4OSwyLjA1Mi0uMDM0LDYuNjM5LjQ3NCw5LjYxLDIuODg1YTEwLjQ1MiwxMC40NTIsMCwwLDEsMy41Myw2LjcxNkE0My43NjUsNDMuNzY1LDAsMCwxLDM2Mi45NTIsMTc2LjY2WlwiXVxufTtcbnZhciBmYVRlbGVncmFtUGxhbmUgPSBmYVRlbGVncmFtO1xudmFyIGZhT2xkUmVwdWJsaWMgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnb2xkLXJlcHVibGljJyxcbiAgaWNvbjogWzQ5NiwgNTEyLCBbXSwgXCJmNTEwXCIsIFwiTTIzNS43NiAxMC4yM2M3LjUtLjMxIDE1LS4yOCAyMi41LS4wOSAzLjYxLjE0IDcuMi40IDEwLjc5LjczIDQuOTIuMjcgOS43OSAxLjAzIDE0LjY3IDEuNjIgMi45My40MyA1LjgzLjk4IDguNzUgMS40NiA3LjkgMS4zMyAxNS42NyAzLjI4IDIzLjM5IDUuNCAxMi4yNCAzLjQ3IDI0LjE5IDcuOTIgMzUuNzYgMTMuMjEgMjYuNTYgMTIuMjQgNTAuOTQgMjkuMjEgNzEuNjMgNDkuODggMjAuMDMgMjAuMDkgMzYuNzIgNDMuNTUgNDguODkgNjkuMTkgMS4xMyAyLjU5IDIuNDQgNS4xIDMuNDcgNy43NCAyLjgxIDYuNDMgNS4zOSAxMi45NyA3LjU4IDE5LjYzIDQuMTQgMTIuMzMgNy4zNCAyNC45OSA5LjQyIDM3LjgzLjU3IDMuMTQgMS4wNCA2LjMgMS40IDkuNDcuNTUgMy44My45NCA3LjY5IDEuMTggMTEuNTYuODMgOC4zNC44NCAxNi43My43NyAyNS4xLS4wNyA0Ljk3LS4yNiA5Ljk0LS43NSAxNC44OS0uMjQgMy4zOC0uNTEgNi43Ni0uOTggMTAuMTItLjM5IDIuNzItLjYzIDUuNDYtMS4xMSA4LjE3LS45IDUuMTUtMS43IDEwLjMxLTIuODcgMTUuNDEtNC4xIDE4LjUtMTAuMyAzNi41NS0xOC41MSA1My42My0xNS43NyAzMi44My0zOC44MyA2Mi4xNy02Ny4xMiA4NS4xMmEyNDYuNTAzIDI0Ni41MDMgMCAwIDEtNTYuOTEgMzQuODZjLTYuMjEgMi42OC0xMi40NiA1LjI1LTE4Ljg3IDcuNDEtMy41MSAxLjE2LTcuMDEgMi4zOC0xMC41NyAzLjM5LTYuNjIgMS44OC0xMy4yOSAzLjY0LTIwLjA0IDUtNC42Ni45MS05LjM0IDEuNzMtMTQuMDMgMi40OC01LjI1LjY2LTEwLjUgMS40NC0xNS43OSAxLjc0LTYuNjkuNjYtMTMuNDEuODQtMjAuMTIuODEtNi44Mi4wMy0xMy42NS0uMTItMjAuNDUtLjc5LTMuMjktLjIzLTYuNTctLjUtOS44My0uOTUtMi43Mi0uMzktNS40Ni0uNjMtOC4xNy0xLjExLTQuMTItLjcyLTguMjUtMS4zNy0xMi4zNS0yLjIyLTQuMjUtLjk0LTguNDktMS44OS0xMi42OS0zLjAyLTguNjMtMi4xNy0xNy4wOC01LjAxLTI1LjQxLTguMTMtMTAuNDktNC4xMi0yMC43OS04Ljc1LTMwLjY0LTE0LjI1LTIuMTQtMS4xNS00LjI4LTIuMjktNi4zNS0zLjU3LTExLjIyLTYuNTgtMjEuODYtMTQuMS0zMS45Mi0yMi4zNC0zNC42OC0yOC40MS02MS40MS02Ni40My03Ni4zNS0xMDguNy0zLjA5LTguNzQtNS43MS0xNy42NS03LjgtMjYuNjgtMS40OC02LjE2LTIuNTItMTIuNDItMy41OC0xOC42Ni0uNC0yLjM1LS42MS00LjczLS45NS03LjA5LS42LTMuOTYtLjc1LTcuOTYtMS4xNy0xMS45NC0uOC05LjQ3LS43MS0xOC45OS0uNTEtMjguNDkuMTQtMy41MS4zNC03LjAxLjctMTAuNTEuMzEtMy4xNy40Ni02LjM3LjkyLTkuNTIuNDEtMi44MS42NS01LjY1IDEuMTYtOC40NC43LTMuOTQgMS4zLTcuOSAyLjEyLTExLjgyIDMuNDMtMTYuNTIgOC40Ny0zMi43MyAxNS4yNi00OC4xOCAxLjE1LTIuOTIgMi41OS01LjcyIDMuODYtOC41OSA4LjA1LTE2LjcxIDE3LjktMzIuNTYgMjkuNDktNDcuMDYgMjAtMjUuMzggNDUuMS00Ni42OCA3My4yNy02Mi40NyA3LjUtNC4xNSAxNS4xNi04LjA1IDIzLjA3LTExLjM3IDE1LjgyLTYuODggMzIuNDEtMTEuOTUgNDkuMzEtMTUuMzggMy41MS0uNjcgNy4wNC0xLjI0IDEwLjU2LTEuODUgMi42Mi0uNDcgNS4yOC0uNyA3LjkxLTEuMDggMy41My0uNTMgNy4xLS42OCAxMC42NS0xLjA0IDIuNDYtLjI0IDQuOTEtLjM2IDcuMzYtLjUxbTguNjQgMjQuNDFjLTkuMjMuMS0xOC40My45OS0yNy41NyAyLjIzLTcuMyAxLjA4LTE0LjUzIDIuNi0yMS43MSA0LjMtMTMuOTEgMy41LTI3LjQ4IDguMzQtNDAuNDYgMTQuNDItMTAuNDYgNC45OS0yMC41OSAxMC43LTMwLjE4IDE3LjIyLTQuMTggMi45Mi04LjQgNS44LTEyLjM0IDkuMDMtNS4wOCAzLjk3LTkuOTggOC4xNy0xNC42OCAxMi41OS0yLjUxIDIuMjQtNC44MSA0LjctNy4yMiA3LjA2LTI4LjIyIDI4Ljc5LTQ4LjQ0IDY1LjM5LTU3LjUgMTA0LjY5LTIuMDQgOC40NC0zLjU0IDE3LjAyLTQuNDQgMjUuNjUtMS4xIDguODktMS40NCAxNy44NS0xLjQxIDI2LjguMTEgNy4xNC4zOCAxNC4yOCAxLjIyIDIxLjM3LjYyIDcuMTIgMS44NyAxNC4xNiAzLjIgMjEuMTggMS4wNyA0LjY1IDIuMDMgOS4zMiAzLjMzIDEzLjkxIDYuMjkgMjMuMzggMTYuNSA0NS43IDMwLjA3IDY1Ljc1IDguNjQgMTIuOTggMTguNzggMjQuOTMgMjkuOTggMzUuNzcgMTYuMjggMTUuODIgMzUuMDUgMjkuMDQgNTUuMzQgMzkuMjIgNy4yOCAzLjUyIDE0LjY2IDYuODcgMjIuMjcgOS42MyA1LjA0IDEuNzYgMTAuMDYgMy41NyAxNS4yMiA0Ljk4IDExLjI2IDMuMjMgMjIuNzcgNS42IDM0LjM5IDcuMDYgMi45MS4yOSA1LjgxLjYxIDguNzIuOSAxMy44MiAxLjA4IDI3Ljc0IDEgNDEuNTQtLjQzIDQuNDUtLjYgOC45Mi0uOTkgMTMuMzUtMS43OCAzLjYzLS42NyA3LjI4LTEuMjUgMTAuODctMi4xIDQuMTMtLjk4IDguMjgtMS45MSAxMi4zNi0zLjA3IDI2LjUtNy4zNCA1MS41OC0xOS43MSA3My41OC0zNi4yIDE1Ljc4LTExLjgyIDI5Ljk2LTI1Ljc2IDQyLjEyLTQxLjI4IDMuMjYtNC4wMiA2LjE3LTguMzEgOS4xMy0xMi41NSAzLjM5LTUuMDYgNi41OC0xMC4yNSA5LjYtMTUuNTQgMi40LTQuNDQgNC43NC04LjkxIDYuOTUtMTMuNDUgNS42OS0xMi4wNSAxMC4yOC0yNC42MiAxMy43NS0zNy40OSAyLjU5LTEwLjAxIDQuNzUtMjAuMTYgNS45LTMwLjQ1IDEuNzctMTMuNDcgMS45NC0yNy4xIDEuMjktNDAuNjUtLjI5LTMuODktLjY3LTcuNzctMS0xMS42Ni0yLjIzLTE5LjA4LTYuNzktMzcuOTEtMTMuODItNTUuOC01Ljk1LTE1LjEzLTEzLjUzLTI5LjYzLTIyLjYxLTQzLjEzLTEyLjY5LTE4LjgtMjguMjQtMzUuNjgtNDUuOTctNDkuODMtMjUuMDUtMjAtNTQuNDctMzQuNTUtODUuNjUtNDIuMDgtNy43OC0xLjkzLTE1LjY5LTMuMzQtMjMuNjMtNC40NS0zLjkxLS41OS03Ljg1LS44Mi0xMS43Ny0xLjI0LTcuMzktLjU3LTE0LjgxLS43Mi0yMi4yMi0uNTh6TTEzOS4yNiA4My41M2MxMy4zLTguODkgMjguMDgtMTUuMzggNDMuMy0yMC4xOC0zLjE3IDEuNzctNi40NCAzLjM4LTkuNTMgNS4yOS0xMS4yMSA2LjY4LTIxLjUyIDE0LjktMzAuMzggMjQuNDktNi44IDcuNDMtMTIuNzYgMTUuNzMtMTcuMDEgMjQuODktMy4yOSA2Ljg2LTUuNjQgMTQuMTktNi44NiAyMS43MS0uOTMgNC44NS0xLjMgOS44MS0xLjE3IDE0Ljc1LjEzIDEzLjY2IDQuNDQgMjcuMDggMTEuMjkgMzguODIgNS45MiAxMC4yMiAxMy42MyAxOS4zMyAyMi4zNiAyNy4yNiA0Ljg1IDQuMzYgMTAuMjQgOC4wOSAxNC45NSAxMi42IDIuMjYgMi4xOSA0LjQ5IDQuNDIgNi40MyA2LjkxIDIuNjIgMy4zMSA0Ljg5IDYuOTkgNS45OSAxMS4xLjkgMy4wMi42NiA2LjIuNjkgOS4zMS4wMiA0LjEtLjA0IDguMi4wMyAxMi4zLjE0IDMuNTQtLjAyIDcuMDkuMTEgMTAuNjMuMDggMi4zOC4wMiA0Ljc2LjA1IDcuMTQuMTYgNS43Ny4wNiAxMS41My4xNSAxNy4zLjExIDIuOTEuMDIgNS44Mi4xMyA4Ljc0LjAzIDEuNjMuMTMgMy4yOC0uMDMgNC45MS0uOTEuMTItMS44Mi4xOC0yLjczLjE2LTEwLjk5IDAtMjEuODgtMi42My0zMS45NS02LjkzLTYtMi43LTExLjgxLTUuODktMTcuMDktOS44My01Ljc1LTQuMTktMTEuMDktOC45Ni0xNS43OS0xNC4zMS02LjUzLTcuMjQtMTEuOTgtMTUuMzktMTYuNjItMjMuOTUtMS4wNy0yLjAzLTIuMjQtNC4wMi0zLjE4LTYuMTItMS4xNi0yLjY0LTIuNjItNS4xNC0zLjY3LTcuODItNC4wNS05LjY4LTYuNTctMTkuOTQtOC4wOC0zMC4zMS0uNDktNC40NC0xLjA5LTguODgtMS4yLTEzLjM1LS43LTE1LjczLjg0LTMxLjU1IDQuNjctNDYuODIgMi4xMi04LjE1IDQuNzctMTYuMTggOC4zMS0yMy44MyA2LjMyLTE0LjIgMTUuMzQtMjcuMTggMjYuMy0zOC4xOSA2LjI4LTYuMiAxMy4xMy0xMS44NCAyMC41My0xNi42N3ptMTc1LjM3LTIwLjEyYzIuNzQuNzQgNS40MSAxLjc0IDguMDkgMi42OCA2LjM2IDIuMzMgMTIuNjggNC44NCAxOC43MSA3Ljk2IDEzLjExIDYuNDQgMjUuMzEgMTQuODEgMzUuODIgMjQuOTcgMTAuMiA5Ljk1IDE4Ljc0IDIxLjYgMjUuMTQgMzQuMzQgMS4yOCAyLjc1IDIuNjQgNS40NiAzLjgxIDguMjYgNi4zMSAxNS4xIDEwIDMxLjI2IDExLjIzIDQ3LjU3LjQxIDQuNTQuNDQgOS4wOS40NSAxMy42NC4wNyAxMS42NC0xLjQ5IDIzLjI1LTQuMyAzNC41My0xLjk3IDcuMjctNC4zNSAxNC40OS03Ljg2IDIxLjE4LTMuMTggNi42NC02LjY4IDEzLjE2LTEwLjg0IDE5LjI0LTYuOTQgMTAuNDctMTUuNiAxOS44Ny0yNS44MiAyNy4yMi0xMC40OCA3LjY0LTIyLjY0IDEzLjAyLTM1LjQgMTUuMzgtMy41MS42OS03LjA4IDEuMDgtMTAuNjYgMS4yMS0xLjg1LjA2LTMuNzIuMTYtNS41Ni0uMS0uMjgtMi4xNSAwLTQuMzEtLjAxLTYuNDYtLjAzLTMuNzMuMTQtNy40NS4xLTExLjE3LjE5LTcuMDIuMDItMTQuMDUuMjEtMjEuMDcuMDMtMi4zOC0uMDMtNC43Ni4wMy03LjE0LjE3LTUuMDctLjA0LTEwLjE0LjE0LTE1LjIxLjEtMi45OS0uMjQtNi4wNC41MS04Ljk2LjY2LTIuNSAxLjc4LTQuODYgMy4wOS03LjA4IDQuNDYtNy4zMSAxMS4wNi0xMi45NiAxNy42OC0xOC4yNiA1LjM4LTQuMTggMTAuNDctOC43NyAxNS4wMi0xMy44NCA3LjY4LTguMzcgMTQuMTctMTcuODggMTguNzgtMjguMjcgMi41LTUuOTMgNC41Mi0xMi4xIDUuNTUtMTguNDYuODYtNC4zNyAxLjA2LTguODMgMS4wMS0xMy4yNy0uMDItNy44NS0xLjQtMTUuNjUtMy42NC0yMy4xNy0xLjc1LTUuNzMtNC4yNy0xMS4xOC03LjA5LTE2LjQ1LTMuODctNi45My04LjY1LTEzLjMxLTEzLjk2LTE5LjItOS45NC0xMC44NS0yMS43NS0xOS45NC0zNC42LTI3LjEtMS44NS0xLjAyLTMuODQtMS44Mi01LjYzLTIuOTd6bS0xMDAuOCA1OC40NWMuOTgtMS4xOCAxLjk5LTIuMzMgMy4xMi0zLjM4LS42MS45My0xLjI3IDEuODEtMS45NSAyLjY4LTMuMSAzLjg4LTUuNTQgOC4zMS03LjAzIDEzLjA2LS44NyAzLjI3LTEuNjggNi42LTEuNzMgMTAtLjA3IDIuNTItLjA4IDUuMDcuMzIgNy41NyAxLjEzIDcuNjMgNC4zMyAxNC44NSA4Ljc3IDIxLjEyIDIgMi43IDQuMjUgNS4yNyA2LjkyIDcuMzMgMS42MiAxLjI3IDMuNTMgMi4wOSA1LjM0IDMuMDUgMy4xMSAxLjY4IDYuMzIgMy4yMyA5LjA3IDUuNDggMi42NyAyLjA5IDQuNTUgNS4zMyA0LjQgOC43OS0uMDEgNzMuNjcgMCAxNDcuMzQtLjAxIDIyMS4wMiAwIDEuMzUtLjA4IDIuNy4wNCA0LjA0LjEzIDEuNDguODIgMi44MyAxLjQ3IDQuMTUuODYgMS42NiAxLjc4IDMuMzQgMy4xOCA0LjYyLjg1Ljc3IDEuOTcgMS40IDMuMTUgMS4yNCAxLjUtLjIgMi42Ni0xLjM1IDMuNDUtMi41Ny45Ni0xLjUxIDEuNjgtMy4xNiAyLjI4LTQuODUuNzYtMi4xMy40NC00LjQyLjU0LTYuNjMuMTQtNC4wMy0uMDItOC4wNi4xNC0xMi4wOS4wMy01Ljg5LjAzLTExLjc3LjA2LTE3LjY2LjE0LTMuNjIuMDMtNy4yNC4xMS0xMC44Ni4xNS00LjAzLS4wMi04LjA2LjE0LTEyLjA5LjAzLTUuOTkuMDMtMTEuOTguMDctMTcuOTcuMTQtMy42Mi4wMi03LjI0LjExLTEwLjg2LjE0LTMuOTMtLjAyLTcuODYuMTQtMTEuNzguMDMtNS45OS4wMy0xMS45OC4wNi0xNy45Ny4xNi0zLjk0LS4wMS03Ljg4LjE5LTExLjgyLjI5IDEuNDQuMTMgMi45Mi4yMiA0LjM4LjE5IDMuNjEuNDIgNy4yMy43NiAxMC44NC4zMiAzLjQ0LjQ0IDYuODkuODYgMTAuMzIuMzcgMy4xLjUxIDYuMjIuOTUgOS4zMS41NyA0LjA5Ljg3IDguMjEgMS41NCAxMi4yOSAxLjQ2IDkuMDQgMi44MyAxOC4xMSA1LjA5IDI2Ljk5IDEuMTMgNC44MiAyLjQgOS42MSA0IDE0LjMgMi41NCA3LjkgNS43MiAxNS42NyAxMC4zMSAyMi42MiAxLjczIDIuNjQgMy44NyA0Ljk4IDYuMSA3LjIxLjI3LjI1LjU1LjUxLjg4LjcxLjYuMjUgMS4zMS0uMDcgMS43LS41Ny43MS0uODggMS4xNy0xLjk0IDEuNy0yLjkzIDQuMDUtNy44IDguMTgtMTUuNTYgMTIuMzQtMjMuMzEuNy0xLjMxIDEuNDQtMi42MiAyLjU2LTMuNjEgMS43NS0xLjU3IDMuODQtMi42OSA1Ljk4LTMuNjMgMi44OC0xLjIyIDUuOS0yLjE5IDkuMDMtMi40MiA2LjU4LS42MiAxMy4xMS43NSAxOS41NiAxLjg1IDMuNjkuNTggNy40IDEuMTcgMTEuMTMgMS40MSAzLjc0LjEgNy40OC4wNSAxMS4yMS0uMjggOC41NS0uOTIgMTYuOTktMi45NiAyNC45NC02LjI1IDUuMy0yLjI0IDEwLjQ2LTQuODMgMTUuMzEtNy45MyAxMS40Ni03LjIxIDIxLjQ2LTE2LjU3IDMwLjA0LTI3LjAxIDEuMTctMS40MiAyLjI1LTIuOSAzLjQ2LTQuMjgtMS4yIDMuMjQtMi42NyA2LjM3LTQuMTYgOS40OC0xLjI1IDIuOS0yLjg0IDUuNjEtNC4yNyA4LjQyLTUuMTYgOS42My0xMS4wMiAxOC45MS0xNy43NSAyNy41Mi00LjAzIDUuMjEtOC41MyAxMC4wNS0xMy4zMyAxNC41Ny02LjY0IDYuMDUtMTQuMDcgMTEuMzctMjIuNDMgMTQuNzYtOC4yMSAzLjM3LTE3LjMxIDQuNjMtMjYuMDkgMy4yOS0zLjU2LS41OC03LjAxLTEuNjktMTAuNDEtMi44OC0yLjc5LS45Ny01LjM5LTIuMzgtOC4wMy0zLjY5LTMuNDMtMS43MS02LjY0LTMuODEtOS43MS02LjA4IDIuNzEgMy4wNiA1LjY5IDUuODYgOC43IDguNjEgNC4yNyAzLjc2IDguNzQgNy4zMSAxMy42MyAxMC4yMyAzLjk4IDIuNDUgOC4yOSA0LjQgMTIuODQgNS41MSAxLjQ2LjM3IDIuOTYuNDYgNC40NS42LTEuMjUgMS4xLTIuNjMgMi4wNC0zLjk5IDIuOTgtOS42MSA2LjU0LTIwLjAxIDExLjg2LTMwLjY5IDE2LjQzLTIwLjg2IDguNy00My4xNyAxMy45Ny02NS43NCAxNS4zNC00LjY2LjI0LTkuMzIuMzYtMTMuOTguMzYtNC45OC0uMTEtOS45Ny0uMTMtMTQuOTItLjY1LTExLjItLjc2LTIyLjI5LTIuNzMtMzMuMTctNS40My0xMC4zNS0yLjcxLTIwLjU1LTYuMTItMzAuMy0xMC41NS04LjcxLTMuODYtMTcuMTItOC40Mi0yNC45OS0xMy43OS0xLjgzLTEuMzEtMy43NC0yLjUzLTUuMzctNC4wOCA2LjYtMS4xOSAxMy4wMy0zLjM5IDE4Ljk5LTYuNDggNS43NC0yLjg2IDEwLjk5LTYuNjYgMTUuNjMtMTEuMDcgMi4yNC0yLjE5IDQuMjktNC41OSA2LjE5LTcuMDktMy40MyAyLjEzLTYuOTMgNC4xNS0xMC42MiA1Ljc4LTQuNDEgMi4xNi05LjA3IDMuNzctMTMuODEgNS4wMi01LjczIDEuNTItMTEuNzQgMS43My0xNy42MSAxLjE0LTguMTMtLjk1LTE1Ljg2LTQuMjctMjIuNTEtOC45OC00LjMyLTIuOTQtOC4yMi02LjQzLTExLjk2LTEwLjA2LTkuOTMtMTAuMTYtMTguMi0yMS44MS0yNS42Ni0zMy44Ni0zLjk0LTYuMjctNy41My0xMi43NS0xMS4xMi0xOS4yMi0xLjA1LTIuMDQtMi4xNS00LjA1LTMuMTgtNi4xIDIuODUgMi45MiA1LjU3IDUuOTcgOC40MyA4Ljg4IDguOTkgOC45NyAxOC41NiAxNy40NCAyOS4xNiAyNC40OCA3LjU1IDQuOSAxNS42NyA5LjIzIDI0LjU2IDExLjAzIDMuMTEuNzMgNi4zMi40NyA5LjQ3LjgxIDIuNzcuMjggNS41Ni4yIDguMzQuMyA1LjA1LjA2IDEwLjExLjA0IDE1LjE2LS4xNiAzLjY1LS4xNiA3LjI3LS42NiAxMC44OS0xLjA5IDIuMDctLjI1IDQuMTEtLjcxIDYuMTQtMS4yIDMuODgtLjk1IDguMTEtLjk2IDExLjgzLjYxIDQuNzYgMS44NSA4LjQ0IDUuNjQgMTEuMzggOS43MSAyLjE2IDMuMDIgNC4wNiA2LjIyIDUuNjYgOS41OCAxLjE2IDIuNDMgMi40NiA0Ljc5IDMuNTUgNy4yNiAxIDIuMjQgMi4xNSA0LjQyIDMuNDIgNi41Mi42NyAxLjAyIDEuNCAyLjE1IDIuNjIgMi41NSAxLjA2LS43NSAxLjcxLTEuOTEgMi4yOC0zLjAzIDIuMS00LjE2IDMuNDItOC42NSA0Ljg5LTEzLjA1IDIuMDItNi41OSAzLjc4LTEzLjI3IDUuMTktMjAuMDIgMi4yMS05LjI1IDMuMjUtMTguNzIgNC41NC0yOC4xMy41Ni0zLjk4LjgzLTcuOTkgMS4zMS0xMS45Ny44Ny0xMC42NCAxLjktMjEuMjcgMi4yNC0zMS45NC4wOC0xLjg2LjI0LTMuNzEuMjUtNS41Ny4wMS00LjM1LjI1LTguNjkuMjItMTMuMDMtLjAxLTIuMzgtLjAxLTQuNzYgMC03LjEzLjA1LTUuMDctLjItMTAuMTQtLjIyLTE1LjIxLS4yLTYuNjEtLjcxLTEzLjItMS4yOS0xOS43OC0uNzMtNS44OC0xLjU1LTExLjc4LTMuMTItMTcuNTEtMi4wNS03Ljc1LTUuNTktMTUuMDMtOS44LTIxLjgyLTMuMTYtNS4wNy02Ljc5LTkuODgtMTEuMDktMTQuMDMtMy44OC0zLjg2LTguNTgtNy4wOC0xMy45NC04LjQ1LTEuNS0uNDEtMy4wNi0uNDUtNC41OS0uNjQuMDctMi45OS43LTUuOTMgMS4yNi04Ljg1IDEuNTktNy43MSAzLjgtMTUuMyA2Ljc2LTIyLjYgMS41Mi00LjAzIDMuNDEtNy45IDUuMzktMTEuNzIgMy40NS02LjU2IDcuNjItMTIuNzkgMTIuNDYtMTguNDZ6bTMxLjI3IDEuN2MuMzUtLjA2LjcxLS4xMiAxLjA3LS4xOS4xOSAxLjc5LjA5IDMuNTguMSA1LjM3djM4LjEzYy0uMDEgMS43NC4xMyAzLjQ5LS4xNSA1LjIyLS4zNi0uMDMtLjcxLS4wNS0xLjA2LS4wNS0uOTUtMy43NS0xLjcyLTcuNTUtMi42Mi0xMS4zMS0uMzgtMS41My0uNTgtMy4wOS0xLjA3LTQuNTktMS43LS4yNC0zLjQzLS4xNy01LjE1LS4yLTUuMDYtLjAxLTEwLjEzIDAtMTUuMTktLjAxLTEuNjYtLjAxLTMuMzIuMDktNC45OC0uMDMtLjAzLS4zOS0uMjYtLjkxLjE2LTEuMTggMS4yOC0uNjUgMi43Mi0uODggNC4wNi0xLjM1IDMuNDMtMS4xNCA2Ljg4LTIuMTYgMTAuMzEtMy4zMSAxLjM5LS40OCAyLjktLjcyIDQuMTYtMS41NC4wNC0uNTYuMDItMS4xMy0uMDUtMS42OC0xLjIzLS41NS0yLjUzLS44Ny0zLjgxLTEuMjgtMy4xMy0xLjAzLTYuMjktMS45Ni05LjQxLTMuMDItMS43OS0uNjItMy42Ny0xLTUuNDEtMS43OS0uMDMtLjM3LS4wNy0uNzMtLjExLTEuMDkgNS4wOS0uMTkgMTAuMi4wNiAxNS4zLS4xMiAzLjM2LS4xMyA2LjczLjA4IDEwLjA5LS4wNy4xMi0uMzkuMjYtLjc3LjM3LTEuMTYgMS4wOC00Ljk0IDIuMzMtOS44MyAzLjM5LTE0Ljc1em01Ljk3LS4yYy4zNi4wNS43Mi4xMiAxLjA4LjIuOTggMy44NSAxLjczIDcuNzYgMi43MSAxMS42MS4zNiAxLjQyLjU2IDIuODggMS4wMyA0LjI3IDIuNTMuMTggNS4wNy0uMDEgNy42MS4wNSA1LjE2LjEyIDEwLjMzLjEyIDE1LjQ5LjA3Ljc2LS4wMSAxLjUyLjAzIDIuMjguMDgtLjA0LjM2LS4wNy43Mi0uMSAxLjA4LTEuODIuODMtMy43OCAxLjI1LTUuNjcgMS44OS0zLjczIDEuMjMtNy40OCAyLjM5LTExLjIyIDMuNTctLjU3LjE3LTEuMTIuNDItMS42Ny42NC0uMTUuNTUtLjE4IDEuMTItLjEyIDEuNjkuODcuNDggMS44Mi44MSAyLjc3IDEuMDkgNC44OCAxLjUyIDkuNzMgMy4xNCAxNC42MyA0LjYuMzguMTMuNzguMjcgMS4xMy40OS40LjI3LjIzLjc5LjE1IDEuMTgtMS42Ni4xMy0zLjMxLjAzLTQuOTcuMDQtNS4xNy4wMS0xMC4zMy0uMDEtMTUuNS4wMS0xLjYxLjAzLTMuMjItLjAyLTQuODIuMjEtLjUyIDEuNjctLjcyIDMuNDItMS4xNyA1LjExLS45NCAzLjU3LTEuNTIgNy4yNC0yLjU0IDEwLjc4LS4zNi4wMS0uNzEuMDItMS4wNi4wNi0uMjktMS43My0uMTUtMy40OC0uMTUtNS4yMnYtMzguMTNjLjAyLTEuNzgtLjA4LTMuNTguMTEtNS4zN3pNNjUuMDUgMTY4LjMzYzEuMTItMi4xNSAyLjA4LTQuNCAzLjM3LTYuNDYtMS44MiA3LjU2LTIuOTEgMTUuMjctMy42MiAyMy0uOCA3LjcxLS44NSAxNS40OS0uNTQgMjMuMjMgMS4wNSAxOS45NCA1LjU0IDM5LjgzIDE0LjIzIDU3Ljg4IDIuOTkgNS45OSA2LjM1IDExLjgzIDEwLjUgMTcuMTEgNi4xMiA3LjQ3IDEyLjUzIDE0Ljc2IDE5Ljg0IDIxLjA5IDQuOCA0LjEgOS45OSA3Ljc4IDE1LjU0IDEwLjggMy4yNyAxLjY1IDYuNTEgMy4zOSA5Ljk0IDQuNjggNS4wMSAyLjAzIDEwLjE5IDMuNjEgMTUuNDIgNC45NCAzLjgzLjk2IDcuNzggMS40MSAxMS41MiAyLjcxIDUgMS41NyA5LjQ3IDQuNjEgMTMuMDMgOC40MyA0LjkzIDUuMjMgOC4wOSAxMS44NyAxMC4yIDE4LjY3Ljk5IDIuOSAxLjU5IDUuOTEgMi4xNyA4LjkyLjE1Ljc1LjIyIDEuNTIuMTYgMi4yOS02LjUgMi43OC0xMy4yNiA1LjA2LTIwLjI2IDYuMTgtNC4xMS43OC04LjI5Ljk5LTEyLjQ2IDEuMDgtMTAuMjUuMjQtMjAuNDctMS43Ni0zMC4xMi01LjEyLTMuNzQtMS40Mi03LjQ5LTIuODUtMTEuMDMtNC43Mi04LjA2LTMuODQtMTUuNjQtOC43LTIyLjQ2LTE0LjQ2LTIuOTItMi41NS01LjgzLTUuMTMtOC40LTguMDMtOS4xNi05LjgzLTE2LjMtMjEuNDEtMjEuNzktMzMuNjUtMi4zOS01LjU1LTQuNjEtMTEuMTgtNi4zNy0xNi45Ni0xLjE3LTMuOTQtMi4zNi03Ljg5LTMuMjYtMTEuOTEtLjc1LTIuOTQtMS4yMi01Ljk1LTEuODctOC45Mi0uNDYtMi4xNC0uNjktNC4zMi0xLjAzLTYuNDgtLjg1LTUuNDMtMS4yOC0xMC45My0xLjMzLTE2LjQzLjExLTYuMTguMjUtMTIuMzcgMS4wNy0xOC41LjQtMi44Ni42Ny01Ljc0IDEuMTUtOC42Ljk4LTUuNyAyLjE0LTExLjM3IDMuNzEtMTYuOTMgMy4wOS0xMS42NSA3LjQ4LTIyLjk1IDEyLjY5LTMzLjg0em0zNjMuNzMtNi40NGMxLjEgMS42NiAxLjkxIDMuNDggMi43OCA1LjI2IDIuMSA0LjQ1IDQuMjQgOC45IDYuMDIgMTMuNDkgNy42MSAxOC43NiAxMi4zIDM4Ljc5IDEzLjA0IDU5LjA1LjAyIDEuNzYuMDcgMy41Mi4xMSA1LjI5LjEzIDkuNTctMS4yNyAxOS4wOS0zLjE4IDI4LjQ1LS43MyAzLjU5LTEuNTQgNy4xNy0yLjU4IDEwLjY5LTQuMDQgMTQuNzItMTAgMjktMTguNDEgNDEuNzgtOC4yMSAxMi41Ny0xOS4wMSAyMy41NS0zMS44NCAzMS40MS01LjczIDMuNTktMTEuNzkgNi42NC0xOC4wNSA5LjE5LTUuNzggMi4xOS0xMS43MSA0LjAzLTE3LjggNS4xMS02LjQgMS4wNS0xMi45MSAxLjUyLTE5LjQgMS4yMy03LjkyLS40OC0xNS43OC0yLjA3LTIzLjIxLTQuODUtMS45NC0uOC0zLjk0LTEuNDYtNS44NC0yLjMzLS4yMS0xLjUxLjI1LTIuOTkuNTMtNC40NiAxLjE2LTUuNzQgMy4wMy0xMS4zNiA1LjctMTYuNTggMi4zNy00LjUxIDUuNTItOC42NSA5LjQ2LTExLjkgMi40My0yLjA1IDUuMjQtMy42MSA4LjE2LTQuODMgMy41OC0xLjUgNy40Ny0xLjk3IDExLjI0LTIuODMgNy4yMy0xLjcxIDE0LjM3LTMuOTMgMjEuMTUtNyAxMC4zNS00LjY1IDE5LjcxLTExLjM4IDI3LjY1LTE5LjQ2IDEuNTktMS42MSAzLjIzLTMuMTggNC43NC00Ljg3IDMuMzctMy43NiA2LjcxLTcuNTcgOS44NS0xMS41MyA3LjQ4LTEwLjA3IDEyLjgyLTIxLjU5IDE2LjcxLTMzLjQ4IDEuNTgtNS4zIDMuMjEtMTAuNiA0LjIxLTE2LjA1LjYzLTIuODcgMS4wNC01Ljc4IDEuNTItOC42OC44Ny02LjA5IDEuNTktMTIuMjIgMS42OC0xOC4zOC4xMi02LjY1LjE0LTEzLjMyLS41My0xOS45NC0uNzMtNy45OS0xLjg3LTE1Ljk2LTMuNzEtMjMuNzh6XCJdXG59O1xudmFyIGZhT2R5c2VlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ29keXNlZScsXG4gIGljb246IFs1MTIsIDUxMiwgW10sIFwiZTVjNlwiLCBcIk00MDYuNyA0NjNjLTQyLjMgMzAuOC05NC40IDQ5LTE1MC43IDQ5QzE0NC45IDUxMiA1MC4zIDQ0MS4yIDE0LjkgMzQyLjJjMi40IDEuNyA1LjkgMy42IDcuOSA0LjRjMTYuMyA3LjQgNDAuMS01LjQgNjIuOS0yOC43YzYuOS02LjkgMTQuNC0xMi40IDIyLjgtMTcuM2MxOC4zLTExLjkgMzcuNi0yMC44IDU4LjQtMjcuMmMwIDAgMjIuMyAzNC4yIDQzLjEgNzQuOHMtMjIuMyA1NC0yNy4yIDU0Yy0uMyAwLS44IDAtMS41LS4xYy0xMS0uNS03MC0zLTU2IDUxLjFjMTQuOSA1Ny40IDk3LjUgMzYuNiAxMzkuNiA4LjlzMzEuNy0xMTguMyAzMS43LTExOC4zYzQxLjEtNi40IDU0IDM3LjEgNTcuOSA1OS40Yy44IDQuNiAxLjEgOS45IDEuNCAxNS41YzEuMSAyMS4yIDIuMyA0NS42IDM1LjMgNDYuNGM1LjMgMCAxMC42LS44IDE1LjUtMnptLTk1LjMtMjMuN2MtMi0uNS0zLjUtMi41LTMtNWMxLTIuNSAzLTMuNSA1LTNzMy41IDMgMyA1cy0yLjUgMy41LTUgM3ptLTIwNy05NS42YzEuNS0uNSAzLjUgMSA0IDNjMCAyLTEgNC0zIDRjLTEuNSAuNS0zLjUtMS00LTNjLS41LTEuNSAxLTMuNSAzLTR6TTQ1MS44IDQyMUM0ODkuMyAzNzYuNCA1MTIgMzE4LjggNTEyIDI1NmMwLTY3LjUtMjYuMS0xMjguOS02OC44LTE3NC43Yy0uMSAyMy41LTYuMSA0OC4yLTE2LjggNjkuMmMtMTEuOSAyMC4zLTQ5IDU4LjktNjkuOCA3OC43Yy0uNyAuMy0xLjEgLjktMS41IDEuNGMtLjIgLjItLjMgLjQtLjUgLjZjLTUgNi45LTQgMTYuOCAzIDIxLjhjMjEuMyAxNS44IDU2LjQgNDUuNiA1OS40IDcyLjhjMy41IDM0LjkgMjcuOSA3NS42IDM0LjIgODYuMmwwIDBjLjggMS4zIDEuMyAyLjEgMS40IDIuNGMwIDIuMi0uNCA0LjMtLjggNi41ek0zOTAuNyAyNTFjLS41IDMgMSA1LjkgNCA2LjRzNS45LTEgNi40LTRzLTEtNS45LTQtNi40Yy0zLTEtNS45IDEtNi40IDR6bTYxLjQtNjAuOWwtMTEuNCA1LjQtMyAxMi45LTUuNC0xMS40LTEyLjktMyAxMS40LTUuNCAzLTEyLjkgNS40IDExLjQgMTIuOSAzek0zOTUuNSA0MS4zYy0xNi4yIDguMi0yMi4xIDMyLjgtMjkgNjEuNGwwIDBjLS4zIDEuNC0uNyAyLjgtMSA0LjJjLTkuNSAzOC41LTMwLjYgMzcuNi00MS43IDM3LjJjLTEuMSAwLTItLjEtMi45LS4xYy01LjEgMC02LTQtOC45LTE3LjFjLTIuNi0xMi4xLTYuOS0zMi0xNy45LTYzLjZDMjcxLjQtMi41IDIxMS40IDEzLjkgMTY1LjkgNDEuMUMxMTAuNiA3NC4yIDEzMS41IDE0MyAxNDYuMSAxOTAuNWMuNyAyLjIgMS40IDQuNCAyIDYuNmMtNCA0LTEzLjggNy41LTI2IDExLjljLTEyLjEgNC4zLTI2LjYgOS41LTQwLjMgMTYuOUM0Ny45IDI0My45IDExLjUgMjc0LjkgMiAyODguNUMuNyAyNzcuOCAwIDI2NyAwIDI1NkMwIDExNC42IDExNC42IDAgMjU2IDBjNTEuNCAwIDk5LjQgMTUuMiAxMzkuNSA0MS4zek01OC45IDE4OS42Yy0xLjUtMi00LjUtMy02LjQtMS41cy0zIDQuNS0xLjUgNi40czQuNSAzIDYuNCAxLjVjMi41LTEuNSAzLTQuNSAxLjUtNi40ek0zMjcuMyA2NC45YzItMS41IDUtLjUgNi40IDEuNWMxLjUgMi41IDEgNS40LTEuNSA2LjRjLTIgMS41LTUgLjUtNi40LTEuNXMtLjUtNSAxLjUtNi40ek05NS4xIDEwNWMtLjUgMS41IC41IDMgMiAzYzEuNSAuNSAzLS41IDMtMmMuNS0xLjUtLjUtMy0yLTNzLTMgLjUtMyAyem04NC43LS41Yy0zLjUtNDMuMSAzNy4xLTU0IDM3LjEtNTRjNDQuMS0xNS40IDU2IDUuOSA2Ni40IDM3LjZzMyA0Mi42LTM4LjYgNTguOXMtNjEuOS00LjUtNjQuOS00Mi42em04OS42IDE0LjloMWMyLjUgMCA1LTIgNS01YzItNi45IDEtMTQuNC0yLTIwLjhjLTEuNS0yLTQtMy41LTYuNC0yLjVjLTMgMS00LjUgNC0zLjUgNi45YzIgNC41IDMgOS45IDEuNSAxNC45Yy0uNSAzIDEuNSA1LjkgNC41IDYuNHptLTkuOS00MS42Yy0yIDAtNC0xLTUtM3MtMi0zLjUtMy01Yy0yLTItMi01LjQgMC03LjRzNS40LTIgNy40IDBjMiAyLjUgMy41IDUgNSA3LjRzLjUgNS45LTIuNSA3LjRjLS42IDAtMSAuMi0xLjMgLjNjLS4yIC4xLS40IC4yLS42IC4yelwiXVxufTtcbnZhciBmYVNxdWFyZVdoYXRzYXBwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS13aGF0c2FwcCcsXG4gIGljb246IFs0NDgsIDUxMiwgW1wid2hhdHNhcHAtc3F1YXJlXCJdLCBcImY0MGNcIiwgXCJNOTIuMSAyNTQuNmMwIDI0LjkgNyA0OS4yIDIwLjIgNzAuMWwzLjEgNS0xMy4zIDQ4LjZMMTUyIDM2NS4ybDQuOCAyLjljMjAuMiAxMiA0My40IDE4LjQgNjcuMSAxOC40aC4xYzcyLjYgMCAxMzMuMy01OS4xIDEzMy4zLTEzMS44YzAtMzUuMi0xNS4yLTY4LjMtNDAuMS05My4yYy0yNS0yNS01OC0zOC43LTkzLjItMzguN2MtNzIuNyAwLTEzMS44IDU5LjEtMTMxLjkgMTMxLjh6TTI3NC44IDMzMGMtMTIuNiAxLjktMjIuNCAuOS00Ny41LTkuOWMtMzYuOC0xNS45LTYxLjgtNTEuNS02Ni45LTU4LjdjLS40LS42LS43LS45LS44LTEuMWMtMi0yLjYtMTYuMi0yMS41LTE2LjItNDFjMC0xOC40IDktMjcuOSAxMy4yLTMyLjNjLjMtLjMgLjUtLjUgLjctLjhjMy42LTQgNy45LTUgMTAuNi01YzIuNiAwIDUuMyAwIDcuNiAuMWMuMyAwIC41IDAgLjggMGMyLjMgMCA1LjIgMCA4LjEgNi44YzEuMiAyLjkgMyA3LjMgNC45IDExLjhjMy4zIDggNi43IDE2LjMgNy4zIDE3LjZjMSAyIDEuNyA0LjMgLjMgNi45Yy0zLjQgNi44LTYuOSAxMC40LTkuMyAxM2MtMy4xIDMuMi00LjUgNC43LTIuMyA4LjZjMTUuMyAyNi4zIDMwLjYgMzUuNCA1My45IDQ3LjFjNCAyIDYuMyAxLjcgOC42LTFjMi4zLTIuNiA5LjktMTEuNiAxMi41LTE1LjVjMi42LTQgNS4zLTMuMyA4LjktMnMyMy4xIDEwLjkgMjcuMSAxMi45Yy44IC40IDEuNSAuNyAyLjEgMWMyLjggMS40IDQuNyAyLjMgNS41IDMuNmMuOSAxLjkgLjkgOS45LTIuNCAxOS4xYy0zLjMgOS4zLTE5LjEgMTcuNy0yNi43IDE4Ljh6TTQ0OCA5NmMwLTM1LjMtMjguNy02NC02NC02NEg2NEMyOC43IDMyIDAgNjAuNyAwIDk2VjQxNmMwIDM1LjMgMjguNyA2NCA2NCA2NEgzODRjMzUuMyAwIDY0LTI4LjcgNjQtNjRWOTZ6TTE0OC4xIDM5My45TDY0IDQxNmwyMi41LTgyLjJjLTEzLjktMjQtMjEuMi01MS4zLTIxLjItNzkuM0M2NS40IDE2Ny4xIDEzNi41IDk2IDIyMy45IDk2YzQyLjQgMCA4Mi4yIDE2LjUgMTEyLjIgNDYuNWMyOS45IDMwIDQ3LjkgNjkuOCA0Ny45IDExMi4yYzAgODcuNC03Mi43IDE1OC41LTE2MC4xIDE1OC41Yy0yNi42IDAtNTIuNy02LjctNzUuOC0xOS4zelwiXVxufTtcbnZhciBmYVdoYXRzYXBwU3F1YXJlID0gZmFTcXVhcmVXaGF0c2FwcDtcbnZhciBmYU5vZGVKcyA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdub2RlLWpzJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2QzXCIsIFwiTTIyNCA1MDhjLTYuNyAwLTEzLjUtMS44LTE5LjQtNS4ybC02MS43LTM2LjVjLTkuMi01LjItNC43LTctMS43LTggMTIuMy00LjMgMTQuOC01LjIgMjcuOS0xMi43IDEuNC0uOCAzLjItLjUgNC42LjRsNDcuNCAyOC4xYzEuNyAxIDQuMSAxIDUuNyAwbDE4NC43LTEwNi42YzEuNy0xIDIuOC0zIDIuOC01VjE0OS4zYzAtMi4xLTEuMS00LTIuOS01LjFMMjI2LjggMzcuN2MtMS43LTEtNC0xLTUuNyAwTDM2LjYgMTQ0LjNjLTEuOCAxLTIuOSAzLTIuOSA1LjF2MjEzLjFjMCAyIDEuMSA0IDIuOSA0LjlsNTAuNiAyOS4yYzI3LjUgMTMuNyA0NC4zLTIuNCA0NC4zLTE4LjdWMTY3LjVjMC0zIDIuNC01LjMgNS40LTUuM2gyMy40YzIuOSAwIDUuNCAyLjMgNS40IDUuM1YzNzhjMCAzNi42LTIwIDU3LjYtNTQuNyA1Ny42LTEwLjcgMC0xOS4xIDAtNDIuNS0xMS42bC00OC40LTI3LjlDOC4xIDM4OS4yLjcgMzc2LjMuNyAzNjIuNFYxNDkuM2MwLTEzLjggNy40LTI2LjggMTkuNC0zMy43TDIwNC42IDljMTEuNy02LjYgMjcuMi02LjYgMzguOCAwbDE4NC43IDEwNi43YzEyIDYuOSAxOS40IDE5LjggMTkuNCAzMy43djIxMy4xYzAgMTMuOC03LjQgMjYuNy0xOS40IDMzLjdMMjQzLjQgNTAyLjhjLTUuOSAzLjQtMTIuNiA1LjItMTkuNCA1LjJ6bTE0OS4xLTIxMC4xYzAtMzkuOS0yNy01MC41LTgzLjctNTgtNTcuNC03LjYtNjMuMi0xMS41LTYzLjItMjQuOSAwLTExLjEgNC45LTI1LjkgNDcuNC0yNS45IDM3LjkgMCA1MS45IDguMiA1Ny43IDMzLjguNSAyLjQgMi43IDQuMiA1LjIgNC4yaDI0YzEuNSAwIDIuOS0uNiAzLjktMS43czEuNS0yLjYgMS40LTQuMWMtMy43LTQ0LjEtMzMtNjQuNi05Mi4yLTY0LjYtNTIuNyAwLTg0LjEgMjIuMi04NC4xIDU5LjUgMCA0MC40IDMxLjMgNTEuNiA4MS44IDU2LjYgNjAuNSA1LjkgNjUuMiAxNC44IDY1LjIgMjYuNyAwIDIwLjYtMTYuNiAyOS40LTU1LjUgMjkuNC00OC45IDAtNTkuNi0xMi4zLTYzLjItMzYuNi0uNC0yLjYtMi42LTQuNS01LjMtNC41aC0yMy45Yy0zIDAtNS4zIDIuNC01LjMgNS4zIDAgMzEuMSAxNi45IDY4LjIgOTcuOCA2OC4yIDU4LjQtLjEgOTItMjMuMiA5Mi02My40elwiXVxufTtcbnZhciBmYUVkZ2VMZWdhY3kgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZWRnZS1sZWdhY3knLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImUwNzhcIiwgXCJNMjUuNzEsMjI4LjE2bC4zNS0uNDhjMCwuMTYsMCwuMzItLjA3LjQ4Wm00NjAuNTgsMTUuNTFjMC00NC03Ljc2LTg0LjQ2LTI4LjgxLTEyMi40QzQxNi41LDQ3Ljg4LDM0My45MSw4LDI1OC44OSw4LDExOSw3LjcyLDQwLjYyLDExMy4yMSwyNi4wNiwyMjcuNjhjNDIuNDItNjEuMzEsMTE3LjA3LTEyMS4zOCwyMjAuMzctMTI1LDAsMCwxMDkuNjcsMCw5OS40MiwxMDVIMTcwYzYuMzctMzcuMzksMTguNTUtNTksMzQuMzQtNzguOTMtNzUuMDUsMzQuOS0xMjEuODUsOTYuMS0xMjAuNzUsMTg4LjMyLjgzLDcxLjQ1LDUwLjEzLDE0NC44NCwxMjAuNzUsMTcyLDgzLjM1LDMxLjg0LDE5Mi43Nyw3LjIsMjQwLjEzLTIxLjMzVjM2My4zMUMzNjMuNiw0MTkuOCwxNzMuNiw0MjQuMjMsMTcyLjIxLDI5NS43NEg0ODYuMjlWMjQzLjY3WlwiXVxufTtcbnZhciBmYVNsYWNrID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NsYWNrJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbNjI0NDcsIFwic2xhY2staGFzaFwiXSwgXCJmMTk4XCIsIFwiTTk0LjEyIDMxNS4xYzAgMjUuOS0yMS4xNiA0Ny4wNi00Ny4wNiA0Ny4wNlMwIDM0MSAwIDMxNS4xYzAtMjUuOSAyMS4xNi00Ny4wNiA0Ny4wNi00Ny4wNmg0Ny4wNnY0Ny4wNnptMjMuNzIgMGMwLTI1LjkgMjEuMTYtNDcuMDYgNDcuMDYtNDcuMDZzNDcuMDYgMjEuMTYgNDcuMDYgNDcuMDZ2MTE3Ljg0YzAgMjUuOS0yMS4xNiA0Ny4wNi00Ny4wNiA0Ny4wNnMtNDcuMDYtMjEuMTYtNDcuMDYtNDcuMDZWMzE1LjF6bTQ3LjA2LTE4OC45OGMtMjUuOSAwLTQ3LjA2LTIxLjE2LTQ3LjA2LTQ3LjA2UzEzOSAzMiAxNjQuOSAzMnM0Ny4wNiAyMS4xNiA0Ny4wNiA0Ny4wNnY0Ny4wNkgxNjQuOXptMCAyMy43MmMyNS45IDAgNDcuMDYgMjEuMTYgNDcuMDYgNDcuMDZzLTIxLjE2IDQ3LjA2LTQ3LjA2IDQ3LjA2SDQ3LjA2QzIxLjE2IDI0My45NiAwIDIyMi44IDAgMTk2LjlzMjEuMTYtNDcuMDYgNDcuMDYtNDcuMDZIMTY0Ljl6bTE4OC45OCA0Ny4wNmMwLTI1LjkgMjEuMTYtNDcuMDYgNDcuMDYtNDcuMDYgMjUuOSAwIDQ3LjA2IDIxLjE2IDQ3LjA2IDQ3LjA2cy0yMS4xNiA0Ny4wNi00Ny4wNiA0Ny4wNmgtNDcuMDZWMTk2Ljl6bS0yMy43MiAwYzAgMjUuOS0yMS4xNiA0Ny4wNi00Ny4wNiA0Ny4wNi0yNS45IDAtNDcuMDYtMjEuMTYtNDcuMDYtNDcuMDZWNzkuMDZjMC0yNS45IDIxLjE2LTQ3LjA2IDQ3LjA2LTQ3LjA2IDI1LjkgMCA0Ny4wNiAyMS4xNiA0Ny4wNiA0Ny4wNlYxOTYuOXpNMjgzLjEgMzg1Ljg4YzI1LjkgMCA0Ny4wNiAyMS4xNiA0Ny4wNiA0Ny4wNiAwIDI1LjktMjEuMTYgNDcuMDYtNDcuMDYgNDcuMDYtMjUuOSAwLTQ3LjA2LTIxLjE2LTQ3LjA2LTQ3LjA2di00Ny4wNmg0Ny4wNnptMC0yMy43MmMtMjUuOSAwLTQ3LjA2LTIxLjE2LTQ3LjA2LTQ3LjA2IDAtMjUuOSAyMS4xNi00Ny4wNiA0Ny4wNi00Ny4wNmgxMTcuODRjMjUuOSAwIDQ3LjA2IDIxLjE2IDQ3LjA2IDQ3LjA2IDAgMjUuOS0yMS4xNiA0Ny4wNi00Ny4wNiA0Ny4wNkgyODMuMXpcIl1cbn07XG52YXIgZmFTbGFja0hhc2ggPSBmYVNsYWNrO1xudmFyIGZhTWVkcnQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWVkcnQnLFxuICBpY29uOiBbNTQ0LCA1MTIsIFtdLCBcImYzYzhcIiwgXCJNMTEzLjcgMjU2YzAgMTIxLjggODMuOSAyMjIuOCAxOTMuNSAyNDEuMS0xOC43IDQuNS0zOC4yIDYuOS01OC4yIDYuOUMxMTEuNCA1MDQgMCAzOTMgMCAyNTZTMTExLjQgOCAyNDguOSA4YzIwLjEgMCAzOS42IDIuNCA1OC4yIDYuOUMxOTcuNSAzMy4yIDExMy43IDEzNC4yIDExMy43IDI1Nm0yOTcuNCAxMDAuM2MtNzcuNyA1NS40LTE3OS42IDQ3LjUtMjQwLjQtMTQuNiA1LjUgMTQuMSAxMi43IDI3LjcgMjEuNyA0MC41IDYxLjYgODguMiAxODIuNCAxMDkuMyAyNjkuNyA0NyA4Ny4zLTYyLjMgMTA4LjEtMTg0LjMgNDYuNS0yNzIuNi05LTEyLjktMTkuMy0yNC4zLTMwLjUtMzQuMiAzNy40IDc4LjggMTAuNyAxNzguNS02NyAyMzMuOW0tMjE4LjgtMjQ0Yy0xLjQgMS0yLjcgMi4xLTQgMy4xIDY0LjMtMTcuOCAxMzUuOSA0IDE3OC45IDYwLjUgMzUuNyA0NyA0Mi45IDEwNi42IDI0LjQgMTU4IDU2LjctNTYuMiA2Ny42LTE0Mi4xIDIyLjMtMjAxLjgtNTAtNjUuNS0xNDkuMS03NC40LTIyMS42LTE5LjhNMjk2IDIyNGMtNC40IDAtOC0zLjYtOC04di00MGMwLTQuNC0zLjYtOC04LThoLTQ4Yy00LjQgMC04IDMuNi04IDh2NDBjMCA0LjQtMy42IDgtOCA4aC00MGMtNC40IDAtOCAzLjYtOCA4djQ4YzAgNC40IDMuNiA4IDggOGg0MGM0LjQgMCA4IDMuNiA4IDh2NDBjMCA0LjQgMy42IDggOCA4aDQ4YzQuNCAwIDgtMy42IDgtOHYtNDBjMC00LjQgMy42LTggOC04aDQwYzQuNCAwIDgtMy42IDgtOHYtNDhjMC00LjQtMy42LTgtOC04aC00MHpcIl1cbn07XG52YXIgZmFVc2IgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndXNiJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMjg3XCIsIFwiTTY0MS41IDI1NmMwIDMuMS0xLjcgNi4xLTQuNSA3LjVMNTQ3LjkgMzE3Yy0xLjQuOC0yLjggMS40LTQuNSAxLjQtMS40IDAtMy4xLS4zLTQuNS0xLjEtMi44LTEuNy00LjUtNC41LTQuNS03Ljh2LTM1LjZIMjk1LjdjMjUuMyAzOS42IDQwLjUgMTA2LjkgNjkuNiAxMDYuOUgzOTJWMzU0YzAtNSAzLjktOC45IDguOS04LjlINDkwYzUgMCA4LjkgMy45IDguOSA4Ljl2ODkuMWMwIDUtMy45IDguOS04LjkgOC45aC04OS4xYy01IDAtOC45LTMuOS04LjktOC45di0yNi43aC0yNi43Yy03NS40IDAtODEuMS0xNDIuNS0xMjQuNy0xNDIuNUgxNDAuM2MtOC4xIDMwLjYtMzUuOSA1My41LTY5IDUzLjVDMzIgMzI3LjMgMCAyOTUuMyAwIDI1NnMzMi03MS4zIDcxLjMtNzEuM2MzMy4xIDAgNjEgMjIuOCA2OSA1My41IDM5LjEgMCA0My45IDkuNSA3NC42LTYwLjRDMjU1IDg4LjcgMjczIDk1LjcgMzIzLjggOTUuN2M3LjUtMjAuOSAyNy0zNS42IDUwLjQtMzUuNiAyOS41IDAgNTMuNSAyMy45IDUzLjUgNTMuNXMtMjMuOSA1My41LTUzLjUgNTMuNWMtMjMuNCAwLTQyLjktMTQuOC01MC40LTM1LjZIMjk0Yy0yOS4xIDAtNDQuMyA2Ny40LTY5LjYgMTA2LjloMzEwLjF2LTM1LjZjMC0zLjMgMS43LTYuMSA0LjUtNy44IDIuOC0xLjcgNi40LTEuNCA4LjkuM2w4OS4xIDUzLjVjMi44IDEuMSA0LjUgNC4xIDQuNSA3LjJ6XCJdXG59O1xudmFyIGZhVHVtYmxyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3R1bWJscicsXG4gIGljb246IFszMjAsIDUxMiwgW10sIFwiZjE3M1wiLCBcIk0zMDkuOCA0ODAuM2MtMTMuNiAxNC41LTUwIDMxLjctOTcuNCAzMS43LTEyMC44IDAtMTQ3LTg4LjgtMTQ3LTE0MC42di0xNDRIMTcuOWMtNS41IDAtMTAtNC41LTEwLTEwdi02OGMwLTcuMiA0LjUtMTMuNiAxMS4zLTE2IDYyLTIxLjggODEuNS03NiA4NC4zLTExNy4xLjgtMTEgNi41LTE2LjMgMTYuMS0xNi4zaDcwLjljNS41IDAgMTAgNC41IDEwIDEwdjExNS4yaDgzYzUuNSAwIDEwIDQuNCAxMCA5Ljl2ODEuN2MwIDUuNS00LjUgMTAtMTAgMTBoLTgzLjRWMzYwYzAgMzQuMiAyMy43IDUzLjYgNjggMzUuOCA0LjgtMS45IDktMy4yIDEyLjctMi4yIDMuNS45IDUuOCAzLjQgNy40IDcuOWwyMiA2NC4zYzEuOCA1IDMuMyAxMC42LS40IDE0LjV6XCJdXG59O1xudmFyIGZhVmFhZGluID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3ZhYWRpbicsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjQwOFwiLCBcIk0yMjQuNSAxNDAuN2MxLjUtMTcuNiA0LjktNTIuNyA0OS44LTUyLjdoOTguNmMyMC43IDAgMzIuMS03LjggMzIuMS0yMS42VjU0LjFjMC0xMi4yIDkuMy0yMi4xIDIxLjUtMjIuMVM0NDggNDEuOSA0NDggNTQuMXYzNi41YzAgNDIuOS0yMS41IDYyLTY2LjggNjJIMjgwLjdjLTMwLjEgMC0zMyAxNC43LTMzIDI3LjEgMCAxLjMtLjEgMi41LS4yIDMuNy0uNyAxMi4zLTEwLjkgMjIuMi0yMy40IDIyLjJzLTIyLjctOS44LTIzLjQtMjIuMmMtLjEtMS4yLS4yLTIuNC0uMi0zLjcgMC0xMi4zLTMtMjcuMS0zMy0yNy4xSDY2LjhjLTQ1LjMgMC02Ni44LTE5LjEtNjYuOC02MlY1NC4xQzAgNDEuOSA5LjQgMzIgMjEuNiAzMnMyMS41IDkuOSAyMS41IDIyLjF2MTIuM0M0My4xIDgwLjIgNTQuNSA4OCA3NS4yIDg4aDk4LjZjNDQuOCAwIDQ4LjMgMzUuMSA0OS44IDUyLjdoLjl6TTIyNCA0NTZjMTEuNSAwIDIxLjQtNyAyNS43LTE2LjMgMS4xLTEuOCA5Ny4xLTE2OS42IDk4LjItMTcxLjQgMTEuOS0xOS42LTMuMi00NC4zLTI3LjItNDQuMy0xMy45IDAtMjMuMyA2LjQtMjkuOCAyMC4zTDIyNCAzNjJsLTY2LjktMTE3LjdjLTYuNC0xMy45LTE1LjktMjAuMy0yOS44LTIwLjMtMjQgMC0zOS4xIDI0LjYtMjcuMiA0NC4zIDEuMSAxLjkgOTcuMSAxNjkuNiA5OC4yIDE3MS40IDQuMyA5LjMgMTQuMiAxNi4zIDI1LjcgMTYuM3pcIl1cbn07XG52YXIgZmFRdW9yYSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdxdW9yYScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjJjNFwiLCBcIk00NDAuNSAzODYuN2gtMjkuM2MtMS41IDEzLjUtMTAuNSAzMC44LTMzIDMwLjgtMjAuNSAwLTM1LjMtMTQuMi00OS41LTM1LjggNDQuMi0zNC4yIDc0LjctODcuNSA3NC43LTE1M0M0MDMuNSAxMTEuMiAzMDYuOCAzMiAyMDUgMzIgMTA1LjMgMzIgNy4zIDExMS43IDcuMyAyMjguN2MwIDEzNC4xIDEzMS4zIDIyMS42IDI0OSAxODlDMjc2IDQ1MS4zIDMwMiA0ODAgMzUxLjUgNDgwYzgxLjggMCA5MC44LTc1LjMgODktOTMuM3pNMjk3IDMyOS4yQzI3Ny41IDMwMCAyNTMuMyAyNzcgMjA1LjUgMjc3Yy0zMC41IDAtNTQuMyAxMC02OSAyMi44bDEyLjIgMjQuM2M2LjItMyAxMy00IDE5LjgtNCAzNS41IDAgNTMuNyAzMC44IDY5LjIgNjEuMy0xMCAzLTIwLjcgNC4yLTMyLjcgNC4yLTc1IDAtMTA3LjUtNTMtMTA3LjUtMTU2LjdDOTcuNSAxMjQuNSAxMzAgNzEgMjA1IDcxYzc2LjIgMCAxMDguNyA1My41IDEwOC43IDE1Ny43LjEgNDEuOC01LjQgNzUuNi0xNi43IDEwMC41elwiXVxufTtcbnZhciBmYVNxdWFyZVhUd2l0dGVyID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NxdWFyZS14LXR3aXR0ZXInLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImU2MWFcIiwgXCJNNjQgMzJDMjguNyAzMiAwIDYwLjcgMCA5NlY0MTZjMCAzNS4zIDI4LjcgNjQgNjQgNjRIMzg0YzM1LjMgMCA2NC0yOC43IDY0LTY0Vjk2YzAtMzUuMy0yOC43LTY0LTY0LTY0SDY0em0yOTcuMSA4NEwyNTcuMyAyMzQuNiAzNzkuNCAzOTZIMjgzLjhMMjA5IDI5OC4xIDEyMy4zIDM5Nkg3NS44bDExMS0xMjYuOUw2OS43IDExNmg5OGw2Ny43IDg5LjVMMzEzLjYgMTE2aDQ3LjV6TTMyMy4zIDM2Ny42TDE1My40IDE0Mi45SDEyNS4xTDI5Ni45IDM2Ny42aDI2LjN6XCJdXG59O1xudmFyIGZhUmVhY3RldXJvcGUgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncmVhY3RldXJvcGUnLFxuICBpY29uOiBbNTc2LCA1MTIsIFtdLCBcImY3NWRcIiwgXCJNMjUwLjYgMjExLjc0bDUuOC00LjEgNS44IDQuMS0yLjEtNi44IDUuNy00LjMtNy4xLS4xLTIuMy02LjgtMi4zIDYuOC03LjIuMSA1LjcgNC4zem02My43IDBsNS44LTQuMSA1LjggNC4xLTIuMS02LjggNS43LTQuMy03LjItLjEtMi4zLTYuOC0yLjMgNi44LTcuMi4xIDUuNyA0LjN6bS05MS4zIDUwLjVoLTMuNGMtNC44IDAtMy44IDQtMy44IDEyLjEgMCA0LjctMi4zIDYuMS01LjggNi4xcy01LjgtMS40LTUuOC02LjF2LTM2LjZjMC00LjcgMi4zLTYuMSA1LjgtNi4xczUuOCAxLjQgNS44IDYuMWMwIDcuMi0uNyAxMC41IDMuOCAxMC41aDMuNGM0LjctLjEgMy44LTMuOSAzLjgtMTIuMyAwLTkuOS02LjctMTQuMS0xNi44LTE0LjFoLS4yYy0xMC4xIDAtMTYuOCA0LjItMTYuOCAxNC4xVjI3NmMwIDEwLjQgNi43IDE0LjEgMTYuOCAxNC4xaC4yYzEwLjEgMCAxNi44LTMuOCAxNi44LTE0LjEgMC05Ljg2IDEuMS0xMy43Ni0zLjgtMTMuNzZ6bS04MC43IDE3LjRoLTE0Ljd2LTE5LjNIMTM5YzIuNSAwIDMuOC0xLjMgMy44LTMuOHYtMi4xYzAtMi41LTEuMy0zLjgtMy44LTMuOGgtMTEuNHYtMTguM0gxNDJjMi41IDAgMy44LTEuMyAzLjgtMy44di0yLjFjMC0yLjUtMS4zLTMuOC0zLjgtMy44aC0yMS43Yy0yLjQtLjEtMy43IDEuMy0zLjcgMy44djU5LjFjMCAyLjUgMS4zIDMuOCAzLjggMy44aDIxLjljMi41IDAgMy44LTEuMyAzLjgtMy44di0yLjFjMC0yLjUtMS4zLTMuOC0zLjgtMy44em0tNDItMTguNWM0LjYtMiA3LjMtNiA3LjMtMTIuNHYtMTEuOWMwLTEwLjEtNi43LTE0LjEtMTYuOC0xNC4xSDc3LjRjLTIuNSAwLTMuOCAxLjMtMy44IDMuOHY1OS4xYzAgMi41IDEuMyAzLjggMy44IDMuOGgzLjRjMi41IDAgMy44LTEuMyAzLjgtMy44di0yMi45aDUuNmw3LjQgMjMuNWE0LjEgNC4xIDAgMCAwIDQuMyAzLjJoMy4zYzIuOCAwIDQtMS44IDMuMi00LjR6bS0zLjgtMTRjMCA0LjgtMi41IDYuMS02LjEgNi4xaC01Ljh2LTIwLjloNS44YzMuNiAwIDYuMSAxLjMgNi4xIDYuMXpNMTc2IDIyNmEzLjgyIDMuODIgMCAwIDAtNC4yLTMuNGgtNi45YTMuNjggMy42OCAwIDAgMC00IDMuNGwtMTEgNTkuMmMtLjUgMi43LjkgNC4xIDMuNCA0LjFoM2EzLjc0IDMuNzQgMCAwIDAgNC4xLTMuNWwxLjgtMTEuM2gxMi4ybDEuOCAxMS4zYTMuNzQgMy43NCAwIDAgMCA0LjEgMy41aDMuNWMyLjYgMCAzLjktMS40IDMuNC00LjF6bS0xMi4zIDM5LjNsNC43LTI5LjcgNC43IDI5Ljd6bTg5LjMgMjAuMnYtNTMuMmg3LjVjMi41IDAgMy44LTEuMyAzLjgtMy44di0yLjFjMC0yLjUtMS4zLTMuOC0zLjgtMy44aC0yNS44Yy0yLjUgMC0zLjggMS4zLTMuOCAzLjh2Mi4xYzAgMi41IDEuMyAzLjggMy44IDMuOGg3LjN2NTMuMmMwIDIuNSAxLjMgMy44IDMuOCAzLjhoMy40YzIuNS4wNCAzLjgtMS4zIDMuOC0zLjc2em0yNDgtLjhoLTE5LjRWMjU4aDE2LjFhMS44OSAxLjg5IDAgMCAwIDItMnYtLjhhMS44OSAxLjg5IDAgMCAwLTItMmgtMTYuMXYtMjUuOGgxOS4xYTEuODkgMS44OSAwIDAgMCAyLTJ2LS44YTEuNzcgMS43NyAwIDAgMC0yLTEuOWgtMjIuMmExLjYyIDEuNjIgMCAwIDAtMiAxLjh2NjNhMS44MSAxLjgxIDAgMCAwIDIgMS45SDUwMWExLjgxIDEuODEgMCAwIDAgMi0xLjl2LS44YTEuODQgMS44NCAwIDAgMC0yLTEuOTZ6bS05My4xLTYyLjloLS44Yy0xMC4xIDAtMTUuMyA0LjctMTUuMyAxNC4xVjI3NmMwIDkuMyA1LjIgMTQuMSAxNS4zIDE0LjFoLjhjMTAuMSAwIDE1LjMtNC44IDE1LjMtMTQuMXYtNDAuMWMwLTkuMzYtNS4yLTE0LjA2LTE1LjMtMTQuMDZ6bTEwLjIgNTIuNGMtLjEgOC0zIDExLjEtMTAuNSAxMS4xcy0xMC41LTMuMS0xMC41LTExLjF2LTM2LjZjMC03LjkgMy0xMS4xIDEwLjUtMTEuMXMxMC41IDMuMiAxMC41IDExLjF6bS00Ni41LTE0LjVjNi4xLTEuNiA5LjItNi4xIDkuMi0xMy4zdi05LjdjMC05LjQtNS4yLTE0LjEtMTUuMy0xNC4xaC0xMy43YTEuODEgMS44MSAwIDAgMC0yIDEuOXY2M2ExLjgxIDEuODEgMCAwIDAgMiAxLjloMS4yYTEuNzQgMS43NCAwIDAgMCAxLjktMS45di0yNi45aDExLjZsMTAuNCAyNy4yYTIuMzIgMi4zMiAwIDAgMCAyLjMgMS41aDEuNWMxLjQgMCAyLTEgMS41LTIuM3ptLTYuNC0zLjlIMzU1di0yOC41aDEwLjJjNy41IDAgMTAuNSAzLjEgMTAuNSAxMS4xdjYuNGMwIDcuODQtMyAxMS4wNC0xMC41IDExLjA0em04NS45LTMzLjFoLTEzLjdhMS42MiAxLjYyIDAgMCAwLTIgMS44djYzYTEuODEgMS44MSAwIDAgMCAyIDEuOWgxLjJhMS43NCAxLjc0IDAgMCAwIDEuOS0xLjl2LTI2LjFoMTAuNmMxMC4xIDAgMTUuMy00LjggMTUuMy0xNC4xdi0xMC41YzAtOS40LTUuMi0xNC4xLTE1LjMtMTQuMXptMTAuMiAyMi44YzAgNy45LTMgMTEuMS0xMC41IDExLjFoLTEwLjJ2LTI5LjJoMTAuMmM3LjUtLjEgMTAuNSAzLjEgMTAuNSAxMXpNMjU5LjUgMzA4bC0yLjMtNi44LTIuMyA2LjgtNy4xLjEgNS43IDQuMy0yLjEgNi44IDUuOC00LjEgNS44IDQuMS0yLjEtNi44IDUuNy00LjN6bTIyNy42LTEzNi4xYTM2NC40MiAzNjQuNDIgMCAwIDAtMzUuNi0xMS4zYzE5LjYtNzggMTEuNi0xMzQuNy0yMi4zLTE1My45QzM5NC43LTEyLjY2IDM0My4zIDExIDI5MSA2MS45NHE1LjEgNC45NSAxMC4yIDEwLjJjODIuNS04MCAxMTkuNi01My41IDEyMC45LTUyLjggMjIuNCAxMi43IDM2IDU1LjggMTUuNSAxMzcuOGE1ODcuODMgNTg3LjgzIDAgMCAwLTg0LjYtMTNDMjgxLjEgNDMuNjQgMjEyLjQgMiAxNzAuOCAyIDE0MCAyIDEyNyAyMyAxMjMuMiAyOS43NGMtMTguMSAzMi0xMy4zIDg0LjIuMSAxMzMuOC03MC41IDIwLjMtMTIwLjcgNTQuMS0xMjAuMyA5NSAuNSA1OS42IDEwMy4yIDg3LjggMTIyLjEgOTIuOC0yMC41IDgxLjktMTAuMSAxMzUuNiAyMi4zIDE1My45IDI4IDE1LjggNzUuMSA2IDEzOC4yLTU1LjJxLTUuMS00Ljk1LTEwLjItMTAuMmMtODIuNSA4MC0xMTkuNyA1My41LTEyMC45IDUyLjgtMjIuMy0xMi42LTM2LTU1LjYtMTUuNS0xMzcuOSAxMi40IDIuOSA0MS44IDkuNSA4NC42IDEzIDcxLjkgMTAwLjQgMTQwLjYgMTQyIDE4Mi4xIDE0MiAzMC44IDAgNDMuOC0yMSA0Ny42LTI3LjcgMTgtMzEuOSAxMy4zLTg0LjEtLjEtMTMzLjggMTUyLjMtNDMuOCAxNTYuMi0xMzAuMiAzMy45LTE3Ni4zek0xMzUuOSAzNi44NGMyLjktNS4xIDExLjktMjAuMyAzNC45LTIwLjMgMzYuOCAwIDk4LjggMzkuNiAxNjMuMyAxMjYuMmE3MTQgNzE0IDAgMCAwLTkzLjkuOSA1NDcuNzYgNTQ3Ljc2IDAgMCAxIDQyLjItNTIuNFEyNzcuMyA4NiAyNzIuMiA4MWE1OTguMjUgNTk4LjI1IDAgMCAwLTUwLjcgNjQuMiA1NjkuNjkgNTY5LjY5IDAgMCAwLTg0LjQgMTQuNmMtLjItMS40LTI0LjMtODIuMi0xLjItMTIzem0zMDQuOCA0MzguM2MtMi45IDUuMS0xMS44IDIwLjMtMzQuOSAyMC4zLTM2LjcgMC05OC43LTM5LjQtMTYzLjMtMTI2LjJhNjk1LjM4IDY5NS4zOCAwIDAgMCA5My45LS45IDU0Ny43NiA1NDcuNzYgMCAwIDEtNDIuMiA1Mi40cTUuMSA1LjI1IDEwLjIgMTAuMmE1ODguNDcgNTg4LjQ3IDAgMCAwIDUwLjctNjQuMmM0Ny4zLTQuNyA4MC4zLTEzLjUgODQuNC0xNC42IDIyLjcgODQuNCA0LjUgMTE3IDEuMiAxMjN6bTkuMS0xMzguNmMtMy42LTExLjktNy43LTI0LjEtMTIuNC0zNi40YTEyLjY3IDEyLjY3IDAgMCAxLTEwLjctNS43bC0uMS4xYTE5LjYxIDE5LjYxIDAgMCAxLTUuNCAzLjZjNS43IDE0LjMgMTAuNiAyOC40IDE0LjcgNDIuMmE1MzUuMyA1MzUuMyAwIDAgMS03MiAxM2MzLjUtNS4zIDE3LjItMjYuMiAzMi4yLTU0LjJhMjQuNiAyNC42IDAgMCAxLTYtMy4yYy0xLjEgMS4yLTMuNiA0LjItMTAuOSA0LjItNi4yIDExLjItMTcuNCAzMC45LTMzLjkgNTUuMmE3MTEuOTEgNzExLjkxIDAgMCAxLTExMi40IDFjLTcuOS0xMS4yLTIxLjUtMzEuMS0zNi44LTU3LjhhMjEgMjEgMCAwIDEtMy0xLjVjLTEuOSAxLjYtMy45IDMuMi0xMi42IDMuMiA2LjMgMTEuMiAxNy41IDMwLjcgMzMuOCA1NC42YTU0OC44MSA1NDguODEgMCAwIDEtNzIuMi0xMS43cTUuODUtMjEgMTQuMS00Mi45Yy0zLjIgMC01LjQuMi04LjQtMWExNy41OCAxNy41OCAwIDAgMS02LjkgMWMtNC45IDEzLjQtOS4xIDI2LjUtMTIuNyAzOS40Qy0zMS43IDI5Ny0xMi4xIDIxNiAxMjYuNyAxNzUuNjRjMy42IDExLjkgNy43IDI0LjEgMTIuNCAzNi40IDEwLjQgMCAxMi45IDMuNCAxNC40IDUuM2ExMiAxMiAwIDAgMSAyLjMtMi4yYy01LjgtMTQuNy0xMC45LTI5LjItMTUuMi00My4zIDctMS44IDMyLjQtOC40IDcyLTEzLTE1LjkgMjQuMy0yNi43IDQzLjktMzIuOCA1NS4zYTE0LjIyIDE0LjIyIDAgMCAxIDYuNCA4IDIzLjQyIDIzLjQyIDAgMCAxIDEwLjItOC40YzYuNS0xMS43IDE3LjktMzEuOSAzNC44LTU2LjlhNzExLjcyIDcxMS43MiAwIDAgMSAxMTIuNC0xYzMxLjUgNDQuNiAyOC45IDQ4LjEgNDIuNSA2NC41YTIxLjQyIDIxLjQyIDAgMCAxIDEwLjQtNy40Yy02LjQtMTEuNC0xNy42LTMxLTM0LjMtNTUuNSA0MC40IDQuMSA2NSAxMCA3Mi4yIDExLjctNCAxNC40LTguOSAyOS4yLTE0LjYgNDQuMmEyMC43NCAyMC43NCAwIDAgMSA2LjggNC4zbC4xLjFhMTIuNzIgMTIuNzIgMCAwIDEgOC45LTUuNmM0LjktMTMuNCA5LjItMjYuNiAxMi44LTM5LjVhMzU5LjcxIDM1OS43MSAwIDAgMSAzNC41IDExYzEwNi4xIDM5LjkgNzQgODcuOSA3Mi42IDkwLjQtMTkuOCAzNS4xLTgwLjEgNTUuMi0xMDUuNyA2Mi41em0tMTE0LjQtMTE0aC0xLjJhMS43NCAxLjc0IDAgMCAwLTEuOSAxLjl2NDkuOGMwIDcuOS0yLjYgMTEuMS0xMC4xIDExLjFzLTEwLjEtMy4xLTEwLjEtMTEuMXYtNDkuOGExLjY5IDEuNjkgMCAwIDAtMS45LTEuOUgzMDlhMS44MSAxLjgxIDAgMCAwLTIgMS45djUxLjVjMCA5LjYgNSAxNC4xIDE1LjEgMTQuMWguNGMxMC4xIDAgMTUuMS00LjYgMTUuMS0xNC4xdi01MS41YTIgMiAwIDAgMC0yLjItMS45ek0zMjEuNyAzMDhsLTIuMy02LjgtMi4zIDYuOC03LjEuMSA1LjcgNC4zLTIuMSA2LjggNS44LTQuMSA1LjggNC4xLTIuMS02LjggNS43LTQuM3ptLTMxLjEgNy40bC0yLjMtNi44LTIuMyA2LjgtNy4xLjEgNS43IDQuMy0yLjEgNi44IDUuOC00LjEgNS44IDQuMS0yLjEtNi44IDUuNy00LjN6bTUuMS0zMC44aC0xOS40di0yNi43aDE2LjFhMS44OSAxLjg5IDAgMCAwIDItMnYtLjhhMS44OSAxLjg5IDAgMCAwLTItMmgtMTYuMXYtMjUuOGgxOS4xYTEuODkgMS44OSAwIDAgMCAyLTJ2LS44YTEuNzcgMS43NyAwIDAgMC0yLTEuOWgtMjIuMmExLjgxIDEuODEgMCAwIDAtMiAxLjl2NjNhMS44MSAxLjgxIDAgMCAwIDIgMS45aDIyLjVhMS43NyAxLjc3IDAgMCAwIDItMS45di0uOGExLjgzIDEuODMgMCAwIDAtMi0yLjA2em0tNy40LTk5LjRMMjg2IDE5MmwtNy4xLjEgNS43IDQuMy0yLjEgNi44IDUuOC00LjEgNS44IDQuMS0yLjEtNi44IDUuNy00LjMtNy4xLS4xelwiXVxufTtcbnZhciBmYU1lZGl1bSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdtZWRpdW0nLFxuICBpY29uOiBbNjQwLCA1MTIsIFs2MjQwNywgXCJtZWRpdW0tbVwiXSwgXCJmMjNhXCIsIFwiTTE4MC41LDc0LjI2MkM4MC44MTMsNzQuMjYyLDAsMTU1LjYzMywwLDI1NlM4MC44MTksNDM3LjczOCwxODAuNSw0MzcuNzM4LDM2MSwzNTYuMzczLDM2MSwyNTYsMjgwLjE5MSw3NC4yNjIsMTgwLjUsNzQuMjYyWm0yODguMjUsMTAuNjQ2Yy00OS44NDUsMC05MC4yNDUsNzYuNjE5LTkwLjI0NSwxNzEuMDk1czQwLjQwNiwxNzEuMSw5MC4yNTEsMTcxLjEsOTAuMjUxLTc2LjYxOSw5MC4yNTEtMTcxLjFINTU5QzU1OSwxNjEuNSw1MTguNiw4NC45MDgsNDY4Ljc1Miw4NC45MDhabTEzOS41MDYsMTcuODIxYy0xNy41MjYsMC0zMS43MzUsNjguNjI4LTMxLjczNSwxNTMuMjc0czE0LjIsMTUzLjI3NCwzMS43MzUsMTUzLjI3NFM2NDAsMzQwLjYzMSw2NDAsMjU2QzY0MCwxNzEuMzUxLDYyNS43ODUsMTAyLjcyOSw2MDguMjU4LDEwMi43MjlaXCJdXG59O1xudmFyIGZhTWVkaXVtTSA9IGZhTWVkaXVtO1xudmFyIGZhQW1pbGlhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2FtaWxpYScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjM2ZFwiLCBcIk0yNDAuMSAzMmMtNjEuOSAwLTEzMS41IDE2LjktMTg0LjIgNTUuNC01LjEgMy4xLTkuMSA5LjItNy4yIDE5LjQgMS4xIDUuMSA1LjEgMjcuNCAxMC4yIDM5LjYgNC4xIDEwLjIgMTQuMiAxMC4yIDIwLjMgNi4xIDMyLjUtMjIuMyA5Ni41LTQ3LjcgMTUyLjMtNDcuNyA1Ny45IDAgNTguOSAyOC40IDU4LjkgNzMuMXYzOC41QzIwMyAyMjcuNyA3OC4yIDI1MSA0Ni43IDI2NC4yIDExLjIgMjgwLjUgMTYuMyAzNTcuNyAxNi4zIDM3NnMxNS4yIDEwNCAxMjQuOSAxMDRjNDcuOCAwIDExMy43LTIwLjcgMTUzLjMtNDIuMXYyNS40YzAgMyAyLjEgOC4yIDYuMSA5LjEgMy4xIDEgNTAuNyAyIDU5LjkgMnM2Mi41LjMgNjYuNS0uN2M0LjEtMSA1LjEtNi4xIDUuMS05LjFWMTY4Yy0uMS04MC4zLTU3LjktMTM2LTE5Mi0xMzZ6bTUwLjIgMzQ4Yy0yMS40IDEzLjItNDguNyAyNC40LTc5LjEgMjQuNC01Mi44IDAtNTguOS0zMy41LTU5LTQ0LjcgMC0xMi4yLTMtNDIuNyAxOC4zLTUyLjkgMjQuMy0xMy4yIDc1LjEtMjkuNCAxMTkuOC0zMy41elwiXVxufTtcbnZhciBmYU1peGNsb3VkID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ21peGNsb3VkJyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmMjg5XCIsIFwiTTIxMi45OCAzNDYuNTY2SDE3OS43ODlWMTk1LjExNEwxODUuOTczIDE3My40N0gxNzUuMjYyTDEzNy4xMjcgMzQ2LjU2Nkg3Ni4xMDY5TDM3LjczMjMgMTczLjQ3SDI3LjI3NkwzMy4xOTEzIDE5NS4xMTRWMzQ2LjU2NkgwVjE2NUg2NS42NTA2TDEwMi4yNDggMzM4LjA5NkgxMTAuNzQ3TDE0Ny4zMjkgMTY1SDIxMi45OEwyMTIuOTggMzQ2LjU2NlpNNTQ0LjQ1OSAyODMuNTg5TDQ1OC40MzQgMzQ1LjY1NVYzMDcuNTM0TDUzMS4zMjkgMjU1Ljc3Nkw0NTguNDM0IDIwNC4wMTdWMTY1Ljg5Nkw1NDQuNDU5IDIyOC4yMzFINTUzLjcyMUw2NDAgMTY1Ljg5NlYyMDQuMDE3TDU2Ni44NjYgMjU1Ljc3Nkw2NDAgMzA3LjU0OVYzNDUuNjU1TDU1My43MjEgMjgzLjU4OUg1NDQuNDU5Wk00MzAuMTU3IDI3Mi4zMTFIMjQ4LjExM1YyMzkuMjU1SDQzMC4xNTdWMjcyLjMxMVpcIl1cbn07XG52YXIgZmFGbGlwYm9hcmQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZmxpcGJvYXJkJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNDRkXCIsIFwiTTAgMzJ2NDQ4aDQ0OFYzMkgwem0zNTguNCAxNzkuMmgtODkuNnY4OS42aC04OS42djg5LjZIODkuNlYxMjEuNmgyNjguOHY4OS42elwiXVxufTtcbnZhciBmYVZpYWNvaW4gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndmlhY29pbicsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjIzN1wiLCBcIk0zODQgMzJoLTY0bC04MC43IDE5MmgtOTQuNUw2NCAzMkgwbDQ4IDExMkgwdjQ4aDY4LjVsMTMuOCAzMkgwdjQ4aDEwMi44TDE5MiA0ODBsODkuMi0yMDhIMzg0di00OGgtODIuM2wxMy44LTMySDM4NHYtNDhoLTQ4bDQ4LTExMnpNMTkyIDMzNmwtMjctNjRoNTRsLTI3IDY0elwiXVxufTtcbnZhciBmYUNyaXRpY2FsUm9sZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdjcml0aWNhbC1yb2xlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmNmM5XCIsIFwiTTIyNS44MiAwYy4yNi4xNSAyMTYuNTcgMTI0LjUxIDIxNy4xMiAxMjQuNzIgMyAxLjE4IDMuNyAzLjQ2IDMuNyA2LjU2cS0uMTEgMTI1LjE3IDAgMjUwLjM2YTUuODggNS44OCAwIDAgMS0zLjM4IDUuNzhjLTIxLjM3IDEyLTIwNy44NiAxMTguMjktMjE4LjkzIDEyNC41OGgtM0MxNDIgNDY2LjM0IDMuMDggMzg2LjU2IDIuOTMgMzg2LjQ4YTMuMjkgMy4yOSAwIDAgMS0xLjg4LTMuMjRjMC0uODcgMC0yMjUuOTQtLjA1LTI1My4xYTUgNSAwIDAgMSAyLjkzLTQuOTNDMjcuMTkgMTEyLjExIDIxMy4yIDYgMjI0LjA3IDB6TTIxNS40IDIwLjQybC0uMjItLjE2UTExOC4wNiA3NS41NSAyMSAxMzAuODdjMCAuMTIuMDguMjMuMTMuMzVsMzAuODYgMTEuNjRjLTcuNzEgNi04LjMyIDYtMTAuNjUgNS4xMy0uMSAwLTI0LjE3LTkuMjgtMjYuOC0xMHYyMzAuNDNjLjg4LTEuNDEgNjQuMDctMTEwLjkxIDY0LjEzLTExMSAxLjYyLTIuODIgMy0xLjkyIDkuMTItMS41MiAxLjQuMDkgMS40OC4yMi43OCAxLjQyLTQxLjE5IDcxLjMzLTM2LjQgNjMtNjcuNDggMTE2Ljk0LS44MSAxLjQtLjYxIDEuMTMgMS4yNSAxLjEzaDE4Ni41YzEuNDQgMCAxLjY5LS4yMyAxLjctMS42NHYtOC44OGMwLTEuMzQgMi4zNi0uODEtMTguMzctMS03LjQ2LS4wNy0xNC4xNC0zLjIyLTIxLjM4LTEyLjctNy4zOC05LjY2LTE0LjYyLTE5LjQzLTIxLjg1LTI5LjIxLTIuMjgtMy4wOC0zLjQ1LTIuMzgtMTYuNzYtMi4zOC0xLjc1IDAtMS43OCAwLTEuNzYgMS44Mi4yOSAyNi4yMS4xNSAyNS4yNyAxIDMyLjY2LjUyIDQuMzcgMi4xNiA0LjIgOS42OSA0LjgxIDMuMTQuMjYgMy44OCA0LjA4LjUyIDQuOTItMS41Ny4zOS0zMS42LjUxLTMzLjY3LS4xYTIuNDIgMi40MiAwIDAgMSAuMy00LjczYzMuMjktLjc2IDYuMTYuODEgNi42Ni00LjQ0IDEuMy0xMy42NiAxLjE3LTkgMS4xLTc5LjQyIDAtMTAuODItLjM1LTEyLjU4LTUuMzYtMTMuNTUtMS4yMi0uMjQtMy41NC0uMTYtNC42OS0uNTUtMi44OC0xLTItNC44NCAxLjc3LTQuODUgMzMuNjcgMCA0Ni4wOC0xLjA3IDU2LjA2IDQuODYgNy43NCA0LjYxIDEyIDExLjQ4IDEyLjUxIDIwLjQuODggMTQuNTktNi41MSAyMi4zNS0xNSAzMi41OWExLjQ2IDEuNDYgMCAwIDAgMCAyLjIyYzIuNiAzLjI1IDUgNi42MyA3LjcxIDkuODMgMjcuNTYgMzMuMjMgMjQuMTEgMzAuNTQgNDEuMjggMzMuMDYuODkuMTMgMS0uNDIgMS0xLjE1di0xMWMwLTEgLjMyLTEuNDMgMS40MS0xLjI2YTcyLjM3IDcyLjM3IDAgMCAwIDIzLjU4LS4zYzEuMDgtLjE1IDEuNS4yIDEuNDggMS4zMyAwIC4xMS44OCAyNi42OS44NyAyNi44LS4wNSAxLjUyLjY3IDEuNjIgMS44OSAxLjYyaDE4Ni43MVEzODYuNTEgMzA0LjYgMzQ2IDIzNC4zM2MyLjI2LS42Ni0uNCAwIDYuNjktMS4zOSAyLS4zOSAyLjA1LS40MSAzLjExIDEuNDQgNy4zMSAxMi42NCA3Ny4zMSAxMzQgNzcuMzcgMTM0LjA2VjEzOGMtMS43Mi41LTEwMy4zIDM4LjcyLTEwNS43NiAzOS42OC0xLjA4LjQyLTEuNTUuMi0xLjkxLS44OC0uNjMtMS45LTEuMzQtMy43Ni0yLjA5LTUuNjItLjMyLS43OS0uMDktMS4xMy42NS0xLjM5LjEgMCA5NS41My0zNS44NSAxMDMtMzguNzctNjUuNDItMzcuNTctMTMwLjU2LTc1LTE5Ni0xMTIuNmw4Ni44MiAxNTAuMzktLjI4LjMzYy05LjU3LS45LTEwLjQ2LTEuNi0xMS44LTMuOTQtMS0xLjY5LTczLjUtMTI3LjcxLTgyLTE0Mi4xNi05LjEgMTQuNjctODMuNTYgMTQ2LjIxLTg1LjM3IDE0Ni4zMi0yLjkzLjE3LTUuODguMDgtOS4yNS4wOHE0My4yNS03NC43NCA4Ni4xOC0xNDl6bTUxLjkzIDEyOS45MmEzNy42OCAzNy42OCAwIDAgMCA1LjU0LS44NWMxLjY5LS4zIDIuNTMuMiAyLjYgMS45MiAwIC4xMS4wNyAxOS4wNi0uODYgMjAuNDVzLTEuODggMS4yMi0yLjYtLjE5Yy01LTkuNjkgNi4yMi05LjY2LTM5LjEyLTEyLS43IDAtMSAuMjMtMSAuOTMgMCAuMTMgMy43MiAxMjIgMy43MyAxMjIuMTEgMCAuODkuNTIgMS4yIDEuMjEgMS41MWE4My45MiA4My45MiAwIDAgMSA4LjcgNC4wNWM3LjMxIDQuMzMgMTEuMzggMTAuODQgMTIuNDEgMTkuMzEgMS40NCAxMS44LTIuNzcgMzUuNzctMzIuMjEgMzcuMTQtMi43NS4xMy0yOC4yNiAxLjA4LTM0LjE0LTIzLjI1LTQuNjYtMTkuMjYgOC4yNi0zMi43IDE5Ljg5LTM2LjRhMi40NSAyLjQ1IDAgMCAwIDItMi42NmMuMS01LjYzIDMtMTA3LjEgMy43MS0xMjEuMzUuMDUtMS4wOC0uNjItMS4xNi0xLjM1LTEuMTUtMzIuMzUuNTItMzYuNzUtLjM0LTQwLjIyIDguNTItMi40MiA2LjE4LTQuMTQgMS4zMi0zLjk1LjIzcTEuNTktOSAzLjMxLTE4Yy40LTIuMTEgMS40My0yLjYxIDMuNDMtMS44NiA1LjU5IDIuMTEgNi43MiAxLjcgMzcuMjUgMS45MiAxLjczIDAgMS43OC0uMDggMS44Mi0xLjg1LjY4LTI3LjQ5LjU4LTIyLjU5IDEtMjkuNTVhMi42OSAyLjY5IDAgMCAwLTEuNjMtMi44Yy01LjYtMi45MS04Ljc1LTcuNTUtOC45LTEzLjg3LS4zNS0xNC44MSAxNy43Mi0yMS42NyAyNy4zOC0xMS41MSA2Ljg0IDcuMTkgNS44IDE4LjkxLTIuNDUgMjQuMTVhNC4zNSA0LjM1IDAgMCAwLTIuMjIgNC4zNGMwIC41OS0uMTEtNC4zMSAxIDMwLjA1IDAgLjkuNDMgMS4xMiAxLjI0IDEuMTEuMSAwIDIzLS4wOSAzNC40Ny0uMzd6TTY4LjI3IDE0MS43YzE5Ljg0LTQuNTEgMzIuNjgtLjU2IDUyLjQ5IDEuNjkgMi43Ni4zMSAzLjc0IDEuMjIgMy42MiA0LS4yMSA1LTEuMTYgMjIuMzMtMS4yNCAyMy4xNWEyLjY1IDIuNjUgMCAwIDEtMS42MyAyLjM0Yy00LjA2IDEuNy0zLjYxLTQuNDUtNC03LjI5LTMuMTMtMjIuNDMtNzMuODctMzIuNy03NC42MyAyNS40LS4zMSAyMy45MiAxNyA1My42MyA1NC4wOCA1MC44OCAyNy4yNC0yIDE5LTIwLjE5IDI0Ljg0LTIwLjQ3YTIuNzIgMi43MiAwIDAgMSAzIDMuMzZjLTEuODMgMTAuODUtMy40MiAxOC45NS0zLjQ1IDE5LjE1LTEuNTQgOS4xNy04Ni43IDIyLjA5LTkzLjM1LTQyLjA2LTIuNzEtMjUuODUgMTAuNDQtNTMuMzcgNDAuMjctNjAuMTV6bTgwIDg3LjY3aC0xOS40OWEyLjU3IDIuNTcgMCAwIDEtMi42Ni0xLjc5YzIuMzgtMy43NSA1Ljg5LjkyIDUuODYtNi4xNC0uMDgtMjUuNzUuMjEtMzggLjIzLTQwLjEgMC0zLjQyLS41My00LjY1LTMuMzItNC45NC03LS43Mi0zLjExLTMuMzctMS4xMS0zLjM4IDExLjg0LS4xIDIyLjYyLS4xOCAzMC4wNS43MiA4Ljc3IDEuMDcgMTYuNzEgMTIuNjMgNy45MyAyMi42Mi0yIDIuMjUtNCA0LjQyLTYuMTQgNi43My45NSAxLjE1IDYuOSA4LjgyIDE3LjI4IDE5LjY4IDIuNjYgMi43OCA2LjE1IDMuNTEgOS44OCAzLjEzYTIuMjEgMi4yMSAwIDAgMCAyLjIzLTIuMTJjLjMtMy40Mi4yNiA0LjczLjQ1LTQwLjU4IDAtNS42NS0uMzQtNi41OC0zLjIzLTYuODMtMy45NS0uMzUtNC0yLjI2LS42OS0zLjM3bDE5LjA5LS4wOWMuMzIgMCA0LjQ5LjUzIDEgMy4zOCAwIC4wNS0uMTYgMC0uMjQgMC0zLjYxLjI2LTMuOTQgMS00IDQuNjItLjI3IDQzLjkzLjA3IDQwLjIzLjQxIDQyLjgyLjExLjg0LjI3IDIuMjMgNS4xIDIuMTQgMi40OSAwIDMuODYgMy4zNyAwIDMuNC0xMC4zNy4wOC0yMC43NCAwLTMxLjExLjA3LTEwLjY3IDAtMTMuNDctNi4yLTI0LjIxLTIwLjgyLTEuNi0yLjE4LTguMzEtMi4zNi04LjItLjM3Ljg4IDE2LjQ3IDAgMTcuNzggNCAxNy42NyA0Ljc1LS4xIDQuNzMgMy41Ny44MyAzLjU1em0yNzUtMTAuMTVjLTEuMjEgNy4xMy4xNyAxMC4zOC01LjMgMTAuMzQtNjEuNTUtLjQyLTQ3LjgyLS4yMi01MC43Mi0uMzFhMTguNCAxOC40IDAgMCAxLTMuNjMtLjczYy0yLjUzLS42IDEuNDgtMS4yMy0uMzgtNS42LTEuNDMtMy4zNy0yLjc4LTYuNzgtNC4xMS0xMC4xOWExLjk0IDEuOTQgMCAwIDAtMi0xLjQ0IDEzOCAxMzggMCAwIDAtMTQuNTguMDcgMi4yMyAyLjIzIDAgMCAwLTEuNjIgMS4wNmMtMS41OCAzLjYyLTMuMDcgNy4yOS00LjUxIDExLTEuMjcgMy4yMyA3Ljg2IDEuMzIgMTIuMTkgMi4xNiAzIC41NyA0LjUzIDMuNzIuNjYgMy43M0gzMjIuOWMtMi45MiAwLTMuMDktMy4xNS0uNzQtMy4yMWE2LjMgNi4zIDAgMCAwIDUuOTItMy40N2MxLjUtMyAyLjgtNiA0LjExLTkuMDkgMTguMTgtNDIuMTQgMTcuMDYtNDAuMTcgMTguNDItNDEuNjFhMS44MyAxLjgzIDAgMCAxIDMgMGMyLjkzIDMuMzQgMTguNCA0NC43MSAyMy42MiA1MS45MiAyIDIuNyA1Ljc0IDIgNi4zNiAyIDMuNjEuMTMgNC0xLjExIDQuMTMtNC4yOS4wOS0xLjg3LjA4IDEuMTcuMDctNDEuMjQgMC00LjQ2LTIuMzYtMy43NC01LjU1LTQuMjctLjI2IDAtMi41Ni0uNjMtLjA4LTMuMDYuMjEtLjItLjg5LS4yNCAyMS43LS4xNSAyLjMyIDAgNS4zMiAyLjc1LTEuMjEgMy40NWEyLjU2IDIuNTYgMCAwIDAtMi42NiAyLjgzYy0uMDcgMS42My0uMTkgMzguODkuMjkgNDEuMjFhMy4wNiAzLjA2IDAgMCAwIDMuMjMgMi40M2MxMy4yNS40MyAxNC45Mi40NCAxNi0zLjQxIDEuNjctNS43OCA0LjEzLTIuNTIgMy43My0uMTl6bS0xMDQuNzIgNjQuMzdjLTQuMjQgMC00LjQyLTMuMzktLjYxLTMuNDEgMzUuOTEtLjE2IDI4LjExLjM4IDM3LjE5LS42NSAxLjY4LS4xOSAyLjM4LjI0IDIuMjUgMS44OS0uMjYgMy4zOS0uNjQgNi43OC0xIDEwLjE2LS4yNSAyLjE2LTMuMiAyLjYxLTMuNC0uMTUtLjM4LTUuMzEtMi4xNS00LjQ1LTE1LjYzLTUuMDgtMS41OC0uMDctMS42NCAwLTEuNjQgMS41MlYzMDRjMCAxLjY1IDAgMS42IDEuNjIgMS40NyAzLjEyLS4yNSAxMC4zMS4zNCAxNS42OS0xLjUyLjQ3LS4xNiAzLjMtMS43OSAzLjA3IDEuNzYgMCAuMjEtLjc2IDEwLjM1LTEuMTggMTEuMzktLjUzIDEuMjktMS44OCAxLjUxLTIuNTguMzItMS4xNy0yIDAtNS4wOC0zLjcxLTUuMy0xNS40Mi0uOS0xMi45MS0yLjU1LTEyLjkxIDYgMCAxMi4yNS0uNzYgMTYuMTEgMy44OSAxNi4yNCAxNi42NC40OCAxNC40IDAgMTYuNDMtNS43MS44NC0yLjM3IDMuNS0xLjc3IDMuMTguNTgtLjQ0IDMuMjEtLjg1IDYuNDMtMS4yMyA5LjY0IDAgLjM2LS4xNiAyLjQtNC42NiAyLjM5LTM3LjE2LS4wOC0zNC41NC0uMTktMzUuMjEtLjMxLTIuNzItLjUxLTIuMi0zIC4yMi0zLjQ1IDEuMS0uMTkgNCAuNTQgNC4xNi0yLjU2IDIuNDQtNTYuMjItLjA3LTUxLjM0LTMuOTEtNTEuMzN6bS0uNDEtMTA5LjUyYzIuNDYuNjEgMy4xMyAxLjc2IDIuOTUgNC42NS0uMzMgNS4zLS4zNCA5LS41NSA5LjY5LS42NiAyLjIzLTMuMTUgMi4xMi0zLjM0LS4yNy0uMzgtNC44MS0zLjA1LTcuODItNy41Ny05LjE1LTI2LjI4LTcuNzMtMzIuODEgMTUuNDYtMjcuMTcgMzAuMjIgNS44OCAxNS40MSAyMiAxNS45MiAyOC44NiAxMy43OCA1LjkyLTEuODUgNS44OC02LjUgNi45MS03LjU4IDEuMjMtMS4zIDIuMjUtMS44NCAzLjEyIDEuMSAwIC4xLjU3IDExLjg5LTYgMTIuNzUtMS42LjIxLTE5LjM4IDMuNjktMzIuNjgtMy4zOS0yMS0xMS4xOS0xNi43NC0zNS40Ny02Ljg4LTQ1LjMzIDE0LTE0LjA2IDM5LjkxLTcuMDYgNDIuMzItNi40N3pNMjg5LjggMjgwLjE0YzMuMjggMCAzLjY2IDMgLjE2IDMuNDMtMi42MS4zMi01LS40Mi01IDUuNDYgMCAyLS4xOSAyOS4wNS40IDQxLjQ1LjExIDIuMjkgMS4xNSAzLjUyIDMuNDQgMy42NSAyMiAxLjIxIDE0Ljk1LTEuNjUgMTguNzktNi4zNCAxLjgzLTIuMjQgMi43Ni44NCAyLjc2IDEuMDguMzUgMTMuNjItNCAxMi4zOS01LjE5IDEyLjRsLTM4LjE2LS4xOWMtMS45My0uMjMtMi4wNi0zLS40Mi0zLjM4IDItLjQ4IDQuOTQuNCA1LjEzLTIuOCAxLTE1Ljg3LjU3LTQ0LjY1LjM0LTQ3LjgxLS4yNy0zLjc3LTIuOC0zLjI3LTUuNjgtMy43MS0yLjQ3LS4zOC0yLTMuMjIuMzQtMy4yMiAxLjQ1LS4wMiAxNy45Ny0uMDMgMjMuMDktLjAyem0tMzEuNjMtNTcuNzljLjA3IDQuMDggMi44NiAzLjQ2IDYgMy41OCAyLjYxLjEgMi41MyAzLjQxLS4wNyAzLjQzLTYuNDggMC0xMy43IDAtMjEuNjEtLjA2LTMuODQgMC0zLjM4LTMuMzUgMC0zLjM3IDQuNDkgMCAzLjI0IDEuNjEgMy40MS00NS41NCAwLTUuMDgtMy4yNy0zLjU0LTQuNzItNC4yMy0yLjU4LTEuMjMtMS4zNi0zLjA5LjQxLTMuMTUgMS4yOSAwIDIwLjE5LS40MSAyMS4xNy4yMXMxLjg3IDEuNjUtLjQyIDIuODZjLTEgLjUyLTMuODYtLjI4LTQuMTUgMi40NyAwIC4yMS0uODIgMS42My0uMDcgNDMuOHptLTM2LjkxIDI3NC4yN2EyLjkzIDIuOTMgMCAwIDAgMy4yNiAwYzE3LTkuNzkgMTgyLTEwMy41NyAxOTcuNDItMTEyLjUxLS4xNC0uNDMgMTEuMjYtLjE4LTE4MS41Mi0uMjctMS4yMiAwLTEuNTcuMzctMS41MyAxLjU2IDAgLjEgMS4yNSA0NC41MSAxLjIyIDUwLjM4YTI4LjMzIDI4LjMzIDAgMCAxLTEuMzYgNy43MWMtLjU1IDEuODMuMzgtLjUtMTMuNSAzMi4yMy0uNzMgMS43Mi0xIDIuMjEtMi0uMDgtNC4xOS0xMC4zNC04LjI4LTIwLjcyLTEyLjU3LTMxYTIzLjYgMjMuNiAwIDAgMS0yLTEwLjc5Yy4xNi0yLjQ2LjgtMTYuMTIgMS41MS00OCAwLTEuOTUgMC0yLTItMmgtMTgzYzIuNTggMS42MyAxNzguMzIgMTAyLjU3IDE5NiAxMTIuNzZ6bS05MC45LTE4OC43NWMwIDIuNC4zNiAyLjc5IDIuNzYgMyAxMS41NCAxLjE3IDIxIDMuNzQgMjUuNjQtNy4zMiA2LTE0LjQ2IDIuNjYtMzQuNDEtMTIuNDgtMzguODQtMi0uNTktMTYtMi43Ni0xNS45NCAxLjUxLjA1IDguMDQuMDEgMTEuNjEuMDIgNDEuNjV6bTEwNS43NS0xNS4wNWMwIDIuMTMgMS4wNyAzOC42OCAxLjA5IDM5LjEzLjM0IDkuOTQtMjUuNTggNS43Ny0yNS4yMy0yLjU5LjA4LTIgMS4zNy0zNy40MiAxLjEtMzkuNDMtMTQuMSA3LjQ0LTE0LjQyIDQwLjIxIDYuNDQgNDguOGExNy45IDE3LjkgMCAwIDAgMjIuMzktNy4wN2M0LjkxLTcuNzYgNi44NC0yOS40Ny01LjQzLTM5YTIuNTMgMi41MyAwIDAgMS0uMzYuMTJ6bS0xMi4yOC0xOThjLTkuODMgMC05LjczIDE0Ljc1LS4wNyAxNC44N3MxMC4xLTE0Ljg4LjA3LTE0Ljkxem0tODAuMTUgMTAzLjgzYzAgMS44LjQxIDIuNCAyLjE3IDIuNTggMTMuNjIgMS4zOSAxMi41MS0xMSAxMi4xNi0xMy4zNi0xLjY5LTExLjIyLTE0LjM4LTEwLjItMTQuMzUtNy44MS4wNSA0LjUtLjAzIDEzLjY4LjAyIDE4LjU5em0yMTIuMzIgNi40bC02LjEtMTUuODRjLTIuMTYgNS40OC00LjE2IDEwLjU3LTYuMjMgMTUuODR6XCJdXG59O1xudmFyIGZhU2l0cm94ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3NpdHJveCcsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZTQ0YVwiLCBcIk0yMTIuNDM5IDAuMDA4NDYxMjhWMEg0NDhWMTI4SDY0QzY0IDU3LjYwMDggMTQxLjc1NSAwLjQ3NTMzOCAyMTIuNDM5IDAuMDA4NDYxMjhaTTIzNy4yNTYgMTkyVjE5Mi4wMDdDMzA3LjEzNSAxOTIuNDc1IDM4NCAyNDkuNiAzODQgMzIwSDIxMC44MDlWMzE5Ljk5NUMxNDAuOTE1IDMxOS41NjMgNjQgMjYyLjQyNCA2NCAxOTJIMjM3LjI1NlpNMjM1LjU2NSA1MTEuOTkzQzMwNi4yNTEgNTExLjUyMSAzODQgNDU0LjM5OSAzODQgMzg0SDBWNTEySDIzNS41NjVWNTExLjk5M1pcIl1cbn07XG52YXIgZmFEaXNjb3Vyc2UgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZGlzY291cnNlJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMzkzXCIsIFwiTTIyNS45IDMyQzEwMy4zIDMyIDAgMTMwLjUgMCAyNTIuMSAwIDI1NiAuMSA0ODAgLjEgNDgwbDIyNS44LS4yYzEyMi43IDAgMjIyLjEtMTAyLjMgMjIyLjEtMjIzLjlDNDQ4IDEzNC4zIDM0OC42IDMyIDIyNS45IDMyek0yMjQgMzg0Yy0xOS40IDAtMzcuOS00LjMtNTQuNC0xMi4xTDg4LjUgMzkybDIyLjktNzVjLTkuOC0xOC4xLTE1LjQtMzguOS0xNS40LTYxIDAtNzAuNyA1Ny4zLTEyOCAxMjgtMTI4czEyOCA1Ny4zIDEyOCAxMjgtNTcuMyAxMjgtMTI4IDEyOHpcIl1cbn07XG52YXIgZmFKb29tbGEgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnam9vbWxhJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmMWFhXCIsIFwiTS42IDkyLjFDLjYgNTguOCAyNy40IDMyIDYwLjQgMzJjMzAgMCA1NC41IDIxLjkgNTkuMiA1MC4yIDMyLjYtNy42IDY3LjEuNiA5Ni41IDMwbC00NC4zIDQ0LjNjLTIwLjUtMjAuNS00Mi42LTE2LjMtNTUuNC0zLjUtMTQuMyAxNC4zLTE0LjMgMzcuOSAwIDUyLjJsOTkuNSA5OS41LTQ0IDQ0LjNjLTg3LjctODcuMi00OS43LTQ5LjctOTkuOC05OS43LTI2LjgtMjYuNS0zNS02NC44LTI0LjgtOTguOUMyMC40IDE0NC42LjYgMTIwLjcuNiA5Mi4xem0xMjkuNSAxMTYuNGw0NC4zIDQ0LjNjMTAtMTAgODkuNy04OS43IDk5LjctOTkuOCAxNC4zLTE0LjMgMzcuNi0xNC4zIDUxLjkgMCAxMi44IDEyLjggMTcgMzUtMy41IDU1LjRsNDQgNDQuM2MzMS4yLTMxLjIgMzguNS02Ny42IDI4LjktMTAxLjIgMjkuMi00LjEgNTEuOS0yOS4yIDUxLjktNTkuNSAwLTMzLjItMjYuOC02MC4xLTU5LjgtNjAuMS0zMC4zIDAtNTUuNCAyMi41LTU5LjUgNTEuNi0zMy44LTkuOS03MS43LTEuNS05OC4zIDI1LjEtMTguMyAxOS4xLTcxLjEgNzEuNS05OS42IDk5Ljl6bTI2Ni4zIDE1Mi4yYzguMi0zMi43LS45LTY4LjUtMjYuMy05My45LTExLjgtMTIuMiA1IDQuNy05OS41LTk5LjdsLTQ0LjMgNDQuMyA5OS43IDk5LjdjMTQuMyAxNC4zIDE0LjMgMzcuNiAwIDUxLjktMTIuOCAxMi44LTM1IDE3LTU1LjQtMy41bC00NCA0NC4zYzI3LjYgMzAuMiA2OCAzOC44IDEwMi43IDI4IDUuNSAyNy40IDI5LjcgNDguMSA1OC45IDQ4LjEgMzMgMCA1OS44LTI2LjggNTkuOC02MC4xIDAtMzAuMi0yMi41LTU1LTUxLjYtNTkuMXptLTg0LjMtNTMuMWwtNDQtNDQuM2MtODcgODYuNC01MC40IDUwLjQtOTkuNyA5OS44LTE0LjMgMTQuMy0zNy42IDE0LjMtNTEuOSAwLTEzLjEtMTMuNC0xNi45LTM1LjMgMy4yLTU1LjRsLTQ0LTQ0LjNjLTMwLjIgMzAuMi0zOCA2NS4yLTI5LjUgOTguMy0yNi43IDYtNDYuMiAyOS45LTQ2LjIgNTguMkMwIDQ1My4yIDI2LjggNDgwIDU5LjggNDgwYzI4LjYgMCA1Mi41LTE5LjggNTguNi00Ni43IDMyLjcgOC4yIDY4LjUtLjYgOTQuMi0yNiAzMi4xLTMyIDEyLjItMTIuNCA5OS41LTk5Ljd6XCJdXG59O1xudmFyIGZhTWFzdG9kb24gPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnbWFzdG9kb24nLFxuICBpY29uOiBbNDQ4LCA1MTIsIFtdLCBcImY0ZjZcIiwgXCJNNDMzIDE3OS4xMWMwLTk3LjItNjMuNzEtMTI1LjctNjMuNzEtMTI1LjctNjIuNTItMjguNy0yMjguNTYtMjguNC0yOTAuNDggMCAwIDAtNjMuNzIgMjguNS02My43MiAxMjUuNyAwIDExNS43LTYuNiAyNTkuNCAxMDUuNjMgMjg5LjEgNDAuNTEgMTAuNyA3NS4zMiAxMyAxMDMuMzMgMTEuNCA1MC44MS0yLjggNzkuMzItMTguMSA3OS4zMi0xOC4xbC0xLjctMzYuOXMtMzYuMzEgMTEuNC03Ny4xMiAxMC4xYy00MC40MS0xLjQtODMtNC40LTg5LjYzLTU0YTEwMi41NCAxMDIuNTQgMCAwIDEtLjktMTMuOWM4NS42MyAyMC45IDE1OC42NSA5LjEgMTc4Ljc1IDYuNyA1Ni4xMi02LjcgMTA1LTQxLjMgMTExLjIzLTcyLjkgOS44LTQ5LjggOS0xMjEuNSA5LTEyMS41em0tNzUuMTIgMTI1LjJoLTQ2LjYzdi0xMTQuMmMwLTQ5LjctNjQtNTEuNi02NCA2Ljl2NjIuNWgtNDYuMzNWMTk3YzAtNTguNS02NC01Ni42LTY0LTYuOXYxMTQuMkg5MC4xOWMwLTEyMi4xLTUuMi0xNDcuOSAxOC40MS0xNzUgMjUuOS0yOC45IDc5LjgyLTMwLjggMTAzLjgzIDYuMWwxMS42IDE5LjUgMTEuNi0xOS41YzI0LjExLTM3LjEgNzguMTItMzQuOCAxMDMuODMtNi4xIDIzLjcxIDI3LjMgMTguNCA1MyAxOC40IDE3NXpcIl1cbn07XG52YXIgZmFBaXJibmIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnYWlyYm5iJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmODM0XCIsIFwiTTIyNCAzNzMuMTJjLTI1LjI0LTMxLjY3LTQwLjA4LTU5LjQzLTQ1LTgzLjE4LTIyLjU1LTg4IDExMi42MS04OCA5MC4wNiAwLTUuNDUgMjQuMjUtMjAuMjkgNTItNDUgODMuMTh6bTEzOC4xNSA3My4yM2MtNDIuMDYgMTguMzEtODMuNjctMTAuODgtMTE5LjMtNTAuNDcgMTAzLjktMTMwLjA3IDQ2LjExLTIwMC0xOC44NS0yMDAtNTQuOTIgMC04NS4xNiA0Ni41MS03My4yOCAxMDAuNSA2LjkzIDI5LjE5IDI1LjIzIDYyLjM5IDU0LjQzIDk5LjUtMzIuNTMgMzYuMDUtNjAuNTUgNTIuNjktODUuMTUgNTQuOTItNTAgNy40My04OS4xMS00MS4wNi03MS4zLTkxLjA5IDE1LjEtMzkuMTYgMTExLjcyLTIzMS4xOCAxMTUuODctMjQxLjU2IDE1Ljc1LTMwLjA3IDI1LjU2LTU3LjQgNTkuMzgtNTcuNCAzMi4zNCAwIDQzLjQgMjUuOTQgNjAuMzcgNTkuODcgMzYgNzAuNjIgODkuMzUgMTc3LjQ4IDExNC44NCAyMzkuMDkgMTMuMTcgMzMuMDctMS4zNyA3MS4yOS0zNy4wMSA4Ni42NHptNDctMTM2LjEyQzI4MC4yNyAzNS45MyAyNzMuMTMgMzIgMjI0IDMyYy00NS41MiAwLTY0Ljg3IDMxLjY3LTg0LjY2IDcyLjc5QzMzLjE4IDMxNy4xIDIyLjg5IDM0Ny4xOSAyMiAzNDkuODEtMy4yMiA0MTkuMTQgNDguNzQgNDgwIDExMS42MyA0ODBjMjEuNzEgMCA2MC42MS02LjA2IDExMi4zNy02Mi40IDU4LjY4IDYzLjc4IDEwMS4yNiA2Mi40IDExMi4zNyA2Mi40IDYyLjg5LjA1IDExNC44NS02MC44NiA4OS42MS0xMzAuMTkuMDItMy44OS0xNi44Mi0zOC45LTE2LjgyLTM5LjU4elwiXVxufTtcbnZhciBmYVdvbGZQYWNrQmF0dGFsaW9uID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dvbGYtcGFjay1iYXR0YWxpb24nLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY1MTRcIiwgXCJNMjY3LjczIDQ3MS41M2wxMC41NiAxNS44NCA1LjI4LTEyLjMyIDUuMjggN1Y1MTJjMjEuMDYtNy45MiAyMS4xMS02Ni44NiAyNS41MS05Ny4yMSA0LjYyLTMxLjg5LS44OC05Mi44MSA4MS4zNy0xNDkuMTEtOC44OC0yMy42MS0xMi00OS40My0yLjY0LTgwLjA1QzQyMSAxODkgNDQ3IDE5Ni4yMSA0NTYuNDMgMjM5LjczbC0zMC4zNSA4LjM2YzExLjE1IDIzIDE3IDQ2Ljc2IDEzLjIgNzIuMTRMNDEyIDMxMy4xOGwtNi4xNiAzMy40My0xOC40Ny03LTguOCAzMy4zOS0xOS4zNS03IDI2LjM5IDIxLjExIDguOC0yOC4xNUw0MTkgMzY0LjJsNy0zNS42MyAyNi4zOSAxNC41MmMuMjUtMjAgNy01OC4wNi04LjgtODQuNDVsMjYuMzkgNS4yOGM0LTIyLjA3LTIuMzgtMzkuMjEtNy45Mi01Ni43NGwyMi40MyA5LjY4Yy0uNDQtMjUuMDctMjkuOTQtNTYuNzktNjEuNTgtNTguNS0yMC4yMi0xLjA5LTU2Ljc0LTI1LjE3LTU0LjEtNTEuOSAyLTE5Ljg3IDE3LjQ1LTQyLjYyIDQzLjExLTQ5LjctNDQgMzYuNTEtOS42OCA2Ny4zIDUuMjggNzMuNDYgNC40LTExLjQ0IDE3LjU0LTY5LjA4IDAtMTMwLjItNDAuMzkgMjIuODctODkuNjUgNjUuMS05My4yIDE0Ny43OWwtNTggMzguNzEtMy41MiA5My4yNUwzNjkuNzggMjIwbDcgNy0xNy41OSAzLjUyLTQ0IDM4LjcxLTE1Ljg0LTUuMjgtMjguMSA0OS4yNS0zLjUyIDExOS42NCAyMS4xMSAxNS44NC0zMi41NSAxNS44NC0zMi41NS0xNS44NCAyMS4xMS0xNS44NC0zLjUyLTExOS42NC0yOC4xNS00OS4yNi0xNS44NCA1LjI4LTQ0LTM4LjcxLTE3LjU4LTMuNTEgNy03IDEwNy4zMyA1OS44Mi0zLjUyLTkzLjI1LTU4LjA2LTM4LjcxQzE4NSA2NS4xIDEzNS43NyAyMi44NyA5NS4zIDBjLTE3LjU0IDYxLjEyLTQuNCAxMTguNzYgMCAxMzAuMiAxNS02LjE2IDQ5LjI2LTM2Ljk1IDUuMjgtNzMuNDYgMjUuNjYgNy4wOCA0MS4xNSAyOS44MyA0My4xMSA0OS43IDIuNjMgMjYuNzQtMzMuODggNTAuODEtNTQuMSA1MS45LTMxLjY1IDEuNzItNjEuMTUgMzMuNDQtNjEuNTkgNTguNTFsMjIuNDMtOS42OGMtNS41NCAxNy41My0xMS45MSAzNC42Ny03LjkyIDU2Ljc0bDI2LjM5LTUuMjhjLTE1Ljc2IDI2LjM5LTkuMDUgNjQuNDMtOC44IDg0LjQ1bDI2LjM5LTE0LjUyIDcgMzUuNjMgMjQuNjMtNS4yOCA4LjggMjguMTVMMTUzLjM1IDM2NiAxMzQgMzczbC04LjgtMzMuNDMtMTguNDcgNy02LjE2LTMzLjQzLTI3LjI3IDdjLTMuODItMjUuMzggMi00OS4xIDEzLjItNzIuMTRsLTMwLjM1LTguMzZjOS40LTQzLjUyIDM1LjQ3LTUwLjc3IDYzLjM0LTU0LjEgOS4zNiAzMC42MiA2LjI0IDU2LjQ1LTIuNjQgODAuMDUgODIuMjUgNTYuMyA3Ni43NSAxMTcuMjMgODEuMzcgMTQ5LjExIDQuNCAzMC4zNSA0LjQ1IDg5LjI5IDI1LjUxIDk3LjIxdi0yOS44M2w1LjI4LTcgNS4yOCAxMi4zMiAxMC41Ni0xNS44NCAxMS40NCAyMS4xMSAxMS40My0yMS4xem03OS4xNy05NUwzMzEuMDYgMzY2YzcuNDctNC4zNiAxMy43Ni04LjQyIDE5LjM1LTEyLjMyLS42IDcuMjItLjI3IDEzLjg0LTMuNTEgMjIuODR6bTI4LjE1LTQ5LjI2Yy0uNCAxMC45NC0uOSAyMS42Ni0xLjc2IDMxLjY3LTcuODUtMS44Ni0xNS41Ny0zLjgtMjEuMTEtNyA4LjI0LTcuOTQgMTUuNTUtMTYuMzIgMjIuODctMjQuNjh6bTI0LjYzIDUuMjhjMC0xMy40My0yLjA1LTI0LjIxLTUuMjgtMzMuNDNhMjM1IDIzNSAwIDAgMS0xOC40NyAyNy4yN3ptMy41Mi04MC45NGMxOS40NCAxMi44MSAyNy44IDMzLjY2IDI5LjkxIDU2LjMtMTIuMzItNC41My0yNC42My05LjMxLTM2Ljk1LTEwLjU2IDUuMDYtMTIgNi42NS0yOC4xNCA3LTQ1Ljc0em0tMS43Ni00NS43NGMuODEgMTQuMyAxLjg0IDI4LjgyIDEuNzYgNDIuMjMgMTkuMjItOC4xMSAyOS43OC05LjcyIDQ0LTE0LjA4LTEwLjYxLTE4Ljk2LTI3LjItMjUuNTMtNDUuNzYtMjguMTZ6TTE2NS42OCAzNzYuNTJMMTgxLjUyIDM2NmMtNy40Ny00LjM2LTEzLjc2LTguNDItMTkuMzUtMTIuMzIuNiA3LjI2LjI3IDEzLjg4IDMuNTEgMjIuODh6bS0yOC4xNS00OS4yNmMuNCAxMC45NC45IDIxLjY2IDEuNzYgMzEuNjcgNy44NS0xLjg2IDE1LjU3LTMuOCAyMS4xMS03LTguMjQtNy45My0xNS41NS0xNi4zMS0yMi44Ny0yNC42N3ptLTI0LjY0IDUuMjhjMC0xMy40MyAyLTI0LjIxIDUuMjgtMzMuNDNhMjM1IDIzNSAwIDAgMCAxOC40NyAyNy4yN3ptLTMuNTItODAuOTRjLTE5LjQ0IDEyLjgxLTI3LjggMzMuNjYtMjkuOTEgNTYuMyAxMi4zMi00LjUzIDI0LjYzLTkuMzEgMzctMTAuNTYtNS0xMi02LjY1LTI4LjE0LTctNDUuNzR6bTEuNzYtNDUuNzRjLS44MSAxNC4zLTEuODQgMjguODItMS43NiA0Mi4yMy0xOS4yMi04LjExLTI5Ljc4LTkuNzItNDQtMTQuMDggMTAuNjMtMTguOTUgMjcuMjMtMjUuNTIgNDUuNzYtMjguMTV6XCJdXG59O1xudmFyIGZhQnV5TkxhcmdlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2J1eS1uLWxhcmdlJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmOGE2XCIsIFwiTTI4OCAzMkMxMzMuMjcgMzIgNy43OSAxMzIuMzIgNy43OSAyNTZTMTMzLjI3IDQ4MCAyODggNDgwczI4MC4yMS0xMDAuMzIgMjgwLjIxLTIyNFM0NDIuNzMgMzIgMjg4IDMyem0tODUuMzkgMzU3LjE5TDY0LjEgMzkwLjU1bDc3LjI1LTI5MC43NGgxMzMuNDRjNjMuMTUgMCA4NC45MyAyOC42NSA3OCA3Mi44NGE2MC4yNCA2MC4yNCAwIDAgMS0xLjUgNi44NSA3Ny4zOSA3Ny4zOSAwIDAgMC0xNy4yMS0xLjkzYy00Mi4zNSAwLTc2LjY5IDMzLjg4LTc2LjY5IDc1LjY1IDAgMzcuMTQgMjcuMTQgNjggNjIuOTMgNzQuNDUtMTguMjQgMzcuMTYtNTYuMTYgNjAuOTItMTE3LjcxIDYxLjUyek0zNTggMjA3LjExaDMybC0yMi4xNiA5MC4zMWgtMzUuNDFsLTExLjE5LTM1LjYzLTcuODMgMzUuNjNoLTM3LjgzbDI2LjYzLTkwLjMxaDMxLjM0bDE1IDM2Ljc1em0xNDUuODYgMTgyLjA4SDMwNi43OUwzMjIuNjMgMzI4YTc4LjggNzguOCAwIDAgMCAxMS40Ny44M2M0Mi4zNCAwIDc2LjY5LTMzLjg3IDc2LjY5LTc1LjY1IDAtMzIuNjUtMjEtNjAuNDYtNTAuMzgtNzEuMDZsMjEuMzMtODIuMzVoOTIuNWwtNTMuMDUgMjA1LjM2aDEwMy44N3pNMjExLjcgMjY5LjM5SDE4N2wtMTMuOCA1Ni40N2gyNC43YzE2LjE0IDAgMzIuMTEtMy4xOCAzNy45NC0yNi42NSA1LjU2LTIyLjMxLTcuOTktMjkuODItMjQuMTQtMjkuODJ6TTIzMyAxNzBoLTIxLjM0TDIwMCAyMTcuNzFoMjEuMzdjMTggMCAzNS4zOC0xNC42NCAzOS4yMS0zMC4xNEMyNjUuMjMgMTY4LjcxIDI1MS4wNyAxNzAgMjMzIDE3MHpcIl1cbn07XG52YXIgZmFHdWxwID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2d1bHAnLFxuICBpY29uOiBbMjU2LCA1MTIsIFtdLCBcImYzYWVcIiwgXCJNMjA5LjggMzkxLjFsLTE0LjEgMjQuNi00LjYgODAuMmMwIDguOS0yOC4zIDE2LjEtNjMuMSAxNi4xcy02My4xLTcuMi02My4xLTE2LjFsLTUuOC03OS40LTE0LjktMjUuNGM0MS4yIDE3LjMgMTI2IDE2LjcgMTY1LjYgMHptLTE5Ni0yNTMuM2wxMy42IDEyNS41YzUuOS0yMCAyMC44LTQ3IDQwLTU1LjIgNi4zLTIuNyAxMi43LTIuNyAxOC43LjkgNS4yIDMgOS42IDkuMyAxMC4xIDExLjggMS4yIDYuNS0yIDkuMS00LjUgOS4xLTMgMC01LjMtNC42LTYuOC03LjMtNC4xLTcuMy0xMC4zLTcuNi0xNi45LTIuOC02LjkgNS0xMi45IDEzLjQtMTcuMSAyMC43LTUuMSA4LjgtOS40IDE4LjUtMTIgMjguMi0xLjUgNS42LTIuOSAxNC42LS42IDE5LjkgMSAyLjIgMi41IDMuNiA0LjkgMy42IDUgMCAxMi4zLTYuNiAxNS44LTEwLjEgNC41LTQuNSAxMC4zLTExLjUgMTIuNS0xNmw1LjItMTUuNWMyLjYtNi44IDkuOS01LjYgOS45IDAgMCAxMC4yLTMuNyAxMy42LTEwIDM0LjctNS44IDE5LjUtNy42IDI1LjgtNy42IDI1LjgtLjcgMi44LTMuNCA3LjUtNi4zIDcuNS0xLjIgMC0yLjEtLjQtMi42LTEuMi0xLTEuNC0uOS01LjMtLjgtNi4zLjItMy4yIDYuMy0yMi4yIDcuMy0yNS4yLTIgMi4yLTQuMSA0LjQtNi40IDYuNi01LjQgNS4xLTE0LjEgMTEuOC0yMS41IDExLjgtMy40IDAtNS42LS45LTcuNy0yLjRsNy42IDc5LjZjMiA1IDM5LjIgMTcuMSA4OC4yIDE3LjEgNDkuMSAwIDg2LjMtMTIuMiA4OC4yLTE3LjFsMTAuOS05NC42Yy01LjcgNS4yLTEyLjMgMTEuNi0xOS42IDE0LjgtNS40IDIuMy0xNy40IDMuOC0xNy40LTUuNyAwLTUuMiA5LjEtMTQuOCAxNC40LTIxLjUgMS40LTEuNyA0LjctNS45IDQuNy04LjEgMC0yLjktNi0yLjItMTEuNyAyLjUtMy4yIDIuNy02LjIgNi4zLTguNyA5LjctNC4zIDYtNi42IDExLjItOC41IDE1LjUtNi4yIDE0LjItNC4xIDguNi05LjEgMjItNSAxMy4zLTQuMiAxMS44LTUuMiAxNC0uOSAxLjktMi4yIDMuNS00IDQuNS0xLjkgMS00LjUuOS02LjEtLjMtLjktLjYtMS4zLTEuOS0xLjMtMy43IDAtLjkuMS0xLjguMy0yLjcgMS41LTYuMSA3LjgtMTguMSAxNS0zNC4zIDEuNi0zLjcgMS0yLjYuOC0yLjMtNi4yIDYtMTAuOSA4LjktMTQuNCAxMC41LTUuOCAyLjYtMTMgMi42LTE0LjUtNC4xLS4xLS40LS4xLS44LS4yLTEuMi0xMS44IDkuMi0yNC4zIDExLjctMjAtOC4xLTQuNiA4LjItMTIuNiAxNC45LTIyLjQgMTQuOS00LjEgMC03LjEtMS40LTguNi01LjEtMi4zLTUuNSAxLjMtMTQuOSA0LjYtMjMuOCAxLjctNC41IDQtOS45IDcuMS0xNi4yIDEuNi0zLjQgNC4yLTUuNCA3LjYtNC41LjYuMiAxLjEuNCAxLjYuNyAyLjYgMS44IDEuNiA0LjUuMyA3LjItMy44IDcuNS03LjEgMTMtOS4zIDIwLjgtLjkgMy4zLTIgOSAxLjUgOSAyLjQgMCA0LjctLjggNi45LTIuNCA0LjYtMy40IDguMy04LjUgMTEuMS0xMy41IDItMy42IDQuNC04LjMgNS42LTEyLjMuNS0xLjcgMS4xLTMuMyAxLjgtNC44IDEuMS0yLjUgMi42LTUuMSA1LjItNS4xIDEuMyAwIDIuNC41IDMuMiAxLjUgMS43IDIuMiAxLjMgNC41LjQgNi45LTIgNS42LTQuNyAxMC42LTYuOSAxNi43LTEuMyAzLjUtMi43IDgtMi43IDExLjcgMCAzLjQgMy43IDIuNiA2LjggMS4yIDIuNC0xLjEgNC44LTIuOCA2LjgtNC41IDEuMi00LjkuOS0zLjggMjYuNC02OC4yIDEuMy0zLjMgMy43LTQuNyA2LjEtNC43IDEuMiAwIDIuMi40IDMuMiAxLjEgMS43IDEuMyAxLjcgNC4xIDEgNi4yLS43IDEuOS0uNiAxLjMtNC41IDEwLjUtNS4yIDEyLjEtOC42IDIwLjgtMTMuMiAzMS45LTEuOSA0LjYtNy43IDE4LjktOC43IDIyLjMtLjYgMi4yLTEuMyA1LjggMSA1LjggNS40IDAgMTkuMy0xMy4xIDIzLjEtMTcgLjItLjMuNS0uNC45LS42LjYtMS45IDEuMi0zLjcgMS43LTUuNSAxLjQtMy44IDIuNy04LjIgNS4zLTExLjMuOC0xIDEuNy0xLjYgMi43LTEuNiAyLjggMCA0LjIgMS4yIDQuMiA0IDAgMS4xLS43IDUuMS0xLjEgNi4yIDEuNC0xLjUgMi45LTMgNC41LTQuNSAxNS0xMy45IDI1LjctNi44IDI1LjcuMiAwIDcuNC04LjkgMTcuNy0xMy44IDIzLjQtMS42IDEuOS00LjkgNS40LTUgNi40IDAgMS4zLjkgMS44IDIuMiAxLjggMiAwIDYuNC0zLjUgOC00LjcgNS0zLjkgMTEuOC05LjkgMTYuNi0xNC4xbDE0LjgtMTM2LjhjLTMwLjUgMTcuMS0xOTcuNiAxNy4yLTIyOC4zLjJ6bTIyOS43LTguNWMwIDIxLTIzMS4yIDIxLTIzMS4yIDAgMC04LjggNTEuOC0xNS45IDExNS42LTE1LjkgOSAwIDE3LjguMSAyNi4zLjRsMTIuNi00OC43TDIyOC4xLjZjMS40LTEuNCA1LjgtLjIgOS45IDMuNXM2LjYgNy45IDUuMyA5LjNsLS4xLjFMMTg1LjkgNzRsLTEwIDQwLjdjMzkuOSAyLjYgNjcuNiA4LjEgNjcuNiAxNC42em0tNjkuNCA0LjZjMC0uOC0uOS0xLjUtMi41LTIuMWwtLjIuOGMwIDEuMy01IDIuNC0xMS4xIDIuNHMtMTEuMS0xLjEtMTEuMS0yLjRjMC0uMSAwLS4yLjEtLjNsLjItLjdjLTEuOC42LTMgMS40LTMgMi4zIDAgMi4xIDYuMiAzLjcgMTMuNyAzLjcgNy43LjEgMTMuOS0xLjYgMTMuOS0zLjd6XCJdXG59O1xudmFyIGZhQ3JlYXRpdmVDb21tb25zU2FtcGxpbmdQbHVzID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NyZWF0aXZlLWNvbW1vbnMtc2FtcGxpbmctcGx1cycsXG4gIGljb246IFs0OTYsIDUxMiwgW10sIFwiZjRmMVwiLCBcIk0yNDcuNiA4QzM4OS40IDggNDk2IDExOC4xIDQ5NiAyNTZjMCAxNDcuMS0xMTguNSAyNDgtMjQ4LjQgMjQ4QzExMy42IDUwNCAwIDM5NC41IDAgMjU2IDAgMTIzLjEgMTA0LjcgOCAyNDcuNiA4em0uOCA0NC43QzEzMC4yIDUyLjcgNDQuNyAxNTAuNiA0NC43IDI1NmMwIDEwOS44IDkxLjIgMjAyLjggMjAzLjcgMjAyLjggMTAzLjIgMCAyMDIuOC04MS4xIDIwMi44LTIwMi44LjEtMTEzLjgtOTAuMi0yMDMuMy0yMDIuOC0yMDMuM3ptMTA3IDIwNS42Yy00LjcgMC05IDIuOC0xMC43IDcuMmwtNCA5LjUtMTEtOTIuOGMtMS43LTEzLjktMjItMTMuNC0yMy4xLjRsLTQuMyA1MS40LTUuMi02OC44Yy0xLjEtMTQuMy0yMi4xLTE0LjItMjMuMiAwbC0zLjUgNDQuOS01LjktOTQuM2MtLjktMTQuNS0yMi4zLTE0LjQtMjMuMiAwbC01LjEgODMuNy00LjMtNjYuM2MtLjktMTQuNC0yMi4yLTE0LjQtMjMuMiAwbC01LjMgODAuMi00LjEtNTdjLTEuMS0xNC4zLTIyLTE0LjMtMjMuMi0uMmwtNy43IDg5LjgtMS44LTEyLjJjLTEuNy0xMS40LTE3LjEtMTMuNi0yMi0zLjNsLTEzLjIgMjcuN0g4Ny41djIzLjJoNTEuM2M0LjQgMCA4LjQtMi41IDEwLjQtNi40bDEwLjcgNzMuMWMyIDEzLjUgMjEuOSAxMyAyMy4xLS43bDMuOC00My42IDUuNyA3OC4zYzEuMSAxNC40IDIyLjMgMTQuMiAyMy4yLS4xbDQuNi03MC40IDQuOCA3My4zYy45IDE0LjQgMjIuMyAxNC40IDIzLjItLjFsNC45LTgwLjUgNC41IDcxLjhjLjkgMTQuMyAyMi4xIDE0LjUgMjMuMi4ybDQuNi01OC42IDQuOSA2NC40YzEuMSAxNC4zIDIyIDE0LjIgMjMuMS4xbDYuOC04MyAyLjcgMjIuM2MxLjQgMTEuOCAxNy43IDE0LjEgMjIuMyAzLjFsMTgtNDMuNGg1MC41VjI1OGwtNTguNC4zem0tNzggNS4yaC0yMS45djIxLjljMCA0LjEtMy4zIDcuNS03LjUgNy41LTQuMSAwLTcuNS0zLjMtNy41LTcuNXYtMjEuOWgtMjEuOWMtNC4xIDAtNy41LTMuMy03LjUtNy41IDAtNC4xIDMuNC03LjUgNy41LTcuNWgyMS45di0yMS45YzAtNC4xIDMuNC03LjUgNy41LTcuNXM3LjUgMy4zIDcuNSA3LjV2MjEuOWgyMS45YzQuMSAwIDcuNSAzLjMgNy41IDcuNSAwIDQuMS0zLjQgNy41LTcuNSA3LjV6XCJdXG59O1xudmFyIGZhU3RyYXZhID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3N0cmF2YScsXG4gIGljb246IFszODQsIDUxMiwgW10sIFwiZjQyOFwiLCBcIk0xNTguNCAwTDcgMjkyaDg5LjJsNjIuMi0xMTYuMUwyMjAuMSAyOTJoODguNXptMTUwLjIgMjkybC00My45IDg4LjItNDQuNi04OC4yaC02Ny42bDExMi4yIDIyMCAxMTEuNS0yMjB6XCJdXG59O1xudmFyIGZhRW1iZXIgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnZW1iZXInLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImY0MjNcIiwgXCJNNjM5LjkgMjU0LjZjLTEuMS0xMC43LTEwLjctNi44LTEwLjctNi44cy0xNS42IDEyLjEtMjkuMyAxMC43Yy0xMy43LTEuMy05LjQtMzItOS40LTMyczMtMjguMS01LjEtMzAuNGMtOC4xLTIuNC0xOCA3LjMtMTggNy4zcy0xMi40IDEzLjctMTguMyAzMS4ybC0xLjYuNXMxLjktMzAuNi0uMy0zNy42Yy0xLjYtMy41LTE2LjQtMy4yLTE4LjggM3MtMTQuMiA0OS4yLTE1IDY3LjJjMCAwLTIzLjEgMTkuNi00My4zIDIyLjhzLTI1LTkuNC0yNS05LjQgNTQuOC0xNS4zIDUyLjktNTkuMS00NC4yLTI3LjYtNDktMjRjLTQuNiAzLjUtMjkuNCAxOC40LTM2LjYgNTkuNy0uMiAxLjQtLjcgNy41LS43IDcuNXMtMjEuMiAxNC4yLTMzIDE4YzAgMCAzMy01NS42LTcuMy04MC45LTExLjQtNi44LTIxLjMtLjUtMjcuMiA1LjMgMTMuNi0xNy4zIDQ2LjQtNjQuMiAzNi45LTEwNS4yLTUuOC0yNC40LTE4LTI3LjEtMjkuMi0yMy4xLTE3IDYuNy0yMy41IDE2LjctMjMuNSAxNi43cy0yMiAzMi0yNy4xIDc5LjUtMTIuNiAxMDUuMS0xMi42IDEwNS4xLTEwLjUgMTAuMi0yMC4yIDEwLjctNS40LTI4LjctNS40LTI4LjcgNy41LTQ0LjYgNy01Mi4xLTEuMS0xMS42LTkuOS0xNC4yYy04LjktMi43LTE4LjUgOC42LTE4LjUgOC42cy0yNS41IDM4LjctMjcuNyA0NC42bC0xLjMgMi40LTEuMy0xLjZzMTgtNTIuNy44LTUzLjUtMjguNSAxOC44LTI4LjUgMTguOC0xOS42IDMyLjgtMjAuNCAzNi41bC0xLjMtMS42czguMS0zOC4yIDYuNC00Ny42Yy0xLjYtOS40LTEwLjUtNy41LTEwLjUtNy41cy0xMS4zLTEuMy0xNC4yIDUuOS0xMy43IDU1LjMtMTUgNzAuN2MwIDAtMjguMiAyMC4yLTQ2LjggMjAuNC0xOC41LjMtMTYuNy0xMS44LTE2LjctMTEuOHM2OC0yMy4zIDQ5LjQtNjkuMmMtOC4zLTExLjgtMTgtMTUuNS0zMS43LTE1LjMtMTMuNy4zLTMwLjMgOC42LTQxLjMgMzMuMy01LjMgMTEuOC02LjggMjMtNy44IDMxLjUgMCAwLTEyLjMgMi40LTE4LjgtMi45cy0xMCAwLTEwIDAtMTEuMiAxNC0uMSAxOC4zIDI4LjEgNi4xIDI4LjEgNi4xYzEuNiA3LjUgNi4yIDE5LjUgMTkuNiAyOS43IDIwLjIgMTUuMyA1OC44LTEuMyA1OC44LTEuM2wxNS45LTguOHMuNSAxNC42IDEyLjEgMTYuNyAxNi40IDEgMzYuNS00Ny45YzExLjgtMjUgMTIuNi0yMy42IDEyLjYtMjMuNmwxLjMtLjNzLTkuMSA0Ni44LTUuNiA1OS43QzE4Ny43IDMxOS40IDIwMyAzMTggMjAzIDMxOHM4LjMgMi40IDE1LTIxLjIgMTkuNi00OS45IDE5LjYtNDkuOWgxLjZzLTUuNiA0OC4xIDMgNjMuNyAzMC45IDUuMyAzMC45IDUuMyAxNS42LTcuOCAxOC0xMC4yYzAgMCAxOC41IDE1LjggNDQuNiAxMi45IDU4LjMtMTEuNSA3OS4xLTI1LjkgNzkuMS0yNS45czEwIDI0LjQgNDEuMSAyNi43YzM1LjUgMi43IDU0LjgtMTguNiA1NC44LTE4LjZzLS4zIDEzLjUgMTIuMSAxOC42IDIwLjctMjIuOCAyMC43LTIyLjhsMjAuNy01Ny4yaDEuOXMxLjEgMzcuMyAyMS41IDQzLjIgNDctMTMuNyA0Ny0xMy43IDYuNC0zLjUgNS4zLTE0LjN6bS01NzggNS4zYy44LTMyIDIxLjgtNDUuOSAyOS0zOSA3LjMgNyA0LjYgMjItOS4xIDMxLjQtMTMuNyA5LjUtMTkuOSA3LjYtMTkuOSA3LjZ6bTI3Mi44LTEyMy44czE5LjEtNDkuNyAyMy42LTI1LjUtNDAgOTYuMi00MCA5Ni4yYy41LTE2LjIgMTYuNC03MC43IDE2LjQtNzAuN3ptMjIuOCAxMzguNGMtMTIuNiAzMy00My4zIDE5LjYtNDMuMyAxOS42cy0zLjUtMTEuOCA2LjQtNDQuOSAzMy4zLTIwLjIgMzMuMy0yMC4yIDE2LjIgMTIuNCAzLjYgNDUuNXptODQuNi0xNC42cy0zLTEwLjUgOC4xLTMwLjZjMTEtMjAuMiAxOS42LTkuMSAxOS42LTkuMXM5LjQgMTAuMi0xLjMgMjUuNS0yNi40IDE0LjItMjYuNCAxNC4yelwiXVxufTtcbnZhciBmYUNhbmFkaWFuTWFwbGVMZWFmID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2NhbmFkaWFuLW1hcGxlLWxlYWYnLFxuICBpY29uOiBbNTEyLCA1MTIsIFtdLCBcImY3ODVcIiwgXCJNMzgzLjggMzUxLjdjMi41LTIuNSAxMDUuMi05Mi40IDEwNS4yLTkyLjRsLTE3LjUtNy41Yy0xMC00LjktNy40LTExLjUtNS0xNy40IDIuNC03LjYgMjAuMS02Ny4zIDIwLjEtNjcuM3MtNDcuNyAxMC01Ny43IDEyLjVjLTcuNSAyLjQtMTAtMi41LTEyLjUtNy41cy0xNS0zMi40LTE1LTMyLjQtNTIuNiA1OS45LTU1LjEgNjIuM2MtMTAgNy41LTIwLjEgMC0xNy42LTEwIDAtMTAgMjcuNi0xMjkuNiAyNy42LTEyOS42cy0zMC4xIDE3LjQtNDAuMSAyMi40Yy03LjUgNS0xMi42IDUtMTcuNi01QzI5My41IDcyLjMgMjU1LjkgMCAyNTUuOSAwcy0zNy41IDcyLjMtNDIuNSA3OS44Yy01IDEwLTEwIDEwLTE3LjYgNS0xMC01LTQwLjEtMjIuNC00MC4xLTIyLjRTMTgzLjMgMTgyIDE4My4zIDE5MmMyLjUgMTAtNy41IDE3LjUtMTcuNiAxMC0yLjUtMi41LTU1LjEtNjIuMy01NS4xLTYyLjNTOTguMSAxNjcgOTUuNiAxNzJzLTUgOS45LTEyLjUgNy41QzczIDE3NyAyNS40IDE2NyAyNS40IDE2N3MxNy42IDU5LjcgMjAuMSA2Ny4zYzIuNCA2IDUgMTIuNS01IDE3LjRMMjMgMjU5LjNzMTAyLjYgODkuOSAxMDUuMiA5Mi40YzUuMSA1IDEwIDcuNSA1LjEgMjIuNS01LjEgMTUtMTAuMSAzNS4xLTEwLjEgMzUuMXM5NS4yLTIwLjEgMTA1LjMtMjIuNmM4LjctLjkgMTguMyAyLjUgMTguMyAxMi41UzI0MSA1MTIgMjQxIDUxMmgzMHMtNS44LTEwMi43LTUuOC0xMTIuOCA5LjUtMTMuNCAxOC40LTEyLjVjMTAgMi41IDEwNS4yIDIyLjYgMTA1LjIgMjIuNnMtNS0yMC4xLTEwLTM1LjEgMC0xNy41IDUtMjIuNXpcIl1cbn07XG52YXIgZmFUZWFtc3BlYWsgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAndGVhbXNwZWFrJyxcbiAgaWNvbjogWzU3NiwgNTEyLCBbXSwgXCJmNGY5XCIsIFwiTTE1Mi44IDM3LjJjLTMyLjIgMzguMS01Ni4xIDgyLjYtNjkuOSAxMzAuNWMwIC4yLS4xIC4zLS4xIC41QzQzLjUgMTg0LjQgMTYgMjIzIDE2IDI2OGMwIDU5LjYgNDguNCAxMDggMTA4IDEwOHMxMDgtNDguNCAxMDgtMTA4YzAtNTMuNS0zOC45LTk3LjktOTAtMTA2LjVjMTUuNy00MS44IDQwLjQtNzkuNiA3Mi4zLTExMC43YzEuOC0xLjYgNC0yLjYgNi4zLTMuMWMzNy4yLTExLjUgNzYuNy0xMy4zIDExNC44LTUuMkM0NTQuNyA2Ny42IDUzNCAxODAuNyA1MTcuMSAzMDEuM2MtOC40IDYyLjYtMzguNiAxMTIuNy04Ny43IDE1MS40Yy01MC4xIDM5LjctMTA3LjUgNTQuMy0xNzAuMiA1Mi4ybC0yNC0xYzEyLjQgMi44IDI1IDQuOSAzNy42IDYuM2M0MC43IDQuMiA4MS40IDIuMSAxMjAuMS0xMi41Yzk0LTM1LjUgMTQ5LjMtMTAyLjMgMTYyLjktMjAyLjVjNC44LTUyLjYtNS44LTEwNS40LTMwLjgtMTUyQzQ1NC42IDExLjMgMjkwLjgtMzguNCAxNTkgMzJjLTIuNCAxLjQtNC41IDMuMS02LjMgNS4yek0zMDkuNCA0MzMuOWMtMi4xIDExLjUtNC4yIDIxLjktMTQuNiAzMS4zYzUzLjItMSAxMjMuMi0yOS4yIDE2MS44LTk3LjFjMzkuNy02OS45IDM3LjYtMTM5LjktNi4zLTIwNy44QzQxMy44IDEwNSAzNjAuNSA3Ny45IDI5My43IDczLjdjMS41IDIuMyAzLjIgNC40IDUuMiA2LjNsNS4yIDYuM2MyNS4xIDMxLjMgMzcuNiA2Ny45IDQyLjggMTA3LjVjMi4xIDE1LjctMSAzMC4zLTEzLjYgNDEuOGMtNC4yIDMuMS01LjIgNi4zLTQuMiAxMC40bDcuMyAxNy43TDM2NS43IDMxOGM1LjIgMTEuNSA0LjIgMTkuOC02LjMgMjguMmMtMy4yIDIuNS02LjcgNC42LTEwLjQgNi4zbC0xOC44IDguNCAzLjEgMTMuNmMzLjEgNi4zIDEgMTIuNS0zLjEgMTcuN2MtMi41IDIuNC0zLjggNS45LTMuMSA5LjRjMi4xIDExLjUtMi4xIDE5LjgtMTIuNSAyNS4xYy0yLjEgMS00LjIgNS4yLTUuMiA3LjN6bS0xMzMuNi0zLjFjMTYuNyAxMS41IDM0LjUgMjAuOSA1My4yIDI2LjFjMjQgNS4yIDQxLjgtNi4zIDQ0LjktMzAuM2MxLTguNCA1LjItMTQuNiAxMi41LTE3LjdjNy4zLTQuMiA4LjQtNy4zIDIuMS0xMy42bC05LjQtOC40IDEzLjYtNC4yYzYuMy0yLjEgNy4zLTUuMiA1LjItMTEuNWMtMS40LTMtMi40LTYuMi0zLjEtOS40Yy0zLjEtMTQuNi0yLjEtMTUuNyAxMS41LTE4LjhjOC40LTMuMSAxNS43LTYuMyAyMS45LTEyLjVjMy4xLTIuMSAzLjEtNC4yIDEtOC40bC0xNi43LTMwLjNjLTEtMS45LTIuMS0zLjgtMy4xLTUuN2MtNi40LTExLjctMTMtMjMuNi0xNS43LTM3LjFjLTIuMS05LjQtMS0xNy43IDguNC0yNGM1LjItNC4yIDguNC05LjQgOC40LTE2LjdjLS40LTEwLjEtMS41LTIwLjMtMy4xLTMwLjNjLTYuMy0zNy42LTIzLTY4LjktNTEuMi05NWMtNS4yLTQuMi05LjQtNi4zLTE2LjctNC4yTDIwMy45IDkxLjVjMiAxLjIgNCAyLjQgNiAzLjZsMCAwYzYuMyAzLjcgMTIuMiA3LjMgMTcgMTIuMWMzMC4zIDI2LjEgNDEuOCA2MS42IDQ1LjkgMTAwLjJjMSA4LjQgMCAxNi43LTcuMyAyMS45Yy04LjQgNS4yLTEwLjQgMTIuNS03LjMgMjAuOWM0LjkgMTMuMiAxMC40IDI2IDE2LjcgMzguNkwyOTEuNiAzMThjLTYuMyA4LjQtMTMuNiAxMS41LTIxLjkgMTQuNmMtMTIuNSAzLjEtMTQuNiA3LjMtMTAuNCAyMC45Yy42IDEuNSAxLjQgMi44IDIuMSA0LjJjMi4xIDUuMiAxIDguNC00LjIgMTAuNGwtMTIuNSAzLjEgNS4yIDQuMiA0LjIgNC4yYzQuMiA1LjIgNC4yIDguNC0yLjEgMTAuNGMtNy4zIDQuMi0xMS41IDkuNC0xMS41IDE3LjdjMCAxMi41LTcuMyAxOS44LTE4LjggMjRjLTMuOCAxLTcuNiAxLjUtMTEuNSAxbC0zNC41LTIuMXpcIl1cbn07XG52YXIgZmFQdXNoZWQgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncHVzaGVkJyxcbiAgaWNvbjogWzQzMiwgNTEyLCBbXSwgXCJmM2UxXCIsIFwiTTQwNyAxMTEuOWwtOTguNS05IDE0LTMzLjRjMTAuNC0yMy41LTEwLjgtNDAuNC0yOC43LTM3TDIyLjUgNzYuOWMtMTUuMSAyLjctMjYgMTguMy0yMS40IDM2LjZsMTA1LjEgMzQ4LjNjNi41IDIxLjMgMzYuNyAyNC4yIDQ3LjcgN2wzNS4zLTgwLjggMjM1LjItMjMxLjNjMTYuNC0xNi44IDQuMy00Mi45LTE3LjQtNDQuOHpNMjk3LjYgNTMuNmM1LjEtLjcgNy41IDIuNSA1LjIgNy40TDI4NiAxMDAuOSAxMDguNiA4NC42bDE4OS0zMXpNMjIuNyAxMDcuOWMtMy4xLTUuMSAxLTEwIDYuMS05LjFsMjQ4LjcgMjIuNy05Ni45IDIzMC43TDIyLjcgMTA3Ljl6TTEzNiA0NTYuNGMtMi42IDQtNy45IDMuMS05LjQtMS4yTDQzLjUgMTc5LjdsMTI3LjcgMTk3LjZjLTcgMTUtMzUuMiA3OS4xLTM1LjIgNzkuMXptMjcyLjgtMzE0LjVMMjEwLjEgMzM3LjNsODkuNy0yMTMuNyAxMDYuNCA5LjdjNCAxLjEgNS43IDUuMyAyLjYgOC42elwiXVxufTtcbnZhciBmYVdvcmRwcmVzc1NpbXBsZSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICd3b3JkcHJlc3Mtc2ltcGxlJyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJmNDExXCIsIFwiTTI1NiA4QzExOS4zIDggOCAxMTkuMiA4IDI1NmMwIDEzNi43IDExMS4zIDI0OCAyNDggMjQ4czI0OC0xMTEuMyAyNDgtMjQ4QzUwNCAxMTkuMiAzOTIuNyA4IDI1NiA4ek0zMyAyNTZjMC0zMi4zIDYuOS02MyAxOS4zLTkwLjdsMTA2LjQgMjkxLjRDODQuMyA0MjAuNSAzMyAzNDQuMiAzMyAyNTZ6bTIyMyAyMjNjLTIxLjkgMC00My0zLjItNjMtOS4xbDY2LjktMTk0LjQgNjguNSAxODcuOGMuNSAxLjEgMSAyLjEgMS42IDMuMS0yMy4xIDguMS00OCAxMi42LTc0IDEyLjZ6bTMwLjctMzI3LjVjMTMuNC0uNyAyNS41LTIuMSAyNS41LTIuMSAxMi0xLjQgMTAuNi0xOS4xLTEuNC0xOC40IDAgMC0zNi4xIDIuOC01OS40IDIuOC0yMS45IDAtNTguNy0yLjgtNTguNy0yLjgtMTItLjctMTMuNCAxNy43LTEuNCAxOC40IDAgMCAxMS40IDEuNCAyMy40IDIuMWwzNC43IDk1LjJMMjAwLjYgMzkzbC04MS4yLTI0MS41YzEzLjQtLjcgMjUuNS0yLjEgMjUuNS0yLjEgMTItMS40IDEwLjYtMTkuMS0xLjQtMTguNCAwIDAtMzYuMSAyLjgtNTkuNCAyLjgtNC4yIDAtOS4xLS4xLTE0LjQtLjNDMTA5LjYgNzMgMTc4LjEgMzMgMjU2IDMzYzU4IDAgMTEwLjkgMjIuMiAxNTAuNiA1OC41LTEtLjEtMS45LS4yLTIuOS0uMi0yMS45IDAtMzcuNCAxOS4xLTM3LjQgMzkuNiAwIDE4LjQgMTAuNiAzMy45IDIxLjkgNTIuMyA4LjUgMTQuOCAxOC40IDMzLjkgMTguNCA2MS41IDAgMTkuMS03LjMgNDEuMi0xNyA3Mi4xbC0yMi4yIDc0LjMtODAuNy0yMzkuNnptODEuNCAyOTcuMmw2OC4xLTE5Ni45YzEyLjctMzEuOCAxNy01Ny4yIDE3LTc5LjkgMC04LjItLjUtMTUuOC0xLjUtMjIuOSAxNy40IDMxLjggMjcuMyA2OC4yIDI3LjMgMTA3IDAgODIuMy00NC42IDE1NC4xLTExMC45IDE5Mi43elwiXVxufTtcbnZhciBmYU51dHJpdGlvbml4ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ251dHJpdGlvbml4JyxcbiAgaWNvbjogWzQwMCwgNTEyLCBbXSwgXCJmM2Q2XCIsIFwiTTg4IDguMVMyMjEuNC0uMSAyMDkgMTEyLjVjMCAwIDE5LjEtNzQuOSAxMDMtNDAuNiAwIDAtMTcuNyA3NC04OCA1NiAwIDAgMTQuNi01NC42IDY2LjEtNTYuNiAwIDAtMzkuOS0xMC4zLTgyLjEgNDguOCAwIDAtMTkuOC05NC41LTkzLjYtOTkuNyAwIDAgNzUuMiAxOS40IDc3LjYgMTA3LjUgMCAuMS0xMDYuNCA3LTEwNC0xMTkuOHptMzEyIDMxNS42YzAgNDguNS05LjcgOTUuMy0zMiAxMzIuMy00Mi4yIDMwLjktMTA1IDQ4LTE2OCA0OC02Mi45IDAtMTI1LjgtMTcuMS0xNjgtNDhDOS43IDQxOSAwIDM3Mi4yIDAgMzIzLjcgMCAyNzUuMyAxNy43IDIyOSA0MCAxOTJjNDIuMi0zMC45IDk3LjEtNDguNiAxNjAtNDguNiA2MyAwIDExNy44IDE3LjYgMTYwIDQ4LjYgMjIuMyAzNyA0MCA4My4zIDQwIDEzMS43ek0xMjAgNDI4YzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHptMC02Ni4yYzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHptMC02Ni4yYzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHpNMTkyIDQyOGMwLTE1LjUtMTIuNS0yOC0yOC0yOHMtMjggMTIuNS0yOCAyOCAxMi41IDI4IDI4IDI4IDI4LTEyLjUgMjgtMjh6bTAtNjYuMmMwLTE1LjUtMTIuNS0yOC0yOC0yOHMtMjggMTIuNS0yOCAyOCAxMi41IDI4IDI4IDI4IDI4LTEyLjUgMjgtMjh6bTAtNjYuMmMwLTE1LjUtMTIuNS0yOC0yOC0yOHMtMjggMTIuNS0yOCAyOCAxMi41IDI4IDI4IDI4IDI4LTEyLjUgMjgtMjh6TTI2NCA0MjhjMC0xNS41LTEyLjUtMjgtMjgtMjhzLTI4IDEyLjUtMjggMjggMTIuNSAyOCAyOCAyOCAyOC0xMi41IDI4LTI4em0wLTY2LjJjMC0xNS41LTEyLjUtMjgtMjgtMjhzLTI4IDEyLjUtMjggMjggMTIuNSAyOCAyOCAyOCAyOC0xMi41IDI4LTI4em0wLTY2LjJjMC0xNS41LTEyLjUtMjgtMjgtMjhzLTI4IDEyLjUtMjggMjggMTIuNSAyOCAyOCAyOCAyOC0xMi41IDI4LTI4ek0zMzYgNDI4YzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHptMC02Ni4yYzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHptMC02Ni4yYzAtMTUuNS0xMi41LTI4LTI4LTI4cy0yOCAxMi41LTI4IDI4IDEyLjUgMjggMjggMjggMjgtMTIuNSAyOC0yOHptMjQtMzkuNmMtNC44LTIyLjMtNy40LTM2LjktMTYtNTYtMzguOC0xOS45LTkwLjUtMzItMTQ0LTMyUzk0LjggMTgwLjEgNTYgMjAwYy04LjggMTkuNS0xMS4yIDMzLjktMTYgNTYgNDIuMi03LjkgOTguNy0xNC44IDE2MC0xNC44czExNy44IDYuOSAxNjAgMTQuOHpcIl1cbn07XG52YXIgZmFXb2R1ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3dvZHUnLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImUwODhcIiwgXCJNMTc4LjQxNCAzMzkuNzA2SDE0MS4xTDExMi4xNjYgMjIzLjQ3NWgtLjQ3OEw4My4yMjggMzM5LjcwNkg0NS4yTDAgMTY4Ljk0NkgzNy41NDhMNjQuNTc0IDI4NS4xNzdoLjQ3OEw5NC43MDcgMTY4Ljk0NmgzNS4xNTdsMjkuMTc4IDExNy42NjdoLjQ3OUwxODcuNSAxNjguOTQ2aDM2LjgzMXpNMjcxLjQgMjEyLjcxM2MzOC45ODQgMCA2NC4xIDI1LjgyOCA2NC4xIDY1LjI5MSAwIDM5LjIyMi0yNS4xMTEgNjUuMDUtNjQuMSA2NS4wNS0zOC43NDMgMC02My44NTUtMjUuODI4LTYzLjg1NS02NS4wNUMyMDcuNTQ3IDIzOC41NDEgMjMyLjY1OSAyMTIuNzEzIDI3MS40IDIxMi43MTN6bTAgMTA0Ljc1M2MyMy4yIDAgMzAuMTMzLTE5Ljg1MiAzMC4xMzMtMzkuNDYyIDAtMTkuODUyLTYuOTM0LTM5LjctMzAuMTMzLTM5LjctMjcuNyAwLTI5Ljg5NCAxOS44NS0yOS44OTQgMzkuN0MyNDEuNTA4IDI5Ny42MTQgMjQ4LjQ0MyAzMTcuNDY2IDI3MS40IDMxNy40NjZ6TTQzNS4wODQgMzIzLjkyMmgtLjQ3OGMtNy44OTMgMTMuMzkyLTIxLjc2NSAxOS4xMzItMzcuNTQ4IDE5LjEzMi0zNy4zMSAwLTU1LjQ4NS0zMi4wNDUtNTUuNDg1LTY2LjI0NiAwLTMzLjI0MyAxOC40MTUtNjQuMDk1IDU0Ljc2Ny02NC4wOTUgMTQuNTg5IDAgMjguOTM4IDYuMjE4IDM2LjgzMSAxOC40MTZoLjI0VjE2OC45NDZoMzMuOTZ2MTcwLjc2SDQzNS4wODR6TTQwNS40MjggMjM4LjNjLTIyLjI0IDAtMjkuODk0IDE5LjEzNC0yOS44OTQgMzkuNDYzIDAgMTkuMzcxIDguODQ4IDM5LjcgMjkuODk0IDM5LjcgMjIuNDgyIDAgMjkuMTc4LTE5LjYxMyAyOS4xNzgtMzkuOTRDNDM0LjYwNiAyNTcuNDM2IDQyNy40MzIgMjM4LjMgNDA1LjQyOCAyMzguM3pNNTkyLjk2IDMzOS43MDZINTYwLjY3M1YzMjIuNDg3aC0uNzE4Yy04LjYwOSAxMy44Ny0yMy40MzYgMjAuNTY3LTM3Ljc4NiAyMC41NjctMzYuMTEzIDAtNDUuMi0yMC4zMjgtNDUuMi01MC45NDFWMjE2LjA2MWgzMy45NTlWMjg1LjljMCAyMC4zMjkgNS45NzkgMzAuMzcyIDIxLjc2NSAzMC4zNzIgMTguNDE1IDAgMjYuMzA2LTEwLjI4MyAyNi4zMDYtMzUuMzkzVjIxNi4wNjFINTkyLjk2ek02MDIuNDUzIDMwMi44NzZINjQwdjM2LjgzSDYwMi40NTN6XCJdXG59O1xudmFyIGZhR29vZ2xlUGF5ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2dvb2dsZS1wYXknLFxuICBpY29uOiBbNjQwLCA1MTIsIFtdLCBcImUwNzlcIiwgXCJNMTA1LjcyLDIxNXY0MS4yNWg1Ny4xYTQ5LjY2LDQ5LjY2LDAsMCwxLTIxLjE0LDMyLjZjLTkuNTQsNi41NS0yMS43MiwxMC4yOC0zNiwxMC4yOC0yNy42LDAtNTAuOTMtMTguOTEtNTkuMy00NC4yMmE2NS42MSw2NS42MSwwLDAsMSwwLTQxbDAsMGM4LjM3LTI1LjQ2LDMxLjctNDQuMzcsNTkuMy00NC4zN2E1Ni40Myw1Ni40MywwLDAsMSw0MC41MSwxNi4wOEwxNzYuNDcsMTU1YTEwMS4yNCwxMDEuMjQsMCwwLDAtNzAuNzUtMjcuODQsMTA1LjU1LDEwNS41NSwwLDAsMC05NC4zOCw1OS4xMSwxMDcuNjQsMTA3LjY0LDAsMCwwLDAsOTYuMTh2LjE1YTEwNS40MSwxMDUuNDEsMCwwLDAsOTQuMzgsNTljMjguNDcsMCw1Mi41NS05LjUzLDcwLTI1LjkxLDIwLTE4LjYxLDMxLjQxLTQ2LjE1LDMxLjQxLTc4LjkxQTEzMy43NiwxMzMuNzYsMCwwLDAsMjA1LjM4LDIxNVptMzg5LjQxLTRjLTEwLjEzLTkuMzgtMjMuOTMtMTQuMTQtNDEuMzktMTQuMTQtMjIuNDYsMC0zOS4zNCw4LjM0LTUwLjUsMjQuODZsMjAuODUsMTMuMjZxMTEuNDUtMTcsMzEuMjYtMTdhMzQuMDUsMzQuMDUsMCwwLDEsMjIuNzUsOC43OUEyOC4xNCwyOC4xNCwwLDAsMSw0ODcuNzksMjQ4djUuNTFjLTkuMS01LjA3LTIwLjU1LTcuNzUtMzQuNjQtNy43NS0xNi40NCwwLTI5LjY1LDMuODgtMzkuNDksMTEuNzdzLTE0LjgyLDE4LjMxLTE0LjgyLDMxLjU2YTM5Ljc0LDM5Ljc0LDAsMCwwLDEzLjk0LDMxLjI3YzkuMjUsOC4zNCwyMSwxMi41MSwzNC43OSwxMi41MSwxNi4yOSwwLDI5LjIxLTcuMywzOS0yMS44OWgxdjE3LjcyaDIyLjYxVjI1MEM1MTAuMjUsMjMzLjQ1LDUwNS4yNiwyMjAuMzQsNDk1LjEzLDIxMVpNNDc1LjksMzAwLjNhMzcuMzIsMzcuMzIsMCwwLDEtMjYuNTcsMTEuMTZBMjguNjEsMjguNjEsMCwwLDEsNDMxLDMwNS4yMWExOS40MSwxOS40MSwwLDAsMS03Ljc3LTE1LjYzYzAtNywzLjIyLTEyLjgxLDkuNTQtMTcuNDJzMTQuNTMtNywyNC4wNy03QzQ3MCwyNjUsNDgwLjMsMjY4LDQ4Ny42NCwyNzMuOTQsNDg3LjY0LDI4NC4wNyw0ODMuNjgsMjkyLjg1LDQ3NS45LDMwMC4zWm0tOTMuNjUtMTQyQTU1LjcxLDU1LjcxLDAsMCwwLDM0MS43NCwxNDJIMjc5LjA3VjMyOC43NEgzMDIuN1YyNTMuMWgzOWMxNiwwLDI5LjUtNS4zNiw0MC41MS0xNS45My44OC0uODksMS43Ni0xLjc5LDIuNjUtMi42OEE1NC40NSw1NC40NSwwLDAsMCwzODIuMjUsMTU4LjI2Wm0tMTYuNTgsNjIuMjNhMzAuNjUsMzAuNjUsMCwwLDEtMjMuMzQsOS42OEgzMDIuN1YxNjVoMzkuNjNhMzIsMzIsMCwwLDEsMjIuNiw5LjIzQTMzLjE4LDMzLjE4LDAsMCwxLDM2NS42NywyMjAuNDlaTTYxNC4zMSwyMDEsNTc3Ljc3LDI5Mi43aC0uNDVMNTM5LjksMjAxSDUxNC4yMUw1NjYsMzIwLjU1bC0yOS4zNSw2NC4zMkg1NjFMNjQwLDIwMVpcIl1cbn07XG52YXIgZmFJbnRlcmNvbSA9IHtcbiAgcHJlZml4OiAnZmFiJyxcbiAgaWNvbk5hbWU6ICdpbnRlcmNvbScsXG4gIGljb246IFs0NDgsIDUxMiwgW10sIFwiZjdhZlwiLCBcIk0zOTIgMzJINTZDMjUuMSAzMiAwIDU3LjEgMCA4OHYzMzZjMCAzMC45IDI1LjEgNTYgNTYgNTZoMzM2YzMwLjkgMCA1Ni0yNS4xIDU2LTU2Vjg4YzAtMzAuOS0yNS4xLTU2LTU2LTU2em0tMTA4LjMgODIuMWMwLTE5LjggMjkuOS0xOS44IDI5LjkgMHYxOTkuNWMwIDE5LjgtMjkuOSAxOS44LTI5LjkgMFYxMTQuMXptLTc0LjYtNy41YzAtMTkuOCAyOS45LTE5LjggMjkuOSAwdjIxNi41YzAgMTkuOC0yOS45IDE5LjgtMjkuOSAwVjEwNi42em0tNzQuNyA3LjVjMC0xOS44IDI5LjktMTkuOCAyOS45IDB2MTk5LjVjMCAxOS44LTI5LjkgMTkuOC0yOS45IDBWMTE0LjF6TTU5LjcgMTQ0YzAtMTkuOCAyOS45LTE5LjggMjkuOSAwdjEzNC4zYzAgMTkuOC0yOS45IDE5LjgtMjkuOSAwVjE0NHptMzIzLjQgMjI3LjhjLTcyLjggNjMtMjQxLjcgNjUuNC0zMTguMSAwLTE1LTEyLjggNC40LTM1LjUgMTkuNC0yMi43IDY1LjkgNTUuMyAyMTYuMSA1My45IDI3OS4zIDAgMTQuOS0xMi45IDM0LjMgOS44IDE5LjQgMjIuN3ptNS4yLTkzLjVjMCAxOS44LTI5LjkgMTkuOC0yOS45IDBWMTQ0YzAtMTkuOCAyOS45LTE5LjggMjkuOSAwdjEzNC4zelwiXVxufTtcbnZhciBmYVpoaWh1ID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ3poaWh1JyxcbiAgaWNvbjogWzY0MCwgNTEyLCBbXSwgXCJmNjNmXCIsIFwiTTE3MC41NCAxNDguMTN2MjE3LjU0bDIzLjQzLjAxIDcuNzEgMjYuMzcgNDIuMDEtMjYuMzdoNDkuNTNWMTQ4LjEzSDE3MC41NHptOTcuNzUgMTkzLjkzaC0yNy45NGwtMjcuOSAxNy41MS01LjA4LTE3LjQ3LTExLjktLjA0VjE3MS43NWg3Mi44MnYxNzAuMzF6bS0xMTguNDYtOTQuMzlIOTcuNWMxLjc0LTI3LjEgMi4yLTUxLjU5IDIuMi03My40Nmg1MS4xNnMxLjk3LTIyLjU2LTguNTgtMjIuMzFoLTg4LjVjMy40OS0xMy4xMiA3Ljg3LTI2LjY2IDEzLjEyLTQwLjY3IDAgMC0yNC4wNyAwLTMyLjI3IDIxLjU3LTMuMzkgOC45LTEzLjIxIDQzLjE0LTMwLjcgNzguMTIgNS44OS0uNjQgMjUuMzctMS4xOCAzNi44NC0yMi4yMSAyLjExLTUuODkgMi41MS02LjY2IDUuMTQtMTQuNTNoMjguODdjMCAxMC41LTEuMiA2Ni44OC0xLjY4IDczLjQ0SDIwLjgzYy0xMS43NCAwLTE1LjU2IDIzLjYyLTE1LjU2IDIzLjYyaDY1LjU4QzY2LjQ1IDMyMS4xIDQyLjgzIDM2My4xMiAwIDM5Ni4zNGMyMC40OSA1Ljg1IDQwLjkxLS45MyA1MS05LjkgMCAwIDIyLjk4LTIwLjkgMzUuNTktNjkuMjVsNTMuOTYgNjQuOTRzNy45MS0yNi44OS0xLjI0LTM5Ljk5Yy03LjU4LTguOTItMjguMDYtMzMuMDYtMzYuNzktNDEuODFMODcuOSAzMTEuOTVjNC4zNi0xMy45OCA2Ljk5LTI3LjU1IDcuODctNDAuNjdoNjEuNjVzLS4wOS0yMy42Mi03LjU5LTIzLjYydi4wMXptNDEyLjAyLTEuNmMyMC44My0yNS42NCA0NC45OC01OC41NyA0NC45OC01OC41N3MtMTguNjUtMTQuOC0yNy4zOC00LjA2Yy02IDguMTUtMzYuODMgNDguMi0zNi44MyA0OC4ybDE5LjIzIDE0LjQzem0tMTUwLjA5LTU5LjA5Yy05LjAxLTguMjUtMjUuOTEgMi4xMy0yNS45MSAyLjEzczM5LjUyIDU1LjA0IDQxLjEyIDU3LjQ1bDE5LjQ2LTEzLjczcy0yNS42Ny0zNy42MS0zNC42Ni00NS44NmgtLjAxek02NDAgMjU4LjM1Yy0xOS43OCAwLTEzMC45MS45My0xMzEuMDYuOTN2LTEwMWM0LjgxIDAgMTIuNDItLjQgMjIuODUtMS4yIDQwLjg4LTIuNDEgNzAuMTMtNCA4Ny43Ny00LjgxIDAgMCAxMi4yMi0yNy4xOS0uNTktMzMuNDQtMy4wNy0xLjE4LTIzLjE3IDQuNTgtMjMuMTcgNC41OHMtMTY1LjIyIDE2LjQ5LTIzMi4zNiAxOC4wNWMxLjYgOC44MiA3LjYyIDE3LjA4IDE1Ljc4IDE5LjU1IDEzLjMxIDMuNDggMjIuNjkgMS43IDQ5LjE1Ljg5IDI0LjgzLTEuNiA0My42OC0yLjQzIDU2LjUxLTIuNDN2OTkuODFIMzUxLjQxczIuODIgMjIuMzEgMjUuNTEgMjIuODVoMTA3Ljk0djcwLjkyYzAgMTMuOTctMTEuMTkgMjEuOTktMjQuNDggMjEuMTItMTQuMDguMTEtMjYuMDgtMS4xNS00MS42OS0xLjgxIDEuOTkgMy45NyA2LjMzIDE0LjM5IDE5LjMxIDIxLjg0IDkuODggNC44MSAxNi4xNyA2LjU3IDI2LjAyIDYuNTcgMjkuNTYgMCA0NS42Ny0xNy4yOCA0NC44OS00NS4zMXYtNzMuMzJoMTIyLjM2YzkuNjggMCA4LjctMjMuNzggOC43LTIzLjc4bC4wMy0uMDF6XCJdXG59O1xudmFyIGZhS29ydnVlID0ge1xuICBwcmVmaXg6ICdmYWInLFxuICBpY29uTmFtZTogJ2tvcnZ1ZScsXG4gIGljb246IFs0NDYsIDUxMiwgW10sIFwiZjQyZlwiLCBcIk0zODYuNSAzNGgtMzI3QzI2LjggMzQgMCA2MC44IDAgOTMuNXYzMjcuMUMwIDQ1My4yIDI2LjggNDgwIDU5LjUgNDgwaDMyNy4xYzMzIDAgNTkuNS0yNi44IDU5LjUtNTkuNXYtMzI3QzQ0NiA2MC44IDQxOS4yIDM0IDM4Ni41IDM0ek04Ny4xIDEyMC44aDk2djExNmw2MS44LTExNmgxMTAuOWwtODEuMiAxMzJIODcuMXYtMTMyem0xNjEuOCAyNzIuMWwtNjUuNy0xMTMuNnYxMTMuNmgtOTZWMjYyLjFoMTkxLjVsODguNiAxMzAuOEgyNDguOXpcIl1cbn07XG52YXIgZmFQaXggPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAncGl4JyxcbiAgaWNvbjogWzUxMiwgNTEyLCBbXSwgXCJlNDNhXCIsIFwiTTI0Mi40IDI5Mi41QzI0Ny44IDI4Ny4xIDI1Ny4xIDI4Ny4xIDI2Mi41IDI5Mi41TDMzOS41IDM2OS41QzM1My43IDM4My43IDM3Mi42IDM5MS41IDM5Mi42IDM5MS41SDQwNy43TDMxMC42IDQ4OC42QzI4MC4zIDUxOC4xIDIzMS4xIDUxOC4xIDIwMC44IDQ4OC42TDEwMy4zIDM5MS4ySDExMi42QzEzMi42IDM5MS4yIDE1MS41IDM4My40IDE2NS43IDM2OS4yTDI0Mi40IDI5Mi41ek0yNjIuNSAyMTguOUMyNTYuMSAyMjQuNCAyNDcuOSAyMjQuNSAyNDIuNCAyMTguOUwxNjUuNyAxNDIuMkMxNTEuNSAxMjcuMSAxMzIuNiAxMjAuMiAxMTIuNiAxMjAuMkgxMDMuM0wyMDAuNyAyMi43NkMyMzEuMS03LjU4NiAyODAuMy03LjU4NiAzMTAuNiAyMi43Nkw0MDcuOCAxMTkuOUgzOTIuNkMzNzIuNiAxMTkuOSAzNTMuNyAxMjcuNyAzMzkuNSAxNDEuOUwyNjIuNSAyMTguOXpNMTEyLjYgMTQyLjdDMTI2LjQgMTQyLjcgMTM5LjEgMTQ4LjMgMTQ5LjcgMTU4LjFMMjI2LjQgMjM0LjhDMjMzLjYgMjQxLjEgMjQzIDI0NS42IDI1Mi41IDI0NS42QzI2MS45IDI0NS42IDI3MS4zIDI0MS4xIDI3OC41IDIzNC44TDM1NS41IDE1Ny44QzM2NS4zIDE0OC4xIDM3OC44IDE0Mi41IDM5Mi42IDE0Mi41SDQzMC4zTDQ4OC42IDIwMC44QzUxOC45IDIzMS4xIDUxOC45IDI4MC4zIDQ4OC42IDMxMC42TDQzMC4zIDM2OC45SDM5Mi42QzM3OC44IDM2OC45IDM2NS4zIDM2My4zIDM1NS41IDM1My41TDI3OC41IDI3Ni41QzI2NC42IDI2Mi42IDI0MC4zIDI2Mi42IDIyNi40IDI3Ni42TDE0OS43IDM1My4yQzEzOS4xIDM2MyAxMjYuNCAzNjguNiAxMTIuNiAzNjguNkg4MC43OEwyMi43NiAzMTAuNkMtNy41ODYgMjgwLjMtNy41ODYgMjMxLjEgMjIuNzYgMjAwLjhMODAuNzggMTQyLjdIMTEyLjZ6XCJdXG59O1xudmFyIGZhU3RlYW1TeW1ib2wgPSB7XG4gIHByZWZpeDogJ2ZhYicsXG4gIGljb25OYW1lOiAnc3RlYW0tc3ltYm9sJyxcbiAgaWNvbjogWzQ0OCwgNTEyLCBbXSwgXCJmM2Y2XCIsIFwiTTM5NS41IDE3Ny41YzAgMzMuOC0yNy41IDYxLTYxIDYxLTMzLjggMC02MS0yNy4zLTYxLTYxczI3LjMtNjEgNjEtNjFjMzMuNSAwIDYxIDI3LjIgNjEgNjF6bTUyLjUuMmMwIDYzLTUxIDExMy44LTExMy43IDExMy44TDIyNSAzNzEuM2MtNCA0My00MC41IDc2LjgtODQuNSA3Ni44LTQwLjUgMC03NC43LTI4LjgtODMtNjdMMCAzNThWMjUwLjdMOTcuMiAyOTBjMTUuMS05LjIgMzIuMi0xMy4zIDUyLTExLjVsNzEtMTAxLjdjLjUtNjIuMyA1MS41LTExMi44IDExNC0xMTIuOEMzOTcgNjQgNDQ4IDExNSA0NDggMTc3Ljd6TTIwMyAzNjNjMC0zNC43LTI3LjgtNjIuNS02Mi41LTYyLjUtNC41IDAtOSAuNS0xMy41IDEuNWwyNiAxMC41YzI1LjUgMTAuMiAzOCAzOSAyNy43IDY0LjUtMTAuMiAyNS41LTM5LjIgMzgtNjQuNyAyNy41LTEwLjItNC0yMC41LTguMy0zMC43LTEyLjIgMTAuNSAxOS43IDMxLjIgMzMuMiA1NS4yIDMzLjIgMzQuNyAwIDYyLjUtMjcuOCA2Mi41LTYyLjV6bTIwNy41LTE4NS4zYzAtNDItMzQuMy03Ni4yLTc2LjItNzYuMi00Mi4zIDAtNzYuNSAzNC4yLTc2LjUgNzYuMiAwIDQyLjIgMzQuMyA3Ni4yIDc2LjUgNzYuMiA0MS45LjEgNzYuMi0zMy45IDc2LjItNzYuMnpcIl1cbn07XG52YXIgaWNvbnMgPSB7XG4gIGZhTW9uZXJvOiBmYU1vbmVybyxcbiAgZmFIb29saTogZmFIb29saSxcbiAgZmFZZWxwOiBmYVllbHAsXG4gIGZhQ2NWaXNhOiBmYUNjVmlzYSxcbiAgZmFMYXN0Zm06IGZhTGFzdGZtLFxuICBmYVNob3B3YXJlOiBmYVNob3B3YXJlLFxuICBmYUNyZWF0aXZlQ29tbW9uc05jOiBmYUNyZWF0aXZlQ29tbW9uc05jLFxuICBmYUF3czogZmFBd3MsXG4gIGZhUmVkaGF0OiBmYVJlZGhhdCxcbiAgZmFZb2FzdDogZmFZb2FzdCxcbiAgZmFDbG91ZGZsYXJlOiBmYUNsb3VkZmxhcmUsXG4gIGZhVXBzOiBmYVVwcyxcbiAgZmFQaXhpdjogZmFQaXhpdixcbiAgZmFXcGV4cGxvcmVyOiBmYVdwZXhwbG9yZXIsXG4gIGZhRHlhbG9nOiBmYUR5YWxvZyxcbiAgZmFCaXR5OiBmYUJpdHksXG4gIGZhU3RhY2twYXRoOiBmYVN0YWNrcGF0aCxcbiAgZmFCdXlzZWxsYWRzOiBmYUJ1eXNlbGxhZHMsXG4gIGZhRmlyc3RPcmRlcjogZmFGaXJzdE9yZGVyLFxuICBmYU1vZHg6IGZhTW9keCxcbiAgZmFHdWlsZGVkOiBmYUd1aWxkZWQsXG4gIGZhVm52OiBmYVZudixcbiAgZmFTcXVhcmVKczogZmFTcXVhcmVKcyxcbiAgZmFKc1NxdWFyZTogZmFKc1NxdWFyZSxcbiAgZmFNaWNyb3NvZnQ6IGZhTWljcm9zb2Z0LFxuICBmYVFxOiBmYVFxLFxuICBmYU9yY2lkOiBmYU9yY2lkLFxuICBmYUphdmE6IGZhSmF2YSxcbiAgZmFJbnZpc2lvbjogZmFJbnZpc2lvbixcbiAgZmFDcmVhdGl2ZUNvbW1vbnNQZEFsdDogZmFDcmVhdGl2ZUNvbW1vbnNQZEFsdCxcbiAgZmFDZW50ZXJjb2RlOiBmYUNlbnRlcmNvZGUsXG4gIGZhR2xpZGVHOiBmYUdsaWRlRyxcbiAgZmFEcnVwYWw6IGZhRHJ1cGFsLFxuICBmYUp4bDogZmFKeGwsXG4gIGZhSGlyZUFIZWxwZXI6IGZhSGlyZUFIZWxwZXIsXG4gIGZhQ3JlYXRpdmVDb21tb25zQnk6IGZhQ3JlYXRpdmVDb21tb25zQnksXG4gIGZhVW5pdHk6IGZhVW5pdHksXG4gIGZhV2htY3M6IGZhV2htY3MsXG4gIGZhUm9ja2V0Y2hhdDogZmFSb2NrZXRjaGF0LFxuICBmYVZrOiBmYVZrLFxuICBmYVVudGFwcGQ6IGZhVW50YXBwZCxcbiAgZmFNYWlsY2hpbXA6IGZhTWFpbGNoaW1wLFxuICBmYUNzczNBbHQ6IGZhQ3NzM0FsdCxcbiAgZmFTcXVhcmVSZWRkaXQ6IGZhU3F1YXJlUmVkZGl0LFxuICBmYVJlZGRpdFNxdWFyZTogZmFSZWRkaXRTcXVhcmUsXG4gIGZhVmltZW9WOiBmYVZpbWVvVixcbiAgZmFDb250YW86IGZhQ29udGFvLFxuICBmYVNxdWFyZUZvbnRBd2Vzb21lOiBmYVNxdWFyZUZvbnRBd2Vzb21lLFxuICBmYURlc2twcm86IGZhRGVza3BybyxcbiAgZmFCcmF2ZTogZmFCcmF2ZSxcbiAgZmFTaXN0cml4OiBmYVNpc3RyaXgsXG4gIGZhU3F1YXJlSW5zdGFncmFtOiBmYVNxdWFyZUluc3RhZ3JhbSxcbiAgZmFJbnN0YWdyYW1TcXVhcmU6IGZhSW5zdGFncmFtU3F1YXJlLFxuICBmYUJhdHRsZU5ldDogZmFCYXR0bGVOZXQsXG4gIGZhVGhlUmVkWWV0aTogZmFUaGVSZWRZZXRpLFxuICBmYVNxdWFyZUhhY2tlck5ld3M6IGZhU3F1YXJlSGFja2VyTmV3cyxcbiAgZmFIYWNrZXJOZXdzU3F1YXJlOiBmYUhhY2tlck5ld3NTcXVhcmUsXG4gIGZhRWRnZTogZmFFZGdlLFxuICBmYVRocmVhZHM6IGZhVGhyZWFkcyxcbiAgZmFOYXBzdGVyOiBmYU5hcHN0ZXIsXG4gIGZhU3F1YXJlU25hcGNoYXQ6IGZhU3F1YXJlU25hcGNoYXQsXG4gIGZhU25hcGNoYXRTcXVhcmU6IGZhU25hcGNoYXRTcXVhcmUsXG4gIGZhR29vZ2xlUGx1c0c6IGZhR29vZ2xlUGx1c0csXG4gIGZhQXJ0c3RhdGlvbjogZmFBcnRzdGF0aW9uLFxuICBmYU1hcmtkb3duOiBmYU1hcmtkb3duLFxuICBmYVNvdXJjZXRyZWU6IGZhU291cmNldHJlZSxcbiAgZmFHb29nbGVQbHVzOiBmYUdvb2dsZVBsdXMsXG4gIGZhRGlhc3BvcmE6IGZhRGlhc3BvcmEsXG4gIGZhRm91cnNxdWFyZTogZmFGb3Vyc3F1YXJlLFxuICBmYVN0YWNrT3ZlcmZsb3c6IGZhU3RhY2tPdmVyZmxvdyxcbiAgZmFHaXRodWJBbHQ6IGZhR2l0aHViQWx0LFxuICBmYVBob2VuaXhTcXVhZHJvbjogZmFQaG9lbml4U3F1YWRyb24sXG4gIGZhUGFnZWxpbmVzOiBmYVBhZ2VsaW5lcyxcbiAgZmFBbGdvbGlhOiBmYUFsZ29saWEsXG4gIGZhUmVkUml2ZXI6IGZhUmVkUml2ZXIsXG4gIGZhQ3JlYXRpdmVDb21tb25zU2E6IGZhQ3JlYXRpdmVDb21tb25zU2EsXG4gIGZhU2FmYXJpOiBmYVNhZmFyaSxcbiAgZmFHb29nbGU6IGZhR29vZ2xlLFxuICBmYVNxdWFyZUZvbnRBd2Vzb21lU3Ryb2tlOiBmYVNxdWFyZUZvbnRBd2Vzb21lU3Ryb2tlLFxuICBmYUZvbnRBd2Vzb21lQWx0OiBmYUZvbnRBd2Vzb21lQWx0LFxuICBmYUF0bGFzc2lhbjogZmFBdGxhc3NpYW4sXG4gIGZhTGlua2VkaW5JbjogZmFMaW5rZWRpbkluLFxuICBmYURpZ2l0YWxPY2VhbjogZmFEaWdpdGFsT2NlYW4sXG4gIGZhTmltYmxyOiBmYU5pbWJscixcbiAgZmFDaHJvbWVjYXN0OiBmYUNocm9tZWNhc3QsXG4gIGZhRXZlcm5vdGU6IGZhRXZlcm5vdGUsXG4gIGZhSGFja2VyTmV3czogZmFIYWNrZXJOZXdzLFxuICBmYUNyZWF0aXZlQ29tbW9uc1NhbXBsaW5nOiBmYUNyZWF0aXZlQ29tbW9uc1NhbXBsaW5nLFxuICBmYUFkdmVyc2FsOiBmYUFkdmVyc2FsLFxuICBmYUNyZWF0aXZlQ29tbW9uczogZmFDcmVhdGl2ZUNvbW1vbnMsXG4gIGZhV2F0Y2htYW5Nb25pdG9yaW5nOiBmYVdhdGNobWFuTW9uaXRvcmluZyxcbiAgZmFGb250aWNvbnM6IGZhRm9udGljb25zLFxuICBmYVdlaXhpbjogZmFXZWl4aW4sXG4gIGZhU2hpcnRzaW5idWxrOiBmYVNoaXJ0c2luYnVsayxcbiAgZmFDb2RlcGVuOiBmYUNvZGVwZW4sXG4gIGZhR2l0QWx0OiBmYUdpdEFsdCxcbiAgZmFMeWZ0OiBmYUx5ZnQsXG4gIGZhUmV2OiBmYVJldixcbiAgZmFXaW5kb3dzOiBmYVdpbmRvd3MsXG4gIGZhV2l6YXJkc09mVGhlQ29hc3Q6IGZhV2l6YXJkc09mVGhlQ29hc3QsXG4gIGZhU3F1YXJlVmlhZGVvOiBmYVNxdWFyZVZpYWRlbyxcbiAgZmFWaWFkZW9TcXVhcmU6IGZhVmlhZGVvU3F1YXJlLFxuICBmYU1lZXR1cDogZmFNZWV0dXAsXG4gIGZhQ2VudG9zOiBmYUNlbnRvcyxcbiAgZmFBZG46IGZhQWRuLFxuICBmYUNsb3Vkc21pdGg6IGZhQ2xvdWRzbWl0aCxcbiAgZmFPcGVuc3VzZTogZmFPcGVuc3VzZSxcbiAgZmFQaWVkUGlwZXJBbHQ6IGZhUGllZFBpcGVyQWx0LFxuICBmYVNxdWFyZURyaWJiYmxlOiBmYVNxdWFyZURyaWJiYmxlLFxuICBmYURyaWJiYmxlU3F1YXJlOiBmYURyaWJiYmxlU3F1YXJlLFxuICBmYUNvZGllcGllOiBmYUNvZGllcGllLFxuICBmYU5vZGU6IGZhTm9kZSxcbiAgZmFNaXg6IGZhTWl4LFxuICBmYVN0ZWFtOiBmYVN0ZWFtLFxuICBmYUNjQXBwbGVQYXk6IGZhQ2NBcHBsZVBheSxcbiAgZmFTY3JpYmQ6IGZhU2NyaWJkLFxuICBmYURlYmlhbjogZmFEZWJpYW4sXG4gIGZhT3BlbmlkOiBmYU9wZW5pZCxcbiAgZmFJbnN0YWxvZDogZmFJbnN0YWxvZCxcbiAgZmFFeHBlZGl0ZWRzc2w6IGZhRXhwZWRpdGVkc3NsLFxuICBmYVNlbGxjYXN0OiBmYVNlbGxjYXN0LFxuICBmYVNxdWFyZVR3aXR0ZXI6IGZhU3F1YXJlVHdpdHRlcixcbiAgZmFUd2l0dGVyU3F1YXJlOiBmYVR3aXR0ZXJTcXVhcmUsXG4gIGZhUlByb2plY3Q6IGZhUlByb2plY3QsXG4gIGZhRGVsaWNpb3VzOiBmYURlbGljaW91cyxcbiAgZmFGcmVlYnNkOiBmYUZyZWVic2QsXG4gIGZhVnVlanM6IGZhVnVlanMsXG4gIGZhQWNjdXNvZnQ6IGZhQWNjdXNvZnQsXG4gIGZhSW94aG9zdDogZmFJb3hob3N0LFxuICBmYUZvbnRpY29uc0ZpOiBmYUZvbnRpY29uc0ZpLFxuICBmYUFwcFN0b3JlOiBmYUFwcFN0b3JlLFxuICBmYUNjTWFzdGVyY2FyZDogZmFDY01hc3RlcmNhcmQsXG4gIGZhSXR1bmVzTm90ZTogZmFJdHVuZXNOb3RlLFxuICBmYUdvbGFuZzogZmFHb2xhbmcsXG4gIGZhS2lja3N0YXJ0ZXI6IGZhS2lja3N0YXJ0ZXIsXG4gIGZhU3F1YXJlS2lja3N0YXJ0ZXI6IGZhU3F1YXJlS2lja3N0YXJ0ZXIsXG4gIGZhR3JhdjogZmFHcmF2LFxuICBmYVdlaWJvOiBmYVdlaWJvLFxuICBmYVVuY2hhcnRlZDogZmFVbmNoYXJ0ZWQsXG4gIGZhRmlyc3RkcmFmdDogZmFGaXJzdGRyYWZ0LFxuICBmYVNxdWFyZVlvdXR1YmU6IGZhU3F1YXJlWW91dHViZSxcbiAgZmFZb3V0dWJlU3F1YXJlOiBmYVlvdXR1YmVTcXVhcmUsXG4gIGZhV2lraXBlZGlhVzogZmFXaWtpcGVkaWFXLFxuICBmYVdwcmVzc3I6IGZhV3ByZXNzcixcbiAgZmFSZW5kYWN0OiBmYVJlbmRhY3QsXG4gIGZhQW5nZWxsaXN0OiBmYUFuZ2VsbGlzdCxcbiAgZmFHYWxhY3RpY1JlcHVibGljOiBmYUdhbGFjdGljUmVwdWJsaWMsXG4gIGZhTmZjRGlyZWN0aW9uYWw6IGZhTmZjRGlyZWN0aW9uYWwsXG4gIGZhU2t5cGU6IGZhU2t5cGUsXG4gIGZhSm9nZXQ6IGZhSm9nZXQsXG4gIGZhRmVkb3JhOiBmYUZlZG9yYSxcbiAgZmFTdHJpcGVTOiBmYVN0cmlwZVMsXG4gIGZhTWV0YTogZmFNZXRhLFxuICBmYUxhcmF2ZWw6IGZhTGFyYXZlbCxcbiAgZmFIb3RqYXI6IGZhSG90amFyLFxuICBmYUJsdWV0b290aEI6IGZhQmx1ZXRvb3RoQixcbiAgZmFTcXVhcmVMZXR0ZXJib3hkOiBmYVNxdWFyZUxldHRlcmJveGQsXG4gIGZhU3RpY2tlck11bGU6IGZhU3RpY2tlck11bGUsXG4gIGZhQ3JlYXRpdmVDb21tb25zWmVybzogZmFDcmVhdGl2ZUNvbW1vbnNaZXJvLFxuICBmYUhpcHM6IGZhSGlwcyxcbiAgZmFCZWhhbmNlOiBmYUJlaGFuY2UsXG4gIGZhUmVkZGl0OiBmYVJlZGRpdCxcbiAgZmFEaXNjb3JkOiBmYURpc2NvcmQsXG4gIGZhQ2hyb21lOiBmYUNocm9tZSxcbiAgZmFBcHBTdG9yZUlvczogZmFBcHBTdG9yZUlvcyxcbiAgZmFDY0Rpc2NvdmVyOiBmYUNjRGlzY292ZXIsXG4gIGZhV3BiZWdpbm5lcjogZmFXcGJlZ2lubmVyLFxuICBmYUNvbmZsdWVuY2U6IGZhQ29uZmx1ZW5jZSxcbiAgZmFTaG9lbGFjZTogZmFTaG9lbGFjZSxcbiAgZmFNZGI6IGZhTWRiLFxuICBmYURvY2h1YjogZmFEb2NodWIsXG4gIGZhQWNjZXNzaWJsZUljb246IGZhQWNjZXNzaWJsZUljb24sXG4gIGZhRWJheTogZmFFYmF5LFxuICBmYUFtYXpvbjogZmFBbWF6b24sXG4gIGZhVW5zcGxhc2g6IGZhVW5zcGxhc2gsXG4gIGZhWWFybjogZmFZYXJuLFxuICBmYVNxdWFyZVN0ZWFtOiBmYVNxdWFyZVN0ZWFtLFxuICBmYVN0ZWFtU3F1YXJlOiBmYVN0ZWFtU3F1YXJlLFxuICBmYTUwMHB4OiBmYTUwMHB4LFxuICBmYVNxdWFyZVZpbWVvOiBmYVNxdWFyZVZpbWVvLFxuICBmYVZpbWVvU3F1YXJlOiBmYVZpbWVvU3F1YXJlLFxuICBmYUFzeW1tZXRyaWs6IGZhQXN5bW1ldHJpayxcbiAgZmFGb250QXdlc29tZTogZmFGb250QXdlc29tZSxcbiAgZmFGb250QXdlc29tZUZsYWc6IGZhRm9udEF3ZXNvbWVGbGFnLFxuICBmYUZvbnRBd2Vzb21lTG9nb0Z1bGw6IGZhRm9udEF3ZXNvbWVMb2dvRnVsbCxcbiAgZmFHcmF0aXBheTogZmFHcmF0aXBheSxcbiAgZmFBcHBsZTogZmFBcHBsZSxcbiAgZmFIaXZlOiBmYUhpdmUsXG4gIGZhR2l0a3Jha2VuOiBmYUdpdGtyYWtlbixcbiAgZmFLZXliYXNlOiBmYUtleWJhc2UsXG4gIGZhQXBwbGVQYXk6IGZhQXBwbGVQYXksXG4gIGZhUGFkbGV0OiBmYVBhZGxldCxcbiAgZmFBbWF6b25QYXk6IGZhQW1hem9uUGF5LFxuICBmYVNxdWFyZUdpdGh1YjogZmFTcXVhcmVHaXRodWIsXG4gIGZhR2l0aHViU3F1YXJlOiBmYUdpdGh1YlNxdWFyZSxcbiAgZmFTdHVtYmxldXBvbjogZmFTdHVtYmxldXBvbixcbiAgZmFGZWRleDogZmFGZWRleCxcbiAgZmFQaG9lbml4RnJhbWV3b3JrOiBmYVBob2VuaXhGcmFtZXdvcmssXG4gIGZhU2hvcGlmeTogZmFTaG9waWZ5LFxuICBmYU5lb3M6IGZhTmVvcyxcbiAgZmFTcXVhcmVUaHJlYWRzOiBmYVNxdWFyZVRocmVhZHMsXG4gIGZhSGFja2VycmFuazogZmFIYWNrZXJyYW5rLFxuICBmYVJlc2VhcmNoZ2F0ZTogZmFSZXNlYXJjaGdhdGUsXG4gIGZhU3dpZnQ6IGZhU3dpZnQsXG4gIGZhQW5ndWxhcjogZmFBbmd1bGFyLFxuICBmYVNwZWFrYXA6IGZhU3BlYWthcCxcbiAgZmFBbmdyeWNyZWF0aXZlOiBmYUFuZ3J5Y3JlYXRpdmUsXG4gIGZhWUNvbWJpbmF0b3I6IGZhWUNvbWJpbmF0b3IsXG4gIGZhRW1waXJlOiBmYUVtcGlyZSxcbiAgZmFFbnZpcmE6IGZhRW52aXJhLFxuICBmYUdvb2dsZVNjaG9sYXI6IGZhR29vZ2xlU2Nob2xhcixcbiAgZmFTcXVhcmVHaXRsYWI6IGZhU3F1YXJlR2l0bGFiLFxuICBmYUdpdGxhYlNxdWFyZTogZmFHaXRsYWJTcXVhcmUsXG4gIGZhU3R1ZGlvdmluYXJpOiBmYVN0dWRpb3ZpbmFyaSxcbiAgZmFQaWVkUGlwZXI6IGZhUGllZFBpcGVyLFxuICBmYVdvcmRwcmVzczogZmFXb3JkcHJlc3MsXG4gIGZhUHJvZHVjdEh1bnQ6IGZhUHJvZHVjdEh1bnQsXG4gIGZhRmlyZWZveDogZmFGaXJlZm94LFxuICBmYUxpbm9kZTogZmFMaW5vZGUsXG4gIGZhR29vZHJlYWRzOiBmYUdvb2RyZWFkcyxcbiAgZmFTcXVhcmVPZG5va2xhc3NuaWtpOiBmYVNxdWFyZU9kbm9rbGFzc25pa2ksXG4gIGZhT2Rub2tsYXNzbmlraVNxdWFyZTogZmFPZG5va2xhc3NuaWtpU3F1YXJlLFxuICBmYUpzZmlkZGxlOiBmYUpzZmlkZGxlLFxuICBmYVNpdGg6IGZhU2l0aCxcbiAgZmFUaGVtZWlzbGU6IGZhVGhlbWVpc2xlLFxuICBmYVBhZ2U0OiBmYVBhZ2U0LFxuICBmYUhhc2hub2RlOiBmYUhhc2hub2RlLFxuICBmYVJlYWN0OiBmYVJlYWN0LFxuICBmYUNjUGF5cGFsOiBmYUNjUGF5cGFsLFxuICBmYVNxdWFyZXNwYWNlOiBmYVNxdWFyZXNwYWNlLFxuICBmYUNjU3RyaXBlOiBmYUNjU3RyaXBlLFxuICBmYUNyZWF0aXZlQ29tbW9uc1NoYXJlOiBmYUNyZWF0aXZlQ29tbW9uc1NoYXJlLFxuICBmYUJpdGNvaW46IGZhQml0Y29pbixcbiAgZmFLZXljZG46IGZhS2V5Y2RuLFxuICBmYU9wZXJhOiBmYU9wZXJhLFxuICBmYUl0Y2hJbzogZmFJdGNoSW8sXG4gIGZhVW1icmFjbzogZmFVbWJyYWNvLFxuICBmYUdhbGFjdGljU2VuYXRlOiBmYUdhbGFjdGljU2VuYXRlLFxuICBmYVVidW50dTogZmFVYnVudHUsXG4gIGZhRHJhZnQyZGlnaXRhbDogZmFEcmFmdDJkaWdpdGFsLFxuICBmYVN0cmlwZTogZmFTdHJpcGUsXG4gIGZhSG91eno6IGZhSG91enosXG4gIGZhR2c6IGZhR2csXG4gIGZhRGhsOiBmYURobCxcbiAgZmFTcXVhcmVQaW50ZXJlc3Q6IGZhU3F1YXJlUGludGVyZXN0LFxuICBmYVBpbnRlcmVzdFNxdWFyZTogZmFQaW50ZXJlc3RTcXVhcmUsXG4gIGZhWGluZzogZmFYaW5nLFxuICBmYUJsYWNrYmVycnk6IGZhQmxhY2tiZXJyeSxcbiAgZmFDcmVhdGl2ZUNvbW1vbnNQZDogZmFDcmVhdGl2ZUNvbW1vbnNQZCxcbiAgZmFQbGF5c3RhdGlvbjogZmFQbGF5c3RhdGlvbixcbiAgZmFRdWluc2NhcGU6IGZhUXVpbnNjYXBlLFxuICBmYUxlc3M6IGZhTGVzcyxcbiAgZmFCbG9nZ2VyQjogZmFCbG9nZ2VyQixcbiAgZmFPcGVuY2FydDogZmFPcGVuY2FydCxcbiAgZmFWaW5lOiBmYVZpbmUsXG4gIGZhU2lnbmFsTWVzc2VuZ2VyOiBmYVNpZ25hbE1lc3NlbmdlcixcbiAgZmFQYXlwYWw6IGZhUGF5cGFsLFxuICBmYUdpdGxhYjogZmFHaXRsYWIsXG4gIGZhVHlwbzM6IGZhVHlwbzMsXG4gIGZhUmVkZGl0QWxpZW46IGZhUmVkZGl0QWxpZW4sXG4gIGZhWWFob286IGZhWWFob28sXG4gIGZhRGFpbHltb3Rpb246IGZhRGFpbHltb3Rpb24sXG4gIGZhQWZmaWxpYXRldGhlbWU6IGZhQWZmaWxpYXRldGhlbWUsXG4gIGZhUGllZFBpcGVyUHA6IGZhUGllZFBpcGVyUHAsXG4gIGZhQm9vdHN0cmFwOiBmYUJvb3RzdHJhcCxcbiAgZmFPZG5va2xhc3NuaWtpOiBmYU9kbm9rbGFzc25pa2ksXG4gIGZhTmZjU3ltYm9sOiBmYU5mY1N5bWJvbCxcbiAgZmFNaW50Yml0OiBmYU1pbnRiaXQsXG4gIGZhRXRoZXJldW06IGZhRXRoZXJldW0sXG4gIGZhU3BlYWtlckRlY2s6IGZhU3BlYWtlckRlY2ssXG4gIGZhQ3JlYXRpdmVDb21tb25zTmNFdTogZmFDcmVhdGl2ZUNvbW1vbnNOY0V1LFxuICBmYVBhdHJlb246IGZhUGF0cmVvbixcbiAgZmFBdmlhbmV4OiBmYUF2aWFuZXgsXG4gIGZhRWxsbzogZmFFbGxvLFxuICBmYUdvZm9yZTogZmFHb2ZvcmUsXG4gIGZhQmltb2JqZWN0OiBmYUJpbW9iamVjdCxcbiAgZmFCcmF2ZVJldmVyc2U6IGZhQnJhdmVSZXZlcnNlLFxuICBmYUZhY2Vib29rRjogZmFGYWNlYm9va0YsXG4gIGZhU3F1YXJlR29vZ2xlUGx1czogZmFTcXVhcmVHb29nbGVQbHVzLFxuICBmYUdvb2dsZVBsdXNTcXVhcmU6IGZhR29vZ2xlUGx1c1NxdWFyZSxcbiAgZmFXZWJBd2Vzb21lOiBmYVdlYkF3ZXNvbWUsXG4gIGZhTWFuZGFsb3JpYW46IGZhTWFuZGFsb3JpYW4sXG4gIGZhRmlyc3RPcmRlckFsdDogZmFGaXJzdE9yZGVyQWx0LFxuICBmYU9zaTogZmFPc2ksXG4gIGZhR29vZ2xlV2FsbGV0OiBmYUdvb2dsZVdhbGxldCxcbiAgZmFEQW5kREJleW9uZDogZmFEQW5kREJleW9uZCxcbiAgZmFQZXJpc2NvcGU6IGZhUGVyaXNjb3BlLFxuICBmYUZ1bGNydW06IGZhRnVsY3J1bSxcbiAgZmFDbG91ZHNjYWxlOiBmYUNsb3Vkc2NhbGUsXG4gIGZhRm9ydW1iZWU6IGZhRm9ydW1iZWUsXG4gIGZhTWl6dW5pOiBmYU1penVuaSxcbiAgZmFTY2hsaXg6IGZhU2NobGl4LFxuICBmYVNxdWFyZVhpbmc6IGZhU3F1YXJlWGluZyxcbiAgZmFYaW5nU3F1YXJlOiBmYVhpbmdTcXVhcmUsXG4gIGZhQmFuZGNhbXA6IGZhQmFuZGNhbXAsXG4gIGZhV3Bmb3JtczogZmFXcGZvcm1zLFxuICBmYUNsb3VkdmVyc2lmeTogZmFDbG91ZHZlcnNpZnksXG4gIGZhVXNwczogZmFVc3BzLFxuICBmYU1lZ2Fwb3J0OiBmYU1lZ2Fwb3J0LFxuICBmYU1hZ2VudG86IGZhTWFnZW50byxcbiAgZmFTcG90aWZ5OiBmYVNwb3RpZnksXG4gIGZhT3B0aW5Nb25zdGVyOiBmYU9wdGluTW9uc3RlcixcbiAgZmFGbHk6IGZhRmx5LFxuICBmYUF2aWF0bzogZmFBdmlhdG8sXG4gIGZhSXR1bmVzOiBmYUl0dW5lcyxcbiAgZmFDdXR0bGVmaXNoOiBmYUN1dHRsZWZpc2gsXG4gIGZhQmxvZ2dlcjogZmFCbG9nZ2VyLFxuICBmYUZsaWNrcjogZmFGbGlja3IsXG4gIGZhVmliZXI6IGZhVmliZXIsXG4gIGZhU291bmRjbG91ZDogZmFTb3VuZGNsb3VkLFxuICBmYURpZ2c6IGZhRGlnZyxcbiAgZmFUZW5jZW50V2VpYm86IGZhVGVuY2VudFdlaWJvLFxuICBmYUxldHRlcmJveGQ6IGZhTGV0dGVyYm94ZCxcbiAgZmFTeW1mb255OiBmYVN5bWZvbnksXG4gIGZhTWF4Y2RuOiBmYU1heGNkbixcbiAgZmFFdHN5OiBmYUV0c3ksXG4gIGZhRmFjZWJvb2tNZXNzZW5nZXI6IGZhRmFjZWJvb2tNZXNzZW5nZXIsXG4gIGZhQXVkaWJsZTogZmFBdWRpYmxlLFxuICBmYVRoaW5rUGVha3M6IGZhVGhpbmtQZWFrcyxcbiAgZmFCaWxpYmlsaTogZmFCaWxpYmlsaSxcbiAgZmFFcmxhbmc6IGZhRXJsYW5nLFxuICBmYVhUd2l0dGVyOiBmYVhUd2l0dGVyLFxuICBmYUNvdHRvbkJ1cmVhdTogZmFDb3R0b25CdXJlYXUsXG4gIGZhRGFzaGN1YmU6IGZhRGFzaGN1YmUsXG4gIGZhNDJHcm91cDogZmE0Mkdyb3VwLFxuICBmYUlubm9zb2Z0OiBmYUlubm9zb2Z0LFxuICBmYVN0YWNrRXhjaGFuZ2U6IGZhU3RhY2tFeGNoYW5nZSxcbiAgZmFFbGVtZW50b3I6IGZhRWxlbWVudG9yLFxuICBmYVNxdWFyZVBpZWRQaXBlcjogZmFTcXVhcmVQaWVkUGlwZXIsXG4gIGZhUGllZFBpcGVyU3F1YXJlOiBmYVBpZWRQaXBlclNxdWFyZSxcbiAgZmFDcmVhdGl2ZUNvbW1vbnNOZDogZmFDcmVhdGl2ZUNvbW1vbnNOZCxcbiAgZmFQYWxmZWQ6IGZhUGFsZmVkLFxuICBmYVN1cGVycG93ZXJzOiBmYVN1cGVycG93ZXJzLFxuICBmYVJlc29sdmluZzogZmFSZXNvbHZpbmcsXG4gIGZhWGJveDogZmFYYm94LFxuICBmYVNxdWFyZVdlYkF3ZXNvbWVTdHJva2U6IGZhU3F1YXJlV2ViQXdlc29tZVN0cm9rZSxcbiAgZmFTZWFyY2hlbmdpbjogZmFTZWFyY2hlbmdpbixcbiAgZmFUaWt0b2s6IGZhVGlrdG9rLFxuICBmYVNxdWFyZUZhY2Vib29rOiBmYVNxdWFyZUZhY2Vib29rLFxuICBmYUZhY2Vib29rU3F1YXJlOiBmYUZhY2Vib29rU3F1YXJlLFxuICBmYVJlbnJlbjogZmFSZW5yZW4sXG4gIGZhTGludXg6IGZhTGludXgsXG4gIGZhR2xpZGU6IGZhR2xpZGUsXG4gIGZhTGlua2VkaW46IGZhTGlua2VkaW4sXG4gIGZhSHVic3BvdDogZmFIdWJzcG90LFxuICBmYURlcGxveWRvZzogZmFEZXBsb3lkb2csXG4gIGZhVHdpdGNoOiBmYVR3aXRjaCxcbiAgZmFSYXZlbHJ5OiBmYVJhdmVscnksXG4gIGZhTWl4ZXI6IGZhTWl4ZXIsXG4gIGZhU3F1YXJlTGFzdGZtOiBmYVNxdWFyZUxhc3RmbSxcbiAgZmFMYXN0Zm1TcXVhcmU6IGZhTGFzdGZtU3F1YXJlLFxuICBmYVZpbWVvOiBmYVZpbWVvLFxuICBmYU1lbmRlbGV5OiBmYU1lbmRlbGV5LFxuICBmYVVuaXJlZ2lzdHJ5OiBmYVVuaXJlZ2lzdHJ5LFxuICBmYUZpZ21hOiBmYUZpZ21hLFxuICBmYUNyZWF0aXZlQ29tbW9uc1JlbWl4OiBmYUNyZWF0aXZlQ29tbW9uc1JlbWl4LFxuICBmYUNjQW1hem9uUGF5OiBmYUNjQW1hem9uUGF5LFxuICBmYURyb3Bib3g6IGZhRHJvcGJveCxcbiAgZmFJbnN0YWdyYW06IGZhSW5zdGFncmFtLFxuICBmYUNtcGxpZDogZmFDbXBsaWQsXG4gIGZhVXB3b3JrOiBmYVVwd29yayxcbiAgZmFGYWNlYm9vazogZmFGYWNlYm9vayxcbiAgZmFHcmlwZmlyZTogZmFHcmlwZmlyZSxcbiAgZmFKZWRpT3JkZXI6IGZhSmVkaU9yZGVyLFxuICBmYVVpa2l0OiBmYVVpa2l0LFxuICBmYUZvcnRBd2Vzb21lQWx0OiBmYUZvcnRBd2Vzb21lQWx0LFxuICBmYVBoYWJyaWNhdG9yOiBmYVBoYWJyaWNhdG9yLFxuICBmYVVzc3VubmFoOiBmYVVzc3VubmFoLFxuICBmYUVhcmx5YmlyZHM6IGZhRWFybHliaXJkcyxcbiAgZmFUcmFkZUZlZGVyYXRpb246IGZhVHJhZGVGZWRlcmF0aW9uLFxuICBmYUF1dG9wcmVmaXhlcjogZmFBdXRvcHJlZml4ZXIsXG4gIGZhV2hhdHNhcHA6IGZhV2hhdHNhcHAsXG4gIGZhU3F1YXJlVXB3b3JrOiBmYVNxdWFyZVVwd29yayxcbiAgZmFTbGlkZXNoYXJlOiBmYVNsaWRlc2hhcmUsXG4gIGZhR29vZ2xlUGxheTogZmFHb29nbGVQbGF5LFxuICBmYVZpYWRlbzogZmFWaWFkZW8sXG4gIGZhTGluZTogZmFMaW5lLFxuICBmYUdvb2dsZURyaXZlOiBmYUdvb2dsZURyaXZlLFxuICBmYVNlcnZpY2VzdGFjazogZmFTZXJ2aWNlc3RhY2ssXG4gIGZhU2ltcGx5YnVpbHQ6IGZhU2ltcGx5YnVpbHQsXG4gIGZhQml0YnVja2V0OiBmYUJpdGJ1Y2tldCxcbiAgZmFJbWRiOiBmYUltZGIsXG4gIGZhRGVlemVyOiBmYURlZXplcixcbiAgZmFSYXNwYmVycnlQaTogZmFSYXNwYmVycnlQaSxcbiAgZmFKaXJhOiBmYUppcmEsXG4gIGZhRG9ja2VyOiBmYURvY2tlcixcbiAgZmFTY3JlZW5wYWw6IGZhU2NyZWVucGFsLFxuICBmYUJsdWV0b290aDogZmFCbHVldG9vdGgsXG4gIGZhR2l0dGVyOiBmYUdpdHRlcixcbiAgZmFEQW5kRDogZmFEQW5kRCxcbiAgZmFNaWNyb2Jsb2c6IGZhTWljcm9ibG9nLFxuICBmYUNjRGluZXJzQ2x1YjogZmFDY0RpbmVyc0NsdWIsXG4gIGZhR2dDaXJjbGU6IGZhR2dDaXJjbGUsXG4gIGZhUGllZFBpcGVySGF0OiBmYVBpZWRQaXBlckhhdCxcbiAgZmFLaWNrc3RhcnRlcks6IGZhS2lja3N0YXJ0ZXJLLFxuICBmYVlhbmRleDogZmFZYW5kZXgsXG4gIGZhUmVhZG1lOiBmYVJlYWRtZSxcbiAgZmFIdG1sNTogZmFIdG1sNSxcbiAgZmFTZWxsc3k6IGZhU2VsbHN5LFxuICBmYVNxdWFyZVdlYkF3ZXNvbWU6IGZhU3F1YXJlV2ViQXdlc29tZSxcbiAgZmFTYXNzOiBmYVNhc3MsXG4gIGZhV2lyc2luZGhhbmR3ZXJrOiBmYVdpcnNpbmRoYW5kd2VyayxcbiAgZmFXc2g6IGZhV3NoLFxuICBmYUJ1cm9tb2JlbGV4cGVydGU6IGZhQnVyb21vYmVsZXhwZXJ0ZSxcbiAgZmFTYWxlc2ZvcmNlOiBmYVNhbGVzZm9yY2UsXG4gIGZhT2N0b3B1c0RlcGxveTogZmFPY3RvcHVzRGVwbG95LFxuICBmYU1lZGFwcHM6IGZhTWVkYXBwcyxcbiAgZmFOczg6IGZhTnM4LFxuICBmYVBpbnRlcmVzdFA6IGZhUGludGVyZXN0UCxcbiAgZmFBcHBlcjogZmFBcHBlcixcbiAgZmFGb3J0QXdlc29tZTogZmFGb3J0QXdlc29tZSxcbiAgZmFXYXplOiBmYVdhemUsXG4gIGZhQmx1ZXNreTogZmFCbHVlc2t5LFxuICBmYUNjSmNiOiBmYUNjSmNiLFxuICBmYVNuYXBjaGF0OiBmYVNuYXBjaGF0LFxuICBmYVNuYXBjaGF0R2hvc3Q6IGZhU25hcGNoYXRHaG9zdCxcbiAgZmFGYW50YXN5RmxpZ2h0R2FtZXM6IGZhRmFudGFzeUZsaWdodEdhbWVzLFxuICBmYVJ1c3Q6IGZhUnVzdCxcbiAgZmFXaXg6IGZhV2l4LFxuICBmYVNxdWFyZUJlaGFuY2U6IGZhU3F1YXJlQmVoYW5jZSxcbiAgZmFCZWhhbmNlU3F1YXJlOiBmYUJlaGFuY2VTcXVhcmUsXG4gIGZhU3VwcGxlOiBmYVN1cHBsZSxcbiAgZmFXZWJmbG93OiBmYVdlYmZsb3csXG4gIGZhUmViZWw6IGZhUmViZWwsXG4gIGZhQ3NzMzogZmFDc3MzLFxuICBmYVN0YXlsaW5rZWQ6IGZhU3RheWxpbmtlZCxcbiAgZmFLYWdnbGU6IGZhS2FnZ2xlLFxuICBmYVNwYWNlQXdlc29tZTogZmFTcGFjZUF3ZXNvbWUsXG4gIGZhRGV2aWFudGFydDogZmFEZXZpYW50YXJ0LFxuICBmYUNwYW5lbDogZmFDcGFuZWwsXG4gIGZhR29vZHJlYWRzRzogZmFHb29kcmVhZHNHLFxuICBmYVNxdWFyZUdpdDogZmFTcXVhcmVHaXQsXG4gIGZhR2l0U3F1YXJlOiBmYUdpdFNxdWFyZSxcbiAgZmFTcXVhcmVUdW1ibHI6IGZhU3F1YXJlVHVtYmxyLFxuICBmYVR1bWJsclNxdWFyZTogZmFUdW1ibHJTcXVhcmUsXG4gIGZhVHJlbGxvOiBmYVRyZWxsbyxcbiAgZmFDcmVhdGl2ZUNvbW1vbnNOY0pwOiBmYUNyZWF0aXZlQ29tbW9uc05jSnAsXG4gIGZhR2V0UG9ja2V0OiBmYUdldFBvY2tldCxcbiAgZmFQZXJieXRlOiBmYVBlcmJ5dGUsXG4gIGZhR3J1bnQ6IGZhR3J1bnQsXG4gIGZhV2VlYmx5OiBmYVdlZWJseSxcbiAgZmFDb25uZWN0ZGV2ZWxvcDogZmFDb25uZWN0ZGV2ZWxvcCxcbiAgZmFMZWFucHViOiBmYUxlYW5wdWIsXG4gIGZhQmxhY2tUaWU6IGZhQmxhY2tUaWUsXG4gIGZhVGhlbWVjbzogZmFUaGVtZWNvLFxuICBmYVB5dGhvbjogZmFQeXRob24sXG4gIGZhQW5kcm9pZDogZmFBbmRyb2lkLFxuICBmYUJvdHM6IGZhQm90cyxcbiAgZmFGcmVlQ29kZUNhbXA6IGZhRnJlZUNvZGVDYW1wLFxuICBmYUhvcm5iaWxsOiBmYUhvcm5iaWxsLFxuICBmYUpzOiBmYUpzLFxuICBmYUlkZWFsOiBmYUlkZWFsLFxuICBmYUdpdDogZmFHaXQsXG4gIGZhRGV2OiBmYURldixcbiAgZmFTa2V0Y2g6IGZhU2tldGNoLFxuICBmYVlhbmRleEludGVybmF0aW9uYWw6IGZhWWFuZGV4SW50ZXJuYXRpb25hbCxcbiAgZmFDY0FtZXg6IGZhQ2NBbWV4LFxuICBmYVViZXI6IGZhVWJlcixcbiAgZmFHaXRodWI6IGZhR2l0aHViLFxuICBmYVBocDogZmFQaHAsXG4gIGZhQWxpcGF5OiBmYUFsaXBheSxcbiAgZmFZb3V0dWJlOiBmYVlvdXR1YmUsXG4gIGZhU2t5YXRsYXM6IGZhU2t5YXRsYXMsXG4gIGZhRmlyZWZveEJyb3dzZXI6IGZhRmlyZWZveEJyb3dzZXIsXG4gIGZhUmVwbHlkOiBmYVJlcGx5ZCxcbiAgZmFTdXNlOiBmYVN1c2UsXG4gIGZhSmVua2luczogZmFKZW5raW5zLFxuICBmYVR3aXR0ZXI6IGZhVHdpdHRlcixcbiAgZmFSb2Nrcm1zOiBmYVJvY2tybXMsXG4gIGZhUGludGVyZXN0OiBmYVBpbnRlcmVzdCxcbiAgZmFCdWZmZXI6IGZhQnVmZmVyLFxuICBmYU5wbTogZmFOcG0sXG4gIGZhWWFtbWVyOiBmYVlhbW1lcixcbiAgZmFCdGM6IGZhQnRjLFxuICBmYURyaWJiYmxlOiBmYURyaWJiYmxlLFxuICBmYVN0dW1ibGV1cG9uQ2lyY2xlOiBmYVN0dW1ibGV1cG9uQ2lyY2xlLFxuICBmYUludGVybmV0RXhwbG9yZXI6IGZhSW50ZXJuZXRFeHBsb3JlcixcbiAgZmFTdHViYmVyOiBmYVN0dWJiZXIsXG4gIGZhVGVsZWdyYW06IGZhVGVsZWdyYW0sXG4gIGZhVGVsZWdyYW1QbGFuZTogZmFUZWxlZ3JhbVBsYW5lLFxuICBmYU9sZFJlcHVibGljOiBmYU9sZFJlcHVibGljLFxuICBmYU9keXNlZTogZmFPZHlzZWUsXG4gIGZhU3F1YXJlV2hhdHNhcHA6IGZhU3F1YXJlV2hhdHNhcHAsXG4gIGZhV2hhdHNhcHBTcXVhcmU6IGZhV2hhdHNhcHBTcXVhcmUsXG4gIGZhTm9kZUpzOiBmYU5vZGVKcyxcbiAgZmFFZGdlTGVnYWN5OiBmYUVkZ2VMZWdhY3ksXG4gIGZhU2xhY2s6IGZhU2xhY2ssXG4gIGZhU2xhY2tIYXNoOiBmYVNsYWNrSGFzaCxcbiAgZmFNZWRydDogZmFNZWRydCxcbiAgZmFVc2I6IGZhVXNiLFxuICBmYVR1bWJscjogZmFUdW1ibHIsXG4gIGZhVmFhZGluOiBmYVZhYWRpbixcbiAgZmFRdW9yYTogZmFRdW9yYSxcbiAgZmFTcXVhcmVYVHdpdHRlcjogZmFTcXVhcmVYVHdpdHRlcixcbiAgZmFSZWFjdGV1cm9wZTogZmFSZWFjdGV1cm9wZSxcbiAgZmFNZWRpdW06IGZhTWVkaXVtLFxuICBmYU1lZGl1bU06IGZhTWVkaXVtTSxcbiAgZmFBbWlsaWE6IGZhQW1pbGlhLFxuICBmYU1peGNsb3VkOiBmYU1peGNsb3VkLFxuICBmYUZsaXBib2FyZDogZmFGbGlwYm9hcmQsXG4gIGZhVmlhY29pbjogZmFWaWFjb2luLFxuICBmYUNyaXRpY2FsUm9sZTogZmFDcml0aWNhbFJvbGUsXG4gIGZhU2l0cm94OiBmYVNpdHJveCxcbiAgZmFEaXNjb3Vyc2U6IGZhRGlzY291cnNlLFxuICBmYUpvb21sYTogZmFKb29tbGEsXG4gIGZhTWFzdG9kb246IGZhTWFzdG9kb24sXG4gIGZhQWlyYm5iOiBmYUFpcmJuYixcbiAgZmFXb2xmUGFja0JhdHRhbGlvbjogZmFXb2xmUGFja0JhdHRhbGlvbixcbiAgZmFCdXlOTGFyZ2U6IGZhQnV5TkxhcmdlLFxuICBmYUd1bHA6IGZhR3VscCxcbiAgZmFDcmVhdGl2ZUNvbW1vbnNTYW1wbGluZ1BsdXM6IGZhQ3JlYXRpdmVDb21tb25zU2FtcGxpbmdQbHVzLFxuICBmYVN0cmF2YTogZmFTdHJhdmEsXG4gIGZhRW1iZXI6IGZhRW1iZXIsXG4gIGZhQ2FuYWRpYW5NYXBsZUxlYWY6IGZhQ2FuYWRpYW5NYXBsZUxlYWYsXG4gIGZhVGVhbXNwZWFrOiBmYVRlYW1zcGVhayxcbiAgZmFQdXNoZWQ6IGZhUHVzaGVkLFxuICBmYVdvcmRwcmVzc1NpbXBsZTogZmFXb3JkcHJlc3NTaW1wbGUsXG4gIGZhTnV0cml0aW9uaXg6IGZhTnV0cml0aW9uaXgsXG4gIGZhV29kdTogZmFXb2R1LFxuICBmYUdvb2dsZVBheTogZmFHb29nbGVQYXksXG4gIGZhSW50ZXJjb206IGZhSW50ZXJjb20sXG4gIGZhWmhpaHU6IGZhWmhpaHUsXG4gIGZhS29ydnVlOiBmYUtvcnZ1ZSxcbiAgZmFQaXg6IGZhUGl4LFxuICBmYVN0ZWFtU3ltYm9sOiBmYVN0ZWFtU3ltYm9sXG59O1xuXG5leHBvcnQgeyBpY29ucyBhcyBmYWIsIHByZWZpeCwgZmFNb25lcm8sIGZhSG9vbGksIGZhWWVscCwgZmFDY1Zpc2EsIGZhTGFzdGZtLCBmYVNob3B3YXJlLCBmYUNyZWF0aXZlQ29tbW9uc05jLCBmYUF3cywgZmFSZWRoYXQsIGZhWW9hc3QsIGZhQ2xvdWRmbGFyZSwgZmFVcHMsIGZhUGl4aXYsIGZhV3BleHBsb3JlciwgZmFEeWFsb2csIGZhQml0eSwgZmFTdGFja3BhdGgsIGZhQnV5c2VsbGFkcywgZmFGaXJzdE9yZGVyLCBmYU1vZHgsIGZhR3VpbGRlZCwgZmFWbnYsIGZhU3F1YXJlSnMsIGZhSnNTcXVhcmUsIGZhTWljcm9zb2Z0LCBmYVFxLCBmYU9yY2lkLCBmYUphdmEsIGZhSW52aXNpb24sIGZhQ3JlYXRpdmVDb21tb25zUGRBbHQsIGZhQ2VudGVyY29kZSwgZmFHbGlkZUcsIGZhRHJ1cGFsLCBmYUp4bCwgZmFIaXJlQUhlbHBlciwgZmFDcmVhdGl2ZUNvbW1vbnNCeSwgZmFVbml0eSwgZmFXaG1jcywgZmFSb2NrZXRjaGF0LCBmYVZrLCBmYVVudGFwcGQsIGZhTWFpbGNoaW1wLCBmYUNzczNBbHQsIGZhU3F1YXJlUmVkZGl0LCBmYVJlZGRpdFNxdWFyZSwgZmFWaW1lb1YsIGZhQ29udGFvLCBmYVNxdWFyZUZvbnRBd2Vzb21lLCBmYURlc2twcm8sIGZhQnJhdmUsIGZhU2lzdHJpeCwgZmFTcXVhcmVJbnN0YWdyYW0sIGZhSW5zdGFncmFtU3F1YXJlLCBmYUJhdHRsZU5ldCwgZmFUaGVSZWRZZXRpLCBmYVNxdWFyZUhhY2tlck5ld3MsIGZhSGFja2VyTmV3c1NxdWFyZSwgZmFFZGdlLCBmYVRocmVhZHMsIGZhTmFwc3RlciwgZmFTcXVhcmVTbmFwY2hhdCwgZmFTbmFwY2hhdFNxdWFyZSwgZmFHb29nbGVQbHVzRywgZmFBcnRzdGF0aW9uLCBmYU1hcmtkb3duLCBmYVNvdXJjZXRyZWUsIGZhR29vZ2xlUGx1cywgZmFEaWFzcG9yYSwgZmFGb3Vyc3F1YXJlLCBmYVN0YWNrT3ZlcmZsb3csIGZhR2l0aHViQWx0LCBmYVBob2VuaXhTcXVhZHJvbiwgZmFQYWdlbGluZXMsIGZhQWxnb2xpYSwgZmFSZWRSaXZlciwgZmFDcmVhdGl2ZUNvbW1vbnNTYSwgZmFTYWZhcmksIGZhR29vZ2xlLCBmYVNxdWFyZUZvbnRBd2Vzb21lU3Ryb2tlLCBmYUZvbnRBd2Vzb21lQWx0LCBmYUF0bGFzc2lhbiwgZmFMaW5rZWRpbkluLCBmYURpZ2l0YWxPY2VhbiwgZmFOaW1ibHIsIGZhQ2hyb21lY2FzdCwgZmFFdmVybm90ZSwgZmFIYWNrZXJOZXdzLCBmYUNyZWF0aXZlQ29tbW9uc1NhbXBsaW5nLCBmYUFkdmVyc2FsLCBmYUNyZWF0aXZlQ29tbW9ucywgZmFXYXRjaG1hbk1vbml0b3JpbmcsIGZhRm9udGljb25zLCBmYVdlaXhpbiwgZmFTaGlydHNpbmJ1bGssIGZhQ29kZXBlbiwgZmFHaXRBbHQsIGZhTHlmdCwgZmFSZXYsIGZhV2luZG93cywgZmFXaXphcmRzT2ZUaGVDb2FzdCwgZmFTcXVhcmVWaWFkZW8sIGZhVmlhZGVvU3F1YXJlLCBmYU1lZXR1cCwgZmFDZW50b3MsIGZhQWRuLCBmYUNsb3Vkc21pdGgsIGZhT3BlbnN1c2UsIGZhUGllZFBpcGVyQWx0LCBmYVNxdWFyZURyaWJiYmxlLCBmYURyaWJiYmxlU3F1YXJlLCBmYUNvZGllcGllLCBmYU5vZGUsIGZhTWl4LCBmYVN0ZWFtLCBmYUNjQXBwbGVQYXksIGZhU2NyaWJkLCBmYURlYmlhbiwgZmFPcGVuaWQsIGZhSW5zdGFsb2QsIGZhRXhwZWRpdGVkc3NsLCBmYVNlbGxjYXN0LCBmYVNxdWFyZVR3aXR0ZXIsIGZhVHdpdHRlclNxdWFyZSwgZmFSUHJvamVjdCwgZmFEZWxpY2lvdXMsIGZhRnJlZWJzZCwgZmFWdWVqcywgZmFBY2N1c29mdCwgZmFJb3hob3N0LCBmYUZvbnRpY29uc0ZpLCBmYUFwcFN0b3JlLCBmYUNjTWFzdGVyY2FyZCwgZmFJdHVuZXNOb3RlLCBmYUdvbGFuZywgZmFLaWNrc3RhcnRlciwgZmFTcXVhcmVLaWNrc3RhcnRlciwgZmFHcmF2LCBmYVdlaWJvLCBmYVVuY2hhcnRlZCwgZmFGaXJzdGRyYWZ0LCBmYVNxdWFyZVlvdXR1YmUsIGZhWW91dHViZVNxdWFyZSwgZmFXaWtpcGVkaWFXLCBmYVdwcmVzc3IsIGZhUmVuZGFjdCwgZmFBbmdlbGxpc3QsIGZhR2FsYWN0aWNSZXB1YmxpYywgZmFOZmNEaXJlY3Rpb25hbCwgZmFTa3lwZSwgZmFKb2dldCwgZmFGZWRvcmEsIGZhU3RyaXBlUywgZmFNZXRhLCBmYUxhcmF2ZWwsIGZhSG90amFyLCBmYUJsdWV0b290aEIsIGZhU3F1YXJlTGV0dGVyYm94ZCwgZmFTdGlja2VyTXVsZSwgZmFDcmVhdGl2ZUNvbW1vbnNaZXJvLCBmYUhpcHMsIGZhQmVoYW5jZSwgZmFSZWRkaXQsIGZhRGlzY29yZCwgZmFDaHJvbWUsIGZhQXBwU3RvcmVJb3MsIGZhQ2NEaXNjb3ZlciwgZmFXcGJlZ2lubmVyLCBmYUNvbmZsdWVuY2UsIGZhU2hvZWxhY2UsIGZhTWRiLCBmYURvY2h1YiwgZmFBY2Nlc3NpYmxlSWNvbiwgZmFFYmF5LCBmYUFtYXpvbiwgZmFVbnNwbGFzaCwgZmFZYXJuLCBmYVNxdWFyZVN0ZWFtLCBmYVN0ZWFtU3F1YXJlLCBmYTUwMHB4LCBmYVNxdWFyZVZpbWVvLCBmYVZpbWVvU3F1YXJlLCBmYUFzeW1tZXRyaWssIGZhRm9udEF3ZXNvbWUsIGZhRm9udEF3ZXNvbWVGbGFnLCBmYUZvbnRBd2Vzb21lTG9nb0Z1bGwsIGZhR3JhdGlwYXksIGZhQXBwbGUsIGZhSGl2ZSwgZmFHaXRrcmFrZW4sIGZhS2V5YmFzZSwgZmFBcHBsZVBheSwgZmFQYWRsZXQsIGZhQW1hem9uUGF5LCBmYVNxdWFyZUdpdGh1YiwgZmFHaXRodWJTcXVhcmUsIGZhU3R1bWJsZXVwb24sIGZhRmVkZXgsIGZhUGhvZW5peEZyYW1ld29yaywgZmFTaG9waWZ5LCBmYU5lb3MsIGZhU3F1YXJlVGhyZWFkcywgZmFIYWNrZXJyYW5rLCBmYVJlc2VhcmNoZ2F0ZSwgZmFTd2lmdCwgZmFBbmd1bGFyLCBmYVNwZWFrYXAsIGZhQW5ncnljcmVhdGl2ZSwgZmFZQ29tYmluYXRvciwgZmFFbXBpcmUsIGZhRW52aXJhLCBmYUdvb2dsZVNjaG9sYXIsIGZhU3F1YXJlR2l0bGFiLCBmYUdpdGxhYlNxdWFyZSwgZmFTdHVkaW92aW5hcmksIGZhUGllZFBpcGVyLCBmYVdvcmRwcmVzcywgZmFQcm9kdWN0SHVudCwgZmFGaXJlZm94LCBmYUxpbm9kZSwgZmFHb29kcmVhZHMsIGZhU3F1YXJlT2Rub2tsYXNzbmlraSwgZmFPZG5va2xhc3NuaWtpU3F1YXJlLCBmYUpzZmlkZGxlLCBmYVNpdGgsIGZhVGhlbWVpc2xlLCBmYVBhZ2U0LCBmYUhhc2hub2RlLCBmYVJlYWN0LCBmYUNjUGF5cGFsLCBmYVNxdWFyZXNwYWNlLCBmYUNjU3RyaXBlLCBmYUNyZWF0aXZlQ29tbW9uc1NoYXJlLCBmYUJpdGNvaW4sIGZhS2V5Y2RuLCBmYU9wZXJhLCBmYUl0Y2hJbywgZmFVbWJyYWNvLCBmYUdhbGFjdGljU2VuYXRlLCBmYVVidW50dSwgZmFEcmFmdDJkaWdpdGFsLCBmYVN0cmlwZSwgZmFIb3V6eiwgZmFHZywgZmFEaGwsIGZhU3F1YXJlUGludGVyZXN0LCBmYVBpbnRlcmVzdFNxdWFyZSwgZmFYaW5nLCBmYUJsYWNrYmVycnksIGZhQ3JlYXRpdmVDb21tb25zUGQsIGZhUGxheXN0YXRpb24sIGZhUXVpbnNjYXBlLCBmYUxlc3MsIGZhQmxvZ2dlckIsIGZhT3BlbmNhcnQsIGZhVmluZSwgZmFTaWduYWxNZXNzZW5nZXIsIGZhUGF5cGFsLCBmYUdpdGxhYiwgZmFUeXBvMywgZmFSZWRkaXRBbGllbiwgZmFZYWhvbywgZmFEYWlseW1vdGlvbiwgZmFBZmZpbGlhdGV0aGVtZSwgZmFQaWVkUGlwZXJQcCwgZmFCb290c3RyYXAsIGZhT2Rub2tsYXNzbmlraSwgZmFOZmNTeW1ib2wsIGZhTWludGJpdCwgZmFFdGhlcmV1bSwgZmFTcGVha2VyRGVjaywgZmFDcmVhdGl2ZUNvbW1vbnNOY0V1LCBmYVBhdHJlb24sIGZhQXZpYW5leCwgZmFFbGxvLCBmYUdvZm9yZSwgZmFCaW1vYmplY3QsIGZhQnJhdmVSZXZlcnNlLCBmYUZhY2Vib29rRiwgZmFTcXVhcmVHb29nbGVQbHVzLCBmYUdvb2dsZVBsdXNTcXVhcmUsIGZhV2ViQXdlc29tZSwgZmFNYW5kYWxvcmlhbiwgZmFGaXJzdE9yZGVyQWx0LCBmYU9zaSwgZmFHb29nbGVXYWxsZXQsIGZhREFuZERCZXlvbmQsIGZhUGVyaXNjb3BlLCBmYUZ1bGNydW0sIGZhQ2xvdWRzY2FsZSwgZmFGb3J1bWJlZSwgZmFNaXp1bmksIGZhU2NobGl4LCBmYVNxdWFyZVhpbmcsIGZhWGluZ1NxdWFyZSwgZmFCYW5kY2FtcCwgZmFXcGZvcm1zLCBmYUNsb3VkdmVyc2lmeSwgZmFVc3BzLCBmYU1lZ2Fwb3J0LCBmYU1hZ2VudG8sIGZhU3BvdGlmeSwgZmFPcHRpbk1vbnN0ZXIsIGZhRmx5LCBmYUF2aWF0bywgZmFJdHVuZXMsIGZhQ3V0dGxlZmlzaCwgZmFCbG9nZ2VyLCBmYUZsaWNrciwgZmFWaWJlciwgZmFTb3VuZGNsb3VkLCBmYURpZ2csIGZhVGVuY2VudFdlaWJvLCBmYUxldHRlcmJveGQsIGZhU3ltZm9ueSwgZmFNYXhjZG4sIGZhRXRzeSwgZmFGYWNlYm9va01lc3NlbmdlciwgZmFBdWRpYmxlLCBmYVRoaW5rUGVha3MsIGZhQmlsaWJpbGksIGZhRXJsYW5nLCBmYVhUd2l0dGVyLCBmYUNvdHRvbkJ1cmVhdSwgZmFEYXNoY3ViZSwgZmE0Mkdyb3VwLCBmYUlubm9zb2Z0LCBmYVN0YWNrRXhjaGFuZ2UsIGZhRWxlbWVudG9yLCBmYVNxdWFyZVBpZWRQaXBlciwgZmFQaWVkUGlwZXJTcXVhcmUsIGZhQ3JlYXRpdmVDb21tb25zTmQsIGZhUGFsZmVkLCBmYVN1cGVycG93ZXJzLCBmYVJlc29sdmluZywgZmFYYm94LCBmYVNxdWFyZVdlYkF3ZXNvbWVTdHJva2UsIGZhU2VhcmNoZW5naW4sIGZhVGlrdG9rLCBmYVNxdWFyZUZhY2Vib29rLCBmYUZhY2Vib29rU3F1YXJlLCBmYVJlbnJlbiwgZmFMaW51eCwgZmFHbGlkZSwgZmFMaW5rZWRpbiwgZmFIdWJzcG90LCBmYURlcGxveWRvZywgZmFUd2l0Y2gsIGZhUmF2ZWxyeSwgZmFNaXhlciwgZmFTcXVhcmVMYXN0Zm0sIGZhTGFzdGZtU3F1YXJlLCBmYVZpbWVvLCBmYU1lbmRlbGV5LCBmYVVuaXJlZ2lzdHJ5LCBmYUZpZ21hLCBmYUNyZWF0aXZlQ29tbW9uc1JlbWl4LCBmYUNjQW1hem9uUGF5LCBmYURyb3Bib3gsIGZhSW5zdGFncmFtLCBmYUNtcGxpZCwgZmFVcHdvcmssIGZhRmFjZWJvb2ssIGZhR3JpcGZpcmUsIGZhSmVkaU9yZGVyLCBmYVVpa2l0LCBmYUZvcnRBd2Vzb21lQWx0LCBmYVBoYWJyaWNhdG9yLCBmYVVzc3VubmFoLCBmYUVhcmx5YmlyZHMsIGZhVHJhZGVGZWRlcmF0aW9uLCBmYUF1dG9wcmVmaXhlciwgZmFXaGF0c2FwcCwgZmFTcXVhcmVVcHdvcmssIGZhU2xpZGVzaGFyZSwgZmFHb29nbGVQbGF5LCBmYVZpYWRlbywgZmFMaW5lLCBmYUdvb2dsZURyaXZlLCBmYVNlcnZpY2VzdGFjaywgZmFTaW1wbHlidWlsdCwgZmFCaXRidWNrZXQsIGZhSW1kYiwgZmFEZWV6ZXIsIGZhUmFzcGJlcnJ5UGksIGZhSmlyYSwgZmFEb2NrZXIsIGZhU2NyZWVucGFsLCBmYUJsdWV0b290aCwgZmFHaXR0ZXIsIGZhREFuZEQsIGZhTWljcm9ibG9nLCBmYUNjRGluZXJzQ2x1YiwgZmFHZ0NpcmNsZSwgZmFQaWVkUGlwZXJIYXQsIGZhS2lja3N0YXJ0ZXJLLCBmYVlhbmRleCwgZmFSZWFkbWUsIGZhSHRtbDUsIGZhU2VsbHN5LCBmYVNxdWFyZVdlYkF3ZXNvbWUsIGZhU2FzcywgZmFXaXJzaW5kaGFuZHdlcmssIGZhV3NoLCBmYUJ1cm9tb2JlbGV4cGVydGUsIGZhU2FsZXNmb3JjZSwgZmFPY3RvcHVzRGVwbG95LCBmYU1lZGFwcHMsIGZhTnM4LCBmYVBpbnRlcmVzdFAsIGZhQXBwZXIsIGZhRm9ydEF3ZXNvbWUsIGZhV2F6ZSwgZmFCbHVlc2t5LCBmYUNjSmNiLCBmYVNuYXBjaGF0LCBmYVNuYXBjaGF0R2hvc3QsIGZhRmFudGFzeUZsaWdodEdhbWVzLCBmYVJ1c3QsIGZhV2l4LCBmYVNxdWFyZUJlaGFuY2UsIGZhQmVoYW5jZVNxdWFyZSwgZmFTdXBwbGUsIGZhV2ViZmxvdywgZmFSZWJlbCwgZmFDc3MzLCBmYVN0YXlsaW5rZWQsIGZhS2FnZ2xlLCBmYVNwYWNlQXdlc29tZSwgZmFEZXZpYW50YXJ0LCBmYUNwYW5lbCwgZmFHb29kcmVhZHNHLCBmYVNxdWFyZUdpdCwgZmFHaXRTcXVhcmUsIGZhU3F1YXJlVHVtYmxyLCBmYVR1bWJsclNxdWFyZSwgZmFUcmVsbG8sIGZhQ3JlYXRpdmVDb21tb25zTmNKcCwgZmFHZXRQb2NrZXQsIGZhUGVyYnl0ZSwgZmFHcnVudCwgZmFXZWVibHksIGZhQ29ubmVjdGRldmVsb3AsIGZhTGVhbnB1YiwgZmFCbGFja1RpZSwgZmFUaGVtZWNvLCBmYVB5dGhvbiwgZmFBbmRyb2lkLCBmYUJvdHMsIGZhRnJlZUNvZGVDYW1wLCBmYUhvcm5iaWxsLCBmYUpzLCBmYUlkZWFsLCBmYUdpdCwgZmFEZXYsIGZhU2tldGNoLCBmYVlhbmRleEludGVybmF0aW9uYWwsIGZhQ2NBbWV4LCBmYVViZXIsIGZhR2l0aHViLCBmYVBocCwgZmFBbGlwYXksIGZhWW91dHViZSwgZmFTa3lhdGxhcywgZmFGaXJlZm94QnJvd3NlciwgZmFSZXBseWQsIGZhU3VzZSwgZmFKZW5raW5zLCBmYVR3aXR0ZXIsIGZhUm9ja3JtcywgZmFQaW50ZXJlc3QsIGZhQnVmZmVyLCBmYU5wbSwgZmFZYW1tZXIsIGZhQnRjLCBmYURyaWJiYmxlLCBmYVN0dW1ibGV1cG9uQ2lyY2xlLCBmYUludGVybmV0RXhwbG9yZXIsIGZhU3R1YmJlciwgZmFUZWxlZ3JhbSwgZmFUZWxlZ3JhbVBsYW5lLCBmYU9sZFJlcHVibGljLCBmYU9keXNlZSwgZmFTcXVhcmVXaGF0c2FwcCwgZmFXaGF0c2FwcFNxdWFyZSwgZmFOb2RlSnMsIGZhRWRnZUxlZ2FjeSwgZmFTbGFjaywgZmFTbGFja0hhc2gsIGZhTWVkcnQsIGZhVXNiLCBmYVR1bWJsciwgZmFWYWFkaW4sIGZhUXVvcmEsIGZhU3F1YXJlWFR3aXR0ZXIsIGZhUmVhY3RldXJvcGUsIGZhTWVkaXVtLCBmYU1lZGl1bU0sIGZhQW1pbGlhLCBmYU1peGNsb3VkLCBmYUZsaXBib2FyZCwgZmFWaWFjb2luLCBmYUNyaXRpY2FsUm9sZSwgZmFTaXRyb3gsIGZhRGlzY291cnNlLCBmYUpvb21sYSwgZmFNYXN0b2RvbiwgZmFBaXJibmIsIGZhV29sZlBhY2tCYXR0YWxpb24sIGZhQnV5TkxhcmdlLCBmYUd1bHAsIGZhQ3JlYXRpdmVDb21tb25zU2FtcGxpbmdQbHVzLCBmYVN0cmF2YSwgZmFFbWJlciwgZmFDYW5hZGlhbk1hcGxlTGVhZiwgZmFUZWFtc3BlYWssIGZhUHVzaGVkLCBmYVdvcmRwcmVzc1NpbXBsZSwgZmFOdXRyaXRpb25peCwgZmFXb2R1LCBmYUdvb2dsZVBheSwgZmFJbnRlcmNvbSwgZmFaaGlodSwgZmFLb3J2dWUsIGZhUGl4LCBmYVN0ZWFtU3ltYm9sIH07XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIHNldEN1c3RvbUZvbnRTaXplKGVsZW1lbnQsIHNpemUpIHtcbiAgICBpZiAoc2l6ZSAmJiBzaXplICE9PSBcImxnXCIgJiYgc2l6ZSAhPT0gXCJzbVwiICYmIHNpemUgIT09IFwieHNcIikge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRTaXplID0gc2l6ZS5yZXBsYWNlKFwieFwiLCBcImVtXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IFwiXCI7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybShzY2FsZSwgdHJhbnNsYXRlWCwgdHJhbnNsYXRlWSwgcm90YXRlLCBmbGlwLCB0cmFuc2xhdGVUaW1lcyA9IDEsIHRyYW5zbGF0ZVVuaXQgPSBcIlwiLCByb3RhdGVVbml0ID0gXCJcIikge1xuICAgIGxldCBmbGlwWCA9IDE7XG4gICAgbGV0IGZsaXBZID0gMTtcbiAgICBpZiAoZmxpcCkge1xuICAgICAgICBpZiAoZmxpcCA9PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgZmxpcFggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmbGlwID09IFwidmVydGljYWxcIikge1xuICAgICAgICAgICAgZmxpcFkgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZsaXBYID0gZmxpcFkgPSAtMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjYWxlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNjYWxlID0gcGFyc2VGbG9hdChzY2FsZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlWCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0cmFuc2xhdGVYID0gcGFyc2VGbG9hdCh0cmFuc2xhdGVYKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0cmFuc2xhdGVZID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSBwYXJzZUZsb2F0KHRyYW5zbGF0ZVkpO1xuICAgIH1cbiAgICBjb25zdCB4ID0gYCR7dHJhbnNsYXRlWCAqIHRyYW5zbGF0ZVRpbWVzfSR7dHJhbnNsYXRlVW5pdH1gO1xuICAgIGNvbnN0IHkgPSBgJHt0cmFuc2xhdGVZICogdHJhbnNsYXRlVGltZXN9JHt0cmFuc2xhdGVVbml0fWA7XG4gICAgbGV0IG91dHB1dCA9IGB0cmFuc2xhdGUoJHt4fSwke3l9KSBzY2FsZSgke2ZsaXBYICogc2NhbGV9LCR7ZmxpcFkgKiBzY2FsZX0pYDtcbiAgICBpZiAocm90YXRlKSB7XG4gICAgICAgIG91dHB1dCArPSBgIHJvdGF0ZSgke3JvdGF0ZX0ke3JvdGF0ZVVuaXR9KWA7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCAiPHNjcmlwdD5pbXBvcnQgeyBnZXRUcmFuc2Zvcm0sIHNldEN1c3RvbUZvbnRTaXplIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmxldCBjbGF6eiA9IHZvaWQgMDtcbmV4cG9ydCB7IGNsYXp6IGFzIGNsYXNzIH07XG5leHBvcnQgbGV0IGlkID0gdm9pZCAwO1xuZXhwb3J0IGxldCBzdHlsZSA9IHZvaWQgMDtcbmV4cG9ydCBsZXQgaWNvbjtcbmV4cG9ydCBsZXQgc2l6ZSA9IHZvaWQgMDtcbmV4cG9ydCBsZXQgY29sb3IgPSB2b2lkIDA7XG5leHBvcnQgbGV0IGZ3ID0gZmFsc2U7XG5leHBvcnQgbGV0IHB1bGwgPSB2b2lkIDA7XG5leHBvcnQgbGV0IHNjYWxlID0gMTtcbmV4cG9ydCBsZXQgdHJhbnNsYXRlWCA9IDA7XG5leHBvcnQgbGV0IHRyYW5zbGF0ZVkgPSAwO1xuZXhwb3J0IGxldCByb3RhdGUgPSB2b2lkIDA7XG5leHBvcnQgbGV0IGZsaXAgPSB2b2lkIDA7XG5leHBvcnQgbGV0IHNwaW4gPSBmYWxzZTtcbmV4cG9ydCBsZXQgcHVsc2UgPSBmYWxzZTtcbmV4cG9ydCBsZXQgcHJpbWFyeUNvbG9yID0gXCJcIjtcbmV4cG9ydCBsZXQgc2Vjb25kYXJ5Q29sb3IgPSBcIlwiO1xuZXhwb3J0IGxldCBwcmltYXJ5T3BhY2l0eSA9IDE7XG5leHBvcnQgbGV0IHNlY29uZGFyeU9wYWNpdHkgPSAwLjQ7XG5leHBvcnQgbGV0IHN3YXBPcGFjaXR5ID0gZmFsc2U7XG5sZXQgc3ZnRWxlbWVudDtcbiQ6XG4gIHN2Z0VsZW1lbnQgJiYgc2l6ZSAmJiBzZXRDdXN0b21Gb250U2l6ZShzdmdFbGVtZW50LCBzaXplKTtcbiQ6XG4gIGkgPSBpY29uICYmIGljb24uaWNvbiB8fCBbMCwgMCwgXCJcIiwgW10sIFwiXCJdO1xuJDpcbiAgdHJhbnNmb3JtID0gZ2V0VHJhbnNmb3JtKHNjYWxlLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZLCByb3RhdGUsIGZsaXAsIDUxMik7XG48L3NjcmlwdD5cblxueyNpZiBpWzRdfVxuICA8IS0tIGVzbGludC1kaXNhYmxlIHN2ZWx0ZS9uby1pbmxpbmUtc3R5bGVzIC0tIE9ubHkgc3R5bGVzIHBhc3NlZCB0byB0aGlzIGNvbXBvbmVudCBzaG91bGQgYmUgaW5jbHVkZWQgLS0+XG4gIDxzdmdcbiAgICB7aWR9XG4gICAgY2xhc3M9XCJzdmVsdGUtZmEgc3ZlbHRlLWZhLWJhc2Uge2NsYXp6fVwiXG4gICAgY2xhc3M6cHVsc2VcbiAgICBjbGFzczpzdmVsdGUtZmEtc2l6ZS1sZz17c2l6ZSA9PT0gXCJsZ1wifVxuICAgIGNsYXNzOnN2ZWx0ZS1mYS1zaXplLXNtPXtzaXplID09PSBcInNtXCJ9XG4gICAgY2xhc3M6c3ZlbHRlLWZhLXNpemUteHM9e3NpemUgPT09IFwieHNcIn1cbiAgICBjbGFzczpzdmVsdGUtZmEtZnc9e2Z3fVxuICAgIGNsYXNzOnN2ZWx0ZS1mYS1wdWxsLWxlZnQ9e3B1bGwgPT09IFwibGVmdFwifVxuICAgIGNsYXNzOnN2ZWx0ZS1mYS1wdWxsLXJpZ2h0PXtwdWxsID09PSBcInJpZ2h0XCJ9XG4gICAgY2xhc3M6c3BpblxuICAgIGJpbmQ6dGhpcz17c3ZnRWxlbWVudH1cbiAgICB7c3R5bGV9XG4gICAgdmlld0JveD1cIjAgMCB7aVswXX0ge2lbMV19XCJcbiAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgIHJvbGU9XCJpbWdcIlxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICA+XG4gICAgPCEtLSBlc2xpbnQtZW5hYmxlIC0tPlxuICAgIDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7aVswXSAvIDJ9IHtpWzFdIC8gMn0pXCIgdHJhbnNmb3JtLW9yaWdpbj1cIntpWzBdIC8gNH0gMFwiPlxuICAgICAgPGcge3RyYW5zZm9ybX0+XG4gICAgICAgIHsjaWYgdHlwZW9mIGlbNF0gPT0gXCJzdHJpbmdcIn1cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZD17aVs0XX1cbiAgICAgICAgICAgIGZpbGw9e2NvbG9yIHx8IHByaW1hcnlDb2xvciB8fCBcImN1cnJlbnRDb2xvclwifVxuICAgICAgICAgICAgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHtpWzBdIC8gLTJ9IHtpWzFdIC8gLTJ9KVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgIDwhLS0gRHVvdG9uZSBpY29ucyAtLT5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZD17aVs0XVswXX1cbiAgICAgICAgICAgIGZpbGw9e3NlY29uZGFyeUNvbG9yIHx8IGNvbG9yIHx8IFwiY3VycmVudENvbG9yXCJ9XG4gICAgICAgICAgICBmaWxsLW9wYWNpdHk9e3N3YXBPcGFjaXR5ICE9IGZhbHNlID8gcHJpbWFyeU9wYWNpdHkgOiBzZWNvbmRhcnlPcGFjaXR5fVxuICAgICAgICAgICAgdHJhbnNmb3JtPVwidHJhbnNsYXRlKHtpWzBdIC8gLTJ9IHtpWzFdIC8gLTJ9KVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZD17aVs0XVsxXX1cbiAgICAgICAgICAgIGZpbGw9e3ByaW1hcnlDb2xvciB8fCBjb2xvciB8fCBcImN1cnJlbnRDb2xvclwifVxuICAgICAgICAgICAgZmlsbC1vcGFjaXR5PXtzd2FwT3BhY2l0eSAhPSBmYWxzZSA/IHNlY29uZGFyeU9wYWNpdHkgOiBwcmltYXJ5T3BhY2l0eX1cbiAgICAgICAgICAgIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSh7aVswXSAvIC0yfSB7aVsxXSAvIC0yfSlcIlxuICAgICAgICAgIC8+XG4gICAgICAgIHsvaWZ9XG4gICAgICA8L2c+XG4gICAgPC9nPlxuICA8L3N2Zz5cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgOmdsb2JhbCguc3ZlbHRlLWZhLWJhc2UpIHtcbiAgICBoZWlnaHQ6IDFlbTtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG4gICAgdmVydGljYWwtYWxpZ246IC0wLjEyNWVtO1xuICB9XG5cbiAgOmdsb2JhbCguc3ZlbHRlLWZhLWZ3KSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAxLjI1ZW07XG4gIH1cblxuICAuc3ZlbHRlLWZhLXB1bGwtbGVmdCB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gIH1cblxuICAuc3ZlbHRlLWZhLXB1bGwtcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgfVxuXG4gIC5zdmVsdGUtZmEtc2l6ZS1sZyB7XG4gICAgZm9udC1zaXplOiAxLjMzMzMzZW07XG4gICAgbGluZS1oZWlnaHQ6IDAuNzVlbTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogLTAuMjI1ZW07XG4gIH1cblxuICAuc3ZlbHRlLWZhLXNpemUtc20ge1xuICAgIGZvbnQtc2l6ZTogMC44NzVlbTtcbiAgfVxuXG4gIC5zdmVsdGUtZmEtc2l6ZS14cyB7XG4gICAgZm9udC1zaXplOiAwLjc1ZW07XG4gIH1cblxuICAuc3BpbiB7XG4gICAgYW5pbWF0aW9uOiBzcGluIDJzIDBzIGluZmluaXRlIGxpbmVhcjtcbiAgfVxuXG4gIC5wdWxzZSB7XG4gICAgYW5pbWF0aW9uOiBzcGluIDFzIGluZmluaXRlIHN0ZXBzKDgpO1xuICB9XG5cbiAgQGtleWZyYW1lcyBzcGluIHtcbiAgICAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgRmEgZnJvbSBcIi4vZmEuc3ZlbHRlXCI7XG5pbXBvcnQgRmFMYXllcnMgZnJvbSBcIi4vZmEtbGF5ZXJzLnN2ZWx0ZVwiO1xuaW1wb3J0IEZhTGF5ZXJzVGV4dCBmcm9tIFwiLi9mYS1sYXllcnMtdGV4dC5zdmVsdGVcIjtcbmV4cG9ydCBkZWZhdWx0IEZhO1xuZXhwb3J0IHsgRmEsIEZhTGF5ZXJzLCBGYUxheWVyc1RleHQgfTtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgZXhwb3J0IGxldCBocmVmOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgZXh0ZXJuYWwgPSBmYWxzZTtcbjwvc2NyaXB0PlxuXG48YVxuICB7aHJlZn1cbiAgdGFyZ2V0PXtleHRlcm5hbCA/IFwiX2JsYW5rXCIgOiB1bmRlZmluZWR9XG4gIHJlbD17ZXh0ZXJuYWwgPyBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiA6IHVuZGVmaW5lZH1cbiAgY2xhc3M9XCJcbiAgICBmb250LXNlbWlib2xkIHVuZGVybGluZSB1bmRlcmxpbmUtb2Zmc2V0LTQgaG92ZXI6bm8tdW5kZXJsaW5lIHJvdW5kZWRcbiAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgXCJcbj5cbiAgPHNsb3QgLz5cbjwvYT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmYUdpdGh1YiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zXCI7XG4gIGltcG9ydCBGYSBmcm9tIFwic3ZlbHRlLWZhXCI7XG5cbiAgaW1wb3J0IExpbmsgZnJvbSBcIi4vTGluay5zdmVsdGVcIjtcblxuICBpbXBvcnQgeyBMaXZlIH0gZnJvbSBcImxpdmVfc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBsaXZlOiBMaXZlID0gdW5kZWZpbmVkO1xuICBsaXZlO1xuXG4gIGV4cG9ydCBsZXQgc2hvd0F1dGhMaW5rcyA9IGZhbHNlO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJtYXgtdy1tZCBteC1hdXRvIHB4LTQgbWQ6cC0wXCI+XG4gIDxoMSBjbGFzcz1cInRleHQtNXhsIGZvbnQtYmxhY2sgbXktNVwiPkxvY2FsLUZpcnN0IExpdmVWaWV3IFN2ZWx0ZSBUb0RvIEFwcDwvaDE+XG5cbiAgPHA+XG4gICAgVGhpcyB0by1kbyBhcHAgaXMgYSBkZW1vIG9mIGFuIGluc3RhbGxhYmxlXG4gICAgPExpbmsgaHJlZj1cImh0dHBzOi8vd3d3LnBob2VuaXhmcmFtZXdvcmsub3JnL1wiIGV4dGVybmFsPlBob2VuaXg8L0xpbms+XG4gICAgUHJvZ3Jlc3NpdmUgV2ViIEFwcCAoPExpbmtcbiAgICAgIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9Qcm9ncmVzc2l2ZV93ZWJfYXBwc1wiXG4gICAgICBleHRlcm5hbFxuICAgID5cbiAgICAgIFBXQTwvTGlua1xuICAgID4pIHRoYXQgY2FuIHN5bmMgcmVhbC10aW1lIGFjcm9zcyBtdWx0aXBsZSBkZXZpY2VzIHdoaWxlIGFsc28gYmVpbmcgYWJsZSB0byB3b3JrIGxvY2FsbHlcbiAgICBvZmZsaW5lLlxuICA8L3A+XG5cbiAgPGgyIGNsYXNzPVwidGV4dC0zeGwgZm9udC1ib2xkIG15LTNcIj5WaWRlbyBXYWxrdGhyb3VnaDwvaDI+XG5cbiAgPGlmcmFtZVxuICAgIGNsYXNzPVwidy1mdWxsIGFzcGVjdC12aWRlbyBteS02XCJcbiAgICBzcmM9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9QWDktbHEwTEw5UT9zaT14ZGQzaW5UQzcyT3ZWVjBHXCJcbiAgICB0aXRsZT1cIllvdVR1YmUgdmlkZW8gcGxheWVyXCJcbiAgICBmcmFtZWJvcmRlcj1cIjBcIlxuICAgIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZTsgd2ViLXNoYXJlXCJcbiAgICBhbGxvd2Z1bGxzY3JlZW5cbiAgPjwvaWZyYW1lPlxuXG4gIHsjaWYgc2hvd0F1dGhMaW5rc31cbiAgICA8aDIgY2xhc3M9XCJ0ZXh0LTN4bCBmb250LWJvbGQgbXktM1wiPlRyeSBpdCBvdXQ8L2gyPlxuXG4gICAgPHVsIGNsYXNzPVwiZmxleCBnYXAtMlwiPlxuICAgICAgPGxpPlxuICAgICAgICA8YSBocmVmPXtcIi91c2Vycy9yZWdpc3RlclwifSBjbGFzcz1cImJ0biBidG4tYWNjZW50IGJvcmRlciBib3JkZXItbmV1dHJhbFwiPlJlZ2lzdGVyPC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGEgaHJlZj17XCIvdXNlcnMvbG9nX2luXCJ9IGNsYXNzPVwiYnRuIGJ0bi1hY2NlbnQgYm9yZGVyIGJvcmRlci1uZXV0cmFsXCI+TG9nIGluPC9hPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICB7L2lmfVxuXG4gIDxkaXYgY2xhc3M9XCJteS02XCI+XG4gICAgPGgyIGNsYXNzPVwidGV4dC0zeGwgZm9udC1ib2xkIG15LTNcIj5UZWNobm9sb2dpZXMgdXNlZDwvaDI+XG5cbiAgICA8dWwgY2xhc3M9XCJsaXN0LWRpc2MgcGwtNFwiPlxuICAgICAgPGxpPlxuICAgICAgICBQaG9lbml4XG4gICAgICAgIDxMaW5rIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4X2xpdmVfdmlld1wiIGV4dGVybmFsPkxpdmVWaWV3PC9MaW5rPixcbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vaGV4ZG9jcy5wbS9waG9lbml4L2NoYW5uZWxzLmh0bWwjcHVic3ViXCIgZXh0ZXJuYWw+UHViU3ViPC9MaW5rPiwgYW5kXG4gICAgICAgIDxMaW5rIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vZWxpeGlyLWVjdG8vZWN0by90cmVlL3YzLjExLjFcIiBleHRlcm5hbD5FY3RvPC9MaW5rPi88TGlua1xuICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9cIlxuICAgICAgICAgIGV4dGVybmFsXG4gICAgICAgID5cbiAgICAgICAgICBQb3N0Z3JlU1FMXG4gICAgICAgIDwvTGluaz4gZm9yIHJlYWwtdGltZSBzeW5jaW5nIGFuZCBkYXRhIHBlcnNpc3RlbmNlLlxuICAgICAgPC9saT5cblxuICAgICAgPGxpPlxuICAgICAgICA8TGluayBocmVmPVwiaHR0cHM6Ly9zdmVsdGUuZGV2L1wiIGV4dGVybmFsPlN2ZWx0ZTwvTGluaz5cbiAgICAgICAgKHZpYSA8TGluayBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3dvdXRkcC9saXZlX3N2ZWx0ZVwiIGV4dGVybmFsPmxpdmVfc3ZlbHRlPC9MaW5rPikgZm9yIHRoZVxuICAgICAgICBmcm9udGVuZCBVSSBhbmQgc3RhdGUgbWFuYWdlbWVudC5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaT5cbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2aWNlX1dvcmtlcl9BUElcIiBleHRlcm5hbFxuICAgICAgICAgID5TZXJ2aWNlIFdvcmtlcnM8L0xpbmtcbiAgICAgICAgPixcbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfU3RvcmFnZV9BUElcIiBleHRlcm5hbD5cbiAgICAgICAgICBXZWIgU3RvcmFnZTwvTGlua1xuICAgICAgICA+LCBhbmRcbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbmRleGVkREJfQVBJXCIgZXh0ZXJuYWw+XG4gICAgICAgICAgSW5kZXhlZERCXG4gICAgICAgIDwvTGluaz5cbiAgICAgICAgKHZpYSA8TGluayBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3lqcy95LWluZGV4ZWRkYlwiIGV4dGVybmFsPnktaW5kZXhlZGRiPC9MaW5rPikgZm9yXG4gICAgICAgIG9mZmxpbmUgc3VwcG9ydC5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaT5cbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vY3JkdC50ZWNoL1wiIGV4dGVybmFsPkNSRFRzPC9MaW5rPlxuICAgICAgICAodmlhIDxMaW5rIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20veWpzL3lqc1wiIGV4dGVybmFsPllqczwvTGluaz4pIHRvIHJlc29sdmUgY29uZmxpY3RzXG4gICAgICAgIGJldHdlZW4gZGlzdHJpYnV0ZWQgYXBwIHN0YXRlcy5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cIm15LTZcIj5cbiAgICA8aDIgY2xhc3M9XCJ0ZXh0LTN4bCBmb250LWJvbGQgbXktM1wiPkluc3BpcmVkIGJ5PC9oMj5cblxuICAgIDx1bCBjbGFzcz1cImxpc3QtZGlzYyBwbC00XCI+XG4gICAgICA8bGk+XG4gICAgICAgIFdvdXQgRGUgUHV5c3NlbGVpciAtXG4gICAgICAgIDxMaW5rIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUpNa3ZiVzM1UXZBXCIgZXh0ZXJuYWw+XG4gICAgICAgICAgTGl2ZVN2ZWx0ZSAtIFJlbmRlciBTdmVsdGUgZGlyZWN0bHkgaW50byBQaG9lbml4IExpdmVWaWV3IHdpdGggRTJFIHJlYWN0aXZpdHkuXG4gICAgICAgIDwvTGluaz5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaT5cbiAgICAgICAgUnlhbiBDb29rZSAtXG4gICAgICAgIDxMaW5rIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWFzbTJUVG0wMzVvXCIgZXh0ZXJuYWw+XG4gICAgICAgICAgRTJFIFJlYWN0aXZpdHkgLSB1c2luZyBTdmVsdGUgd2l0aCBQaG9lbml4IExpdmVWaWV3XG4gICAgICAgIDwvTGluaz5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaT5cbiAgICAgICAgRGFuaWlscyBQZXRyb3ZzIC1cbiAgICAgICAgPExpbmsgaHJlZj1cImh0dHBzOi8vc3BlYWtlcmRlY2suY29tL2RhbmlydWt1bi9zdmVsdGUtaG9sb2xpdmUtZmFuLWJvb3RoLXByb2plY3RcIiBleHRlcm5hbD5cbiAgICAgICAgICBTdmVsdGVLaXQ6IEZyb20gbGFuZGluZyBwYWdlIHRvIG9mZmxpbmUgUFdBc1xuICAgICAgICA8L0xpbms+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJteS02XCI+XG4gICAgPGgyIGNsYXNzPVwidGV4dC0zeGwgZm9udC1ib2xkIG15LTNcIj5Db250YWN0PC9oMj5cblxuICAgIENyZWF0ZWQgYnlcbiAgICA8TGluayBocmVmPVwiaHR0cHM6Ly90b255ZGFuZy5ibG9nXCIgZXh0ZXJuYWw+VG9ueSBEYW5nPC9MaW5rPi4gUGxlYXNlIGZlZWwgZnJlZSBzZW5kIGFueVxuICAgIHF1ZXN0aW9ucyBvciBmZWVkYmFjayB0b1xuICAgIDxMaW5rIGhyZWY9XCJtYWlsdG86dG9ueUB0b255ZGFuZy5ibG9nXCIgZXh0ZXJuYWw+dG9ueUB0b255ZGFuZy5ibG9nPC9MaW5rPi5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cIm15LTZcIj5cbiAgICA8aDIgY2xhc3M9XCJ0ZXh0LTN4bCBmb250LWJvbGQgbXktM1wiPlNvdXJjZSBDb2RlPC9oMj5cbiAgICA8YVxuICAgICAgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS90b255ZGFuZ2Jsb2cvbGl2ZXZpZXctc3ZlbHRlLXB3YVwiXG4gICAgICBhcmlhLWxhYmVsPVwiR2l0aHViXCJcbiAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgIGNsYXNzPVwiXG4gICAgICAgIGlubGluZS1ibG9jayBob3ZlcjpvcGFjaXR5LTc1IHJvdW5kZWQtbGdcbiAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICBcIlxuICAgID5cbiAgICAgIDxGYSBpY29uPXtmYUdpdGh1Yn0gc2l6ZT1cIjN4XCIgLz5cbiAgICA8L2E+XG4gIDwvZGl2PlxuPC9kaXY+XG4iLCAiPGRpdiBjbGFzcz1cInctc2NyZWVuIGgtc2NyZWVuIG1heC13LTJ4bCBteC1hdXRvIGZsZXggZmxleC1jb2wgcHgtMiBtZDpwLTBcIj5cbiAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIG10LTMgbWItMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiB3LTEvMyBoLTEyXCI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggZ2FwLTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiB3LTEyIGgtMTIgcm91bmRlZC1mdWxsIHNocmluay0wXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gdy0xMiBoLTEyIHJvdW5kZWQtZnVsbCBzaHJpbmstMFwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInNrZWxldG9uIHctZnVsbCBoLTE2IG1iLTNcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInNrZWxldG9uIHctZnVsbCBoLWZ1bGwgbWItM1wiPjwvZGl2PlxuPC9kaXY+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIiBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRQYXJzZWRWYWx1ZUZyb21Mb2NhbFN0b3JhZ2U8VD4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgZXhwZWN0ZWRUeXBlOiBzdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiBULFxuICApOiBUIHtcbiAgICBjb25zdCBqc29uU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgIHJldHVybiBnZXRQYXJzZWRWYWx1ZUZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIGV4cGVjdGVkVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRQYXJzZWRWYWx1ZUZyb21TZXNzaW9uU3RvcmFnZTxUPihcbiAgICBrZXk6IHN0cmluZyxcbiAgICBleHBlY3RlZFR5cGU6IHN0cmluZyxcbiAgICBkZWZhdWx0VmFsdWU6IFQsXG4gICk6IFQge1xuICAgIGNvbnN0IGpzb25TdHJpbmcgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cbiAgICByZXR1cm4gZ2V0UGFyc2VkVmFsdWVGcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBleHBlY3RlZFR5cGUsIGRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYXJzZWRWYWx1ZUZyb21Kc29uU3RyaW5nPFQ+KFxuICAgIGpzb25TdHJpbmc6IHN0cmluZyB8IG51bGwsXG4gICAgZXhwZWN0ZWRUeXBlOiBzdHJpbmcsXG4gICAgZGVmYXVsdFZhbHVlOiBULFxuICApOiBUIHtcbiAgICBpZiAoIWpzb25TdHJpbmcpIHJldHVybiBkZWZhdWx0VmFsdWU7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBwYXJzZWRWYWx1ZSA9PT0gZXhwZWN0ZWRUeXBlID8gcGFyc2VkVmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHtcbiAgICBpc0xpc3RzT3BlbmVkLFxuICAgIGlzVG9kb09wZW5lZCxcbiAgICBpdGVtVG9Qcm9jZXNzSWQsXG4gICAgbmV3TGlzdCxcbiAgICBuZXdUb2RvLFxuICAgIG9wZW5lZE1lbnVJZCxcbiAgfSBmcm9tIFwiJHN0b3Jlcy9jbGllbnRPbmx5U3RhdGVcIjtcblxuICBleHBvcnQgbGV0IGlzQ2xpZW50U3RhdGVSZXN0b3JlZDogYm9vbGVhbjtcblxuICBvbk1vdW50KCgpID0+IHtcbiAgICAvLyBTeW5jIGNsaWVudCBzdGF0ZSBzdG9yZXMgd2l0aCBzZXNzaW9uU3RvcmFnZSBvbiBzdGFydHVwLiBUaGlzIGlzIG1haW5seVxuICAgIC8vIHRvIHJlc3RvcmUgVUkgaWYgdGhlIGJyb3dzZXIgdW5leHBlY3RlZGx5IHJlZnJlc2hlcy5cbiAgICAkaXNMaXN0c09wZW5lZCA9IGdldFBhcnNlZFZhbHVlRnJvbVNlc3Npb25TdG9yYWdlKFwiaXNMaXN0c09wZW5lZFwiLCBcImJvb2xlYW5cIiwgJGlzTGlzdHNPcGVuZWQpO1xuICAgICRpc1RvZG9PcGVuZWQgPSBnZXRQYXJzZWRWYWx1ZUZyb21TZXNzaW9uU3RvcmFnZShcImlzVG9kb09wZW5lZFwiLCBcImJvb2xlYW5cIiwgJGlzVG9kb09wZW5lZCk7XG4gICAgJGl0ZW1Ub1Byb2Nlc3NJZCA9IGdldFBhcnNlZFZhbHVlRnJvbVNlc3Npb25TdG9yYWdlKFxuICAgICAgXCJpdGVtVG9Qcm9jZXNzSWRcIixcbiAgICAgIFwic3RyaW5nXCIsXG4gICAgICAkaXRlbVRvUHJvY2Vzc0lkLFxuICAgICk7XG4gICAgJG5ld0xpc3QgPSBnZXRQYXJzZWRWYWx1ZUZyb21TZXNzaW9uU3RvcmFnZShcIm5ld0xpc3RcIiwgXCJzdHJpbmdcIiwgJG5ld0xpc3QpO1xuICAgICRuZXdUb2RvID0gZ2V0UGFyc2VkVmFsdWVGcm9tU2Vzc2lvblN0b3JhZ2UoXCJuZXdUb2RvXCIsIFwic3RyaW5nXCIsICRuZXdUb2RvKTtcbiAgICAkb3BlbmVkTWVudUlkID0gZ2V0UGFyc2VkVmFsdWVGcm9tU2Vzc2lvblN0b3JhZ2UoXCJvcGVuZWRNZW51SWRcIiwgXCJzdHJpbmdcIiwgJG9wZW5lZE1lbnVJZCk7XG5cbiAgICAvLyBMZXQgb2ZmbGluZS1zdmVsdGUga25vdyB0aGF0IHRoZSBjbGllbnQgc3RhdGUgaGFzIGJlZW4gcmVzdG9yZWQgaW4gb3JkZXJcbiAgICAvLyB0byByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbi5cbiAgICBpc0NsaWVudFN0YXRlUmVzdG9yZWQgPSB0cnVlO1xuICB9KTtcblxuICAvLyBLZWVwIHNlc3Npb25TdG9yYWdlIGluIHN5bmMgd2l0aCBjbGllbnQgc3RhdGUgc3RvcmVzLlxuICAkOiBpZiAoaXNDbGllbnRTdGF0ZVJlc3RvcmVkKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImlzTGlzdHNPcGVuZWRcIiwgSlNPTi5zdHJpbmdpZnkoJGlzTGlzdHNPcGVuZWQpKTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiaXNUb2RvT3BlbmVkXCIsIEpTT04uc3RyaW5naWZ5KCRpc1RvZG9PcGVuZWQpKTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiaXRlbVRvUHJvY2Vzc0lkXCIsIEpTT04uc3RyaW5naWZ5KCRpdGVtVG9Qcm9jZXNzSWQpKTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwibmV3TGlzdFwiLCBKU09OLnN0cmluZ2lmeSgkbmV3TGlzdCkpO1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJuZXdUb2RvXCIsIEpTT04uc3RyaW5naWZ5KCRuZXdUb2RvKSk7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIm9wZW5lZE1lbnVJZFwiLCBKU09OLnN0cmluZ2lmeSgkb3BlbmVkTWVudUlkKSk7XG4gIH1cbjwvc2NyaXB0PlxuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5pbXBvcnQgdHlwZSB7IExpdmUgfSBmcm9tIFwibGl2ZV9zdmVsdGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJEb2N1bWVudCB7XG4gIGV2ZW50OiBzdHJpbmc7XG4gIGRvY3VtZW50OiBzdHJpbmcgfCBudWxsO1xufVxuXG4vLyBTdG9yZSBjb250YWluaW5nICdsaXZlJyBvYmplY3QgZnJvbSBsaXZlX3N2ZWx0ZS5cbmV4cG9ydCBsZXQgbGl2ZVZpZXcgPSB3cml0YWJsZTxMaXZlPigpO1xuXG4vLyBTb2NrZXQgYXNzaWducyBmcm9tIExpdmVWaWV3XG5leHBvcnQgbGV0IHNlcnZlckRvY3VtZW50ID0gd3JpdGFibGU8U2VydmVyRG9jdW1lbnQ+KCk7XG5leHBvcnQgbGV0IHNlc3Npb25Db3VudCA9IHdyaXRhYmxlPG51bWJlcj4oKTtcbiIsICJpbXBvcnQgeyB3cml0YWJsZSB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcblxuZXhwb3J0IGNvbnN0IHN5bmNTdGF0ZSA9IHdyaXRhYmxlPFwiTm90IFN5bmNlZFwiIHwgXCJTeW5jaW5nXCIgfCBcIlN5bmNlZFwiPihcIk5vdCBTeW5jZWRcIik7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4LWRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XG4gIHN5bmNTdGF0ZS5zZXQoXCJOb3QgU3luY2VkXCIpO1xufSk7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgc2Vzc2lvbkNvdW50IH0gZnJvbSBcIiRzdG9yZXMvbGl2ZVZpZXdTb2NrZXRcIjtcbiAgaW1wb3J0IHsgc3luY1N0YXRlIH0gZnJvbSBcIiRzdG9yZXMvc3luY1N0YXRlXCI7XG48L3NjcmlwdD5cblxueyNpZiAkc2Vzc2lvbkNvdW50ICYmICRzeW5jU3RhdGUgPT09IFwiU3luY2VkXCJ9XG4gIDxkaXZcbiAgICBpZD1cInNlc3Npb25zLWJhZGdlXCJcbiAgICB0aXRsZT1cIk51bWJlciBvZiBhY3RpdmUgc2Vzc2lvbnMuXCJcbiAgICBjbGFzcz1cImJhZGdlIGJhZGdlLXhzIHRyYW5zaXRpb24tbm9uZSBwLTJcIlxuICA+XG4gICAgeyRzZXNzaW9uQ291bnR9IFNlc3Npb257JHNlc3Npb25Db3VudCA+IDEgPyBcInNcIiA6IFwiXCJ9XG4gIDwvZGl2Plxuey9pZn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBDaGVjaywgU2hhcmUyIH0gZnJvbSBcImx1Y2lkZS1zdmVsdGVcIjtcblxuICBsZXQgbWVzc2FnZTogXCJBcHAgbGluayBjb3BpZWQhXCIgfCBcIkNvcHkgdG8gY2xpcGJvYXJkIGZhaWxlZC5cIiB8IFwiXCI7XG5cbiAgYXN5bmMgZnVuY3Rpb24gY29weUFwcExpbmsoKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodXJsLm9yaWdpbik7XG4gICAgICBtZXNzYWdlID0gXCJBcHAgbGluayBjb3BpZWQhXCI7XG4gICAgfSBjYXRjaCB7XG4gICAgICBtZXNzYWdlID0gXCJDb3B5IHRvIGNsaXBib2FyZCBmYWlsZWQuXCI7XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgdGhlIHRvb2x0aXAgYWZ0ZXIgMiBzZWNvbmRzLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbWVzc2FnZSA9IFwiXCI7XG4gICAgfSwgMjAwMCk7XG4gIH1cbjwvc2NyaXB0PlxuXG48YnV0dG9uXG4gIGNsYXNzPVwiXG4gICAgbXktMSBidG4gYnRuLWNpcmNsZSBidG4tbmV1dHJhbFxuICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICBcIlxuICBhcmlhLWxhYmVsPVwiU2hhcmUgYXBwIGxpbmsuXCJcbiAgdGl0bGU9XCJDbGljayB0byBjb3B5IGFwcCBsaW5rLlwiXG4gIGRpc2FibGVkPXtCb29sZWFuKG1lc3NhZ2UpfVxuICBvbjpjbGljaz17Y29weUFwcExpbmt9XG4+XG4gIDxkaXZcbiAgICBjbGFzcz1cInRvb2x0aXAtbGVmdCB0b29sdGlwLXByaW1hcnlcIlxuICAgIGNsYXNzOnRvb2x0aXA9e0Jvb2xlYW4obWVzc2FnZSl9XG4gICAgY2xhc3M6dG9vbHRpcC1vcGVuPXtCb29sZWFuKG1lc3NhZ2UpfVxuICAgIGRhdGEtdGlwPXttZXNzYWdlfVxuICA+XG4gICAgPGRpdiBjbGFzcz1cInN3YXAgc3dhcC1yb3RhdGVcIj5cbiAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImhpZGRlblwiIGNoZWNrZWQ9e0Jvb2xlYW4obWVzc2FnZSl9IC8+XG4gICAgICA8U2hhcmUyIGNsYXNzPVwic3dhcC1vZmZcIiAvPlxuICAgICAgPENoZWNrIGNsYXNzPVwic3dhcC1vblwiIC8+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9idXR0b24+XG4iLCAiLyoqXG4gKiAgYmFzZTY0LnRzXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1DbGF1c2UgTGljZW5zZS5cbiAqICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiAgUmVmZXJlbmNlczpcbiAqICAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0XG4gKlxuICogQGF1dGhvciBEYW4gS29nYWkgKGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5rb2dhaSlcbiAqL1xuY29uc3QgdmVyc2lvbiA9ICczLjcuNic7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBsb3dlcmNhc2UgYHZlcnNpb25gLlxuICovXG5jb25zdCBWRVJTSU9OID0gdmVyc2lvbjtcbmNvbnN0IF9oYXNhdG9iID0gdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfaGFzYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nO1xuY29uc3QgX2hhc0J1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5jb25zdCBfVEQgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgPyBuZXcgVGV4dERlY29kZXIoKSA6IHVuZGVmaW5lZDtcbmNvbnN0IF9URSA9IHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RW5jb2RlcigpIDogdW5kZWZpbmVkO1xuY29uc3QgYjY0Y2ggPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuY29uc3QgYjY0Y2hzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYjY0Y2gpO1xuY29uc3QgYjY0dGFiID0gKChhKSA9PiB7XG4gICAgbGV0IHRhYiA9IHt9O1xuICAgIGEuZm9yRWFjaCgoYywgaSkgPT4gdGFiW2NdID0gaSk7XG4gICAgcmV0dXJuIHRhYjtcbn0pKGI2NGNocyk7XG5jb25zdCBiNjRyZSA9IC9eKD86W0EtWmEtelxcZCtcXC9dezR9KSo/KD86W0EtWmEtelxcZCtcXC9dezJ9KD86PT0pP3xbQS1aYS16XFxkK1xcL117M309Pyk/JC87XG5jb25zdCBfZnJvbUNDID0gU3RyaW5nLmZyb21DaGFyQ29kZS5iaW5kKFN0cmluZyk7XG5jb25zdCBfVThBZnJvbSA9IHR5cGVvZiBVaW50OEFycmF5LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICA/IFVpbnQ4QXJyYXkuZnJvbS5iaW5kKFVpbnQ4QXJyYXkpXG4gICAgOiAoaXQpID0+IG5ldyBVaW50OEFycmF5KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0LCAwKSk7XG5jb25zdCBfbWtVcmlTYWZlID0gKHNyYykgPT4gc3JjXG4gICAgLnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1srXFwvXS9nLCAobTApID0+IG0wID09ICcrJyA/ICctJyA6ICdfJyk7XG5jb25zdCBfdGlkeUI2NCA9IChzKSA9PiBzLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJyk7XG4vKipcbiAqIHBvbHlmaWxsIHZlcnNpb24gb2YgYGJ0b2FgXG4gKi9cbmNvbnN0IGJ0b2FQb2x5ZmlsbCA9IChiaW4pID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygncG9seWZpbGxlZCcpO1xuICAgIGxldCB1MzIsIGMwLCBjMSwgYzIsIGFzYyA9ICcnO1xuICAgIGNvbnN0IHBhZCA9IGJpbi5sZW5ndGggJSAzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluLmxlbmd0aDspIHtcbiAgICAgICAgaWYgKChjMCA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1IHx8XG4gICAgICAgICAgICAoYzEgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSB8fFxuICAgICAgICAgICAgKGMyID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGNoYXJhY3RlciBmb3VuZCcpO1xuICAgICAgICB1MzIgPSAoYzAgPDwgMTYpIHwgKGMxIDw8IDgpIHwgYzI7XG4gICAgICAgIGFzYyArPSBiNjRjaHNbdTMyID4+IDE4ICYgNjNdXG4gICAgICAgICAgICArIGI2NGNoc1t1MzIgPj4gMTIgJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiA2ICYgNjNdXG4gICAgICAgICAgICArIGI2NGNoc1t1MzIgJiA2M107XG4gICAgfVxuICAgIHJldHVybiBwYWQgPyBhc2Muc2xpY2UoMCwgcGFkIC0gMykgKyBcIj09PVwiLnN1YnN0cmluZyhwYWQpIDogYXNjO1xufTtcbi8qKlxuICogZG9lcyB3aGF0IGB3aW5kb3cuYnRvYWAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICogQHBhcmFtIHtTdHJpbmd9IGJpbiBiaW5hcnkgc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqL1xuY29uc3QgX2J0b2EgPSBfaGFzYnRvYSA/IChiaW4pID0+IGJ0b2EoYmluKVxuICAgIDogX2hhc0J1ZmZlciA/IChiaW4pID0+IEJ1ZmZlci5mcm9tKGJpbiwgJ2JpbmFyeScpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgICA6IGJ0b2FQb2x5ZmlsbDtcbmNvbnN0IF9mcm9tVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICA/ICh1OGEpID0+IEJ1ZmZlci5mcm9tKHU4YSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgOiAodThhKSA9PiB7XG4gICAgICAgIC8vIGNmLiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjcxMDAwMS9ob3ctdG8tY29udmVydC11aW50OC1hcnJheS10by1iYXNlNjQtZW5jb2RlZC1zdHJpbmcvMTI3MTMzMjYjMTI3MTMzMjZcbiAgICAgICAgY29uc3QgbWF4YXJncyA9IDB4MTAwMDtcbiAgICAgICAgbGV0IHN0cnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB1OGEubGVuZ3RoOyBpIDwgbDsgaSArPSBtYXhhcmdzKSB7XG4gICAgICAgICAgICBzdHJzLnB1c2goX2Zyb21DQy5hcHBseShudWxsLCB1OGEuc3ViYXJyYXkoaSwgaSArIG1heGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9idG9hKHN0cnMuam9pbignJykpO1xuICAgIH07XG4vKipcbiAqIGNvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIEJhc2U2NCBzdHJpbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1cmxzYWZlXSBVUkwtYW5kLWZpbGVuYW1lLXNhZmUgYSBsYSBSRkM0NjQ4IFx1MDBBNzVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAqL1xuY29uc3QgZnJvbVVpbnQ4QXJyYXkgPSAodThhLCB1cmxzYWZlID0gZmFsc2UpID0+IHVybHNhZmUgPyBfbWtVcmlTYWZlKF9mcm9tVWludDhBcnJheSh1OGEpKSA6IF9mcm9tVWludDhBcnJheSh1OGEpO1xuLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4vLyBjb25zdCB1dG9iID0gKHNyYzogc3RyaW5nKSA9PiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3JjKSk7XG4vLyByZXZlcnRpbmcgZ29vZCBvbGQgZmF0aW9uZWQgcmVnZXhwXG5jb25zdCBjYl91dG9iID0gKGMpID0+IHtcbiAgICBpZiAoYy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgcmV0dXJuIGNjIDwgMHg4MCA/IGNcbiAgICAgICAgICAgIDogY2MgPCAweDgwMCA/IChfZnJvbUNDKDB4YzAgfCAoY2MgPj4+IDYpKVxuICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKVxuICAgICAgICAgICAgICAgIDogKF9mcm9tQ0MoMHhlMCB8ICgoY2MgPj4+IDEyKSAmIDB4MGYpKVxuICAgICAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDYpICYgMHgzZikpXG4gICAgICAgICAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKGNjICYgMHgzZikpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBjYyA9IDB4MTAwMDBcbiAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgwKSAtIDB4RDgwMCkgKiAweDQwMFxuICAgICAgICAgICAgKyAoYy5jaGFyQ29kZUF0KDEpIC0gMHhEQzAwKTtcbiAgICAgICAgcmV0dXJuIChfZnJvbUNDKDB4ZjAgfCAoKGNjID4+PiAxOCkgJiAweDA3KSlcbiAgICAgICAgICAgICsgX2Zyb21DQygweDgwIHwgKChjYyA+Pj4gMTIpICYgMHgzZikpXG4gICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDYpICYgMHgzZikpXG4gICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSk7XG4gICAgfVxufTtcbmNvbnN0IHJlX3V0b2IgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGRl18W15cXHgwMC1cXHg3Rl0vZztcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVVRGLTggc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVVEYtMTYgc3RyaW5nXG4gKi9cbmNvbnN0IHV0b2IgPSAodSkgPT4gdS5yZXBsYWNlKHJlX3V0b2IsIGNiX3V0b2IpO1xuLy9cbmNvbnN0IF9lbmNvZGUgPSBfaGFzQnVmZmVyXG4gICAgPyAocykgPT4gQnVmZmVyLmZyb20ocywgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0JylcbiAgICA6IF9URVxuICAgICAgICA/IChzKSA9PiBfZnJvbVVpbnQ4QXJyYXkoX1RFLmVuY29kZShzKSlcbiAgICAgICAgOiAocykgPT4gX2J0b2EodXRvYihzKSk7XG4vKipcbiAqIGNvbnZlcnRzIGEgVVRGLTgtZW5jb2RlZCBzdHJpbmcgdG8gYSBCYXNlNjQgc3RyaW5nLlxuICogQHBhcmFtIHtib29sZWFufSBbdXJsc2FmZV0gaWYgYHRydWVgIG1ha2UgdGhlIHJlc3VsdCBVUkwtc2FmZVxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IHN0cmluZ1xuICovXG5jb25zdCBlbmNvZGUgPSAoc3JjLCB1cmxzYWZlID0gZmFsc2UpID0+IHVybHNhZmVcbiAgICA/IF9ta1VyaVNhZmUoX2VuY29kZShzcmMpKVxuICAgIDogX2VuY29kZShzcmMpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIFVURi04LWVuY29kZWQgc3RyaW5nIHRvIFVSTC1zYWZlIEJhc2U2NCBSRkM0NjQ4IFx1MDBBNzUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGVuY29kZVVSSSA9IChzcmMpID0+IGVuY29kZShzcmMsIHRydWUpO1xuLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4vLyBjb25zdCBidG91ID0gKHNyYzogc3RyaW5nKSA9PiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHNyYykpO1xuLy8gcmV2ZXJ0aW5nIGdvb2Qgb2xkIGZhdGlvbmVkIHJlZ2V4cFxuY29uc3QgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuY29uc3QgY2JfYnRvdSA9IChjY2NjKSA9PiB7XG4gICAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgY3AgPSAoKDB4MDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4KVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSwgb2Zmc2V0ID0gY3AgLSAweDEwMDAwO1xuICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKChvZmZzZXQgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoKG9mZnNldCAmIDB4M0ZGKSArIDB4REMwMCkpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCA2KVxuICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBfZnJvbUNDKCgoMHgxZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSk7XG4gICAgfVxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVVRGLTE2IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGJ0b3UgPSAoYikgPT4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuLyoqXG4gKiBwb2x5ZmlsbCB2ZXJzaW9uIG9mIGBhdG9iYFxuICovXG5jb25zdCBhdG9iUG9seWZpbGwgPSAoYXNjKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ3BvbHlmaWxsZWQnKTtcbiAgICBhc2MgPSBhc2MucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgaWYgKCFiNjRyZS50ZXN0KGFzYykpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hbGZvcm1lZCBiYXNlNjQuJyk7XG4gICAgYXNjICs9ICc9PScuc2xpY2UoMiAtIChhc2MubGVuZ3RoICYgMykpO1xuICAgIGxldCB1MjQsIGJpbiA9ICcnLCByMSwgcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc2MubGVuZ3RoOykge1xuICAgICAgICB1MjQgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxOFxuICAgICAgICAgICAgfCBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxMlxuICAgICAgICAgICAgfCAocjEgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSkgPDwgNlxuICAgICAgICAgICAgfCAocjIgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSk7XG4gICAgICAgIGJpbiArPSByMSA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSlcbiAgICAgICAgICAgIDogcjIgPT09IDY0ID8gX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1KVxuICAgICAgICAgICAgICAgIDogX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1LCB1MjQgJiAyNTUpO1xuICAgIH1cbiAgICByZXR1cm4gYmluO1xufTtcbi8qKlxuICogZG9lcyB3aGF0IGB3aW5kb3cuYXRvYmAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICogQHBhcmFtIHtTdHJpbmd9IGFzYyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSBzdHJpbmdcbiAqL1xuY29uc3QgX2F0b2IgPSBfaGFzYXRvYiA/IChhc2MpID0+IGF0b2IoX3RpZHlCNjQoYXNjKSlcbiAgICA6IF9oYXNCdWZmZXIgPyAoYXNjKSA9PiBCdWZmZXIuZnJvbShhc2MsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5JylcbiAgICAgICAgOiBhdG9iUG9seWZpbGw7XG4vL1xuY29uc3QgX3RvVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICA/IChhKSA9PiBfVThBZnJvbShCdWZmZXIuZnJvbShhLCAnYmFzZTY0JykpXG4gICAgOiAoYSkgPT4gX1U4QWZyb20oX2F0b2IoYSkuc3BsaXQoJycpLm1hcChjID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICovXG5jb25zdCB0b1VpbnQ4QXJyYXkgPSAoYSkgPT4gX3RvVWludDhBcnJheShfdW5VUkkoYSkpO1xuLy9cbmNvbnN0IF9kZWNvZGUgPSBfaGFzQnVmZmVyXG4gICAgPyAoYSkgPT4gQnVmZmVyLmZyb20oYSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JylcbiAgICA6IF9URFxuICAgICAgICA/IChhKSA9PiBfVEQuZGVjb2RlKF90b1VpbnQ4QXJyYXkoYSkpXG4gICAgICAgIDogKGEpID0+IGJ0b3UoX2F0b2IoYSkpO1xuY29uc3QgX3VuVVJJID0gKGEpID0+IF90aWR5QjY0KGEucmVwbGFjZSgvWy1fXS9nLCAobTApID0+IG0wID09ICctJyA/ICcrJyA6ICcvJykpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVVEYtOCBzdHJpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIEJhc2U2NCBzdHJpbmcuICBCb3RoIG5vcm1hbCBhbmQgVVJMLXNhZmUgYXJlIHN1cHBvcnRlZFxuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGRlY29kZSA9IChzcmMpID0+IF9kZWNvZGUoX3VuVVJJKHNyYykpO1xuLyoqXG4gKiBjaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgQmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBhIHZhbHVlIHRvIGNoZWNrXG4gICovXG5jb25zdCBpc1ZhbGlkID0gKHNyYykgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHMgPSBzcmMucmVwbGFjZSgvXFxzKy9nLCAnJykucmVwbGFjZSgvPXswLDJ9JC8sICcnKTtcbiAgICByZXR1cm4gIS9bXlxcczAtOWEtekEtWlxcKy9dLy50ZXN0KHMpIHx8ICEvW15cXHMwLTlhLXpBLVpcXC1fXS8udGVzdChzKTtcbn07XG4vL1xuY29uc3QgX25vRW51bSA9ICh2KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHYsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfTtcbn07XG4vKipcbiAqIGV4dGVuZCBTdHJpbmcucHJvdG90eXBlIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICovXG5jb25zdCBleHRlbmRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgX2FkZCA9IChuYW1lLCBib2R5KSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgbmFtZSwgX25vRW51bShib2R5KSk7XG4gICAgX2FkZCgnZnJvbUJhc2U2NCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZSh0aGlzKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjQnLCBmdW5jdGlvbiAodXJsc2FmZSkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHVybHNhZmUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjRVUkwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGUodGhpcywgdHJ1ZSk7IH0pO1xuICAgIF9hZGQoJ3RvVWludDhBcnJheScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzKTsgfSk7XG59O1xuLyoqXG4gKiBleHRlbmQgVWludDhBcnJheS5wcm90b3R5cGUgd2l0aCByZWxldmFudCBtZXRob2RzXG4gKi9cbmNvbnN0IGV4dGVuZFVpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgX2FkZCA9IChuYW1lLCBib2R5KSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkoVWludDhBcnJheS5wcm90b3R5cGUsIG5hbWUsIF9ub0VudW0oYm9keSkpO1xuICAgIF9hZGQoJ3RvQmFzZTY0JywgZnVuY3Rpb24gKHVybHNhZmUpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHVybHNhZmUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSTCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbn07XG4vKipcbiAqIGV4dGVuZCBCdWlsdGluIHByb3RvdHlwZXMgd2l0aCByZWxldmFudCBtZXRob2RzXG4gKi9cbmNvbnN0IGV4dGVuZEJ1aWx0aW5zID0gKCkgPT4ge1xuICAgIGV4dGVuZFN0cmluZygpO1xuICAgIGV4dGVuZFVpbnQ4QXJyYXkoKTtcbn07XG5jb25zdCBnQmFzZTY0ID0ge1xuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgVkVSU0lPTjogVkVSU0lPTixcbiAgICBhdG9iOiBfYXRvYixcbiAgICBhdG9iUG9seWZpbGw6IGF0b2JQb2x5ZmlsbCxcbiAgICBidG9hOiBfYnRvYSxcbiAgICBidG9hUG9seWZpbGw6IGJ0b2FQb2x5ZmlsbCxcbiAgICBmcm9tQmFzZTY0OiBkZWNvZGUsXG4gICAgdG9CYXNlNjQ6IGVuY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBlbmNvZGVVUkk6IGVuY29kZVVSSSxcbiAgICBlbmNvZGVVUkw6IGVuY29kZVVSSSxcbiAgICB1dG9iOiB1dG9iLFxuICAgIGJ0b3U6IGJ0b3UsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICBmcm9tVWludDhBcnJheTogZnJvbVVpbnQ4QXJyYXksXG4gICAgdG9VaW50OEFycmF5OiB0b1VpbnQ4QXJyYXksXG4gICAgZXh0ZW5kU3RyaW5nOiBleHRlbmRTdHJpbmcsXG4gICAgZXh0ZW5kVWludDhBcnJheTogZXh0ZW5kVWludDhBcnJheSxcbiAgICBleHRlbmRCdWlsdGluczogZXh0ZW5kQnVpbHRpbnNcbn07XG4vLyBtYWtlY2pzOkNVVCAvL1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuZXhwb3J0IHsgVkVSU0lPTiB9O1xuZXhwb3J0IHsgX2F0b2IgYXMgYXRvYiB9O1xuZXhwb3J0IHsgYXRvYlBvbHlmaWxsIH07XG5leHBvcnQgeyBfYnRvYSBhcyBidG9hIH07XG5leHBvcnQgeyBidG9hUG9seWZpbGwgfTtcbmV4cG9ydCB7IGRlY29kZSBhcyBmcm9tQmFzZTY0IH07XG5leHBvcnQgeyBlbmNvZGUgYXMgdG9CYXNlNjQgfTtcbmV4cG9ydCB7IHV0b2IgfTtcbmV4cG9ydCB7IGVuY29kZSB9O1xuZXhwb3J0IHsgZW5jb2RlVVJJIH07XG5leHBvcnQgeyBlbmNvZGVVUkkgYXMgZW5jb2RlVVJMIH07XG5leHBvcnQgeyBidG91IH07XG5leHBvcnQgeyBkZWNvZGUgfTtcbmV4cG9ydCB7IGlzVmFsaWQgfTtcbmV4cG9ydCB7IGZyb21VaW50OEFycmF5IH07XG5leHBvcnQgeyB0b1VpbnQ4QXJyYXkgfTtcbmV4cG9ydCB7IGV4dGVuZFN0cmluZyB9O1xuZXhwb3J0IHsgZXh0ZW5kVWludDhBcnJheSB9O1xuZXhwb3J0IHsgZXh0ZW5kQnVpbHRpbnMgfTtcbi8vIGFuZCBmaW5hbGx5LFxuZXhwb3J0IHsgZ0Jhc2U2NCBhcyBCYXNlNjQgfTtcbiIsICIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBrZXktdmFsdWUgc3RvcmVzLlxuICpcbiAqIEBtb2R1bGUgbWFwXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IE1hcCBpbnN0YW5jZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm4ge01hcDxhbnksIGFueT59XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiBuZXcgTWFwKClcblxuLyoqXG4gKiBDb3B5IGEgTWFwIG9iamVjdCBpbnRvIGEgZnJlc2ggTWFwIG9iamVjdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBLLFZcbiAqIEBwYXJhbSB7TWFwPEssVj59IG1cbiAqIEByZXR1cm4ge01hcDxLLFY+fVxuICovXG5leHBvcnQgY29uc3QgY29weSA9IG0gPT4ge1xuICBjb25zdCByID0gY3JlYXRlKClcbiAgbS5mb3JFYWNoKCh2LCBrKSA9PiB7IHIuc2V0KGssIHYpIH0pXG4gIHJldHVybiByXG59XG5cbi8qKlxuICogR2V0IG1hcCBwcm9wZXJ0eS4gQ3JlYXRlIFQgaWYgcHJvcGVydHkgaXMgdW5kZWZpbmVkIGFuZCBzZXQgVCBvbiBtYXAuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGxpc3RlbmVycyA9IG1hcC5zZXRJZlVuZGVmaW5lZChldmVudHMsICdldmVudE5hbWUnLCBzZXQuY3JlYXRlKVxuICogbGlzdGVuZXJzLmFkZChsaXN0ZW5lcilcbiAqIGBgYFxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIHtNYXA8YW55LCBhbnk+fSBNQVBcbiAqIEB0ZW1wbGF0ZSB7TUFQIGV4dGVuZHMgTWFwPGFueSxpbmZlciBWPiA/IGZ1bmN0aW9uKCk6ViA6IHVua25vd259IENGXG4gKiBAcGFyYW0ge01BUH0gbWFwXG4gKiBAcGFyYW0ge01BUCBleHRlbmRzIE1hcDxpbmZlciBLLGFueT4gPyBLIDogdW5rbm93bn0ga2V5XG4gKiBAcGFyYW0ge0NGfSBjcmVhdGVUXG4gKiBAcmV0dXJuIHtSZXR1cm5UeXBlPENGPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldElmVW5kZWZpbmVkID0gKG1hcCwga2V5LCBjcmVhdGVUKSA9PiB7XG4gIGxldCBzZXQgPSBtYXAuZ2V0KGtleSlcbiAgaWYgKHNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFwLnNldChrZXksIHNldCA9IGNyZWF0ZVQoKSlcbiAgfVxuICByZXR1cm4gc2V0XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBBcnJheSBhbmQgcG9wdWxhdGVzIGl0IHdpdGggdGhlIGNvbnRlbnQgb2YgYWxsIGtleS12YWx1ZSBwYWlycyB1c2luZyB0aGUgYGYodmFsdWUsIGtleSlgIGZ1bmN0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAdGVtcGxhdGUgUlxuICogQHBhcmFtIHtNYXA8SyxWPn0gbVxuICogQHBhcmFtIHtmdW5jdGlvbihWLEspOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKG0sIGYpID0+IHtcbiAgY29uc3QgcmVzID0gW11cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbSkge1xuICAgIHJlcy5wdXNoKGYodmFsdWUsIGtleSkpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYW55IGtleS12YWx1ZSBwYWlycyBwYXNzIHRoZSB0ZXN0IGltcGxlbWVudGVkIGJ5IGBmKHZhbHVlLCBrZXkpYC5cbiAqXG4gKiBAdG9kbyBzaG91bGQgcmVuYW1lIHRvIHNvbWUgLSBzaW1pbGFybHkgdG8gQXJyYXkuc29tZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge01hcDxLLFY+fSBtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsSyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFueSA9IChtLCBmKSA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG0pIHtcbiAgICBpZiAoZih2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciBhbGwga2V5LXZhbHVlIHBhaXJzIHBhc3MgdGhlIHRlc3QgaW1wbGVtZW50ZWQgYnkgYGYodmFsdWUsIGtleSlgLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge01hcDxLLFY+fSBtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsSyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbCA9IChtLCBmKSA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG0pIHtcbiAgICBpZiAoIWYodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIiwgIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHNldHMuXG4gKlxuICogQG1vZHVsZSBzZXRcbiAqL1xuXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gbmV3IFNldCgpXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7U2V0PFQ+fSBzZXRcbiAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICovXG5leHBvcnQgY29uc3QgdG9BcnJheSA9IHNldCA9PiBBcnJheS5mcm9tKHNldClcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTZXQ8VD59IHNldFxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0ID0gc2V0ID0+XG4gIHNldC52YWx1ZXMoKS5uZXh0KCkudmFsdWUgfHwgdW5kZWZpbmVkXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IGVudHJpZXNcbiAqIEByZXR1cm4ge1NldDxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSBlbnRyaWVzID0+IG5ldyBTZXQoZW50cmllcylcbiIsICIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBBcnJheXMuXG4gKlxuICogQG1vZHVsZSBhcnJheVxuICovXG5cbmltcG9ydCAqIGFzIHNldCBmcm9tICcuL3NldC5qcydcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gVGhlIGVsZW1lbnQgbXVzdCBleGlzdFxuICpcbiAqIEB0ZW1wbGF0ZSBMXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxMPn0gYXJyXG4gKiBAcmV0dXJuIHtMfVxuICovXG5leHBvcnQgY29uc3QgbGFzdCA9IGFyciA9PiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cbi8qKlxuICogQHRlbXBsYXRlIENcbiAqIEByZXR1cm4ge0FycmF5PEM+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gLyoqIEB0eXBlIHtBcnJheTxDPn0gKi8gKFtdKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBEXG4gKiBAcGFyYW0ge0FycmF5PEQ+fSBhXG4gKiBAcmV0dXJuIHtBcnJheTxEPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHkgPSBhID0+IC8qKiBAdHlwZSB7QXJyYXk8RD59ICovIChhLnNsaWNlKCkpXG5cbi8qKlxuICogQXBwZW5kIGVsZW1lbnRzIGZyb20gc3JjIHRvIGRlc3RcbiAqXG4gKiBAdGVtcGxhdGUgTVxuICogQHBhcmFtIHtBcnJheTxNPn0gZGVzdFxuICogQHBhcmFtIHtBcnJheTxNPn0gc3JjXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRUbyA9IChkZXN0LCBzcmMpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmMubGVuZ3RoOyBpKyspIHtcbiAgICBkZXN0LnB1c2goc3JjW2ldKVxuICB9XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyBzb21ldGhpbmcgYXJyYXktbGlrZSB0byBhbiBhY3R1YWwgQXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheUxpa2U8VD58SXRlcmFibGU8VD59IGFycmF5bGlrZVxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSBBcnJheS5mcm9tXG5cbi8qKlxuICogVHJ1ZSBpZmYgY29uZGl0aW9uIGhvbGRzIG9uIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIElURU1cbiAqIEB0ZW1wbGF0ZSB7QXJyYXlMaWtlPElURU0+fSBBUlJcbiAqXG4gKiBAcGFyYW0ge0FSUn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKElURU0sIG51bWJlciwgQVJSKTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXZlcnkgPSAoYXJyLCBmKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFmKGFycltpXSwgaSwgYXJyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogVHJ1ZSBpZmYgY29uZGl0aW9uIGhvbGRzIG9uIHNvbWUgZWxlbWVudCBpbiB0aGUgQXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgU1xuICogQHRlbXBsYXRlIHtBcnJheUxpa2U8Uz59IEFSUlxuICogQHBhcmFtIHtBUlJ9IGFyclxuICogQHBhcmFtIHtmdW5jdGlvbihTLCBudW1iZXIsIEFSUik6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNvbWUgPSAoYXJyLCBmKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGYoYXJyW2ldLCBpLCBhcnIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgRUxFTVxuICpcbiAqIEBwYXJhbSB7QXJyYXlMaWtlPEVMRU0+fSBhXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxFTEVNPn0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsRmxhdCA9IChhLCBiKSA9PiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgZXZlcnkoYSwgKGl0ZW0sIGluZGV4KSA9PiBpdGVtID09PSBiW2luZGV4XSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgRUxFTVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxFTEVNPj59IGFyclxuICogQHJldHVybiB7QXJyYXk8RUxFTT59XG4gKi9cbmV4cG9ydCBjb25zdCBmbGF0dGVuID0gYXJyID0+IGZvbGQoYXJyLCAvKiogQHR5cGUge0FycmF5PEVMRU0+fSAqLyAoW10pLCAoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIsIEFycmF5PFQ+KTpUfSBmXG4gKiBAcmV0dXJuIHtBcnJheTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHVuZm9sZCA9IChsZW4sIGYpID0+IHtcbiAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkobGVuKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBmKGksIGFycmF5KVxuICB9XG4gIHJldHVybiBhcnJheVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdGVtcGxhdGUgUkVTVUxUXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnJcbiAqIEBwYXJhbSB7UkVTVUxUfSBzZWVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFJFU1VMVCwgVCwgbnVtYmVyKTpSRVNVTFR9IGZvbGRlclxuICovXG5leHBvcnQgY29uc3QgZm9sZCA9IChhcnIsIHNlZWQsIGZvbGRlcikgPT4gYXJyLnJlZHVjZShmb2xkZXIsIHNlZWQpXG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnJcbiAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICovXG5leHBvcnQgY29uc3QgdW5pcXVlID0gYXJyID0+IGZyb20oc2V0LmZyb20oYXJyKSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHRlbXBsYXRlIE1cbiAqIEBwYXJhbSB7QXJyYXlMaWtlPFQ+fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6TX0gbWFwcGVyXG4gKiBAcmV0dXJuIHtBcnJheTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHVuaXF1ZUJ5ID0gKGFyciwgbWFwcGVyKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7U2V0PE0+fVxuICAgKi9cbiAgY29uc3QgaGFwcGVuZWQgPSBzZXQuY3JlYXRlKClcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxUPn1cbiAgICovXG4gIGNvbnN0IHJlc3VsdCA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZWwgPSBhcnJbaV1cbiAgICBjb25zdCBtYXBwZWQgPSBtYXBwZXIoZWwpXG4gICAgaWYgKCFoYXBwZW5lZC5oYXMobWFwcGVkKSkge1xuICAgICAgaGFwcGVuZWQuYWRkKG1hcHBlZClcbiAgICAgIHJlc3VsdC5wdXNoKGVsKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtBcnJheUxpa2U8YW55Pn0gQVJSXG4gKiBAdGVtcGxhdGUge2Z1bmN0aW9uKEFSUiBleHRlbmRzIEFycmF5TGlrZTxpbmZlciBUPiA/IFQgOiBuZXZlciwgbnVtYmVyLCBBUlIpOmFueX0gTUFQUEVSXG4gKiBAcGFyYW0ge0FSUn0gYXJyXG4gKiBAcGFyYW0ge01BUFBFUn0gbWFwcGVyXG4gKiBAcmV0dXJuIHtBcnJheTxNQVBQRVIgZXh0ZW5kcyBmdW5jdGlvbiguLi5hbnkpOiBpbmZlciBNID8gTSA6IG5ldmVyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcCA9IChhcnIsIG1hcHBlcikgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PGFueT59XG4gICAqL1xuICBjb25zdCByZXMgPSBBcnJheShhcnIubGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHJlc1tpXSA9IG1hcHBlcigvKiogQHR5cGUge2FueX0gKi8gKGFycltpXSksIGksIC8qKiBAdHlwZSB7YW55fSAqLyAoYXJyKSlcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovIChyZXMpXG59XG4iLCAiLyoqXG4gKiBPYnNlcnZhYmxlIGNsYXNzIHByb3RvdHlwZS5cbiAqXG4gKiBAbW9kdWxlIG9ic2VydmFibGVcbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAuanMnXG5pbXBvcnQgKiBhcyBzZXQgZnJvbSAnLi9zZXQuanMnXG5pbXBvcnQgKiBhcyBhcnJheSBmcm9tICcuL2FycmF5LmpzJ1xuXG4vKipcbiAqIEhhbmRsZXMgbmFtZWQgZXZlbnRzLlxuICogQGV4cGVyaW1lbnRhbFxuICpcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGEgKGJldHRlciB0eXBlZCkgZHVwbGljYXRlIG9mIE9ic2VydmFibGUsIHdoaWNoIHdpbGwgcmVwbGFjZSBPYnNlcnZhYmxlIGluIHRoZVxuICogbmV4dCByZWxlYXNlLlxuICpcbiAqIEB0ZW1wbGF0ZSB7e1trZXkgaW4ga2V5b2YgRVZFTlRTXTogZnVuY3Rpb24oLi4uYW55KTp2b2lkfX0gRVZFTlRTXG4gKi9cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlVjIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogU29tZSBkZXNjLlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBTZXQ8YW55Pj59XG4gICAgICovXG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbWFwLmNyZWF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBFVkVOVFMgJiBzdHJpbmd9IE5BTUVcbiAgICogQHBhcmFtIHtOQU1FfSBuYW1lXG4gICAqIEBwYXJhbSB7RVZFTlRTW05BTUVdfSBmXG4gICAqL1xuICBvbiAobmFtZSwgZikge1xuICAgIG1hcC5zZXRJZlVuZGVmaW5lZCh0aGlzLl9vYnNlcnZlcnMsIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAobmFtZSksIHNldC5jcmVhdGUpLmFkZChmKVxuICAgIHJldHVybiBmXG4gIH1cblxuICAvKipcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBFVkVOVFMgJiBzdHJpbmd9IE5BTUVcbiAgICogQHBhcmFtIHtOQU1FfSBuYW1lXG4gICAqIEBwYXJhbSB7RVZFTlRTW05BTUVdfSBmXG4gICAqL1xuICBvbmNlIChuYW1lLCBmKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzXG4gICAgICovXG4gICAgY29uc3QgX2YgPSAoLi4uYXJncykgPT4ge1xuICAgICAgdGhpcy5vZmYobmFtZSwgLyoqIEB0eXBlIHthbnl9ICovIChfZikpXG4gICAgICBmKC4uLmFyZ3MpXG4gICAgfVxuICAgIHRoaXMub24obmFtZSwgLyoqIEB0eXBlIHthbnl9ICovIChfZikpXG4gIH1cblxuICAvKipcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBFVkVOVFMgJiBzdHJpbmd9IE5BTUVcbiAgICogQHBhcmFtIHtOQU1FfSBuYW1lXG4gICAqIEBwYXJhbSB7RVZFTlRTW05BTUVdfSBmXG4gICAqL1xuICBvZmYgKG5hbWUsIGYpIHtcbiAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnMuZ2V0KG5hbWUpXG4gICAgaWYgKG9ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlcnMuZGVsZXRlKGYpXG4gICAgICBpZiAob2JzZXJ2ZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLmRlbGV0ZShuYW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IGEgbmFtZWQgZXZlbnQuIEFsbCByZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycyB0aGF0IGxpc3RlbiB0byB0aGVcbiAgICogc3BlY2lmaWVkIG5hbWUgd2lsbCByZWNlaXZlIHRoZSBldmVudC5cbiAgICpcbiAgICogQHRvZG8gVGhpcyBzaG91bGQgY2F0Y2ggZXhjZXB0aW9uc1xuICAgKlxuICAgKiBAdGVtcGxhdGUge2tleW9mIEVWRU5UUyAmIHN0cmluZ30gTkFNRVxuICAgKiBAcGFyYW0ge05BTUV9IG5hbWUgVGhlIGV2ZW50IG5hbWUuXG4gICAqIEBwYXJhbSB7UGFyYW1ldGVyczxFVkVOVFNbTkFNRV0+fSBhcmdzIFRoZSBhcmd1bWVudHMgdGhhdCBhcmUgYXBwbGllZCB0byB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBlbWl0IChuYW1lLCBhcmdzKSB7XG4gICAgLy8gY29weSBhbGwgbGlzdGVuZXJzIHRvIGFuIGFycmF5IGZpcnN0IHRvIG1ha2Ugc3VyZSB0aGF0IG5vIGV2ZW50IGlzIGVtaXR0ZWQgdG8gbGlzdGVuZXJzIHRoYXQgYXJlIHN1YnNjcmliZWQgd2hpbGUgdGhlIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkLlxuICAgIHJldHVybiBhcnJheS5mcm9tKCh0aGlzLl9vYnNlcnZlcnMuZ2V0KG5hbWUpIHx8IG1hcC5jcmVhdGUoKSkudmFsdWVzKCkpLmZvckVhY2goZiA9PiBmKC4uLmFyZ3MpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbWFwLmNyZWF0ZSgpXG4gIH1cbn1cblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG4vKipcbiAqIEhhbmRsZXMgbmFtZWQgZXZlbnRzLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAdGVtcGxhdGUgTlxuICovXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBTb21lIGRlc2MuXG4gICAgICogQHR5cGUge01hcDxOLCBhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuX29ic2VydmVycyA9IG1hcC5jcmVhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvbiAobmFtZSwgZikge1xuICAgIG1hcC5zZXRJZlVuZGVmaW5lZCh0aGlzLl9vYnNlcnZlcnMsIG5hbWUsIHNldC5jcmVhdGUpLmFkZChmKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvbmNlIChuYW1lLCBmKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzXG4gICAgICovXG4gICAgY29uc3QgX2YgPSAoLi4uYXJncykgPT4ge1xuICAgICAgdGhpcy5vZmYobmFtZSwgX2YpXG4gICAgICBmKC4uLmFyZ3MpXG4gICAgfVxuICAgIHRoaXMub24obmFtZSwgX2YpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAgICovXG4gIG9mZiAobmFtZSwgZikge1xuICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMuX29ic2VydmVycy5nZXQobmFtZSlcbiAgICBpZiAob2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9ic2VydmVycy5kZWxldGUoZilcbiAgICAgIGlmIChvYnNlcnZlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlcnMuZGVsZXRlKG5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgYSBuYW1lZCBldmVudC4gQWxsIHJlZ2lzdGVyZWQgZXZlbnQgbGlzdGVuZXJzIHRoYXQgbGlzdGVuIHRvIHRoZVxuICAgKiBzcGVjaWZpZWQgbmFtZSB3aWxsIHJlY2VpdmUgdGhlIGV2ZW50LlxuICAgKlxuICAgKiBAdG9kbyBUaGlzIHNob3VsZCBjYXRjaCBleGNlcHRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZSBUaGUgZXZlbnQgbmFtZS5cbiAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcmdzIFRoZSBhcmd1bWVudHMgdGhhdCBhcmUgYXBwbGllZCB0byB0aGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBlbWl0IChuYW1lLCBhcmdzKSB7XG4gICAgLy8gY29weSBhbGwgbGlzdGVuZXJzIHRvIGFuIGFycmF5IGZpcnN0IHRvIG1ha2Ugc3VyZSB0aGF0IG5vIGV2ZW50IGlzIGVtaXR0ZWQgdG8gbGlzdGVuZXJzIHRoYXQgYXJlIHN1YnNjcmliZWQgd2hpbGUgdGhlIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkLlxuICAgIHJldHVybiBhcnJheS5mcm9tKCh0aGlzLl9vYnNlcnZlcnMuZ2V0KG5hbWUpIHx8IG1hcC5jcmVhdGUoKSkudmFsdWVzKCkpLmZvckVhY2goZiA9PiBmKC4uLmFyZ3MpKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbWFwLmNyZWF0ZSgpXG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBlbmQgKi9cbiIsICIvKipcbiAqIENvbW1vbiBNYXRoIGV4cHJlc3Npb25zLlxuICpcbiAqIEBtb2R1bGUgbWF0aFxuICovXG5cbmV4cG9ydCBjb25zdCBmbG9vciA9IE1hdGguZmxvb3JcbmV4cG9ydCBjb25zdCBjZWlsID0gTWF0aC5jZWlsXG5leHBvcnQgY29uc3QgYWJzID0gTWF0aC5hYnNcbmV4cG9ydCBjb25zdCBpbXVsID0gTWF0aC5pbXVsXG5leHBvcnQgY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kXG5leHBvcnQgY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwXG5leHBvcnQgY29uc3QgbG9nMiA9IE1hdGgubG9nMlxuZXhwb3J0IGNvbnN0IGxvZyA9IE1hdGgubG9nXG5leHBvcnQgY29uc3Qgc3FydCA9IE1hdGguc3FydFxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzdW0gb2YgYSBhbmQgYlxuICovXG5leHBvcnQgY29uc3QgYWRkID0gKGEsIGIpID0+IGEgKyBiXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNtYWxsZXIgZWxlbWVudCBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBjb25zdCBtaW4gPSAoYSwgYikgPT4gYSA8IGIgPyBhIDogYlxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBiaWdnZXIgZWxlbWVudCBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBjb25zdCBtYXggPSAoYSwgYikgPT4gYSA+IGIgPyBhIDogYlxuXG5leHBvcnQgY29uc3QgaXNOYU4gPSBOdW1iZXIuaXNOYU5cblxuZXhwb3J0IGNvbnN0IHBvdyA9IE1hdGgucG93XG4vKipcbiAqIEJhc2UgMTAgZXhwb25lbnRpYWwgZnVuY3Rpb24uIFJldHVybnMgdGhlIHZhbHVlIG9mIDEwIHJhaXNlZCB0byB0aGUgcG93ZXIgb2YgcG93LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBleHBcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cDEwID0gZXhwID0+IE1hdGgucG93KDEwLCBleHApXG5cbmV4cG9ydCBjb25zdCBzaWduID0gTWF0aC5zaWduXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdldGhlciBuIGlzIG5lZ2F0aXZlLiBUaGlzIGZ1bmN0aW9uIGFsc28gZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiAtMCBhbmQgKzBcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTmVnYXRpdmVaZXJvID0gbiA9PiBuICE9PSAwID8gbiA8IDAgOiAxIC8gbiA8IDBcbiIsICIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBCaW5hcnkgZGF0YSBjb25zdGFudHMuXG4gKlxuICogQG1vZHVsZSBiaW5hcnlcbiAqL1xuXG4vKipcbiAqIG4tdGggYml0IGFjdGl2YXRlZC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQklUMSA9IDFcbmV4cG9ydCBjb25zdCBCSVQyID0gMlxuZXhwb3J0IGNvbnN0IEJJVDMgPSA0XG5leHBvcnQgY29uc3QgQklUNCA9IDhcbmV4cG9ydCBjb25zdCBCSVQ1ID0gMTZcbmV4cG9ydCBjb25zdCBCSVQ2ID0gMzJcbmV4cG9ydCBjb25zdCBCSVQ3ID0gNjRcbmV4cG9ydCBjb25zdCBCSVQ4ID0gMTI4XG5leHBvcnQgY29uc3QgQklUOSA9IDI1NlxuZXhwb3J0IGNvbnN0IEJJVDEwID0gNTEyXG5leHBvcnQgY29uc3QgQklUMTEgPSAxMDI0XG5leHBvcnQgY29uc3QgQklUMTIgPSAyMDQ4XG5leHBvcnQgY29uc3QgQklUMTMgPSA0MDk2XG5leHBvcnQgY29uc3QgQklUMTQgPSA4MTkyXG5leHBvcnQgY29uc3QgQklUMTUgPSAxNjM4NFxuZXhwb3J0IGNvbnN0IEJJVDE2ID0gMzI3NjhcbmV4cG9ydCBjb25zdCBCSVQxNyA9IDY1NTM2XG5leHBvcnQgY29uc3QgQklUMTggPSAxIDw8IDE3XG5leHBvcnQgY29uc3QgQklUMTkgPSAxIDw8IDE4XG5leHBvcnQgY29uc3QgQklUMjAgPSAxIDw8IDE5XG5leHBvcnQgY29uc3QgQklUMjEgPSAxIDw8IDIwXG5leHBvcnQgY29uc3QgQklUMjIgPSAxIDw8IDIxXG5leHBvcnQgY29uc3QgQklUMjMgPSAxIDw8IDIyXG5leHBvcnQgY29uc3QgQklUMjQgPSAxIDw8IDIzXG5leHBvcnQgY29uc3QgQklUMjUgPSAxIDw8IDI0XG5leHBvcnQgY29uc3QgQklUMjYgPSAxIDw8IDI1XG5leHBvcnQgY29uc3QgQklUMjcgPSAxIDw8IDI2XG5leHBvcnQgY29uc3QgQklUMjggPSAxIDw8IDI3XG5leHBvcnQgY29uc3QgQklUMjkgPSAxIDw8IDI4XG5leHBvcnQgY29uc3QgQklUMzAgPSAxIDw8IDI5XG5leHBvcnQgY29uc3QgQklUMzEgPSAxIDw8IDMwXG5leHBvcnQgY29uc3QgQklUMzIgPSAxIDw8IDMxXG5cbi8qKlxuICogRmlyc3QgbiBiaXRzIGFjdGl2YXRlZC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQklUUzAgPSAwXG5leHBvcnQgY29uc3QgQklUUzEgPSAxXG5leHBvcnQgY29uc3QgQklUUzIgPSAzXG5leHBvcnQgY29uc3QgQklUUzMgPSA3XG5leHBvcnQgY29uc3QgQklUUzQgPSAxNVxuZXhwb3J0IGNvbnN0IEJJVFM1ID0gMzFcbmV4cG9ydCBjb25zdCBCSVRTNiA9IDYzXG5leHBvcnQgY29uc3QgQklUUzcgPSAxMjdcbmV4cG9ydCBjb25zdCBCSVRTOCA9IDI1NVxuZXhwb3J0IGNvbnN0IEJJVFM5ID0gNTExXG5leHBvcnQgY29uc3QgQklUUzEwID0gMTAyM1xuZXhwb3J0IGNvbnN0IEJJVFMxMSA9IDIwNDdcbmV4cG9ydCBjb25zdCBCSVRTMTIgPSA0MDk1XG5leHBvcnQgY29uc3QgQklUUzEzID0gODE5MVxuZXhwb3J0IGNvbnN0IEJJVFMxNCA9IDE2MzgzXG5leHBvcnQgY29uc3QgQklUUzE1ID0gMzI3NjdcbmV4cG9ydCBjb25zdCBCSVRTMTYgPSA2NTUzNVxuZXhwb3J0IGNvbnN0IEJJVFMxNyA9IEJJVDE4IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMxOCA9IEJJVDE5IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMxOSA9IEJJVDIwIC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyMCA9IEJJVDIxIC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyMSA9IEJJVDIyIC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyMiA9IEJJVDIzIC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyMyA9IEJJVDI0IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyNCA9IEJJVDI1IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyNSA9IEJJVDI2IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyNiA9IEJJVDI3IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyNyA9IEJJVDI4IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyOCA9IEJJVDI5IC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyOSA9IEJJVDMwIC0gMVxuZXhwb3J0IGNvbnN0IEJJVFMzMCA9IEJJVDMxIC0gMVxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQklUUzMxID0gMHg3RkZGRkZGRlxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQklUUzMyID0gMHhGRkZGRkZGRlxuIiwgIi8qKlxuICogVXRpbGl0eSBoZWxwZXJzIGZvciB3b3JraW5nIHdpdGggbnVtYmVycy5cbiAqXG4gKiBAbW9kdWxlIG51bWJlclxuICovXG5cbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJy4vYmluYXJ5LmpzJ1xuXG5leHBvcnQgY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG5leHBvcnQgY29uc3QgTUlOX1NBRkVfSU5URUdFUiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG5cbmV4cG9ydCBjb25zdCBMT1dFU1RfSU5UMzIgPSAxIDw8IDMxXG5leHBvcnQgY29uc3QgSElHSEVTVF9JTlQzMiA9IGJpbmFyeS5CSVRTMzFcbmV4cG9ydCBjb25zdCBISUdIRVNUX1VJTlQzMiA9IGJpbmFyeS5CSVRTMzJcblxuLyogYzggaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IChudW0gPT4gdHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUobnVtKSAmJiBtYXRoLmZsb29yKG51bSkgPT09IG51bSlcbmV4cG9ydCBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTlxuZXhwb3J0IGNvbnN0IHBhcnNlSW50ID0gTnVtYmVyLnBhcnNlSW50XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBcIjFcIiBiaXRzIGluIGFuIHVuc2lnbmVkIDMyYml0IG51bWJlci5cbiAqXG4gKiBTdXBlciBmdW4gYml0Y291bnQgYWxnb3JpdGhtIGJ5IEJyaWFuIEtlcm5pZ2hhbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gblxuICovXG5leHBvcnQgY29uc3QgY291bnRCaXRzID0gbiA9PiB7XG4gIG4gJj0gYmluYXJ5LkJJVFMzMlxuICBsZXQgY291bnQgPSAwXG4gIHdoaWxlIChuKSB7XG4gICAgbiAmPSAobiAtIDEpXG4gICAgY291bnQrK1xuICB9XG4gIHJldHVybiBjb3VudFxufVxuIiwgImltcG9ydCAqIGFzIGFycmF5IGZyb20gJy4vYXJyYXkuanMnXG5cbi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHN0cmluZ3MuXG4gKlxuICogQG1vZHVsZSBzdHJpbmdcbiAqL1xuXG5leHBvcnQgY29uc3QgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuZXhwb3J0IGNvbnN0IGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludFxuXG4vKipcbiAqIFRoZSBsYXJnZXN0IHV0ZjE2IGNoYXJhY3Rlci5cbiAqIENvcnJlc3BvbmRzIHRvIFVpbnQ4QXJyYXkoWzI1NSwgMjU1XSkgb3IgY2hhcmNvZGVvZigyeDJeOClcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9VVEYxNl9DSEFSQUNURVIgPSBmcm9tQ2hhckNvZGUoNjU1MzUpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgdG9Mb3dlckNhc2UgPSBzID0+IHMudG9Mb3dlckNhc2UoKVxuXG5jb25zdCB0cmltTGVmdFJlZ2V4ID0gL15cXHMqL2dcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgdHJpbUxlZnQgPSBzID0+IHMucmVwbGFjZSh0cmltTGVmdFJlZ2V4LCAnJylcblxuY29uc3QgZnJvbUNhbWVsQ2FzZVJlZ2V4ID0gLyhbQS1aXSkvZ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VwYXJhdG9yXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tQ2FtZWxDYXNlID0gKHMsIHNlcGFyYXRvcikgPT4gdHJpbUxlZnQocy5yZXBsYWNlKGZyb21DYW1lbENhc2VSZWdleCwgbWF0Y2ggPT4gYCR7c2VwYXJhdG9yfSR7dG9Mb3dlckNhc2UobWF0Y2gpfWApKVxuXG4vKipcbiAqIENvbXB1dGUgdGhlIHV0ZjhCeXRlTGVuZ3RoXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCB1dGY4Qnl0ZUxlbmd0aCA9IHN0ciA9PiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkubGVuZ3RoXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IF9lbmNvZGVVdGY4UG9seWZpbGwgPSBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVkU3RyaW5nID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpXG4gIGNvbnN0IGxlbiA9IGVuY29kZWRTdHJpbmcubGVuZ3RoXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGJ1ZltpXSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoZW5jb2RlZFN0cmluZy5jb2RlUG9pbnRBdChpKSlcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgdXRmOFRleHRFbmNvZGVyID0gLyoqIEB0eXBlIHtUZXh0RW5jb2Rlcn0gKi8gKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgVGV4dEVuY29kZXIoKSA6IG51bGwpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IF9lbmNvZGVVdGY4TmF0aXZlID0gc3RyID0+IHV0ZjhUZXh0RW5jb2Rlci5lbmNvZGUoc3RyKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9IHV0ZjhUZXh0RW5jb2RlciA/IF9lbmNvZGVVdGY4TmF0aXZlIDogX2VuY29kZVV0ZjhQb2x5ZmlsbFxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBfZGVjb2RlVXRmOFBvbHlmaWxsID0gYnVmID0+IHtcbiAgbGV0IHJlbWFpbmluZ0xlbiA9IGJ1Zi5sZW5ndGhcbiAgbGV0IGVuY29kZWRTdHJpbmcgPSAnJ1xuICBsZXQgYnVmUG9zID0gMFxuICB3aGlsZSAocmVtYWluaW5nTGVuID4gMCkge1xuICAgIGNvbnN0IG5leHRMZW4gPSByZW1haW5pbmdMZW4gPCAxMDAwMCA/IHJlbWFpbmluZ0xlbiA6IDEwMDAwXG4gICAgY29uc3QgYnl0ZXMgPSBidWYuc3ViYXJyYXkoYnVmUG9zLCBidWZQb3MgKyBuZXh0TGVuKVxuICAgIGJ1ZlBvcyArPSBuZXh0TGVuXG4gICAgLy8gU3RhcnRpbmcgd2l0aCBFUzUuMSB3ZSBjYW4gc3VwcGx5IGEgZ2VuZXJpYyBhcnJheS1saWtlIG9iamVjdCBhcyBhcmd1bWVudHNcbiAgICBlbmNvZGVkU3RyaW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KG51bGwsIC8qKiBAdHlwZSB7YW55fSAqLyAoYnl0ZXMpKVxuICAgIHJlbWFpbmluZ0xlbiAtPSBuZXh0TGVuXG4gIH1cbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZW5jb2RlZFN0cmluZykpXG59XG5cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgbGV0IHV0ZjhUZXh0RGVjb2RlciA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogbmV3IFRleHREZWNvZGVyKCd1dGYtOCcsIHsgZmF0YWw6IHRydWUsIGlnbm9yZUJPTTogdHJ1ZSB9KVxuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmlmICh1dGY4VGV4dERlY29kZXIgJiYgdXRmOFRleHREZWNvZGVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKS5sZW5ndGggPT09IDEpIHtcbiAgLy8gU2FmYXJpIGRvZXNuJ3QgaGFuZGxlIEJPTSBjb3JyZWN0bHkuXG4gIC8vIFRoaXMgZml4ZXMgYSBidWcgaW4gU2FmYXJpIDEzLjAuNSB3aGVyZSBpdCBwcm9kdWNlcyBhIEJPTSB0aGUgZmlyc3QgdGltZSBpdCBpcyBjYWxsZWQuXG4gIC8vIHV0ZjhUZXh0RGVjb2Rlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSkubGVuZ3RoID09PSAxIG9uIHRoZSBmaXJzdCBjYWxsIGFuZFxuICAvLyB1dGY4VGV4dERlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpLmxlbmd0aCA9PT0gMSBvbiB0aGUgc2Vjb25kIGNhbGxcbiAgLy8gQW5vdGhlciBpc3N1ZSBpcyB0aGF0IGZyb20gdGhlbiBvbiBubyBCT00gY2hhcnMgYXJlIHJlY29nbml6ZWQgYW55bW9yZVxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICB1dGY4VGV4dERlY29kZXIgPSBudWxsXG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBfZGVjb2RlVXRmOE5hdGl2ZSA9IGJ1ZiA9PiAvKiogQHR5cGUge1RleHREZWNvZGVyfSAqLyAodXRmOFRleHREZWNvZGVyKS5kZWNvZGUoYnVmKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9IHV0ZjhUZXh0RGVjb2RlciA/IF9kZWNvZGVVdGY4TmF0aXZlIDogX2RlY29kZVV0ZjhQb2x5ZmlsbFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIGluaXRpYWwgc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggU3RhcnRpbmcgcG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSByZW1vdmUgTnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gcmVtb3ZlXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5zZXJ0IE5ldyBjb250ZW50IHRvIGluc2VydFxuICovXG5leHBvcnQgY29uc3Qgc3BsaWNlID0gKHN0ciwgaW5kZXgsIHJlbW92ZSwgaW5zZXJ0ID0gJycpID0+IHN0ci5zbGljZSgwLCBpbmRleCkgKyBpbnNlcnQgKyBzdHIuc2xpY2UoaW5kZXggKyByZW1vdmUpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGVhdCA9IChzb3VyY2UsIG4pID0+IGFycmF5LnVuZm9sZChuLCAoKSA9PiBzb3VyY2UpLmpvaW4oJycpXG4iLCAiLyoqXG4gKiBFZmZpY2llbnQgc2NoZW1hLWxlc3MgYmluYXJ5IGVuY29kaW5nIHdpdGggc3VwcG9ydCBmb3IgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLlxuICpcbiAqIFVzZSBbbGliMC9lbmNvZGluZ10gd2l0aCBbbGliMC9kZWNvZGluZ10uIEV2ZXJ5IGVuY29kaW5nIGZ1bmN0aW9uIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKlxuICogRW5jb2RlcyBudW1iZXJzIGluIGxpdHRsZS1lbmRpYW4gb3JkZXIgKGxlYXN0IHRvIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvcmRlcilcbiAqIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggR29sYW5nJ3MgYmluYXJ5IGVuY29kaW5nIChodHRwczovL2dvbGFuZy5vcmcvcGtnL2VuY29kaW5nL2JpbmFyeS8pXG4gKiB3aGljaCBpcyBhbHNvIHVzZWQgaW4gUHJvdG9jb2wgQnVmZmVycy5cbiAqXG4gKiBgYGBqc1xuICogLy8gZW5jb2Rpbmcgc3RlcFxuICogY29uc3QgZW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICogZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDI1NilcbiAqIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsICdIZWxsbyB3b3JsZCEnKVxuICogY29uc3QgYnVmID0gZW5jb2RpbmcudG9VaW50OEFycmF5KGVuY29kZXIpXG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogLy8gZGVjb2Rpbmcgc3RlcFxuICogY29uc3QgZGVjb2RlciA9IGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKVxuICogZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikgLy8gPT4gMjU2XG4gKiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpIC8vID0+ICdIZWxsbyB3b3JsZCEnXG4gKiBkZWNvZGluZy5oYXNDb250ZW50KGRlY29kZXIpIC8vID0+IGZhbHNlIC0gYWxsIGRhdGEgaXMgcmVhZFxuICogYGBgXG4gKlxuICogQG1vZHVsZSBlbmNvZGluZ1xuICovXG5cbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgbnVtYmVyIGZyb20gJy4vbnVtYmVyLmpzJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJy4vYmluYXJ5LmpzJ1xuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vc3RyaW5nLmpzJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnLi9hcnJheS5qcydcblxuLyoqXG4gKiBBIEJpbmFyeUVuY29kZXIgaGFuZGxlcyB0aGUgZW5jb2RpbmcgdG8gYW4gVWludDhBcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5jcG9zID0gMFxuICAgIHRoaXMuY2J1ZiA9IG5ldyBVaW50OEFycmF5KDEwMClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8VWludDhBcnJheT59XG4gICAgICovXG4gICAgdGhpcy5idWZzID0gW11cbiAgfVxufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHJldHVybiB7RW5jb2Rlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuY29kZXIgPSAoKSA9PiBuZXcgRW5jb2RlcigpXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbihFbmNvZGVyKTp2b2lkfSBmXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGUgPSAoZikgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gY3JlYXRlRW5jb2RlcigpXG4gIGYoZW5jb2RlcilcbiAgcmV0dXJuIHRvVWludDhBcnJheShlbmNvZGVyKVxufVxuXG4vKipcbiAqIFRoZSBjdXJyZW50IGxlbmd0aCBvZiB0aGUgZW5jb2RlZCBkYXRhLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBsZW5ndGggPSBlbmNvZGVyID0+IHtcbiAgbGV0IGxlbiA9IGVuY29kZXIuY3Bvc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZXIuYnVmcy5sZW5ndGg7IGkrKykge1xuICAgIGxlbiArPSBlbmNvZGVyLmJ1ZnNbaV0ubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGxlblxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgZW5jb2RlciBpcyBlbXB0eS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGhhc0NvbnRlbnQgPSBlbmNvZGVyID0+IGVuY29kZXIuY3BvcyA+IDAgfHwgZW5jb2Rlci5idWZzLmxlbmd0aCA+IDBcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdG8gVWludDhBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHJldHVybiB7VWludDhBcnJheX0gVGhlIGNyZWF0ZWQgQXJyYXlCdWZmZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB0b1VpbnQ4QXJyYXkgPSBlbmNvZGVyID0+IHtcbiAgY29uc3QgdWludDhhcnIgPSBuZXcgVWludDhBcnJheShsZW5ndGgoZW5jb2RlcikpXG4gIGxldCBjdXJQb3MgPSAwXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2Rlci5idWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZCA9IGVuY29kZXIuYnVmc1tpXVxuICAgIHVpbnQ4YXJyLnNldChkLCBjdXJQb3MpXG4gICAgY3VyUG9zICs9IGQubGVuZ3RoXG4gIH1cbiAgdWludDhhcnIuc2V0KG5ldyBVaW50OEFycmF5KGVuY29kZXIuY2J1Zi5idWZmZXIsIDAsIGVuY29kZXIuY3BvcyksIGN1clBvcylcbiAgcmV0dXJuIHVpbnQ4YXJyXG59XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgaXQgaXMgcG9zc2libGUgdG8gd3JpdGUgYGxlbmAgYnl0ZXMgd3RpaG91dCBjaGVja2luZy4gSWZcbiAqIG5lY2Vzc2FyeSwgYSBuZXcgQnVmZmVyIHdpdGggdGhlIHJlcXVpcmVkIGxlbmd0aCBpcyBhdHRhY2hlZC5cbiAqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcmlmeUxlbiA9IChlbmNvZGVyLCBsZW4pID0+IHtcbiAgY29uc3QgYnVmZmVyTGVuID0gZW5jb2Rlci5jYnVmLmxlbmd0aFxuICBpZiAoYnVmZmVyTGVuIC0gZW5jb2Rlci5jcG9zIDwgbGVuKSB7XG4gICAgZW5jb2Rlci5idWZzLnB1c2gobmV3IFVpbnQ4QXJyYXkoZW5jb2Rlci5jYnVmLmJ1ZmZlciwgMCwgZW5jb2Rlci5jcG9zKSlcbiAgICBlbmNvZGVyLmNidWYgPSBuZXcgVWludDhBcnJheShtYXRoLm1heChidWZmZXJMZW4sIGxlbikgKiAyKVxuICAgIGVuY29kZXIuY3BvcyA9IDBcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIHRvIHRoZSBlbmNvZGVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBieXRlIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICBjb25zdCBidWZmZXJMZW4gPSBlbmNvZGVyLmNidWYubGVuZ3RoXG4gIGlmIChlbmNvZGVyLmNwb3MgPT09IGJ1ZmZlckxlbikge1xuICAgIGVuY29kZXIuYnVmcy5wdXNoKGVuY29kZXIuY2J1ZilcbiAgICBlbmNvZGVyLmNidWYgPSBuZXcgVWludDhBcnJheShidWZmZXJMZW4gKiAyKVxuICAgIGVuY29kZXIuY3BvcyA9IDBcbiAgfVxuICBlbmNvZGVyLmNidWZbZW5jb2Rlci5jcG9zKytdID0gbnVtXG59XG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgYXQgYSBzcGVjaWZpYyBwb3NpdGlvbi5cbiAqIFBvc2l0aW9uIG11c3QgYWxyZWFkeSBiZSB3cml0dGVuIChpLmUuIGVuY29kZXIubGVuZ3RoID4gcG9zKVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFBvc2l0aW9uIHRvIHdoaWNoIHRvIHdyaXRlIGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gKGVuY29kZXIsIHBvcywgbnVtKSA9PiB7XG4gIGxldCBidWZmZXIgPSBudWxsXG4gIC8vIGl0ZXJhdGUgYWxsIGJ1ZmZlcnMgYW5kIGFkanVzdCBwb3NpdGlvblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZXIuYnVmcy5sZW5ndGggJiYgYnVmZmVyID09PSBudWxsOyBpKyspIHtcbiAgICBjb25zdCBiID0gZW5jb2Rlci5idWZzW2ldXG4gICAgaWYgKHBvcyA8IGIubGVuZ3RoKSB7XG4gICAgICBidWZmZXIgPSBiIC8vIGZvdW5kIGJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgLT0gYi5sZW5ndGhcbiAgICB9XG4gIH1cbiAgaWYgKGJ1ZmZlciA9PT0gbnVsbCkge1xuICAgIC8vIHVzZSBjdXJyZW50IGJ1ZmZlclxuICAgIGJ1ZmZlciA9IGVuY29kZXIuY2J1ZlxuICB9XG4gIGJ1ZmZlcltwb3NdID0gbnVtXG59XG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDggPSB3cml0ZVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIGFzIGFuIHVuc2lnbmVkIEludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQ4ID0gc2V0XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQxNiA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgd3JpdGUoZW5jb2RlciwgbnVtICYgYmluYXJ5LkJJVFM4KVxuICB3cml0ZShlbmNvZGVyLCAobnVtID4+PiA4KSAmIGJpbmFyeS5CSVRTOClcbn1cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQxNiA9IChlbmNvZGVyLCBwb3MsIG51bSkgPT4ge1xuICBzZXQoZW5jb2RlciwgcG9zLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gIHNldChlbmNvZGVyLCBwb3MgKyAxLCAobnVtID4+PiA4KSAmIGJpbmFyeS5CSVRTOClcbn1cblxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlclxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50MzIgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgbnVtICYgYmluYXJ5LkJJVFM4KVxuICAgIG51bSA+Pj49IDhcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gb3JkZXIuXG4gKiAobW9zdCBzaWduaWZpY2FudCBieXRlIGZpcnN0KVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50MzJCaWdFbmRpYW4gPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGZvciAobGV0IGkgPSAzOyBpID49IDA7IGktLSkge1xuICAgIHdyaXRlKGVuY29kZXIsIChudW0gPj4+ICg4ICogaSkpICYgYmluYXJ5LkJJVFM4KVxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIgYXQgYSBzcGVjaWZpYyBsb2NhdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUaGUgbG9jYXRpb24gd2hlcmUgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFVpbnQzMiA9IChlbmNvZGVyLCBwb3MsIG51bSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHNldChlbmNvZGVyLCBwb3MgKyBpLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gICAgbnVtID4+Pj0gOFxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgYSB2YXJpYWJsZSBsZW5ndGggdW5zaWduZWQgaW50ZWdlci4gTWF4IGVuY29kYWJsZSBpbnRlZ2VyIGlzIDJeNTMuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVZhclVpbnQgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIHdoaWxlIChudW0gPiBiaW5hcnkuQklUUzcpIHtcbiAgICB3cml0ZShlbmNvZGVyLCBiaW5hcnkuQklUOCB8IChiaW5hcnkuQklUUzcgJiBudW0pKVxuICAgIG51bSA9IG1hdGguZmxvb3IobnVtIC8gMTI4KSAvLyBzaGlmdCA+Pj4gN1xuICB9XG4gIHdyaXRlKGVuY29kZXIsIGJpbmFyeS5CSVRTNyAmIG51bSlcbn1cblxuLyoqXG4gKiBXcml0ZSBhIHZhcmlhYmxlIGxlbmd0aCBpbnRlZ2VyLlxuICpcbiAqIFdlIHVzZSB0aGUgN3RoIGJpdCBpbnN0ZWFkIGZvciBzaWduYWxpbmcgdGhhdCB0aGlzIGlzIGEgbmVnYXRpdmUgbnVtYmVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJJbnQgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGNvbnN0IGlzTmVnYXRpdmUgPSBtYXRoLmlzTmVnYXRpdmVaZXJvKG51bSlcbiAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICBudW0gPSAtbnVtXG4gIH1cbiAgLy8gICAgICAgICAgICAgfC0gd2hldGhlciB0byBjb250aW51ZSByZWFkaW5nICAgICAgICAgfC0gd2hldGhlciBpcyBuZWdhdGl2ZSAgICAgfC0gbnVtYmVyXG4gIHdyaXRlKGVuY29kZXIsIChudW0gPiBiaW5hcnkuQklUUzYgPyBiaW5hcnkuQklUOCA6IDApIHwgKGlzTmVnYXRpdmUgPyBiaW5hcnkuQklUNyA6IDApIHwgKGJpbmFyeS5CSVRTNiAmIG51bSkpXG4gIG51bSA9IG1hdGguZmxvb3IobnVtIC8gNjQpIC8vIHNoaWZ0ID4+PiA2XG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gY29uc2lkZXIgdGhlIGNhc2Ugb2YgbnVtID09PSAwIHNvIHdlIGNhbiB1c2UgYSBkaWZmZXJlbnRcbiAgLy8gcGF0dGVybiBoZXJlIHRoYW4gYWJvdmUuXG4gIHdoaWxlIChudW0gPiAwKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgKG51bSA+IGJpbmFyeS5CSVRTNyA/IGJpbmFyeS5CSVQ4IDogMCkgfCAoYmluYXJ5LkJJVFM3ICYgbnVtKSlcbiAgICBudW0gPSBtYXRoLmZsb29yKG51bSAvIDEyOCkgLy8gc2hpZnQgPj4+IDdcbiAgfVxufVxuXG4vKipcbiAqIEEgY2FjaGUgdG8gc3RvcmUgc3RyaW5ncyB0ZW1wb3JhcmlseVxuICovXG5jb25zdCBfc3RyQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMzAwMDApXG5jb25zdCBfbWF4U3RyQlNpemUgPSBfc3RyQnVmZmVyLmxlbmd0aCAvIDNcblxuLyoqXG4gKiBXcml0ZSBhIHZhcmlhYmxlIGxlbmd0aCBzdHJpbmcuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBfd3JpdGVWYXJTdHJpbmdOYXRpdmUgPSAoZW5jb2Rlciwgc3RyKSA9PiB7XG4gIGlmIChzdHIubGVuZ3RoIDwgX21heFN0ckJTaXplKSB7XG4gICAgLy8gV2UgY2FuIGVuY29kZSB0aGUgc3RyaW5nIGludG8gdGhlIGV4aXN0aW5nIGJ1ZmZlclxuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgY29uc3Qgd3JpdHRlbiA9IHN0cmluZy51dGY4VGV4dEVuY29kZXIuZW5jb2RlSW50byhzdHIsIF9zdHJCdWZmZXIpLndyaXR0ZW4gfHwgMFxuICAgIHdyaXRlVmFyVWludChlbmNvZGVyLCB3cml0dGVuKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd3JpdHRlbjsgaSsrKSB7XG4gICAgICB3cml0ZShlbmNvZGVyLCBfc3RyQnVmZmVyW2ldKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2Rlciwgc3RyaW5nLmVuY29kZVV0Zjgoc3RyKSlcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIGEgdmFyaWFibGUgbGVuZ3RoIHN0cmluZy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IF93cml0ZVZhclN0cmluZ1BvbHlmaWxsID0gKGVuY29kZXIsIHN0cikgPT4ge1xuICBjb25zdCBlbmNvZGVkU3RyaW5nID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpXG4gIGNvbnN0IGxlbiA9IGVuY29kZWRTdHJpbmcubGVuZ3RoXG4gIHdyaXRlVmFyVWludChlbmNvZGVyLCBsZW4pXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB3cml0ZShlbmNvZGVyLCAvKiogQHR5cGUge251bWJlcn0gKi8gKGVuY29kZWRTdHJpbmcuY29kZVBvaW50QXQoaSkpKVxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgYSB2YXJpYWJsZSBsZW5ndGggc3RyaW5nLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG4vKiBjOCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVmFyU3RyaW5nID0gKHN0cmluZy51dGY4VGV4dEVuY29kZXIgJiYgLyoqIEB0eXBlIHthbnl9ICovIChzdHJpbmcudXRmOFRleHRFbmNvZGVyKS5lbmNvZGVJbnRvKSA/IF93cml0ZVZhclN0cmluZ05hdGl2ZSA6IF93cml0ZVZhclN0cmluZ1BvbHlmaWxsXG5cbi8qKlxuICogV3JpdGUgYSBzdHJpbmcgdGVybWluYXRlZCBieSBhIHNwZWNpYWwgYnl0ZSBzZXF1ZW5jZS4gVGhpcyBpcyBub3QgdmVyeSBwZXJmb3JtYW50IGFuZCBpc1xuICogZ2VuZXJhbGx5IGRpc2NvdXJhZ2VkLiBIb3dldmVyLCB0aGUgcmVzdWx0aW5nIGJ5dGUgYXJyYXlzIGFyZSBsZXhpb2dyYXBoaWNhbGx5IG9yZGVyZWQgd2hpY2hcbiAqIG1ha2VzIHRoaXMgYSBuaWNlIGZlYXR1cmUgZm9yIGRhdGFiYXNlcy5cbiAqXG4gKiBUaGUgc3RyaW5nIHdpbGwgYmUgZW5jb2RlZCB1c2luZyB1dGY4IGFuZCB0aGVuIHRlcm1pbmF0ZWQgYW5kIGVzY2FwZWQgdXNpbmcgd3JpdGVUZXJtaW5hdGluZ1VpbnQ4QXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVRlcm1pbmF0ZWRTdHJpbmcgPSAoZW5jb2Rlciwgc3RyKSA9PlxuICB3cml0ZVRlcm1pbmF0ZWRVaW50OEFycmF5KGVuY29kZXIsIHN0cmluZy5lbmNvZGVVdGY4KHN0cikpXG5cbi8qKlxuICogV3JpdGUgYSB0ZXJtaW5hdGluZyBVaW50OEFycmF5LiBOb3RlIHRoYXQgdGhpcyBpcyBub3QgcGVyZm9ybWFudCBhbmQgaXMgZ2VuZXJhbGx5XG4gKiBkaXNjb3VyYWdlZC4gVGhlcmUgYXJlIGZldyBzaXR1YXRpb25zIHdoZW4gdGhpcyBpcyBuZWVkZWQuXG4gKlxuICogV2UgdXNlIDB4MCBhcyBhIHRlcm1pbmF0aW5nIGNoYXJhY3Rlci4gMHgxIHNlcnZlcyBhcyBhbiBlc2NhcGUgY2hhcmFjdGVyIGZvciAweDAgYW5kIDB4MS5cbiAqXG4gKiBFeGFtcGxlOiBbMCwxLDJdIGlzIGVuY29kZWQgdG8gWzEsMCwxLDEsMiwwXS4gMHgwLCBhbmQgMHgxIG5lZWRlZCB0byBiZSBlc2NhcGVkIHVzaW5nIDB4MS4gVGhlblxuICogdGhlIHJlc3VsdCBpcyB0ZXJtaW5hdGVkIHVzaW5nIHRoZSAweDAgY2hhcmFjdGVyLlxuICpcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGhvdyBtYW55IHN5c3RlbXMgaW1wbGVtZW50IG51bGwgdGVybWluYXRlZCBzdHJpbmdzLiBIb3dldmVyLCB3ZSB1c2UgYW4gZXNjYXBlXG4gKiBjaGFyYWN0ZXIgMHgxIHRvIGF2b2lkIGlzc3VlcyBhbmQgcG90ZW5pYWwgYXR0YWNrcyBvbiBvdXIgZGF0YWJhc2UgKGlmIHRoaXMgaXMgdXNlZCBhcyBhIGtleVxuICogZW5jb2RlciBmb3IgTm9TcWwgZGF0YWJhc2VzKS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWYgVGhlIHN0cmluZyB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVRlcm1pbmF0ZWRVaW50OEFycmF5ID0gKGVuY29kZXIsIGJ1ZikgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGIgPSBidWZbaV1cbiAgICBpZiAoYiA9PT0gMCB8fCBiID09PSAxKSB7XG4gICAgICB3cml0ZShlbmNvZGVyLCAxKVxuICAgIH1cbiAgICB3cml0ZShlbmNvZGVyLCBidWZbaV0pXG4gIH1cbiAgd3JpdGUoZW5jb2RlciwgMClcbn1cblxuLyoqXG4gKiBXcml0ZSB0aGUgY29udGVudCBvZiBhbm90aGVyIEVuY29kZXIuXG4gKlxuICogQFRPRE86IGNhbiBiZSBpbXByb3ZlZCFcbiAqICAgICAgICAtIE5vdGU6IFNob3VsZCBjb25zaWRlciB0aGF0IHdoZW4gYXBwZW5kaW5nIGEgbG90IG9mIHNtYWxsIEVuY29kZXJzLCB3ZSBzaG91bGQgcmF0aGVyIGNsb25lIHRoYW4gcmVmZXJlbmNpbmcgdGhlIG9sZCBzdHJ1Y3R1cmUuXG4gKiAgICAgICAgICAgICAgICBFbmNvZGVycyBzdGFydCB3aXRoIGEgcmF0aGVyIGJpZyBpbml0aWFsIGJ1ZmZlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlciBUaGUgZW5VaW50OEFyclxuICogQHBhcmFtIHtFbmNvZGVyfSBhcHBlbmQgVGhlIEJpbmFyeUVuY29kZXIgdG8gYmUgd3JpdHRlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQmluYXJ5RW5jb2RlciA9IChlbmNvZGVyLCBhcHBlbmQpID0+IHdyaXRlVWludDhBcnJheShlbmNvZGVyLCB0b1VpbnQ4QXJyYXkoYXBwZW5kKSlcblxuLyoqXG4gKiBBcHBlbmQgZml4ZWQtbGVuZ3RoIFVpbnQ4QXJyYXkgdG8gdGhlIGVuY29kZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50OEFycmF5ID0gKGVuY29kZXIsIHVpbnQ4QXJyYXkpID0+IHtcbiAgY29uc3QgYnVmZmVyTGVuID0gZW5jb2Rlci5jYnVmLmxlbmd0aFxuICBjb25zdCBjcG9zID0gZW5jb2Rlci5jcG9zXG4gIGNvbnN0IGxlZnRDb3B5TGVuID0gbWF0aC5taW4oYnVmZmVyTGVuIC0gY3BvcywgdWludDhBcnJheS5sZW5ndGgpXG4gIGNvbnN0IHJpZ2h0Q29weUxlbiA9IHVpbnQ4QXJyYXkubGVuZ3RoIC0gbGVmdENvcHlMZW5cbiAgZW5jb2Rlci5jYnVmLnNldCh1aW50OEFycmF5LnN1YmFycmF5KDAsIGxlZnRDb3B5TGVuKSwgY3BvcylcbiAgZW5jb2Rlci5jcG9zICs9IGxlZnRDb3B5TGVuXG4gIGlmIChyaWdodENvcHlMZW4gPiAwKSB7XG4gICAgLy8gU3RpbGwgc29tZXRoaW5nIHRvIHdyaXRlLCB3cml0ZSByaWdodCBoYWxmLi5cbiAgICAvLyBBcHBlbmQgbmV3IGJ1ZmZlclxuICAgIGVuY29kZXIuYnVmcy5wdXNoKGVuY29kZXIuY2J1ZilcbiAgICAvLyBtdXN0IGhhdmUgYXQgbGVhc3Qgc2l6ZSBvZiByZW1haW5pbmcgYnVmZmVyXG4gICAgZW5jb2Rlci5jYnVmID0gbmV3IFVpbnQ4QXJyYXkobWF0aC5tYXgoYnVmZmVyTGVuICogMiwgcmlnaHRDb3B5TGVuKSlcbiAgICAvLyBjb3B5IGFycmF5XG4gICAgZW5jb2Rlci5jYnVmLnNldCh1aW50OEFycmF5LnN1YmFycmF5KGxlZnRDb3B5TGVuKSlcbiAgICBlbmNvZGVyLmNwb3MgPSByaWdodENvcHlMZW5cbiAgfVxufVxuXG4vKipcbiAqIEFwcGVuZCBhbiBVaW50OEFycmF5IHRvIEVuY29kZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJVaW50OEFycmF5ID0gKGVuY29kZXIsIHVpbnQ4QXJyYXkpID0+IHtcbiAgd3JpdGVWYXJVaW50KGVuY29kZXIsIHVpbnQ4QXJyYXkuYnl0ZUxlbmd0aClcbiAgd3JpdGVVaW50OEFycmF5KGVuY29kZXIsIHVpbnQ4QXJyYXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIERhdGFWaWV3IG9mIHRoZSBuZXh0IGBsZW5gIGJ5dGVzLiBVc2UgaXQgdG8gd3JpdGUgZGF0YSBhZnRlclxuICogY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAvLyB3cml0ZSBmbG9hdDMyIHVzaW5nIERhdGFWaWV3XG4gKiBjb25zdCBkdiA9IHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA0KVxuICogZHYuc2V0RmxvYXQzMigwLCAxLjEpXG4gKiAvLyByZWFkIGZsb2F0MzIgdXNpbmcgRGF0YVZpZXdcbiAqIGNvbnN0IGR2ID0gcmVhZEZyb21EYXRhVmlldyhlbmNvZGVyLCA0KVxuICogZHYuZ2V0RmxvYXQzMigwKSAvLyA9PiAxLjEwMDAwMDAyMzg0MTg1OCAobGVhdmluZyBpdCB0byB0aGUgcmVhZGVyIHRvIGZpbmQgb3V0IHdoeSB0aGlzIGlzIHRoZSBjb3JyZWN0IHJlc3VsdClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHJldHVybiB7RGF0YVZpZXd9XG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZU9uRGF0YVZpZXcgPSAoZW5jb2RlciwgbGVuKSA9PiB7XG4gIHZlcmlmeUxlbihlbmNvZGVyLCBsZW4pXG4gIGNvbnN0IGR2aWV3ID0gbmV3IERhdGFWaWV3KGVuY29kZXIuY2J1Zi5idWZmZXIsIGVuY29kZXIuY3BvcywgbGVuKVxuICBlbmNvZGVyLmNwb3MgKz0gbGVuXG4gIHJldHVybiBkdmlld1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVGbG9hdDMyID0gKGVuY29kZXIsIG51bSkgPT4gd3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDQpLnNldEZsb2F0MzIoMCwgbnVtLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlRmxvYXQ2NCA9IChlbmNvZGVyLCBudW0pID0+IHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA4KS5zZXRGbG9hdDY0KDAsIG51bSwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge2JpZ2ludH0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUJpZ0ludDY0ID0gKGVuY29kZXIsIG51bSkgPT4gLyoqIEB0eXBlIHthbnl9ICovICh3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgOCkpLnNldEJpZ0ludDY0KDAsIG51bSwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge2JpZ2ludH0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUJpZ1VpbnQ2NCA9IChlbmNvZGVyLCBudW0pID0+IC8qKiBAdHlwZSB7YW55fSAqLyAod3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDgpKS5zZXRCaWdVaW50NjQoMCwgbnVtLCBmYWxzZSlcblxuY29uc3QgZmxvYXRUZXN0QmVkID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig0KSlcbi8qKlxuICogQ2hlY2sgaWYgYSBudW1iZXIgY2FuIGJlIGVuY29kZWQgYXMgYSAzMiBiaXQgZmxvYXQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNGbG9hdDMyID0gbnVtID0+IHtcbiAgZmxvYXRUZXN0QmVkLnNldEZsb2F0MzIoMCwgbnVtKVxuICByZXR1cm4gZmxvYXRUZXN0QmVkLmdldEZsb2F0MzIoMCkgPT09IG51bVxufVxuXG4vKipcbiAqIEVuY29kZSBkYXRhIHdpdGggZWZmaWNpZW50IGJpbmFyeSBmb3JtYXQuXG4gKlxuICogRGlmZmVyZW5jZXMgdG8gSlNPTjpcbiAqIFx1MjAyMiBUcmFuc2Zvcm1zIGRhdGEgdG8gYSBiaW5hcnkgZm9ybWF0IChub3QgdG8gYSBzdHJpbmcpXG4gKiBcdTIwMjIgRW5jb2RlcyB1bmRlZmluZWQsIE5hTiwgYW5kIEFycmF5QnVmZmVyICh0aGVzZSBjYW4ndCBiZSByZXByZXNlbnRlZCBpbiBKU09OKVxuICogXHUyMDIyIE51bWJlcnMgYXJlIGVmZmljaWVudGx5IGVuY29kZWQgZWl0aGVyIGFzIGEgdmFyaWFibGUgbGVuZ3RoIGludGVnZXIsIGFzIGFcbiAqICAgMzIgYml0IGZsb2F0LCBhcyBhIDY0IGJpdCBmbG9hdCwgb3IgYXMgYSA2NCBiaXQgYmlnaW50LlxuICpcbiAqIEVuY29kaW5nIHRhYmxlOlxuICpcbiAqIHwgRGF0YSBUeXBlICAgICAgICAgICB8IFByZWZpeCAgIHwgRW5jb2RpbmcgTWV0aG9kICAgIHwgQ29tbWVudCB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfFxuICogfCB1bmRlZmluZWQgICAgICAgICAgIHwgMTI3ICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCBGdW5jdGlvbnMsIHN5bWJvbCwgYW5kIGV2ZXJ5dGhpbmcgdGhhdCBjYW5ub3QgYmUgaWRlbnRpZmllZCBpcyBlbmNvZGVkIGFzIHVuZGVmaW5lZCB8XG4gKiB8IG51bGwgICAgICAgICAgICAgICAgfCAxMjYgICAgICB8ICAgICAgICAgICAgICAgICAgICB8IHxcbiAqIHwgaW50ZWdlciAgICAgICAgICAgICB8IDEyNSAgICAgIHwgd3JpdGVWYXJJbnQgICAgICAgIHwgT25seSBlbmNvZGVzIDMyIGJpdCBzaWduZWQgaW50ZWdlcnMgfFxuICogfCBmbG9hdDMyICAgICAgICAgICAgIHwgMTI0ICAgICAgfCB3cml0ZUZsb2F0MzIgICAgICAgfCB8XG4gKiB8IGZsb2F0NjQgICAgICAgICAgICAgfCAxMjMgICAgICB8IHdyaXRlRmxvYXQ2NCAgICAgICB8IHxcbiAqIHwgYmlnaW50ICAgICAgICAgICAgICB8IDEyMiAgICAgIHwgd3JpdGVCaWdJbnQ2NCAgICAgIHwgfFxuICogfCBib29sZWFuIChmYWxzZSkgICAgIHwgMTIxICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCBUcnVlIGFuZCBmYWxzZSBhcmUgZGlmZmVyZW50IGRhdGEgdHlwZXMgc28gd2Ugc2F2ZSB0aGUgZm9sbG93aW5nIGJ5dGUgfFxuICogfCBib29sZWFuICh0cnVlKSAgICAgIHwgMTIwICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCAtIDBiMDExMTEwMDAgc28gdGhlIGxhc3QgYml0IGRldGVybWluZXMgd2hldGhlciB0cnVlIG9yIGZhbHNlIHxcbiAqIHwgc3RyaW5nICAgICAgICAgICAgICB8IDExOSAgICAgIHwgd3JpdGVWYXJTdHJpbmcgICAgIHwgfFxuICogfCBvYmplY3Q8c3RyaW5nLGFueT4gIHwgMTE4ICAgICAgfCBjdXN0b20gICAgICAgICAgICAgfCBXcml0ZXMge2xlbmd0aH0gdGhlbiB7bGVuZ3RofSBrZXktdmFsdWUgcGFpcnMgfFxuICogfCBhcnJheTxhbnk+ICAgICAgICAgIHwgMTE3ICAgICAgfCBjdXN0b20gICAgICAgICAgICAgfCBXcml0ZXMge2xlbmd0aH0gdGhlbiB7bGVuZ3RofSBqc29uIHZhbHVlcyB8XG4gKiB8IFVpbnQ4QXJyYXkgICAgICAgICAgfCAxMTYgICAgICB8IHdyaXRlVmFyVWludDhBcnJheSB8IFdlIHVzZSBVaW50OEFycmF5IGZvciBhbnkga2luZCBvZiBiaW5hcnkgZGF0YSB8XG4gKlxuICogUmVhc29ucyBmb3IgdGhlIGRlY3JlYXNpbmcgcHJlZml4OlxuICogV2UgbmVlZCB0aGUgZmlyc3QgYml0IGZvciBleHRlbmRhYmlsaXR5IChsYXRlciB3ZSBtYXkgd2FudCB0byBlbmNvZGUgdGhlXG4gKiBwcmVmaXggd2l0aCB3cml0ZVZhclVpbnQpLiBUaGUgcmVtYWluaW5nIDcgYml0cyBhcmUgZGl2aWRlZCBhcyBmb2xsb3dzOlxuICogWzAtMzBdICAgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGF0YSByYW5nZSBpcyB1c2VkIGZvciBjdXN0b20gcHVycG9zZXNcbiAqICAgICAgICAgIChkZWZpbmVkIGJ5IHRoZSBmdW5jdGlvbiB0aGF0IHVzZXMgdGhpcyBsaWJyYXJ5KVxuICogWzMxLTEyN10gdGhlIGVuZCBvZiB0aGUgZGF0YSByYW5nZSBpcyB1c2VkIGZvciBkYXRhIGVuY29kaW5nIGJ5XG4gKiAgICAgICAgICBsaWIwL2VuY29kaW5nLmpzXG4gKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge3VuZGVmaW5lZHxudWxsfG51bWJlcnxiaWdpbnR8Ym9vbGVhbnxzdHJpbmd8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58VWludDhBcnJheX0gZGF0YVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVBbnkgPSAoZW5jb2RlciwgZGF0YSkgPT4ge1xuICBzd2l0Y2ggKHR5cGVvZiBkYXRhKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIC8vIFRZUEUgMTE5OiBTVFJJTkdcbiAgICAgIHdyaXRlKGVuY29kZXIsIDExOSlcbiAgICAgIHdyaXRlVmFyU3RyaW5nKGVuY29kZXIsIGRhdGEpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAobnVtYmVyLmlzSW50ZWdlcihkYXRhKSAmJiBtYXRoLmFicyhkYXRhKSA8PSBiaW5hcnkuQklUUzMxKSB7XG4gICAgICAgIC8vIFRZUEUgMTI1OiBJTlRFR0VSXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyNSlcbiAgICAgICAgd3JpdGVWYXJJbnQoZW5jb2RlciwgZGF0YSlcbiAgICAgIH0gZWxzZSBpZiAoaXNGbG9hdDMyKGRhdGEpKSB7XG4gICAgICAgIC8vIFRZUEUgMTI0OiBGTE9BVDMyXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyNClcbiAgICAgICAgd3JpdGVGbG9hdDMyKGVuY29kZXIsIGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUWVBFIDEyMzogRkxPQVQ2NFxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMjMpXG4gICAgICAgIHdyaXRlRmxvYXQ2NChlbmNvZGVyLCBkYXRhKVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgLy8gVFlQRSAxMjI6IEJpZ0ludFxuICAgICAgd3JpdGUoZW5jb2RlciwgMTIyKVxuICAgICAgd3JpdGVCaWdJbnQ2NChlbmNvZGVyLCBkYXRhKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVFlQRSAxMjY6IG51bGxcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTI2KVxuICAgICAgfSBlbHNlIGlmIChhcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIC8vIFRZUEUgMTE3OiBBcnJheVxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMTcpXG4gICAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLCBkYXRhLmxlbmd0aClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd3JpdGVBbnkoZW5jb2RlciwgZGF0YVtpXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAvLyBUWVBFIDExNjogQXJyYXlCdWZmZXJcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTE2KVxuICAgICAgICB3cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRZUEUgMTE4OiBPYmplY3RcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTE4KVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcbiAgICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIsIGtleXMubGVuZ3RoKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldXG4gICAgICAgICAgd3JpdGVWYXJTdHJpbmcoZW5jb2Rlciwga2V5KVxuICAgICAgICAgIHdyaXRlQW55KGVuY29kZXIsIGRhdGFba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIC8vIFRZUEUgMTIwLzEyMTogYm9vbGVhbiAodHJ1ZS9mYWxzZSlcbiAgICAgIHdyaXRlKGVuY29kZXIsIGRhdGEgPyAxMjAgOiAxMjEpXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBUWVBFIDEyNzogdW5kZWZpbmVkXG4gICAgICB3cml0ZShlbmNvZGVyLCAxMjcpXG4gIH1cbn1cblxuLyoqXG4gKiBOb3cgY29tZSBhIGZldyBzdGF0ZWZ1bCBlbmNvZGVyIHRoYXQgaGF2ZSB0aGVpciBvd24gY2xhc3Nlcy5cbiAqL1xuXG4vKipcbiAqIEJhc2ljIFJ1biBMZW5ndGggRW5jb2RlciAtIGEgYmFzaWMgY29tcHJlc3Npb24gaW1wbGVtZW50YXRpb24uXG4gKlxuICogRW5jb2RlcyBbMSwxLDEsN10gdG8gWzEsMyw3LDFdICgzIHRpbWVzIDEsIDEgdGltZSA3KS4gVGhpcyBlbmNvZGVyIG1pZ2h0IGRvIG1vcmUgaGFybSB0aGFuIGdvb2QgaWYgdGhlcmUgYXJlIGEgbG90IG9mIHZhbHVlcyB0aGF0IGFyZSBub3QgcmVwZWF0ZWQuXG4gKlxuICogSXQgd2FzIG9yaWdpbmFsbHkgdXNlZCBmb3IgaW1hZ2UgY29tcHJlc3Npb24uIENvb2wgLi4gYXJ0aWNsZSBodHRwOi8vY3NicnVjZS5jb20vY2JtL3RyYW5zYWN0b3IvcGRmcy90cmFuc192N19pMDYucGRmXG4gKlxuICogQG5vdGUgVCBtdXN0IG5vdCBiZSBudWxsIVxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBSbGVFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEVuY29kZXIsIFQpOnZvaWR9IHdyaXRlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKHdyaXRlcikge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBUaGUgd3JpdGVyXG4gICAgICovXG4gICAgdGhpcy53ID0gd3JpdGVyXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtUfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zID0gbnVsbFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgPT09IHYpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgLy8gZmx1c2ggY291bnRlciwgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IHZhbHVlIChjb3VudCA9IDApXG4gICAgICAgIHdyaXRlVmFyVWludCh0aGlzLCB0aGlzLmNvdW50IC0gMSkgLy8gc2luY2UgY291bnQgaXMgYWx3YXlzID4gMCwgd2UgY2FuIGRlY3JlbWVudCBieSBvbmUuIG5vbi1zdGFuZGFyZCBlbmNvZGluZyBmdHdcbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICAvLyB3cml0ZSBmaXJzdCB2YWx1ZVxuICAgICAgdGhpcy53KHRoaXMsIHYpXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQmFzaWMgZGlmZiBkZWNvZGVyIHVzaW5nIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy5cbiAqXG4gKiBFbmNvZGVzIHRoZSB2YWx1ZXMgWzMsIDExMDAsIDExMDEsIDEwNTAsIDBdIHRvIFszLCAxMDk3LCAxLCAtNTEsIC0xMDUwXSB1c2luZyB3cml0ZVZhckludC5cbiAqL1xuZXhwb3J0IGNsYXNzIEludERpZmZFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdGFydCkge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIHdyaXRlVmFySW50KHRoaXMsIHYgLSB0aGlzLnMpXG4gICAgdGhpcy5zID0gdlxuICB9XG59XG5cbi8qKlxuICogQSBjb21iaW5hdGlvbiBvZiBJbnREaWZmRW5jb2RlciBhbmQgUmxlRW5jb2Rlci5cbiAqXG4gKiBCYXNpY2FsbHkgZmlyc3Qgd3JpdGVzIHRoZSBJbnREaWZmRW5jb2RlciBhbmQgdGhlbiBjb3VudHMgZHVwbGljYXRlIGRpZmZzIHVzaW5nIFJsZUVuY29kaW5nLlxuICpcbiAqIEVuY29kZXMgdGhlIHZhbHVlcyBbMSwxLDEsMiwzLDQsNSw2XSBhcyBbMSwxLDAsMiwxLDVdIChSTEUoWzEsMCwwLDEsMSwxLDEsMV0pIFx1MjFEMiBSbGVJbnREaWZmWzEsMSwwLDIsMSw1XSlcbiAqL1xuZXhwb3J0IGNsYXNzIFJsZUludERpZmZFbmNvZGVyIGV4dGVuZHMgRW5jb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdGFydCkge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMucyA9PT0gdiAmJiB0aGlzLmNvdW50ID4gMCkge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNvdW50ID4gMCkge1xuICAgICAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAgICAgd3JpdGVWYXJVaW50KHRoaXMsIHRoaXMuY291bnQgLSAxKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAwLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgICAgfVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIC8vIHdyaXRlIGZpcnN0IHZhbHVlXG4gICAgICB3cml0ZVZhckludCh0aGlzLCB2IC0gdGhpcy5zKVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludE9wdFJsZUVuY29kZXJ9IGVuY29kZXJcbiAqL1xuY29uc3QgZmx1c2hVaW50T3B0UmxlRW5jb2RlciA9IGVuY29kZXIgPT4ge1xuICBpZiAoZW5jb2Rlci5jb3VudCA+IDApIHtcbiAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAvLyBjYXNlIDE6IGp1c3QgYSBzaW5nbGUgdmFsdWUuIHNldCBzaWduIHRvIHBvc2l0aXZlXG4gICAgLy8gY2FzZSAyOiB3cml0ZSBzZXZlcmFsIHZhbHVlcy4gc2V0IHNpZ24gdG8gbmVnYXRpdmUgdG8gaW5kaWNhdGUgdGhhdCB0aGVyZSBpcyBhIGxlbmd0aCBjb21pbmdcbiAgICB3cml0ZVZhckludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZXIuY291bnQgPT09IDEgPyBlbmNvZGVyLnMgOiAtZW5jb2Rlci5zKVxuICAgIGlmIChlbmNvZGVyLmNvdW50ID4gMSkge1xuICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIuZW5jb2RlciwgZW5jb2Rlci5jb3VudCAtIDIpIC8vIHNpbmNlIGNvdW50IGlzIGFsd2F5cyA+IDEsIHdlIGNhbiBkZWNyZW1lbnQgYnkgb25lLiBub24tc3RhbmRhcmQgZW5jb2RpbmcgZnR3XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogT3B0aW1pemVkIFJsZSBlbmNvZGVyIHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb20gdGhlIG1lbnRpb25lZCBwcm9ibGVtIG9mIHRoZSBiYXNpYyBSbGUgZW5jb2Rlci5cbiAqXG4gKiBJbnRlcm5hbGx5IHVzZXMgVmFySW50IGVuY29kZXIgdG8gd3JpdGUgdW5zaWduZWQgaW50ZWdlcnMuIElmIHRoZSBpbnB1dCBvY2N1cnMgbXVsdGlwbGUgdGltZXMsIHdlIHdyaXRlXG4gKiB3cml0ZSBpdCBhcyBhIG5lZ2F0aXZlIG51bWJlci4gVGhlIFVpbnRPcHRSbGVEZWNvZGVyIHRoZW4gdW5kZXJzdGFuZHMgdGhhdCBpdCBuZWVkcyB0byByZWFkIGEgY291bnQuXG4gKlxuICogRW5jb2RlcyBbMSwyLDMsMywzXSBhcyBbMSwyLC0zLDNdIChvbmNlIDEsIG9uY2UgMiwgdGhyZWUgdGltZXMgMylcbiAqL1xuZXhwb3J0IGNsYXNzIFVpbnRPcHRSbGVFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgPT09IHYpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGbHVzaCB0aGUgZW5jb2RlZCBzdGF0ZSBhbmQgdHJhbnNmb3JtIHRoaXMgdG8gYSBVaW50OEFycmF5LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZS5cbiAgICovXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkodGhpcy5lbmNvZGVyKVxuICB9XG59XG5cbi8qKlxuICogSW5jcmVhc2luZyBVaW50IE9wdGltaXplZCBSTEUgRW5jb2RlclxuICpcbiAqIFRoZSBSTEUgZW5jb2RlciBjb3VudHMgdGhlIG51bWJlciBvZiBzYW1lIG9jY3VyZW5jZXMgb2YgdGhlIHNhbWUgdmFsdWUuXG4gKiBUaGUgSW5jVWludE9wdFJsZSBlbmNvZGVyIGNvdW50cyBpZiB0aGUgdmFsdWUgaW5jcmVhc2VzLlxuICogSS5lLiA3LCA4LCA5LCAxMCB3aWxsIGJlIGVuY29kZWQgYXMgWy03LCA0XS4gMSwgMywgNSB3aWxsIGJlIGVuY29kZWRcbiAqIGFzIFsxLCAzLCA1XS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluY1VpbnRPcHRSbGVFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgKyB0aGlzLmNvdW50ID09PSB2KSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggdGhlIGVuY29kZWQgc3RhdGUgYW5kIHRyYW5zZm9ybSB0aGlzIHRvIGEgVWludDhBcnJheS5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uY2UuXG4gICAqL1xuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGZsdXNoVWludE9wdFJsZUVuY29kZXIodGhpcylcbiAgICByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMuZW5jb2RlcilcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SW50RGlmZk9wdFJsZUVuY29kZXJ9IGVuY29kZXJcbiAqL1xuY29uc3QgZmx1c2hJbnREaWZmT3B0UmxlRW5jb2RlciA9IGVuY29kZXIgPT4ge1xuICBpZiAoZW5jb2Rlci5jb3VudCA+IDApIHtcbiAgICAvLyAgICAgICAgICAzMSBiaXQgbWFraW5nIHVwIHRoZSBkaWZmIHwgd2V0aGVyIHRvIHdyaXRlIHRoZSBjb3VudGVyXG4gICAgLy8gY29uc3QgZW5jb2RlZERpZmYgPSBlbmNvZGVyLmRpZmYgPDwgMSB8IChlbmNvZGVyLmNvdW50ID09PSAxID8gMCA6IDEpXG4gICAgY29uc3QgZW5jb2RlZERpZmYgPSBlbmNvZGVyLmRpZmYgKiAyICsgKGVuY29kZXIuY291bnQgPT09IDEgPyAwIDogMSlcbiAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAvLyBjYXNlIDE6IGp1c3QgYSBzaW5nbGUgdmFsdWUuIHNldCBmaXJzdCBiaXQgdG8gcG9zaXRpdmVcbiAgICAvLyBjYXNlIDI6IHdyaXRlIHNldmVyYWwgdmFsdWVzLiBzZXQgZmlyc3QgYml0IHRvIG5lZ2F0aXZlIHRvIGluZGljYXRlIHRoYXQgdGhlcmUgaXMgYSBsZW5ndGggY29taW5nXG4gICAgd3JpdGVWYXJJbnQoZW5jb2Rlci5lbmNvZGVyLCBlbmNvZGVkRGlmZilcbiAgICBpZiAoZW5jb2Rlci5jb3VudCA+IDEpIHtcbiAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZXIuY291bnQgLSAyKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAxLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgY29tYmluYXRpb24gb2YgdGhlIEludERpZmZFbmNvZGVyIGFuZCB0aGUgVWludE9wdFJsZUVuY29kZXIuXG4gKlxuICogVGhlIGNvdW50IGFwcHJvYWNoIGlzIHNpbWlsYXIgdG8gdGhlIFVpbnREaWZmT3B0UmxlRW5jb2RlciwgYnV0IGluc3RlYWQgb2YgdXNpbmcgdGhlIG5lZ2F0aXZlIGJpdGZsYWcsIGl0IGVuY29kZXNcbiAqIGluIHRoZSBMU0Igd2hldGhlciBhIGNvdW50IGlzIHRvIGJlIHJlYWQuIFRoZXJlZm9yZSB0aGlzIEVuY29kZXIgb25seSBzdXBwb3J0cyAzMSBiaXQgaW50ZWdlcnMhXG4gKlxuICogRW5jb2RlcyBbMSwgMiwgMywgMl0gYXMgWzMsIDEsIDYsIC0xXSAobW9yZSBzcGVjaWZpY2FsbHkgWygxIDw8IDEpIHwgMSwgKDMgPDwgMCkgfCAwLCAtMV0pXG4gKlxuICogSW50ZXJuYWxseSB1c2VzIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy4gQ29udHJhcnkgdG8gbm9ybWFsIFVpbnRWYXIgZW5jb2RpbmcsIHRoZSBmaXJzdCBieXRlIGNvbnRhaW5zOlxuICogKiAxIGJpdCB0aGF0IGRlbm90ZXMgd2hldGhlciB0aGUgbmV4dCB2YWx1ZSBpcyBhIGNvdW50IChMU0IpXG4gKiAqIDEgYml0IHRoYXQgZGVub3RlcyB3aGV0aGVyIHRoaXMgdmFsdWUgaXMgbmVnYXRpdmUgKE1TQiAtIDEpXG4gKiAqIDEgYml0IHRoYXQgZGVub3RlcyB3aGV0aGVyIHRvIGNvbnRpbnVlIHJlYWRpbmcgdGhlIHZhcmlhYmxlIGxlbmd0aCBpbnRlZ2VyIChNU0IpXG4gKlxuICogVGhlcmVmb3JlLCBvbmx5IGZpdmUgYml0cyByZW1haW4gdG8gZW5jb2RlIGRpZmYgcmFuZ2VzLlxuICpcbiAqIFVzZSB0aGlzIEVuY29kZXIgb25seSB3aGVuIGFwcHJvcHJpYXRlLiBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIHByb2JhYmx5IGEgYmFkIGlkZWEuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnREaWZmT3B0UmxlRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgICB0aGlzLmRpZmYgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMuZGlmZiA9PT0gdiAtIHRoaXMucykge1xuICAgICAgdGhpcy5zID0gdlxuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGZsdXNoSW50RGlmZk9wdFJsZUVuY29kZXIodGhpcylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICB0aGlzLmRpZmYgPSB2IC0gdGhpcy5zXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHRoZSBlbmNvZGVkIHN0YXRlIGFuZCB0cmFuc2Zvcm0gdGhpcyB0byBhIFVpbnQ4QXJyYXkuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlLlxuICAgKi9cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBmbHVzaEludERpZmZPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzLmVuY29kZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpbWl6ZWQgU3RyaW5nIEVuY29kZXIuXG4gKlxuICogRW5jb2RpbmcgbWFueSBzbWFsbCBzdHJpbmdzIGluIGEgc2ltcGxlIEVuY29kZXIgaXMgbm90IHZlcnkgZWZmaWNpZW50LiBUaGUgZnVuY3Rpb24gY2FsbCB0byBkZWNvZGUgYSBzdHJpbmcgdGFrZXMgc29tZSB0aW1lIGFuZCBjcmVhdGVzIHJlZmVyZW5jZXMgdGhhdCBtdXN0IGJlIGV2ZW50dWFsbHkgZGVsZXRlZC5cbiAqIEluIHByYWN0aWNlLCB3aGVuIGRlY29kaW5nIHNldmVyYWwgbWlsbGlvbiBzbWFsbCBzdHJpbmdzLCB0aGUgR0Mgd2lsbCBraWNrIGluIG1vcmUgYW5kIG1vcmUgb2Z0ZW4gdG8gY29sbGVjdCBvcnBoYW5lZCBzdHJpbmcgb2JqZWN0cyAob3IgbWF5YmUgdGhlcmUgaXMgYW5vdGhlciByZWFzb24/KS5cbiAqXG4gKiBUaGlzIHN0cmluZyBlbmNvZGVyIHNvbHZlcyB0aGUgYWJvdmUgcHJvYmxlbS4gQWxsIHN0cmluZ3MgYXJlIGNvbmNhdGVuYXRlZCBhbmQgd3JpdHRlbiBhcyBhIHNpbmdsZSBzdHJpbmcgdXNpbmcgYSBzaW5nbGUgZW5jb2RpbmcgY2FsbC5cbiAqXG4gKiBUaGUgbGVuZ3RocyBhcmUgZW5jb2RlZCB1c2luZyBhIFVpbnRPcHRSbGVFbmNvZGVyLlxuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLnNhcnIgPSBbXVxuICAgIHRoaXMucyA9ICcnXG4gICAgdGhpcy5sZW5zRSA9IG5ldyBVaW50T3B0UmxlRW5jb2RlcigpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKi9cbiAgd3JpdGUgKHN0cmluZykge1xuICAgIHRoaXMucyArPSBzdHJpbmdcbiAgICBpZiAodGhpcy5zLmxlbmd0aCA+IDE5KSB7XG4gICAgICB0aGlzLnNhcnIucHVzaCh0aGlzLnMpXG4gICAgICB0aGlzLnMgPSAnJ1xuICAgIH1cbiAgICB0aGlzLmxlbnNFLndyaXRlKHN0cmluZy5sZW5ndGgpXG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgdGhpcy5zYXJyLnB1c2godGhpcy5zKVxuICAgIHRoaXMucyA9ICcnXG4gICAgd3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgdGhpcy5zYXJyLmpvaW4oJycpKVxuICAgIHdyaXRlVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmxlbnNFLnRvVWludDhBcnJheSgpKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAgfVxufVxuIiwgIi8qKlxuICogRXJyb3IgaGVscGVycy5cbiAqXG4gKiBAbW9kdWxlIGVycm9yXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7RXJyb3J9XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gcyA9PiBuZXcgRXJyb3IocylcblxuLyoqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqIEByZXR1cm4ge25ldmVyfVxuICovXG4vKiBjOCBpZ25vcmUgbmV4dCAzICovXG5leHBvcnQgY29uc3QgbWV0aG9kVW5pbXBsZW1lbnRlZCA9ICgpID0+IHtcbiAgdGhyb3cgY3JlYXRlKCdNZXRob2QgdW5pbXBsZW1lbnRlZCcpXG59XG5cbi8qKlxuICogQHRocm93cyB7RXJyb3J9XG4gKiBAcmV0dXJuIHtuZXZlcn1cbiAqL1xuLyogYzggaWdub3JlIG5leHQgMyAqL1xuZXhwb3J0IGNvbnN0IHVuZXhwZWN0ZWRDYXNlID0gKCkgPT4ge1xuICB0aHJvdyBjcmVhdGUoJ1VuZXhwZWN0ZWQgY2FzZScpXG59XG4iLCAiLyoqXG4gKiBFZmZpY2llbnQgc2NoZW1hLWxlc3MgYmluYXJ5IGRlY29kaW5nIHdpdGggc3VwcG9ydCBmb3IgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLlxuICpcbiAqIFVzZSBbbGliMC9kZWNvZGluZ10gd2l0aCBbbGliMC9lbmNvZGluZ10uIEV2ZXJ5IGVuY29kaW5nIGZ1bmN0aW9uIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKlxuICogRW5jb2RlcyBudW1iZXJzIGluIGxpdHRsZS1lbmRpYW4gb3JkZXIgKGxlYXN0IHRvIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvcmRlcilcbiAqIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggR29sYW5nJ3MgYmluYXJ5IGVuY29kaW5nIChodHRwczovL2dvbGFuZy5vcmcvcGtnL2VuY29kaW5nL2JpbmFyeS8pXG4gKiB3aGljaCBpcyBhbHNvIHVzZWQgaW4gUHJvdG9jb2wgQnVmZmVycy5cbiAqXG4gKiBgYGBqc1xuICogLy8gZW5jb2Rpbmcgc3RlcFxuICogY29uc3QgZW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICogZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDI1NilcbiAqIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsICdIZWxsbyB3b3JsZCEnKVxuICogY29uc3QgYnVmID0gZW5jb2RpbmcudG9VaW50OEFycmF5KGVuY29kZXIpXG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogLy8gZGVjb2Rpbmcgc3RlcFxuICogY29uc3QgZGVjb2RlciA9IGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKVxuICogZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikgLy8gPT4gMjU2XG4gKiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpIC8vID0+ICdIZWxsbyB3b3JsZCEnXG4gKiBkZWNvZGluZy5oYXNDb250ZW50KGRlY29kZXIpIC8vID0+IGZhbHNlIC0gYWxsIGRhdGEgaXMgcmVhZFxuICogYGBgXG4gKlxuICogQG1vZHVsZSBkZWNvZGluZ1xuICovXG5cbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgbnVtYmVyIGZyb20gJy4vbnVtYmVyLmpzJ1xuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vc3RyaW5nLmpzJ1xuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnLi9lcnJvci5qcydcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJy4vZW5jb2RpbmcuanMnXG5cbmNvbnN0IGVycm9yVW5leHBlY3RlZEVuZE9mQXJyYXkgPSBlcnJvci5jcmVhdGUoJ1VuZXhwZWN0ZWQgZW5kIG9mIGFycmF5JylcbmNvbnN0IGVycm9ySW50ZWdlck91dE9mUmFuZ2UgPSBlcnJvci5jcmVhdGUoJ0ludGVnZXIgb3V0IG9mIFJhbmdlJylcblxuLyoqXG4gKiBBIERlY29kZXIgaGFuZGxlcyB0aGUgZGVjb2Rpbmcgb2YgYW4gVWludDhBcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5IEJpbmFyeSBkYXRhIHRvIGRlY29kZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXkpIHtcbiAgICAvKipcbiAgICAgKiBEZWNvZGluZyB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmFyciA9IHVpbnQ4QXJyYXlcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGRlY29kaW5nIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnBvcyA9IDBcbiAgfVxufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKiBAcmV0dXJuIHtEZWNvZGVyfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRGVjb2RlciA9IHVpbnQ4QXJyYXkgPT4gbmV3IERlY29kZXIodWludDhBcnJheSlcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGhhc0NvbnRlbnQgPSBkZWNvZGVyID0+IGRlY29kZXIucG9zICE9PSBkZWNvZGVyLmFyci5sZW5ndGhcblxuLyoqXG4gKiBDbG9uZSBhIGRlY29kZXIgaW5zdGFuY2UuXG4gKiBPcHRpb25hbGx5IHNldCBhIG5ldyBwb3NpdGlvbiBwYXJhbWV0ZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXIgVGhlIGRlY29kZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbmV3UG9zXSBEZWZhdWx0cyB0byBjdXJyZW50IHBvc2l0aW9uXG4gKiBAcmV0dXJuIHtEZWNvZGVyfSBBIGNsb25lIG9mIGBkZWNvZGVyYFxuICovXG5leHBvcnQgY29uc3QgY2xvbmUgPSAoZGVjb2RlciwgbmV3UG9zID0gZGVjb2Rlci5wb3MpID0+IHtcbiAgY29uc3QgX2RlY29kZXIgPSBjcmVhdGVEZWNvZGVyKGRlY29kZXIuYXJyKVxuICBfZGVjb2Rlci5wb3MgPSBuZXdQb3NcbiAgcmV0dXJuIF9kZWNvZGVyXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIFVpbnQ4QXJyYXkgdmlldyBvZiB0aGUgbmV4dCBgbGVuYCBieXRlcyBhbmQgYWR2YW5jZSB0aGUgcG9zaXRpb24gYnkgYGxlbmAuXG4gKlxuICogSW1wb3J0YW50OiBUaGUgVWludDhBcnJheSBzdGlsbCBwb2ludHMgdG8gdGhlIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIuIE1ha2Ugc3VyZSB0byBkaXNjYXJkIHRoZSByZXN1bHQgYXMgc29vbiBhcyBwb3NzaWJsZSB0byBwcmV2ZW50IGFueSBtZW1vcnkgbGVha3MuXG4gKiAgICAgICAgICAgIFVzZSBgYnVmZmVyLmNvcHlVaW50OEFycmF5YCB0byBjb3B5IHRoZSByZXN1bHQgaW50byBhIG5ldyBVaW50OEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIFRoZSBsZW5ndGggb2YgYnl0ZXMgdG8gcmVhZFxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRVaW50OEFycmF5ID0gKGRlY29kZXIsIGxlbikgPT4ge1xuICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2Rlci5hcnIuYnVmZmVyLCBkZWNvZGVyLnBvcyArIGRlY29kZXIuYXJyLmJ5dGVPZmZzZXQsIGxlbilcbiAgZGVjb2Rlci5wb3MgKz0gbGVuXG4gIHJldHVybiB2aWV3XG59XG5cbi8qKlxuICogUmVhZCB2YXJpYWJsZSBsZW5ndGggVWludDhBcnJheS5cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoZSBVaW50OEFycmF5IHN0aWxsIHBvaW50cyB0byB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlci4gTWFrZSBzdXJlIHRvIGRpc2NhcmQgdGhlIHJlc3VsdCBhcyBzb29uIGFzIHBvc3NpYmxlIHRvIHByZXZlbnQgYW55IG1lbW9yeSBsZWFrcy5cbiAqICAgICAgICAgICAgVXNlIGBidWZmZXIuY29weVVpbnQ4QXJyYXlgIHRvIGNvcHkgdGhlIHJlc3VsdCBpbnRvIGEgbmV3IFVpbnQ4QXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFyVWludDhBcnJheSA9IGRlY29kZXIgPT4gcmVhZFVpbnQ4QXJyYXkoZGVjb2RlciwgcmVhZFZhclVpbnQoZGVjb2RlcikpXG5cbi8qKlxuICogUmVhZCB0aGUgcmVzdCBvZiB0aGUgY29udGVudCBhcyBhbiBBcnJheUJ1ZmZlclxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVGFpbEFzVWludDhBcnJheSA9IGRlY29kZXIgPT4gcmVhZFVpbnQ4QXJyYXkoZGVjb2RlciwgZGVjb2Rlci5hcnIubGVuZ3RoIC0gZGVjb2Rlci5wb3MpXG5cbi8qKlxuICogU2tpcCBvbmUgYnl0ZSwganVtcCB0byB0aGUgbmV4dCBwb3NpdGlvbi5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBuZXh0IHBvc2l0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBza2lwOCA9IGRlY29kZXIgPT4gZGVjb2Rlci5wb3MrK1xuXG4vKipcbiAqIFJlYWQgb25lIGJ5dGUgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRVaW50OCA9IGRlY29kZXIgPT4gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cblxuLyoqXG4gKiBSZWFkIDIgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQxNiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICBkZWNvZGVyLmFycltkZWNvZGVyLnBvc10gK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpXG4gIGRlY29kZXIucG9zICs9IDJcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBSZWFkIDQgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQzMiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3NdICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAxXSA8PCA4KSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMl0gPDwgMTYpICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAzXSA8PCAyNCkpID4+PiAwXG4gIGRlY29kZXIucG9zICs9IDRcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBSZWFkIDQgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlciBpbiBiaWcgZW5kaWFuIG9yZGVyLlxuICogKG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBmaXJzdClcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQzMkJpZ0VuZGlhbiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAzXSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMl0gPDwgOCkgK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDE2KSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSA8PCAyNCkpID4+PiAwXG4gIGRlY29kZXIucG9zICs9IDRcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBMb29rIGFoZWFkIHdpdGhvdXQgaW5jcmVtZW50aW5nIHRoZSBwb3NpdGlvblxuICogdG8gdGhlIG5leHQgYnl0ZSBhbmQgcmVhZCBpdCBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVWludDggPSBkZWNvZGVyID0+IGRlY29kZXIuYXJyW2RlY29kZXIucG9zXVxuXG4vKipcbiAqIExvb2sgYWhlYWQgd2l0aG91dCBpbmNyZW1lbnRpbmcgdGhlIHBvc2l0aW9uXG4gKiB0byB0aGUgbmV4dCBieXRlIGFuZCByZWFkIGl0IGFzIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gdW5zaWduZWQgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtVaW50MTYgPSBkZWNvZGVyID0+XG4gIGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpXG5cbi8qKlxuICogTG9vayBhaGVhZCB3aXRob3V0IGluY3JlbWVudGluZyB0aGUgcG9zaXRpb25cbiAqIHRvIHRoZSBuZXh0IGJ5dGUgYW5kIHJlYWQgaXQgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcGVla1VpbnQzMiA9IGRlY29kZXIgPT4gKFxuICBkZWNvZGVyLmFycltkZWNvZGVyLnBvc10gK1xuICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAxXSA8PCA4KSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDJdIDw8IDE2KSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDNdIDw8IDI0KVxuKSA+Pj4gMFxuXG4vKipcbiAqIFJlYWQgdW5zaWduZWQgaW50ZWdlciAoMzJiaXQpIHdpdGggdmFyaWFibGUgbGVuZ3RoLlxuICogMS84dGggb2YgdGhlIHN0b3JhZ2UgaXMgdXNlZCBhcyBlbmNvZGluZyBvdmVyaGVhZC5cbiAqICAqIG51bWJlcnMgPCAyXjcgaXMgc3RvcmVkIGluIG9uZSBieXRsZW5ndGhcbiAqICAqIG51bWJlcnMgPCAyXjE0IGlzIHN0b3JlZCBpbiB0d28gYnlsZW5ndGhcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLmxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgcmVhZFZhclVpbnQgPSBkZWNvZGVyID0+IHtcbiAgbGV0IG51bSA9IDBcbiAgbGV0IG11bHQgPSAxXG4gIGNvbnN0IGxlbiA9IGRlY29kZXIuYXJyLmxlbmd0aFxuICB3aGlsZSAoZGVjb2Rlci5wb3MgPCBsZW4pIHtcbiAgICBjb25zdCByID0gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cbiAgICAvLyBudW0gPSBudW0gfCAoKHIgJiBiaW5hcnkuQklUUzcpIDw8IGxlbilcbiAgICBudW0gPSBudW0gKyAociAmIGJpbmFyeS5CSVRTNykgKiBtdWx0IC8vIHNoaWZ0ICRyIDw8ICg3KiNpdGVyYXRpb25zKSBhbmQgYWRkIGl0IHRvIG51bVxuICAgIG11bHQgKj0gMTI4IC8vIG5leHQgaXRlcmF0aW9uLCBzaGlmdCA3IFwibW9yZVwiIHRvIHRoZSBsZWZ0XG4gICAgaWYgKHIgPCBiaW5hcnkuQklUOCkge1xuICAgICAgcmV0dXJuIG51bVxuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICBpZiAobnVtID4gbnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IGVycm9ySW50ZWdlck91dE9mUmFuZ2VcbiAgICB9XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgfVxuICB0aHJvdyBlcnJvclVuZXhwZWN0ZWRFbmRPZkFycmF5XG59XG5cbi8qKlxuICogUmVhZCBzaWduZWQgaW50ZWdlciAoMzJiaXQpIHdpdGggdmFyaWFibGUgbGVuZ3RoLlxuICogMS84dGggb2YgdGhlIHN0b3JhZ2UgaXMgdXNlZCBhcyBlbmNvZGluZyBvdmVyaGVhZC5cbiAqICAqIG51bWJlcnMgPCAyXjcgaXMgc3RvcmVkIGluIG9uZSBieXRsZW5ndGhcbiAqICAqIG51bWJlcnMgPCAyXjE0IGlzIHN0b3JlZCBpbiB0d28gYnlsZW5ndGhcbiAqIEB0b2RvIFRoaXMgc2hvdWxkIHByb2JhYmx5IGNyZWF0ZSB0aGUgaW52ZXJzZSB+bnVtIGlmIG51bWJlciBpcyBuZWdhdGl2ZSAtIGJ1dCB0aGlzIHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIubGVuZ3RoXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFySW50ID0gZGVjb2RlciA9PiB7XG4gIGxldCByID0gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cbiAgbGV0IG51bSA9IHIgJiBiaW5hcnkuQklUUzZcbiAgbGV0IG11bHQgPSA2NFxuICBjb25zdCBzaWduID0gKHIgJiBiaW5hcnkuQklUNykgPiAwID8gLTEgOiAxXG4gIGlmICgociAmIGJpbmFyeS5CSVQ4KSA9PT0gMCkge1xuICAgIC8vIGRvbid0IGNvbnRpbnVlIHJlYWRpbmdcbiAgICByZXR1cm4gc2lnbiAqIG51bVxuICB9XG4gIGNvbnN0IGxlbiA9IGRlY29kZXIuYXJyLmxlbmd0aFxuICB3aGlsZSAoZGVjb2Rlci5wb3MgPCBsZW4pIHtcbiAgICByID0gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cbiAgICAvLyBudW0gPSBudW0gfCAoKHIgJiBiaW5hcnkuQklUUzcpIDw8IGxlbilcbiAgICBudW0gPSBudW0gKyAociAmIGJpbmFyeS5CSVRTNykgKiBtdWx0XG4gICAgbXVsdCAqPSAxMjhcbiAgICBpZiAociA8IGJpbmFyeS5CSVQ4KSB7XG4gICAgICByZXR1cm4gc2lnbiAqIG51bVxuICAgIH1cbiAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgICBpZiAobnVtID4gbnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IGVycm9ySW50ZWdlck91dE9mUmFuZ2VcbiAgICB9XG4gICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgfVxuICB0aHJvdyBlcnJvclVuZXhwZWN0ZWRFbmRPZkFycmF5XG59XG5cbi8qKlxuICogTG9vayBhaGVhZCBhbmQgcmVhZCB2YXJVaW50IHdpdGhvdXQgaW5jcmVtZW50aW5nIHBvc2l0aW9uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtWYXJVaW50ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHBvcyA9IGRlY29kZXIucG9zXG4gIGNvbnN0IHMgPSByZWFkVmFyVWludChkZWNvZGVyKVxuICBkZWNvZGVyLnBvcyA9IHBvc1xuICByZXR1cm4gc1xufVxuXG4vKipcbiAqIExvb2sgYWhlYWQgYW5kIHJlYWQgdmFyVWludCB3aXRob3V0IGluY3JlbWVudGluZyBwb3NpdGlvblxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVmFySW50ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHBvcyA9IGRlY29kZXIucG9zXG4gIGNvbnN0IHMgPSByZWFkVmFySW50KGRlY29kZXIpXG4gIGRlY29kZXIucG9zID0gcG9zXG4gIHJldHVybiBzXG59XG5cbi8qKlxuICogV2UgZG9uJ3QgdGVzdCB0aGlzIGZ1bmN0aW9uIGFueW1vcmUgYXMgd2UgdXNlIG5hdGl2ZSBkZWNvZGluZy9lbmNvZGluZyBieSBkZWZhdWx0IG5vdy5cbiAqIEJldHRlciBub3QgbW9kaWZ5IHRoaXMgYW55bW9yZS4uXG4gKlxuICogVHJhbnNmb3JtaW5nIHV0ZjggdG8gYSBzdHJpbmcgaXMgcHJldHR5IGV4cGVuc2l2ZS4gVGhlIGNvZGUgcGVyZm9ybXMgMTB4IGJldHRlclxuICogd2hlbiBTdHJpbmcuZnJvbUNvZGVQb2ludCBpcyBmZWQgd2l0aCBhbGwgY2hhcmFjdGVycyBhcyBhcmd1bWVudHMuXG4gKiBCdXQgbW9zdCBlbnZpcm9ubWVudHMgaGF2ZSBhIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyBwZXIgZnVuY3Rpb25zLlxuICogRm9yIGVmZmllbmN5IHJlYXNvbnMgd2UgYXBwbHkgYSBtYXhpbXVtIG9mIDEwMDAwIGNoYXJhY3RlcnMgYXQgb25jZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVhZCBTdHJpbmcuXG4gKi9cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuZXhwb3J0IGNvbnN0IF9yZWFkVmFyU3RyaW5nUG9seWZpbGwgPSBkZWNvZGVyID0+IHtcbiAgbGV0IHJlbWFpbmluZ0xlbiA9IHJlYWRWYXJVaW50KGRlY29kZXIpXG4gIGlmIChyZW1haW5pbmdMZW4gPT09IDApIHtcbiAgICByZXR1cm4gJydcbiAgfSBlbHNlIHtcbiAgICBsZXQgZW5jb2RlZFN0cmluZyA9IFN0cmluZy5mcm9tQ29kZVBvaW50KHJlYWRVaW50OChkZWNvZGVyKSkgLy8gcmVtZW1iZXIgdG8gZGVjcmVhc2UgcmVtYWluaW5nTGVuXG4gICAgaWYgKC0tcmVtYWluaW5nTGVuIDwgMTAwKSB7IC8vIGRvIG5vdCBjcmVhdGUgYSBVaW50OEFycmF5IGZvciBzbWFsbCBzdHJpbmdzXG4gICAgICB3aGlsZSAocmVtYWluaW5nTGVuLS0pIHtcbiAgICAgICAgZW5jb2RlZFN0cmluZyArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChyZWFkVWludDgoZGVjb2RlcikpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChyZW1haW5pbmdMZW4gPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHRMZW4gPSByZW1haW5pbmdMZW4gPCAxMDAwMCA/IHJlbWFpbmluZ0xlbiA6IDEwMDAwXG4gICAgICAgIC8vIHRoaXMgaXMgZGFuZ2Vyb3VzLCB3ZSBjcmVhdGUgYSBmcmVzaCBhcnJheSB2aWV3IGZyb20gdGhlIGV4aXN0aW5nIGJ1ZmZlclxuICAgICAgICBjb25zdCBieXRlcyA9IGRlY29kZXIuYXJyLnN1YmFycmF5KGRlY29kZXIucG9zLCBkZWNvZGVyLnBvcyArIG5leHRMZW4pXG4gICAgICAgIGRlY29kZXIucG9zICs9IG5leHRMZW5cbiAgICAgICAgLy8gU3RhcnRpbmcgd2l0aCBFUzUuMSB3ZSBjYW4gc3VwcGx5IGEgZ2VuZXJpYyBhcnJheS1saWtlIG9iamVjdCBhcyBhcmd1bWVudHNcbiAgICAgICAgZW5jb2RlZFN0cmluZyArPSBTdHJpbmcuZnJvbUNvZGVQb2ludC5hcHBseShudWxsLCAvKiogQHR5cGUge2FueX0gKi8gKGJ5dGVzKSlcbiAgICAgICAgcmVtYWluaW5nTGVuIC09IG5leHRMZW5cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZW5jb2RlZFN0cmluZykpXG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHJlYWQgU3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBfcmVhZFZhclN0cmluZ05hdGl2ZSA9IGRlY29kZXIgPT5cbiAgLyoqIEB0eXBlIGFueSAqLyAoc3RyaW5nLnV0ZjhUZXh0RGVjb2RlcikuZGVjb2RlKHJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKVxuXG4vKipcbiAqIFJlYWQgc3RyaW5nIG9mIHZhcmlhYmxlIGxlbmd0aFxuICogKiB2YXJVaW50IGlzIHVzZWQgdG8gc3RvcmUgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHJlYWQgU3RyaW5nXG4gKlxuICovXG4vKiBjOCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHJlYWRWYXJTdHJpbmcgPSBzdHJpbmcudXRmOFRleHREZWNvZGVyID8gX3JlYWRWYXJTdHJpbmdOYXRpdmUgOiBfcmVhZFZhclN0cmluZ1BvbHlmaWxsXG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgcmVhZFRlcm1pbmF0ZWRVaW50OEFycmF5ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IGVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAgbGV0IGJcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBiID0gcmVhZFVpbnQ4KGRlY29kZXIpXG4gICAgaWYgKGIgPT09IDApIHtcbiAgICAgIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAgICB9XG4gICAgaWYgKGIgPT09IDEpIHtcbiAgICAgIGIgPSByZWFkVWludDgoZGVjb2RlcilcbiAgICB9XG4gICAgZW5jb2Rpbmcud3JpdGUoZW5jb2RlciwgYilcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgcmVhZFRlcm1pbmF0ZWRTdHJpbmcgPSBkZWNvZGVyID0+IHN0cmluZy5kZWNvZGVVdGY4KHJlYWRUZXJtaW5hdGVkVWludDhBcnJheShkZWNvZGVyKSlcblxuLyoqXG4gKiBMb29rIGFoZWFkIGFuZCByZWFkIHZhclN0cmluZyB3aXRob3V0IGluY3JlbWVudGluZyBwb3NpdGlvblxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVmFyU3RyaW5nID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHBvcyA9IGRlY29kZXIucG9zXG4gIGNvbnN0IHMgPSByZWFkVmFyU3RyaW5nKGRlY29kZXIpXG4gIGRlY29kZXIucG9zID0gcG9zXG4gIHJldHVybiBzXG59XG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gKiBAcmV0dXJuIHtEYXRhVmlld31cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRGcm9tRGF0YVZpZXcgPSAoZGVjb2RlciwgbGVuKSA9PiB7XG4gIGNvbnN0IGR2ID0gbmV3IERhdGFWaWV3KGRlY29kZXIuYXJyLmJ1ZmZlciwgZGVjb2Rlci5hcnIuYnl0ZU9mZnNldCArIGRlY29kZXIucG9zLCBsZW4pXG4gIGRlY29kZXIucG9zICs9IGxlblxuICByZXR1cm4gZHZcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRGbG9hdDMyID0gZGVjb2RlciA9PiByZWFkRnJvbURhdGFWaWV3KGRlY29kZXIsIDQpLmdldEZsb2F0MzIoMCwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRmxvYXQ2NCA9IGRlY29kZXIgPT4gcmVhZEZyb21EYXRhVmlldyhkZWNvZGVyLCA4KS5nZXRGbG9hdDY0KDAsIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEJpZ0ludDY0ID0gZGVjb2RlciA9PiAvKiogQHR5cGUge2FueX0gKi8gKHJlYWRGcm9tRGF0YVZpZXcoZGVjb2RlciwgOCkpLmdldEJpZ0ludDY0KDAsIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEJpZ1VpbnQ2NCA9IGRlY29kZXIgPT4gLyoqIEB0eXBlIHthbnl9ICovIChyZWFkRnJvbURhdGFWaWV3KGRlY29kZXIsIDgpKS5nZXRCaWdVaW50NjQoMCwgZmFsc2UpXG5cbi8qKlxuICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKERlY29kZXIpOmFueT59XG4gKi9cbmNvbnN0IHJlYWRBbnlMb29rdXBUYWJsZSA9IFtcbiAgZGVjb2RlciA9PiB1bmRlZmluZWQsIC8vIENBU0UgMTI3OiB1bmRlZmluZWRcbiAgZGVjb2RlciA9PiBudWxsLCAvLyBDQVNFIDEyNjogbnVsbFxuICByZWFkVmFySW50LCAvLyBDQVNFIDEyNTogaW50ZWdlclxuICByZWFkRmxvYXQzMiwgLy8gQ0FTRSAxMjQ6IGZsb2F0MzJcbiAgcmVhZEZsb2F0NjQsIC8vIENBU0UgMTIzOiBmbG9hdDY0XG4gIHJlYWRCaWdJbnQ2NCwgLy8gQ0FTRSAxMjI6IGJpZ2ludFxuICBkZWNvZGVyID0+IGZhbHNlLCAvLyBDQVNFIDEyMTogYm9vbGVhbiAoZmFsc2UpXG4gIGRlY29kZXIgPT4gdHJ1ZSwgLy8gQ0FTRSAxMjA6IGJvb2xlYW4gKHRydWUpXG4gIHJlYWRWYXJTdHJpbmcsIC8vIENBU0UgMTE5OiBzdHJpbmdcbiAgZGVjb2RlciA9PiB7IC8vIENBU0UgMTE4OiBvYmplY3Q8c3RyaW5nLGFueT5cbiAgICBjb25zdCBsZW4gPSByZWFkVmFyVWludChkZWNvZGVyKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICovXG4gICAgY29uc3Qgb2JqID0ge31cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSByZWFkVmFyU3RyaW5nKGRlY29kZXIpXG4gICAgICBvYmpba2V5XSA9IHJlYWRBbnkoZGVjb2RlcilcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9LFxuICBkZWNvZGVyID0+IHsgLy8gQ0FTRSAxMTc6IGFycmF5PGFueT5cbiAgICBjb25zdCBsZW4gPSByZWFkVmFyVWludChkZWNvZGVyKVxuICAgIGNvbnN0IGFyciA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyLnB1c2gocmVhZEFueShkZWNvZGVyKSlcbiAgICB9XG4gICAgcmV0dXJuIGFyclxuICB9LFxuICByZWFkVmFyVWludDhBcnJheSAvLyBDQVNFIDExNjogVWludDhBcnJheVxuXVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEFueSA9IGRlY29kZXIgPT4gcmVhZEFueUxvb2t1cFRhYmxlWzEyNyAtIHJlYWRVaW50OChkZWNvZGVyKV0oZGVjb2RlcilcblxuLyoqXG4gKiBUIG11c3Qgbm90IGJlIG51bGwuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGNsYXNzIFJsZURlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKERlY29kZXIpOlR9IHJlYWRlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXksIHJlYWRlcikge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogVGhlIHJlYWRlclxuICAgICAqL1xuICAgIHRoaXMucmVhZGVyID0gcmVhZGVyXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtUfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zID0gbnVsbFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICByZWFkICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5zID0gdGhpcy5yZWFkZXIodGhpcylcbiAgICAgIGlmIChoYXNDb250ZW50KHRoaXMpKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSByZWFkVmFyVWludCh0aGlzKSArIDEgLy8gc2VlIGVuY29kZXIgaW1wbGVtZW50YXRpb24gZm9yIHRoZSByZWFzb24gd2h5IHRoaXMgaXMgaW5jcmVtZW50ZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY291bnQgPSAtMSAvLyByZWFkIHRoZSBjdXJyZW50IHZhbHVlIGZvcmV2ZXJcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb3VudC0tXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7VH0gKi8gKHRoaXMucylcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50RGlmZkRlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5LCBzdGFydCkge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gc3RhcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkICgpIHtcbiAgICB0aGlzLnMgKz0gcmVhZFZhckludCh0aGlzKVxuICAgIHJldHVybiB0aGlzLnNcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmxlSW50RGlmZkRlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5LCBzdGFydCkge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gc3RhcnRcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWQgKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLnMgKz0gcmVhZFZhckludCh0aGlzKVxuICAgICAgaWYgKGhhc0NvbnRlbnQodGhpcykpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IHJlYWRWYXJVaW50KHRoaXMpICsgMSAvLyBzZWUgZW5jb2RlciBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHJlYXNvbiB3aHkgdGhpcyBpcyBpbmNyZW1lbnRlZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IC0xIC8vIHJlYWQgdGhlIGN1cnJlbnQgdmFsdWUgZm9yZXZlclxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLnMpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVpbnRPcHRSbGVEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5KSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgcmVhZCAoKSB7XG4gICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIHRoaXMucyA9IHJlYWRWYXJJbnQodGhpcylcbiAgICAgIC8vIGlmIHRoZSBzaWduIGlzIG5lZ2F0aXZlLCB3ZSByZWFkIHRoZSBjb3VudCB0b28sIG90aGVyd2lzZSBjb3VudCBpcyAxXG4gICAgICBjb25zdCBpc05lZ2F0aXZlID0gbWF0aC5pc05lZ2F0aXZlWmVybyh0aGlzLnMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICAgICAgdGhpcy5zID0gLXRoaXMuc1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY291bnQtLVxuICAgIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKHRoaXMucylcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW5jVWludE9wdFJsZURlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXkpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICByZWFkICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5zID0gcmVhZFZhckludCh0aGlzKVxuICAgICAgLy8gaWYgdGhlIHNpZ24gaXMgbmVnYXRpdmUsIHdlIHJlYWQgdGhlIGNvdW50IHRvbywgb3RoZXJ3aXNlIGNvdW50IGlzIDFcbiAgICAgIGNvbnN0IGlzTmVnYXRpdmUgPSBtYXRoLmlzTmVnYXRpdmVaZXJvKHRoaXMucylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgICAgICB0aGlzLnMgPSAtdGhpcy5zXG4gICAgICAgIHRoaXMuY291bnQgPSByZWFkVmFyVWludCh0aGlzKSArIDJcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb3VudC0tXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodGhpcy5zKyspXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludERpZmZPcHRSbGVEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5KSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICAgIHRoaXMuZGlmZiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgY29uc3QgZGlmZiA9IHJlYWRWYXJJbnQodGhpcylcbiAgICAgIC8vIGlmIHRoZSBmaXJzdCBiaXQgaXMgc2V0LCB3ZSByZWFkIG1vcmUgZGF0YVxuICAgICAgY29uc3QgaGFzQ291bnQgPSBkaWZmICYgMVxuICAgICAgdGhpcy5kaWZmID0gbWF0aC5mbG9vcihkaWZmIC8gMikgLy8gc2hpZnQgPj4gMVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIGlmIChoYXNDb3VudCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucyArPSB0aGlzLmRpZmZcbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gdGhpcy5zXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0cmluZ0RlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBVaW50T3B0UmxlRGVjb2Rlcih1aW50OEFycmF5KVxuICAgIHRoaXMuc3RyID0gcmVhZFZhclN0cmluZyh0aGlzLmRlY29kZXIpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNwb3MgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZCAoKSB7XG4gICAgY29uc3QgZW5kID0gdGhpcy5zcG9zICsgdGhpcy5kZWNvZGVyLnJlYWQoKVxuICAgIGNvbnN0IHJlcyA9IHRoaXMuc3RyLnNsaWNlKHRoaXMuc3BvcywgZW5kKVxuICAgIHRoaXMuc3BvcyA9IGVuZFxuICAgIHJldHVybiByZXNcbiAgfVxufVxuIiwgIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5leHBvcnQgY29uc3Qgc3VidGxlID0gY3J5cHRvLnN1YnRsZVxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbVZhbHVlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pXG4iLCAiLyoqXG4gKiBJc29tb3JwaGljIG1vZHVsZSBmb3IgdHJ1ZSByYW5kb20gbnVtYmVycyAvIGJ1ZmZlcnMgLyB1dWlkcy5cbiAqXG4gKiBBdHRlbnRpb246IGZhbGxzIGJhY2sgdG8gTWF0aC5yYW5kb20gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBjcnlwdG8uXG4gKlxuICogQG1vZHVsZSByYW5kb21cbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcbmltcG9ydCB7IGdldFJhbmRvbVZhbHVlcyB9IGZyb20gJ2xpYjAvd2ViY3J5cHRvJ1xuXG5leHBvcnQgY29uc3QgcmFuZCA9IE1hdGgucmFuZG9tXG5cbmV4cG9ydCBjb25zdCB1aW50MzIgPSAoKSA9PiBnZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXVxuXG5leHBvcnQgY29uc3QgdWludDUzID0gKCkgPT4ge1xuICBjb25zdCBhcnIgPSBnZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDgpKVxuICByZXR1cm4gKGFyclswXSAmIGJpbmFyeS5CSVRTMjEpICogKGJpbmFyeS5CSVRTMzIgKyAxKSArIChhcnJbMV0gPj4+IDApXG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyclxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IG9uZU9mID0gYXJyID0+IGFyclttYXRoLmZsb29yKHJhbmQoKSAqIGFyci5sZW5ndGgpXVxuXG4vLyBAdHMtaWdub3JlXG5jb25zdCB1dWlkdjRUZW1wbGF0ZSA9IFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTFcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKSA9PiB1dWlkdjRUZW1wbGF0ZS5yZXBsYWNlKC9bMDE4XS9nLCAvKiogQHBhcmFtIHtudW1iZXJ9IGMgKi8gYyA9PlxuICAoYyBeIHVpbnQzMigpICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KVxuKVxuIiwgIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHRpbWUuXG4gKlxuICogQG1vZHVsZSB0aW1lXG4gKi9cblxuaW1wb3J0ICogYXMgbWV0cmljIGZyb20gJy4vbWV0cmljLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5cbi8qKlxuICogUmV0dXJuIGN1cnJlbnQgdGltZS5cbiAqXG4gKiBAcmV0dXJuIHtEYXRlfVxuICovXG5leHBvcnQgY29uc3QgZ2V0RGF0ZSA9ICgpID0+IG5ldyBEYXRlKClcblxuLyoqXG4gKiBSZXR1cm4gY3VycmVudCB1bml4IHRpbWUuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgZ2V0VW5peFRpbWUgPSBEYXRlLm5vd1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aW1lIChpbiBtcykgdG8gYSBodW1hbiByZWFkYWJsZSBmb3JtYXQuIEUuZy4gMTEwMCA9PiAxLjFzLiA2MHMgPT4gMW1pbi4gLjAwMSA9PiAxMFx1MDNCQ3MuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGQgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGh1bWFuaXplZCBhcHByb3hpbWF0aW9uIG9mIHRpbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGh1bWFuaXplRHVyYXRpb24gPSBkID0+IHtcbiAgaWYgKGQgPCA2MDAwMCkge1xuICAgIGNvbnN0IHAgPSBtZXRyaWMucHJlZml4KGQsIC0xKVxuICAgIHJldHVybiBtYXRoLnJvdW5kKHAubiAqIDEwMCkgLyAxMDAgKyBwLnByZWZpeCArICdzJ1xuICB9XG4gIGQgPSBtYXRoLmZsb29yKGQgLyAxMDAwKVxuICBjb25zdCBzZWNvbmRzID0gZCAlIDYwXG4gIGNvbnN0IG1pbnV0ZXMgPSBtYXRoLmZsb29yKGQgLyA2MCkgJSA2MFxuICBjb25zdCBob3VycyA9IG1hdGguZmxvb3IoZCAvIDM2MDApICUgMjRcbiAgY29uc3QgZGF5cyA9IG1hdGguZmxvb3IoZCAvIDg2NDAwKVxuICBpZiAoZGF5cyA+IDApIHtcbiAgICByZXR1cm4gZGF5cyArICdkJyArICgoaG91cnMgPiAwIHx8IG1pbnV0ZXMgPiAzMCkgPyAnICcgKyAobWludXRlcyA+IDMwID8gaG91cnMgKyAxIDogaG91cnMpICsgJ2gnIDogJycpXG4gIH1cbiAgaWYgKGhvdXJzID4gMCkge1xuICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGhvdXJzICsgJ2gnICsgKChtaW51dGVzID4gMCB8fCBzZWNvbmRzID4gMzApID8gJyAnICsgKHNlY29uZHMgPiAzMCA/IG1pbnV0ZXMgKyAxIDogbWludXRlcykgKyAnbWluJyA6ICcnKVxuICB9XG4gIHJldHVybiBtaW51dGVzICsgJ21pbicgKyAoc2Vjb25kcyA+IDAgPyAnICcgKyBzZWNvbmRzICsgJ3MnIDogJycpXG59XG4iLCAiLyoqXG4gKiBVdGlsaXR5IGhlbHBlcnMgdG8gd29yayB3aXRoIHByb21pc2VzLlxuICpcbiAqIEBtb2R1bGUgcHJvbWlzZVxuICovXG5cbmltcG9ydCAqIGFzIHRpbWUgZnJvbSAnLi90aW1lLmpzJ1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAY2FsbGJhY2sgUHJvbWlzZVJlc29sdmVcbiAqIEBwYXJhbSB7VHxQcm9taXNlTGlrZTxUPn0gW3Jlc3VsdF1cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFByb21pc2VSZXNvbHZlPFQ+LGZ1bmN0aW9uKEVycm9yKTp2b2lkKTphbnl9IGZcbiAqIEByZXR1cm4ge1Byb21pc2U8VD59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBmID0+IC8qKiBAdHlwZSB7UHJvbWlzZTxUPn0gKi8gKG5ldyBQcm9taXNlKGYpKVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24oKTp2b2lkLGZ1bmN0aW9uKEVycm9yKTp2b2lkKTp2b2lkfSBmXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRW1wdHkgPSBmID0+IG5ldyBQcm9taXNlKGYpXG5cbi8qKlxuICogYFByb21pc2UuYWxsYCB3YWl0IGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5IHRvIHJlc29sdmUgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gKiBAdGVtcGxhdGUge3Vua25vd25bXSB8IFtdfSBQU1xuICpcbiAqIEBwYXJhbSB7UFN9IHBzXG4gKiBAcmV0dXJuIHtQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFBTXTogQXdhaXRlZDxQU1tQXT4gfT59XG4gKi9cbmV4cG9ydCBjb25zdCBhbGwgPSBQcm9taXNlLmFsbC5iaW5kKFByb21pc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFcnJvcn0gW3JlYXNvbl1cbiAqIEByZXR1cm4ge1Byb21pc2U8bmV2ZXI+fVxuICovXG5leHBvcnQgY29uc3QgcmVqZWN0ID0gcmVhc29uID0+IFByb21pc2UucmVqZWN0KHJlYXNvbilcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfHZvaWR9IHJlc1xuICogQHJldHVybiB7UHJvbWlzZTxUfHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9IHJlcyA9PiBQcm9taXNlLnJlc29sdmUocmVzKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHJlc1xuICogQHJldHVybiB7UHJvbWlzZTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmVXaXRoID0gcmVzID0+IFByb21pc2UucmVzb2x2ZShyZXMpXG5cbi8qKlxuICogQHRvZG8gTmV4dCB2ZXJzaW9uLCByZW9yZGVyIHBhcmFtZXRlcnM6IGNoZWNrLCBbdGltZW91dCwgW2ludGVydmFsUmVzb2x1dGlvbl1dXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpib29sZWFufSBjaGVja1xuICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlcnZhbFJlc29sdXRpb25dXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgdW50aWwgPSAodGltZW91dCwgY2hlY2ssIGludGVydmFsUmVzb2x1dGlvbiA9IDEwKSA9PiBjcmVhdGUoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICBjb25zdCBzdGFydFRpbWUgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgY29uc3QgaGFzVGltZW91dCA9IHRpbWVvdXQgPiAwXG4gIGNvbnN0IHVudGlsSW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgaWYgKGNoZWNrKCkpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpXG4gICAgICByZXNvbHZlKClcbiAgICB9IGVsc2UgaWYgKGhhc1RpbWVvdXQpIHtcbiAgICAgIC8qIGM4IGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAodGltZS5nZXRVbml4VGltZSgpIC0gc3RhcnRUaW1lID4gdGltZW91dCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKVxuICAgICAgICByZWplY3QobmV3IEVycm9yKCdUaW1lb3V0JykpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwodW50aWxJbnRlcnZhbCwgaW50ZXJ2YWxSZXNvbHV0aW9uKVxufSlcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICogQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQ+fVxuICovXG5leHBvcnQgY29uc3Qgd2FpdCA9IHRpbWVvdXQgPT4gY3JlYXRlKChyZXNvbHZlLCByZWplY3QpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCkpXG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIG9iamVjdCBpcyBhIHByb21pc2UgdXNpbmcgZHVja3R5cGluZy5cbiAqXG4gKiBQcm9taXNlcyBhcmUgb2Z0ZW4gcG9seWZpbGxlZCwgc28gaXQgbWFrZXMgc2Vuc2UgdG8gYWRkIHNvbWUgYWRkaXRpb25hbCBndWFyYW50ZWVzIGlmIHRoZSB1c2VyIG9mIHRoaXNcbiAqIGxpYnJhcnkgaGFzIHNvbWUgaW5zYW5lIGVudmlyb25tZW50IHdoZXJlIGdsb2JhbCBQcm9taXNlIG9iamVjdHMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7YW55fSBwXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gcCA9PiBwIGluc3RhbmNlb2YgUHJvbWlzZSB8fCAocCAmJiBwLnRoZW4gJiYgcC5jYXRjaCAmJiBwLmZpbmFsbHkpXG4iLCAiLyoqXG4gKiBPZnRlbiB1c2VkIGNvbmRpdGlvbnMuXG4gKlxuICogQG1vZHVsZSBjb25kaXRpb25zXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfG51bGx8dW5kZWZpbmVkfSB2XG4gKiBAcmV0dXJuIHtUfG51bGx9XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgdW5kZWZpbmVkVG9OdWxsID0gdiA9PiB2ID09PSB1bmRlZmluZWQgPyBudWxsIDogdlxuIiwgIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIElzb21vcnBoaWMgdmFyaWFibGUgc3RvcmFnZS5cbiAqXG4gKiBVc2VzIExvY2FsU3RvcmFnZSBpbiB0aGUgYnJvd3NlciBhbmQgZmFsbHMgYmFjayB0byBpbi1tZW1vcnkgc3RvcmFnZS5cbiAqXG4gKiBAbW9kdWxlIHN0b3JhZ2VcbiAqL1xuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmNsYXNzIFZhclN0b3JhZ2VQb2x5ZmlsbCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHthbnl9IG5ld1ZhbHVlXG4gICAqL1xuICBzZXRJdGVtIChrZXksIG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgbmV3VmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgZ2V0SXRlbSAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpXG4gIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG5cbi8qKlxuICogQHR5cGUge2FueX1cbiAqL1xubGV0IF9sb2NhbFN0b3JhZ2UgPSBuZXcgVmFyU3RvcmFnZVBvbHlmaWxsKClcbmxldCB1c2VQb2x5ZmlsbCA9IHRydWVcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG50cnkge1xuICAvLyBpZiB0aGUgc2FtZS1vcmlnaW4gcnVsZSBpcyB2aW9sYXRlZCwgYWNjZXNzaW5nIGxvY2FsU3RvcmFnZSBtaWdodCB0aHJvd24gYW4gZXJyb3JcbiAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnICYmIGxvY2FsU3RvcmFnZSkge1xuICAgIF9sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VcbiAgICB1c2VQb2x5ZmlsbCA9IGZhbHNlXG4gIH1cbn0gY2F0Y2ggKGUpIHsgfVxuLyogYzggaWdub3JlIHN0b3AgKi9cblxuLyoqXG4gKiBUaGlzIGlzIGJhc2ljYWxseSBsb2NhbFN0b3JhZ2UgaW4gYnJvd3Nlciwgb3IgYSBwb2x5ZmlsbCBpbiBub2RlanNcbiAqL1xuLyogYzggaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB2YXJTdG9yYWdlID0gX2xvY2FsU3RvcmFnZVxuXG4vKipcbiAqIEEgcG9seWZpbGwgZm9yIGBhZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgZXZlbnQgPT4gey4ufSlgIHRoYXQgZG9lcyBub3RoaW5nIGlmIHRoZSBwb2x5ZmlsbCBpcyBiZWluZyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeyBrZXk6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZyB9KTogdm9pZH0gZXZlbnRIYW5kbGVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuLyogYzggaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBvbkNoYW5nZSA9IGV2ZW50SGFuZGxlciA9PiB1c2VQb2x5ZmlsbCB8fCBhZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgLyoqIEB0eXBlIHthbnl9ICovIChldmVudEhhbmRsZXIpKVxuXG4vKipcbiAqIEEgcG9seWZpbGwgZm9yIGByZW1vdmVFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgZXZlbnQgPT4gey4ufSlgIHRoYXQgZG9lcyBub3RoaW5nIGlmIHRoZSBwb2x5ZmlsbCBpcyBiZWluZyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeyBrZXk6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZyB9KTogdm9pZH0gZXZlbnRIYW5kbGVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuLyogYzggaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBvZmZDaGFuZ2UgPSBldmVudEhhbmRsZXIgPT4gdXNlUG9seWZpbGwgfHwgcmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIC8qKiBAdHlwZSB7YW55fSAqLyAoZXZlbnRIYW5kbGVyKSlcbiIsICIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggRWNtYVNjcmlwdCBvYmplY3RzLlxuICpcbiAqIEBtb2R1bGUgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4vKipcbiAqIE9iamVjdC5hc3NpZ25cbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlzID0gT2JqZWN0LmtleXNcblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHt7W2s6c3RyaW5nXTpWfX0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsc3RyaW5nKTphbnl9IGZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGYob2JqW2tleV0sIGtleSlcbiAgfVxufVxuXG4vKipcbiAqIEB0b2RvIGltcGxlbWVudCBtYXBUb0FycmF5ICYgbWFwXG4gKlxuICogQHRlbXBsYXRlIFJcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LHN0cmluZyk6Un0gZlxuICogQHJldHVybiB7QXJyYXk8Uj59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXAgPSAob2JqLCBmKSA9PiB7XG4gIGNvbnN0IHJlc3VsdHMgPSBbXVxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICByZXN1bHRzLnB1c2goZihvYmpba2V5XSwga2V5KSlcbiAgfVxuICByZXR1cm4gcmVzdWx0c1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IG9iaiA9PiBrZXlzKG9iaikubGVuZ3RoXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksc3RyaW5nKTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3Qgc29tZSA9IChvYmosIGYpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGYob2JqW2tleV0sIGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fHVuZGVmaW5lZH0gb2JqXG4gKi9cbmV4cG9ydCBjb25zdCBpc0VtcHR5ID0gb2JqID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGZvciAoY29uc3QgX2sgaW4gb2JqKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBldmVyeSA9IChvYmosIGYpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFmKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBDYWxscyBgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eWAuXG4gKlxuICogQHBhcmFtIHthbnl9IG9ialxuICogQHBhcmFtIHtzdHJpbmd8c3ltYm9sfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBoYXNQcm9wZXJ0eSA9IChvYmosIGtleSkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsRmxhdCA9IChhLCBiKSA9PiBhID09PSBiIHx8IChsZW5ndGgoYSkgPT09IGxlbmd0aChiKSAmJiBldmVyeShhLCAodmFsLCBrZXkpID0+ICh2YWwgIT09IHVuZGVmaW5lZCB8fCBoYXNQcm9wZXJ0eShiLCBrZXkpKSAmJiBiW2tleV0gPT09IHZhbCkpXG4iLCAiLyoqXG4gKiBDb21tb24gZnVuY3Rpb25zIGFuZCBmdW5jdGlvbiBjYWxsIGhlbHBlcnMuXG4gKlxuICogQG1vZHVsZSBmdW5jdGlvblxuICovXG5cbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJy4vYXJyYXkuanMnXG5pbXBvcnQgKiBhcyBvYmplY3QgZnJvbSAnLi9vYmplY3QuanMnXG5cbi8qKlxuICogQ2FsbHMgYWxsIGZ1bmN0aW9ucyBpbiBgZnNgIHdpdGggYXJncy4gT25seSB0aHJvd3MgYWZ0ZXIgYWxsIGZ1bmN0aW9ucyB3ZXJlIGNhbGxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGZ1bmN0aW9uPn0gZnNcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJnc1xuICovXG5leHBvcnQgY29uc3QgY2FsbEFsbCA9IChmcywgYXJncywgaSA9IDApID0+IHtcbiAgdHJ5IHtcbiAgICBmb3IgKDsgaSA8IGZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmc1tpXSguLi5hcmdzKVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoaSA8IGZzLmxlbmd0aCkge1xuICAgICAgY2FsbEFsbChmcywgYXJncywgaSArIDEpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBub3AgPSAoKSA9PiB7fVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6VH0gZlxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGx5ID0gZiA9PiBmKClcblxuLyoqXG4gKiBAdGVtcGxhdGUgQVxuICpcbiAqIEBwYXJhbSB7QX0gYVxuICogQHJldHVybiB7QX1cbiAqL1xuZXhwb3J0IGNvbnN0IGlkID0gYSA9PiBhXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqXG4gKiBAcGFyYW0ge1R9IGFcbiAqIEBwYXJhbSB7VH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsaXR5U3RyaWN0ID0gKGEsIGIpID0+IGEgPT09IGJcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58b2JqZWN0fSBhXG4gKiBAcGFyYW0ge0FycmF5PFQ+fG9iamVjdH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsaXR5RmxhdCA9IChhLCBiKSA9PiBhID09PSBiIHx8IChhICE9IG51bGwgJiYgYiAhPSBudWxsICYmIGEuY29uc3RydWN0b3IgPT09IGIuY29uc3RydWN0b3IgJiYgKChhcnJheS5pc0FycmF5KGEpICYmIGFycmF5LmVxdWFsRmxhdChhLCAvKiogQHR5cGUge0FycmF5PFQ+fSAqLyAoYikpKSB8fCAodHlwZW9mIGEgPT09ICdvYmplY3QnICYmIG9iamVjdC5lcXVhbEZsYXQoYSwgYikpKSlcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGFcbiAqIEBwYXJhbSB7YW55fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlEZWVwID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICByZXR1cm4gZXF1YWxpdHlTdHJpY3QoYSwgYilcbiAgfVxuICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBzd2l0Y2ggKGEuY29uc3RydWN0b3IpIHtcbiAgICBjYXNlIEFycmF5QnVmZmVyOlxuICAgICAgYSA9IG5ldyBVaW50OEFycmF5KGEpXG4gICAgICBiID0gbmV3IFVpbnQ4QXJyYXkoYilcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICBjYXNlIFVpbnQ4QXJyYXk6IHtcbiAgICAgIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIFNldDoge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBhKSB7XG4gICAgICAgIGlmICghYi5oYXModmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNhc2UgTWFwOiB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBhLmtleXMoKSkge1xuICAgICAgICBpZiAoIWIuaGFzKGtleSkgfHwgIWVxdWFsaXR5RGVlcChhLmdldChrZXkpLCBiLmdldChrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIE9iamVjdDpcbiAgICAgIGlmIChvYmplY3QubGVuZ3RoKGEpICE9PSBvYmplY3QubGVuZ3RoKGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoIW9iamVjdC5oYXNQcm9wZXJ0eShhLCBrZXkpIHx8ICFlcXVhbGl0eURlZXAoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSBBcnJheTpcbiAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFlcXVhbGl0eURlZXAoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHRlbXBsYXRlIHtWfSBPUFRTXG4gKlxuICogQHBhcmFtIHtWfSB2YWx1ZVxuICogQHBhcmFtIHtBcnJheTxPUFRTPn0gb3B0aW9uc1xuICovXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgY29uc3QgaXNPbmVPZiA9ICh2YWx1ZSwgb3B0aW9ucykgPT4gb3B0aW9ucy5pbmNsdWRlcyh2YWx1ZSlcbi8qIGM4IGlnbm9yZSBzdG9wICovXG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gYXJyYXkuaXNBcnJheVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBzXG4gKiBAcmV0dXJuIHtzIGlzIFN0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHMpID0+IHMgJiYgcy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG5cbiAqIEByZXR1cm4ge24gaXMgTnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgaXNOdW1iZXIgPSBuID0+IG4gIT0gbnVsbCAmJiBuLmNvbnN0cnVjdG9yID09PSBOdW1iZXJcblxuLyoqXG4gKiBAdGVtcGxhdGUge2Fic3RyYWN0IG5ldyAoLi4uYXJnczogYW55KSA9PiBhbnl9IFRZUEVcbiAqIEBwYXJhbSB7YW55fSBuXG4gKiBAcGFyYW0ge1RZUEV9IFRcbiAqIEByZXR1cm4ge24gaXMgSW5zdGFuY2VUeXBlPFRZUEU+fVxuICovXG5leHBvcnQgY29uc3QgaXMgPSAobiwgVCkgPT4gbiAmJiBuLmNvbnN0cnVjdG9yID09PSBUXG5cbi8qKlxuICogQHRlbXBsYXRlIHthYnN0cmFjdCBuZXcgKC4uLmFyZ3M6IGFueSkgPT4gYW55fSBUWVBFXG4gKiBAcGFyYW0ge1RZUEV9IFRcbiAqL1xuZXhwb3J0IGNvbnN0IGlzVGVtcGxhdGUgPSAoVCkgPT5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBuXG4gICAqIEByZXR1cm4ge24gaXMgSW5zdGFuY2VUeXBlPFRZUEU+fVxuICAgKiovXG4gIG4gPT4gbiAmJiBuLmNvbnN0cnVjdG9yID09PSBUXG4iLCAiLyoqXG4gKiBJc29tb3JwaGljIG1vZHVsZSB0byB3b3JrIGFjY2VzcyB0aGUgZW52aXJvbm1lbnQgKHF1ZXJ5IHBhcmFtcywgZW52IHZhcmlhYmxlcykuXG4gKlxuICogQG1vZHVsZSBtYXBcbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAuanMnXG5pbXBvcnQgKiBhcyBzdHJpbmcgZnJvbSAnLi9zdHJpbmcuanMnXG5pbXBvcnQgKiBhcyBjb25kaXRpb25zIGZyb20gJy4vY29uZGl0aW9ucy5qcydcbmltcG9ydCAqIGFzIHN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlLmpzJ1xuaW1wb3J0ICogYXMgZiBmcm9tICcuL2Z1bmN0aW9uLmpzJ1xuXG4vKiBjOCBpZ25vcmUgbmV4dCAyICovXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MucmVsZWFzZSAmJiAvbm9kZXxpb1xcLmpzLy50ZXN0KHByb2Nlc3MucmVsZWFzZS5uYW1lKSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSdcblxuLyogYzggaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmICFpc05vZGVcbi8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbmV4cG9ydCBjb25zdCBpc01hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnXG4gID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pXG4gIDogZmFsc2VcblxuLyoqXG4gKiBAdHlwZSB7TWFwPHN0cmluZyxzdHJpbmc+fVxuICovXG5sZXQgcGFyYW1zXG5jb25zdCBhcmdzID0gW11cblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5jb25zdCBjb21wdXRlUGFyYW1zID0gKCkgPT4ge1xuICBpZiAocGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwYXJhbXMgPSBtYXAuY3JlYXRlKClcbiAgICAgIGNvbnN0IHBhcmdzID0gcHJvY2Vzcy5hcmd2XG4gICAgICBsZXQgY3VyclBhcmFtTmFtZSA9IG51bGxcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFyZyA9IHBhcmdzW2ldXG4gICAgICAgIGlmIChwYXJnWzBdID09PSAnLScpIHtcbiAgICAgICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyYW1zLnNldChjdXJyUGFyYW1OYW1lLCAnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VyclBhcmFtTmFtZSA9IHBhcmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyYW1zLnNldChjdXJyUGFyYW1OYW1lLCBwYXJnKVxuICAgICAgICAgICAgY3VyclBhcmFtTmFtZSA9IG51bGxcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncy5wdXNoKHBhcmcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBwYXJhbXMuc2V0KGN1cnJQYXJhbU5hbWUsICcnKVxuICAgICAgfVxuICAgICAgLy8gaW4gUmVhY3ROYXRpdmUgZm9yIGV4YW1wbGUgdGhpcyB3b3VsZCBub3QgYmUgdHJ1ZSAodW5sZXNzIGNvbm5lY3RlZCB0byB0aGUgUmVtb3RlIERlYnVnZ2VyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gbWFwLmNyZWF0ZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIChsb2NhdGlvbi5zZWFyY2ggfHwgJz8nKS5zbGljZSgxKS5zcGxpdCgnJicpLmZvckVhY2goKGt2KSA9PiB7XG4gICAgICAgIGlmIChrdi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBrdi5zcGxpdCgnPScpXG4gICAgICAgICAgcGFyYW1zLnNldChgLS0ke3N0cmluZy5mcm9tQ2FtZWxDYXNlKGtleSwgJy0nKX1gLCB2YWx1ZSlcbiAgICAgICAgICBwYXJhbXMuc2V0KGAtJHtzdHJpbmcuZnJvbUNhbWVsQ2FzZShrZXksICctJyl9YCwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcyA9IG1hcC5jcmVhdGUoKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyYW1zXG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG4vKiBjOCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGhhc1BhcmFtID0gKG5hbWUpID0+IGNvbXB1dGVQYXJhbXMoKS5oYXMobmFtZSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGRlZmF1bHRWYWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuLyogYzggaWdub3JlIG5leHQgMiAqL1xuZXhwb3J0IGNvbnN0IGdldFBhcmFtID0gKG5hbWUsIGRlZmF1bHRWYWwpID0+XG4gIGNvbXB1dGVQYXJhbXMoKS5nZXQobmFtZSkgfHwgZGVmYXVsdFZhbFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAqL1xuLyogYzggaWdub3JlIG5leHQgNCAqL1xuZXhwb3J0IGNvbnN0IGdldFZhcmlhYmxlID0gKG5hbWUpID0+XG4gIGlzTm9kZVxuICAgID8gY29uZGl0aW9ucy51bmRlZmluZWRUb051bGwocHJvY2Vzcy5lbnZbbmFtZS50b1VwcGVyQ2FzZSgpXSlcbiAgICA6IGNvbmRpdGlvbnMudW5kZWZpbmVkVG9OdWxsKHN0b3JhZ2UudmFyU3RvcmFnZS5nZXRJdGVtKG5hbWUpKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAqL1xuLyogYzggaWdub3JlIG5leHQgMiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbmYgPSAobmFtZSkgPT5cbiAgY29tcHV0ZVBhcmFtcygpLmdldCgnLS0nICsgbmFtZSkgfHwgZ2V0VmFyaWFibGUobmFtZSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuLyogYzggaWdub3JlIG5leHQgMiAqL1xuZXhwb3J0IGNvbnN0IGhhc0NvbmYgPSAobmFtZSkgPT5cbiAgaGFzUGFyYW0oJy0tJyArIG5hbWUpIHx8IGdldFZhcmlhYmxlKG5hbWUpICE9PSBudWxsXG5cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcHJvZHVjdGlvbiA9IGhhc0NvbmYoJ3Byb2R1Y3Rpb24nKVxuXG4vKiBjOCBpZ25vcmUgbmV4dCAyICovXG5jb25zdCBmb3JjZUNvbG9yID0gaXNOb2RlICYmXG4gIGYuaXNPbmVPZihwcm9jZXNzLmVudi5GT1JDRV9DT0xPUiwgWyd0cnVlJywgJzEnLCAnMiddKVxuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmV4cG9ydCBjb25zdCBzdXBwb3J0c0NvbG9yID0gIWhhc1BhcmFtKCduby1jb2xvcnMnKSAmJlxuICAoIWlzTm9kZSB8fCBwcm9jZXNzLnN0ZG91dC5pc1RUWSB8fCBmb3JjZUNvbG9yKSAmJiAoXG4gICFpc05vZGUgfHwgaGFzUGFyYW0oJ2NvbG9yJykgfHwgZm9yY2VDb2xvciB8fFxuICAgIGdldFZhcmlhYmxlKCdDT0xPUlRFUk0nKSAhPT0gbnVsbCB8fFxuICAgIChnZXRWYXJpYWJsZSgnVEVSTScpIHx8ICcnKS5pbmNsdWRlcygnY29sb3InKVxuKVxuLyogYzggaWdub3JlIHN0b3AgKi9cbiIsICIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aCBidWZmZXJzIChVaW50OEFycmF5KS5cbiAqXG4gKiBAbW9kdWxlIGJ1ZmZlclxuICovXG5cbmltcG9ydCAqIGFzIHN0cmluZyBmcm9tICcuL3N0cmluZy5qcydcbmltcG9ydCAqIGFzIGVudiBmcm9tICcuL2Vudmlyb25tZW50LmpzJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnLi9hcnJheS5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi9lbmNvZGluZy5qcydcbmltcG9ydCAqIGFzIGRlY29kaW5nIGZyb20gJy4vZGVjb2RpbmcuanMnXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheUZyb21MZW4gPSBsZW4gPT4gbmV3IFVpbnQ4QXJyYXkobGVuKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIgPSAoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVVaW50OEFycmF5RnJvbUFycmF5QnVmZmVyID0gYnVmZmVyID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlcilcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnl0ZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuY29uc3QgdG9CYXNlNjRCcm93c2VyID0gYnl0ZXMgPT4ge1xuICBsZXQgcyA9ICcnXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgcyArPSBzdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKVxuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gYnRvYShzKVxufVxuLyogYzggaWdub3JlIHN0b3AgKi9cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHRvQmFzZTY0Tm9kZSA9IGJ5dGVzID0+IEJ1ZmZlci5mcm9tKGJ5dGVzLmJ1ZmZlciwgYnl0ZXMuYnl0ZU9mZnNldCwgYnl0ZXMuYnl0ZUxlbmd0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZnJvbUJhc2U2NEJyb3dzZXIgPSBzID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNvbnN0IGEgPSBhdG9iKHMpXG4gIGNvbnN0IGJ5dGVzID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4oYS5sZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzW2ldID0gYS5jaGFyQ29kZUF0KGkpXG4gIH1cbiAgcmV0dXJuIGJ5dGVzXG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKi9cbmNvbnN0IGZyb21CYXNlNjROb2RlID0gcyA9PiB7XG4gIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5mcm9tKHMsICdiYXNlNjQnKVxuICByZXR1cm4gY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlTGVuZ3RoKVxufVxuXG4vKiBjOCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHRvQmFzZTY0ID0gZW52LmlzQnJvd3NlciA/IHRvQmFzZTY0QnJvd3NlciA6IHRvQmFzZTY0Tm9kZVxuXG4vKiBjOCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGZyb21CYXNlNjQgPSBlbnYuaXNCcm93c2VyID8gZnJvbUJhc2U2NEJyb3dzZXIgOiBmcm9tQmFzZTY0Tm9kZVxuXG4vKipcbiAqIEltcGxlbWVudHMgYmFzZTY0dXJsIC0gc2VlIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNDY0OCNzZWN0aW9uLTVcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKi9cbmV4cG9ydCBjb25zdCB0b0Jhc2U2NFVybEVuY29kZWQgPSBidWYgPT4gdG9CYXNlNjQoYnVmKS5yZXBsYWNlQWxsKCcrJywgJy0nKS5yZXBsYWNlQWxsKCcvJywgJ18nKS5yZXBsYWNlQWxsKCc9JywgJycpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFxuICovXG5leHBvcnQgY29uc3QgZnJvbUJhc2U2NFVybEVuY29kZWQgPSBiYXNlNjQgPT4gZnJvbUJhc2U2NChiYXNlNjQucmVwbGFjZUFsbCgnLScsICcrJykucmVwbGFjZUFsbCgnXycsICcvJykpXG5cbi8qKlxuICogQmFzZTY0IGlzIGFsd2F5cyBhIG1vcmUgZWZmaWNpZW50IGNob2ljZS4gVGhpcyBleGlzdHMgZm9yIHV0aWxpdHkgcHVycG9zZXMgb25seS5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICovXG5leHBvcnQgY29uc3QgdG9IZXhTdHJpbmcgPSBidWYgPT4gYXJyYXkubWFwKGJ1ZiwgYiA9PiBiLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKVxuXG4vKipcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGF0IHRoZSBoZXggZG9lc24ndCBzdGFydCB3aXRoIDB4Li5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaGV4XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tSGV4U3RyaW5nID0gaGV4ID0+IHtcbiAgY29uc3QgaGxlbiA9IGhleC5sZW5ndGhcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobWF0aC5jZWlsKGhsZW4gLyAyKSlcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBobGVuOyBpICs9IDIpIHtcbiAgICBidWZbYnVmLmxlbmd0aCAtIGkgLyAyIC0gMV0gPSBOdW1iZXIucGFyc2VJbnQoaGV4LnNsaWNlKGhsZW4gLSBpIC0gMiwgaGxlbiAtIGkpLCAxNilcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogQ29weSB0aGUgY29udGVudCBvZiBhbiBVaW50OEFycmF5IHZpZXcgdG8gYSBuZXcgQXJyYXlCdWZmZXIuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgY29weVVpbnQ4QXJyYXkgPSB1aW50OEFycmF5ID0+IHtcbiAgY29uc3QgbmV3QnVmID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4odWludDhBcnJheS5ieXRlTGVuZ3RoKVxuICBuZXdCdWYuc2V0KHVpbnQ4QXJyYXkpXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLyoqXG4gKiBFbmNvZGUgYW55dGhpbmcgYXMgYSBVSW50OEFycmF5LiBJdCdzIGEgcHVuIG9uIHR5cGVzY3JpcHRzJ3MgYGFueWAgdHlwZS5cbiAqIFNlZSBlbmNvZGluZy53cml0ZUFueSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZUFueSA9IGRhdGEgPT5cbiAgZW5jb2RpbmcuZW5jb2RlKGVuY29kZXIgPT4gZW5jb2Rpbmcud3JpdGVBbnkoZW5jb2RlciwgZGF0YSkpXG5cbi8qKlxuICogRGVjb2RlIGFuIGFueS1lbmNvZGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVBbnkgPSBidWYgPT4gZGVjb2RpbmcucmVhZEFueShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGJ1ZikpXG5cbi8qKlxuICogU2hpZnQgQnl0ZSBBcnJheSB7Tn0gYml0cyB0byB0aGUgbGVmdC4gRG9lcyBub3QgZXhwYW5kIGJ5dGUgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBic1xuICogQHBhcmFtIHtudW1iZXJ9IE4gc2hvdWxkIGJlIGluIHRoZSByYW5nZSBvZiBbMC03XVxuICovXG5leHBvcnQgY29uc3Qgc2hpZnROQml0c0xlZnQgPSAoYnMsIE4pID0+IHtcbiAgaWYgKE4gPT09IDApIHJldHVybiBic1xuICBicyA9IG5ldyBVaW50OEFycmF5KGJzKVxuICBic1swXSA8PD0gTlxuICBmb3IgKGxldCBpID0gMTsgaSA8IGJzLmxlbmd0aDsgaSsrKSB7XG4gICAgYnNbaSAtIDFdIHw9IGJzW2ldID4+PiAoOCAtIE4pXG4gICAgYnNbaV0gPDw9IE5cbiAgfVxuICByZXR1cm4gYnNcbn1cbiIsICIvKipcbiAqIFdvcmtpbmcgd2l0aCB2YWx1ZSBwYWlycy5cbiAqXG4gKiBAbW9kdWxlIHBhaXJcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqL1xuZXhwb3J0IGNsYXNzIFBhaXIge1xuICAvKipcbiAgICogQHBhcmFtIHtMfSBsZWZ0XG4gICAqIEBwYXJhbSB7Un0gcmlnaHRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZWZ0LCByaWdodCkge1xuICAgIHRoaXMubGVmdCA9IGxlZnRcbiAgICB0aGlzLnJpZ2h0ID0gcmlnaHRcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7TH0gbGVmdFxuICogQHBhcmFtIHtSfSByaWdodFxuICogQHJldHVybiB7UGFpcjxMLFI+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKGxlZnQsIHJpZ2h0KSA9PiBuZXcgUGFpcihsZWZ0LCByaWdodClcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSXG4gKiBAcGFyYW0ge1J9IHJpZ2h0XG4gKiBAcGFyYW0ge0x9IGxlZnRcbiAqIEByZXR1cm4ge1BhaXI8TCxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVJldmVyc2VkID0gKHJpZ2h0LCBsZWZ0KSA9PiBuZXcgUGFpcihsZWZ0LCByaWdodClcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSXG4gKiBAcGFyYW0ge0FycmF5PFBhaXI8TCxSPj59IGFyclxuICogQHBhcmFtIHtmdW5jdGlvbihMLCBSKTphbnl9IGZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAoYXJyLCBmKSA9PiBhcnIuZm9yRWFjaChwID0+IGYocC5sZWZ0LCBwLnJpZ2h0KSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSLFhcbiAqIEBwYXJhbSB7QXJyYXk8UGFpcjxMLFI+Pn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEwsIFIpOlh9IGZcbiAqIEByZXR1cm4ge0FycmF5PFg+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKGFyciwgZikgPT4gYXJyLm1hcChwID0+IGYocC5sZWZ0LCBwLnJpZ2h0KSlcbiIsICIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGggdGhlIERPTS5cbiAqXG4gKiBAbW9kdWxlIGRvbVxuICovXG5cbmltcG9ydCAqIGFzIHBhaXIgZnJvbSAnLi9wYWlyLmpzJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwLmpzJ1xuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbi8qKlxuICogQHR5cGUge0RvY3VtZW50fVxuICovXG5leHBvcnQgY29uc3QgZG9jID0gLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSBuYW1lID0+IGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpXG5cbi8qKlxuICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSAoKSA9PiBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1RleHR9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXh0Tm9kZSA9IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpXG5cbmV4cG9ydCBjb25zdCBkb21QYXJzZXIgPSAvKiogQHR5cGUge0RPTVBhcnNlcn0gKi8gKHR5cGVvZiBET01QYXJzZXIgIT09ICd1bmRlZmluZWQnID8gbmV3IERPTVBhcnNlcigpIDogbnVsbClcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbmV4cG9ydCBjb25zdCBlbWl0Q3VzdG9tRXZlbnQgPSAoZWwsIG5hbWUsIG9wdHMpID0+IGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KG5hbWUsIG9wdHMpKVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxzdHJpbmd8Ym9vbGVhbj4+fSBhdHRycyBBcnJheSBvZiBrZXktdmFsdWUgcGFpcnNcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGVzID0gKGVsLCBhdHRycykgPT4ge1xuICBwYWlyLmZvckVhY2goYXR0cnMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCAnJylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZWxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsIHN0cmluZz59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldEF0dHJpYnV0ZXNNYXAgPSAoZWwsIGF0dHJzKSA9PiB7XG4gIGF0dHJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHsgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpIH0pXG4gIHJldHVybiBlbFxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8Tm9kZT58SFRNTENvbGxlY3Rpb259IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fVxuICovXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSBjaGlsZHJlbiA9PiB7XG4gIGNvbnN0IGZyYWdtZW50ID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBhcHBlbmRDaGlsZChmcmFnbWVudCwgY2hpbGRyZW5baV0pXG4gIH1cbiAgcmV0dXJuIGZyYWdtZW50XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IG5vZGVzXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3QgYXBwZW5kID0gKHBhcmVudCwgbm9kZXMpID0+IHtcbiAgYXBwZW5kQ2hpbGQocGFyZW50LCBmcmFnbWVudChub2RlcykpXG4gIHJldHVybiBwYXJlbnRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlID0gZWwgPT4gZWwucmVtb3ZlKClcblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lcn0gZlxuICovXG5leHBvcnQgY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IChlbCwgbmFtZSwgZikgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmKVxuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBmXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gKGVsLCBuYW1lLCBmKSA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGYpXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0FycmF5PHBhaXIuUGFpcjxzdHJpbmcsRXZlbnRMaXN0ZW5lcj4+fSBsaXN0ZW5lcnNcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhZGRFdmVudExpc3RlbmVycyA9IChub2RlLCBsaXN0ZW5lcnMpID0+IHtcbiAgcGFpci5mb3JFYWNoKGxpc3RlbmVycywgKG5hbWUsIGYpID0+IGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgbmFtZSwgZikpXG4gIHJldHVybiBub2RlXG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0FycmF5PHBhaXIuUGFpcjxzdHJpbmcsRXZlbnRMaXN0ZW5lcj4+fSBsaXN0ZW5lcnNcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFdmVudExpc3RlbmVycyA9IChub2RlLCBsaXN0ZW5lcnMpID0+IHtcbiAgcGFpci5mb3JFYWNoKGxpc3RlbmVycywgKG5hbWUsIGYpID0+IHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgbmFtZSwgZikpXG4gIHJldHVybiBub2RlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxzdHJpbmc+fHBhaXIuUGFpcjxzdHJpbmcsYm9vbGVhbj4+fSBhdHRycyBBcnJheSBvZiBrZXktdmFsdWUgcGFpcnNcbiAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3QgZWxlbWVudCA9IChuYW1lLCBhdHRycyA9IFtdLCBjaGlsZHJlbiA9IFtdKSA9PlxuICBhcHBlbmQoc2V0QXR0cmlidXRlcyhjcmVhdGVFbGVtZW50KG5hbWUpLCBhdHRycyksIGNoaWxkcmVuKVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG5leHBvcnQgY29uc3QgY2FudmFzID0gKHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgY29uc3QgYyA9IC8qKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR9ICovIChjcmVhdGVFbGVtZW50KCdjYW52YXMnKSlcbiAgYy5oZWlnaHQgPSBoZWlnaHRcbiAgYy53aWR0aCA9IHdpZHRoXG4gIHJldHVybiBjXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRcbiAqIEByZXR1cm4ge1RleHR9XG4gKi9cbmV4cG9ydCBjb25zdCB0ZXh0ID0gY3JlYXRlVGV4dE5vZGVcblxuLyoqXG4gKiBAcGFyYW0ge3BhaXIuUGFpcjxzdHJpbmcsc3RyaW5nPn0gcGFpclxuICovXG5leHBvcnQgY29uc3QgcGFpclRvU3R5bGVTdHJpbmcgPSBwYWlyID0+IGAke3BhaXIubGVmdH06JHtwYWlyLnJpZ2h0fTtgXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz4+fSBwYWlyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgcGFpcnNUb1N0eWxlU3RyaW5nID0gcGFpcnMgPT4gcGFpcnMubWFwKHBhaXJUb1N0eWxlU3RyaW5nKS5qb2luKCcnKVxuXG4vKipcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxzdHJpbmc+fSBtXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBtYXBUb1N0eWxlU3RyaW5nID0gbSA9PiBtYXAubWFwKG0sICh2YWx1ZSwga2V5KSA9PiBgJHtrZXl9OiR7dmFsdWV9O2ApLmpvaW4oJycpXG5cbi8qKlxuICogQHRvZG8gc2hvdWxkIGFsd2F5cyBxdWVyeSBvbiBhIGRvbSBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxTaGFkb3dSb290fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gKi9cbmV4cG9ydCBjb25zdCBxdWVyeVNlbGVjdG9yID0gKGVsLCBxdWVyeSkgPT4gZWwucXVlcnlTZWxlY3RvcihxdWVyeSlcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fFNoYWRvd1Jvb3R9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAqIEByZXR1cm4ge05vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+fVxuICovXG5leHBvcnQgY29uc3QgcXVlcnlTZWxlY3RvckFsbCA9IChlbCwgcXVlcnkpID0+IGVsLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEVsZW1lbnRCeUlkID0gaWQgPT4gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKGRvYy5nZXRFbGVtZW50QnlJZChpZCkpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG5jb25zdCBfcGFyc2UgPSBodG1sID0+IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcoYDxodG1sPjxib2R5PiR7aHRtbH08L2JvZHk+PC9odG1sPmAsICd0ZXh0L2h0bWwnKS5ib2R5XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUZyYWdtZW50ID0gaHRtbCA9PiBmcmFnbWVudCgvKiogQHR5cGUge2FueX0gKi8gKF9wYXJzZShodG1sKS5jaGlsZE5vZGVzKSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUVsZW1lbnQgPSBodG1sID0+IC8qKiBAdHlwZSBIVE1MRWxlbWVudCAqLyAoX3BhcnNlKGh0bWwpLmZpcnN0RWxlbWVudENoaWxkKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9sZEVsXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IG5ld0VsXG4gKi9cbmV4cG9ydCBjb25zdCByZXBsYWNlV2l0aCA9IChvbGRFbCwgbmV3RWwpID0+IG9sZEVsLnJlcGxhY2VXaXRoKG5ld0VsKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7Tm9kZXxudWxsfSByZWZcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG5leHBvcnQgY29uc3QgaW5zZXJ0QmVmb3JlID0gKHBhcmVudCwgZWwsIHJlZikgPT4gcGFyZW50Lmluc2VydEJlZm9yZShlbCwgcmVmKVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50XG4gKiBAcGFyYW0ge05vZGV9IGNoaWxkXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYXBwZW5kQ2hpbGQgPSAocGFyZW50LCBjaGlsZCkgPT4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKVxuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9OT0RFID0gZG9jLkVMRU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IFRFWFRfTk9ERSA9IGRvYy5URVhUX05PREVcbmV4cG9ydCBjb25zdCBDREFUQV9TRUNUSU9OX05PREUgPSBkb2MuQ0RBVEFfU0VDVElPTl9OT0RFXG5leHBvcnQgY29uc3QgQ09NTUVOVF9OT0RFID0gZG9jLkNPTU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX05PREUgPSBkb2MuRE9DVU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX1RZUEVfTk9ERSA9IGRvYy5ET0NVTUVOVF9UWVBFX05PREVcbmV4cG9ydCBjb25zdCBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gZG9jLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREVcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gbm9kZVxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrTm9kZVR5cGUgPSAobm9kZSwgdHlwZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gdHlwZVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjaGlsZFxuICovXG5leHBvcnQgY29uc3QgaXNQYXJlbnRPZiA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gIGxldCBwID0gY2hpbGQucGFyZW50Tm9kZVxuICB3aGlsZSAocCAmJiBwICE9PSBwYXJlbnQpIHtcbiAgICBwID0gcC5wYXJlbnROb2RlXG4gIH1cbiAgcmV0dXJuIHAgPT09IHBhcmVudFxufVxuLyogYzggaWdub3JlIHN0b3AgKi9cbiIsICIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBFY21hU2NyaXB0IFN5bWJvbHMuXG4gKlxuICogQG1vZHVsZSBzeW1ib2xcbiAqL1xuXG4vKipcbiAqIFJldHVybiBmcmVzaCBzeW1ib2wuXG4gKlxuICogQHJldHVybiB7U3ltYm9sfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gU3ltYm9sXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHNcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBpc1N5bWJvbCA9IHMgPT4gdHlwZW9mIHMgPT09ICdzeW1ib2wnXG4iLCAiaW1wb3J0ICogYXMgc3ltYm9sIGZyb20gJy4vc3ltYm9sLmpzJ1xuaW1wb3J0ICogYXMgdGltZSBmcm9tICcuL3RpbWUuanMnXG5pbXBvcnQgKiBhcyBlbnYgZnJvbSAnLi9lbnZpcm9ubWVudC5qcydcbmltcG9ydCAqIGFzIGZ1bmMgZnJvbSAnLi9mdW5jdGlvbi5qcydcblxuZXhwb3J0IGNvbnN0IEJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBVTkJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBCTFVFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgR1JFWSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IEdSRUVOID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUkVEID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUFVSUExFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgT1JBTkdFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgVU5DT0xPUiA9IHN5bWJvbC5jcmVhdGUoKVxuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmd8b2JqZWN0fG51bWJlcj59XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wdXRlTm9Db2xvckxvZ2dpbmdBcmdzID0gYXJncyA9PiB7XG4gIGNvbnN0IHN0ckJ1aWxkZXIgPSBbXVxuICBjb25zdCBsb2dBcmdzID0gW11cbiAgLy8gdHJ5IHdpdGggZm9ybWF0dGluZyB1bnRpbCB3ZSBmaW5kIHNvbWV0aGluZyB1bnN1cHBvcnRlZFxuICBsZXQgaSA9IDBcbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXVxuICAgIGlmIChhcmcuY29uc3RydWN0b3IgPT09IFN0cmluZyB8fCBhcmcuY29uc3RydWN0b3IgPT09IE51bWJlcikge1xuICAgICAgc3RyQnVpbGRlci5wdXNoKGFyZylcbiAgICB9IGVsc2UgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICBsb2dBcmdzLnB1c2goSlNPTi5zdHJpbmdpZnkoYXJnKSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvZ0FyZ3Ncbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG5cbmNvbnN0IGxvZ2dpbmdDb2xvcnMgPSBbR1JFRU4sIFBVUlBMRSwgT1JBTkdFLCBCTFVFXVxubGV0IG5leHRDb2xvciA9IDBcbmxldCBsYXN0TG9nZ2luZ1RpbWUgPSB0aW1lLmdldFVuaXhUaW1lKClcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uYW55KTp2b2lkfSBfcHJpbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi5hbnkpOnZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2R1bGVMb2dnZXIgPSAoX3ByaW50LCBtb2R1bGVOYW1lKSA9PiB7XG4gIGNvbnN0IGNvbG9yID0gbG9nZ2luZ0NvbG9yc1tuZXh0Q29sb3JdXG4gIGNvbnN0IGRlYnVnUmVnZXhWYXIgPSBlbnYuZ2V0VmFyaWFibGUoJ2xvZycpXG4gIGNvbnN0IGRvTG9nZ2luZyA9IGRlYnVnUmVnZXhWYXIgIT09IG51bGwgJiZcbiAgICAoZGVidWdSZWdleFZhciA9PT0gJyonIHx8IGRlYnVnUmVnZXhWYXIgPT09ICd0cnVlJyB8fFxuICAgICAgbmV3IFJlZ0V4cChkZWJ1Z1JlZ2V4VmFyLCAnZ2knKS50ZXN0KG1vZHVsZU5hbWUpKVxuICBuZXh0Q29sb3IgPSAobmV4dENvbG9yICsgMSkgJSBsb2dnaW5nQ29sb3JzLmxlbmd0aFxuICBtb2R1bGVOYW1lICs9ICc6ICdcbiAgcmV0dXJuICFkb0xvZ2dpbmdcbiAgICA/IGZ1bmMubm9wXG4gICAgOiAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCB0aW1lTm93ID0gdGltZS5nZXRVbml4VGltZSgpXG4gICAgICAgIGNvbnN0IHRpbWVEaWZmID0gdGltZU5vdyAtIGxhc3RMb2dnaW5nVGltZVxuICAgICAgICBsYXN0TG9nZ2luZ1RpbWUgPSB0aW1lTm93XG4gICAgICAgIF9wcmludChcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICBtb2R1bGVOYW1lLFxuICAgICAgICAgIFVOQ09MT1IsXG4gICAgICAgICAgLi4uYXJncy5tYXAoKGFyZykgPT5cbiAgICAgICAgICAgICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnc3ltYm9sJylcbiAgICAgICAgICAgICAgPyBhcmdcbiAgICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShhcmcpXG4gICAgICAgICAgKSxcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAnICsnICsgdGltZURpZmYgKyAnbXMnXG4gICAgICAgIClcbiAgICAgIH1cbn1cbi8qIGM4IGlnbm9yZSBzdG9wICovXG4iLCAiLyoqXG4gKiBJc29tb3JwaGljIGxvZ2dpbmcgbW9kdWxlIHdpdGggc3VwcG9ydCBmb3IgY29sb3JzIVxuICpcbiAqIEBtb2R1bGUgbG9nZ2luZ1xuICovXG5cbmltcG9ydCAqIGFzIGVudiBmcm9tICcuL2Vudmlyb25tZW50LmpzJ1xuaW1wb3J0ICogYXMgc2V0IGZyb20gJy4vc2V0LmpzJ1xuaW1wb3J0ICogYXMgcGFpciBmcm9tICcuL3BhaXIuanMnXG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnLi9kb20uanMnXG5pbXBvcnQgKiBhcyBqc29uIGZyb20gJy4vanNvbi5qcydcbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcbmltcG9ydCAqIGFzIGV2ZW50bG9vcCBmcm9tICcuL2V2ZW50bG9vcC5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgY29tbW9uIGZyb20gJy4vbG9nZ2luZy5jb21tb24uanMnXG5cbmV4cG9ydCB7IEJPTEQsIFVOQk9MRCwgQkxVRSwgR1JFWSwgR1JFRU4sIFJFRCwgUFVSUExFLCBPUkFOR0UsIFVOQ09MT1IgfSBmcm9tICcuL2xvZ2dpbmcuY29tbW9uLmpzJ1xuXG4vKipcbiAqIEB0eXBlIHtPYmplY3Q8U3ltYm9sLHBhaXIuUGFpcjxzdHJpbmcsc3RyaW5nPj59XG4gKi9cbmNvbnN0IF9icm93c2VyU3R5bGVNYXAgPSB7XG4gIFtjb21tb24uQk9MRF06IHBhaXIuY3JlYXRlKCdmb250LXdlaWdodCcsICdib2xkJyksXG4gIFtjb21tb24uVU5CT0xEXTogcGFpci5jcmVhdGUoJ2ZvbnQtd2VpZ2h0JywgJ25vcm1hbCcpLFxuICBbY29tbW9uLkJMVUVdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmx1ZScpLFxuICBbY29tbW9uLkdSRUVOXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ2dyZWVuJyksXG4gIFtjb21tb24uR1JFWV06IHBhaXIuY3JlYXRlKCdjb2xvcicsICdncmV5JyksXG4gIFtjb21tb24uUkVEXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ3JlZCcpLFxuICBbY29tbW9uLlBVUlBMRV06IHBhaXIuY3JlYXRlKCdjb2xvcicsICdwdXJwbGUnKSxcbiAgW2NvbW1vbi5PUkFOR0VdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnb3JhbmdlJyksIC8vIG5vdCB3ZWxsIHN1cHBvcnRlZCBpbiBjaHJvbWUgd2hlbiBkZWJ1Z2dpbmcgbm9kZSB3aXRoIGluc3BlY3RvciAtIFRPRE86IGRlcHJlY2F0ZVxuICBbY29tbW9uLlVOQ09MT1JdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmxhY2snKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG9iamVjdHxudW1iZXI+fVxuICovXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmNvbnN0IGNvbXB1dGVCcm93c2VyTG9nZ2luZ0FyZ3MgPSAoYXJncykgPT4ge1xuICBjb25zdCBzdHJCdWlsZGVyID0gW11cbiAgY29uc3Qgc3R5bGVzID0gW11cbiAgY29uc3QgY3VycmVudFN0eWxlID0gbWFwLmNyZWF0ZSgpXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nfE9iamVjdHxudW1iZXI+fVxuICAgKi9cbiAgbGV0IGxvZ0FyZ3MgPSBbXVxuICAvLyB0cnkgd2l0aCBmb3JtYXR0aW5nIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHVuc3VwcG9ydGVkXG4gIGxldCBpID0gMFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHN0eWxlID0gX2Jyb3dzZXJTdHlsZU1hcFthcmddXG4gICAgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnRTdHlsZS5zZXQoc3R5bGUubGVmdCwgc3R5bGUucmlnaHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhcmcuY29uc3RydWN0b3IgPT09IFN0cmluZyB8fCBhcmcuY29uc3RydWN0b3IgPT09IE51bWJlcikge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvbS5tYXBUb1N0eWxlU3RyaW5nKGN1cnJlbnRTdHlsZSlcbiAgICAgICAgaWYgKGkgPiAwIHx8IHN0eWxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzdHJCdWlsZGVyLnB1c2goJyVjJyArIGFyZylcbiAgICAgICAgICBzdHlsZXMucHVzaChzdHlsZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJCdWlsZGVyLnB1c2goYXJnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaSA+IDApIHtcbiAgICAvLyBjcmVhdGUgbG9nQXJncyB3aXRoIHdoYXQgd2UgaGF2ZSBzbyBmYXJcbiAgICBsb2dBcmdzID0gc3R5bGVzXG4gICAgbG9nQXJncy51bnNoaWZ0KHN0ckJ1aWxkZXIuam9pbignJykpXG4gIH1cbiAgLy8gYXBwZW5kIHRoZSByZXN0XG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBsb2dBcmdzLnB1c2goYXJnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbG9nQXJnc1xufVxuLyogYzggaWdub3JlIHN0b3AgKi9cblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5jb25zdCBjb21wdXRlTG9nZ2luZ0FyZ3MgPSBlbnYuc3VwcG9ydHNDb2xvclxuICA/IGNvbXB1dGVCcm93c2VyTG9nZ2luZ0FyZ3NcbiAgOiBjb21tb24uY29tcHV0ZU5vQ29sb3JMb2dnaW5nQXJnc1xuLyogYzggaWdub3JlIHN0b3AgKi9cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50ID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc29sZS5sb2coLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCgodmMpID0+IHZjLnByaW50KGFyZ3MpKVxufVxuXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCB3YXJuID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc29sZS53YXJuKC4uLmNvbXB1dGVMb2dnaW5nQXJncyhhcmdzKSlcbiAgYXJncy51bnNoaWZ0KGNvbW1vbi5PUkFOR0UpXG4gIHZjb25zb2xlcy5mb3JFYWNoKCh2YykgPT4gdmMucHJpbnQoYXJncykpXG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICovXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmV4cG9ydCBjb25zdCBwcmludEVycm9yID0gKGVycikgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycilcbiAgdmNvbnNvbGVzLmZvckVhY2goKHZjKSA9PiB2Yy5wcmludEVycm9yKGVycikpXG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgaW1hZ2UgbG9jYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0IG9mIHRoZSBpbWFnZSBpbiBwaXhlbFxuICovXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmV4cG9ydCBjb25zdCBwcmludEltZyA9ICh1cmwsIGhlaWdodCkgPT4ge1xuICBpZiAoZW52LmlzQnJvd3Nlcikge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJyVjICAgICAgICAgICAgICAgICAgICAgICcsXG4gICAgICBgZm9udC1zaXplOiAke2hlaWdodH1weDsgYmFja2dyb3VuZC1zaXplOiBjb250YWluOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHt1cmx9KWBcbiAgICApXG4gICAgLy8gY29uc29sZS5sb2coJyVjICAgICAgICAgICAgICAgICcsIGBmb250LXNpemU6ICR7aGVpZ2h0fXg7IGJhY2tncm91bmQ6IHVybCgke3VybH0pIG5vLXJlcGVhdDtgKVxuICB9XG4gIHZjb25zb2xlcy5mb3JFYWNoKCh2YykgPT4gdmMucHJpbnRJbWcodXJsLCBoZWlnaHQpKVxufVxuLyogYzggaWdub3JlIHN0b3AgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbmV4cG9ydCBjb25zdCBwcmludEltZ0Jhc2U2NCA9IChiYXNlNjQsIGhlaWdodCkgPT5cbiAgcHJpbnRJbWcoYGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCwke2Jhc2U2NH1gLCBoZWlnaHQpXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXAoLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCgodmMpID0+IHZjLmdyb3VwKGFyZ3MpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICovXG5leHBvcnQgY29uc3QgZ3JvdXBDb2xsYXBzZWQgPSAoLi4uYXJncykgPT4ge1xuICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKC4uLmNvbXB1dGVMb2dnaW5nQXJncyhhcmdzKSlcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2goKHZjKSA9PiB2Yy5ncm91cENvbGxhcHNlZChhcmdzKSlcbn1cblxuZXhwb3J0IGNvbnN0IGdyb3VwRW5kID0gKCkgPT4ge1xuICBjb25zb2xlLmdyb3VwRW5kKClcbiAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2goKHZjKSA9PiB2Yy5ncm91cEVuZCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpOb2RlfSBjcmVhdGVOb2RlXG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbmV4cG9ydCBjb25zdCBwcmludERvbSA9IChjcmVhdGVOb2RlKSA9PlxuICB2Y29uc29sZXMuZm9yRWFjaCgodmMpID0+IHZjLnByaW50RG9tKGNyZWF0ZU5vZGUoKSkpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbmV4cG9ydCBjb25zdCBwcmludENhbnZhcyA9IChjYW52YXMsIGhlaWdodCkgPT5cbiAgcHJpbnRJbWcoY2FudmFzLnRvRGF0YVVSTCgpLCBoZWlnaHQpXG5cbmV4cG9ydCBjb25zdCB2Y29uc29sZXMgPSBzZXQuY3JlYXRlKClcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqIEByZXR1cm4ge0FycmF5PEVsZW1lbnQ+fVxuICovXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmNvbnN0IF9jb21wdXRlTGluZVNwYW5zID0gKGFyZ3MpID0+IHtcbiAgY29uc3Qgc3BhbnMgPSBbXVxuICBjb25zdCBjdXJyZW50U3R5bGUgPSBuZXcgTWFwKClcbiAgLy8gdHJ5IHdpdGggZm9ybWF0dGluZyB1bnRpbCB3ZSBmaW5kIHNvbWV0aGluZyB1bnN1cHBvcnRlZFxuICBsZXQgaSA9IDBcbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBzdHlsZSA9IF9icm93c2VyU3R5bGVNYXBbYXJnXVxuICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50U3R5bGUuc2V0KHN0eWxlLmxlZnQsIHN0eWxlLnJpZ2h0KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgfHwgYXJnLmNvbnN0cnVjdG9yID09PSBOdW1iZXIpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBzcGFuID0gZG9tLmVsZW1lbnQoJ3NwYW4nLCBbXG4gICAgICAgICAgcGFpci5jcmVhdGUoJ3N0eWxlJywgZG9tLm1hcFRvU3R5bGVTdHJpbmcoY3VycmVudFN0eWxlKSlcbiAgICAgICAgXSwgW2RvbS50ZXh0KGFyZy50b1N0cmluZygpKV0pXG4gICAgICAgIGlmIChzcGFuLmlubmVySFRNTCA9PT0gJycpIHtcbiAgICAgICAgICBzcGFuLmlubmVySFRNTCA9ICcmbmJzcDsnXG4gICAgICAgIH1cbiAgICAgICAgc3BhbnMucHVzaChzcGFuKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gYXBwZW5kIHRoZSByZXN0XG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjb250ZW50ID0gYXJnc1tpXVxuICAgIGlmICghKGNvbnRlbnQgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBpZiAoY29udGVudC5jb25zdHJ1Y3RvciAhPT0gU3RyaW5nICYmIGNvbnRlbnQuY29uc3RydWN0b3IgIT09IE51bWJlcikge1xuICAgICAgICBjb250ZW50ID0gJyAnICsganNvbi5zdHJpbmdpZnkoY29udGVudCkgKyAnICdcbiAgICAgIH1cbiAgICAgIHNwYW5zLnB1c2goXG4gICAgICAgIGRvbS5lbGVtZW50KCdzcGFuJywgW10sIFtkb20udGV4dCgvKiogQHR5cGUge3N0cmluZ30gKi8gKGNvbnRlbnQpKV0pXG4gICAgICApXG4gICAgfVxuICB9XG4gIHJldHVybiBzcGFuc1xufVxuLyogYzggaWdub3JlIHN0b3AgKi9cblxuY29uc3QgbGluZVN0eWxlID1cbiAgJ2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTJlMmUyO3BhZGRpbmc6MnB4OydcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5leHBvcnQgY2xhc3MgVkNvbnNvbGUge1xuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBkb21cbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb20pIHtcbiAgICB0aGlzLmRvbSA9IGRvbVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuY2NvbnRhaW5lciA9IHRoaXMuZG9tXG4gICAgdGhpcy5kZXB0aCA9IDBcbiAgICB2Y29uc29sZXMuYWRkKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29sbGFwc2VkXG4gICAqL1xuICBncm91cCAoYXJncywgY29sbGFwc2VkID0gZmFsc2UpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBjb25zdCB0cmlhbmdsZURvd24gPSBkb20uZWxlbWVudCgnc3BhbicsIFtcbiAgICAgICAgcGFpci5jcmVhdGUoJ2hpZGRlbicsIGNvbGxhcHNlZCksXG4gICAgICAgIHBhaXIuY3JlYXRlKCdzdHlsZScsICdjb2xvcjpncmV5O2ZvbnQtc2l6ZToxMjAlOycpXG4gICAgICBdLCBbZG9tLnRleHQoJ1x1MjVCQycpXSlcbiAgICAgIGNvbnN0IHRyaWFuZ2xlUmlnaHQgPSBkb20uZWxlbWVudCgnc3BhbicsIFtcbiAgICAgICAgcGFpci5jcmVhdGUoJ2hpZGRlbicsICFjb2xsYXBzZWQpLFxuICAgICAgICBwYWlyLmNyZWF0ZSgnc3R5bGUnLCAnY29sb3I6Z3JleTtmb250LXNpemU6MTI1JTsnKVxuICAgICAgXSwgW2RvbS50ZXh0KCdcdTI1QjYnKV0pXG4gICAgICBjb25zdCBjb250ZW50ID0gZG9tLmVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBbcGFpci5jcmVhdGUoXG4gICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICBgJHtsaW5lU3R5bGV9O3BhZGRpbmctbGVmdDoke3RoaXMuZGVwdGggKiAxMH1weGBcbiAgICAgICAgKV0sXG4gICAgICAgIFt0cmlhbmdsZURvd24sIHRyaWFuZ2xlUmlnaHQsIGRvbS50ZXh0KCcgJyldLmNvbmNhdChcbiAgICAgICAgICBfY29tcHV0ZUxpbmVTcGFucyhhcmdzKVxuICAgICAgICApXG4gICAgICApXG4gICAgICBjb25zdCBuZXh0Q29udGFpbmVyID0gZG9tLmVsZW1lbnQoJ2RpdicsIFtcbiAgICAgICAgcGFpci5jcmVhdGUoJ2hpZGRlbicsIGNvbGxhcHNlZClcbiAgICAgIF0pXG4gICAgICBjb25zdCBuZXh0TGluZSA9IGRvbS5lbGVtZW50KCdkaXYnLCBbXSwgW2NvbnRlbnQsIG5leHRDb250YWluZXJdKVxuICAgICAgZG9tLmFwcGVuZCh0aGlzLmNjb250YWluZXIsIFtuZXh0TGluZV0pXG4gICAgICB0aGlzLmNjb250YWluZXIgPSBuZXh0Q29udGFpbmVyXG4gICAgICB0aGlzLmRlcHRoKytcbiAgICAgIC8vIHdoZW4gaGVhZGVyIGlzIGNsaWNrZWQsIGNvbGxhcHNlL3VuY29sbGFwc2UgY29udGFpbmVyXG4gICAgICBkb20uYWRkRXZlbnRMaXN0ZW5lcihjb250ZW50LCAnY2xpY2snLCAoX2V2ZW50KSA9PiB7XG4gICAgICAgIG5leHRDb250YWluZXIudG9nZ2xlQXR0cmlidXRlKCdoaWRkZW4nKVxuICAgICAgICB0cmlhbmdsZURvd24udG9nZ2xlQXR0cmlidXRlKCdoaWRkZW4nKVxuICAgICAgICB0cmlhbmdsZVJpZ2h0LnRvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJylcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAgICovXG4gIGdyb3VwQ29sbGFwc2VkIChhcmdzKSB7XG4gICAgdGhpcy5ncm91cChhcmdzLCB0cnVlKVxuICB9XG5cbiAgZ3JvdXBFbmQgKCkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRlcHRoID4gMCkge1xuICAgICAgICB0aGlzLmRlcHRoLS1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmNjb250YWluZXIgPSB0aGlzLmNjb250YWluZXIucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAgICovXG4gIHByaW50IChhcmdzKSB7XG4gICAgZXZlbnRsb29wLmVucXVldWUoKCkgPT4ge1xuICAgICAgZG9tLmFwcGVuZCh0aGlzLmNjb250YWluZXIsIFtcbiAgICAgICAgZG9tLmVsZW1lbnQoJ2RpdicsIFtcbiAgICAgICAgICBwYWlyLmNyZWF0ZShcbiAgICAgICAgICAgICdzdHlsZScsXG4gICAgICAgICAgICBgJHtsaW5lU3R5bGV9O3BhZGRpbmctbGVmdDoke3RoaXMuZGVwdGggKiAxMH1weGBcbiAgICAgICAgICApXG4gICAgICAgIF0sIF9jb21wdXRlTGluZVNwYW5zKGFyZ3MpKVxuICAgICAgXSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICAgKi9cbiAgcHJpbnRFcnJvciAoZXJyKSB7XG4gICAgdGhpcy5wcmludChbY29tbW9uLlJFRCwgY29tbW9uLkJPTEQsIGVyci50b1N0cmluZygpXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICovXG4gIHByaW50SW1nICh1cmwsIGhlaWdodCkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbXG4gICAgICAgIGRvbS5lbGVtZW50KCdpbWcnLCBbXG4gICAgICAgICAgcGFpci5jcmVhdGUoJ3NyYycsIHVybCksXG4gICAgICAgICAgcGFpci5jcmVhdGUoJ2hlaWdodCcsIGAke21hdGgucm91bmQoaGVpZ2h0ICogMS41KX1weGApXG4gICAgICAgIF0pXG4gICAgICBdKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqL1xuICBwcmludERvbSAobm9kZSkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbbm9kZV0pXG4gICAgfSlcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIHZjb25zb2xlcy5kZWxldGUodGhpcylcbiAgICB9KVxuICB9XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZG9tXG4gKi9cbi8qIGM4IGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlVkNvbnNvbGUgPSAoZG9tKSA9PiBuZXcgVkNvbnNvbGUoZG9tKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi5hbnkpOnZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2R1bGVMb2dnZXIgPSAobW9kdWxlTmFtZSkgPT4gY29tbW9uLmNyZWF0ZU1vZHVsZUxvZ2dlcihwcmludCwgbW9kdWxlTmFtZSlcbiIsICIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIGNyZWF0ZSBhbmQgbWFuaXB1bGF0ZSBJdGVyYXRvcnMuXG4gKlxuICogQG1vZHVsZSBpdGVyYXRvclxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFQsUlxuICogQHBhcmFtIHtJdGVyYXRvcjxUPn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6Un0gZlxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcEl0ZXJhdG9yID0gKGl0ZXJhdG9yLCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgLy8gQHRzLWlnbm9yZVxuICBuZXh0ICgpIHtcbiAgICBjb25zdCByID0gaXRlcmF0b3IubmV4dCgpXG4gICAgcmV0dXJuIHsgdmFsdWU6IHIuZG9uZSA/IHVuZGVmaW5lZCA6IGYoci52YWx1ZSksIGRvbmU6IHIuZG9uZSB9XG4gIH1cbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpJdGVyYXRvclJlc3VsdDxUPn0gbmV4dFxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUl0ZXJhdG9yID0gbmV4dCA9PiAoe1xuICAvKipcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuICAvLyBAdHMtaWdub3JlXG4gIG5leHRcbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7SXRlcmF0b3I8VD59IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQpOmJvb2xlYW59IGZpbHRlclxuICovXG5leHBvcnQgY29uc3QgaXRlcmF0b3JGaWx0ZXIgPSAoaXRlcmF0b3IsIGZpbHRlcikgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBsZXQgcmVzXG4gIGRvIHtcbiAgICByZXMgPSBpdGVyYXRvci5uZXh0KClcbiAgfSB3aGlsZSAoIXJlcy5kb25lICYmICFmaWx0ZXIocmVzLnZhbHVlKSlcbiAgcmV0dXJuIHJlc1xufSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVCxNXG4gKiBAcGFyYW0ge0l0ZXJhdG9yPFQ+fSBpdGVyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpNfSBmbWFwXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVyYXRvck1hcCA9IChpdGVyYXRvciwgZm1hcCkgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBpdGVyYXRvci5uZXh0KClcbiAgcmV0dXJuIHsgZG9uZSwgdmFsdWU6IGRvbmUgPyB1bmRlZmluZWQgOiBmbWFwKHZhbHVlKSB9XG59KVxuIiwgImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdsaWIwL29ic2VydmFibGUnXG5cbmltcG9ydCB7XG4gIERvYyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGFic3RyYWN0IGludGVyZmFjZSB0aGF0IGFsbCBDb25uZWN0b3JzIHNob3VsZCBpbXBsZW1lbnQgdG8ga2VlcCB0aGVtIGludGVyY2hhbmdlYWJsZS5cbiAqXG4gKiBAbm90ZSBUaGlzIGludGVyZmFjZSBpcyBleHBlcmltZW50YWwgYW5kIGl0IGlzIG5vdCBhZHZpc2VkIHRvIGFjdHVhbGx5IGluaGVyaXQgdGhpcyBjbGFzcy5cbiAqICAgICAgIEl0IGp1c3Qgc2VydmVzIGFzIHR5cGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2YWJsZTxhbnk+fVxuICovXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RDb25uZWN0b3IgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gICAqIEBwYXJhbSB7YW55fSBhd2FyZW5lc3NcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5ZG9jLCBhd2FyZW5lc3MpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5kb2MgPSB5ZG9jXG4gICAgdGhpcy5hd2FyZW5lc3MgPSBhd2FyZW5lc3NcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGZpbmRJbmRleFNTLFxuICBnZXRTdGF0ZSxcbiAgc3BsaXRJdGVtLFxuICBpdGVyYXRlU3RydWN0cyxcbiAgVXBkYXRlRW5jb2RlclYyLFxuICBEU0RlY29kZXJWMSwgRFNFbmNvZGVyVjEsIERTRGVjb2RlclYyLCBEU0VuY29kZXJWMiwgSXRlbSwgR0MsIFN0cnVjdFN0b3JlLCBUcmFuc2FjdGlvbiwgSUQgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJ2xpYjAvYXJyYXknXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJ2xpYjAvbWF0aCdcbmltcG9ydCAqIGFzIG1hcCBmcm9tICdsaWIwL21hcCdcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJ2xpYjAvZW5jb2RpbmcnXG5pbXBvcnQgKiBhcyBkZWNvZGluZyBmcm9tICdsaWIwL2RlY29kaW5nJ1xuXG5leHBvcnQgY2xhc3MgRGVsZXRlSXRlbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNsb2NrLCBsZW4pIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xvY2sgPSBjbG9ja1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSBsZW5cbiAgfVxufVxuXG4vKipcbiAqIFdlIG5vIGxvbmdlciBtYWludGFpbiBhIERlbGV0ZVN0b3JlLiBEZWxldGVTZXQgaXMgYSB0ZW1wb3Jhcnkgb2JqZWN0IHRoYXQgaXMgY3JlYXRlZCB3aGVuIG5lZWRlZC5cbiAqIC0gV2hlbiBjcmVhdGVkIGluIGEgdHJhbnNhY3Rpb24sIGl0IG11c3Qgb25seSBiZSBhY2Nlc3NlZCBhZnRlciBzb3J0aW5nLCBhbmQgbWVyZ2luZ1xuICogICAtIFRoaXMgRGVsZXRlU2V0IGlzIHNlbmQgdG8gb3RoZXIgY2xpZW50c1xuICogLSBXZSBkbyBub3QgY3JlYXRlIGEgRGVsZXRlU2V0IHdoZW4gd2Ugc2VuZCBhIHN5bmMgbWVzc2FnZS4gVGhlIERlbGV0ZVNldCBtZXNzYWdlIGlzIGNyZWF0ZWQgZGlyZWN0bHkgZnJvbSBTdHJ1Y3RTdG9yZVxuICogLSBXZSByZWFkIGEgRGVsZXRlU2V0IGFzIHBhcnQgb2YgYSBzeW5jL3VwZGF0ZSBtZXNzYWdlLiBJbiB0aGlzIGNhc2UgdGhlIERlbGV0ZVNldCBpcyBhbHJlYWR5IHNvcnRlZCBhbmQgbWVyZ2VkLlxuICovXG5leHBvcnQgY2xhc3MgRGVsZXRlU2V0IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLEFycmF5PERlbGV0ZUl0ZW0+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudHMgPSBuZXcgTWFwKClcbiAgfVxufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgc3RydWN0cyB0aGF0IHRoZSBEZWxldGVTZXQgZ2Mncy5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEdDfEl0ZW0pOnZvaWR9IGZcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGl0ZXJhdGVEZWxldGVkU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgZHMsIGYpID0+XG4gIGRzLmNsaWVudHMuZm9yRWFjaCgoZGVsZXRlcywgY2xpZW50aWQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHRyYW5zYWN0aW9uLmRvYy5zdG9yZS5jbGllbnRzLmdldChjbGllbnRpZCkpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWxldGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZWwgPSBkZWxldGVzW2ldXG4gICAgICBpdGVyYXRlU3RydWN0cyh0cmFuc2FjdGlvbiwgc3RydWN0cywgZGVsLmNsb2NrLCBkZWwubGVuLCBmKVxuICAgIH1cbiAgfSlcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PERlbGV0ZUl0ZW0+fSBkaXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICogQHJldHVybiB7bnVtYmVyfG51bGx9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZmluZEluZGV4RFMgPSAoZGlzLCBjbG9jaykgPT4ge1xuICBsZXQgbGVmdCA9IDBcbiAgbGV0IHJpZ2h0ID0gZGlzLmxlbmd0aCAtIDFcbiAgd2hpbGUgKGxlZnQgPD0gcmlnaHQpIHtcbiAgICBjb25zdCBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKVxuICAgIGNvbnN0IG1pZCA9IGRpc1ttaWRpbmRleF1cbiAgICBjb25zdCBtaWRjbG9jayA9IG1pZC5jbG9ja1xuICAgIGlmIChtaWRjbG9jayA8PSBjbG9jaykge1xuICAgICAgaWYgKGNsb2NrIDwgbWlkY2xvY2sgKyBtaWQubGVuKSB7XG4gICAgICAgIHJldHVybiBtaWRpbmRleFxuICAgICAgfVxuICAgICAgbGVmdCA9IG1pZGluZGV4ICsgMVxuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IG1pZGluZGV4IC0gMVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgaXNEZWxldGVkID0gKGRzLCBpZCkgPT4ge1xuICBjb25zdCBkaXMgPSBkcy5jbGllbnRzLmdldChpZC5jbGllbnQpXG4gIHJldHVybiBkaXMgIT09IHVuZGVmaW5lZCAmJiBmaW5kSW5kZXhEUyhkaXMsIGlkLmNsb2NrKSAhPT0gbnVsbFxufVxuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNvcnRBbmRNZXJnZURlbGV0ZVNldCA9IGRzID0+IHtcbiAgZHMuY2xpZW50cy5mb3JFYWNoKGRlbHMgPT4ge1xuICAgIGRlbHMuc29ydCgoYSwgYikgPT4gYS5jbG9jayAtIGIuY2xvY2spXG4gICAgLy8gbWVyZ2UgaXRlbXMgd2l0aG91dCBmaWx0ZXJpbmcgb3Igc3BsaWNpbmcgdGhlIGFycmF5XG4gICAgLy8gaSBpcyB0aGUgY3VycmVudCBwb2ludGVyXG4gICAgLy8gaiByZWZlcnMgdG8gdGhlIGN1cnJlbnQgaW5zZXJ0IHBvc2l0aW9uIGZvciB0aGUgcG9pbnRlZCBpdGVtXG4gICAgLy8gdHJ5IHRvIG1lcmdlIGRlbHNbaV0gaW50byBkZWxzW2otMV0gb3Igc2V0IGRlbHNbal09ZGVsc1tpXVxuICAgIGxldCBpLCBqXG4gICAgZm9yIChpID0gMSwgaiA9IDE7IGkgPCBkZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsZWZ0ID0gZGVsc1tqIC0gMV1cbiAgICAgIGNvbnN0IHJpZ2h0ID0gZGVsc1tpXVxuICAgICAgaWYgKGxlZnQuY2xvY2sgKyBsZWZ0LmxlbiA+PSByaWdodC5jbG9jaykge1xuICAgICAgICBsZWZ0LmxlbiA9IG1hdGgubWF4KGxlZnQubGVuLCByaWdodC5jbG9jayArIHJpZ2h0LmxlbiAtIGxlZnQuY2xvY2spXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaiA8IGkpIHtcbiAgICAgICAgICBkZWxzW2pdID0gcmlnaHRcbiAgICAgICAgfVxuICAgICAgICBqKytcbiAgICAgIH1cbiAgICB9XG4gICAgZGVscy5sZW5ndGggPSBqXG4gIH0pXG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxEZWxldGVTZXQ+fSBkc3NcbiAqIEByZXR1cm4ge0RlbGV0ZVNldH0gQSBmcmVzaCBEZWxldGVTZXRcbiAqL1xuZXhwb3J0IGNvbnN0IG1lcmdlRGVsZXRlU2V0cyA9IGRzcyA9PiB7XG4gIGNvbnN0IG1lcmdlZCA9IG5ldyBEZWxldGVTZXQoKVxuICBmb3IgKGxldCBkc3NJID0gMDsgZHNzSSA8IGRzcy5sZW5ndGg7IGRzc0krKykge1xuICAgIGRzc1tkc3NJXS5jbGllbnRzLmZvckVhY2goKGRlbHNMZWZ0LCBjbGllbnQpID0+IHtcbiAgICAgIGlmICghbWVyZ2VkLmNsaWVudHMuaGFzKGNsaWVudCkpIHtcbiAgICAgICAgLy8gV3JpdGUgYWxsIG1pc3Npbmcga2V5cyBmcm9tIGN1cnJlbnQgZHMgYW5kIGFsbCBmb2xsb3dpbmcuXG4gICAgICAgIC8vIElmIG1lcmdlZCBhbHJlYWR5IGNvbnRhaW5zIGBjbGllbnRgIGN1cnJlbnQgZHMgaGFzIGFscmVhZHkgYmVlbiBhZGRlZC5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtBcnJheTxEZWxldGVJdGVtPn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGRlbHMgPSBkZWxzTGVmdC5zbGljZSgpXG4gICAgICAgIGZvciAobGV0IGkgPSBkc3NJICsgMTsgaSA8IGRzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFycmF5LmFwcGVuZFRvKGRlbHMsIGRzc1tpXS5jbGllbnRzLmdldChjbGllbnQpIHx8IFtdKVxuICAgICAgICB9XG4gICAgICAgIG1lcmdlZC5jbGllbnRzLnNldChjbGllbnQsIGRlbHMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBzb3J0QW5kTWVyZ2VEZWxldGVTZXQobWVyZ2VkKVxuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRUb0RlbGV0ZVNldCA9IChkcywgY2xpZW50LCBjbG9jaywgbGVuZ3RoKSA9PiB7XG4gIG1hcC5zZXRJZlVuZGVmaW5lZChkcy5jbGllbnRzLCBjbGllbnQsICgpID0+IC8qKiBAdHlwZSB7QXJyYXk8RGVsZXRlSXRlbT59ICovIChbXSkpLnB1c2gobmV3IERlbGV0ZUl0ZW0oY2xvY2ssIGxlbmd0aCkpXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEZWxldGVTZXQgPSAoKSA9PiBuZXcgRGVsZXRlU2V0KClcblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzc1xuICogQHJldHVybiB7RGVsZXRlU2V0fSBNZXJnZWQgYW5kIHNvcnRlZCBEZWxldGVTZXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUgPSBzcyA9PiB7XG4gIGNvbnN0IGRzID0gY3JlYXRlRGVsZXRlU2V0KClcbiAgc3MuY2xpZW50cy5mb3JFYWNoKChzdHJ1Y3RzLCBjbGllbnQpID0+IHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8RGVsZXRlSXRlbT59XG4gICAgICovXG4gICAgY29uc3QgZHNpdGVtcyA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW2ldXG4gICAgICBpZiAoc3RydWN0LmRlbGV0ZWQpIHtcbiAgICAgICAgY29uc3QgY2xvY2sgPSBzdHJ1Y3QuaWQuY2xvY2tcbiAgICAgICAgbGV0IGxlbiA9IHN0cnVjdC5sZW5ndGhcbiAgICAgICAgaWYgKGkgKyAxIDwgc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGxldCBuZXh0ID0gc3RydWN0c1tpICsgMV07IGkgKyAxIDwgc3RydWN0cy5sZW5ndGggJiYgbmV4dC5kZWxldGVkOyBuZXh0ID0gc3RydWN0c1srK2kgKyAxXSkge1xuICAgICAgICAgICAgbGVuICs9IG5leHQubGVuZ3RoXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRzaXRlbXMucHVzaChuZXcgRGVsZXRlSXRlbShjbG9jaywgbGVuKSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRzaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgZHMuY2xpZW50cy5zZXQoY2xpZW50LCBkc2l0ZW1zKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZURlbGV0ZVNldCA9IChlbmNvZGVyLCBkcykgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgZHMuY2xpZW50cy5zaXplKVxuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBkZWxldGUgc2V0IGlzIHdyaXR0ZW4gaW4gYSBkZXRlcm1pbmlzdGljIG9yZGVyXG4gIGFycmF5LmZyb20oZHMuY2xpZW50cy5lbnRyaWVzKCkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGJbMF0gLSBhWzBdKVxuICAgIC5mb3JFYWNoKChbY2xpZW50LCBkc2l0ZW1zXSkgPT4ge1xuICAgICAgZW5jb2Rlci5yZXNldERzQ3VyVmFsKClcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbGllbnQpXG4gICAgICBjb25zdCBsZW4gPSBkc2l0ZW1zLmxlbmd0aFxuICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGxlbilcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRzaXRlbXNbaV1cbiAgICAgICAgZW5jb2Rlci53cml0ZURzQ2xvY2soaXRlbS5jbG9jaylcbiAgICAgICAgZW5jb2Rlci53cml0ZURzTGVuKGl0ZW0ubGVuKVxuICAgICAgfVxuICAgIH0pXG59XG5cbi8qKlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtEZWxldGVTZXR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVhZERlbGV0ZVNldCA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBkcyA9IG5ldyBEZWxldGVTZXQoKVxuICBjb25zdCBudW1DbGllbnRzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbGllbnRzOyBpKyspIHtcbiAgICBkZWNvZGVyLnJlc2V0RHNDdXJWYWwoKVxuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpXG4gICAgY29uc3QgbnVtYmVyT2ZEZWxldGVzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICBpZiAobnVtYmVyT2ZEZWxldGVzID4gMCkge1xuICAgICAgY29uc3QgZHNGaWVsZCA9IG1hcC5zZXRJZlVuZGVmaW5lZChkcy5jbGllbnRzLCBjbGllbnQsICgpID0+IC8qKiBAdHlwZSB7QXJyYXk8RGVsZXRlSXRlbT59ICovIChbXSkpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGVsZXRlczsgaSsrKSB7XG4gICAgICAgIGRzRmllbGQucHVzaChuZXcgRGVsZXRlSXRlbShkZWNvZGVyLnJlYWREc0Nsb2NrKCksIGRlY29kZXIucmVhZERzTGVuKCkpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZHNcbn1cblxuLyoqXG4gKiBAdG9kbyBZRGVjb2RlciBhbHNvIGNvbnRhaW5zIHJlZmVyZW5jZXMgdG8gU3RyaW5nIGFuZCBvdGhlciBEZWNvZGVycy4gV291bGQgbWFrZSBzZW5zZSB0byBleGNoYW5nZSBZRGVjb2Rlci50b1VpbnQ4QXJyYXkgZm9yIFlEZWNvZGVyLkRzVG9VaW50OEFycmF5KCkuLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl8bnVsbH0gUmV0dXJucyBhIHYyIHVwZGF0ZSBjb250YWluaW5nIGFsbCBkZWxldGVzIHRoYXQgY291bGRuJ3QgYmUgYXBwbGllZCB5ZXQ7IG9yIG51bGwgaWYgYWxsIGRlbGV0ZXMgd2VyZSBhcHBsaWVkIHN1Y2Nlc3NmdWxseS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQW5kQXBwbHlEZWxldGVTZXQgPSAoZGVjb2RlciwgdHJhbnNhY3Rpb24sIHN0b3JlKSA9PiB7XG4gIGNvbnN0IHVuYXBwbGllZERTID0gbmV3IERlbGV0ZVNldCgpXG4gIGNvbnN0IG51bUNsaWVudHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNsaWVudHM7IGkrKykge1xuICAgIGRlY29kZXIucmVzZXREc0N1clZhbCgpXG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICBjb25zdCBudW1iZXJPZkRlbGV0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICAgIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChjbGllbnQpIHx8IFtdXG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZShzdG9yZSwgY2xpZW50KVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZEZWxldGVzOyBpKyspIHtcbiAgICAgIGNvbnN0IGNsb2NrID0gZGVjb2Rlci5yZWFkRHNDbG9jaygpXG4gICAgICBjb25zdCBjbG9ja0VuZCA9IGNsb2NrICsgZGVjb2Rlci5yZWFkRHNMZW4oKVxuICAgICAgaWYgKGNsb2NrIDwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlIDwgY2xvY2tFbmQpIHtcbiAgICAgICAgICBhZGRUb0RlbGV0ZVNldCh1bmFwcGxpZWREUywgY2xpZW50LCBzdGF0ZSwgY2xvY2tFbmQgLSBzdGF0ZSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5kZXggPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jaylcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIGNhbiBpZ25vcmUgdGhlIGNhc2Ugb2YgR0MgYW5kIERlbGV0ZSBzdHJ1Y3RzLCBiZWNhdXNlIHdlIGFyZSBnb2luZyB0byBza2lwIHRoZW1cbiAgICAgICAgICogQHR5cGUge0l0ZW19XG4gICAgICAgICAqL1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxldCBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4XVxuICAgICAgICAvLyBzcGxpdCB0aGUgZmlyc3QgaXRlbSBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCFzdHJ1Y3QuZGVsZXRlZCAmJiBzdHJ1Y3QuaWQuY2xvY2sgPCBjbG9jaykge1xuICAgICAgICAgIHN0cnVjdHMuc3BsaWNlKGluZGV4ICsgMSwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGNsb2NrIC0gc3RydWN0LmlkLmNsb2NrKSlcbiAgICAgICAgICBpbmRleCsrIC8vIGluY3JlYXNlIHdlIG5vdyB3YW50IHRvIHVzZSB0aGUgbmV4dCBzdHJ1Y3RcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXggPCBzdHJ1Y3RzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4KytdXG4gICAgICAgICAgaWYgKHN0cnVjdC5pZC5jbG9jayA8IGNsb2NrRW5kKSB7XG4gICAgICAgICAgICBpZiAoIXN0cnVjdC5kZWxldGVkKSB7XG4gICAgICAgICAgICAgIGlmIChjbG9ja0VuZCA8IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGNsb2NrRW5kIC0gc3RydWN0LmlkLmNsb2NrKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdHJ1Y3QuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkVG9EZWxldGVTZXQodW5hcHBsaWVkRFMsIGNsaWVudCwgY2xvY2ssIGNsb2NrRW5kIC0gY2xvY2spXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh1bmFwcGxpZWREUy5jbGllbnRzLnNpemUgPiAwKSB7XG4gICAgY29uc3QgZHMgPSBuZXcgVXBkYXRlRW5jb2RlclYyKClcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZHMucmVzdEVuY29kZXIsIDApIC8vIGVuY29kZSAwIHN0cnVjdHNcbiAgICB3cml0ZURlbGV0ZVNldChkcywgdW5hcHBsaWVkRFMpXG4gICAgcmV0dXJuIGRzLnRvVWludDhBcnJheSgpXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHMxXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHMyXG4gKi9cbmV4cG9ydCBjb25zdCBlcXVhbERlbGV0ZVNldHMgPSAoZHMxLCBkczIpID0+IHtcbiAgaWYgKGRzMS5jbGllbnRzLnNpemUgIT09IGRzMi5jbGllbnRzLnNpemUpIHJldHVybiBmYWxzZVxuICBmb3IgKGNvbnN0IFtjbGllbnQsIGRlbGV0ZUl0ZW1zMV0gb2YgZHMxLmNsaWVudHMuZW50cmllcygpKSB7XG4gICAgY29uc3QgZGVsZXRlSXRlbXMyID0gLyoqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFscy5qcycpLkRlbGV0ZUl0ZW0+fSAqLyAoZHMyLmNsaWVudHMuZ2V0KGNsaWVudCkpXG4gICAgaWYgKGRlbGV0ZUl0ZW1zMiA9PT0gdW5kZWZpbmVkIHx8IGRlbGV0ZUl0ZW1zMS5sZW5ndGggIT09IGRlbGV0ZUl0ZW1zMi5sZW5ndGgpIHJldHVybiBmYWxzZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsZXRlSXRlbXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkaTEgPSBkZWxldGVJdGVtczFbaV1cbiAgICAgIGNvbnN0IGRpMiA9IGRlbGV0ZUl0ZW1zMltpXVxuICAgICAgaWYgKGRpMS5jbG9jayAhPT0gZGkyLmNsb2NrIHx8IGRpMS5sZW4gIT09IGRpMi5sZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG4iLCAiLyoqXG4gKiBAbW9kdWxlIFlcbiAqL1xuXG5pbXBvcnQge1xuICBTdHJ1Y3RTdG9yZSxcbiAgQWJzdHJhY3RUeXBlLFxuICBZQXJyYXksXG4gIFlUZXh0LFxuICBZTWFwLFxuICBZWG1sRnJhZ21lbnQsXG4gIHRyYW5zYWN0LFxuICBDb250ZW50RG9jLCBJdGVtLCBUcmFuc2FjdGlvbiwgWUV2ZW50IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnbGliMC9vYnNlcnZhYmxlJ1xuaW1wb3J0ICogYXMgcmFuZG9tIGZyb20gJ2xpYjAvcmFuZG9tJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJ2xpYjAvbWFwJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSdcbmltcG9ydCAqIGFzIHByb21pc2UgZnJvbSAnbGliMC9wcm9taXNlJ1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVOZXdDbGllbnRJZCA9IHJhbmRvbS51aW50MzJcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEb2NPcHRzXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtEb2NPcHRzLmdjPXRydWVdIERpc2FibGUgZ2FyYmFnZSBjb2xsZWN0aW9uIChkZWZhdWx0OiBnYz10cnVlKVxuICogQHByb3BlcnR5IHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBbRG9jT3B0cy5nY0ZpbHRlcl0gV2lsbCBiZSBjYWxsZWQgYmVmb3JlIGFuIEl0ZW0gaXMgZ2FyYmFnZSBjb2xsZWN0ZWQuIFJldHVybiBmYWxzZSB0byBrZWVwIHRoZSBJdGVtLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtEb2NPcHRzLmd1aWRdIERlZmluZSBhIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGRvY3VtZW50XG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGx9IFtEb2NPcHRzLmNvbGxlY3Rpb25pZF0gQXNzb2NpYXRlIHRoaXMgZG9jdW1lbnQgd2l0aCBhIGNvbGxlY3Rpb24uIFRoaXMgb25seSBwbGF5cyBhIHJvbGUgaWYgeW91ciBwcm92aWRlciBoYXMgYSBjb25jZXB0IG9mIGNvbGxlY3Rpb24uXG4gKiBAcHJvcGVydHkge2FueX0gW0RvY09wdHMubWV0YV0gQW55IGtpbmQgb2YgbWV0YSBpbmZvcm1hdGlvbiB5b3Ugd2FudCB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIGRvY3VtZW50LiBJZiB0aGlzIGlzIGEgc3ViZG9jdW1lbnQsIHJlbW90ZSBwZWVycyB3aWxsIHN0b3JlIHRoZSBtZXRhIGluZm9ybWF0aW9uIGFzIHdlbGwuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtEb2NPcHRzLmF1dG9Mb2FkXSBJZiBhIHN1YmRvY3VtZW50LCBhdXRvbWF0aWNhbGx5IGxvYWQgZG9jdW1lbnQuIElmIHRoaXMgaXMgYSBzdWJkb2N1bWVudCwgcmVtb3RlIHBlZXJzIHdpbGwgbG9hZCB0aGUgZG9jdW1lbnQgYXMgd2VsbCBhdXRvbWF0aWNhbGx5LlxuICogQHByb3BlcnR5IHtib29sZWFufSBbRG9jT3B0cy5zaG91bGRMb2FkXSBXaGV0aGVyIHRoZSBkb2N1bWVudCBzaG91bGQgYmUgc3luY2VkIGJ5IHRoZSBwcm92aWRlciBub3cuIFRoaXMgaXMgdG9nZ2xlZCB0byB0cnVlIHdoZW4geW91IGNhbGwgeWRvYy5sb2FkKClcbiAqL1xuXG4vKipcbiAqIEEgWWpzIGluc3RhbmNlIGhhbmRsZXMgdGhlIHN0YXRlIG9mIHNoYXJlZCBkYXRhLlxuICogQGV4dGVuZHMgT2JzZXJ2YWJsZTxzdHJpbmc+XG4gKi9cbmV4cG9ydCBjbGFzcyBEb2MgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jT3B0c30gb3B0cyBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeyBndWlkID0gcmFuZG9tLnV1aWR2NCgpLCBjb2xsZWN0aW9uaWQgPSBudWxsLCBnYyA9IHRydWUsIGdjRmlsdGVyID0gKCkgPT4gdHJ1ZSwgbWV0YSA9IG51bGwsIGF1dG9Mb2FkID0gZmFsc2UsIHNob3VsZExvYWQgPSB0cnVlIH0gPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmdjID0gZ2NcbiAgICB0aGlzLmdjRmlsdGVyID0gZ2NGaWx0ZXJcbiAgICB0aGlzLmNsaWVudElEID0gZ2VuZXJhdGVOZXdDbGllbnRJZCgpXG4gICAgdGhpcy5ndWlkID0gZ3VpZFxuICAgIHRoaXMuY29sbGVjdGlvbmlkID0gY29sbGVjdGlvbmlkXG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIEFic3RyYWN0VHlwZTxZRXZlbnQ8YW55Pj4+fVxuICAgICAqL1xuICAgIHRoaXMuc2hhcmUgPSBuZXcgTWFwKClcbiAgICB0aGlzLnN0b3JlID0gbmV3IFN0cnVjdFN0b3JlKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7VHJhbnNhY3Rpb24gfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxUcmFuc2FjdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5fdHJhbnNhY3Rpb25DbGVhbnVwcyA9IFtdXG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jcyA9IG5ldyBTZXQoKVxuICAgIC8qKlxuICAgICAqIElmIHRoaXMgZG9jdW1lbnQgaXMgYSBzdWJkb2N1bWVudCAtIGEgZG9jdW1lbnQgaW50ZWdyYXRlZCBpbnRvIGFub3RoZXIgZG9jdW1lbnQgLSB0aGVuIF9pdGVtIGlzIGRlZmluZWQuXG4gICAgICogQHR5cGUge0l0ZW0/fVxuICAgICAqL1xuICAgIHRoaXMuX2l0ZW0gPSBudWxsXG4gICAgdGhpcy5zaG91bGRMb2FkID0gc2hvdWxkTG9hZFxuICAgIHRoaXMuYXV0b0xvYWQgPSBhdXRvTG9hZFxuICAgIHRoaXMubWV0YSA9IG1ldGFcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHNldCB0byB0cnVlIHdoZW4gdGhlIHBlcnNpc3RlbmNlIHByb3ZpZGVyIGxvYWRlZCB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgZGF0YWJhc2Ugb3Igd2hlbiB0aGUgYHN5bmNgIGV2ZW50IGZpcmVzLlxuICAgICAqIE5vdGUgdGhhdCBub3QgYWxsIHByb3ZpZGVycyBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlLiBQcm92aWRlciBhdXRob3JzIGFyZSBlbmNvdXJhZ2VkIHRvIGZpcmUgdGhlIGBsb2FkYCBldmVudCB3aGVuIHRoZSBkb2MgY29udGVudCBpcyBsb2FkZWQgZnJvbSB0aGUgZGF0YWJhc2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzTG9hZGVkID0gZmFsc2VcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHNldCB0byB0cnVlIHdoZW4gdGhlIGNvbm5lY3Rpb24gcHJvdmlkZXIgaGFzIHN1Y2Nlc3NmdWxseSBzeW5jZWQgd2l0aCBhIGJhY2tlbmQuXG4gICAgICogTm90ZSB0aGF0IHdoZW4gdXNpbmcgcGVlci10by1wZWVyIHByb3ZpZGVycyB0aGlzIGV2ZW50IG1heSBub3QgcHJvdmlkZSB2ZXJ5IHVzZWZ1bC5cbiAgICAgKiBBbHNvIG5vdGUgdGhhdCBub3QgYWxsIHByb3ZpZGVycyBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlLiBQcm92aWRlciBhdXRob3JzIGFyZSBlbmNvdXJhZ2VkIHRvIGZpcmVcbiAgICAgKiB0aGUgYHN5bmNgIGV2ZW50IHdoZW4gdGhlIGRvYyBoYXMgYmVlbiBzeW5jZWQgKHdpdGggYHRydWVgIGFzIGEgcGFyYW1ldGVyKSBvciBpZiBjb25uZWN0aW9uIGlzXG4gICAgICogbG9zdCAod2l0aCBmYWxzZSBhcyBhIHBhcmFtZXRlcikuXG4gICAgICovXG4gICAgdGhpcy5pc1N5bmNlZCA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIGRvY3VtZW50IGhhcyBiZWVuIGxvYWRlZCBmcm9tIGEgcHJlc2lzdGVuY2UgcHJvdmlkZXIuXG4gICAgICovXG4gICAgdGhpcy53aGVuTG9hZGVkID0gcHJvbWlzZS5jcmVhdGUocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLm9uKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZVxuICAgICAgICByZXNvbHZlKHRoaXMpXG4gICAgICB9KVxuICAgIH0pXG4gICAgY29uc3QgcHJvdmlkZVN5bmNlZFByb21pc2UgPSAoKSA9PiBwcm9taXNlLmNyZWF0ZShyZXNvbHZlID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc1N5bmNlZFxuICAgICAgICovXG4gICAgICBjb25zdCBldmVudEhhbmRsZXIgPSAoaXNTeW5jZWQpID0+IHtcbiAgICAgICAgaWYgKGlzU3luY2VkID09PSB1bmRlZmluZWQgfHwgaXNTeW5jZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLm9mZignc3luYycsIGV2ZW50SGFuZGxlcilcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5vbignc3luYycsIGV2ZW50SGFuZGxlcilcbiAgICB9KVxuICAgIHRoaXMub24oJ3N5bmMnLCBpc1N5bmNlZCA9PiB7XG4gICAgICBpZiAoaXNTeW5jZWQgPT09IGZhbHNlICYmIHRoaXMuaXNTeW5jZWQpIHtcbiAgICAgICAgdGhpcy53aGVuU3luY2VkID0gcHJvdmlkZVN5bmNlZFByb21pc2UoKVxuICAgICAgfVxuICAgICAgdGhpcy5pc1N5bmNlZCA9IGlzU3luY2VkID09PSB1bmRlZmluZWQgfHwgaXNTeW5jZWQgPT09IHRydWVcbiAgICAgIGlmICh0aGlzLmlzU3luY2VkICYmICF0aGlzLmlzTG9hZGVkKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnbG9hZCcsIFtdKVxuICAgICAgfVxuICAgIH0pXG4gICAgLyoqXG4gICAgICogUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIGRvY3VtZW50IGhhcyBiZWVuIHN5bmNlZCB3aXRoIGEgYmFja2VuZC5cbiAgICAgKiBUaGlzIHByb21pc2UgaXMgcmVjcmVhdGVkIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgbG9zdC5cbiAgICAgKiBOb3RlIHRoZSBkb2N1bWVudGF0aW9uIGFib3V0IHRoZSBgaXNTeW5jZWRgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHRoaXMud2hlblN5bmNlZCA9IHByb3ZpZGVTeW5jZWRQcm9taXNlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3RpZnkgdGhlIHBhcmVudCBkb2N1bWVudCB0aGF0IHlvdSByZXF1ZXN0IHRvIGxvYWQgZGF0YSBpbnRvIHRoaXMgc3ViZG9jdW1lbnQgKGlmIGl0IGlzIGEgc3ViZG9jdW1lbnQpLlxuICAgKlxuICAgKiBgbG9hZCgpYCBtaWdodCBiZSB1c2VkIGluIHRoZSBmdXR1cmUgdG8gcmVxdWVzdCBhbnkgcHJvdmlkZXIgdG8gbG9hZCB0aGUgbW9zdCBjdXJyZW50IGRhdGEuXG4gICAqXG4gICAqIEl0IGlzIHNhZmUgdG8gY2FsbCBgbG9hZCgpYCBtdWx0aXBsZSB0aW1lcy5cbiAgICovXG4gIGxvYWQgKCkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtXG4gICAgaWYgKGl0ZW0gIT09IG51bGwgJiYgIXRoaXMuc2hvdWxkTG9hZCkge1xuICAgICAgdHJhbnNhY3QoLyoqIEB0eXBlIHthbnl9ICovIChpdGVtLnBhcmVudCkuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NMb2FkZWQuYWRkKHRoaXMpXG4gICAgICB9LCBudWxsLCB0cnVlKVxuICAgIH1cbiAgICB0aGlzLnNob3VsZExvYWQgPSB0cnVlXG4gIH1cblxuICBnZXRTdWJkb2NzICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJkb2NzXG4gIH1cblxuICBnZXRTdWJkb2NHdWlkcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQoYXJyYXkuZnJvbSh0aGlzLnN1YmRvY3MpLm1hcChkb2MgPT4gZG9jLmd1aWQpKVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhhdCBoYXBwZW4gaW5zaWRlIG9mIGEgdHJhbnNhY3Rpb24gYXJlIGJ1bmRsZWQuIFRoaXMgbWVhbnMgdGhhdFxuICAgKiB0aGUgb2JzZXJ2ZXIgZmlyZXMgX2FmdGVyXyB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQgYW5kIHRoYXQgYWxsIGNoYW5nZXNcbiAgICogdGhhdCBoYXBwZW5lZCBpbnNpZGUgb2YgdGhlIHRyYW5zYWN0aW9uIGFyZSBzZW50IGFzIG9uZSBtZXNzYWdlIHRvIHRoZVxuICAgKiBvdGhlciBwZWVycy5cbiAgICpcbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHBhcmFtIHtmdW5jdGlvbihUcmFuc2FjdGlvbik6VH0gZiBUaGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgZXhlY3V0ZWQgYXMgYSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge2FueX0gW29yaWdpbl0gT3JpZ2luIG9mIHdobyBzdGFydGVkIHRoZSB0cmFuc2FjdGlvbi4gV2lsbCBiZSBzdG9yZWQgb24gdHJhbnNhY3Rpb24ub3JpZ2luXG4gICAqIEByZXR1cm4gVFxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0cmFuc2FjdCAoZiwgb3JpZ2luID0gbnVsbCkge1xuICAgIHJldHVybiB0cmFuc2FjdCh0aGlzLCBmLCBvcmlnaW4pXG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIGEgc2hhcmVkIGRhdGEgdHlwZS5cbiAgICpcbiAgICogTXVsdGlwbGUgY2FsbHMgb2YgYHkuZ2V0KG5hbWUsIFR5cGVDb25zdHJ1Y3RvcilgIHlpZWxkIHRoZSBzYW1lIHJlc3VsdFxuICAgKiBhbmQgZG8gbm90IG92ZXJ3cml0ZSBlYWNoIG90aGVyLiBJLmUuXG4gICAqIGB5LmRlZmluZShuYW1lLCBZLkFycmF5KSA9PT0geS5kZWZpbmUobmFtZSwgWS5BcnJheSlgXG4gICAqXG4gICAqIEFmdGVyIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCwgdGhlIHR5cGUgaXMgYWxzbyBhdmFpbGFibGUgb24gYHkuc2hhcmUuZ2V0KG5hbWUpYC5cbiAgICpcbiAgICogKkJlc3QgUHJhY3RpY2VzOipcbiAgICogRGVmaW5lIGFsbCB0eXBlcyByaWdodCBhZnRlciB0aGUgWWpzIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIHN0b3JlIHRoZW0gaW4gYSBzZXBhcmF0ZSBvYmplY3QuXG4gICAqIEFsc28gdXNlIHRoZSB0eXBlZCBtZXRob2RzIGBnZXRUZXh0KG5hbWUpYCwgYGdldEFycmF5KG5hbWUpYCwgLi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBjb25zdCB5ID0gbmV3IFkoLi4pXG4gICAqICAgY29uc3QgYXBwU3RhdGUgPSB7XG4gICAqICAgICBkb2N1bWVudDogeS5nZXRUZXh0KCdkb2N1bWVudCcpXG4gICAqICAgICBjb21tZW50czogeS5nZXRBcnJheSgnY29tbWVudHMnKVxuICAgKiAgIH1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gVHlwZUNvbnN0cnVjdG9yIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgdHlwZSBkZWZpbml0aW9uLiBFLmcuIFkuVGV4dCwgWS5BcnJheSwgWS5NYXAsIC4uLlxuICAgKiBAcmV0dXJuIHtBYnN0cmFjdFR5cGU8YW55Pn0gVGhlIGNyZWF0ZWQgdHlwZS4gQ29uc3RydWN0ZWQgd2l0aCBUeXBlQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0IChuYW1lLCBUeXBlQ29uc3RydWN0b3IgPSBBYnN0cmFjdFR5cGUpIHtcbiAgICBjb25zdCB0eXBlID0gbWFwLnNldElmVW5kZWZpbmVkKHRoaXMuc2hhcmUsIG5hbWUsICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IHQgPSBuZXcgVHlwZUNvbnN0cnVjdG9yKClcbiAgICAgIHQuX2ludGVncmF0ZSh0aGlzLCBudWxsKVxuICAgICAgcmV0dXJuIHRcbiAgICB9KVxuICAgIGNvbnN0IENvbnN0ciA9IHR5cGUuY29uc3RydWN0b3JcbiAgICBpZiAoVHlwZUNvbnN0cnVjdG9yICE9PSBBYnN0cmFjdFR5cGUgJiYgQ29uc3RyICE9PSBUeXBlQ29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChDb25zdHIgPT09IEFic3RyYWN0VHlwZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHQgPSBuZXcgVHlwZUNvbnN0cnVjdG9yKClcbiAgICAgICAgdC5fbWFwID0gdHlwZS5fbWFwXG4gICAgICAgIHR5cGUuX21hcC5mb3JFYWNoKC8qKiBAcGFyYW0ge0l0ZW0/fSBuICovIG4gPT4ge1xuICAgICAgICAgIGZvciAoOyBuICE9PSBudWxsOyBuID0gbi5sZWZ0KSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBuLnBhcmVudCA9IHRcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHQuX3N0YXJ0ID0gdHlwZS5fc3RhcnRcbiAgICAgICAgZm9yIChsZXQgbiA9IHQuX3N0YXJ0OyBuICE9PSBudWxsOyBuID0gbi5yaWdodCkge1xuICAgICAgICAgIG4ucGFyZW50ID0gdFxuICAgICAgICB9XG4gICAgICAgIHQuX2xlbmd0aCA9IHR5cGUuX2xlbmd0aFxuICAgICAgICB0aGlzLnNoYXJlLnNldChuYW1lLCB0KVxuICAgICAgICB0Ll9pbnRlZ3JhdGUodGhpcywgbnVsbClcbiAgICAgICAgcmV0dXJuIHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSB3aXRoIHRoZSBuYW1lICR7bmFtZX0gaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIHdpdGggYSBkaWZmZXJlbnQgY29uc3RydWN0b3JgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZVxuICB9XG5cbiAgLyoqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WUFycmF5PFQ+fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBcnJheSAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZQXJyYXkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICAgKiBAcmV0dXJuIHtZVGV4dH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0VGV4dCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZVGV4dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gICAqIEByZXR1cm4ge1lNYXA8VD59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldE1hcCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZTWFwKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WVhtbEZyYWdtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRYbWxGcmFnbWVudCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZWG1sRnJhZ21lbnQpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGVudGlyZSBkb2N1bWVudCBpbnRvIGEganMgb2JqZWN0LCByZWN1cnNpdmVseSB0cmF2ZXJzaW5nIGVhY2ggeWpzIHR5cGVcbiAgICogRG9lc24ndCBsb2cgdHlwZXMgdGhhdCBoYXZlIG5vdCBiZWVuIGRlZmluZWQgKHVzaW5nIHlkb2MuZ2V0VHlwZSguLikpLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBEbyBub3QgdXNlIHRoaXMgbWV0aG9kIGFuZCByYXRoZXIgY2FsbCB0b0pTT04gZGlyZWN0bHkgb24gdGhlIHNoYXJlZCB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZywgYW55Pn1cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsIGFueT59XG4gICAgICovXG4gICAgY29uc3QgZG9jID0ge31cblxuICAgIHRoaXMuc2hhcmUuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgZG9jW2tleV0gPSB2YWx1ZS50b0pTT04oKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZG9jXG4gIH1cblxuICAvKipcbiAgICogRW1pdCBgZGVzdHJveWAgZXZlbnQgYW5kIHVucmVnaXN0ZXIgYWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgKi9cbiAgZGVzdHJveSAoKSB7XG4gICAgYXJyYXkuZnJvbSh0aGlzLnN1YmRvY3MpLmZvckVhY2goc3ViZG9jID0+IHN1YmRvYy5kZXN0cm95KCkpXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX2l0ZW1cbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5faXRlbSA9IG51bGxcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSAvKiogQHR5cGUge0NvbnRlbnREb2N9ICovIChpdGVtLmNvbnRlbnQpXG4gICAgICBjb250ZW50LmRvYyA9IG5ldyBEb2MoeyBndWlkOiB0aGlzLmd1aWQsIC4uLmNvbnRlbnQub3B0cywgc2hvdWxkTG9hZDogZmFsc2UgfSlcbiAgICAgIGNvbnRlbnQuZG9jLl9pdGVtID0gaXRlbVxuICAgICAgdHJhbnNhY3QoLyoqIEB0eXBlIHthbnl9ICovIChpdGVtKS5wYXJlbnQuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGNvbnRlbnQuZG9jXG4gICAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmFkZChkb2MpXG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc1JlbW92ZWQuYWRkKHRoaXMpXG4gICAgICB9LCBudWxsLCB0cnVlKVxuICAgIH1cbiAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3llZCcsIFt0cnVlXSlcbiAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3knLCBbdGhpc10pXG4gICAgc3VwZXIuZGVzdHJveSgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLmFueSk6YW55fSBmXG4gICAqL1xuICBvbiAoZXZlbnROYW1lLCBmKSB7XG4gICAgc3VwZXIub24oZXZlbnROYW1lLCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZlxuICAgKi9cbiAgb2ZmIChldmVudE5hbWUsIGYpIHtcbiAgICBzdXBlci5vZmYoZXZlbnROYW1lLCBmKVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgYnVmZmVyIGZyb20gJ2xpYjAvYnVmZmVyJ1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcbmltcG9ydCB7XG4gIElELCBjcmVhdGVJRFxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmV4cG9ydCBjbGFzcyBEU0RlY29kZXJWMSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyKSB7XG4gICAgdGhpcy5yZXN0RGVjb2RlciA9IGRlY29kZXJcbiAgfVxuXG4gIHJlc2V0RHNDdXJWYWwgKCkge1xuICAgIC8vIG5vcFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWREc0Nsb2NrICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNMZW4gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVEZWNvZGVyVjEgZXh0ZW5kcyBEU0RlY29kZXJWMSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJRH1cbiAgICovXG4gIHJlYWRMZWZ0SUQgKCkge1xuICAgIHJldHVybiBjcmVhdGVJRChkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSwgZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkUmlnaHRJRCAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUlEKGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpLCBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHRoZSBuZXh0IGNsaWVudCBpZC5cbiAgICogVXNlIHRoaXMgaW4gZmF2b3Igb2YgcmVhZElEIHdoZW5ldmVyIHBvc3NpYmxlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIG9iamVjdHMgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRDbGllbnQgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkSW5mbyAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRVaW50OCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRTdHJpbmcgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gaXNLZXlcbiAgICovXG4gIHJlYWRQYXJlbnRJbmZvICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikgPT09IDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgcmVhZFR5cGVSZWYgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gbGVuXG4gICAqL1xuICByZWFkTGVuICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkQW55ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAqL1xuICByZWFkQnVmICgpIHtcbiAgICByZXR1cm4gYnVmZmVyLmNvcHlVaW50OEFycmF5KGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIExlZ2FjeSBpbXBsZW1lbnRhdGlvbiB1c2VzIEpTT04gcGFyc2UuIFdlIHVzZSBhbnktZGVjb2RpbmcgaW4gdjIuXG4gICAqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRKU09OICgpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRLZXkgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKHRoaXMucmVzdERlY29kZXIpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERTRGVjb2RlclYyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlY29kZXIpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZHNDdXJyVmFsID0gMFxuICAgIHRoaXMucmVzdERlY29kZXIgPSBkZWNvZGVyXG4gIH1cblxuICByZXNldERzQ3VyVmFsICgpIHtcbiAgICB0aGlzLmRzQ3VyclZhbCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNDbG9jayAoKSB7XG4gICAgdGhpcy5kc0N1cnJWYWwgKz0gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgICByZXR1cm4gdGhpcy5kc0N1cnJWYWxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNMZW4gKCkge1xuICAgIGNvbnN0IGRpZmYgPSBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSArIDFcbiAgICB0aGlzLmRzQ3VyclZhbCArPSBkaWZmXG4gICAgcmV0dXJuIGRpZmZcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlRGVjb2RlclYyIGV4dGVuZHMgRFNEZWNvZGVyVjIge1xuICAvKipcbiAgICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVjb2Rlcikge1xuICAgIHN1cGVyKGRlY29kZXIpXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBjYWNoZWQga2V5cy4gSWYgdGhlIGtleXNbaWRdIGRvZXMgbm90IGV4aXN0LCB3ZSByZWFkIGEgbmV3IGtleVxuICAgICAqIGZyb20gc3RyaW5nRW5jb2RlciBhbmQgcHVzaCBpdCB0byBrZXlzLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5rZXlzID0gW11cbiAgICBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSAvLyByZWFkIGZlYXR1cmUgZmxhZyAtIGN1cnJlbnRseSB1bnVzZWRcbiAgICB0aGlzLmtleUNsb2NrRGVjb2RlciA9IG5ldyBkZWNvZGluZy5JbnREaWZmT3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSlcbiAgICB0aGlzLmNsaWVudERlY29kZXIgPSBuZXcgZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpXG4gICAgdGhpcy5sZWZ0Q2xvY2tEZWNvZGVyID0gbmV3IGRlY29kaW5nLkludERpZmZPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKVxuICAgIHRoaXMucmlnaHRDbG9ja0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuSW50RGlmZk9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpXG4gICAgdGhpcy5pbmZvRGVjb2RlciA9IG5ldyBkZWNvZGluZy5SbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpLCBkZWNvZGluZy5yZWFkVWludDgpXG4gICAgdGhpcy5zdHJpbmdEZWNvZGVyID0gbmV3IGRlY29kaW5nLlN0cmluZ0RlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpXG4gICAgdGhpcy5wYXJlbnRJbmZvRGVjb2RlciA9IG5ldyBkZWNvZGluZy5SbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpLCBkZWNvZGluZy5yZWFkVWludDgpXG4gICAgdGhpcy50eXBlUmVmRGVjb2RlciA9IG5ldyBkZWNvZGluZy5VaW50T3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSlcbiAgICB0aGlzLmxlbkRlY29kZXIgPSBuZXcgZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkTGVmdElEICgpIHtcbiAgICByZXR1cm4gbmV3IElEKHRoaXMuY2xpZW50RGVjb2Rlci5yZWFkKCksIHRoaXMubGVmdENsb2NrRGVjb2Rlci5yZWFkKCkpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkUmlnaHRJRCAoKSB7XG4gICAgcmV0dXJuIG5ldyBJRCh0aGlzLmNsaWVudERlY29kZXIucmVhZCgpLCB0aGlzLnJpZ2h0Q2xvY2tEZWNvZGVyLnJlYWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHRoZSBuZXh0IGNsaWVudCBpZC5cbiAgICogVXNlIHRoaXMgaW4gZmF2b3Igb2YgcmVhZElEIHdoZW5ldmVyIHBvc3NpYmxlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIG9iamVjdHMgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRDbGllbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudERlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHJlYWRJbmZvICgpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLmluZm9EZWNvZGVyLnJlYWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICByZWFkU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdEZWNvZGVyLnJlYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICByZWFkUGFyZW50SW5mbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50SW5mb0RlY29kZXIucmVhZCgpID09PSAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkVHlwZVJlZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZVJlZkRlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgbGVuIG9mIGEgc3RydWN0IC0gd2VsbCBzdWl0ZWQgZm9yIE9wdCBSTEUgZW5jb2Rlci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZExlbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuRGVjb2Rlci5yZWFkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkQW55ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAqL1xuICByZWFkQnVmICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIG1haW5seSBoZXJlIGZvciBsZWdhY3kgcHVycG9zZXMuXG4gICAqXG4gICAqIEluaXRpYWwgd2UgaW5jb2RlZCBvYmplY3RzIHVzaW5nIEpTT04uIE5vdyB3ZSB1c2UgdGhlIG11Y2ggZmFzdGVyIGxpYjAvYW55LWVuY29kZXIuIFRoaXMgbWV0aG9kIG1haW5seSBleGlzdHMgZm9yIGxlZ2FjeSBwdXJwb3NlcyBmb3IgdGhlIHYxIGVuY29kZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRKU09OICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRLZXkgKCkge1xuICAgIGNvbnN0IGtleUNsb2NrID0gdGhpcy5rZXlDbG9ja0RlY29kZXIucmVhZCgpXG4gICAgaWYgKGtleUNsb2NrIDwgdGhpcy5rZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMua2V5c1trZXlDbG9ja11cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdHJpbmdEZWNvZGVyLnJlYWQoKVxuICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KVxuICAgICAgcmV0dXJuIGtleVxuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuXG5pbXBvcnQge1xuICBJRCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuZXhwb3J0IGNsYXNzIERTRW5jb2RlclYxIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucmVzdEVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyKVxuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgLy8gbm9wXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqL1xuICB3cml0ZURzQ2xvY2sgKGNsb2NrKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGNsb2NrKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlRHNMZW4gKGxlbikge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBsZW4pXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVwZGF0ZUVuY29kZXJWMSBleHRlbmRzIERTRW5jb2RlclYxIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqL1xuICB3cml0ZUxlZnRJRCAoaWQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaWQuY2xpZW50KVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbG9jaylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVSaWdodElEIChpZCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbGllbnQpXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlkLmNsb2NrKVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB3cml0ZUNsaWVudCBhbmQgd3JpdGVDbG9jayBpbnN0ZWFkIG9mIHdyaXRlSUQgaWYgcG9zc2libGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAgICovXG4gIHdyaXRlQ2xpZW50IChjbGllbnQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgY2xpZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHdyaXRlSW5mbyAoaW5mbykge1xuICAgIGVuY29kaW5nLndyaXRlVWludDgodGhpcy5yZXN0RW5jb2RlciwgaW5mbylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc1xuICAgKi9cbiAgd3JpdGVTdHJpbmcgKHMpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyh0aGlzLnJlc3RFbmNvZGVyLCBzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNZS2V5XG4gICAqL1xuICB3cml0ZVBhcmVudEluZm8gKGlzWUtleSkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpc1lLZXkgPyAxIDogMClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICB3cml0ZVR5cGVSZWYgKGluZm8pIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaW5mbylcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsZW4gb2YgYSBzdHJ1Y3QgLSB3ZWxsIHN1aXRlZCBmb3IgT3B0IFJMRSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICB3cml0ZUxlbiAobGVuKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGxlbilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gYW55XG4gICAqL1xuICB3cml0ZUFueSAoYW55KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVBbnkodGhpcy5yZXN0RW5jb2RlciwgYW55KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gICAqL1xuICB3cml0ZUJ1ZiAoYnVmKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIsIGJ1ZilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZW1iZWRcbiAgICovXG4gIHdyaXRlSlNPTiAoZW1iZWQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyh0aGlzLnJlc3RFbmNvZGVyLCBKU09OLnN0cmluZ2lmeShlbWJlZCkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgd3JpdGVLZXkgKGtleSkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKHRoaXMucmVzdEVuY29kZXIsIGtleSlcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRFNFbmNvZGVyVjIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5yZXN0RW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKSAvLyBlbmNvZGVzIGFsbCB0aGUgcmVzdCAvIG5vbi1vcHRpbWl6ZWRcbiAgICB0aGlzLmRzQ3VyclZhbCA9IDBcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyKVxuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgdGhpcy5kc0N1cnJWYWwgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqL1xuICB3cml0ZURzQ2xvY2sgKGNsb2NrKSB7XG4gICAgY29uc3QgZGlmZiA9IGNsb2NrIC0gdGhpcy5kc0N1cnJWYWxcbiAgICB0aGlzLmRzQ3VyclZhbCA9IGNsb2NrXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGRpZmYpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgd3JpdGVEc0xlbiAobGVuKSB7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgbGVuIC0gMSlcbiAgICB0aGlzLmRzQ3VyclZhbCArPSBsZW5cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlRW5jb2RlclYyIGV4dGVuZHMgRFNFbmNvZGVyVjIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5rZXlNYXAgPSBuZXcgTWFwKClcbiAgICAvKipcbiAgICAgKiBSZWZlcnMgdG8gdGhlIG5leHQgdW5pcWUga2V5LWlkZW50aWZpZXIgdG8gbWUgdXNlZC5cbiAgICAgKiBTZWUgd3JpdGVLZXkgbWV0aG9kIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmtleUNsb2NrID0gMFxuICAgIHRoaXMua2V5Q2xvY2tFbmNvZGVyID0gbmV3IGVuY29kaW5nLkludERpZmZPcHRSbGVFbmNvZGVyKClcbiAgICB0aGlzLmNsaWVudEVuY29kZXIgPSBuZXcgZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIoKVxuICAgIHRoaXMubGVmdENsb2NrRW5jb2RlciA9IG5ldyBlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlcigpXG4gICAgdGhpcy5yaWdodENsb2NrRW5jb2RlciA9IG5ldyBlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlcigpXG4gICAgdGhpcy5pbmZvRW5jb2RlciA9IG5ldyBlbmNvZGluZy5SbGVFbmNvZGVyKGVuY29kaW5nLndyaXRlVWludDgpXG4gICAgdGhpcy5zdHJpbmdFbmNvZGVyID0gbmV3IGVuY29kaW5nLlN0cmluZ0VuY29kZXIoKVxuICAgIHRoaXMucGFyZW50SW5mb0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuUmxlRW5jb2RlcihlbmNvZGluZy53cml0ZVVpbnQ4KVxuICAgIHRoaXMudHlwZVJlZkVuY29kZXIgPSBuZXcgZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIoKVxuICAgIHRoaXMubGVuRW5jb2RlciA9IG5ldyBlbmNvZGluZy5VaW50T3B0UmxlRW5jb2RlcigpXG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgMCkgLy8gdGhpcyBpcyBhIGZlYXR1cmUgZmxhZyB0aGF0IHdlIG1pZ2h0IHVzZSBpbiB0aGUgZnV0dXJlXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMua2V5Q2xvY2tFbmNvZGVyLnRvVWludDhBcnJheSgpKVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmNsaWVudEVuY29kZXIudG9VaW50OEFycmF5KCkpXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMubGVmdENsb2NrRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5yaWdodENsb2NrRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMuaW5mb0VuY29kZXIpKVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLnN0cmluZ0VuY29kZXIudG9VaW50OEFycmF5KCkpXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnBhcmVudEluZm9FbmNvZGVyKSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy50eXBlUmVmRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5sZW5FbmNvZGVyLnRvVWludDhBcnJheSgpKVxuICAgIC8vIEBub3RlIFRoZSByZXN0IGVuY29kZXIgaXMgYXBwZW5kZWQhIChub3RlIHRoZSBtaXNzaW5nIHZhcilcbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4QXJyYXkoZW5jb2RlciwgZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIpKVxuICAgIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVMZWZ0SUQgKGlkKSB7XG4gICAgdGhpcy5jbGllbnRFbmNvZGVyLndyaXRlKGlkLmNsaWVudClcbiAgICB0aGlzLmxlZnRDbG9ja0VuY29kZXIud3JpdGUoaWQuY2xvY2spXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICovXG4gIHdyaXRlUmlnaHRJRCAoaWQpIHtcbiAgICB0aGlzLmNsaWVudEVuY29kZXIud3JpdGUoaWQuY2xpZW50KVxuICAgIHRoaXMucmlnaHRDbG9ja0VuY29kZXIud3JpdGUoaWQuY2xvY2spXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICAgKi9cbiAgd3JpdGVDbGllbnQgKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50RW5jb2Rlci53cml0ZShjbGllbnQpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVJbmZvIChpbmZvKSB7XG4gICAgdGhpcy5pbmZvRW5jb2Rlci53cml0ZShpbmZvKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gICAqL1xuICB3cml0ZVN0cmluZyAocykge1xuICAgIHRoaXMuc3RyaW5nRW5jb2Rlci53cml0ZShzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNZS2V5XG4gICAqL1xuICB3cml0ZVBhcmVudEluZm8gKGlzWUtleSkge1xuICAgIHRoaXMucGFyZW50SW5mb0VuY29kZXIud3JpdGUoaXNZS2V5ID8gMSA6IDApXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVUeXBlUmVmIChpbmZvKSB7XG4gICAgdGhpcy50eXBlUmVmRW5jb2Rlci53cml0ZShpbmZvKVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlTGVuIChsZW4pIHtcbiAgICB0aGlzLmxlbkVuY29kZXIud3JpdGUobGVuKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBhbnlcbiAgICovXG4gIHdyaXRlQW55IChhbnkpIHtcbiAgICBlbmNvZGluZy53cml0ZUFueSh0aGlzLnJlc3RFbmNvZGVyLCBhbnkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAgICovXG4gIHdyaXRlQnVmIChidWYpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlciwgYnVmKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgbWFpbmx5IGhlcmUgZm9yIGxlZ2FjeSBwdXJwb3Nlcy5cbiAgICpcbiAgICogSW5pdGlhbCB3ZSBpbmNvZGVkIG9iamVjdHMgdXNpbmcgSlNPTi4gTm93IHdlIHVzZSB0aGUgbXVjaCBmYXN0ZXIgbGliMC9hbnktZW5jb2Rlci4gVGhpcyBtZXRob2QgbWFpbmx5IGV4aXN0cyBmb3IgbGVnYWN5IHB1cnBvc2VzIGZvciB0aGUgdjEgZW5jb2Rlci5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IGVtYmVkXG4gICAqL1xuICB3cml0ZUpTT04gKGVtYmVkKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVBbnkodGhpcy5yZXN0RW5jb2RlciwgZW1iZWQpXG4gIH1cblxuICAvKipcbiAgICogUHJvcGVydHkga2V5cyBhcmUgb2Z0ZW4gcmV1c2VkLiBGb3IgZXhhbXBsZSwgaW4geS1wcm9zZW1pcnJvciB0aGUga2V5IGBib2xkYCBtaWdodFxuICAgKiBvY2N1ciB2ZXJ5IG9mdGVuLiBGb3IgYSAzZCBhcHBsaWNhdGlvbiwgdGhlIGtleSBgcG9zaXRpb25gIG1pZ2h0IG9jY3VyIHZlcnkgb2Z0ZW4uXG4gICAqXG4gICAqIFdlIGNhY2hlIHRoZXNlIGtleXMgaW4gYSBNYXAgYW5kIHJlZmVyIHRvIHRoZW0gdmlhIGEgdW5pcXVlIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgd3JpdGVLZXkgKGtleSkge1xuICAgIGNvbnN0IGNsb2NrID0gdGhpcy5rZXlNYXAuZ2V0KGtleSlcbiAgICBpZiAoY2xvY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdG9kbyB1bmNvbW1lbnQgdG8gaW50cm9kdWNlIHRoaXMgZmVhdHVyZSBmaW5hbGx5XG4gICAgICAgKlxuICAgICAgICogQmFja2dyb3VuZC4gVGhlIENvbnRlbnRGb3JtYXQgb2JqZWN0IHdhcyBhbHdheXMgZW5jb2RlZCB1c2luZyB3cml0ZUtleSwgYnV0IHRoZSBkZWNvZGVyIHVzZWQgdG8gdXNlIHJlYWRTdHJpbmcuXG4gICAgICAgKiBGdXJ0aGVybW9yZSwgSSBmb3Jnb3QgdG8gc2V0IHRoZSBrZXljbG9jay4gU28gZXZlcnl0aGluZyB3YXMgd29ya2luZyBmaW5lLlxuICAgICAgICpcbiAgICAgICAqIEhvd2V2ZXIsIHRoaXMgZmVhdHVyZSBoZXJlIGlzIGJhc2ljYWxseSB1c2VsZXNzIGFzIGl0IGlzIG5vdCBiZWluZyB1c2VkIChpdCBhY3R1YWxseSBvbmx5IGNvbnN1bWVzIGV4dHJhIG1lbW9yeSkuXG4gICAgICAgKlxuICAgICAgICogSSBkb24ndCBrbm93IHlldCBob3cgdG8gcmVpbnRyb2R1Y2UgdGhpcyBmZWF0dXJlLi5cbiAgICAgICAqXG4gICAgICAgKiBPbGRlciBjbGllbnRzIHdvbid0IGJlIGFibGUgdG8gcmVhZCB1cGRhdGVzIHdoZW4gd2UgcmVpbnRyb2R1Y2UgdGhpcyBmZWF0dXJlLiBTbyB0aGlzIHNob3VsZCBwcm9iYWJseSBiZSBkb25lIHVzaW5nIGEgZmxhZy5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgIC8vIHRoaXMua2V5TWFwLnNldChrZXksIHRoaXMua2V5Q2xvY2spXG4gICAgICB0aGlzLmtleUNsb2NrRW5jb2Rlci53cml0ZSh0aGlzLmtleUNsb2NrKyspXG4gICAgICB0aGlzLnN0cmluZ0VuY29kZXIud3JpdGUoa2V5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmtleUNsb2NrRW5jb2Rlci53cml0ZShjbG9jaylcbiAgICB9XG4gIH1cbn1cbiIsICIvKipcbiAqIEBtb2R1bGUgZW5jb2RpbmdcbiAqL1xuLypcbiAqIFdlIHVzZSB0aGUgZmlyc3QgZml2ZSBiaXRzIGluIHRoZSBpbmZvIGZsYWcgZm9yIGRldGVybWluaW5nIHRoZSB0eXBlIG9mIHRoZSBzdHJ1Y3QuXG4gKlxuICogMDogR0NcbiAqIDE6IEl0ZW0gd2l0aCBEZWxldGVkIGNvbnRlbnRcbiAqIDI6IEl0ZW0gd2l0aCBKU09OIGNvbnRlbnRcbiAqIDM6IEl0ZW0gd2l0aCBCaW5hcnkgY29udGVudFxuICogNDogSXRlbSB3aXRoIFN0cmluZyBjb250ZW50XG4gKiA1OiBJdGVtIHdpdGggRW1iZWQgY29udGVudCAoZm9yIHJpY2h0ZXh0IGNvbnRlbnQpXG4gKiA2OiBJdGVtIHdpdGggRm9ybWF0IGNvbnRlbnQgKGEgZm9ybWF0dGluZyBtYXJrZXIgZm9yIHJpY2h0ZXh0IGNvbnRlbnQpXG4gKiA3OiBJdGVtIHdpdGggVHlwZVxuICovXG5cbmltcG9ydCB7XG4gIGZpbmRJbmRleFNTLFxuICBnZXRTdGF0ZSxcbiAgY3JlYXRlSUQsXG4gIGdldFN0YXRlVmVjdG9yLFxuICByZWFkQW5kQXBwbHlEZWxldGVTZXQsXG4gIHdyaXRlRGVsZXRlU2V0LFxuICBjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUsXG4gIHRyYW5zYWN0LFxuICByZWFkSXRlbUNvbnRlbnQsXG4gIFVwZGF0ZURlY29kZXJWMSxcbiAgVXBkYXRlRGVjb2RlclYyLFxuICBVcGRhdGVFbmNvZGVyVjEsXG4gIFVwZGF0ZUVuY29kZXJWMixcbiAgRFNFbmNvZGVyVjIsXG4gIERTRGVjb2RlclYxLFxuICBEU0VuY29kZXJWMSxcbiAgbWVyZ2VVcGRhdGVzLFxuICBtZXJnZVVwZGF0ZXNWMixcbiAgU2tpcCxcbiAgZGlmZlVwZGF0ZVYyLFxuICBjb252ZXJ0VXBkYXRlRm9ybWF0VjJUb1YxLFxuICBEU0RlY29kZXJWMiwgRG9jLCBUcmFuc2FjdGlvbiwgR0MsIEl0ZW0sIFN0cnVjdFN0b3JlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICdsaWIwL2JpbmFyeSdcbmltcG9ydCAqIGFzIG1hcCBmcm9tICdsaWIwL21hcCdcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnbGliMC9tYXRoJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSdcblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtBcnJheTxHQ3xJdGVtPn0gc3RydWN0cyBBbGwgc3RydWN0cyBieSBgY2xpZW50YFxuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrIHdyaXRlIHN0cnVjdHMgc3RhcnRpbmcgd2l0aCBgSUQoY2xpZW50LGNsb2NrKWBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVTdHJ1Y3RzID0gKGVuY29kZXIsIHN0cnVjdHMsIGNsaWVudCwgY2xvY2spID0+IHtcbiAgLy8gd3JpdGUgZmlyc3QgaWRcbiAgY2xvY2sgPSBtYXRoLm1heChjbG9jaywgc3RydWN0c1swXS5pZC5jbG9jaykgLy8gbWFrZSBzdXJlIHRoZSBmaXJzdCBpZCBleGlzdHNcbiAgY29uc3Qgc3RhcnROZXdTdHJ1Y3RzID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spXG4gIC8vIHdyaXRlICMgZW5jb2RlZCBzdHJ1Y3RzXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzdHJ1Y3RzLmxlbmd0aCAtIHN0YXJ0TmV3U3RydWN0cylcbiAgZW5jb2Rlci53cml0ZUNsaWVudChjbGllbnQpXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbG9jaylcbiAgY29uc3QgZmlyc3RTdHJ1Y3QgPSBzdHJ1Y3RzW3N0YXJ0TmV3U3RydWN0c11cbiAgLy8gd3JpdGUgZmlyc3Qgc3RydWN0IHdpdGggYW4gb2Zmc2V0XG4gIGZpcnN0U3RydWN0LndyaXRlKGVuY29kZXIsIGNsb2NrIC0gZmlyc3RTdHJ1Y3QuaWQuY2xvY2spXG4gIGZvciAobGV0IGkgPSBzdGFydE5ld1N0cnVjdHMgKyAxOyBpIDwgc3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgIHN0cnVjdHNbaV0ud3JpdGUoZW5jb2RlciwgMClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IF9zbVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQ2xpZW50c1N0cnVjdHMgPSAoZW5jb2Rlciwgc3RvcmUsIF9zbSkgPT4ge1xuICAvLyB3ZSBmaWx0ZXIgYWxsIHZhbGlkIF9zbSBlbnRyaWVzIGludG8gc21cbiAgY29uc3Qgc20gPSBuZXcgTWFwKClcbiAgX3NtLmZvckVhY2goKGNsb2NrLCBjbGllbnQpID0+IHtcbiAgICAvLyBvbmx5IHdyaXRlIGlmIG5ldyBzdHJ1Y3RzIGFyZSBhdmFpbGFibGVcbiAgICBpZiAoZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCkgPiBjbG9jaykge1xuICAgICAgc20uc2V0KGNsaWVudCwgY2xvY2spXG4gICAgfVxuICB9KVxuICBnZXRTdGF0ZVZlY3RvcihzdG9yZSkuZm9yRWFjaCgoX2Nsb2NrLCBjbGllbnQpID0+IHtcbiAgICBpZiAoIV9zbS5oYXMoY2xpZW50KSkge1xuICAgICAgc20uc2V0KGNsaWVudCwgMClcbiAgICB9XG4gIH0pXG4gIC8vIHdyaXRlICMgc3RhdGVzIHRoYXQgd2VyZSB1cGRhdGVkXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzbS5zaXplKVxuICAvLyBXcml0ZSBpdGVtcyB3aXRoIGhpZ2hlciBjbGllbnQgaWRzIGZpcnN0XG4gIC8vIFRoaXMgaGVhdmlseSBpbXByb3ZlcyB0aGUgY29uZmxpY3QgYWxnb3JpdGhtLlxuICBhcnJheS5mcm9tKHNtLmVudHJpZXMoKSkuc29ydCgoYSwgYikgPT4gYlswXSAtIGFbMF0pLmZvckVhY2goKFtjbGllbnQsIGNsb2NrXSkgPT4ge1xuICAgIHdyaXRlU3RydWN0cyhlbmNvZGVyLCAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSksIGNsaWVudCwgY2xvY2spXG4gIH0pXG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXIgVGhlIGRlY29kZXIgb2JqZWN0IHRvIHJlYWQgZGF0YSBmcm9tLlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHJldHVybiB7TWFwPG51bWJlciwgeyBpOiBudW1iZXIsIHJlZnM6IEFycmF5PEl0ZW0gfCBHQz4gfT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVhZENsaWVudHNTdHJ1Y3RSZWZzID0gKGRlY29kZXIsIGRvYykgPT4ge1xuICAvKipcbiAgICogQHR5cGUge01hcDxudW1iZXIsIHsgaTogbnVtYmVyLCByZWZzOiBBcnJheTxJdGVtIHwgR0M+IH0+fVxuICAgKi9cbiAgY29uc3QgY2xpZW50UmVmcyA9IG1hcC5jcmVhdGUoKVxuICBjb25zdCBudW1PZlN0YXRlVXBkYXRlcyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTdGF0ZVVwZGF0ZXM7IGkrKykge1xuICAgIGNvbnN0IG51bWJlck9mU3RydWN0cyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpXG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEdDfEl0ZW0+fVxuICAgICAqL1xuICAgIGNvbnN0IHJlZnMgPSBuZXcgQXJyYXkobnVtYmVyT2ZTdHJ1Y3RzKVxuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kZXIucmVhZENsaWVudCgpXG4gICAgbGV0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICAvLyBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY2xpZW50UmVmcy5zZXQoY2xpZW50LCB7IGk6IDAsIHJlZnMgfSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mU3RydWN0czsgaSsrKSB7XG4gICAgICBjb25zdCBpbmZvID0gZGVjb2Rlci5yZWFkSW5mbygpXG4gICAgICBzd2l0Y2ggKGJpbmFyeS5CSVRTNSAmIGluZm8pIHtcbiAgICAgICAgY2FzZSAwOiB7IC8vIEdDXG4gICAgICAgICAgY29uc3QgbGVuID0gZGVjb2Rlci5yZWFkTGVuKClcbiAgICAgICAgICByZWZzW2ldID0gbmV3IEdDKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLCBsZW4pXG4gICAgICAgICAgY2xvY2sgKz0gbGVuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDEwOiB7IC8vIFNraXAgU3RydWN0IChub3RoaW5nIHRvIGFwcGx5KVxuICAgICAgICAgIC8vIEB0b2RvIHdlIGNvdWxkIHJlZHVjZSB0aGUgYW1vdW50IG9mIGNoZWNrcyBieSBhZGRpbmcgU2tpcCBzdHJ1Y3QgdG8gY2xpZW50UmVmcyBzbyB3ZSBrbm93IHRoYXQgc29tZXRoaW5nIGlzIG1pc3NpbmcuXG4gICAgICAgICAgY29uc3QgbGVuID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICAgICAgICByZWZzW2ldID0gbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbilcbiAgICAgICAgICBjbG9jayArPSBsZW5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHsgLy8gSXRlbSB3aXRoIGNvbnRlbnRcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgdXNlIGFueSB2YXJpYWJsZXMgYmVjYXVzZSBpbmxpbmluZyB2YXJpYWJsZXMgaXMgZmFzdGVyLlxuICAgICAgICAgICAqIEJlbG93IGEgbm9uLW9wdGltaXplZCB2ZXJzaW9uIGlzIHNob3duIHRoYXQgaW1wbGVtZW50cyB0aGUgYmFzaWMgYWxnb3JpdGhtIHdpdGhcbiAgICAgICAgICAgKiBhIGZldyBjb21tZW50c1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IGNhbnRDb3B5UGFyZW50SW5mbyA9IChpbmZvICYgKGJpbmFyeS5CSVQ3IHwgYmluYXJ5LkJJVDgpKSA9PT0gMFxuICAgICAgICAgIC8vIElmIHBhcmVudCA9IG51bGwgYW5kIG5laXRoZXIgbGVmdCBub3IgcmlnaHQgYXJlIGRlZmluZWQsIHRoZW4gd2Uga25vdyB0aGF0IGBwYXJlbnRgIGlzIGNoaWxkIG9mIGB5YFxuICAgICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAgIC8vIEl0IGluZGljYXRlcyBob3cgd2Ugc3RvcmUvcmV0cmlldmUgcGFyZW50IGZyb20gYHkuc2hhcmVgXG4gICAgICAgICAgLy8gQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBJdGVtKFxuICAgICAgICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayksXG4gICAgICAgICAgICBudWxsLCAvLyBsZWZ0ZFxuICAgICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUOCkgPT09IGJpbmFyeS5CSVQ4ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiBudWxsLCAvLyBvcmlnaW5cbiAgICAgICAgICAgIG51bGwsIC8vIHJpZ2h0XG4gICAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ3KSA9PT0gYmluYXJ5LkJJVDcgPyBkZWNvZGVyLnJlYWRSaWdodElEKCkgOiBudWxsLCAvLyByaWdodCBvcmlnaW5cbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyA/IChkZWNvZGVyLnJlYWRQYXJlbnRJbmZvKCkgPyBkb2MuZ2V0KGRlY29kZXIucmVhZFN0cmluZygpKSA6IGRlY29kZXIucmVhZExlZnRJRCgpKSA6IG51bGwsIC8vIHBhcmVudFxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgICByZWFkSXRlbUNvbnRlbnQoZGVjb2RlciwgaW5mbykgLy8gaXRlbSBjb250ZW50XG4gICAgICAgICAgKVxuICAgICAgICAgIC8qIEEgbm9uLW9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWJvdmUgYWxnb3JpdGhtOlxuXG4gICAgICAgICAgLy8gVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgbGVmdCBvZiB0aGlzIGl0ZW0uXG4gICAgICAgICAgY29uc3Qgb3JpZ2luID0gKGluZm8gJiBiaW5hcnkuQklUOCkgPT09IGJpbmFyeS5CSVQ4ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiBudWxsXG4gICAgICAgICAgLy8gVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgcmlnaHQgb2YgdGhpcyBpdGVtLlxuICAgICAgICAgIGNvbnN0IHJpZ2h0T3JpZ2luID0gKGluZm8gJiBiaW5hcnkuQklUNykgPT09IGJpbmFyeS5CSVQ3ID8gZGVjb2Rlci5yZWFkUmlnaHRJRCgpIDogbnVsbFxuICAgICAgICAgIGNvbnN0IGNhbnRDb3B5UGFyZW50SW5mbyA9IChpbmZvICYgKGJpbmFyeS5CSVQ3IHwgYmluYXJ5LkJJVDgpKSA9PT0gMFxuICAgICAgICAgIGNvbnN0IGhhc1BhcmVudFlLZXkgPSBjYW50Q29weVBhcmVudEluZm8gPyBkZWNvZGVyLnJlYWRQYXJlbnRJbmZvKCkgOiBmYWxzZVxuICAgICAgICAgIC8vIElmIHBhcmVudCA9IG51bGwgYW5kIG5laXRoZXIgbGVmdCBub3IgcmlnaHQgYXJlIGRlZmluZWQsIHRoZW4gd2Uga25vdyB0aGF0IGBwYXJlbnRgIGlzIGNoaWxkIG9mIGB5YFxuICAgICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAgIC8vIEl0IGluZGljYXRlcyBob3cgd2Ugc3RvcmUvcmV0cmlldmUgcGFyZW50IGZyb20gYHkuc2hhcmVgXG4gICAgICAgICAgLy8gQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAgICAgIGNvbnN0IHBhcmVudFlLZXkgPSBjYW50Q29weVBhcmVudEluZm8gJiYgaGFzUGFyZW50WUtleSA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbFxuXG4gICAgICAgICAgY29uc3Qgc3RydWN0ID0gbmV3IEl0ZW0oXG4gICAgICAgICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSxcbiAgICAgICAgICAgIG51bGwsIC8vIGxlZnRkXG4gICAgICAgICAgICBvcmlnaW4sIC8vIG9yaWdpblxuICAgICAgICAgICAgbnVsbCwgLy8gcmlnaHRcbiAgICAgICAgICAgIHJpZ2h0T3JpZ2luLCAvLyByaWdodCBvcmlnaW5cbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyAmJiAhaGFzUGFyZW50WUtleSA/IGRlY29kZXIucmVhZExlZnRJRCgpIDogKHBhcmVudFlLZXkgIT09IG51bGwgPyBkb2MuZ2V0KHBhcmVudFlLZXkpIDogbnVsbCksIC8vIHBhcmVudFxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgICByZWFkSXRlbUNvbnRlbnQoZGVjb2RlciwgaW5mbykgLy8gaXRlbSBjb250ZW50XG4gICAgICAgICAgKVxuICAgICAgICAgICovXG4gICAgICAgICAgcmVmc1tpXSA9IHN0cnVjdFxuICAgICAgICAgIGNsb2NrICs9IHN0cnVjdC5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byByZWFkOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgfVxuICByZXR1cm4gY2xpZW50UmVmc1xufVxuXG4vKipcbiAqIFJlc3VtZSBjb21wdXRpbmcgc3RydWN0cyBnZW5lcmF0ZWQgYnkgc3RydWN0IHJlYWRlcnMuXG4gKlxuICogV2hpbGUgdGhlcmUgaXMgc29tZXRoaW5nIHRvIGRvLCB3ZSBpbnRlZ3JhdGUgc3RydWN0cyBpbiB0aGlzIG9yZGVyXG4gKiAxLiB0b3AgZWxlbWVudCBvbiBzdGFjaywgaWYgc3RhY2sgaXMgbm90IGVtcHR5XG4gKiAyLiBuZXh0IGVsZW1lbnQgZnJvbSBjdXJyZW50IHN0cnVjdCByZWFkZXIgKGlmIGVtcHR5LCB1c2UgbmV4dCBzdHJ1Y3QgcmVhZGVyKVxuICpcbiAqIElmIHN0cnVjdCBjYXVzYWxseSBkZXBlbmRzIG9uIGFub3RoZXIgc3RydWN0IChyZWYubWlzc2luZyksIHdlIHB1dCBuZXh0IHJlYWRlciBvZlxuICogYHJlZi5pZC5jbGllbnRgIG9uIHRvcCBvZiBzdGFjay5cbiAqXG4gKiBBdCBzb21lIHBvaW50IHdlIGZpbmQgYSBzdHJ1Y3QgdGhhdCBoYXMgbm8gY2F1c2FsIGRlcGVuZGVuY2llcyxcbiAqIHRoZW4gd2Ugc3RhcnQgZW1wdHlpbmcgdGhlIHN0YWNrLlxuICpcbiAqIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBoYXZlIGNpcmNsZXM6IGkuZS4gc3RydWN0MSAoZnJvbSBjbGllbnQxKSBkZXBlbmRzIG9uIHN0cnVjdDIgKGZyb20gY2xpZW50MilcbiAqIGRlcGVuZHMgb24gc3RydWN0MyAoZnJvbSBjbGllbnQxKS4gVGhlcmVmb3JlIHRoZSBtYXggc3RhY2sgc2l6ZSBpcyBlcWF1bCB0byBgc3RydWN0UmVhZGVycy5sZW5ndGhgLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGltcGxlbWVudGVkIGluIGEgd2F5IHNvIHRoYXQgd2UgY2FuIHJlc3VtZSBjb21wdXRhdGlvbiBpZiB0aGlzIHVwZGF0ZVxuICogY2F1c2FsbHkgZGVwZW5kcyBvbiBhbm90aGVyIHVwZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7TWFwPG51bWJlciwgeyBpOiBudW1iZXIsIHJlZnM6IChHQyB8IEl0ZW0pW10gfT59IGNsaWVudHNTdHJ1Y3RSZWZzXG4gKiBAcmV0dXJuIHsgbnVsbCB8IHsgdXBkYXRlOiBVaW50OEFycmF5LCBtaXNzaW5nOiBNYXA8bnVtYmVyLG51bWJlcj4gfSB9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpbnRlZ3JhdGVTdHJ1Y3RzID0gKHRyYW5zYWN0aW9uLCBzdG9yZSwgY2xpZW50c1N0cnVjdFJlZnMpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxJdGVtIHwgR0M+fVxuICAgKi9cbiAgY29uc3Qgc3RhY2sgPSBbXVxuICAvLyBzb3J0IHRoZW0gc28gdGhhdCB3ZSB0YWtlIHRoZSBoaWdoZXIgaWQgZmlyc3QsIGluIGNhc2Ugb2YgY29uZmxpY3RzIHRoZSBsb3dlciBpZCB3aWxsIHByb2JhYmx5IG5vdCBjb25mbGljdCB3aXRoIHRoZSBpZCBmcm9tIHRoZSBoaWdoZXIgdXNlci5cbiAgbGV0IGNsaWVudHNTdHJ1Y3RSZWZzSWRzID0gYXJyYXkuZnJvbShjbGllbnRzU3RydWN0UmVmcy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICBpZiAoY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBnZXROZXh0U3RydWN0VGFyZ2V0ID0gKCkgPT4ge1xuICAgIGlmIChjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGxldCBuZXh0U3RydWN0c1RhcmdldCA9IC8qKiBAdHlwZSB7e2k6bnVtYmVyLHJlZnM6QXJyYXk8R0N8SXRlbT59fSAqLyAoY2xpZW50c1N0cnVjdFJlZnMuZ2V0KGNsaWVudHNTdHJ1Y3RSZWZzSWRzW2NsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCAtIDFdKSlcbiAgICB3aGlsZSAobmV4dFN0cnVjdHNUYXJnZXQucmVmcy5sZW5ndGggPT09IG5leHRTdHJ1Y3RzVGFyZ2V0LmkpIHtcbiAgICAgIGNsaWVudHNTdHJ1Y3RSZWZzSWRzLnBvcCgpXG4gICAgICBpZiAoY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBuZXh0U3RydWN0c1RhcmdldCA9IC8qKiBAdHlwZSB7e2k6bnVtYmVyLHJlZnM6QXJyYXk8R0N8SXRlbT59fSAqLyAoY2xpZW50c1N0cnVjdFJlZnMuZ2V0KGNsaWVudHNTdHJ1Y3RSZWZzSWRzW2NsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCAtIDFdKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0U3RydWN0c1RhcmdldFxuICB9XG4gIGxldCBjdXJTdHJ1Y3RzVGFyZ2V0ID0gZ2V0TmV4dFN0cnVjdFRhcmdldCgpXG4gIGlmIChjdXJTdHJ1Y3RzVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7U3RydWN0U3RvcmV9XG4gICAqL1xuICBjb25zdCByZXN0U3RydWN0cyA9IG5ldyBTdHJ1Y3RTdG9yZSgpXG4gIGNvbnN0IG1pc3NpbmdTViA9IG5ldyBNYXAoKVxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICovXG4gIGNvbnN0IHVwZGF0ZU1pc3NpbmdTdiA9IChjbGllbnQsIGNsb2NrKSA9PiB7XG4gICAgY29uc3QgbWNsb2NrID0gbWlzc2luZ1NWLmdldChjbGllbnQpXG4gICAgaWYgKG1jbG9jayA9PSBudWxsIHx8IG1jbG9jayA+IGNsb2NrKSB7XG4gICAgICBtaXNzaW5nU1Yuc2V0KGNsaWVudCwgY2xvY2spXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAdHlwZSB7R0N8SXRlbX1cbiAgICovXG4gIGxldCBzdGFja0hlYWQgPSAvKiogQHR5cGUge2FueX0gKi8gKGN1clN0cnVjdHNUYXJnZXQpLnJlZnNbLyoqIEB0eXBlIHthbnl9ICovIChjdXJTdHJ1Y3RzVGFyZ2V0KS5pKytdXG4gIC8vIGNhY2hpbmcgdGhlIHN0YXRlIGJlY2F1c2UgaXQgaXMgdXNlZCB2ZXJ5IG9mdGVuXG4gIGNvbnN0IHN0YXRlID0gbmV3IE1hcCgpXG5cbiAgY29uc3QgYWRkU3RhY2tUb1Jlc3RTUyA9ICgpID0+IHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RhY2spIHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGl0ZW0uaWQuY2xpZW50XG4gICAgICBjb25zdCB1bmFwcGxpY2FibGVJdGVtcyA9IGNsaWVudHNTdHJ1Y3RSZWZzLmdldChjbGllbnQpXG4gICAgICBpZiAodW5hcHBsaWNhYmxlSXRlbXMpIHtcbiAgICAgICAgLy8gZGVjcmVtZW50IGJlY2F1c2Ugd2Ugd2VyZW4ndCBhYmxlIHRvIGFwcGx5IHByZXZpb3VzIG9wZXJhdGlvblxuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5pLS1cbiAgICAgICAgcmVzdFN0cnVjdHMuY2xpZW50cy5zZXQoY2xpZW50LCB1bmFwcGxpY2FibGVJdGVtcy5yZWZzLnNsaWNlKHVuYXBwbGljYWJsZUl0ZW1zLmkpKVxuICAgICAgICBjbGllbnRzU3RydWN0UmVmcy5kZWxldGUoY2xpZW50KVxuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5pID0gMFxuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5yZWZzID0gW11cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGl0ZW0gd2FzIHRoZSBsYXN0IGl0ZW0gb24gY2xpZW50c1N0cnVjdFJlZnMgYW5kIHRoZSBmaWVsZCB3YXMgYWxyZWFkeSBjbGVhcmVkLiBBZGQgaXRlbSB0byByZXN0U3RydWN0cyBhbmQgY29udGludWVcbiAgICAgICAgcmVzdFN0cnVjdHMuY2xpZW50cy5zZXQoY2xpZW50LCBbaXRlbV0pXG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgY2xpZW50IGZyb20gY2xpZW50c1N0cnVjdFJlZnNJZHMgdG8gcHJldmVudCB1c2VycyBmcm9tIGFwcGx5aW5nIHRoZSBzYW1lIHVwZGF0ZSBhZ2FpblxuICAgICAgY2xpZW50c1N0cnVjdFJlZnNJZHMgPSBjbGllbnRzU3RydWN0UmVmc0lkcy5maWx0ZXIoYyA9PiBjICE9PSBjbGllbnQpXG4gICAgfVxuICAgIHN0YWNrLmxlbmd0aCA9IDBcbiAgfVxuXG4gIC8vIGl0ZXJhdGUgb3ZlciBhbGwgc3RydWN0IHJlYWRlcnMgdW50aWwgd2UgYXJlIGRvbmVcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoc3RhY2tIZWFkLmNvbnN0cnVjdG9yICE9PSBTa2lwKSB7XG4gICAgICBjb25zdCBsb2NhbENsb2NrID0gbWFwLnNldElmVW5kZWZpbmVkKHN0YXRlLCBzdGFja0hlYWQuaWQuY2xpZW50LCAoKSA9PiBnZXRTdGF0ZShzdG9yZSwgc3RhY2tIZWFkLmlkLmNsaWVudCkpXG4gICAgICBjb25zdCBvZmZzZXQgPSBsb2NhbENsb2NrIC0gc3RhY2tIZWFkLmlkLmNsb2NrXG4gICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAvLyB1cGRhdGUgZnJvbSB0aGUgc2FtZSBjbGllbnQgaXMgbWlzc2luZ1xuICAgICAgICBzdGFjay5wdXNoKHN0YWNrSGVhZClcbiAgICAgICAgdXBkYXRlTWlzc2luZ1N2KHN0YWNrSGVhZC5pZC5jbGllbnQsIHN0YWNrSGVhZC5pZC5jbG9jayAtIDEpXG4gICAgICAgIC8vIGhpZCBhIGRlYWQgd2FsbCwgYWRkIGFsbCBpdGVtcyBmcm9tIHN0YWNrIHRvIHJlc3RTU1xuICAgICAgICBhZGRTdGFja1RvUmVzdFNTKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmcgPSBzdGFja0hlYWQuZ2V0TWlzc2luZyh0cmFuc2FjdGlvbiwgc3RvcmUpXG4gICAgICAgIGlmIChtaXNzaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChzdGFja0hlYWQpXG4gICAgICAgICAgLy8gZ2V0IHRoZSBzdHJ1Y3QgcmVhZGVyIHRoYXQgaGFzIHRoZSBtaXNzaW5nIHN0cnVjdFxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEB0eXBlIHt7IHJlZnM6IEFycmF5PEdDfEl0ZW0+LCBpOiBudW1iZXIgfX1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBzdHJ1Y3RSZWZzID0gY2xpZW50c1N0cnVjdFJlZnMuZ2V0KC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAobWlzc2luZykpIHx8IHsgcmVmczogW10sIGk6IDAgfVxuICAgICAgICAgIGlmIChzdHJ1Y3RSZWZzLnJlZnMubGVuZ3RoID09PSBzdHJ1Y3RSZWZzLmkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgdXBkYXRlIG1lc3NhZ2UgY2F1c2FsbHkgZGVwZW5kcyBvbiBhbm90aGVyIHVwZGF0ZSBtZXNzYWdlIHRoYXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICAgIHVwZGF0ZU1pc3NpbmdTdigvKiogQHR5cGUge251bWJlcn0gKi8gKG1pc3NpbmcpLCBnZXRTdGF0ZShzdG9yZSwgbWlzc2luZykpXG4gICAgICAgICAgICBhZGRTdGFja1RvUmVzdFNTKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2tIZWFkID0gc3RydWN0UmVmcy5yZWZzW3N0cnVjdFJlZnMuaSsrXVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwIHx8IG9mZnNldCA8IHN0YWNrSGVhZC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBhbGwgZmluZSwgYXBwbHkgdGhlIHN0YWNraGVhZFxuICAgICAgICAgIHN0YWNrSGVhZC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIG9mZnNldClcbiAgICAgICAgICBzdGF0ZS5zZXQoc3RhY2tIZWFkLmlkLmNsaWVudCwgc3RhY2tIZWFkLmlkLmNsb2NrICsgc3RhY2tIZWFkLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBpdGVyYXRlIHRvIG5leHQgc3RhY2tIZWFkXG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7R0N8SXRlbX0gKi8gKHN0YWNrLnBvcCgpKVxuICAgIH0gZWxzZSBpZiAoY3VyU3RydWN0c1RhcmdldCAhPT0gbnVsbCAmJiBjdXJTdHJ1Y3RzVGFyZ2V0LmkgPCBjdXJTdHJ1Y3RzVGFyZ2V0LnJlZnMubGVuZ3RoKSB7XG4gICAgICBzdGFja0hlYWQgPSAvKiogQHR5cGUge0dDfEl0ZW19ICovIChjdXJTdHJ1Y3RzVGFyZ2V0LnJlZnNbY3VyU3RydWN0c1RhcmdldC5pKytdKVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJTdHJ1Y3RzVGFyZ2V0ID0gZ2V0TmV4dFN0cnVjdFRhcmdldCgpXG4gICAgICBpZiAoY3VyU3RydWN0c1RhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAvLyB3ZSBhcmUgZG9uZSFcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7R0N8SXRlbX0gKi8gKGN1clN0cnVjdHNUYXJnZXQucmVmc1tjdXJTdHJ1Y3RzVGFyZ2V0LmkrK10pXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZXN0U3RydWN0cy5jbGllbnRzLnNpemUgPiAwKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKVxuICAgIHdyaXRlQ2xpZW50c1N0cnVjdHMoZW5jb2RlciwgcmVzdFN0cnVjdHMsIG5ldyBNYXAoKSlcbiAgICAvLyB3cml0ZSBlbXB0eSBkZWxldGVzZXRcbiAgICAvLyB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBuZXcgRGVsZXRlU2V0KCkpXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIDApIC8vID0+IG5vIG5lZWQgZm9yIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwsIGp1c3Qgd3JpdGUgMCBkZWxldGVzXG4gICAgcmV0dXJuIHsgbWlzc2luZzogbWlzc2luZ1NWLCB1cGRhdGU6IGVuY29kZXIudG9VaW50OEFycmF5KCkgfVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uID0gKGVuY29kZXIsIHRyYW5zYWN0aW9uKSA9PiB3cml0ZUNsaWVudHNTdHJ1Y3RzKGVuY29kZXIsIHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUpXG5cbi8qKlxuICogUmVhZCBhbmQgYXBwbHkgYSBkb2N1bWVudCB1cGRhdGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGBhcHBseVVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gZGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBbc3RydWN0RGVjb2Rlcl1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRVcGRhdGVWMiA9IChkZWNvZGVyLCB5ZG9jLCB0cmFuc2FjdGlvbk9yaWdpbiwgc3RydWN0RGVjb2RlciA9IG5ldyBVcGRhdGVEZWNvZGVyVjIoZGVjb2RlcikpID0+XG4gIHRyYW5zYWN0KHlkb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAvLyBmb3JjZSB0aGF0IHRyYW5zYWN0aW9uLmxvY2FsIGlzIHNldCB0byBub24tbG9jYWxcbiAgICB0cmFuc2FjdGlvbi5sb2NhbCA9IGZhbHNlXG4gICAgbGV0IHJldHJ5ID0gZmFsc2VcbiAgICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2NcbiAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZVxuICAgIC8vIGxldCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3Qgc3MgPSByZWFkQ2xpZW50c1N0cnVjdFJlZnMoc3RydWN0RGVjb2RlciwgZG9jKVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIHJlYWQgc3RydWN0czogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIG1lcmdlOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3QgcmVzdFN0cnVjdHMgPSBpbnRlZ3JhdGVTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdG9yZSwgc3MpXG4gICAgY29uc3QgcGVuZGluZyA9IHN0b3JlLnBlbmRpbmdTdHJ1Y3RzXG4gICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHdlIGNhbiBhcHBseSBzb21ldGhpbmdcbiAgICAgIGZvciAoY29uc3QgW2NsaWVudCwgY2xvY2tdIG9mIHBlbmRpbmcubWlzc2luZykge1xuICAgICAgICBpZiAoY2xvY2sgPCBnZXRTdGF0ZShzdG9yZSwgY2xpZW50KSkge1xuICAgICAgICAgIHJldHJ5ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXN0U3RydWN0cykge1xuICAgICAgICAvLyBtZXJnZSByZXN0U3RydWN0cyBpbnRvIHN0b3JlLnBlbmRpbmdcbiAgICAgICAgZm9yIChjb25zdCBbY2xpZW50LCBjbG9ja10gb2YgcmVzdFN0cnVjdHMubWlzc2luZykge1xuICAgICAgICAgIGNvbnN0IG1jbG9jayA9IHBlbmRpbmcubWlzc2luZy5nZXQoY2xpZW50KVxuICAgICAgICAgIGlmIChtY2xvY2sgPT0gbnVsbCB8fCBtY2xvY2sgPiBjbG9jaykge1xuICAgICAgICAgICAgcGVuZGluZy5taXNzaW5nLnNldChjbGllbnQsIGNsb2NrKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwZW5kaW5nLnVwZGF0ZSA9IG1lcmdlVXBkYXRlc1YyKFtwZW5kaW5nLnVwZGF0ZSwgcmVzdFN0cnVjdHMudXBkYXRlXSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcmUucGVuZGluZ1N0cnVjdHMgPSByZXN0U3RydWN0c1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byBpbnRlZ3JhdGU6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBjb25zdCBkc1Jlc3QgPSByZWFkQW5kQXBwbHlEZWxldGVTZXQoc3RydWN0RGVjb2RlciwgdHJhbnNhY3Rpb24sIHN0b3JlKVxuICAgIGlmIChzdG9yZS5wZW5kaW5nRHMpIHtcbiAgICAgIC8vIEB0b2RvIHdlIGNvdWxkIG1ha2UgYSBsb3dlci1ib3VuZCBzdGF0ZS12ZWN0b3IgY2hlY2sgYXMgd2UgZG8gYWJvdmVcbiAgICAgIGNvbnN0IHBlbmRpbmdEU1VwZGF0ZSA9IG5ldyBVcGRhdGVEZWNvZGVyVjIoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihzdG9yZS5wZW5kaW5nRHMpKVxuICAgICAgZGVjb2RpbmcucmVhZFZhclVpbnQocGVuZGluZ0RTVXBkYXRlLnJlc3REZWNvZGVyKSAvLyByZWFkIDAgc3RydWN0cywgYmVjYXVzZSB3ZSBvbmx5IGVuY29kZSBkZWxldGVzIGluIHBlbmRpbmdkc3VwZGF0ZVxuICAgICAgY29uc3QgZHNSZXN0MiA9IHJlYWRBbmRBcHBseURlbGV0ZVNldChwZW5kaW5nRFNVcGRhdGUsIHRyYW5zYWN0aW9uLCBzdG9yZSlcbiAgICAgIGlmIChkc1Jlc3QgJiYgZHNSZXN0Mikge1xuICAgICAgICAvLyBjYXNlIDE6IGRzMSAhPSBudWxsICYmIGRzMiAhPSBudWxsXG4gICAgICAgIHN0b3JlLnBlbmRpbmdEcyA9IG1lcmdlVXBkYXRlc1YyKFtkc1Jlc3QsIGRzUmVzdDJdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2FzZSAyOiBkczEgIT0gbnVsbFxuICAgICAgICAvLyBjYXNlIDM6IGRzMiAhPSBudWxsXG4gICAgICAgIC8vIGNhc2UgNDogZHMxID09IG51bGwgJiYgZHMyID09IG51bGxcbiAgICAgICAgc3RvcmUucGVuZGluZ0RzID0gZHNSZXN0IHx8IGRzUmVzdDJcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRWl0aGVyIGRzUmVzdCA9PSBudWxsICYmIHBlbmRpbmdEcyA9PSBudWxsIE9SIGRzUmVzdCAhPSBudWxsXG4gICAgICBzdG9yZS5wZW5kaW5nRHMgPSBkc1Jlc3RcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gY2xlYW51cDogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuXG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gcmVzdW1lIGRlbGV0ZSByZWFkZXJzOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgaWYgKHJldHJ5KSB7XG4gICAgICBjb25zdCB1cGRhdGUgPSAvKiogQHR5cGUge3t1cGRhdGU6IFVpbnQ4QXJyYXl9fSAqLyAoc3RvcmUucGVuZGluZ1N0cnVjdHMpLnVwZGF0ZVxuICAgICAgc3RvcmUucGVuZGluZ1N0cnVjdHMgPSBudWxsXG4gICAgICBhcHBseVVwZGF0ZVYyKHRyYW5zYWN0aW9uLmRvYywgdXBkYXRlKVxuICAgIH1cbiAgfSwgdHJhbnNhY3Rpb25PcmlnaW4sIGZhbHNlKVxuXG4vKipcbiAqIFJlYWQgYW5kIGFwcGx5IGEgZG9jdW1lbnQgdXBkYXRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgYXBwbHlVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIGRlY29kZXIuXG4gKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHthbnl9IFt0cmFuc2FjdGlvbk9yaWdpbl0gVGhpcyB3aWxsIGJlIHN0b3JlZCBvbiBgdHJhbnNhY3Rpb24ub3JpZ2luYCBhbmQgYC5vbigndXBkYXRlJywgKHVwZGF0ZSwgb3JpZ2luKSlgXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVXBkYXRlID0gKGRlY29kZXIsIHlkb2MsIHRyYW5zYWN0aW9uT3JpZ2luKSA9PiByZWFkVXBkYXRlVjIoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4sIG5ldyBVcGRhdGVEZWNvZGVyVjEoZGVjb2RlcikpXG5cbi8qKlxuICogQXBwbHkgYSBkb2N1bWVudCB1cGRhdGUgY3JlYXRlZCBieSwgZm9yIGV4YW1wbGUsIGB5Lm9uKCd1cGRhdGUnLCB1cGRhdGUgPT4gLi4pYCBvciBgdXBkYXRlID0gZW5jb2RlU3RhdGVBc1VwZGF0ZSgpYC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgYHJlYWRVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIFVpbnQ4QXJyYXkgaW5zdGVhZCBvZiBhIERlY29kZXIuXG4gKlxuICogQHBhcmFtIHtEb2N9IHlkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGx5VXBkYXRlVjIgPSAoeWRvYywgdXBkYXRlLCB0cmFuc2FjdGlvbk9yaWdpbiwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3QgZGVjb2RlciA9IGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKVxuICByZWFkVXBkYXRlVjIoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4sIG5ldyBZRGVjb2RlcihkZWNvZGVyKSlcbn1cblxuLyoqXG4gKiBBcHBseSBhIGRvY3VtZW50IHVwZGF0ZSBjcmVhdGVkIGJ5LCBmb3IgZXhhbXBsZSwgYHkub24oJ3VwZGF0ZScsIHVwZGF0ZSA9PiAuLilgIG9yIGB1cGRhdGUgPSBlbmNvZGVTdGF0ZUFzVXBkYXRlKClgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgcmVhZFVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gVWludDhBcnJheSBpbnN0ZWFkIG9mIGEgRGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7YW55fSBbdHJhbnNhY3Rpb25PcmlnaW5dIFRoaXMgd2lsbCBiZSBzdG9yZWQgb24gYHRyYW5zYWN0aW9uLm9yaWdpbmAgYW5kIGAub24oJ3VwZGF0ZScsICh1cGRhdGUsIG9yaWdpbikpYFxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYXBwbHlVcGRhdGUgPSAoeWRvYywgdXBkYXRlLCB0cmFuc2FjdGlvbk9yaWdpbikgPT4gYXBwbHlVcGRhdGVWMih5ZG9jLCB1cGRhdGUsIHRyYW5zYWN0aW9uT3JpZ2luLCBVcGRhdGVEZWNvZGVyVjEpXG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZS4gSWYgeW91IHNwZWNpZnkgdGhlIHN0YXRlIG9mIHRoZSByZW1vdGUgY2xpZW50IChgdGFyZ2V0U3RhdGVWZWN0b3JgKSBpdCB3aWxsXG4gKiBvbmx5IHdyaXRlIHRoZSBvcGVyYXRpb25zIHRoYXQgYXJlIG1pc3NpbmcuXG4gKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBbdGFyZ2V0U3RhdGVWZWN0b3JdIFRoZSBzdGF0ZSBvZiB0aGUgdGFyZ2V0IHRoYXQgcmVjZWl2ZXMgdGhlIHVwZGF0ZS4gTGVhdmUgZW1wdHkgdG8gd3JpdGUgYWxsIGtub3duIHN0cnVjdHNcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlU3RhdGVBc1VwZGF0ZSA9IChlbmNvZGVyLCBkb2MsIHRhcmdldFN0YXRlVmVjdG9yID0gbmV3IE1hcCgpKSA9PiB7XG4gIHdyaXRlQ2xpZW50c1N0cnVjdHMoZW5jb2RlciwgZG9jLnN0b3JlLCB0YXJnZXRTdGF0ZVZlY3RvcilcbiAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlKGRvYy5zdG9yZSkpXG59XG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZSB0aGF0IGNhbiBiZSBhcHBsaWVkIG9uIHRoZSByZW1vdGUgZG9jdW1lbnQuIElmIHlvdSBzcGVjaWZ5IHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGNsaWVudCAoYHRhcmdldFN0YXRlYCkgaXQgd2lsbFxuICogb25seSB3cml0ZSB0aGUgb3BlcmF0aW9ucyB0aGF0IGFyZSBtaXNzaW5nLlxuICpcbiAqIFVzZSBgd3JpdGVTdGF0ZUFzVXBkYXRlYCBpbnN0ZWFkIGlmIHlvdSBhcmUgd29ya2luZyB3aXRoIGxpYjAvZW5jb2RpbmcuanMjRW5jb2RlclxuICpcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gW2VuY29kZWRUYXJnZXRTdGF0ZVZlY3Rvcl0gVGhlIHN0YXRlIG9mIHRoZSB0YXJnZXQgdGhhdCByZWNlaXZlcyB0aGUgdXBkYXRlLiBMZWF2ZSBlbXB0eSB0byB3cml0ZSBhbGwga25vd24gc3RydWN0c1xuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IFtlbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVN0YXRlQXNVcGRhdGVWMiA9IChkb2MsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvciA9IG5ldyBVaW50OEFycmF5KFswXSksIGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCkpID0+IHtcbiAgY29uc3QgdGFyZ2V0U3RhdGVWZWN0b3IgPSBkZWNvZGVTdGF0ZVZlY3RvcihlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IpXG4gIHdyaXRlU3RhdGVBc1VwZGF0ZShlbmNvZGVyLCBkb2MsIHRhcmdldFN0YXRlVmVjdG9yKVxuICBjb25zdCB1cGRhdGVzID0gW2VuY29kZXIudG9VaW50OEFycmF5KCldXG4gIC8vIGFsc28gYWRkIHRoZSBwZW5kaW5nIHVwZGF0ZXMgKGlmIHRoZXJlIGFyZSBhbnkpXG4gIGlmIChkb2Muc3RvcmUucGVuZGluZ0RzKSB7XG4gICAgdXBkYXRlcy5wdXNoKGRvYy5zdG9yZS5wZW5kaW5nRHMpXG4gIH1cbiAgaWYgKGRvYy5zdG9yZS5wZW5kaW5nU3RydWN0cykge1xuICAgIHVwZGF0ZXMucHVzaChkaWZmVXBkYXRlVjIoZG9jLnN0b3JlLnBlbmRpbmdTdHJ1Y3RzLnVwZGF0ZSwgZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yKSlcbiAgfVxuICBpZiAodXBkYXRlcy5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGVuY29kZXIuY29uc3RydWN0b3IgPT09IFVwZGF0ZUVuY29kZXJWMSkge1xuICAgICAgcmV0dXJuIG1lcmdlVXBkYXRlcyh1cGRhdGVzLm1hcCgodXBkYXRlLCBpKSA9PiBpID09PSAwID8gdXBkYXRlIDogY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSh1cGRhdGUpKSlcbiAgICB9IGVsc2UgaWYgKGVuY29kZXIuY29uc3RydWN0b3IgPT09IFVwZGF0ZUVuY29kZXJWMikge1xuICAgICAgcmV0dXJuIG1lcmdlVXBkYXRlc1YyKHVwZGF0ZXMpXG4gICAgfVxuICB9XG4gIHJldHVybiB1cGRhdGVzWzBdXG59XG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZSB0aGF0IGNhbiBiZSBhcHBsaWVkIG9uIHRoZSByZW1vdGUgZG9jdW1lbnQuIElmIHlvdSBzcGVjaWZ5IHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGNsaWVudCAoYHRhcmdldFN0YXRlYCkgaXQgd2lsbFxuICogb25seSB3cml0ZSB0aGUgb3BlcmF0aW9ucyB0aGF0IGFyZSBtaXNzaW5nLlxuICpcbiAqIFVzZSBgd3JpdGVTdGF0ZUFzVXBkYXRlYCBpbnN0ZWFkIGlmIHlvdSBhcmUgd29ya2luZyB3aXRoIGxpYjAvZW5jb2RpbmcuanMjRW5jb2RlclxuICpcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gW2VuY29kZWRUYXJnZXRTdGF0ZVZlY3Rvcl0gVGhlIHN0YXRlIG9mIHRoZSB0YXJnZXQgdGhhdCByZWNlaXZlcyB0aGUgdXBkYXRlLiBMZWF2ZSBlbXB0eSB0byB3cml0ZSBhbGwga25vd24gc3RydWN0c1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVN0YXRlQXNVcGRhdGUgPSAoZG9jLCBlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IpID0+IGVuY29kZVN0YXRlQXNVcGRhdGVWMihkb2MsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvciwgbmV3IFVwZGF0ZUVuY29kZXJWMSgpKVxuXG4vKipcbiAqIFJlYWQgc3RhdGUgdmVjdG9yIGZyb20gRGVjb2RlciBhbmQgcmV0dXJuIGFzIE1hcFxuICpcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkU3RhdGVWZWN0b3IgPSBkZWNvZGVyID0+IHtcbiAgY29uc3Qgc3MgPSBuZXcgTWFwKClcbiAgY29uc3Qgc3NMZW5ndGggPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNzTGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICAgIGNvbnN0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICBzcy5zZXQoY2xpZW50LCBjbG9jaylcbiAgfVxuICByZXR1cm4gc3Ncbn1cblxuLyoqXG4gKiBSZWFkIGRlY29kZWRTdGF0ZSBhbmQgcmV0dXJuIFN0YXRlIGFzIE1hcC5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRlY29kZWRTdGF0ZVxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbi8vIGV4cG9ydCBjb25zdCBkZWNvZGVTdGF0ZVZlY3RvclYyID0gZGVjb2RlZFN0YXRlID0+IHJlYWRTdGF0ZVZlY3RvcihuZXcgRFNEZWNvZGVyVjIoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihkZWNvZGVkU3RhdGUpKSlcblxuLyoqXG4gKiBSZWFkIGRlY29kZWRTdGF0ZSBhbmQgcmV0dXJuIFN0YXRlIGFzIE1hcC5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRlY29kZWRTdGF0ZVxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVTdGF0ZVZlY3RvciA9IGRlY29kZWRTdGF0ZSA9PiByZWFkU3RhdGVWZWN0b3IobmV3IERTRGVjb2RlclYxKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoZGVjb2RlZFN0YXRlKSkpXG5cbi8qKlxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gc3ZcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVTdGF0ZVZlY3RvciA9IChlbmNvZGVyLCBzdikgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc3Yuc2l6ZSlcbiAgYXJyYXkuZnJvbShzdi5lbnRyaWVzKCkpLnNvcnQoKGEsIGIpID0+IGJbMF0gLSBhWzBdKS5mb3JFYWNoKChbY2xpZW50LCBjbG9ja10pID0+IHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY2xpZW50KSAvLyBAdG9kbyB1c2UgYSBzcGVjaWFsIGNsaWVudCBkZWNvZGVyIHRoYXQgaXMgYmFzZWQgb24gbWFwcGluZ1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbG9jaylcbiAgfSlcbiAgcmV0dXJuIGVuY29kZXJcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlRG9jdW1lbnRTdGF0ZVZlY3RvciA9IChlbmNvZGVyLCBkb2MpID0+IHdyaXRlU3RhdGVWZWN0b3IoZW5jb2RlciwgZ2V0U3RhdGVWZWN0b3IoZG9jLnN0b3JlKSlcblxuLyoqXG4gKiBFbmNvZGUgU3RhdGUgYXMgVWludDhBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0RvY3xNYXA8bnVtYmVyLG51bWJlcj59IGRvY1xuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBbZW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVTdGF0ZVZlY3RvclYyID0gKGRvYywgZW5jb2RlciA9IG5ldyBEU0VuY29kZXJWMigpKSA9PiB7XG4gIGlmIChkb2MgaW5zdGFuY2VvZiBNYXApIHtcbiAgICB3cml0ZVN0YXRlVmVjdG9yKGVuY29kZXIsIGRvYylcbiAgfSBlbHNlIHtcbiAgICB3cml0ZURvY3VtZW50U3RhdGVWZWN0b3IoZW5jb2RlciwgZG9jKVxuICB9XG4gIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG59XG5cbi8qKlxuICogRW5jb2RlIFN0YXRlIGFzIFVpbnQ4QXJyYXkuXG4gKlxuICogQHBhcmFtIHtEb2N8TWFwPG51bWJlcixudW1iZXI+fSBkb2NcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVTdGF0ZVZlY3RvciA9IGRvYyA9PiBlbmNvZGVTdGF0ZVZlY3RvclYyKGRvYywgbmV3IERTRW5jb2RlclYxKCkpXG4iLCAiaW1wb3J0ICogYXMgZiBmcm9tICdsaWIwL2Z1bmN0aW9uJ1xuXG4vKipcbiAqIEdlbmVyYWwgZXZlbnQgaGFuZGxlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCwgQVJHMVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKEFSRzAsIEFSRzEpOnZvaWQ+fVxuICAgICAqL1xuICAgIHRoaXMubCA9IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcmV0dXJucyB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRXZlbnRIYW5kbGVyID0gKCkgPT4gbmV3IEV2ZW50SGFuZGxlcigpXG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGlzIGNhbGxlZCB3aGVuXG4gKiB7QGxpbmsgRXZlbnRIYW5kbGVyI2NhbGxFdmVudExpc3RlbmVyc30gaXMgY2FsbGVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBBUkcwLEFSRzFcbiAqIEBwYXJhbSB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59IGV2ZW50SGFuZGxlclxuICogQHBhcmFtIHtmdW5jdGlvbihBUkcwLEFSRzEpOnZvaWR9IGYgVGhlIGV2ZW50IGhhbmRsZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgYWRkRXZlbnRIYW5kbGVyTGlzdGVuZXIgPSAoZXZlbnRIYW5kbGVyLCBmKSA9PlxuICBldmVudEhhbmRsZXIubC5wdXNoKGYpXG5cbi8qKlxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcGFyYW0ge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fSBldmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQVJHMCxBUkcxKTp2b2lkfSBmIFRoZSBldmVudCBoYW5kbGVyIHRoYXQgd2FzIGFkZGVkIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEV2ZW50SGFuZGxlciNhZGRFdmVudExpc3RlbmVyfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZUV2ZW50SGFuZGxlckxpc3RlbmVyID0gKGV2ZW50SGFuZGxlciwgZikgPT4ge1xuICBjb25zdCBsID0gZXZlbnRIYW5kbGVyLmxcbiAgY29uc3QgbGVuID0gbC5sZW5ndGhcbiAgZXZlbnRIYW5kbGVyLmwgPSBsLmZpbHRlcihnID0+IGYgIT09IGcpXG4gIGlmIChsZW4gPT09IGV2ZW50SGFuZGxlci5sLmxlbmd0aCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t5anNdIFRyaWVkIHRvIHJlbW92ZSBldmVudCBoYW5kbGVyIHRoYXQgZG9lc25cXCd0IGV4aXN0LicpXG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBldmVudCBsaXN0ZW5lcnMuXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcGFyYW0ge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fSBldmVudEhhbmRsZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVBbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMgPSBldmVudEhhbmRsZXIgPT4ge1xuICBldmVudEhhbmRsZXIubC5sZW5ndGggPSAwXG59XG5cbi8qKlxuICogQ2FsbCBhbGwgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCB2aWFcbiAqIHtAbGluayBFdmVudEhhbmRsZXIjYWRkRXZlbnRMaXN0ZW5lcn0uXG4gKlxuICogQHRlbXBsYXRlIEFSRzAsQVJHMVxuICogQHBhcmFtIHtFdmVudEhhbmRsZXI8QVJHMCxBUkcxPn0gZXZlbnRIYW5kbGVyXG4gKiBAcGFyYW0ge0FSRzB9IGFyZzBcbiAqIEBwYXJhbSB7QVJHMX0gYXJnMVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMgPSAoZXZlbnRIYW5kbGVyLCBhcmcwLCBhcmcxKSA9PlxuICBmLmNhbGxBbGwoZXZlbnRIYW5kbGVyLmwsIFthcmcwLCBhcmcxXSlcbiIsICJpbXBvcnQgeyBBYnN0cmFjdFR5cGUgfSBmcm9tICcuLi9pbnRlcm5hbHMuanMnIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJ2xpYjAvZW5jb2RpbmcnXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuXG5leHBvcnQgY2xhc3MgSUQge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudCBjbGllbnQgaWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrIHVuaXF1ZSBwZXIgY2xpZW50IGlkLCBjb250aW51b3VzIG51bWJlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2xvY2spIHtcbiAgICAvKipcbiAgICAgKiBDbGllbnQgaWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50XG4gICAgLyoqXG4gICAgICogdW5pcXVlIHBlciBjbGllbnQgaWQsIGNvbnRpbnVvdXMgbnVtYmVyXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsb2NrID0gY2xvY2tcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SUQgfCBudWxsfSBhXG4gKiBAcGFyYW0ge0lEIHwgbnVsbH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBhcmVJRHMgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCAoYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuY2xpZW50ID09PSBiLmNsaWVudCAmJiBhLmNsb2NrID09PSBiLmNsb2NrKVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUlEID0gKGNsaWVudCwgY2xvY2spID0+IG5ldyBJRChjbGllbnQsIGNsb2NrKVxuXG4vKipcbiAqIEBwYXJhbSB7ZW5jb2RpbmcuRW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtJRH0gaWRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUlEID0gKGVuY29kZXIsIGlkKSA9PiB7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCBpZC5jbGllbnQpXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCBpZC5jbG9jaylcbn1cblxuLyoqXG4gKiBSZWFkIElELlxuICogKiBJZiBmaXJzdCB2YXJVaW50IHJlYWQgaXMgMHhGRkZGRkYgYSBSb290SUQgaXMgcmV0dXJuZWQuXG4gKiAqIE90aGVyd2lzZSBhbiBJRCBpcyByZXR1cm5lZFxuICpcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7SUR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVhZElEID0gZGVjb2RlciA9PlxuICBjcmVhdGVJRChkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSwgZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikpXG5cbi8qKlxuICogVGhlIHRvcCB0eXBlcyBhcmUgbWFwcGVkIGZyb20geS5zaGFyZS5nZXQoa2V5bmFtZSkgPT4gdHlwZS5cbiAqIGB0eXBlYCBkb2VzIG5vdCBzdG9yZSBhbnkgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGBrZXluYW1lYC5cbiAqIFRoaXMgZnVuY3Rpb24gZmluZHMgdGhlIGNvcnJlY3QgYGtleW5hbWVgIGZvciBgdHlwZWAgYW5kIHRocm93cyBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRSb290VHlwZUtleSA9IHR5cGUgPT4ge1xuICAvLyBAdHMtaWdub3JlIF95IG11c3QgYmUgZGVmaW5lZCwgb3RoZXJ3aXNlIHVuZXhwZWN0ZWQgY2FzZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0eXBlLmRvYy5zaGFyZS5lbnRyaWVzKCkpIHtcbiAgICBpZiAodmFsdWUgPT09IHR5cGUpIHtcbiAgICAgIHJldHVybiBrZXlcbiAgICB9XG4gIH1cbiAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxufVxuIiwgImltcG9ydCB7IEFic3RyYWN0VHlwZSwgSXRlbSB9IGZyb20gJy4uL2ludGVybmFscy5qcycgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4vKipcbiAqIENoZWNrIGlmIGBwYXJlbnRgIGlzIGEgcGFyZW50IG9mIGBjaGlsZGAuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW18bnVsbH0gY2hpbGRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFdoZXRoZXIgYHBhcmVudGAgaXMgYSBwYXJlbnQgb2YgYGNoaWxkYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpc1BhcmVudE9mID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgaWYgKGNoaWxkLnBhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBjaGlsZCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChjaGlsZC5wYXJlbnQpLl9pdGVtXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG4iLCAiaW1wb3J0IHtcbiAgQWJzdHJhY3RUeXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG4vKipcbiAqIENvbnZlbmllbnQgaGVscGVyIHRvIGxvZyB0eXBlIGluZm9ybWF0aW9uLlxuICpcbiAqIERvIG5vdCB1c2UgaW4gcHJvZHVjdGl2ZSBzeXN0ZW1zIGFzIHRoZSBvdXRwdXQgY2FuIGJlIGltbWVuc2UhXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICovXG5leHBvcnQgY29uc3QgbG9nVHlwZSA9IHR5cGUgPT4ge1xuICBjb25zdCByZXMgPSBbXVxuICBsZXQgbiA9IHR5cGUuX3N0YXJ0XG4gIHdoaWxlIChuKSB7XG4gICAgcmVzLnB1c2gobilcbiAgICBuID0gbi5yaWdodFxuICB9XG4gIGNvbnNvbGUubG9nKCdDaGlsZHJlbjogJywgcmVzKVxuICBjb25zb2xlLmxvZygnQ2hpbGRyZW4gY29udGVudDogJywgcmVzLmZpbHRlcihtID0+ICFtLmRlbGV0ZWQpLm1hcChtID0+IG0uY29udGVudCkpXG59XG4iLCAiaW1wb3J0IHtcbiAgWUFycmF5LFxuICBZTWFwLFxuICByZWFkRGVsZXRlU2V0LFxuICB3cml0ZURlbGV0ZVNldCxcbiAgY3JlYXRlRGVsZXRlU2V0LFxuICBEU0VuY29kZXJWMSwgRFNEZWNvZGVyVjEsIElELCBEZWxldGVTZXQsIFlBcnJheUV2ZW50LCBUcmFuc2FjdGlvbiwgRG9jIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBkZWNvZGluZyBmcm9tICdsaWIwL2RlY29kaW5nJ1xuXG5pbXBvcnQgeyBtZXJnZURlbGV0ZVNldHMsIGlzRGVsZXRlZCB9IGZyb20gJy4vRGVsZXRlU2V0LmpzJ1xuXG5leHBvcnQgY2xhc3MgUGVybWFuZW50VXNlckRhdGEge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKiBAcGFyYW0ge1lNYXA8YW55Pn0gW3N0b3JlVHlwZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb2MsIHN0b3JlVHlwZSA9IGRvYy5nZXRNYXAoJ3VzZXJzJykpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxEZWxldGVTZXQ+fVxuICAgICAqL1xuICAgIGNvbnN0IGRzcyA9IG5ldyBNYXAoKVxuICAgIHRoaXMueXVzZXJzID0gc3RvcmVUeXBlXG4gICAgdGhpcy5kb2MgPSBkb2NcbiAgICAvKipcbiAgICAgKiBNYXBzIGZyb20gY2xpZW50aWQgdG8gdXNlckRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TWFwPG51bWJlcixzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuZHNzID0gZHNzXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtZTWFwPGFueT59IHVzZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlckRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgY29uc3QgaW5pdFVzZXIgPSAodXNlciwgdXNlckRlc2NyaXB0aW9uKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtZQXJyYXk8VWludDhBcnJheT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRzID0gdXNlci5nZXQoJ2RzJylcbiAgICAgIGNvbnN0IGlkcyA9IHVzZXIuZ2V0KCdpZHMnKVxuICAgICAgY29uc3QgYWRkQ2xpZW50SWQgPSAvKiogQHBhcmFtIHtudW1iZXJ9IGNsaWVudGlkICovIGNsaWVudGlkID0+IHRoaXMuY2xpZW50cy5zZXQoY2xpZW50aWQsIHVzZXJEZXNjcmlwdGlvbilcbiAgICAgIGRzLm9ic2VydmUoLyoqIEBwYXJhbSB7WUFycmF5RXZlbnQ8YW55Pn0gZXZlbnQgKi8gZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5jaGFuZ2VzLmFkZGVkLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgaXRlbS5jb250ZW50LmdldENvbnRlbnQoKS5mb3JFYWNoKGVuY29kZWREcyA9PiB7XG4gICAgICAgICAgICBpZiAoZW5jb2RlZERzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICB0aGlzLmRzcy5zZXQodXNlckRlc2NyaXB0aW9uLCBtZXJnZURlbGV0ZVNldHMoW3RoaXMuZHNzLmdldCh1c2VyRGVzY3JpcHRpb24pIHx8IGNyZWF0ZURlbGV0ZVNldCgpLCByZWFkRGVsZXRlU2V0KG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGVuY29kZWREcykpKV0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgdGhpcy5kc3Muc2V0KHVzZXJEZXNjcmlwdGlvbiwgbWVyZ2VEZWxldGVTZXRzKGRzLm1hcChlbmNvZGVkRHMgPT4gcmVhZERlbGV0ZVNldChuZXcgRFNEZWNvZGVyVjEoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihlbmNvZGVkRHMpKSkpKSlcbiAgICAgIGlkcy5vYnNlcnZlKC8qKiBAcGFyYW0ge1lBcnJheUV2ZW50PGFueT59IGV2ZW50ICovIGV2ZW50ID0+XG4gICAgICAgIGV2ZW50LmNoYW5nZXMuYWRkZWQuZm9yRWFjaChpdGVtID0+IGl0ZW0uY29udGVudC5nZXRDb250ZW50KCkuZm9yRWFjaChhZGRDbGllbnRJZCkpXG4gICAgICApXG4gICAgICBpZHMuZm9yRWFjaChhZGRDbGllbnRJZClcbiAgICB9XG4gICAgLy8gb2JzZXJ2ZSB1c2Vyc1xuICAgIHN0b3JlVHlwZS5vYnNlcnZlKGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LmtleXNDaGFuZ2VkLmZvckVhY2godXNlckRlc2NyaXB0aW9uID0+XG4gICAgICAgIGluaXRVc2VyKHN0b3JlVHlwZS5nZXQodXNlckRlc2NyaXB0aW9uKSwgdXNlckRlc2NyaXB0aW9uKVxuICAgICAgKVxuICAgIH0pXG4gICAgLy8gYWRkIGludGlhbCBkYXRhXG4gICAgc3RvcmVUeXBlLmZvckVhY2goaW5pdFVzZXIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50aWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJEZXNjcmlwdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFRyYW5zYWN0aW9uLCBEZWxldGVTZXQpOmJvb2xlYW59IFtjb25mLmZpbHRlcl1cbiAgICovXG4gIHNldFVzZXJNYXBwaW5nIChkb2MsIGNsaWVudGlkLCB1c2VyRGVzY3JpcHRpb24sIHsgZmlsdGVyID0gKCkgPT4gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCB1c2VycyA9IHRoaXMueXVzZXJzXG4gICAgbGV0IHVzZXIgPSB1c2Vycy5nZXQodXNlckRlc2NyaXB0aW9uKVxuICAgIGlmICghdXNlcikge1xuICAgICAgdXNlciA9IG5ldyBZTWFwKClcbiAgICAgIHVzZXIuc2V0KCdpZHMnLCBuZXcgWUFycmF5KCkpXG4gICAgICB1c2VyLnNldCgnZHMnLCBuZXcgWUFycmF5KCkpXG4gICAgICB1c2Vycy5zZXQodXNlckRlc2NyaXB0aW9uLCB1c2VyKVxuICAgIH1cbiAgICB1c2VyLmdldCgnaWRzJykucHVzaChbY2xpZW50aWRdKVxuICAgIHVzZXJzLm9ic2VydmUoX2V2ZW50ID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyT3ZlcndyaXRlID0gdXNlcnMuZ2V0KHVzZXJEZXNjcmlwdGlvbilcbiAgICAgICAgaWYgKHVzZXJPdmVyd3JpdGUgIT09IHVzZXIpIHtcbiAgICAgICAgICAvLyB1c2VyIHdhcyBvdmVyd3JpdHRlbiwgcG9ydCBhbGwgZGF0YSBvdmVyIHRvIHRoZSBuZXh0IHVzZXIgb2JqZWN0XG4gICAgICAgICAgLy8gQHRvZG8gRXhwZXJpbWVudCB3aXRoIFkuU2V0cyBoZXJlXG4gICAgICAgICAgdXNlciA9IHVzZXJPdmVyd3JpdGVcbiAgICAgICAgICAvLyBAdG9kbyBpdGVyYXRlIG92ZXIgb2xkIHR5cGVcbiAgICAgICAgICB0aGlzLmNsaWVudHMuZm9yRWFjaCgoX3VzZXJEZXNjcmlwdGlvbiwgY2xpZW50aWQpID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyRGVzY3JpcHRpb24gPT09IF91c2VyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgdXNlci5nZXQoJ2lkcycpLnB1c2goW2NsaWVudGlkXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjEoKVxuICAgICAgICAgIGNvbnN0IGRzID0gdGhpcy5kc3MuZ2V0KHVzZXJEZXNjcmlwdGlvbilcbiAgICAgICAgICBpZiAoZHMpIHtcbiAgICAgICAgICAgIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKVxuICAgICAgICAgICAgdXNlci5nZXQoJ2RzJykucHVzaChbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAwKVxuICAgIH0pXG4gICAgZG9jLm9uKCdhZnRlclRyYW5zYWN0aW9uJywgLyoqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uICovIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB5ZHMgPSB1c2VyLmdldCgnZHMnKVxuICAgICAgICBjb25zdCBkcyA9IHRyYW5zYWN0aW9uLmRlbGV0ZVNldFxuICAgICAgICBpZiAodHJhbnNhY3Rpb24ubG9jYWwgJiYgZHMuY2xpZW50cy5zaXplID4gMCAmJiBmaWx0ZXIodHJhbnNhY3Rpb24sIGRzKSkge1xuICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjEoKVxuICAgICAgICAgIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKVxuICAgICAgICAgIHlkcy5wdXNoKFtlbmNvZGVyLnRvVWludDhBcnJheSgpXSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRpZFxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICBnZXRVc2VyQnlDbGllbnRJZCAoY2xpZW50aWQpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRzLmdldChjbGllbnRpZCkgfHwgbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqIEByZXR1cm4ge3N0cmluZyB8IG51bGx9XG4gICAqL1xuICBnZXRVc2VyQnlEZWxldGVkSWQgKGlkKSB7XG4gICAgZm9yIChjb25zdCBbdXNlckRlc2NyaXB0aW9uLCBkc10gb2YgdGhpcy5kc3MuZW50cmllcygpKSB7XG4gICAgICBpZiAoaXNEZWxldGVkKGRzLCBpZCkpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJEZXNjcmlwdGlvblxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgd3JpdGVJRCxcbiAgcmVhZElELFxuICBjb21wYXJlSURzLFxuICBnZXRTdGF0ZSxcbiAgZmluZFJvb3RUeXBlS2V5LFxuICBJdGVtLFxuICBjcmVhdGVJRCxcbiAgQ29udGVudFR5cGUsXG4gIGZvbGxvd1JlZG9uZSxcbiAgSUQsIERvYywgQWJzdHJhY3RUeXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5cbi8qKlxuICogQSByZWxhdGl2ZSBwb3NpdGlvbiBpcyBiYXNlZCBvbiB0aGUgWWpzIG1vZGVsIGFuZCBpcyBub3QgYWZmZWN0ZWQgYnkgZG9jdW1lbnQgY2hhbmdlcy5cbiAqIEUuZy4gSWYgeW91IHBsYWNlIGEgcmVsYXRpdmUgcG9zaXRpb24gYmVmb3JlIGEgY2VydGFpbiBjaGFyYWN0ZXIsIGl0IHdpbGwgYWx3YXlzIHBvaW50IHRvIHRoaXMgY2hhcmFjdGVyLlxuICogSWYgeW91IHBsYWNlIGEgcmVsYXRpdmUgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiBhIHR5cGUsIGl0IHdpbGwgYWx3YXlzIHBvaW50IHRvIHRoZSBlbmQgb2YgdGhlIHR5cGUuXG4gKlxuICogQSBudW1lcmljIHBvc2l0aW9uIGlzIG9mdGVuIHVuc3VpdGVkIGZvciB1c2VyIHNlbGVjdGlvbnMsIGJlY2F1c2UgaXQgZG9lcyBub3QgY2hhbmdlIHdoZW4gY29udGVudCBpcyBpbnNlcnRlZFxuICogYmVmb3JlIG9yIGFmdGVyLlxuICpcbiAqIGBgYEluc2VydCgwLCAneCcpKCdhfGJjJykgPSAneGF8YmMnYGBgIFdoZXJlIHwgaXMgdGhlIHJlbGF0aXZlIHBvc2l0aW9uLlxuICpcbiAqIE9uZSBvZiB0aGUgcHJvcGVydGllcyBtdXN0IGJlIGRlZmluZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgLy8gQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gaXMgYXQgcG9zaXRpb24gMTBcbiAqICAgY29uc3QgcmVsYXRpdmVQb3NpdGlvbiA9IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tSW5kZXgoeVRleHQsIDEwKVxuICogICAvLyBtb2RpZnkgeVRleHRcbiAqICAgeVRleHQuaW5zZXJ0KDAsICdhYmMnKVxuICogICB5VGV4dC5kZWxldGUoMywgMTApXG4gKiAgIC8vIENvbXB1dGUgdGhlIGN1cnNvciBwb3NpdGlvblxuICogICBjb25zdCBhYnNvbHV0ZVBvc2l0aW9uID0gY3JlYXRlQWJzb2x1dGVQb3NpdGlvbkZyb21SZWxhdGl2ZVBvc2l0aW9uKHksIHJlbGF0aXZlUG9zaXRpb24pXG4gKiAgIGFic29sdXRlUG9zaXRpb24udHlwZSA9PT0geVRleHQgLy8gPT4gdHJ1ZVxuICogICBjb25zb2xlLmxvZygnY3Vyc29yIGxvY2F0aW9uIGlzICcgKyBhYnNvbHV0ZVBvc2l0aW9uLmluZGV4KSAvLyA9PiBjdXJzb3IgbG9jYXRpb24gaXMgM1xuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbGF0aXZlUG9zaXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtJRHxudWxsfSB0eXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHRuYW1lXG4gICAqIEBwYXJhbSB7SUR8bnVsbH0gaXRlbVxuICAgKiBAcGFyYW0ge251bWJlcn0gYXNzb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlLCB0bmFtZSwgaXRlbSwgYXNzb2MgPSAwKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lEfG51bGx9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnRuYW1lID0gdG5hbWVcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaXRlbSA9IGl0ZW1cbiAgICAvKipcbiAgICAgKiBBIHJlbGF0aXZlIHBvc2l0aW9uIGlzIGFzc29jaWF0ZWQgdG8gYSBzcGVjaWZpYyBjaGFyYWN0ZXIuIEJ5IGRlZmF1bHRcbiAgICAgKiBhc3NvYyA+PSAwLCB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaXMgYXNzb2NpYXRlZCB0byB0aGUgY2hhcmFjdGVyXG4gICAgICogYWZ0ZXIgdGhlIG1lYW50IHBvc2l0aW9uLlxuICAgICAqIEkuZS4gcG9zaXRpb24gMSBpbiAnYWInIGlzIGFzc29jaWF0ZWQgdG8gY2hhcmFjdGVyICdiJy5cbiAgICAgKlxuICAgICAqIElmIGFzc29jIDwgMCwgdGhlbiB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaXMgYXNzb2NpYXRlZCB0byB0aGUgY2FoYXJhY3RlclxuICAgICAqIGJlZm9yZSB0aGUgbWVhbnQgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuYXNzb2MgPSBhc3NvY1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufSBycG9zXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWxhdGl2ZVBvc2l0aW9uVG9KU09OID0gcnBvcyA9PiB7XG4gIGNvbnN0IGpzb24gPSB7fVxuICBpZiAocnBvcy50eXBlKSB7XG4gICAganNvbi50eXBlID0gcnBvcy50eXBlXG4gIH1cbiAgaWYgKHJwb3MudG5hbWUpIHtcbiAgICBqc29uLnRuYW1lID0gcnBvcy50bmFtZVxuICB9XG4gIGlmIChycG9zLml0ZW0pIHtcbiAgICBqc29uLml0ZW0gPSBycG9zLml0ZW1cbiAgfVxuICBpZiAocnBvcy5hc3NvYyAhPSBudWxsKSB7XG4gICAganNvbi5hc3NvYyA9IHJwb3MuYXNzb2NcbiAgfVxuICByZXR1cm4ganNvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBqc29uXG4gKiBAcmV0dXJuIHtSZWxhdGl2ZVBvc2l0aW9ufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21KU09OID0ganNvbiA9PiBuZXcgUmVsYXRpdmVQb3NpdGlvbihqc29uLnR5cGUgPT0gbnVsbCA/IG51bGwgOiBjcmVhdGVJRChqc29uLnR5cGUuY2xpZW50LCBqc29uLnR5cGUuY2xvY2spLCBqc29uLnRuYW1lIHx8IG51bGwsIGpzb24uaXRlbSA9PSBudWxsID8gbnVsbCA6IGNyZWF0ZUlEKGpzb24uaXRlbS5jbGllbnQsIGpzb24uaXRlbS5jbG9jayksIGpzb24uYXNzb2MgPT0gbnVsbCA/IDAgOiBqc29uLmFzc29jKVxuXG5leHBvcnQgY2xhc3MgQWJzb2x1dGVQb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2Fzc29jXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIGluZGV4LCBhc3NvYyA9IDApIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5pbmRleCA9IGluZGV4XG4gICAgdGhpcy5hc3NvYyA9IGFzc29jXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uID0gKHR5cGUsIGluZGV4LCBhc3NvYyA9IDApID0+IG5ldyBBYnNvbHV0ZVBvc2l0aW9uKHR5cGUsIGluZGV4LCBhc3NvYylcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge0lEfG51bGx9IGl0ZW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uID0gKHR5cGUsIGl0ZW0sIGFzc29jKSA9PiB7XG4gIGxldCB0eXBlaWQgPSBudWxsXG4gIGxldCB0bmFtZSA9IG51bGxcbiAgaWYgKHR5cGUuX2l0ZW0gPT09IG51bGwpIHtcbiAgICB0bmFtZSA9IGZpbmRSb290VHlwZUtleSh0eXBlKVxuICB9IGVsc2Uge1xuICAgIHR5cGVpZCA9IGNyZWF0ZUlEKHR5cGUuX2l0ZW0uaWQuY2xpZW50LCB0eXBlLl9pdGVtLmlkLmNsb2NrKVxuICB9XG4gIHJldHVybiBuZXcgUmVsYXRpdmVQb3NpdGlvbih0eXBlaWQsIHRuYW1lLCBpdGVtLCBhc3NvYylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSByZWxhdGl2ZVBvc2l0aW9uIGJhc2VkIG9uIGEgYWJzb2x1dGUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZSBUaGUgYmFzZSB0eXBlIChlLmcuIFlUZXh0IG9yIFlBcnJheSkuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGFic29sdXRlIHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthc3NvY11cbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbVR5cGVJbmRleCA9ICh0eXBlLCBpbmRleCwgYXNzb2MgPSAwKSA9PiB7XG4gIGxldCB0ID0gdHlwZS5fc3RhcnRcbiAgaWYgKGFzc29jIDwgMCkge1xuICAgIC8vIGFzc29jaWF0ZWQgdG8gdGhlIGxlZnQgY2hhcmFjdGVyIG9yIHRoZSBiZWdpbm5pbmcgb2YgYSB0eXBlLCBpbmNyZW1lbnQgaW5kZXggaWYgcG9zc2libGUuXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCBudWxsLCBhc3NvYylcbiAgICB9XG4gICAgaW5kZXgtLVxuICB9XG4gIHdoaWxlICh0ICE9PSBudWxsKSB7XG4gICAgaWYgKCF0LmRlbGV0ZWQgJiYgdC5jb3VudGFibGUpIHtcbiAgICAgIGlmICh0Lmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICAgIC8vIGNhc2UgMTogZm91bmQgcG9zaXRpb24gc29tZXdoZXJlIGluIHRoZSBsaW5rZWQgbGlzdFxuICAgICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCBjcmVhdGVJRCh0LmlkLmNsaWVudCwgdC5pZC5jbG9jayArIGluZGV4KSwgYXNzb2MpXG4gICAgICB9XG4gICAgICBpbmRleCAtPSB0Lmxlbmd0aFxuICAgIH1cbiAgICBpZiAodC5yaWdodCA9PT0gbnVsbCAmJiBhc3NvYyA8IDApIHtcbiAgICAgIC8vIGxlZnQtYXNzb2NpYXRlZCBwb3NpdGlvbiwgcmV0dXJuIGxhc3QgYXZhaWxhYmxlIGlkXG4gICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCB0Lmxhc3RJZCwgYXNzb2MpXG4gICAgfVxuICAgIHQgPSB0LnJpZ2h0XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24odHlwZSwgbnVsbCwgYXNzb2MpXG59XG5cbi8qKlxuICogQHBhcmFtIHtlbmNvZGluZy5FbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb259IHJwb3NcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlUmVsYXRpdmVQb3NpdGlvbiA9IChlbmNvZGVyLCBycG9zKSA9PiB7XG4gIGNvbnN0IHsgdHlwZSwgdG5hbWUsIGl0ZW0sIGFzc29jIH0gPSBycG9zXG4gIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDApXG4gICAgd3JpdGVJRChlbmNvZGVyLCBpdGVtKVxuICB9IGVsc2UgaWYgKHRuYW1lICE9PSBudWxsKSB7XG4gICAgLy8gY2FzZSAyOiBmb3VuZCBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGFuZCB0eXBlIGlzIHN0b3JlZCBpbiB5LnNoYXJlXG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OChlbmNvZGVyLCAxKVxuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsIHRuYW1lKVxuICB9IGVsc2UgaWYgKHR5cGUgIT09IG51bGwpIHtcbiAgICAvLyBjYXNlIDM6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgYXR0YWNoZWQgdG8gYW4gaXRlbVxuICAgIGVuY29kaW5nLndyaXRlVWludDgoZW5jb2RlciwgMilcbiAgICB3cml0ZUlEKGVuY29kZXIsIHR5cGUpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICB9XG4gIGVuY29kaW5nLndyaXRlVmFySW50KGVuY29kZXIsIGFzc29jKVxuICByZXR1cm4gZW5jb2RlclxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVJlbGF0aXZlUG9zaXRpb24gPSBycG9zID0+IHtcbiAgY29uc3QgZW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICB3cml0ZVJlbGF0aXZlUG9zaXRpb24oZW5jb2RlciwgcnBvcylcbiAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRSZWxhdGl2ZVBvc2l0aW9uID0gZGVjb2RlciA9PiB7XG4gIGxldCB0eXBlID0gbnVsbFxuICBsZXQgdG5hbWUgPSBudWxsXG4gIGxldCBpdGVtSUQgPSBudWxsXG4gIHN3aXRjaCAoZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikpIHtcbiAgICBjYXNlIDA6XG4gICAgICAvLyBjYXNlIDE6IGZvdW5kIHBvc2l0aW9uIHNvbWV3aGVyZSBpbiB0aGUgbGlua2VkIGxpc3RcbiAgICAgIGl0ZW1JRCA9IHJlYWRJRChkZWNvZGVyKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIDE6XG4gICAgICAvLyBjYXNlIDI6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgc3RvcmVkIGluIHkuc2hhcmVcbiAgICAgIHRuYW1lID0gZGVjb2RpbmcucmVhZFZhclN0cmluZyhkZWNvZGVyKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIDI6IHtcbiAgICAgIC8vIGNhc2UgMzogZm91bmQgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdHlwZSBpcyBhdHRhY2hlZCB0byBhbiBpdGVtXG4gICAgICB0eXBlID0gcmVhZElEKGRlY29kZXIpXG4gICAgfVxuICB9XG4gIGNvbnN0IGFzc29jID0gZGVjb2RpbmcuaGFzQ29udGVudChkZWNvZGVyKSA/IGRlY29kaW5nLnJlYWRWYXJJbnQoZGVjb2RlcikgOiAwXG4gIHJldHVybiBuZXcgUmVsYXRpdmVQb3NpdGlvbih0eXBlLCB0bmFtZSwgaXRlbUlELCBhc3NvYylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVSZWxhdGl2ZVBvc2l0aW9uID0gdWludDhBcnJheSA9PiByZWFkUmVsYXRpdmVQb3NpdGlvbihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVpbnQ4QXJyYXkpKVxuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHJldHVybiB7QWJzb2x1dGVQb3NpdGlvbnxudWxsfVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQWJzb2x1dGVQb3NpdGlvbkZyb21SZWxhdGl2ZVBvc2l0aW9uID0gKHJwb3MsIGRvYykgPT4ge1xuICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZVxuICBjb25zdCByaWdodElEID0gcnBvcy5pdGVtXG4gIGNvbnN0IHR5cGVJRCA9IHJwb3MudHlwZVxuICBjb25zdCB0bmFtZSA9IHJwb3MudG5hbWVcbiAgY29uc3QgYXNzb2MgPSBycG9zLmFzc29jXG4gIGxldCB0eXBlID0gbnVsbFxuICBsZXQgaW5kZXggPSAwXG4gIGlmIChyaWdodElEICE9PSBudWxsKSB7XG4gICAgaWYgKGdldFN0YXRlKHN0b3JlLCByaWdodElELmNsaWVudCkgPD0gcmlnaHRJRC5jbG9jaykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgY29uc3QgcmVzID0gZm9sbG93UmVkb25lKHN0b3JlLCByaWdodElEKVxuICAgIGNvbnN0IHJpZ2h0ID0gcmVzLml0ZW1cbiAgICBpZiAoIShyaWdodCBpbnN0YW5jZW9mIEl0ZW0pKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB0eXBlID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0LnBhcmVudClcbiAgICBpZiAodHlwZS5faXRlbSA9PT0gbnVsbCB8fCAhdHlwZS5faXRlbS5kZWxldGVkKSB7XG4gICAgICBpbmRleCA9IChyaWdodC5kZWxldGVkIHx8ICFyaWdodC5jb3VudGFibGUpID8gMCA6IChyZXMuZGlmZiArIChhc3NvYyA+PSAwID8gMCA6IDEpKSAvLyBhZGp1c3QgcG9zaXRpb24gYmFzZWQgb24gbGVmdCBhc3NvY2lhdGlvbiBpZiBuZWNlc3NhcnlcbiAgICAgIGxldCBuID0gcmlnaHQubGVmdFxuICAgICAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgICAgICBpbmRleCArPSBuLmxlbmd0aFxuICAgICAgICB9XG4gICAgICAgIG4gPSBuLmxlZnRcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRuYW1lICE9PSBudWxsKSB7XG4gICAgICB0eXBlID0gZG9jLmdldCh0bmFtZSlcbiAgICB9IGVsc2UgaWYgKHR5cGVJRCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGdldFN0YXRlKHN0b3JlLCB0eXBlSUQuY2xpZW50KSA8PSB0eXBlSUQuY2xvY2spIHtcbiAgICAgICAgLy8gdHlwZSBkb2VzIG5vdCBleGlzdCB5ZXRcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgaXRlbSB9ID0gZm9sbG93UmVkb25lKHN0b3JlLCB0eXBlSUQpXG4gICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEl0ZW0gJiYgaXRlbS5jb250ZW50IGluc3RhbmNlb2YgQ29udGVudFR5cGUpIHtcbiAgICAgICAgdHlwZSA9IGl0ZW0uY29udGVudC50eXBlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdHJ1Y3QgaXMgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICBpZiAoYXNzb2MgPj0gMCkge1xuICAgICAgaW5kZXggPSB0eXBlLl9sZW5ndGhcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uKHR5cGUsIGluZGV4LCBycG9zLmFzc29jKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbnxudWxsfSBhXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb258bnVsbH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBhcmVSZWxhdGl2ZVBvc2l0aW9ucyA9IChhLCBiKSA9PiBhID09PSBiIHx8IChcbiAgYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEudG5hbWUgPT09IGIudG5hbWUgJiYgY29tcGFyZUlEcyhhLml0ZW0sIGIuaXRlbSkgJiYgY29tcGFyZUlEcyhhLnR5cGUsIGIudHlwZSkgJiYgYS5hc3NvYyA9PT0gYi5hc3NvY1xuKVxuIiwgImltcG9ydCB7XG4gIGlzRGVsZXRlZCxcbiAgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlLFxuICBnZXRTdGF0ZVZlY3RvcixcbiAgZ2V0SXRlbUNsZWFuU3RhcnQsXG4gIGl0ZXJhdGVEZWxldGVkU3RydWN0cyxcbiAgd3JpdGVEZWxldGVTZXQsXG4gIHdyaXRlU3RhdGVWZWN0b3IsXG4gIHJlYWREZWxldGVTZXQsXG4gIHJlYWRTdGF0ZVZlY3RvcixcbiAgY3JlYXRlRGVsZXRlU2V0LFxuICBjcmVhdGVJRCxcbiAgZ2V0U3RhdGUsXG4gIGZpbmRJbmRleFNTLFxuICBVcGRhdGVFbmNvZGVyVjIsXG4gIGFwcGx5VXBkYXRlVjIsXG4gIExhenlTdHJ1Y3RSZWFkZXIsXG4gIGVxdWFsRGVsZXRlU2V0cyxcbiAgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVEZWNvZGVyVjIsIERTRW5jb2RlclYxLCBEU0VuY29kZXJWMiwgRFNEZWNvZGVyVjEsIERTRGVjb2RlclYyLCBUcmFuc2FjdGlvbiwgRG9jLCBEZWxldGVTZXQsIEl0ZW0sIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbWVyZ2VEZWxldGVTZXRzXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuaW1wb3J0ICogYXMgbWFwIGZyb20gJ2xpYjAvbWFwJ1xuaW1wb3J0ICogYXMgc2V0IGZyb20gJ2xpYjAvc2V0J1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcbmltcG9ydCAqIGFzIGVuY29kaW5nIGZyb20gJ2xpYjAvZW5jb2RpbmcnXG5cbmV4cG9ydCBjbGFzcyBTbmFwc2hvdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAgICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IHN2IHN0YXRlIG1hcFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRzLCBzdikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtEZWxldGVTZXR9XG4gICAgICovXG4gICAgdGhpcy5kcyA9IGRzXG4gICAgLyoqXG4gICAgICogU3RhdGUgTWFwXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsbnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLnN2ID0gc3ZcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXAxXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwMlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsU25hcHNob3RzID0gKHNuYXAxLCBzbmFwMikgPT4ge1xuICBjb25zdCBkczEgPSBzbmFwMS5kcy5jbGllbnRzXG4gIGNvbnN0IGRzMiA9IHNuYXAyLmRzLmNsaWVudHNcbiAgY29uc3Qgc3YxID0gc25hcDEuc3ZcbiAgY29uc3Qgc3YyID0gc25hcDIuc3ZcbiAgaWYgKHN2MS5zaXplICE9PSBzdjIuc2l6ZSB8fCBkczEuc2l6ZSAhPT0gZHMyLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzdjEuZW50cmllcygpKSB7XG4gICAgaWYgKHN2Mi5nZXQoa2V5KSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IFtjbGllbnQsIGRzaXRlbXMxXSBvZiBkczEuZW50cmllcygpKSB7XG4gICAgY29uc3QgZHNpdGVtczIgPSBkczIuZ2V0KGNsaWVudCkgfHwgW11cbiAgICBpZiAoZHNpdGVtczEubGVuZ3RoICE9PSBkc2l0ZW1zMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRzaXRlbXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkc2l0ZW0xID0gZHNpdGVtczFbaV1cbiAgICAgIGNvbnN0IGRzaXRlbTIgPSBkc2l0ZW1zMltpXVxuICAgICAgaWYgKGRzaXRlbTEuY2xvY2sgIT09IGRzaXRlbTIuY2xvY2sgfHwgZHNpdGVtMS5sZW4gIT09IGRzaXRlbTIubGVuKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IFtlbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVNuYXBzaG90VjIgPSAoc25hcHNob3QsIGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjIoKSkgPT4ge1xuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBzbmFwc2hvdC5kcylcbiAgd3JpdGVTdGF0ZVZlY3RvcihlbmNvZGVyLCBzbmFwc2hvdC5zdilcbiAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVNuYXBzaG90ID0gc25hcHNob3QgPT4gZW5jb2RlU25hcHNob3RWMihzbmFwc2hvdCwgbmV3IERTRW5jb2RlclYxKCkpXG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gW2RlY29kZXJdXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVNuYXBzaG90VjIgPSAoYnVmLCBkZWNvZGVyID0gbmV3IERTRGVjb2RlclYyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKSkpID0+IHtcbiAgcmV0dXJuIG5ldyBTbmFwc2hvdChyZWFkRGVsZXRlU2V0KGRlY29kZXIpLCByZWFkU3RhdGVWZWN0b3IoZGVjb2RlcikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlU25hcHNob3QgPSBidWYgPT4gZGVjb2RlU25hcHNob3RWMihidWYsIG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGJ1ZikpKVxuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IHNtXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNuYXBzaG90ID0gKGRzLCBzbSkgPT4gbmV3IFNuYXBzaG90KGRzLCBzbSlcblxuZXhwb3J0IGNvbnN0IGVtcHR5U25hcHNob3QgPSBjcmVhdGVTbmFwc2hvdChjcmVhdGVEZWxldGVTZXQoKSwgbmV3IE1hcCgpKVxuXG4vKipcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5leHBvcnQgY29uc3Qgc25hcHNob3QgPSBkb2MgPT4gY3JlYXRlU25hcHNob3QoY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlKGRvYy5zdG9yZSksIGdldFN0YXRlVmVjdG9yKGRvYy5zdG9yZSkpXG5cbi8qKlxuICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gKiBAcGFyYW0ge1NuYXBzaG90fHVuZGVmaW5lZH0gc25hcHNob3RcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmlzaWJsZSA9IChpdGVtLCBzbmFwc2hvdCkgPT4gc25hcHNob3QgPT09IHVuZGVmaW5lZFxuICA/ICFpdGVtLmRlbGV0ZWRcbiAgOiBzbmFwc2hvdC5zdi5oYXMoaXRlbS5pZC5jbGllbnQpICYmIChzbmFwc2hvdC5zdi5nZXQoaXRlbS5pZC5jbGllbnQpIHx8IDApID4gaXRlbS5pZC5jbG9jayAmJiAhaXNEZWxldGVkKHNuYXBzaG90LmRzLCBpdGVtLmlkKVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICovXG5leHBvcnQgY29uc3Qgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgc25hcHNob3QpID0+IHtcbiAgY29uc3QgbWV0YSA9IG1hcC5zZXRJZlVuZGVmaW5lZCh0cmFuc2FjdGlvbi5tZXRhLCBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzLCBzZXQuY3JlYXRlKVxuICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLmRvYy5zdG9yZVxuICAvLyBjaGVjayBpZiB3ZSBhbHJlYWR5IHNwbGl0IGZvciB0aGlzIHNuYXBzaG90XG4gIGlmICghbWV0YS5oYXMoc25hcHNob3QpKSB7XG4gICAgc25hcHNob3Quc3YuZm9yRWFjaCgoY2xvY2ssIGNsaWVudCkgPT4ge1xuICAgICAgaWYgKGNsb2NrIDwgZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCkpIHtcbiAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spKVxuICAgICAgfVxuICAgIH0pXG4gICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzbmFwc2hvdC5kcywgX2l0ZW0gPT4ge30pXG4gICAgbWV0YS5hZGQoc25hcHNob3QpXG4gIH1cbn1cblxuLyoqXG4gKiBAZXhhbXBsZVxuICogIGNvbnN0IHlkb2MgPSBuZXcgWS5Eb2MoeyBnYzogZmFsc2UgfSlcbiAqICB5ZG9jLmdldFRleHQoKS5pbnNlcnQoMCwgJ3dvcmxkIScpXG4gKiAgY29uc3Qgc25hcHNob3QgPSBZLnNuYXBzaG90KHlkb2MpXG4gKiAgeWRvYy5nZXRUZXh0KCkuaW5zZXJ0KDAsICdoZWxsbyAnKVxuICogIGNvbnN0IHJlc3RvcmVkID0gWS5jcmVhdGVEb2NGcm9tU25hcHNob3QoeWRvYywgc25hcHNob3QpXG4gKiAgYXNzZXJ0KHJlc3RvcmVkLmdldFRleHQoKS50b1N0cmluZygpID09PSAnd29ybGQhJylcbiAqXG4gKiBAcGFyYW0ge0RvY30gb3JpZ2luRG9jXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHBhcmFtIHtEb2N9IFtuZXdEb2NdIE9wdGlvbmFsbHksIHlvdSBtYXkgZGVmaW5lIHRoZSBZanMgZG9jdW1lbnQgdGhhdCByZWNlaXZlcyB0aGUgZGF0YSBmcm9tIG9yaWdpbkRvY1xuICogQHJldHVybiB7RG9jfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRG9jRnJvbVNuYXBzaG90ID0gKG9yaWdpbkRvYywgc25hcHNob3QsIG5ld0RvYyA9IG5ldyBEb2MoKSkgPT4ge1xuICBpZiAob3JpZ2luRG9jLmdjKSB7XG4gICAgLy8gd2Ugc2hvdWxkIG5vdCB0cnkgdG8gcmVzdG9yZSBhIEdDLWVkIGRvY3VtZW50LCBiZWNhdXNlIHNvbWUgb2YgdGhlIHJlc3RvcmVkIGl0ZW1zIG1pZ2h0IGhhdmUgdGhlaXIgY29udGVudCBkZWxldGVkXG4gICAgdGhyb3cgbmV3IEVycm9yKCdHYXJiYWdlLWNvbGxlY3Rpb24gbXVzdCBiZSBkaXNhYmxlZCBpbiBgb3JpZ2luRG9jYCEnKVxuICB9XG4gIGNvbnN0IHsgc3YsIGRzIH0gPSBzbmFwc2hvdFxuXG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKClcbiAgb3JpZ2luRG9jLnRyYW5zYWN0KHRyYW5zYWN0aW9uID0+IHtcbiAgICBsZXQgc2l6ZSA9IDBcbiAgICBzdi5mb3JFYWNoKGNsb2NrID0+IHtcbiAgICAgIGlmIChjbG9jayA+IDApIHtcbiAgICAgICAgc2l6ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc2l6ZSlcbiAgICAvLyBzcGxpdHRpbmcgdGhlIHN0cnVjdHMgYmVmb3JlIHdyaXRpbmcgdGhlbSB0byB0aGUgZW5jb2RlclxuICAgIGZvciAoY29uc3QgW2NsaWVudCwgY2xvY2tdIG9mIHN2KSB7XG4gICAgICBpZiAoY2xvY2sgPT09IDApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChjbG9jayA8IGdldFN0YXRlKG9yaWdpbkRvYy5zdG9yZSwgY2xpZW50KSkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY2xpZW50LCBjbG9jaykpXG4gICAgICB9XG4gICAgICBjb25zdCBzdHJ1Y3RzID0gb3JpZ2luRG9jLnN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkgfHwgW11cbiAgICAgIGNvbnN0IGxhc3RTdHJ1Y3RJbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrIC0gMSlcbiAgICAgIC8vIHdyaXRlICMgZW5jb2RlZCBzdHJ1Y3RzXG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgbGFzdFN0cnVjdEluZGV4ICsgMSlcbiAgICAgIGVuY29kZXIud3JpdGVDbGllbnQoY2xpZW50KVxuICAgICAgLy8gZmlyc3QgY2xvY2sgd3JpdHRlbiBpcyAwXG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgMClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxhc3RTdHJ1Y3RJbmRleDsgaSsrKSB7XG4gICAgICAgIHN0cnVjdHNbaV0ud3JpdGUoZW5jb2RlciwgMClcbiAgICAgIH1cbiAgICB9XG4gICAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgZHMpXG4gIH0pXG5cbiAgYXBwbHlVcGRhdGVWMihuZXdEb2MsIGVuY29kZXIudG9VaW50OEFycmF5KCksICdzbmFwc2hvdCcpXG4gIHJldHVybiBuZXdEb2Ncbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMiB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjF9IFtZRGVjb2Rlcl1cbiAqL1xuZXhwb3J0IGNvbnN0IHNuYXBzaG90Q29udGFpbnNVcGRhdGVWMiA9IChzbmFwc2hvdCwgdXBkYXRlLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gW11cbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpXG4gIGNvbnN0IGxhenlEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIodXBkYXRlRGVjb2RlciwgZmFsc2UpXG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgc3RydWN0cy5wdXNoKGN1cnIpXG4gICAgaWYgKChzbmFwc2hvdC5zdi5nZXQoY3Vyci5pZC5jbGllbnQpIHx8IDApIDwgY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgY29uc3QgbWVyZ2VkRFMgPSBtZXJnZURlbGV0ZVNldHMoW3NuYXBzaG90LmRzLCByZWFkRGVsZXRlU2V0KHVwZGF0ZURlY29kZXIpXSlcbiAgcmV0dXJuIGVxdWFsRGVsZXRlU2V0cyhzbmFwc2hvdC5kcywgbWVyZ2VkRFMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBzbmFwc2hvdENvbnRhaW5zVXBkYXRlID0gKHNuYXBzaG90LCB1cGRhdGUpID0+IHNuYXBzaG90Q29udGFpbnNVcGRhdGVWMihzbmFwc2hvdCwgdXBkYXRlLCBVcGRhdGVEZWNvZGVyVjEpXG4iLCAiaW1wb3J0IHtcbiAgR0MsXG4gIHNwbGl0SXRlbSxcbiAgVHJhbnNhY3Rpb24sIElELCBJdGVtLCBEU0RlY29kZXJWMiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuaW1wb3J0ICogYXMgbWF0aCBmcm9tICdsaWIwL21hdGgnXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuXG5leHBvcnQgY2xhc3MgU3RydWN0U3RvcmUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsQXJyYXk8R0N8SXRlbT4+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBNYXAoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgeyBtaXNzaW5nOiBNYXA8bnVtYmVyLCBudW1iZXI+LCB1cGRhdGU6IFVpbnQ4QXJyYXkgfX1cbiAgICAgKi9cbiAgICB0aGlzLnBlbmRpbmdTdHJ1Y3RzID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgVWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnBlbmRpbmdEcyA9IG51bGxcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgc3RhdGVzIGFzIGEgTWFwPGNsaWVudCxjbG9jaz4uXG4gKiBOb3RlIHRoYXQgY2xvY2sgcmVmZXJzIHRvIHRoZSBuZXh0IGV4cGVjdGVkIGNsb2NrIGlkLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLG51bWJlcj59XG4gKlxuICogQHB1YmxpY1xuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTdGF0ZVZlY3RvciA9IHN0b3JlID0+IHtcbiAgY29uc3Qgc20gPSBuZXcgTWFwKClcbiAgc3RvcmUuY2xpZW50cy5mb3JFYWNoKChzdHJ1Y3RzLCBjbGllbnQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW3N0cnVjdHMubGVuZ3RoIC0gMV1cbiAgICBzbS5zZXQoY2xpZW50LCBzdHJ1Y3QuaWQuY2xvY2sgKyBzdHJ1Y3QubGVuZ3RoKVxuICB9KVxuICByZXR1cm4gc21cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHJldHVybiB7bnVtYmVyfVxuICpcbiAqIEBwdWJsaWNcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZ2V0U3RhdGUgPSAoc3RvcmUsIGNsaWVudCkgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KVxuICBpZiAoc3RydWN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBjb25zdCBsYXN0U3RydWN0ID0gc3RydWN0c1tzdHJ1Y3RzLmxlbmd0aCAtIDFdXG4gIHJldHVybiBsYXN0U3RydWN0LmlkLmNsb2NrICsgbGFzdFN0cnVjdC5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGludGVncmV0eUNoZWNrID0gc3RvcmUgPT4ge1xuICBzdG9yZS5jbGllbnRzLmZvckVhY2goc3RydWN0cyA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsID0gc3RydWN0c1tpIC0gMV1cbiAgICAgIGNvbnN0IHIgPSBzdHJ1Y3RzW2ldXG4gICAgICBpZiAobC5pZC5jbG9jayArIGwubGVuZ3RoICE9PSByLmlkLmNsb2NrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RydWN0U3RvcmUgZmFpbGVkIGludGVncmV0eSBjaGVjaycpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0dDfEl0ZW19IHN0cnVjdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZFN0cnVjdCA9IChzdG9yZSwgc3RydWN0KSA9PiB7XG4gIGxldCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoc3RydWN0LmlkLmNsaWVudClcbiAgaWYgKHN0cnVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cnVjdHMgPSBbXVxuICAgIHN0b3JlLmNsaWVudHMuc2V0KHN0cnVjdC5pZC5jbGllbnQsIHN0cnVjdHMpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGFzdFN0cnVjdCA9IHN0cnVjdHNbc3RydWN0cy5sZW5ndGggLSAxXVxuICAgIGlmIChsYXN0U3RydWN0LmlkLmNsb2NrICsgbGFzdFN0cnVjdC5sZW5ndGggIT09IHN0cnVjdC5pZC5jbG9jaykge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgfVxuICBzdHJ1Y3RzLnB1c2goc3RydWN0KVxufVxuXG4vKipcbiAqIFBlcmZvcm0gYSBiaW5hcnkgc2VhcmNoIG9uIGEgc29ydGVkIGFycmF5XG4gKiBAcGFyYW0ge0FycmF5PEl0ZW18R0M+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kSW5kZXhTUyA9IChzdHJ1Y3RzLCBjbG9jaykgPT4ge1xuICBsZXQgbGVmdCA9IDBcbiAgbGV0IHJpZ2h0ID0gc3RydWN0cy5sZW5ndGggLSAxXG4gIGxldCBtaWQgPSBzdHJ1Y3RzW3JpZ2h0XVxuICBsZXQgbWlkY2xvY2sgPSBtaWQuaWQuY2xvY2tcbiAgaWYgKG1pZGNsb2NrID09PSBjbG9jaykge1xuICAgIHJldHVybiByaWdodFxuICB9XG4gIC8vIEB0b2RvIGRvZXMgaXQgZXZlbiBtYWtlIHNlbnNlIHRvIHBpdm90IHRoZSBzZWFyY2g/XG4gIC8vIElmIGEgZ29vZCBzcGxpdCBtaXNzZXMsIGl0IG1pZ2h0IGFjdHVhbGx5IGluY3JlYXNlIHRoZSB0aW1lIHRvIGZpbmQgdGhlIGNvcnJlY3QgaXRlbS5cbiAgLy8gQ3VycmVudGx5LCB0aGUgb25seSBhZHZhbnRhZ2UgaXMgdGhhdCBzZWFyY2ggd2l0aCBwaXZvdGluZyBtaWdodCBmaW5kIHRoZSBpdGVtIG9uIHRoZSBmaXJzdCB0cnkuXG4gIGxldCBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGNsb2NrIC8gKG1pZGNsb2NrICsgbWlkLmxlbmd0aCAtIDEpKSAqIHJpZ2h0KSAvLyBwaXZvdGluZyB0aGUgc2VhcmNoXG4gIHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgbWlkID0gc3RydWN0c1ttaWRpbmRleF1cbiAgICBtaWRjbG9jayA9IG1pZC5pZC5jbG9ja1xuICAgIGlmIChtaWRjbG9jayA8PSBjbG9jaykge1xuICAgICAgaWYgKGNsb2NrIDwgbWlkY2xvY2sgKyBtaWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBtaWRpbmRleFxuICAgICAgfVxuICAgICAgbGVmdCA9IG1pZGluZGV4ICsgMVxuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IG1pZGluZGV4IC0gMVxuICAgIH1cbiAgICBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGxlZnQgKyByaWdodCkgLyAyKVxuICB9XG4gIC8vIEFsd2F5cyBjaGVjayBzdGF0ZSBiZWZvcmUgbG9va2luZyBmb3IgYSBzdHJ1Y3QgaW4gU3RydWN0U3RvcmVcbiAgLy8gVGhlcmVmb3JlIHRoZSBjYXNlIG9mIG5vdCBmaW5kaW5nIGEgc3RydWN0IGlzIHVuZXhwZWN0ZWRcbiAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxufVxuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHtHQ3xJdGVtfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmQgPSAoc3RvcmUsIGlkKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59XG4gICAqL1xuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChpZC5jbGllbnQpXG4gIHJldHVybiBzdHJ1Y3RzW2ZpbmRJbmRleFNTKHN0cnVjdHMsIGlkLmNsb2NrKV1cbn1cblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgZ2V0SXRlbSA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24oU3RydWN0U3RvcmUsSUQpOkl0ZW19ICovIChmaW5kKVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5PEl0ZW18R0M+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRJbmRleENsZWFuU3RhcnQgPSAodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spXG4gIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbaW5kZXhdXG4gIGlmIChzdHJ1Y3QuaWQuY2xvY2sgPCBjbG9jayAmJiBzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtKSB7XG4gICAgc3RydWN0cy5zcGxpY2UoaW5kZXggKyAxLCAwLCBzcGxpdEl0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgY2xvY2sgLSBzdHJ1Y3QuaWQuY2xvY2spKVxuICAgIHJldHVybiBpbmRleCArIDFcbiAgfVxuICByZXR1cm4gaW5kZXhcbn1cblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJdGVtQ2xlYW5TdGFydCA9ICh0cmFuc2FjdGlvbiwgaWQpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8SXRlbT59ICovICh0cmFuc2FjdGlvbi5kb2Muc3RvcmUuY2xpZW50cy5nZXQoaWQuY2xpZW50KSlcbiAgcmV0dXJuIHN0cnVjdHNbZmluZEluZGV4Q2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgc3RydWN0cywgaWQuY2xvY2spXVxufVxuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJdGVtQ2xlYW5FbmQgPSAodHJhbnNhY3Rpb24sIHN0b3JlLCBpZCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PEl0ZW0+fVxuICAgKi9cbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoaWQuY2xpZW50KVxuICBjb25zdCBpbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGlkLmNsb2NrKVxuICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4XVxuICBpZiAoaWQuY2xvY2sgIT09IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGggLSAxICYmIHN0cnVjdC5jb25zdHJ1Y3RvciAhPT0gR0MpIHtcbiAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCArIDEsIDAsIHNwbGl0SXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBpZC5jbG9jayAtIHN0cnVjdC5pZC5jbG9jayArIDEpKVxuICB9XG4gIHJldHVybiBzdHJ1Y3Rcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGBpdGVtYCB3aXRoIGBuZXdpdGVtYCBpbiBzdG9yZVxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7R0N8SXRlbX0gc3RydWN0XG4gKiBAcGFyYW0ge0dDfEl0ZW19IG5ld1N0cnVjdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGxhY2VTdHJ1Y3QgPSAoc3RvcmUsIHN0cnVjdCwgbmV3U3RydWN0KSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoc3RydWN0LmlkLmNsaWVudCkpXG4gIHN0cnVjdHNbZmluZEluZGV4U1Moc3RydWN0cywgc3RydWN0LmlkLmNsb2NrKV0gPSBuZXdTdHJ1Y3Rcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYSByYW5nZSBvZiBzdHJ1Y3RzXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXk8SXRlbXxHQz59IHN0cnVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1N0YXJ0IEluY2x1c2l2ZSBzdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHBhcmFtIHtmdW5jdGlvbihHQ3xJdGVtKTp2b2lkfSBmXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVyYXRlU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2tTdGFydCwgbGVuLCBmKSA9PiB7XG4gIGlmIChsZW4gPT09IDApIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBjbG9ja0VuZCA9IGNsb2NrU3RhcnQgKyBsZW5cbiAgbGV0IGluZGV4ID0gZmluZEluZGV4Q2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2tTdGFydClcbiAgbGV0IHN0cnVjdFxuICBkbyB7XG4gICAgc3RydWN0ID0gc3RydWN0c1tpbmRleCsrXVxuICAgIGlmIChjbG9ja0VuZCA8IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGgpIHtcbiAgICAgIGZpbmRJbmRleENsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrRW5kKVxuICAgIH1cbiAgICBmKHN0cnVjdClcbiAgfSB3aGlsZSAoaW5kZXggPCBzdHJ1Y3RzLmxlbmd0aCAmJiBzdHJ1Y3RzW2luZGV4XS5pZC5jbG9jayA8IGNsb2NrRW5kKVxufVxuIiwgImltcG9ydCB7XG4gIGdldFN0YXRlLFxuICB3cml0ZVN0cnVjdHNGcm9tVHJhbnNhY3Rpb24sXG4gIHdyaXRlRGVsZXRlU2V0LFxuICBEZWxldGVTZXQsXG4gIHNvcnRBbmRNZXJnZURlbGV0ZVNldCxcbiAgZ2V0U3RhdGVWZWN0b3IsXG4gIGZpbmRJbmRleFNTLFxuICBjYWxsRXZlbnRIYW5kbGVyTGlzdGVuZXJzLFxuICBJdGVtLFxuICBnZW5lcmF0ZU5ld0NsaWVudElkLFxuICBjcmVhdGVJRCxcbiAgY2xlYW51cFlUZXh0QWZ0ZXJUcmFuc2FjdGlvbixcbiAgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIEdDLCBTdHJ1Y3RTdG9yZSwgQWJzdHJhY3RUeXBlLCBBYnN0cmFjdFN0cnVjdCwgWUV2ZW50LCBEb2MgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIG1hcCBmcm9tICdsaWIwL21hcCdcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnbGliMC9tYXRoJ1xuaW1wb3J0ICogYXMgc2V0IGZyb20gJ2xpYjAvc2V0J1xuaW1wb3J0ICogYXMgbG9nZ2luZyBmcm9tICdsaWIwL2xvZ2dpbmcnXG5pbXBvcnQgeyBjYWxsQWxsIH0gZnJvbSAnbGliMC9mdW5jdGlvbidcblxuLyoqXG4gKiBBIHRyYW5zYWN0aW9uIGlzIGNyZWF0ZWQgZm9yIGV2ZXJ5IGNoYW5nZSBvbiB0aGUgWWpzIG1vZGVsLiBJdCBpcyBwb3NzaWJsZVxuICogdG8gYnVuZGxlIGNoYW5nZXMgb24gdGhlIFlqcyBtb2RlbCBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbiB0b1xuICogbWluaW1pemUgdGhlIG51bWJlciBvbiBtZXNzYWdlcyBzZW50IGFuZCB0aGUgbnVtYmVyIG9mIG9ic2VydmVyIGNhbGxzLlxuICogSWYgcG9zc2libGUgdGhlIHVzZXIgb2YgdGhpcyBsaWJyYXJ5IHNob3VsZCBidW5kbGUgYXMgbWFueSBjaGFuZ2VzIGFzXG4gKiBwb3NzaWJsZS4gSGVyZSBpcyBhbiBleGFtcGxlIHRvIGlsbHVzdHJhdGUgdGhlIGFkdmFudGFnZXMgb2YgYnVuZGxpbmc6XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG1hcCA9IHkuZGVmaW5lKCdtYXAnLCBZTWFwKVxuICogLy8gTG9nIGNvbnRlbnQgd2hlbiBjaGFuZ2UgaXMgdHJpZ2dlcmVkXG4gKiBtYXAub2JzZXJ2ZSgoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdjaGFuZ2UgdHJpZ2dlcmVkJylcbiAqIH0pXG4gKiAvLyBFYWNoIGNoYW5nZSBvbiB0aGUgbWFwIHR5cGUgdHJpZ2dlcnMgYSBsb2cgbWVzc2FnZTpcbiAqIG1hcC5zZXQoJ2EnLCAwKSAvLyA9PiBcImNoYW5nZSB0cmlnZ2VyZWRcIlxuICogbWFwLnNldCgnYicsIDApIC8vID0+IFwiY2hhbmdlIHRyaWdnZXJlZFwiXG4gKiAvLyBXaGVuIHB1dCBpbiBhIHRyYW5zYWN0aW9uLCBpdCB3aWxsIHRyaWdnZXIgdGhlIGxvZyBhZnRlciB0aGUgdHJhbnNhY3Rpb246XG4gKiB5LnRyYW5zYWN0KCgpID0+IHtcbiAqICAgbWFwLnNldCgnYScsIDEpXG4gKiAgIG1hcC5zZXQoJ2InLCAxKVxuICogfSkgLy8gPT4gXCJjaGFuZ2UgdHJpZ2dlcmVkXCJcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30gZG9jXG4gICAqIEBwYXJhbSB7YW55fSBvcmlnaW5cbiAgICogQHBhcmFtIHtib29sZWFufSBsb2NhbFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvYywgb3JpZ2luLCBsb2NhbCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBZanMgaW5zdGFuY2UuXG4gICAgICogQHR5cGUge0RvY31cbiAgICAgKi9cbiAgICB0aGlzLmRvYyA9IGRvY1xuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB0aGUgc2V0IG9mIGRlbGV0ZWQgaXRlbXMgYnkgaWRzXG4gICAgICogQHR5cGUge0RlbGV0ZVNldH1cbiAgICAgKi9cbiAgICB0aGlzLmRlbGV0ZVNldCA9IG5ldyBEZWxldGVTZXQoKVxuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBzdGF0ZSBiZWZvcmUgdGhlIHRyYW5zYWN0aW9uIHN0YXJ0ZWQuXG4gICAgICogQHR5cGUge01hcDxOdW1iZXIsTnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmJlZm9yZVN0YXRlID0gZ2V0U3RhdGVWZWN0b3IoZG9jLnN0b3JlKVxuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBzdGF0ZSBhZnRlciB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICogQHR5cGUge01hcDxOdW1iZXIsTnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmFmdGVyU3RhdGUgPSBuZXcgTWFwKClcbiAgICAvKipcbiAgICAgKiBBbGwgdHlwZXMgdGhhdCB3ZXJlIGRpcmVjdGx5IG1vZGlmaWVkIChwcm9wZXJ0eSBhZGRlZCBvciBjaGlsZFxuICAgICAqIGluc2VydGVkL2RlbGV0ZWQpLiBOZXcgdHlwZXMgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGlzIFNldC5cbiAgICAgKiBNYXBzIGZyb20gdHlwZSB0byBwYXJlbnRTdWJzIChgaXRlbS5wYXJlbnRTdWIgPSBudWxsYCBmb3IgWUFycmF5KVxuICAgICAqIEB0eXBlIHtNYXA8QWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+PixTZXQ8U3RyaW5nfG51bGw+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5nZWQgPSBuZXcgTWFwKClcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIGV2ZW50cyBmb3IgdGhlIHR5cGVzIHRoYXQgb2JzZXJ2ZSBhbHNvIGNoaWxkIGVsZW1lbnRzLlxuICAgICAqIEl0IGlzIG1haW5seSB1c2VkIGJ5IGBvYnNlcnZlRGVlcGAuXG4gICAgICogQHR5cGUge01hcDxBYnN0cmFjdFR5cGU8WUV2ZW50PGFueT4+LEFycmF5PFlFdmVudDxhbnk+Pj59XG4gICAgICovXG4gICAgdGhpcy5jaGFuZ2VkUGFyZW50VHlwZXMgPSBuZXcgTWFwKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8QWJzdHJhY3RTdHJ1Y3Q+fVxuICAgICAqL1xuICAgIHRoaXMuX21lcmdlU3RydWN0cyA9IFtdXG4gICAgLyoqXG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICB0aGlzLm9yaWdpbiA9IG9yaWdpblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBtZXRhIGluZm9ybWF0aW9uIG9uIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIEB0eXBlIHtNYXA8YW55LGFueT59XG4gICAgICovXG4gICAgdGhpcy5tZXRhID0gbmV3IE1hcCgpXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNoYW5nZSBvcmlnaW5hdGVzIGZyb20gdGhpcyBkb2MuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5sb2NhbCA9IGxvY2FsXG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jc0FkZGVkID0gbmV3IFNldCgpXG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jc1JlbW92ZWQgPSBuZXcgU2V0KClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2V0PERvYz59XG4gICAgICovXG4gICAgdGhpcy5zdWJkb2NzTG9hZGVkID0gbmV3IFNldCgpXG4gICAgLyoqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5fbmVlZEZvcm1hdHRpbmdDbGVhbnVwID0gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBkYXRhIHdhcyB3cml0dGVuLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uID0gKGVuY29kZXIsIHRyYW5zYWN0aW9uKSA9PiB7XG4gIGlmICh0cmFuc2FjdGlvbi5kZWxldGVTZXQuY2xpZW50cy5zaXplID09PSAwICYmICFtYXAuYW55KHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUsIChjbG9jaywgY2xpZW50KSA9PiB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSAhPT0gY2xvY2spKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgc29ydEFuZE1lcmdlRGVsZXRlU2V0KHRyYW5zYWN0aW9uLmRlbGV0ZVNldClcbiAgd3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uKGVuY29kZXIsIHRyYW5zYWN0aW9uKVxuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCB0cmFuc2FjdGlvbi5kZWxldGVTZXQpXG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBuZXh0SUQgPSB0cmFuc2FjdGlvbiA9PiB7XG4gIGNvbnN0IHkgPSB0cmFuc2FjdGlvbi5kb2NcbiAgcmV0dXJuIGNyZWF0ZUlEKHkuY2xpZW50SUQsIGdldFN0YXRlKHkuc3RvcmUsIHkuY2xpZW50SUQpKVxufVxuXG4vKipcbiAqIElmIGB0eXBlLnBhcmVudGAgd2FzIGFkZGVkIGluIGN1cnJlbnQgdHJhbnNhY3Rpb24sIGB0eXBlYCB0ZWNobmljYWxseVxuICogZGlkIG5vdCBjaGFuZ2UsIGl0IHdhcyBqdXN0IGFkZGVkIGFuZCB3ZSBzaG91bGQgbm90IGZpcmUgZXZlbnRzIGZvciBgdHlwZWAuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+Pn0gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gcGFyZW50U3ViXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRDaGFuZ2VkVHlwZVRvVHJhbnNhY3Rpb24gPSAodHJhbnNhY3Rpb24sIHR5cGUsIHBhcmVudFN1YikgPT4ge1xuICBjb25zdCBpdGVtID0gdHlwZS5faXRlbVxuICBpZiAoaXRlbSA9PT0gbnVsbCB8fCAoaXRlbS5pZC5jbG9jayA8ICh0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoaXRlbS5pZC5jbGllbnQpIHx8IDApICYmICFpdGVtLmRlbGV0ZWQpKSB7XG4gICAgbWFwLnNldElmVW5kZWZpbmVkKHRyYW5zYWN0aW9uLmNoYW5nZWQsIHR5cGUsIHNldC5jcmVhdGUpLmFkZChwYXJlbnRTdWIpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PEFic3RyYWN0U3RydWN0Pn0gc3RydWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICogQHJldHVybiB7bnVtYmVyfSAjIG9mIG1lcmdlZCBzdHJ1Y3RzXG4gKi9cbmNvbnN0IHRyeVRvTWVyZ2VXaXRoTGVmdHMgPSAoc3RydWN0cywgcG9zKSA9PiB7XG4gIGxldCByaWdodCA9IHN0cnVjdHNbcG9zXVxuICBsZXQgbGVmdCA9IHN0cnVjdHNbcG9zIC0gMV1cbiAgbGV0IGkgPSBwb3NcbiAgZm9yICg7IGkgPiAwOyByaWdodCA9IGxlZnQsIGxlZnQgPSBzdHJ1Y3RzWy0taSAtIDFdKSB7XG4gICAgaWYgKGxlZnQuZGVsZXRlZCA9PT0gcmlnaHQuZGVsZXRlZCAmJiBsZWZ0LmNvbnN0cnVjdG9yID09PSByaWdodC5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKGxlZnQubWVyZ2VXaXRoKHJpZ2h0KSkge1xuICAgICAgICBpZiAocmlnaHQgaW5zdGFuY2VvZiBJdGVtICYmIHJpZ2h0LnBhcmVudFN1YiAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHQucGFyZW50KS5fbWFwLmdldChyaWdodC5wYXJlbnRTdWIpID09PSByaWdodCkge1xuICAgICAgICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodC5wYXJlbnQpLl9tYXAuc2V0KHJpZ2h0LnBhcmVudFN1YiwgLyoqIEB0eXBlIHtJdGVtfSAqLyAobGVmdCkpXG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICB9XG4gICAgYnJlYWtcbiAgfVxuICBjb25zdCBtZXJnZWQgPSBwb3MgLSBpXG4gIGlmIChtZXJnZWQpIHtcbiAgICAvLyByZW1vdmUgYWxsIG1lcmdlZCBzdHJ1Y3RzIGZyb20gdGhlIGFycmF5XG4gICAgc3RydWN0cy5zcGxpY2UocG9zICsgMSAtIG1lcmdlZCwgbWVyZ2VkKVxuICB9XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IGdjRmlsdGVyXG4gKi9cbmNvbnN0IHRyeUdjRGVsZXRlU2V0ID0gKGRzLCBzdG9yZSwgZ2NGaWx0ZXIpID0+IHtcbiAgZm9yIChjb25zdCBbY2xpZW50LCBkZWxldGVJdGVtc10gb2YgZHMuY2xpZW50cy5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpXG4gICAgZm9yIChsZXQgZGkgPSBkZWxldGVJdGVtcy5sZW5ndGggLSAxOyBkaSA+PSAwOyBkaS0tKSB7XG4gICAgICBjb25zdCBkZWxldGVJdGVtID0gZGVsZXRlSXRlbXNbZGldXG4gICAgICBjb25zdCBlbmREZWxldGVJdGVtQ2xvY2sgPSBkZWxldGVJdGVtLmNsb2NrICsgZGVsZXRlSXRlbS5sZW5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzaSA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGRlbGV0ZUl0ZW0uY2xvY2spLCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXTtcbiAgICAgICAgc2kgPCBzdHJ1Y3RzLmxlbmd0aCAmJiBzdHJ1Y3QuaWQuY2xvY2sgPCBlbmREZWxldGVJdGVtQ2xvY2s7XG4gICAgICAgIHN0cnVjdCA9IHN0cnVjdHNbKytzaV1cbiAgICAgICkge1xuICAgICAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXVxuICAgICAgICBpZiAoZGVsZXRlSXRlbS5jbG9jayArIGRlbGV0ZUl0ZW0ubGVuIDw9IHN0cnVjdC5pZC5jbG9jaykge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0gJiYgc3RydWN0LmRlbGV0ZWQgJiYgIXN0cnVjdC5rZWVwICYmIGdjRmlsdGVyKHN0cnVjdCkpIHtcbiAgICAgICAgICBzdHJ1Y3QuZ2Moc3RvcmUsIGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICovXG5jb25zdCB0cnlNZXJnZURlbGV0ZVNldCA9IChkcywgc3RvcmUpID0+IHtcbiAgLy8gdHJ5IHRvIG1lcmdlIGRlbGV0ZWQgLyBnYydkIGl0ZW1zXG4gIC8vIG1lcmdlIGZyb20gcmlnaHQgdG8gbGVmdCBmb3IgYmV0dGVyIGVmZmljaWVjeSBhbmQgc28gd2UgZG9uJ3QgbWlzcyBhbnkgbWVyZ2UgdGFyZ2V0c1xuICBkcy5jbGllbnRzLmZvckVhY2goKGRlbGV0ZUl0ZW1zLCBjbGllbnQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpXG4gICAgZm9yIChsZXQgZGkgPSBkZWxldGVJdGVtcy5sZW5ndGggLSAxOyBkaSA+PSAwOyBkaS0tKSB7XG4gICAgICBjb25zdCBkZWxldGVJdGVtID0gZGVsZXRlSXRlbXNbZGldXG4gICAgICAvLyBzdGFydCB3aXRoIG1lcmdpbmcgdGhlIGl0ZW0gbmV4dCB0byB0aGUgbGFzdCBkZWxldGVkIGl0ZW1cbiAgICAgIGNvbnN0IG1vc3RSaWdodEluZGV4VG9DaGVjayA9IG1hdGgubWluKHN0cnVjdHMubGVuZ3RoIC0gMSwgMSArIGZpbmRJbmRleFNTKHN0cnVjdHMsIGRlbGV0ZUl0ZW0uY2xvY2sgKyBkZWxldGVJdGVtLmxlbiAtIDEpKVxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNpID0gbW9zdFJpZ2h0SW5kZXhUb0NoZWNrLCBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXTtcbiAgICAgICAgc2kgPiAwICYmIHN0cnVjdC5pZC5jbG9jayA+PSBkZWxldGVJdGVtLmNsb2NrO1xuICAgICAgICBzdHJ1Y3QgPSBzdHJ1Y3RzW3NpXVxuICAgICAgKSB7XG4gICAgICAgIHNpIC09IDEgKyB0cnlUb01lcmdlV2l0aExlZnRzKHN0cnVjdHMsIHNpKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IGdjRmlsdGVyXG4gKi9cbmV4cG9ydCBjb25zdCB0cnlHYyA9IChkcywgc3RvcmUsIGdjRmlsdGVyKSA9PiB7XG4gIHRyeUdjRGVsZXRlU2V0KGRzLCBzdG9yZSwgZ2NGaWx0ZXIpXG4gIHRyeU1lcmdlRGVsZXRlU2V0KGRzLCBzdG9yZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uPn0gdHJhbnNhY3Rpb25DbGVhbnVwc1xuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqL1xuY29uc3QgY2xlYW51cFRyYW5zYWN0aW9ucyA9ICh0cmFuc2FjdGlvbkNsZWFudXBzLCBpKSA9PiB7XG4gIGlmIChpIDwgdHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGgpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uQ2xlYW51cHNbaV1cbiAgICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2NcbiAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZVxuICAgIGNvbnN0IGRzID0gdHJhbnNhY3Rpb24uZGVsZXRlU2V0XG4gICAgY29uc3QgbWVyZ2VTdHJ1Y3RzID0gdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0c1xuICAgIHRyeSB7XG4gICAgICBzb3J0QW5kTWVyZ2VEZWxldGVTZXQoZHMpXG4gICAgICB0cmFuc2FjdGlvbi5hZnRlclN0YXRlID0gZ2V0U3RhdGVWZWN0b3IodHJhbnNhY3Rpb24uZG9jLnN0b3JlKVxuICAgICAgZG9jLmVtaXQoJ2JlZm9yZU9ic2VydmVyQ2FsbHMnLCBbdHJhbnNhY3Rpb24sIGRvY10pXG4gICAgICAvKipcbiAgICAgICAqIEFuIGFycmF5IG9mIGV2ZW50IGNhbGxiYWNrcy5cbiAgICAgICAqXG4gICAgICAgKiBFYWNoIGNhbGxiYWNrIGlzIGNhbGxlZCBldmVuIGlmIHRoZSBvdGhlciBvbmVzIHRocm93IGVycm9ycy5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oKTp2b2lkPn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZnMgPSBbXVxuICAgICAgLy8gb2JzZXJ2ZSBldmVudHMgb24gY2hhbmdlZCB0eXBlc1xuICAgICAgdHJhbnNhY3Rpb24uY2hhbmdlZC5mb3JFYWNoKChzdWJzLCBpdGVtdHlwZSkgPT5cbiAgICAgICAgZnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW10eXBlLl9pdGVtID09PSBudWxsIHx8ICFpdGVtdHlwZS5faXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICBpdGVtdHlwZS5fY2FsbE9ic2VydmVyKHRyYW5zYWN0aW9uLCBzdWJzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIGZzLnB1c2goKCkgPT4ge1xuICAgICAgICAvLyBkZWVwIG9ic2VydmUgZXZlbnRzXG4gICAgICAgIHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcy5mb3JFYWNoKChldmVudHMsIHR5cGUpID0+IHtcbiAgICAgICAgICAvLyBXZSBuZWVkIHRvIHRoaW5rIGFib3V0IHRoZSBwb3NzaWJpbGl0eSB0aGF0IHRoZSB1c2VyIHRyYW5zZm9ybXMgdGhlXG4gICAgICAgICAgLy8gWS5Eb2MgaW4gdGhlIGV2ZW50LlxuICAgICAgICAgIGlmICh0eXBlLl9kRUgubC5sZW5ndGggPiAwICYmICh0eXBlLl9pdGVtID09PSBudWxsIHx8ICF0eXBlLl9pdGVtLmRlbGV0ZWQpKSB7XG4gICAgICAgICAgICBldmVudHMgPSBldmVudHNcbiAgICAgICAgICAgICAgLmZpbHRlcihldmVudCA9PlxuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5faXRlbSA9PT0gbnVsbCB8fCAhZXZlbnQudGFyZ2V0Ll9pdGVtLmRlbGV0ZWRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgZXZlbnRzXG4gICAgICAgICAgICAgIC5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gdHlwZVxuICAgICAgICAgICAgICAgIC8vIHBhdGggaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgZXZlbnQuX3BhdGggPSBudWxsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyBzb3J0IGV2ZW50cyBieSBwYXRoIGxlbmd0aCBzbyB0aGF0IHRvcC1sZXZlbCBldmVudHMgYXJlIGZpcmVkIGZpcnN0LlxuICAgICAgICAgICAgZXZlbnRzXG4gICAgICAgICAgICAgIC5zb3J0KChldmVudDEsIGV2ZW50MikgPT4gZXZlbnQxLnBhdGgubGVuZ3RoIC0gZXZlbnQyLnBhdGgubGVuZ3RoKVxuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBjaGVjayBmb3IgZXZlbnRzLmxlbmd0aFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBrbm93IGl0IGhhcyBhdCBsZWFzdCBvbmUgZWxlbWVudFxuICAgICAgICAgICAgY2FsbEV2ZW50SGFuZGxlckxpc3RlbmVycyh0eXBlLl9kRUgsIGV2ZW50cywgdHJhbnNhY3Rpb24pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIGZzLnB1c2goKCkgPT4gZG9jLmVtaXQoJ2FmdGVyVHJhbnNhY3Rpb24nLCBbdHJhbnNhY3Rpb24sIGRvY10pKVxuICAgICAgY2FsbEFsbChmcywgW10pXG4gICAgICBpZiAodHJhbnNhY3Rpb24uX25lZWRGb3JtYXR0aW5nQ2xlYW51cCkge1xuICAgICAgICBjbGVhbnVwWVRleHRBZnRlclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBSZXBsYWNlIGRlbGV0ZWQgaXRlbXMgd2l0aCBJdGVtRGVsZXRlZCAvIEdDLlxuICAgICAgLy8gVGhpcyBpcyB3aGVyZSBjb250ZW50IGlzIGFjdHVhbGx5IHJlbW92ZSBmcm9tIHRoZSBZanMgRG9jLlxuICAgICAgaWYgKGRvYy5nYykge1xuICAgICAgICB0cnlHY0RlbGV0ZVNldChkcywgc3RvcmUsIGRvYy5nY0ZpbHRlcilcbiAgICAgIH1cbiAgICAgIHRyeU1lcmdlRGVsZXRlU2V0KGRzLCBzdG9yZSlcblxuICAgICAgLy8gb24gYWxsIGFmZmVjdGVkIHN0b3JlLmNsaWVudHMgcHJvcHMsIHRyeSB0byBtZXJnZVxuICAgICAgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5mb3JFYWNoKChjbG9jaywgY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGJlZm9yZUNsb2NrID0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgfHwgMFxuICAgICAgICBpZiAoYmVmb3JlQ2xvY2sgIT09IGNsb2NrKSB7XG4gICAgICAgICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChjbGllbnQpKVxuICAgICAgICAgIC8vIHdlIGl0ZXJhdGUgZnJvbSByaWdodCB0byBsZWZ0IHNvIHdlIGNhbiBzYWZlbHkgcmVtb3ZlIGVudHJpZXNcbiAgICAgICAgICBjb25zdCBmaXJzdENoYW5nZVBvcyA9IG1hdGgubWF4KGZpbmRJbmRleFNTKHN0cnVjdHMsIGJlZm9yZUNsb2NrKSwgMSlcbiAgICAgICAgICBmb3IgKGxldCBpID0gc3RydWN0cy5sZW5ndGggLSAxOyBpID49IGZpcnN0Q2hhbmdlUG9zOykge1xuICAgICAgICAgICAgaSAtPSAxICsgdHJ5VG9NZXJnZVdpdGhMZWZ0cyhzdHJ1Y3RzLCBpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC8vIHRyeSB0byBtZXJnZSBtZXJnZVN0cnVjdHNcbiAgICAgIC8vIEB0b2RvOiBpdCBtYWtlcyBtb3JlIHNlbnNlIHRvIHRyYW5zZm9ybSBtZXJnZVN0cnVjdHMgdG8gYSBEUywgc29ydCBpdCwgYW5kIG1lcmdlIGZyb20gcmlnaHQgdG8gbGVmdFxuICAgICAgLy8gICAgICAgIGJ1dCBhdCB0aGUgbW9tZW50IERTIGRvZXMgbm90IGhhbmRsZSBkdXBsaWNhdGVzXG4gICAgICBmb3IgKGxldCBpID0gbWVyZ2VTdHJ1Y3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbWVyZ2VTdHJ1Y3RzW2ldLmlkXG4gICAgICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSlcbiAgICAgICAgY29uc3QgcmVwbGFjZWRTdHJ1Y3RQb3MgPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jaylcbiAgICAgICAgaWYgKHJlcGxhY2VkU3RydWN0UG9zICsgMSA8IHN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRyeVRvTWVyZ2VXaXRoTGVmdHMoc3RydWN0cywgcmVwbGFjZWRTdHJ1Y3RQb3MgKyAxKSA+IDEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlIC8vIG5vIG5lZWQgdG8gcGVyZm9ybSBuZXh0IGNoZWNrLCBib3RoIGFyZSBhbHJlYWR5IG1lcmdlZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZWRTdHJ1Y3RQb3MgPiAwKSB7XG4gICAgICAgICAgdHJ5VG9NZXJnZVdpdGhMZWZ0cyhzdHJ1Y3RzLCByZXBsYWNlZFN0cnVjdFBvcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2FjdGlvbi5sb2NhbCAmJiB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmdldChkb2MuY2xpZW50SUQpICE9PSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoZG9jLmNsaWVudElEKSkge1xuICAgICAgICBsb2dnaW5nLnByaW50KGxvZ2dpbmcuT1JBTkdFLCBsb2dnaW5nLkJPTEQsICdbeWpzXSAnLCBsb2dnaW5nLlVOQk9MRCwgbG9nZ2luZy5SRUQsICdDaGFuZ2VkIHRoZSBjbGllbnQtaWQgYmVjYXVzZSBhbm90aGVyIGNsaWVudCBzZWVtcyB0byBiZSB1c2luZyBpdC4nKVxuICAgICAgICBkb2MuY2xpZW50SUQgPSBnZW5lcmF0ZU5ld0NsaWVudElkKClcbiAgICAgIH1cbiAgICAgIC8vIEB0b2RvIE1lcmdlIGFsbCB0aGUgdHJhbnNhY3Rpb25zIGludG8gb25lIGFuZCBwcm92aWRlIHNlbmQgdGhlIGRhdGEgYXMgYSBzaW5nbGUgdXBkYXRlIG1lc3NhZ2VcbiAgICAgIGRvYy5lbWl0KCdhZnRlclRyYW5zYWN0aW9uQ2xlYW51cCcsIFt0cmFuc2FjdGlvbiwgZG9jXSlcbiAgICAgIGlmIChkb2MuX29ic2VydmVycy5oYXMoJ3VwZGF0ZScpKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYxKClcbiAgICAgICAgY29uc3QgaGFzQ29udGVudCA9IHdyaXRlVXBkYXRlTWVzc2FnZUZyb21UcmFuc2FjdGlvbihlbmNvZGVyLCB0cmFuc2FjdGlvbilcbiAgICAgICAgaWYgKGhhc0NvbnRlbnQpIHtcbiAgICAgICAgICBkb2MuZW1pdCgndXBkYXRlJywgW2VuY29kZXIudG9VaW50OEFycmF5KCksIHRyYW5zYWN0aW9uLm9yaWdpbiwgZG9jLCB0cmFuc2FjdGlvbl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkb2MuX29ic2VydmVycy5oYXMoJ3VwZGF0ZVYyJykpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKVxuICAgICAgICBjb25zdCBoYXNDb250ZW50ID0gd3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uKGVuY29kZXIsIHRyYW5zYWN0aW9uKVxuICAgICAgICBpZiAoaGFzQ29udGVudCkge1xuICAgICAgICAgIGRvYy5lbWl0KCd1cGRhdGVWMicsIFtlbmNvZGVyLnRvVWludDhBcnJheSgpLCB0cmFuc2FjdGlvbi5vcmlnaW4sIGRvYywgdHJhbnNhY3Rpb25dKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB7IHN1YmRvY3NBZGRlZCwgc3ViZG9jc0xvYWRlZCwgc3ViZG9jc1JlbW92ZWQgfSA9IHRyYW5zYWN0aW9uXG4gICAgICBpZiAoc3ViZG9jc0FkZGVkLnNpemUgPiAwIHx8IHN1YmRvY3NSZW1vdmVkLnNpemUgPiAwIHx8IHN1YmRvY3NMb2FkZWQuc2l6ZSA+IDApIHtcbiAgICAgICAgc3ViZG9jc0FkZGVkLmZvckVhY2goc3ViZG9jID0+IHtcbiAgICAgICAgICBzdWJkb2MuY2xpZW50SUQgPSBkb2MuY2xpZW50SURcbiAgICAgICAgICBpZiAoc3ViZG9jLmNvbGxlY3Rpb25pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJkb2MuY29sbGVjdGlvbmlkID0gZG9jLmNvbGxlY3Rpb25pZFxuICAgICAgICAgIH1cbiAgICAgICAgICBkb2Muc3ViZG9jcy5hZGQoc3ViZG9jKVxuICAgICAgICB9KVxuICAgICAgICBzdWJkb2NzUmVtb3ZlZC5mb3JFYWNoKHN1YmRvYyA9PiBkb2Muc3ViZG9jcy5kZWxldGUoc3ViZG9jKSlcbiAgICAgICAgZG9jLmVtaXQoJ3N1YmRvY3MnLCBbeyBsb2FkZWQ6IHN1YmRvY3NMb2FkZWQsIGFkZGVkOiBzdWJkb2NzQWRkZWQsIHJlbW92ZWQ6IHN1YmRvY3NSZW1vdmVkIH0sIGRvYywgdHJhbnNhY3Rpb25dKVxuICAgICAgICBzdWJkb2NzUmVtb3ZlZC5mb3JFYWNoKHN1YmRvYyA9PiBzdWJkb2MuZGVzdHJveSgpKVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGggPD0gaSArIDEpIHtcbiAgICAgICAgZG9jLl90cmFuc2FjdGlvbkNsZWFudXBzID0gW11cbiAgICAgICAgZG9jLmVtaXQoJ2FmdGVyQWxsVHJhbnNhY3Rpb25zJywgW2RvYywgdHJhbnNhY3Rpb25DbGVhbnVwc10pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGVhbnVwVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9uQ2xlYW51cHMsIGkgKyAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgYHkudHJhbnNhY3QoKCk9PnsuLn0pYFxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRyYW5zYWN0aW9uKTpUfSBmXG4gKiBAcGFyYW0ge2FueX0gW29yaWdpbj10cnVlXVxuICogQHJldHVybiB7VH1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zYWN0ID0gKGRvYywgZiwgb3JpZ2luID0gbnVsbCwgbG9jYWwgPSB0cnVlKSA9PiB7XG4gIGNvbnN0IHRyYW5zYWN0aW9uQ2xlYW51cHMgPSBkb2MuX3RyYW5zYWN0aW9uQ2xlYW51cHNcbiAgbGV0IGluaXRpYWxDYWxsID0gZmFsc2VcbiAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqL1xuICBsZXQgcmVzdWx0ID0gbnVsbFxuICBpZiAoZG9jLl90cmFuc2FjdGlvbiA9PT0gbnVsbCkge1xuICAgIGluaXRpYWxDYWxsID0gdHJ1ZVxuICAgIGRvYy5fdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oZG9jLCBvcmlnaW4sIGxvY2FsKVxuICAgIHRyYW5zYWN0aW9uQ2xlYW51cHMucHVzaChkb2MuX3RyYW5zYWN0aW9uKVxuICAgIGlmICh0cmFuc2FjdGlvbkNsZWFudXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZG9jLmVtaXQoJ2JlZm9yZUFsbFRyYW5zYWN0aW9ucycsIFtkb2NdKVxuICAgIH1cbiAgICBkb2MuZW1pdCgnYmVmb3JlVHJhbnNhY3Rpb24nLCBbZG9jLl90cmFuc2FjdGlvbiwgZG9jXSlcbiAgfVxuICB0cnkge1xuICAgIHJlc3VsdCA9IGYoZG9jLl90cmFuc2FjdGlvbilcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoaW5pdGlhbENhbGwpIHtcbiAgICAgIGNvbnN0IGZpbmlzaENsZWFudXAgPSBkb2MuX3RyYW5zYWN0aW9uID09PSB0cmFuc2FjdGlvbkNsZWFudXBzWzBdXG4gICAgICBkb2MuX3RyYW5zYWN0aW9uID0gbnVsbFxuICAgICAgaWYgKGZpbmlzaENsZWFudXApIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHRyYW5zYWN0aW9uIGVuZGVkLCBub3cgcHJvY2VzcyBvYnNlcnZlciBjYWxscy5cbiAgICAgICAgLy8gT2JzZXJ2ZXIgY2FsbCBtYXkgY3JlYXRlIG5ldyB0cmFuc2FjdGlvbnMgZm9yIHdoaWNoIHdlIG5lZWQgdG8gY2FsbCB0aGUgb2JzZXJ2ZXJzIGFuZCBkbyBjbGVhbnVwLlxuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIG5lc3QgdGhlc2UgY2FsbHMsIHNvIHdlIGV4ZWN1dGUgdGhlc2UgY2FsbHMgb25lIGFmdGVyXG4gICAgICAgIC8vIGFub3RoZXIuXG4gICAgICAgIC8vIEFsc28gd2UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbGwgY2xlYW51cHMgYXJlIGNhbGxlZCwgZXZlbiBpZiB0aGVcbiAgICAgICAgLy8gb2JzZXJ2ZXMgdGhyb3cgZXJyb3JzLlxuICAgICAgICAvLyBUaGlzIGZpbGUgaXMgZnVsbCBvZiBoYWNreSB0cnkge30gZmluYWxseSB7fSBibG9ja3MgdG8gZW5zdXJlIHRoYXQgYW5cbiAgICAgICAgLy8gZXZlbnQgY2FuIHRocm93IGVycm9ycyBhbmQgYWxzbyB0aGF0IHRoZSBjbGVhbnVwIGlzIGNhbGxlZC5cbiAgICAgICAgY2xlYW51cFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbkNsZWFudXBzLCAwKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG4iLCAiaW1wb3J0IHtcbiAgbWVyZ2VEZWxldGVTZXRzLFxuICBpdGVyYXRlRGVsZXRlZFN0cnVjdHMsXG4gIGtlZXBJdGVtLFxuICB0cmFuc2FjdCxcbiAgY3JlYXRlSUQsXG4gIHJlZG9JdGVtLFxuICBpc1BhcmVudE9mLFxuICBmb2xsb3dSZWRvbmUsXG4gIGdldEl0ZW1DbGVhblN0YXJ0LFxuICBpc0RlbGV0ZWQsXG4gIGFkZFRvRGVsZXRlU2V0LFxuICBUcmFuc2FjdGlvbiwgRG9jLCBJdGVtLCBHQywgRGVsZXRlU2V0LCBBYnN0cmFjdFR5cGUgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIHRpbWUgZnJvbSAnbGliMC90aW1lJ1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSdcbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnbGliMC9sb2dnaW5nJ1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ2xpYjAvb2JzZXJ2YWJsZSdcblxuZXhwb3J0IGNsYXNzIFN0YWNrSXRlbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RlbGV0ZVNldH0gZGVsZXRpb25zXG4gICAqIEBwYXJhbSB7RGVsZXRlU2V0fSBpbnNlcnRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVsZXRpb25zLCBpbnNlcnRpb25zKSB7XG4gICAgdGhpcy5pbnNlcnRpb25zID0gaW5zZXJ0aW9uc1xuICAgIHRoaXMuZGVsZXRpb25zID0gZGVsZXRpb25zXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgdG8gc2F2ZSBhbmQgcmVzdG9yZSBtZXRhZGF0YSBsaWtlIHNlbGVjdGlvbiByYW5nZVxuICAgICAqL1xuICAgIHRoaXMubWV0YSA9IG5ldyBNYXAoKVxuICB9XG59XG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyXG4gKiBAcGFyYW0ge1VuZG9NYW5hZ2VyfSB1bVxuICogQHBhcmFtIHtTdGFja0l0ZW19IHN0YWNrSXRlbVxuICovXG5jb25zdCBjbGVhclVuZG9NYW5hZ2VyU3RhY2tJdGVtID0gKHRyLCB1bSwgc3RhY2tJdGVtKSA9PiB7XG4gIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0ciwgc3RhY2tJdGVtLmRlbGV0aW9ucywgaXRlbSA9PiB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBJdGVtICYmIHVtLnNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIGl0ZW0pKSkge1xuICAgICAga2VlcEl0ZW0oaXRlbSwgZmFsc2UpXG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VW5kb01hbmFnZXJ9IHVuZG9NYW5hZ2VyXG4gKiBAcGFyYW0ge0FycmF5PFN0YWNrSXRlbT59IHN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcmV0dXJuIHtTdGFja0l0ZW0/fVxuICovXG5jb25zdCBwb3BTdGFja0l0ZW0gPSAodW5kb01hbmFnZXIsIHN0YWNrLCBldmVudFR5cGUpID0+IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgYSBjaGFuZ2UgaGFwcGVuZWRcbiAgICogQHR5cGUge1N0YWNrSXRlbT99XG4gICAqL1xuICBsZXQgcmVzdWx0ID0gbnVsbFxuICAvKipcbiAgICogS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgdHJhbnNhY3Rpb24gc28gd2UgY2FuIGZpcmUgdGhlIGV2ZW50IHdpdGggdGhlIGNoYW5nZWRQYXJlbnRUeXBlc1xuICAgKiBAdHlwZSB7YW55fVxuICAgKi9cbiAgbGV0IF90ciA9IG51bGxcbiAgY29uc3QgZG9jID0gdW5kb01hbmFnZXIuZG9jXG4gIGNvbnN0IHNjb3BlID0gdW5kb01hbmFnZXIuc2NvcGVcbiAgdHJhbnNhY3QoZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDAgJiYgcmVzdWx0ID09PSBudWxsKSB7XG4gICAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZVxuICAgICAgY29uc3Qgc3RhY2tJdGVtID0gLyoqIEB0eXBlIHtTdGFja0l0ZW19ICovIChzdGFjay5wb3AoKSlcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1NldDxJdGVtPn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgaXRlbXNUb1JlZG8gPSBuZXcgU2V0KClcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0FycmF5PEl0ZW0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBpdGVtc1RvRGVsZXRlID0gW11cbiAgICAgIGxldCBwZXJmb3JtZWRDaGFuZ2UgPSBmYWxzZVxuICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdGFja0l0ZW0uaW5zZXJ0aW9ucywgc3RydWN0ID0+IHtcbiAgICAgICAgaWYgKHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0pIHtcbiAgICAgICAgICBpZiAoc3RydWN0LnJlZG9uZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHsgaXRlbSwgZGlmZiB9ID0gZm9sbG93UmVkb25lKHN0b3JlLCBzdHJ1Y3QuaWQpXG4gICAgICAgICAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgICAgICAgaXRlbSA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChpdGVtLmlkLmNsaWVudCwgaXRlbS5pZC5jbG9jayArIGRpZmYpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RydWN0ID0gaXRlbVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN0cnVjdC5kZWxldGVkICYmIHNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0cnVjdCkpKSkge1xuICAgICAgICAgICAgaXRlbXNUb0RlbGV0ZS5wdXNoKHN0cnVjdClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHN0YWNrSXRlbS5kZWxldGlvbnMsIHN0cnVjdCA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtICYmXG4gICAgICAgICAgc2NvcGUuc29tZSh0eXBlID0+IGlzUGFyZW50T2YodHlwZSwgc3RydWN0KSkgJiZcbiAgICAgICAgICAvLyBOZXZlciByZWRvIHN0cnVjdHMgaW4gc3RhY2tJdGVtLmluc2VydGlvbnMgYmVjYXVzZSB0aGV5IHdlcmUgY3JlYXRlZCBhbmQgZGVsZXRlZCBpbiB0aGUgc2FtZSBjYXB0dXJlIGludGVydmFsLlxuICAgICAgICAgICFpc0RlbGV0ZWQoc3RhY2tJdGVtLmluc2VydGlvbnMsIHN0cnVjdC5pZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgaXRlbXNUb1JlZG8uYWRkKHN0cnVjdClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGl0ZW1zVG9SZWRvLmZvckVhY2goc3RydWN0ID0+IHtcbiAgICAgICAgcGVyZm9ybWVkQ2hhbmdlID0gcmVkb0l0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgaXRlbXNUb1JlZG8sIHN0YWNrSXRlbS5pbnNlcnRpb25zLCB1bmRvTWFuYWdlci5pZ25vcmVSZW1vdGVNYXBDaGFuZ2VzLCB1bmRvTWFuYWdlcikgIT09IG51bGwgfHwgcGVyZm9ybWVkQ2hhbmdlXG4gICAgICB9KVxuICAgICAgLy8gV2Ugd2FudCB0byBkZWxldGUgaW4gcmV2ZXJzZSBvcmRlciBzbyB0aGF0IGNoaWxkcmVuIGFyZSBkZWxldGVkIGJlZm9yZVxuICAgICAgLy8gcGFyZW50cywgc28gd2UgaGF2ZSBtb3JlIGluZm9ybWF0aW9uIGF2YWlsYWJsZSB3aGVuIGl0ZW1zIGFyZSBmaWx0ZXJlZC5cbiAgICAgIGZvciAobGV0IGkgPSBpdGVtc1RvRGVsZXRlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1RvRGVsZXRlW2ldXG4gICAgICAgIGlmICh1bmRvTWFuYWdlci5kZWxldGVGaWx0ZXIoaXRlbSkpIHtcbiAgICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgICAgICBwZXJmb3JtZWRDaGFuZ2UgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHBlcmZvcm1lZENoYW5nZSA/IHN0YWNrSXRlbSA6IG51bGxcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24uY2hhbmdlZC5mb3JFYWNoKChzdWJQcm9wcywgdHlwZSkgPT4ge1xuICAgICAgLy8gZGVzdHJveSBzZWFyY2ggbWFya2VyIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHN1YlByb3BzLmhhcyhudWxsKSAmJiB0eXBlLl9zZWFyY2hNYXJrZXIpIHtcbiAgICAgICAgdHlwZS5fc2VhcmNoTWFya2VyLmxlbmd0aCA9IDBcbiAgICAgIH1cbiAgICB9KVxuICAgIF90ciA9IHRyYW5zYWN0aW9uXG4gIH0sIHVuZG9NYW5hZ2VyKVxuICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICBjb25zdCBjaGFuZ2VkUGFyZW50VHlwZXMgPSBfdHIuY2hhbmdlZFBhcmVudFR5cGVzXG4gICAgdW5kb01hbmFnZXIuZW1pdCgnc3RhY2staXRlbS1wb3BwZWQnLCBbeyBzdGFja0l0ZW06IHJlc3VsdCwgdHlwZTogZXZlbnRUeXBlLCBjaGFuZ2VkUGFyZW50VHlwZXMgfSwgdW5kb01hbmFnZXJdKVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBVbmRvTWFuYWdlck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbVW5kb01hbmFnZXJPcHRpb25zLmNhcHR1cmVUaW1lb3V0PTUwMF1cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oVHJhbnNhY3Rpb24pOmJvb2xlYW59IFtVbmRvTWFuYWdlck9wdGlvbnMuY2FwdHVyZVRyYW5zYWN0aW9uXSBEbyBub3QgY2FwdHVyZSBjaGFuZ2VzIG9mIGEgVHJhbnNhY3Rpb24gaWYgcmVzdWx0IGZhbHNlLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBbVW5kb01hbmFnZXJPcHRpb25zLmRlbGV0ZUZpbHRlcj0oKT0+dHJ1ZV0gU29tZXRpbWVzXG4gKiBpdCBpcyBuZWNlc3NhcnkgdG8gZmlsdGVyIHdoYXQgYW4gVW5kby9SZWRvIG9wZXJhdGlvbiBjYW4gZGVsZXRlLiBJZiB0aGlzXG4gKiBmaWx0ZXIgcmV0dXJucyBmYWxzZSwgdGhlIHR5cGUvaXRlbSB3b24ndCBiZSBkZWxldGVkIGV2ZW4gaXQgaXMgaW4gdGhlXG4gKiB1bmRvL3JlZG8gc2NvcGUuXG4gKiBAcHJvcGVydHkge1NldDxhbnk+fSBbVW5kb01hbmFnZXJPcHRpb25zLnRyYWNrZWRPcmlnaW5zPW5ldyBTZXQoW251bGxdKV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2lnbm9yZVJlbW90ZU1hcENoYW5nZXNdIEV4cGVyaW1lbnRhbC4gQnkgZGVmYXVsdCwgdGhlIFVuZG9NYW5hZ2VyIHdpbGwgbmV2ZXIgb3ZlcndyaXRlIHJlbW90ZSBjaGFuZ2VzLiBFbmFibGUgdGhpcyBwcm9wZXJ0eSB0byBlbmFibGUgb3ZlcndyaXRpbmcgcmVtb3RlIGNoYW5nZXMgb24ga2V5LXZhbHVlIGNoYW5nZXMgKFkuTWFwLCBwcm9wZXJ0aWVzIG9uIFkuWG1sLCBldGMuLikuXG4gKiBAcHJvcGVydHkge0RvY30gW2RvY10gVGhlIGRvY3VtZW50IHRoYXQgdGhpcyBVbmRvTWFuYWdlciBvcGVyYXRlcyBvbi4gT25seSBuZWVkZWQgaWYgdHlwZVNjb3BlIGlzIGVtcHR5LlxuICovXG5cbi8qKlxuICogRmlyZXMgJ3N0YWNrLWl0ZW0tYWRkZWQnIGV2ZW50IHdoZW4gYSBzdGFjayBpdGVtIHdhcyBhZGRlZCB0byBlaXRoZXIgdGhlIHVuZG8tIG9yXG4gKiB0aGUgcmVkby1zdGFjay4gWW91IG1heSBzdG9yZSBhZGRpdGlvbmFsIHN0YWNrIGluZm9ybWF0aW9uIHZpYSB0aGVcbiAqIG1ldGFkYXRhIHByb3BlcnR5IG9uIGBldmVudC5zdGFja0l0ZW0ubWV0YWAgKGl0IGlzIGEgYE1hcGAgb2YgbWV0YWRhdGEgcHJvcGVydGllcykuXG4gKiBGaXJlcyAnc3RhY2staXRlbS1wb3BwZWQnIGV2ZW50IHdoZW4gYSBzdGFjayBpdGVtIHdhcyBwb3BwZWQgZnJvbSBlaXRoZXIgdGhlXG4gKiB1bmRvLSBvciB0aGUgcmVkby1zdGFjay4gWW91IG1heSByZXN0b3JlIHRoZSBzYXZlZCBzdGFjayBpbmZvcm1hdGlvbiBmcm9tIGBldmVudC5zdGFja0l0ZW0ubWV0YWAuXG4gKlxuICogQGV4dGVuZHMge09ic2VydmFibGU8J3N0YWNrLWl0ZW0tYWRkZWQnfCdzdGFjay1pdGVtLXBvcHBlZCd8J3N0YWNrLWNsZWFyZWQnfCdzdGFjay1pdGVtLXVwZGF0ZWQnPn1cbiAqL1xuZXhwb3J0IGNsYXNzIFVuZG9NYW5hZ2VyIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fEFycmF5PEFic3RyYWN0VHlwZTxhbnk+Pn0gdHlwZVNjb3BlIEFjY2VwdHMgZWl0aGVyIGEgc2luZ2xlIHR5cGUsIG9yIGFuIGFycmF5IG9mIHR5cGVzXG4gICAqIEBwYXJhbSB7VW5kb01hbmFnZXJPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZVNjb3BlLCB7XG4gICAgY2FwdHVyZVRpbWVvdXQgPSA1MDAsXG4gICAgY2FwdHVyZVRyYW5zYWN0aW9uID0gX3RyID0+IHRydWUsXG4gICAgZGVsZXRlRmlsdGVyID0gKCkgPT4gdHJ1ZSxcbiAgICB0cmFja2VkT3JpZ2lucyA9IG5ldyBTZXQoW251bGxdKSxcbiAgICBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzID0gZmFsc2UsXG4gICAgZG9jID0gLyoqIEB0eXBlIHtEb2N9ICovIChhcnJheS5pc0FycmF5KHR5cGVTY29wZSkgPyB0eXBlU2NvcGVbMF0uZG9jIDogdHlwZVNjb3BlLmRvYylcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBYnN0cmFjdFR5cGU8YW55Pj59XG4gICAgICovXG4gICAgdGhpcy5zY29wZSA9IFtdXG4gICAgdGhpcy5kb2MgPSBkb2NcbiAgICB0aGlzLmFkZFRvU2NvcGUodHlwZVNjb3BlKVxuICAgIHRoaXMuZGVsZXRlRmlsdGVyID0gZGVsZXRlRmlsdGVyXG4gICAgdHJhY2tlZE9yaWdpbnMuYWRkKHRoaXMpXG4gICAgdGhpcy50cmFja2VkT3JpZ2lucyA9IHRyYWNrZWRPcmlnaW5zXG4gICAgdGhpcy5jYXB0dXJlVHJhbnNhY3Rpb24gPSBjYXB0dXJlVHJhbnNhY3Rpb25cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8U3RhY2tJdGVtPn1cbiAgICAgKi9cbiAgICB0aGlzLnVuZG9TdGFjayA9IFtdXG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFN0YWNrSXRlbT59XG4gICAgICovXG4gICAgdGhpcy5yZWRvU3RhY2sgPSBbXVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNsaWVudCBpcyBjdXJyZW50bHkgdW5kb2luZyAoY2FsbGluZyBVbmRvTWFuYWdlci51bmRvKVxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy51bmRvaW5nID0gZmFsc2VcbiAgICB0aGlzLnJlZG9pbmcgPSBmYWxzZVxuICAgIHRoaXMubGFzdENoYW5nZSA9IDBcbiAgICB0aGlzLmlnbm9yZVJlbW90ZU1hcENoYW5nZXMgPSBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzXG4gICAgdGhpcy5jYXB0dXJlVGltZW91dCA9IGNhcHR1cmVUaW1lb3V0XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLmFmdGVyVHJhbnNhY3Rpb25IYW5kbGVyID0gdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgLy8gT25seSB0cmFjayBjZXJ0YWluIHRyYW5zYWN0aW9uc1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5jYXB0dXJlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHx8XG4gICAgICAgICF0aGlzLnNjb3BlLnNvbWUodHlwZSA9PiB0cmFuc2FjdGlvbi5jaGFuZ2VkUGFyZW50VHlwZXMuaGFzKHR5cGUpKSB8fFxuICAgICAgICAoIXRoaXMudHJhY2tlZE9yaWdpbnMuaGFzKHRyYW5zYWN0aW9uLm9yaWdpbikgJiYgKCF0cmFuc2FjdGlvbi5vcmlnaW4gfHwgIXRoaXMudHJhY2tlZE9yaWdpbnMuaGFzKHRyYW5zYWN0aW9uLm9yaWdpbi5jb25zdHJ1Y3RvcikpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgdW5kb2luZyA9IHRoaXMudW5kb2luZ1xuICAgICAgY29uc3QgcmVkb2luZyA9IHRoaXMucmVkb2luZ1xuICAgICAgY29uc3Qgc3RhY2sgPSB1bmRvaW5nID8gdGhpcy5yZWRvU3RhY2sgOiB0aGlzLnVuZG9TdGFja1xuICAgICAgaWYgKHVuZG9pbmcpIHtcbiAgICAgICAgdGhpcy5zdG9wQ2FwdHVyaW5nKCkgLy8gbmV4dCB1bmRvIHNob3VsZCBub3QgYmUgYXBwZW5kZWQgdG8gbGFzdCBzdGFjayBpdGVtXG4gICAgICB9IGVsc2UgaWYgKCFyZWRvaW5nKSB7XG4gICAgICAgIC8vIG5laXRoZXIgdW5kb2luZyBub3IgcmVkb2luZzogZGVsZXRlIHJlZG9TdGFja1xuICAgICAgICB0aGlzLmNsZWFyKGZhbHNlLCB0cnVlKVxuICAgICAgfVxuICAgICAgY29uc3QgaW5zZXJ0aW9ucyA9IG5ldyBEZWxldGVTZXQoKVxuICAgICAgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5mb3JFYWNoKChlbmRDbG9jaywgY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0Q2xvY2sgPSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSB8fCAwXG4gICAgICAgIGNvbnN0IGxlbiA9IGVuZENsb2NrIC0gc3RhcnRDbG9ja1xuICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgIGFkZFRvRGVsZXRlU2V0KGluc2VydGlvbnMsIGNsaWVudCwgc3RhcnRDbG9jaywgbGVuKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY29uc3Qgbm93ID0gdGltZS5nZXRVbml4VGltZSgpXG4gICAgICBsZXQgZGlkQWRkID0gZmFsc2VcbiAgICAgIGlmICh0aGlzLmxhc3RDaGFuZ2UgPiAwICYmIG5vdyAtIHRoaXMubGFzdENoYW5nZSA8IHRoaXMuY2FwdHVyZVRpbWVvdXQgJiYgc3RhY2subGVuZ3RoID4gMCAmJiAhdW5kb2luZyAmJiAhcmVkb2luZykge1xuICAgICAgICAvLyBhcHBlbmQgY2hhbmdlIHRvIGxhc3Qgc3RhY2sgb3BcbiAgICAgICAgY29uc3QgbGFzdE9wID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1cbiAgICAgICAgbGFzdE9wLmRlbGV0aW9ucyA9IG1lcmdlRGVsZXRlU2V0cyhbbGFzdE9wLmRlbGV0aW9ucywgdHJhbnNhY3Rpb24uZGVsZXRlU2V0XSlcbiAgICAgICAgbGFzdE9wLmluc2VydGlvbnMgPSBtZXJnZURlbGV0ZVNldHMoW2xhc3RPcC5pbnNlcnRpb25zLCBpbnNlcnRpb25zXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBzdGFjayBvcFxuICAgICAgICBzdGFjay5wdXNoKG5ldyBTdGFja0l0ZW0odHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpbnNlcnRpb25zKSlcbiAgICAgICAgZGlkQWRkID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKCF1bmRvaW5nICYmICFyZWRvaW5nKSB7XG4gICAgICAgIHRoaXMubGFzdENoYW5nZSA9IG5vd1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgZGVsZXRlZCBzdHJ1Y3RzIGFyZSBub3QgZ2MnZFxuICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbi5kZWxldGVTZXQsIC8qKiBAcGFyYW0ge0l0ZW18R0N9IGl0ZW0gKi8gaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgSXRlbSAmJiB0aGlzLnNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIGl0ZW0pKSkge1xuICAgICAgICAgIGtlZXBJdGVtKGl0ZW0sIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjb25zdCBjaGFuZ2VFdmVudCA9IFt7IHN0YWNrSXRlbTogc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0sIG9yaWdpbjogdHJhbnNhY3Rpb24ub3JpZ2luLCB0eXBlOiB1bmRvaW5nID8gJ3JlZG8nIDogJ3VuZG8nLCBjaGFuZ2VkUGFyZW50VHlwZXM6IHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcyB9LCB0aGlzXVxuICAgICAgaWYgKGRpZEFkZCkge1xuICAgICAgICB0aGlzLmVtaXQoJ3N0YWNrLWl0ZW0tYWRkZWQnLCBjaGFuZ2VFdmVudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1pdCgnc3RhY2staXRlbS11cGRhdGVkJywgY2hhbmdlRXZlbnQpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZG9jLm9uKCdhZnRlclRyYW5zYWN0aW9uJywgdGhpcy5hZnRlclRyYW5zYWN0aW9uSGFuZGxlcilcbiAgICB0aGlzLmRvYy5vbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PEFic3RyYWN0VHlwZTxhbnk+PiB8IEFic3RyYWN0VHlwZTxhbnk+fSB5dHlwZXNcbiAgICovXG4gIGFkZFRvU2NvcGUgKHl0eXBlcykge1xuICAgIHl0eXBlcyA9IGFycmF5LmlzQXJyYXkoeXR5cGVzKSA/IHl0eXBlcyA6IFt5dHlwZXNdXG4gICAgeXR5cGVzLmZvckVhY2goeXR5cGUgPT4ge1xuICAgICAgaWYgKHRoaXMuc2NvcGUuZXZlcnkoeXQgPT4geXQgIT09IHl0eXBlKSkge1xuICAgICAgICBpZiAoeXR5cGUuZG9jICE9PSB0aGlzLmRvYykgbG9nZ2luZy53YXJuKCdbeWpzIzUwOV0gTm90IHNhbWUgWS5Eb2MnKSAvLyB1c2UgTXVsdGlEb2NVbmRvTWFuYWdlciBpbnN0ZWFkLiBhbHNvIHNlZSBodHRwczovL2dpdGh1Yi5jb20veWpzL3lqcy9pc3N1ZXMvNTA5XG4gICAgICAgIHRoaXMuc2NvcGUucHVzaCh5dHlwZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBvcmlnaW5cbiAgICovXG4gIGFkZFRyYWNrZWRPcmlnaW4gKG9yaWdpbikge1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMuYWRkKG9yaWdpbilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gb3JpZ2luXG4gICAqL1xuICByZW1vdmVUcmFja2VkT3JpZ2luIChvcmlnaW4pIHtcbiAgICB0aGlzLnRyYWNrZWRPcmlnaW5zLmRlbGV0ZShvcmlnaW4pXG4gIH1cblxuICBjbGVhciAoY2xlYXJVbmRvU3RhY2sgPSB0cnVlLCBjbGVhclJlZG9TdGFjayA9IHRydWUpIHtcbiAgICBpZiAoKGNsZWFyVW5kb1N0YWNrICYmIHRoaXMuY2FuVW5kbygpKSB8fCAoY2xlYXJSZWRvU3RhY2sgJiYgdGhpcy5jYW5SZWRvKCkpKSB7XG4gICAgICB0aGlzLmRvYy50cmFuc2FjdCh0ciA9PiB7XG4gICAgICAgIGlmIChjbGVhclVuZG9TdGFjaykge1xuICAgICAgICAgIHRoaXMudW5kb1N0YWNrLmZvckVhY2goaXRlbSA9PiBjbGVhclVuZG9NYW5hZ2VyU3RhY2tJdGVtKHRyLCB0aGlzLCBpdGVtKSlcbiAgICAgICAgICB0aGlzLnVuZG9TdGFjayA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFyUmVkb1N0YWNrKSB7XG4gICAgICAgICAgdGhpcy5yZWRvU3RhY2suZm9yRWFjaChpdGVtID0+IGNsZWFyVW5kb01hbmFnZXJTdGFja0l0ZW0odHIsIHRoaXMsIGl0ZW0pKVxuICAgICAgICAgIHRoaXMucmVkb1N0YWNrID0gW11cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ3N0YWNrLWNsZWFyZWQnLCBbeyB1bmRvU3RhY2tDbGVhcmVkOiBjbGVhclVuZG9TdGFjaywgcmVkb1N0YWNrQ2xlYXJlZDogY2xlYXJSZWRvU3RhY2sgfV0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbmRvTWFuYWdlciBtZXJnZXMgVW5kby1TdGFja0l0ZW0gaWYgdGhleSBhcmUgY3JlYXRlZCB3aXRoaW4gdGltZS1nYXBcbiAgICogc21hbGxlciB0aGFuIGBvcHRpb25zLmNhcHR1cmVUaW1lb3V0YC4gQ2FsbCBgdW0uc3RvcENhcHR1cmluZygpYCBzbyB0aGF0IHRoZSBuZXh0XG4gICAqIFN0YWNrSXRlbSB3b24ndCBiZSBtZXJnZWQuXG4gICAqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgICAvLyB3aXRob3V0IHN0b3BDYXB0dXJpbmdcbiAgICogICAgIHl0ZXh0Lmluc2VydCgwLCAnYScpXG4gICAqICAgICB5dGV4dC5pbnNlcnQoMSwgJ2InKVxuICAgKiAgICAgdW0udW5kbygpXG4gICAqICAgICB5dGV4dC50b1N0cmluZygpIC8vID0+ICcnIChub3RlIHRoYXQgJ2FiJyB3YXMgcmVtb3ZlZClcbiAgICogICAgIC8vIHdpdGggc3RvcENhcHR1cmluZ1xuICAgKiAgICAgeXRleHQuaW5zZXJ0KDAsICdhJylcbiAgICogICAgIHVtLnN0b3BDYXB0dXJpbmcoKVxuICAgKiAgICAgeXRleHQuaW5zZXJ0KDAsICdiJylcbiAgICogICAgIHVtLnVuZG8oKVxuICAgKiAgICAgeXRleHQudG9TdHJpbmcoKSAvLyA9PiAnYScgKG5vdGUgdGhhdCBvbmx5ICdiJyB3YXMgcmVtb3ZlZClcbiAgICpcbiAgICovXG4gIHN0b3BDYXB0dXJpbmcgKCkge1xuICAgIHRoaXMubGFzdENoYW5nZSA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmRvIGxhc3QgY2hhbmdlcyBvbiB0eXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdGFja0l0ZW0/fSBSZXR1cm5zIFN0YWNrSXRlbSBpZiBhIGNoYW5nZSB3YXMgYXBwbGllZFxuICAgKi9cbiAgdW5kbyAoKSB7XG4gICAgdGhpcy51bmRvaW5nID0gdHJ1ZVxuICAgIGxldCByZXNcbiAgICB0cnkge1xuICAgICAgcmVzID0gcG9wU3RhY2tJdGVtKHRoaXMsIHRoaXMudW5kb1N0YWNrLCAndW5kbycpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMudW5kb2luZyA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRvIGxhc3QgdW5kbyBvcGVyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge1N0YWNrSXRlbT99IFJldHVybnMgU3RhY2tJdGVtIGlmIGEgY2hhbmdlIHdhcyBhcHBsaWVkXG4gICAqL1xuICByZWRvICgpIHtcbiAgICB0aGlzLnJlZG9pbmcgPSB0cnVlXG4gICAgbGV0IHJlc1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBwb3BTdGFja0l0ZW0odGhpcywgdGhpcy5yZWRvU3RhY2ssICdyZWRvJylcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5yZWRvaW5nID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyoqXG4gICAqIEFyZSB1bmRvIHN0ZXBzIGF2YWlsYWJsZT9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHVuZG8gaXMgcG9zc2libGVcbiAgICovXG4gIGNhblVuZG8gKCkge1xuICAgIHJldHVybiB0aGlzLnVuZG9TdGFjay5sZW5ndGggPiAwXG4gIH1cblxuICAvKipcbiAgICogQXJlIHJlZG8gc3RlcHMgYXZhaWxhYmxlP1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVkbyBpcyBwb3NzaWJsZVxuICAgKi9cbiAgY2FuUmVkbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVkb1N0YWNrLmxlbmd0aCA+IDBcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMuZGVsZXRlKHRoaXMpXG4gICAgdGhpcy5kb2Mub2ZmKCdhZnRlclRyYW5zYWN0aW9uJywgdGhpcy5hZnRlclRyYW5zYWN0aW9uSGFuZGxlcilcbiAgICBzdXBlci5kZXN0cm95KClcbiAgfVxufVxuIiwgImltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICdsaWIwL2JpbmFyeSdcbmltcG9ydCAqIGFzIGRlY29kaW5nIGZyb20gJ2xpYjAvZGVjb2RpbmcnXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnbGliMC9lcnJvcidcbmltcG9ydCAqIGFzIGYgZnJvbSAnbGliMC9mdW5jdGlvbidcbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnbGliMC9sb2dnaW5nJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJ2xpYjAvbWFwJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICdsaWIwL21hdGgnXG5pbXBvcnQgKiBhcyBzdHJpbmcgZnJvbSAnbGliMC9zdHJpbmcnXG5cbmltcG9ydCB7XG4gIENvbnRlbnRBbnksXG4gIENvbnRlbnRCaW5hcnksXG4gIENvbnRlbnREZWxldGVkLFxuICBDb250ZW50RG9jLFxuICBDb250ZW50RW1iZWQsXG4gIENvbnRlbnRGb3JtYXQsXG4gIENvbnRlbnRKU09OLFxuICBDb250ZW50U3RyaW5nLFxuICBDb250ZW50VHlwZSxcbiAgY3JlYXRlSUQsXG4gIGRlY29kZVN0YXRlVmVjdG9yLFxuICBEU0VuY29kZXJWMSxcbiAgRFNFbmNvZGVyVjIsXG4gIEdDLFxuICBJdGVtLFxuICBtZXJnZURlbGV0ZVNldHMsXG4gIHJlYWREZWxldGVTZXQsXG4gIHJlYWRJdGVtQ29udGVudCxcbiAgU2tpcCxcbiAgVXBkYXRlRGVjb2RlclYxLFxuICBVcGRhdGVEZWNvZGVyVjIsXG4gIFVwZGF0ZUVuY29kZXJWMSxcbiAgVXBkYXRlRW5jb2RlclYyLFxuICB3cml0ZURlbGV0ZVNldCxcbiAgWVhtbEVsZW1lbnQsXG4gIFlYbWxIb29rXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICovXG5mdW5jdGlvbiAqIGxhenlTdHJ1Y3RSZWFkZXJHZW5lcmF0b3IgKGRlY29kZXIpIHtcbiAgY29uc3QgbnVtT2ZTdGF0ZVVwZGF0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mU3RhdGVVcGRhdGVzOyBpKyspIHtcbiAgICBjb25zdCBudW1iZXJPZlN0cnVjdHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKVxuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kZXIucmVhZENsaWVudCgpXG4gICAgbGV0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mU3RydWN0czsgaSsrKSB7XG4gICAgICBjb25zdCBpbmZvID0gZGVjb2Rlci5yZWFkSW5mbygpXG4gICAgICAvLyBAdG9kbyB1c2Ugc3dpdGNoIGluc3RlYWQgb2YgaWZzXG4gICAgICBpZiAoaW5mbyA9PT0gMTApIHtcbiAgICAgICAgY29uc3QgbGVuID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2RlcilcbiAgICAgICAgeWllbGQgbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbilcbiAgICAgICAgY2xvY2sgKz0gbGVuXG4gICAgICB9IGVsc2UgaWYgKChiaW5hcnkuQklUUzUgJiBpbmZvKSAhPT0gMCkge1xuICAgICAgICBjb25zdCBjYW50Q29weVBhcmVudEluZm8gPSAoaW5mbyAmIChiaW5hcnkuQklUNyB8IGJpbmFyeS5CSVQ4KSkgPT09IDBcbiAgICAgICAgLy8gSWYgcGFyZW50ID0gbnVsbCBhbmQgbmVpdGhlciBsZWZ0IG5vciByaWdodCBhcmUgZGVmaW5lZCwgdGhlbiB3ZSBrbm93IHRoYXQgYHBhcmVudGAgaXMgY2hpbGQgb2YgYHlgXG4gICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAvLyBJdCBpbmRpY2F0ZXMgaG93IHdlIHN0b3JlL3JldHJpZXZlIHBhcmVudCBmcm9tIGB5LnNoYXJlYFxuICAgICAgICAvLyBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBJdGVtKFxuICAgICAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLFxuICAgICAgICAgIG51bGwsIC8vIGxlZnRcbiAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ4KSA9PT0gYmluYXJ5LkJJVDggPyBkZWNvZGVyLnJlYWRMZWZ0SUQoKSA6IG51bGwsIC8vIG9yaWdpblxuICAgICAgICAgIG51bGwsIC8vIHJpZ2h0XG4gICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUNykgPT09IGJpbmFyeS5CSVQ3ID8gZGVjb2Rlci5yZWFkUmlnaHRJRCgpIDogbnVsbCwgLy8gcmlnaHQgb3JpZ2luXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBGb3JjZSB3cml0aW5nIGEgc3RyaW5nIGhlcmUuXG4gICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvID8gKGRlY29kZXIucmVhZFBhcmVudEluZm8oKSA/IGRlY29kZXIucmVhZFN0cmluZygpIDogZGVjb2Rlci5yZWFkTGVmdElEKCkpIDogbnVsbCwgLy8gcGFyZW50XG4gICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgcmVhZEl0ZW1Db250ZW50KGRlY29kZXIsIGluZm8pIC8vIGl0ZW0gY29udGVudFxuICAgICAgICApXG4gICAgICAgIHlpZWxkIHN0cnVjdFxuICAgICAgICBjbG9jayArPSBzdHJ1Y3QubGVuZ3RoXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKVxuICAgICAgICB5aWVsZCBuZXcgR0MoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbilcbiAgICAgICAgY2xvY2sgKz0gbGVuXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXp5U3RydWN0UmVhZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyU2tpcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyLCBmaWx0ZXJTa2lwcykge1xuICAgIHRoaXMuZ2VuID0gbGF6eVN0cnVjdFJlYWRlckdlbmVyYXRvcihkZWNvZGVyKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgSXRlbSB8IFNraXAgfCBHQ31cbiAgICAgKi9cbiAgICB0aGlzLmN1cnIgPSBudWxsXG4gICAgdGhpcy5kb25lID0gZmFsc2VcbiAgICB0aGlzLmZpbHRlclNraXBzID0gZmlsdGVyU2tpcHNcbiAgICB0aGlzLm5leHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0l0ZW0gfCBHQyB8IFNraXAgfG51bGx9XG4gICAqL1xuICBuZXh0ICgpIHtcbiAgICAvLyBpZ25vcmUgXCJTa2lwXCIgc3RydWN0c1xuICAgIGRvIHtcbiAgICAgIHRoaXMuY3VyciA9IHRoaXMuZ2VuLm5leHQoKS52YWx1ZSB8fCBudWxsXG4gICAgfSB3aGlsZSAodGhpcy5maWx0ZXJTa2lwcyAmJiB0aGlzLmN1cnIgIT09IG51bGwgJiYgdGhpcy5jdXJyLmNvbnN0cnVjdG9yID09PSBTa2lwKVxuICAgIHJldHVybiB0aGlzLmN1cnJcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKlxuICovXG5leHBvcnQgY29uc3QgbG9nVXBkYXRlID0gdXBkYXRlID0+IGxvZ1VwZGF0ZVYyKHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYxKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYxfSBbWURlY29kZXJdXG4gKlxuICovXG5leHBvcnQgY29uc3QgbG9nVXBkYXRlVjIgPSAodXBkYXRlLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gW11cbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpXG4gIGNvbnN0IGxhenlEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIodXBkYXRlRGVjb2RlciwgZmFsc2UpXG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgc3RydWN0cy5wdXNoKGN1cnIpXG4gIH1cbiAgbG9nZ2luZy5wcmludCgnU3RydWN0czogJywgc3RydWN0cylcbiAgY29uc3QgZHMgPSByZWFkRGVsZXRlU2V0KHVwZGF0ZURlY29kZXIpXG4gIGxvZ2dpbmcucHJpbnQoJ0RlbGV0ZVNldDogJywgZHMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVVcGRhdGUgPSAodXBkYXRlKSA9PiBkZWNvZGVVcGRhdGVWMih1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSlcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYyIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMX0gW1lEZWNvZGVyXVxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVVwZGF0ZVYyID0gKHVwZGF0ZSwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IFtdXG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKVxuICBjb25zdCBsYXp5RGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKHVwZGF0ZURlY29kZXIsIGZhbHNlKVxuICBmb3IgKGxldCBjdXJyID0gbGF6eURlY29kZXIuY3VycjsgY3VyciAhPT0gbnVsbDsgY3VyciA9IGxhenlEZWNvZGVyLm5leHQoKSkge1xuICAgIHN0cnVjdHMucHVzaChjdXJyKVxuICB9XG4gIHJldHVybiB7XG4gICAgc3RydWN0cyxcbiAgICBkczogcmVhZERlbGV0ZVNldCh1cGRhdGVEZWNvZGVyKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXp5U3RydWN0V3JpdGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZW5jb2Rlcikge1xuICAgIHRoaXMuY3VyckNsaWVudCA9IDBcbiAgICB0aGlzLnN0YXJ0Q2xvY2sgPSAwXG4gICAgdGhpcy53cml0dGVuID0gMFxuICAgIHRoaXMuZW5jb2RlciA9IGVuY29kZXJcbiAgICAvKipcbiAgICAgKiBXZSB3YW50IHRvIHdyaXRlIG9wZXJhdGlvbnMgbGF6aWx5LCBidXQgYWxzbyB3ZSBuZWVkIHRvIGtub3cgYmVmb3JlaGFuZCBob3cgbWFueSBvcGVyYXRpb25zIHdlIHdhbnQgdG8gd3JpdGUgZm9yIGVhY2ggY2xpZW50LlxuICAgICAqXG4gICAgICogVGhpcyBraW5kIG9mIG1ldGEtaW5mb3JtYXRpb24gKCNjbGllbnRzLCAjc3RydWN0cy1wZXItY2xpZW50LXdyaXR0ZW4pIGlzIHdyaXR0ZW4gdG8gdGhlIHJlc3RFbmNvZGVyLlxuICAgICAqXG4gICAgICogV2UgZnJhZ21lbnQgdGhlIHJlc3RFbmNvZGVyIGFuZCBzdG9yZSBhIHNsaWNlIG9mIGl0IHBlci1jbGllbnQgdW50aWwgd2Uga25vdyBob3cgbWFueSBjbGllbnRzIHRoZXJlIGFyZS5cbiAgICAgKiBXaGVuIHdlIGZsdXNoICh0b1VpbnQ4QXJyYXkpIHdlIHdyaXRlIHRoZSByZXN0RW5jb2RlciB1c2luZyB0aGUgZnJhZ21lbnRzIGFuZCB0aGUgbWV0YS1pbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTx7IHdyaXR0ZW46IG51bWJlciwgcmVzdEVuY29kZXI6IFVpbnQ4QXJyYXkgfT59XG4gICAgICovXG4gICAgdGhpcy5jbGllbnRTdHJ1Y3RzID0gW11cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8VWludDhBcnJheT59IHVwZGF0ZXNcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBtZXJnZVVwZGF0ZXMgPSB1cGRhdGVzID0+IG1lcmdlVXBkYXRlc1YyKHVwZGF0ZXMsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRW5jb2RlclYxKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBEU0VuY29kZXJWMSB8IHR5cGVvZiBEU0VuY29kZXJWMn0gWUVuY29kZXJcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFlEZWNvZGVyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlVjIgPSAodXBkYXRlLCBZRW5jb2RlciA9IERTRW5jb2RlclYyLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFlFbmNvZGVyKClcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpLCBmYWxzZSlcbiAgbGV0IGN1cnIgPSB1cGRhdGVEZWNvZGVyLmN1cnJcbiAgaWYgKGN1cnIgIT09IG51bGwpIHtcbiAgICBsZXQgc2l6ZSA9IDBcbiAgICBsZXQgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50XG4gICAgbGV0IHN0b3BDb3VudGluZyA9IGN1cnIuaWQuY2xvY2sgIT09IDAgLy8gbXVzdCBzdGFydCBhdCAwXG4gICAgbGV0IGN1cnJDbG9jayA9IHN0b3BDb3VudGluZyA/IDAgOiBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGhcbiAgICBmb3IgKDsgY3VyciAhPT0gbnVsbDsgY3VyciA9IHVwZGF0ZURlY29kZXIubmV4dCgpKSB7XG4gICAgICBpZiAoY3VyckNsaWVudCAhPT0gY3Vyci5pZC5jbGllbnQpIHtcbiAgICAgICAgaWYgKGN1cnJDbG9jayAhPT0gMCkge1xuICAgICAgICAgIHNpemUrK1xuICAgICAgICAgIC8vIFdlIGZvdW5kIGEgbmV3IGNsaWVudFxuICAgICAgICAgIC8vIHdyaXRlIHdoYXQgd2UgaGF2ZSB0byB0aGUgZW5jb2RlclxuICAgICAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xpZW50KVxuICAgICAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xvY2spXG4gICAgICAgIH1cbiAgICAgICAgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50XG4gICAgICAgIGN1cnJDbG9jayA9IDBcbiAgICAgICAgc3RvcENvdW50aW5nID0gY3Vyci5pZC5jbG9jayAhPT0gMFxuICAgICAgfVxuICAgICAgLy8gd2UgaWdub3JlIHNraXBzXG4gICAgICBpZiAoY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgICBzdG9wQ291bnRpbmcgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoIXN0b3BDb3VudGluZykge1xuICAgICAgICBjdXJyQ2xvY2sgPSBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGhcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gd3JpdGUgd2hhdCB3ZSBoYXZlXG4gICAgaWYgKGN1cnJDbG9jayAhPT0gMCkge1xuICAgICAgc2l6ZSsrXG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY3VyckNsaWVudClcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xvY2spXG4gICAgfVxuICAgIC8vIHByZXBlbmQgdGhlIHNpemUgb2YgdGhlIHN0YXRlIHZlY3RvclxuICAgIGNvbnN0IGVuYyA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmMsIHNpemUpXG4gICAgZW5jb2Rpbmcud3JpdGVCaW5hcnlFbmNvZGVyKGVuYywgZW5jb2Rlci5yZXN0RW5jb2RlcilcbiAgICBlbmNvZGVyLnJlc3RFbmNvZGVyID0gZW5jXG4gICAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbiAgfSBlbHNlIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgMClcbiAgICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGUgPSB1cGRhdGUgPT4gZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlVjIodXBkYXRlLCBEU0VuY29kZXJWMSwgVXBkYXRlRGVjb2RlclYxKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBZRGVjb2RlclxuICogQHJldHVybiB7eyBmcm9tOiBNYXA8bnVtYmVyLG51bWJlcj4sIHRvOiBNYXA8bnVtYmVyLG51bWJlcj4gfX1cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlVXBkYXRlTWV0YVYyID0gKHVwZGF0ZSwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtNYXA8bnVtYmVyLCBudW1iZXI+fVxuICAgKi9cbiAgY29uc3QgZnJvbSA9IG5ldyBNYXAoKVxuICAvKipcbiAgICogQHR5cGUge01hcDxudW1iZXIsIG51bWJlcj59XG4gICAqL1xuICBjb25zdCB0byA9IG5ldyBNYXAoKVxuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIobmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSksIGZhbHNlKVxuICBsZXQgY3VyciA9IHVwZGF0ZURlY29kZXIuY3VyclxuICBpZiAoY3VyciAhPT0gbnVsbCkge1xuICAgIGxldCBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnRcbiAgICBsZXQgY3VyckNsb2NrID0gY3Vyci5pZC5jbG9ja1xuICAgIC8vIHdyaXRlIHRoZSBiZWdpbm5pbmcgdG8gYGZyb21gXG4gICAgZnJvbS5zZXQoY3VyckNsaWVudCwgY3VyckNsb2NrKVxuICAgIGZvciAoOyBjdXJyICE9PSBudWxsOyBjdXJyID0gdXBkYXRlRGVjb2Rlci5uZXh0KCkpIHtcbiAgICAgIGlmIChjdXJyQ2xpZW50ICE9PSBjdXJyLmlkLmNsaWVudCkge1xuICAgICAgICAvLyBXZSBmb3VuZCBhIG5ldyBjbGllbnRcbiAgICAgICAgLy8gd3JpdGUgdGhlIGVuZCB0byBgdG9gXG4gICAgICAgIHRvLnNldChjdXJyQ2xpZW50LCBjdXJyQ2xvY2spXG4gICAgICAgIC8vIHdyaXRlIHRoZSBiZWdpbm5pbmcgdG8gYGZyb21gXG4gICAgICAgIGZyb20uc2V0KGN1cnIuaWQuY2xpZW50LCBjdXJyLmlkLmNsb2NrKVxuICAgICAgICAvLyB1cGRhdGUgY3VyckNsaWVudFxuICAgICAgICBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnRcbiAgICAgIH1cbiAgICAgIGN1cnJDbG9jayA9IGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aFxuICAgIH1cbiAgICAvLyB3cml0ZSB0aGUgZW5kIHRvIGB0b2BcbiAgICB0by5zZXQoY3VyckNsaWVudCwgY3VyckNsb2NrKVxuICB9XG4gIHJldHVybiB7IGZyb20sIHRvIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHJldHVybiB7eyBmcm9tOiBNYXA8bnVtYmVyLG51bWJlcj4sIHRvOiBNYXA8bnVtYmVyLG51bWJlcj4gfX1cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlVXBkYXRlTWV0YSA9IHVwZGF0ZSA9PiBwYXJzZVVwZGF0ZU1ldGFWMih1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSlcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCB0byBzbGljZSBhbnkga2luZCBvZiBzdHJ1Y3QgYW5kIHJldHJpZXZlIHRoZSByaWdodCBwYXJ0LlxuICogSXQgZG9lcyBub3QgaGFuZGxlIHNpZGUtZWZmZWN0cywgc28gaXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSB0aGUgbGF6eS1lbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7SXRlbSB8IEdDIHwgU2tpcH0gbGVmdFxuICogQHBhcmFtIHtudW1iZXJ9IGRpZmZcbiAqIEByZXR1cm4ge0l0ZW0gfCBHQ31cbiAqL1xuY29uc3Qgc2xpY2VTdHJ1Y3QgPSAobGVmdCwgZGlmZikgPT4ge1xuICBpZiAobGVmdC5jb25zdHJ1Y3RvciA9PT0gR0MpIHtcbiAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnQuaWRcbiAgICByZXR1cm4gbmV3IEdDKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmKSwgbGVmdC5sZW5ndGggLSBkaWZmKVxuICB9IGVsc2UgaWYgKGxlZnQuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnQuaWRcbiAgICByZXR1cm4gbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYpLCBsZWZ0Lmxlbmd0aCAtIGRpZmYpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGVmdEl0ZW0gPSAvKiogQHR5cGUge0l0ZW19ICovIChsZWZ0KVxuICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbGVmdEl0ZW0uaWRcbiAgICByZXR1cm4gbmV3IEl0ZW0oXG4gICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksXG4gICAgICBudWxsLFxuICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYgLSAxKSxcbiAgICAgIG51bGwsXG4gICAgICBsZWZ0SXRlbS5yaWdodE9yaWdpbixcbiAgICAgIGxlZnRJdGVtLnBhcmVudCxcbiAgICAgIGxlZnRJdGVtLnBhcmVudFN1YixcbiAgICAgIGxlZnRJdGVtLmNvbnRlbnQuc3BsaWNlKGRpZmYpXG4gICAgKVxuICB9XG59XG5cbi8qKlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd29ya3Mgc2ltaWxhcmx5IHRvIGByZWFkVXBkYXRlVjJgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VWludDhBcnJheT59IHVwZGF0ZXNcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVFbmNvZGVyVjJ9IFtZRW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBtZXJnZVVwZGF0ZXNWMiA9ICh1cGRhdGVzLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMiwgWUVuY29kZXIgPSBVcGRhdGVFbmNvZGVyVjIpID0+IHtcbiAgaWYgKHVwZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHVwZGF0ZXNbMF1cbiAgfVxuICBjb25zdCB1cGRhdGVEZWNvZGVycyA9IHVwZGF0ZXMubWFwKHVwZGF0ZSA9PiBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKSlcbiAgbGV0IGxhenlTdHJ1Y3REZWNvZGVycyA9IHVwZGF0ZURlY29kZXJzLm1hcChkZWNvZGVyID0+IG5ldyBMYXp5U3RydWN0UmVhZGVyKGRlY29kZXIsIHRydWUpKVxuXG4gIC8qKlxuICAgKiBAdG9kbyB3ZSBkb24ndCBuZWVkIG9mZnNldCBiZWNhdXNlIHdlIGFsd2F5cyBzbGljZSBiZWZvcmVcbiAgICogQHR5cGUge251bGwgfCB7IHN0cnVjdDogSXRlbSB8IEdDIHwgU2tpcCwgb2Zmc2V0OiBudW1iZXIgfX1cbiAgICovXG4gIGxldCBjdXJyV3JpdGUgPSBudWxsXG5cbiAgY29uc3QgdXBkYXRlRW5jb2RlciA9IG5ldyBZRW5jb2RlcigpXG4gIC8vIHdyaXRlIHN0cnVjdHMgbGF6aWx5XG4gIGNvbnN0IGxhenlTdHJ1Y3RFbmNvZGVyID0gbmV3IExhenlTdHJ1Y3RXcml0ZXIodXBkYXRlRW5jb2RlcilcblxuICAvLyBOb3RlOiBXZSBuZWVkIHRvIGVuc3VyZSB0aGF0IGFsbCBsYXp5U3RydWN0RGVjb2RlcnMgYXJlIGZ1bGx5IGNvbnN1bWVkXG4gIC8vIE5vdGU6IFNob3VsZCBtZXJnZSBkb2N1bWVudCB1cGRhdGVzIHdoZW5ldmVyIHBvc3NpYmxlIC0gZXZlbiBmcm9tIGRpZmZlcmVudCB1cGRhdGVzXG4gIC8vIE5vdGU6IFNob3VsZCBoYW5kbGUgdGhhdCBzb21lIG9wZXJhdGlvbnMgY2Fubm90IGJlIGFwcGxpZWQgeWV0ICgpXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBXcml0ZSBoaWdoZXIgY2xpZW50cyBmaXJzdCDih5Igc29ydCBieSBjbGllbnRJRCAmIGNsb2NrIGFuZCByZW1vdmUgZGVjb2RlcnMgd2l0aG91dCBjb250ZW50XG4gICAgbGF6eVN0cnVjdERlY29kZXJzID0gbGF6eVN0cnVjdERlY29kZXJzLmZpbHRlcihkZWMgPT4gZGVjLmN1cnIgIT09IG51bGwpXG4gICAgbGF6eVN0cnVjdERlY29kZXJzLnNvcnQoXG4gICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKGFueSxhbnkpOm51bWJlcn0gKi8gKGRlYzEsIGRlYzIpID0+IHtcbiAgICAgICAgaWYgKGRlYzEuY3Vyci5pZC5jbGllbnQgPT09IGRlYzIuY3Vyci5pZC5jbGllbnQpIHtcbiAgICAgICAgICBjb25zdCBjbG9ja0RpZmYgPSBkZWMxLmN1cnIuaWQuY2xvY2sgLSBkZWMyLmN1cnIuaWQuY2xvY2tcbiAgICAgICAgICBpZiAoY2xvY2tEaWZmID09PSAwKSB7XG4gICAgICAgICAgICAvLyBAdG9kbyByZW1vdmUgcmVmZXJlbmNlcyB0byBza2lwIHNpbmNlIHRoZSBzdHJ1Y3REZWNvZGVycyBtdXN0IGZpbHRlciBTa2lwcy5cbiAgICAgICAgICAgIHJldHVybiBkZWMxLmN1cnIuY29uc3RydWN0b3IgPT09IGRlYzIuY3Vyci5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgOiBkZWMxLmN1cnIuY29uc3RydWN0b3IgPT09IFNraXAgPyAxIDogLTEgLy8gd2UgYXJlIGZpbHRlcmluZyBza2lwcyBhbnl3YXkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9ja0RpZmZcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlYzIuY3Vyci5pZC5jbGllbnQgLSBkZWMxLmN1cnIuaWQuY2xpZW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gICAgaWYgKGxhenlTdHJ1Y3REZWNvZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNvbnN0IGN1cnJEZWNvZGVyID0gbGF6eVN0cnVjdERlY29kZXJzWzBdXG4gICAgLy8gd3JpdGUgZnJvbSBjdXJyRGVjb2RlciB1bnRpbCB0aGUgbmV4dCBvcGVyYXRpb24gaXMgZnJvbSBhbm90aGVyIGNsaWVudCBvciBpZiBmaWxsZXItc3RydWN0XG4gICAgLy8gdGhlbiB3ZSBuZWVkIHRvIHJlb3JkZXIgdGhlIGRlY29kZXJzIGFuZCBmaW5kIHRoZSBuZXh0IG9wZXJhdGlvbiB0byB3cml0ZVxuICAgIGNvbnN0IGZpcnN0Q2xpZW50ID0gLyoqIEB0eXBlIHtJdGVtIHwgR0N9ICovIChjdXJyRGVjb2Rlci5jdXJyKS5pZC5jbGllbnRcblxuICAgIGlmIChjdXJyV3JpdGUgIT09IG51bGwpIHtcbiAgICAgIGxldCBjdXJyID0gLyoqIEB0eXBlIHtJdGVtIHwgR0MgfCBudWxsfSAqLyAoY3VyckRlY29kZXIuY3VycilcbiAgICAgIGxldCBpdGVyYXRlZCA9IGZhbHNlXG5cbiAgICAgIC8vIGl0ZXJhdGUgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdGhhdCB3ZSBoYXZlbid0IHdyaXR0ZW4gYWxyZWFkeVxuICAgICAgLy8gcmVtZW1iZXI6IGZpcnN0IHRoZSBoaWdoIGNsaWVudC1pZHMgYXJlIHdyaXR0ZW5cbiAgICAgIHdoaWxlIChjdXJyICE9PSBudWxsICYmIGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aCA8PSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggJiYgY3Vyci5pZC5jbGllbnQgPj0gY3VycldyaXRlLnN0cnVjdC5pZC5jbGllbnQpIHtcbiAgICAgICAgY3VyciA9IGN1cnJEZWNvZGVyLm5leHQoKVxuICAgICAgICBpdGVyYXRlZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgY3VyciA9PT0gbnVsbCB8fCAvLyBjdXJyZW50IGRlY29kZXIgaXMgZW1wdHlcbiAgICAgICAgY3Vyci5pZC5jbGllbnQgIT09IGZpcnN0Q2xpZW50IHx8IC8vIGNoZWNrIHdoZXRoZXIgdGhlcmUgaXMgYW5vdGhlciBkZWNvZGVyIHRoYXQgaGFzIGhhcyB1cGRhdGVzIGZyb20gYGZpcnN0Q2xpZW50YFxuICAgICAgICAoaXRlcmF0ZWQgJiYgY3Vyci5pZC5jbG9jayA+IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCkgLy8gdGhlIGFib3ZlIHdoaWxlIGxvb3Agd2FzIHVzZWQgYW5kIHdlIGFyZSBwb3RlbnRpYWxseSBtaXNzaW5nIHVwZGF0ZXNcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3RDbGllbnQgIT09IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xpZW50KSB7XG4gICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KVxuICAgICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogY3Vyciwgb2Zmc2V0OiAwIH1cbiAgICAgICAgY3VyckRlY29kZXIubmV4dCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoIDwgY3Vyci5pZC5jbG9jaykge1xuICAgICAgICAgIC8vIEB0b2RvIHdyaXRlIGN1cnJTdHJ1Y3QgJiBzZXQgY3VyclN0cnVjdCA9IFNraXAoY2xvY2sgPSBjdXJyU3RydWN0LmlkLmNsb2NrICsgY3VyclN0cnVjdC5sZW5ndGgsIGxlbmd0aCA9IGN1cnIuaWQuY2xvY2sgLSBzZWxmLmNsb2NrKVxuICAgICAgICAgIGlmIChjdXJyV3JpdGUuc3RydWN0LmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgICAgICAgICAvLyBleHRlbmQgZXhpc3Rpbmcgc2tpcFxuICAgICAgICAgICAgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggPSBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGggLSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KVxuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGN1cnIuaWQuY2xvY2sgLSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrIC0gY3VycldyaXRlLnN0cnVjdC5sZW5ndGhcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUge1NraXB9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBTa2lwKGNyZWF0ZUlEKGZpcnN0Q2xpZW50LCBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGgpLCBkaWZmKVxuICAgICAgICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3QsIG9mZnNldDogMCB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBpZiAoY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoID49IGN1cnIuaWQuY2xvY2spIHtcbiAgICAgICAgICBjb25zdCBkaWZmID0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoIC0gY3Vyci5pZC5jbG9ja1xuICAgICAgICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICAgICAgaWYgKGN1cnJXcml0ZS5zdHJ1Y3QuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICAgICAgICAgICAgLy8gcHJlZmVyIHRvIHNsaWNlIFNraXAgYmVjYXVzZSB0aGUgb3RoZXIgc3RydWN0IG1pZ2h0IGNvbnRhaW4gbW9yZSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCAtPSBkaWZmXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyID0gc2xpY2VTdHJ1Y3QoY3VyciwgZGlmZilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjdXJyV3JpdGUuc3RydWN0Lm1lcmdlV2l0aCgvKiogQHR5cGUge2FueX0gKi8gKGN1cnIpKSkge1xuICAgICAgICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpXG4gICAgICAgICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogY3Vyciwgb2Zmc2V0OiAwIH1cbiAgICAgICAgICAgIGN1cnJEZWNvZGVyLm5leHQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogLyoqIEB0eXBlIHtJdGVtIHwgR0N9ICovIChjdXJyRGVjb2Rlci5jdXJyKSwgb2Zmc2V0OiAwIH1cbiAgICAgIGN1cnJEZWNvZGVyLm5leHQoKVxuICAgIH1cbiAgICBmb3IgKFxuICAgICAgbGV0IG5leHQgPSBjdXJyRGVjb2Rlci5jdXJyO1xuICAgICAgbmV4dCAhPT0gbnVsbCAmJiBuZXh0LmlkLmNsaWVudCA9PT0gZmlyc3RDbGllbnQgJiYgbmV4dC5pZC5jbG9jayA9PT0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoICYmIG5leHQuY29uc3RydWN0b3IgIT09IFNraXA7XG4gICAgICBuZXh0ID0gY3VyckRlY29kZXIubmV4dCgpXG4gICAgKSB7XG4gICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldClcbiAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0OiBuZXh0LCBvZmZzZXQ6IDAgfVxuICAgIH1cbiAgfVxuICBpZiAoY3VycldyaXRlICE9PSBudWxsKSB7XG4gICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpXG4gICAgY3VycldyaXRlID0gbnVsbFxuICB9XG4gIGZpbmlzaExhenlTdHJ1Y3RXcml0aW5nKGxhenlTdHJ1Y3RFbmNvZGVyKVxuXG4gIGNvbnN0IGRzcyA9IHVwZGF0ZURlY29kZXJzLm1hcChkZWNvZGVyID0+IHJlYWREZWxldGVTZXQoZGVjb2RlcikpXG4gIGNvbnN0IGRzID0gbWVyZ2VEZWxldGVTZXRzKGRzcylcbiAgd3JpdGVEZWxldGVTZXQodXBkYXRlRW5jb2RlciwgZHMpXG4gIHJldHVybiB1cGRhdGVFbmNvZGVyLnRvVWludDhBcnJheSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gc3ZcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVFbmNvZGVyVjJ9IFtZRW5jb2Rlcl1cbiAqL1xuZXhwb3J0IGNvbnN0IGRpZmZVcGRhdGVWMiA9ICh1cGRhdGUsIHN2LCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMiwgWUVuY29kZXIgPSBVcGRhdGVFbmNvZGVyVjIpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBkZWNvZGVTdGF0ZVZlY3RvcihzdilcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBZRW5jb2RlcigpXG4gIGNvbnN0IGxhenlTdHJ1Y3RXcml0ZXIgPSBuZXcgTGF6eVN0cnVjdFdyaXRlcihlbmNvZGVyKVxuICBjb25zdCBkZWNvZGVyID0gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSlcbiAgY29uc3QgcmVhZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIoZGVjb2RlciwgZmFsc2UpXG4gIHdoaWxlIChyZWFkZXIuY3Vycikge1xuICAgIGNvbnN0IGN1cnIgPSByZWFkZXIuY3VyclxuICAgIGNvbnN0IGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudFxuICAgIGNvbnN0IHN2Q2xvY2sgPSBzdGF0ZS5nZXQoY3VyckNsaWVudCkgfHwgMFxuICAgIGlmIChyZWFkZXIuY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgLy8gdGhlIGZpcnN0IHdyaXR0ZW4gc3RydWN0IHNob3VsZG4ndCBiZSBhIHNraXBcbiAgICAgIHJlYWRlci5uZXh0KClcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGggPiBzdkNsb2NrKSB7XG4gICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0V3JpdGVyLCBjdXJyLCBtYXRoLm1heChzdkNsb2NrIC0gY3Vyci5pZC5jbG9jaywgMCkpXG4gICAgICByZWFkZXIubmV4dCgpXG4gICAgICB3aGlsZSAocmVhZGVyLmN1cnIgJiYgcmVhZGVyLmN1cnIuaWQuY2xpZW50ID09PSBjdXJyQ2xpZW50KSB7XG4gICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RXcml0ZXIsIHJlYWRlci5jdXJyLCAwKVxuICAgICAgICByZWFkZXIubmV4dCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlYWQgdW50aWwgc29tZXRoaW5nIG5ldyBjb21lcyB1cFxuICAgICAgd2hpbGUgKHJlYWRlci5jdXJyICYmIHJlYWRlci5jdXJyLmlkLmNsaWVudCA9PT0gY3VyckNsaWVudCAmJiByZWFkZXIuY3Vyci5pZC5jbG9jayArIHJlYWRlci5jdXJyLmxlbmd0aCA8PSBzdkNsb2NrKSB7XG4gICAgICAgIHJlYWRlci5uZXh0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmluaXNoTGF6eVN0cnVjdFdyaXRpbmcobGF6eVN0cnVjdFdyaXRlcilcbiAgLy8gd3JpdGUgZHNcbiAgY29uc3QgZHMgPSByZWFkRGVsZXRlU2V0KGRlY29kZXIpXG4gIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKVxuICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHN2XG4gKi9cbmV4cG9ydCBjb25zdCBkaWZmVXBkYXRlID0gKHVwZGF0ZSwgc3YpID0+IGRpZmZVcGRhdGVWMih1cGRhdGUsIHN2LCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMSlcblxuLyoqXG4gKiBAcGFyYW0ge0xhenlTdHJ1Y3RXcml0ZXJ9IGxhenlXcml0ZXJcbiAqL1xuY29uc3QgZmx1c2hMYXp5U3RydWN0V3JpdGVyID0gbGF6eVdyaXRlciA9PiB7XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPiAwKSB7XG4gICAgbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzLnB1c2goeyB3cml0dGVuOiBsYXp5V3JpdGVyLndyaXR0ZW4sIHJlc3RFbmNvZGVyOiBlbmNvZGluZy50b1VpbnQ4QXJyYXkobGF6eVdyaXRlci5lbmNvZGVyLnJlc3RFbmNvZGVyKSB9KVxuICAgIGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICAgIGxhenlXcml0ZXIud3JpdHRlbiA9IDBcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TGF6eVN0cnVjdFdyaXRlcn0gbGF6eVdyaXRlclxuICogQHBhcmFtIHtJdGVtIHwgR0N9IHN0cnVjdFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICovXG5jb25zdCB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlciA9IChsYXp5V3JpdGVyLCBzdHJ1Y3QsIG9mZnNldCkgPT4ge1xuICAvLyBmbHVzaCBjdXJyIGlmIHdlIHN0YXJ0IGFub3RoZXIgY2xpZW50XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPiAwICYmIGxhenlXcml0ZXIuY3VyckNsaWVudCAhPT0gc3RydWN0LmlkLmNsaWVudCkge1xuICAgIGZsdXNoTGF6eVN0cnVjdFdyaXRlcihsYXp5V3JpdGVyKVxuICB9XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPT09IDApIHtcbiAgICBsYXp5V3JpdGVyLmN1cnJDbGllbnQgPSBzdHJ1Y3QuaWQuY2xpZW50XG4gICAgLy8gd3JpdGUgbmV4dCBjbGllbnRcbiAgICBsYXp5V3JpdGVyLmVuY29kZXIud3JpdGVDbGllbnQoc3RydWN0LmlkLmNsaWVudClcbiAgICAvLyB3cml0ZSBzdGFydENsb2NrXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2Rlciwgc3RydWN0LmlkLmNsb2NrICsgb2Zmc2V0KVxuICB9XG4gIHN0cnVjdC53cml0ZShsYXp5V3JpdGVyLmVuY29kZXIsIG9mZnNldClcbiAgbGF6eVdyaXRlci53cml0dGVuKytcbn1cbi8qKlxuICogQ2FsbCB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgY29sbGVjdGVkIGFsbCBwYXJ0cyBhbmQgd2FudCB0b1xuICogcHV0IGFsbCB0aGUgcGFydHMgdG9nZXRoZXIuIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QsXG4gKiB5b3UgY2FuIGNvbnRpbnVlIHVzaW5nIHRoZSBVcGRhdGVFbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7TGF6eVN0cnVjdFdyaXRlcn0gbGF6eVdyaXRlclxuICovXG5jb25zdCBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyA9IChsYXp5V3JpdGVyKSA9PiB7XG4gIGZsdXNoTGF6eVN0cnVjdFdyaXRlcihsYXp5V3JpdGVyKVxuXG4gIC8vIHRoaXMgaXMgYSBmcmVzaCBlbmNvZGVyIGJlY2F1c2Ugd2UgY2FsbGVkIGZsdXNoQ3VyclxuICBjb25zdCByZXN0RW5jb2RlciA9IGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2RlclxuXG4gIC8qKlxuICAgKiBOb3cgd2UgcHV0IGFsbCB0aGUgZnJhZ21lbnRzIHRvZ2V0aGVyLlxuICAgKiBUaGlzIHdvcmtzIHNpbWlsYXJseSB0byBgd3JpdGVDbGllbnRzU3RydWN0c2BcbiAgICovXG5cbiAgLy8gd3JpdGUgIyBzdGF0ZXMgdGhhdCB3ZXJlIHVwZGF0ZWQgLSBpLmUuIHRoZSBjbGllbnRzXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChyZXN0RW5jb2RlciwgbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzLmxlbmd0aClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxhenlXcml0ZXIuY2xpZW50U3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhcnRTdHJ1Y3RzID0gbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzW2ldXG4gICAgLyoqXG4gICAgICogV29ya3Mgc2ltaWxhcmx5IHRvIGB3cml0ZVN0cnVjdHNgXG4gICAgICovXG4gICAgLy8gd3JpdGUgIyBlbmNvZGVkIHN0cnVjdHNcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQocmVzdEVuY29kZXIsIHBhcnRTdHJ1Y3RzLndyaXR0ZW4pXG4gICAgLy8gd3JpdGUgdGhlIHJlc3Qgb2YgdGhlIGZyYWdtZW50XG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OEFycmF5KHJlc3RFbmNvZGVyLCBwYXJ0U3RydWN0cy5yZXN0RW5jb2RlcilcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEl0ZW18R0N8U2tpcCk6SXRlbXxHQ3xTa2lwfSBibG9ja1RyYW5zZm9ybWVyXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYxfSBZRGVjb2RlclxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRW5jb2RlclYyIHwgdHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB9IFlFbmNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0VXBkYXRlRm9ybWF0ID0gKHVwZGF0ZSwgYmxvY2tUcmFuc2Zvcm1lciwgWURlY29kZXIsIFlFbmNvZGVyKSA9PiB7XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKVxuICBjb25zdCBsYXp5RGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKHVwZGF0ZURlY29kZXIsIGZhbHNlKVxuICBjb25zdCB1cGRhdGVFbmNvZGVyID0gbmV3IFlFbmNvZGVyKClcbiAgY29uc3QgbGF6eVdyaXRlciA9IG5ldyBMYXp5U3RydWN0V3JpdGVyKHVwZGF0ZUVuY29kZXIpXG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVdyaXRlciwgYmxvY2tUcmFuc2Zvcm1lcihjdXJyKSwgMClcbiAgfVxuICBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyhsYXp5V3JpdGVyKVxuICBjb25zdCBkcyA9IHJlYWREZWxldGVTZXQodXBkYXRlRGVjb2RlcilcbiAgd3JpdGVEZWxldGVTZXQodXBkYXRlRW5jb2RlciwgZHMpXG4gIHJldHVybiB1cGRhdGVFbmNvZGVyLnRvVWludDhBcnJheSgpXG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT2JmdXNjYXRvck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW09iZnVzY2F0b3JPcHRpb25zLmZvcm1hdHRpbmc9dHJ1ZV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW09iZnVzY2F0b3JPcHRpb25zLnN1YmRvY3M9dHJ1ZV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW09iZnVzY2F0b3JPcHRpb25zLnl4bWw9dHJ1ZV0gV2hldGhlciB0byBvYmZ1c2NhdGUgbm9kZU5hbWUgLyBob29rTmFtZVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtPYmZ1c2NhdG9yT3B0aW9uc30gb2JmdXNjYXRvclxuICovXG5jb25zdCBjcmVhdGVPYmZ1c2NhdG9yID0gKHsgZm9ybWF0dGluZyA9IHRydWUsIHN1YmRvY3MgPSB0cnVlLCB5eG1sID0gdHJ1ZSB9ID0ge30pID0+IHtcbiAgbGV0IGkgPSAwXG4gIGNvbnN0IG1hcEtleUNhY2hlID0gbWFwLmNyZWF0ZSgpXG4gIGNvbnN0IG5vZGVOYW1lQ2FjaGUgPSBtYXAuY3JlYXRlKClcbiAgY29uc3QgZm9ybWF0dGluZ0tleUNhY2hlID0gbWFwLmNyZWF0ZSgpXG4gIGNvbnN0IGZvcm1hdHRpbmdWYWx1ZUNhY2hlID0gbWFwLmNyZWF0ZSgpXG4gIGZvcm1hdHRpbmdWYWx1ZUNhY2hlLnNldChudWxsLCBudWxsKSAvLyBlbmQgb2YgYSBmb3JtYXR0aW5nIHJhbmdlIHNob3VsZCBhbHdheXMgYmUgdGhlIGVuZCBvZiBhIGZvcm1hdHRpbmcgcmFuZ2VcbiAgLyoqXG4gICAqIEBwYXJhbSB7SXRlbXxHQ3xTa2lwfSBibG9ja1xuICAgKiBAcmV0dXJuIHtJdGVtfEdDfFNraXB9XG4gICAqL1xuICByZXR1cm4gYmxvY2sgPT4ge1xuICAgIHN3aXRjaCAoYmxvY2suY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgR0M6XG4gICAgICBjYXNlIFNraXA6XG4gICAgICAgIHJldHVybiBibG9ja1xuICAgICAgY2FzZSBJdGVtOiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSAvKiogQHR5cGUge0l0ZW19ICovIChibG9jaylcbiAgICAgICAgY29uc3QgY29udGVudCA9IGl0ZW0uY29udGVudFxuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIENvbnRlbnREZWxldGVkOlxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIENvbnRlbnRUeXBlOiB7XG4gICAgICAgICAgICBpZiAoeXhtbCkge1xuICAgICAgICAgICAgICBjb25zdCB0eXBlID0gLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKGNvbnRlbnQpLnR5cGVcbiAgICAgICAgICAgICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBZWG1sRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHR5cGUubm9kZU5hbWUgPSBtYXAuc2V0SWZVbmRlZmluZWQobm9kZU5hbWVDYWNoZSwgdHlwZS5ub2RlTmFtZSwgKCkgPT4gJ25vZGUtJyArIGkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHR5cGUgaW5zdGFuY2VvZiBZWG1sSG9vaykge1xuICAgICAgICAgICAgICAgIHR5cGUuaG9va05hbWUgPSBtYXAuc2V0SWZVbmRlZmluZWQobm9kZU5hbWVDYWNoZSwgdHlwZS5ob29rTmFtZSwgKCkgPT4gJ2hvb2stJyArIGkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgQ29udGVudEFueToge1xuICAgICAgICAgICAgY29uc3QgYyA9IC8qKiBAdHlwZSB7Q29udGVudEFueX0gKi8gKGNvbnRlbnQpXG4gICAgICAgICAgICBjLmFyciA9IGMuYXJyLm1hcCgoKSA9PiBpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDb250ZW50QmluYXJ5OiB7XG4gICAgICAgICAgICBjb25zdCBjID0gLyoqIEB0eXBlIHtDb250ZW50QmluYXJ5fSAqLyAoY29udGVudClcbiAgICAgICAgICAgIGMuY29udGVudCA9IG5ldyBVaW50OEFycmF5KFtpXSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgQ29udGVudERvYzoge1xuICAgICAgICAgICAgY29uc3QgYyA9IC8qKiBAdHlwZSB7Q29udGVudERvY30gKi8gKGNvbnRlbnQpXG4gICAgICAgICAgICBpZiAoc3ViZG9jcykge1xuICAgICAgICAgICAgICBjLm9wdHMgPSB7fVxuICAgICAgICAgICAgICBjLmRvYy5ndWlkID0gaSArICcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIENvbnRlbnRFbWJlZDoge1xuICAgICAgICAgICAgY29uc3QgYyA9IC8qKiBAdHlwZSB7Q29udGVudEVtYmVkfSAqLyAoY29udGVudClcbiAgICAgICAgICAgIGMuZW1iZWQgPSB7fVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OiB7XG4gICAgICAgICAgICBjb25zdCBjID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY29udGVudClcbiAgICAgICAgICAgIGlmIChmb3JtYXR0aW5nKSB7XG4gICAgICAgICAgICAgIGMua2V5ID0gbWFwLnNldElmVW5kZWZpbmVkKGZvcm1hdHRpbmdLZXlDYWNoZSwgYy5rZXksICgpID0+IGkgKyAnJylcbiAgICAgICAgICAgICAgYy52YWx1ZSA9IG1hcC5zZXRJZlVuZGVmaW5lZChmb3JtYXR0aW5nVmFsdWVDYWNoZSwgYy52YWx1ZSwgKCkgPT4gKHsgaSB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgQ29udGVudEpTT046IHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSAvKiogQHR5cGUge0NvbnRlbnRKU09OfSAqLyAoY29udGVudClcbiAgICAgICAgICAgIGMuYXJyID0gYy5hcnIubWFwKCgpID0+IGkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6IHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSAvKiogQHR5cGUge0NvbnRlbnRTdHJpbmd9ICovIChjb250ZW50KVxuICAgICAgICAgICAgYy5zdHIgPSBzdHJpbmcucmVwZWF0KChpICUgMTApICsgJycsIGMuc3RyLmxlbmd0aClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyB1bmtub3duIGNvbnRlbnQgdHlwZVxuICAgICAgICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnBhcmVudFN1Yikge1xuICAgICAgICAgIGl0ZW0ucGFyZW50U3ViID0gbWFwLnNldElmVW5kZWZpbmVkKG1hcEtleUNhY2hlLCBpdGVtLnBhcmVudFN1YiwgKCkgPT4gaSArICcnKVxuICAgICAgICB9XG4gICAgICAgIGkrK1xuICAgICAgICByZXR1cm4gYmxvY2tcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHVua25vd24gYmxvY2stdHlwZVxuICAgICAgICBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBvYmZ1c2NhdGVzIHRoZSBjb250ZW50IG9mIGEgWWpzIHVwZGF0ZS4gVGhpcyBpcyB1c2VmdWwgdG8gc2hhcmVcbiAqIGJ1Z2d5IFlqcyBkb2N1bWVudHMgd2hpbGUgc2lnbmlmaWNhbnRseSBsaW1pdGluZyB0aGUgcG9zc2liaWxpdHkgdGhhdCBhXG4gKiBkZXZlbG9wZXIgY2FuIG9uIHRoZSB1c2VyLiBOb3RlIHRoYXQgaXQgbWlnaHQgc3RpbGwgYmUgcG9zc2libGUgdG8gZGVkdWNlXG4gKiBzb21lIGluZm9ybWF0aW9uIGJ5IGFuYWx5emluZyB0aGUgXCJzdHJ1Y3R1cmVcIiBvZiB0aGUgZG9jdW1lbnQgb3IgYnkgYW5hbHl6aW5nXG4gKiB0aGUgdHlwaW5nIGJlaGF2aW9yIHVzaW5nIHRoZSBDUkRULXJlbGF0ZWQgbWV0YWRhdGEgdGhhdCBpcyBzdGlsbCBrZXB0IGZ1bGx5XG4gKiBpbnRhY3QuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7T2JmdXNjYXRvck9wdGlvbnN9IFtvcHRzXVxuICovXG5leHBvcnQgY29uc3Qgb2JmdXNjYXRlVXBkYXRlID0gKHVwZGF0ZSwgb3B0cykgPT4gY29udmVydFVwZGF0ZUZvcm1hdCh1cGRhdGUsIGNyZWF0ZU9iZnVzY2F0b3Iob3B0cyksIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRW5jb2RlclYxKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge09iZnVzY2F0b3JPcHRpb25zfSBbb3B0c11cbiAqL1xuZXhwb3J0IGNvbnN0IG9iZnVzY2F0ZVVwZGF0ZVYyID0gKHVwZGF0ZSwgb3B0cykgPT4gY29udmVydFVwZGF0ZUZvcm1hdCh1cGRhdGUsIGNyZWF0ZU9iZnVzY2F0b3Iob3B0cyksIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYyKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0VXBkYXRlRm9ybWF0VjFUb1YyID0gdXBkYXRlID0+IGNvbnZlcnRVcGRhdGVGb3JtYXQodXBkYXRlLCBmLmlkLCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMilcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICovXG5leHBvcnQgY29uc3QgY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSA9IHVwZGF0ZSA9PiBjb252ZXJ0VXBkYXRlRm9ybWF0KHVwZGF0ZSwgZi5pZCwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEpXG4iLCAiaW1wb3J0IHtcbiAgaXNEZWxldGVkLFxuICBJdGVtLCBBYnN0cmFjdFR5cGUsIFRyYW5zYWN0aW9uLCBBYnN0cmFjdFN0cnVjdCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuaW1wb3J0ICogYXMgc2V0IGZyb20gJ2xpYjAvc2V0J1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSdcbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5cbmNvbnN0IGVycm9yQ29tcHV0ZUNoYW5nZXMgPSAnWW91IG11c3Qgbm90IGNvbXB1dGUgY2hhbmdlcyBhZnRlciB0aGUgZXZlbnQtaGFuZGxlciBmaXJlZC4nXG5cbi8qKlxuICogQHRlbXBsYXRlIHtBYnN0cmFjdFR5cGU8YW55Pn0gVFxuICogWUV2ZW50IGRlc2NyaWJlcyB0aGUgY2hhbmdlcyBvbiBhIFlUeXBlLlxuICovXG5leHBvcnQgY2xhc3MgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VH0gdGFyZ2V0IFRoZSBjaGFuZ2VkIHR5cGUuXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodGFyZ2V0LCB0cmFuc2FjdGlvbikge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9uIHdoaWNoIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgb24uXG4gICAgICogQHR5cGUge1R9XG4gICAgICovXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXRcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB0YXJnZXQgb24gd2hpY2ggdGhlIG9ic2VydmUgY2FsbGJhY2sgaXMgY2FsbGVkLlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSB0YXJnZXRcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNhY3Rpb24gdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudC5cbiAgICAgKiBAdHlwZSB7VHJhbnNhY3Rpb259XG4gICAgICovXG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX2NoYW5nZXMgPSBudWxsXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBNYXA8c3RyaW5nLCB7IGFjdGlvbjogJ2FkZCcgfCAndXBkYXRlJyB8ICdkZWxldGUnLCBvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55IH0+fVxuICAgICAqL1xuICAgIHRoaXMuX2tleXMgPSBudWxsXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBBcnJheTx7IGluc2VydD86IHN0cmluZyB8IEFycmF5PGFueT4gfCBvYmplY3QgfCBBYnN0cmFjdFR5cGU8YW55PiwgcmV0YWluPzogbnVtYmVyLCBkZWxldGU/OiBudW1iZXIsIGF0dHJpYnV0ZXM/OiBPYmplY3Q8c3RyaW5nLCBhbnk+IH0+fVxuICAgICAqL1xuICAgIHRoaXMuX2RlbHRhID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmd8bnVtYmVyPnxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3BhdGggPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHBhdGggZnJvbSBgeWAgdG8gdGhlIGNoYW5nZWQgdHlwZS5cbiAgICpcbiAgICogQHRvZG8gdjE0IHNob3VsZCBzdGFuZGFyZGl6ZSBvbiBwYXRoOiBBcnJheTx7cGFyZW50LCBpbmRleH0+IGJlY2F1c2UgdGhhdCBpcyBlYXNpZXIgdG8gd29yayB3aXRoLlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHByb3BlcnR5IGhvbGRzOlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGxldCB0eXBlID0geVxuICAgKiAgIGV2ZW50LnBhdGguZm9yRWFjaChkaXIgPT4ge1xuICAgKiAgICAgdHlwZSA9IHR5cGUuZ2V0KGRpcilcbiAgICogICB9KVxuICAgKiAgIHR5cGUgPT09IGV2ZW50LnRhcmdldCAvLyA9PiB0cnVlXG4gICAqL1xuICBnZXQgcGF0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGggfHwgKHRoaXMuX3BhdGggPSBnZXRQYXRoVG8odGhpcy5jdXJyZW50VGFyZ2V0LCB0aGlzLnRhcmdldCkpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBzdHJ1Y3QgaXMgZGVsZXRlZCBieSB0aGlzIGV2ZW50LlxuICAgKlxuICAgKiBJbiBjb250cmFzdCB0byBjaGFuZ2UuZGVsZXRlZCwgdGhpcyBtZXRob2QgYWxzbyByZXR1cm5zIHRydWUgaWYgdGhlIHN0cnVjdCB3YXMgYWRkZWQgYW5kIHRoZW4gZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBYnN0cmFjdFN0cnVjdH0gc3RydWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBkZWxldGVzIChzdHJ1Y3QpIHtcbiAgICByZXR1cm4gaXNEZWxldGVkKHRoaXMudHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBzdHJ1Y3QuaWQpXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge01hcDxzdHJpbmcsIHsgYWN0aW9uOiAnYWRkJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsIG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkgfT59XG4gICAqL1xuICBnZXQga2V5cyAoKSB7XG4gICAgaWYgKHRoaXMuX2tleXMgPT09IG51bGwpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmRvYy5fdHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgZXJyb3IuY3JlYXRlKGVycm9yQ29tcHV0ZUNoYW5nZXMpXG4gICAgICB9XG4gICAgICBjb25zdCBrZXlzID0gbmV3IE1hcCgpXG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnRhcmdldFxuICAgICAgY29uc3QgY2hhbmdlZCA9IC8qKiBAdHlwZSBTZXQ8c3RyaW5nfG51bGw+ICovICh0aGlzLnRyYW5zYWN0aW9uLmNoYW5nZWQuZ2V0KHRhcmdldCkpXG4gICAgICBjaGFuZ2VkLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSAvKiogQHR5cGUge0l0ZW19ICovICh0YXJnZXQuX21hcC5nZXQoa2V5KSlcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAdHlwZSB7J2RlbGV0ZScgfCAnYWRkJyB8ICd1cGRhdGUnfVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGxldCBhY3Rpb25cbiAgICAgICAgICBsZXQgb2xkVmFsdWVcbiAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICBsZXQgcHJldiA9IGl0ZW0ubGVmdFxuICAgICAgICAgICAgd2hpbGUgKHByZXYgIT09IG51bGwgJiYgdGhpcy5hZGRzKHByZXYpKSB7XG4gICAgICAgICAgICAgIHByZXYgPSBwcmV2LmxlZnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwgJiYgdGhpcy5kZWxldGVzKHByZXYpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJ2RlbGV0ZSdcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QocHJldi5jb250ZW50LmdldENvbnRlbnQoKSlcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwgJiYgdGhpcy5kZWxldGVzKHByZXYpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJ3VwZGF0ZSdcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QocHJldi5jb250ZW50LmdldENvbnRlbnQoKSlcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnYWRkJ1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJ1xuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QoLyoqIEB0eXBlIHtJdGVtfSAqLyBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8vIG5vcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlzLnNldChrZXksIHsgYWN0aW9uLCBvbGRWYWx1ZSB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdGhpcy5fa2V5cyA9IGtleXNcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2tleXNcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgY29tcHV0ZWQgcHJvcGVydHkuIE5vdGUgdGhhdCB0aGlzIGNhbiBvbmx5IGJlIHNhZmVseSBjb21wdXRlZCBkdXJpbmcgdGhlXG4gICAqIGV2ZW50IGNhbGwuIENvbXB1dGluZyB0aGlzIHByb3BlcnR5IGFmdGVyIG90aGVyIGNoYW5nZXMgaGFwcGVuZWQgbWlnaHQgcmVzdWx0IGluXG4gICAqIHVuZXhwZWN0ZWQgYmVoYXZpb3IgKGluY29ycmVjdCBjb21wdXRhdGlvbiBvZiBkZWx0YXMpLiBBIHNhZmUgd2F5IHRvIGNvbGxlY3QgY2hhbmdlc1xuICAgKiBpcyB0byBzdG9yZSB0aGUgYGNoYW5nZXNgIG9yIHRoZSBgZGVsdGFgIG9iamVjdC4gQXZvaWQgc3RvcmluZyB0aGUgYHRyYW5zYWN0aW9uYCBvYmplY3QuXG4gICAqXG4gICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0Pzogc3RyaW5nIHwgQXJyYXk8YW55PiB8IG9iamVjdCB8IEFic3RyYWN0VHlwZTxhbnk+LCByZXRhaW4/OiBudW1iZXIsIGRlbGV0ZT86IG51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsIGFueT59Pn1cbiAgICovXG4gIGdldCBkZWx0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5kZWx0YVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3RydWN0IGlzIGFkZGVkIGJ5IHRoaXMgZXZlbnQuXG4gICAqXG4gICAqIEluIGNvbnRyYXN0IHRvIGNoYW5nZS5kZWxldGVkLCB0aGlzIG1ldGhvZCBhbHNvIHJldHVybnMgdHJ1ZSBpZiB0aGUgc3RydWN0IHdhcyBhZGRlZCBhbmQgdGhlbiBkZWxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0U3RydWN0fSBzdHJ1Y3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGFkZHMgKHN0cnVjdCkge1xuICAgIHJldHVybiBzdHJ1Y3QuaWQuY2xvY2sgPj0gKHRoaXMudHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KHN0cnVjdC5pZC5jbGllbnQpIHx8IDApXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBhIGNvbXB1dGVkIHByb3BlcnR5LiBOb3RlIHRoYXQgdGhpcyBjYW4gb25seSBiZSBzYWZlbHkgY29tcHV0ZWQgZHVyaW5nIHRoZVxuICAgKiBldmVudCBjYWxsLiBDb21wdXRpbmcgdGhpcyBwcm9wZXJ0eSBhZnRlciBvdGhlciBjaGFuZ2VzIGhhcHBlbmVkIG1pZ2h0IHJlc3VsdCBpblxuICAgKiB1bmV4cGVjdGVkIGJlaGF2aW9yIChpbmNvcnJlY3QgY29tcHV0YXRpb24gb2YgZGVsdGFzKS4gQSBzYWZlIHdheSB0byBjb2xsZWN0IGNoYW5nZXNcbiAgICogaXMgdG8gc3RvcmUgdGhlIGBjaGFuZ2VzYCBvciB0aGUgYGRlbHRhYCBvYmplY3QuIEF2b2lkIHN0b3JpbmcgdGhlIGB0cmFuc2FjdGlvbmAgb2JqZWN0LlxuICAgKlxuICAgKiBAdHlwZSB7e2FkZGVkOlNldDxJdGVtPixkZWxldGVkOlNldDxJdGVtPixrZXlzOk1hcDxzdHJpbmcse2FjdGlvbjonYWRkJ3wndXBkYXRlJ3wnZGVsZXRlJyxvbGRWYWx1ZTphbnl9PixkZWx0YTpBcnJheTx7aW5zZXJ0PzpBcnJheTxhbnk+fHN0cmluZywgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgKi9cbiAgZ2V0IGNoYW5nZXMgKCkge1xuICAgIGxldCBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlc1xuICAgIGlmIChjaGFuZ2VzID09PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy50cmFuc2FjdGlvbi5kb2MuX3RyYW5zYWN0aW9uQ2xlYW51cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IGVycm9yLmNyZWF0ZShlcnJvckNvbXB1dGVDaGFuZ2VzKVxuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy50YXJnZXRcbiAgICAgIGNvbnN0IGFkZGVkID0gc2V0LmNyZWF0ZSgpXG4gICAgICBjb25zdCBkZWxldGVkID0gc2V0LmNyZWF0ZSgpXG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0OkFycmF5PGFueT59fHtkZWxldGU6bnVtYmVyfXx7cmV0YWluOm51bWJlcn0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBkZWx0YSA9IFtdXG4gICAgICBjaGFuZ2VzID0ge1xuICAgICAgICBhZGRlZCxcbiAgICAgICAgZGVsZXRlZCxcbiAgICAgICAgZGVsdGEsXG4gICAgICAgIGtleXM6IHRoaXMua2V5c1xuICAgICAgfVxuICAgICAgY29uc3QgY2hhbmdlZCA9IC8qKiBAdHlwZSBTZXQ8c3RyaW5nfG51bGw+ICovICh0aGlzLnRyYW5zYWN0aW9uLmNoYW5nZWQuZ2V0KHRhcmdldCkpXG4gICAgICBpZiAoY2hhbmdlZC5oYXMobnVsbCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHthbnl9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbGFzdE9wID0gbnVsbFxuICAgICAgICBjb25zdCBwYWNrT3AgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGxhc3RPcCkge1xuICAgICAgICAgICAgZGVsdGEucHVzaChsYXN0T3ApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGl0ZW0gPSB0YXJnZXQuX3N0YXJ0OyBpdGVtICE9PSBudWxsOyBpdGVtID0gaXRlbS5yaWdodCkge1xuICAgICAgICAgIGlmIChpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkgJiYgIXRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5kZWxldGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpXG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyBkZWxldGU6IDAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcC5kZWxldGUgKz0gaXRlbS5sZW5ndGhcbiAgICAgICAgICAgICAgZGVsZXRlZC5hZGQoaXRlbSlcbiAgICAgICAgICAgIH0gLy8gZWxzZSBub3BcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5pbnNlcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpXG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyBpbnNlcnQ6IFtdIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0T3AuaW5zZXJ0ID0gbGFzdE9wLmluc2VydC5jb25jYXQoaXRlbS5jb250ZW50LmdldENvbnRlbnQoKSlcbiAgICAgICAgICAgICAgYWRkZWQuYWRkKGl0ZW0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5yZXRhaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpXG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyByZXRhaW46IDAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcC5yZXRhaW4gKz0gaXRlbS5sZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RPcCAhPT0gbnVsbCAmJiBsYXN0T3AucmV0YWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwYWNrT3AoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9jaGFuZ2VzID0gY2hhbmdlc1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovIChjaGFuZ2VzKVxuICB9XG59XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgcGF0aCBmcm9tIHRoaXMgdHlwZSB0byB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAvLyBgY2hpbGRgIHNob3VsZCBiZSBhY2Nlc3NpYmxlIHZpYSBgdHlwZS5nZXQocGF0aFswXSkuZ2V0KHBhdGhbMV0pLi5gXG4gKiAgIGNvbnN0IHBhdGggPSB0eXBlLmdldFBhdGhUbyhjaGlsZClcbiAqICAgLy8gYXNzdW1pbmcgYHR5cGUgaW5zdGFuY2VvZiBZQXJyYXlgXG4gKiAgIGNvbnNvbGUubG9nKHBhdGgpIC8vIG1pZ2h0IGxvb2sgbGlrZSA9PiBbMiwgJ2tleTEnXVxuICogICBjaGlsZCA9PT0gdHlwZS5nZXQocGF0aFswXSkuZ2V0KHBhdGhbMV0pXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBjaGlsZCB0YXJnZXRcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZ3xudW1iZXI+fSBQYXRoIHRvIHRoZSB0YXJnZXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldFBhdGhUbyA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBbXVxuICB3aGlsZSAoY2hpbGQuX2l0ZW0gIT09IG51bGwgJiYgY2hpbGQgIT09IHBhcmVudCkge1xuICAgIGlmIChjaGlsZC5faXRlbS5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgIC8vIHBhcmVudCBpcyBtYXAtaXNoXG4gICAgICBwYXRoLnVuc2hpZnQoY2hpbGQuX2l0ZW0ucGFyZW50U3ViKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwYXJlbnQgaXMgYXJyYXktaXNoXG4gICAgICBsZXQgaSA9IDBcbiAgICAgIGxldCBjID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGNoaWxkLl9pdGVtLnBhcmVudCkuX3N0YXJ0XG4gICAgICB3aGlsZSAoYyAhPT0gY2hpbGQuX2l0ZW0gJiYgYyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIWMuZGVsZXRlZCkge1xuICAgICAgICAgIGkrK1xuICAgICAgICB9XG4gICAgICAgIGMgPSBjLnJpZ2h0XG4gICAgICB9XG4gICAgICBwYXRoLnVuc2hpZnQoaSlcbiAgICB9XG4gICAgY2hpbGQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoY2hpbGQuX2l0ZW0ucGFyZW50KVxuICB9XG4gIHJldHVybiBwYXRoXG59XG4iLCAiaW1wb3J0IHtcbiAgcmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIsXG4gIGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMsXG4gIGFkZEV2ZW50SGFuZGxlckxpc3RlbmVyLFxuICBjcmVhdGVFdmVudEhhbmRsZXIsXG4gIGdldFN0YXRlLFxuICBpc1Zpc2libGUsXG4gIENvbnRlbnRUeXBlLFxuICBjcmVhdGVJRCxcbiAgQ29udGVudEFueSxcbiAgQ29udGVudEJpbmFyeSxcbiAgZ2V0SXRlbUNsZWFuU3RhcnQsXG4gIENvbnRlbnREb2MsIFlUZXh0LCBZQXJyYXksIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBEb2MsIFNuYXBzaG90LCBUcmFuc2FjdGlvbiwgRXZlbnRIYW5kbGVyLCBZRXZlbnQsIEl0ZW0sIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnbGliMC9tYXAnXG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICdsaWIwL2l0ZXJhdG9yJ1xuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnbGliMC9lcnJvcidcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnbGliMC9tYXRoJ1xuXG5jb25zdCBtYXhTZWFyY2hNYXJrZXIgPSA4MFxuXG4vKipcbiAqIEEgdW5pcXVlIHRpbWVzdGFtcCB0aGF0IGlkZW50aWZpZXMgZWFjaCBtYXJrZXIuXG4gKlxuICogVGltZSBpcyByZWxhdGl2ZSwuLiB0aGlzIGlzIG1vcmUgbGlrZSBhbiBldmVyLWluY3JlYXNpbmcgY2xvY2suXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCA9IDBcblxuZXhwb3J0IGNsYXNzIEFycmF5U2VhcmNoTWFya2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SXRlbX0gcFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICovXG4gIGNvbnN0cnVjdG9yIChwLCBpbmRleCkge1xuICAgIHAubWFya2VyID0gdHJ1ZVxuICAgIHRoaXMucCA9IHBcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcbiAgICB0aGlzLnRpbWVzdGFtcCA9IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCsrXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5U2VhcmNoTWFya2VyfSBtYXJrZXJcbiAqL1xuY29uc3QgcmVmcmVzaE1hcmtlclRpbWVzdGFtcCA9IG1hcmtlciA9PiB7IG1hcmtlci50aW1lc3RhbXAgPSBnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXArKyB9XG5cbi8qKlxuICogVGhpcyBpcyByYXRoZXIgY29tcGxleCBzbyB0aGlzIGZ1bmN0aW9uIGlzIHRoZSBvbmx5IHRoaW5nIHRoYXQgc2hvdWxkIG92ZXJ3cml0ZSBhIG1hcmtlclxuICpcbiAqIEBwYXJhbSB7QXJyYXlTZWFyY2hNYXJrZXJ9IG1hcmtlclxuICogQHBhcmFtIHtJdGVtfSBwXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqL1xuY29uc3Qgb3ZlcndyaXRlTWFya2VyID0gKG1hcmtlciwgcCwgaW5kZXgpID0+IHtcbiAgbWFya2VyLnAubWFya2VyID0gZmFsc2VcbiAgbWFya2VyLnAgPSBwXG4gIHAubWFya2VyID0gdHJ1ZVxuICBtYXJrZXIuaW5kZXggPSBpbmRleFxuICBtYXJrZXIudGltZXN0YW1wID0gZ2xvYmFsU2VhcmNoTWFya2VyVGltZXN0YW1wKytcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPn0gc2VhcmNoTWFya2VyXG4gKiBAcGFyYW0ge0l0ZW19IHBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICovXG5jb25zdCBtYXJrUG9zaXRpb24gPSAoc2VhcmNoTWFya2VyLCBwLCBpbmRleCkgPT4ge1xuICBpZiAoc2VhcmNoTWFya2VyLmxlbmd0aCA+PSBtYXhTZWFyY2hNYXJrZXIpIHtcbiAgICAvLyBvdmVycmlkZSBvbGRlc3QgbWFya2VyICh3ZSBkb24ndCB3YW50IHRvIGNyZWF0ZSBtb3JlIG9iamVjdHMpXG4gICAgY29uc3QgbWFya2VyID0gc2VhcmNoTWFya2VyLnJlZHVjZSgoYSwgYikgPT4gYS50aW1lc3RhbXAgPCBiLnRpbWVzdGFtcCA/IGEgOiBiKVxuICAgIG92ZXJ3cml0ZU1hcmtlcihtYXJrZXIsIHAsIGluZGV4KVxuICAgIHJldHVybiBtYXJrZXJcbiAgfSBlbHNlIHtcbiAgICAvLyBjcmVhdGUgbmV3IG1hcmtlclxuICAgIGNvbnN0IHBtID0gbmV3IEFycmF5U2VhcmNoTWFya2VyKHAsIGluZGV4KVxuICAgIHNlYXJjaE1hcmtlci5wdXNoKHBtKVxuICAgIHJldHVybiBwbVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIG1hcmtlciBoZWxwIHVzIHRvIGZpbmQgcG9zaXRpb25zIGluIHRoZSBhc3NvY2lhdGl2ZSBhcnJheSBmYXN0ZXIuXG4gKlxuICogVGhleSBzcGVlZCB1cCB0aGUgcHJvY2VzcyBvZiBmaW5kaW5nIGEgcG9zaXRpb24gd2l0aG91dCBtdWNoIGJvb2trZWVwaW5nLlxuICpcbiAqIEEgbWF4aW11bSBvZiBgbWF4U2VhcmNoTWFya2VyYCBvYmplY3RzIGFyZSBjcmVhdGVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWx3YXlzIHJldHVybnMgYSByZWZyZXNoZWQgbWFya2VyICh1cGRhdGVkIHRpbWVzdGFtcClcbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB5YXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICovXG5leHBvcnQgY29uc3QgZmluZE1hcmtlciA9ICh5YXJyYXksIGluZGV4KSA9PiB7XG4gIGlmICh5YXJyYXkuX3N0YXJ0ID09PSBudWxsIHx8IGluZGV4ID09PSAwIHx8IHlhcnJheS5fc2VhcmNoTWFya2VyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBtYXJrZXIgPSB5YXJyYXkuX3NlYXJjaE1hcmtlci5sZW5ndGggPT09IDAgPyBudWxsIDogeWFycmF5Ll9zZWFyY2hNYXJrZXIucmVkdWNlKChhLCBiKSA9PiBtYXRoLmFicyhpbmRleCAtIGEuaW5kZXgpIDwgbWF0aC5hYnMoaW5kZXggLSBiLmluZGV4KSA/IGEgOiBiKVxuICBsZXQgcCA9IHlhcnJheS5fc3RhcnRcbiAgbGV0IHBpbmRleCA9IDBcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIHAgPSBtYXJrZXIucFxuICAgIHBpbmRleCA9IG1hcmtlci5pbmRleFxuICAgIHJlZnJlc2hNYXJrZXJUaW1lc3RhbXAobWFya2VyKSAvLyB3ZSB1c2VkIGl0LCB3ZSBtaWdodCBuZWVkIHRvIHVzZSBpdCBhZ2FpblxuICB9XG4gIC8vIGl0ZXJhdGUgdG8gcmlnaHQgaWYgcG9zc2libGVcbiAgd2hpbGUgKHAucmlnaHQgIT09IG51bGwgJiYgcGluZGV4IDwgaW5kZXgpIHtcbiAgICBpZiAoIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDwgcGluZGV4ICsgcC5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBpbmRleCArPSBwLmxlbmd0aFxuICAgIH1cbiAgICBwID0gcC5yaWdodFxuICB9XG4gIC8vIGl0ZXJhdGUgdG8gbGVmdCBpZiBuZWNlc3NhcnkgKG1pZ2h0IGJlIHRoYXQgcGluZGV4ID4gaW5kZXgpXG4gIHdoaWxlIChwLmxlZnQgIT09IG51bGwgJiYgcGluZGV4ID4gaW5kZXgpIHtcbiAgICBwID0gcC5sZWZ0XG4gICAgaWYgKCFwLmRlbGV0ZWQgJiYgcC5jb3VudGFibGUpIHtcbiAgICAgIHBpbmRleCAtPSBwLmxlbmd0aFxuICAgIH1cbiAgfVxuICAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHAgY2FuJ3QgYmUgbWVyZ2VkIHdpdGggbGVmdCwgYmVjYXVzZSB0aGF0IHdvdWxkIHNjcmV3IHVwIGV2ZXJ5dGhpbmdcbiAgLy8gaW4gdGhhdCBjYXMganVzdCByZXR1cm4gd2hhdCB3ZSBoYXZlIChpdCBpcyBtb3N0IGxpa2VseSB0aGUgYmVzdCBtYXJrZXIgYW55d2F5KVxuICAvLyBpdGVyYXRlIHRvIGxlZnQgdW50aWwgcCBjYW4ndCBiZSBtZXJnZWQgd2l0aCBsZWZ0XG4gIHdoaWxlIChwLmxlZnQgIT09IG51bGwgJiYgcC5sZWZ0LmlkLmNsaWVudCA9PT0gcC5pZC5jbGllbnQgJiYgcC5sZWZ0LmlkLmNsb2NrICsgcC5sZWZ0Lmxlbmd0aCA9PT0gcC5pZC5jbG9jaykge1xuICAgIHAgPSBwLmxlZnRcbiAgICBpZiAoIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgcGluZGV4IC09IHAubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgLy8gQHRvZG8gcmVtb3ZlIVxuICAvLyBhc3N1cmUgcG9zaXRpb25cbiAgLy8ge1xuICAvLyAgIGxldCBzdGFydCA9IHlhcnJheS5fc3RhcnRcbiAgLy8gICBsZXQgcG9zID0gMFxuICAvLyAgIHdoaWxlIChzdGFydCAhPT0gcCkge1xuICAvLyAgICAgaWYgKCFzdGFydC5kZWxldGVkICYmIHN0YXJ0LmNvdW50YWJsZSkge1xuICAvLyAgICAgICBwb3MgKz0gc3RhcnQubGVuZ3RoXG4gIC8vICAgICB9XG4gIC8vICAgICBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0YXJ0LnJpZ2h0KVxuICAvLyAgIH1cbiAgLy8gICBpZiAocG9zICE9PSBwaW5kZXgpIHtcbiAgLy8gICAgIGRlYnVnZ2VyXG4gIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdGNoYSBwb3NpdGlvbiBmYWlsIScpXG4gIC8vICAgfVxuICAvLyB9XG4gIC8vIGlmIChtYXJrZXIpIHtcbiAgLy8gICBpZiAod2luZG93Lmxlbmd0aGVzID09IG51bGwpIHtcbiAgLy8gICAgIHdpbmRvdy5sZW5ndGhlcyA9IFtdXG4gIC8vICAgICB3aW5kb3cuZ2V0TGVuZ3RoZXMgPSAoKSA9PiB3aW5kb3cubGVuZ3RoZXMuc29ydCgoYSwgYikgPT4gYSAtIGIpXG4gIC8vICAgfVxuICAvLyAgIHdpbmRvdy5sZW5ndGhlcy5wdXNoKG1hcmtlci5pbmRleCAtIHBpbmRleClcbiAgLy8gICBjb25zb2xlLmxvZygnZGlzdGFuY2UnLCBtYXJrZXIuaW5kZXggLSBwaW5kZXgsICdsZW4nLCBwICYmIHAucGFyZW50Lmxlbmd0aClcbiAgLy8gfVxuICBpZiAobWFya2VyICE9PSBudWxsICYmIG1hdGguYWJzKG1hcmtlci5pbmRleCAtIHBpbmRleCkgPCAvKiogQHR5cGUge1lUZXh0fFlBcnJheTxhbnk+fSAqLyAocC5wYXJlbnQpLmxlbmd0aCAvIG1heFNlYXJjaE1hcmtlcikge1xuICAgIC8vIGFkanVzdCBleGlzdGluZyBtYXJrZXJcbiAgICBvdmVyd3JpdGVNYXJrZXIobWFya2VyLCBwLCBwaW5kZXgpXG4gICAgcmV0dXJuIG1hcmtlclxuICB9IGVsc2Uge1xuICAgIC8vIGNyZWF0ZSBuZXcgbWFya2VyXG4gICAgcmV0dXJuIG1hcmtQb3NpdGlvbih5YXJyYXkuX3NlYXJjaE1hcmtlciwgcCwgcGluZGV4KVxuICB9XG59XG5cbi8qKlxuICogVXBkYXRlIG1hcmtlcnMgd2hlbiBhIGNoYW5nZSBoYXBwZW5lZC5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIGRvaW5nIGEgZGVsZXRpb24hXG4gKlxuICogQHBhcmFtIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59IHNlYXJjaE1hcmtlclxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIElmIGluc2VydGlvbiwgbGVuIGlzIHBvc2l0aXZlLiBJZiBkZWxldGlvbiwgbGVuIGlzIG5lZ2F0aXZlLlxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlTWFya2VyQ2hhbmdlcyA9IChzZWFyY2hNYXJrZXIsIGluZGV4LCBsZW4pID0+IHtcbiAgZm9yIChsZXQgaSA9IHNlYXJjaE1hcmtlci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG0gPSBzZWFyY2hNYXJrZXJbaV1cbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICovXG4gICAgICBsZXQgcCA9IG0ucFxuICAgICAgcC5tYXJrZXIgPSBmYWxzZVxuICAgICAgLy8gSWRlYWxseSB3ZSBqdXN0IHdhbnQgdG8gZG8gYSBzaW1wbGUgcG9zaXRpb24gY29tcGFyaXNvbiwgYnV0IHRoaXMgd2lsbCBvbmx5IHdvcmsgaWZcbiAgICAgIC8vIHNlYXJjaCBtYXJrZXJzIGRvbid0IHBvaW50IHRvIGRlbGV0ZWQgaXRlbXMgZm9yIGZvcm1hdHMuXG4gICAgICAvLyBJdGVyYXRlIG1hcmtlciB0byBwcmV2IHVuZGVsZXRlZCBjb3VudGFibGUgcG9zaXRpb24gc28gd2Uga25vdyB3aGF0IHRvIGRvIHdoZW4gdXBkYXRpbmcgYSBwb3NpdGlvblxuICAgICAgd2hpbGUgKHAgJiYgKHAuZGVsZXRlZCB8fCAhcC5jb3VudGFibGUpKSB7XG4gICAgICAgIHAgPSBwLmxlZnRcbiAgICAgICAgaWYgKHAgJiYgIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgICAgIC8vIGFkanVzdCBwb3NpdGlvbi4gdGhlIGxvb3Agc2hvdWxkIGJyZWFrIG5vd1xuICAgICAgICAgIG0uaW5kZXggLT0gcC5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHAgPT09IG51bGwgfHwgcC5tYXJrZXIgPT09IHRydWUpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHNlYXJjaCBtYXJrZXIgaWYgdXBkYXRlZCBwb3NpdGlvbiBpcyBudWxsIG9yIGlmIHBvc2l0aW9uIGlzIGFscmVhZHkgbWFya2VkXG4gICAgICAgIHNlYXJjaE1hcmtlci5zcGxpY2UoaSwgMSlcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIG0ucCA9IHBcbiAgICAgIHAubWFya2VyID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAoaW5kZXggPCBtLmluZGV4IHx8IChsZW4gPiAwICYmIGluZGV4ID09PSBtLmluZGV4KSkgeyAvLyBhIHNpbXBsZSBpbmRleCA8PSBtLmluZGV4IGNoZWNrIHdvdWxkIGFjdHVhbGx5IHN1ZmZpY2VcbiAgICAgIG0uaW5kZXggPSBtYXRoLm1heChpbmRleCwgbS5pbmRleCArIGxlbilcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlIGFsbCAobGlzdCkgY2hpbGRyZW4gb2YgYSB0eXBlIGFuZCByZXR1cm4gdGhlbSBhcyBhbiBBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0XG4gKiBAcmV0dXJuIHtBcnJheTxJdGVtPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFR5cGVDaGlsZHJlbiA9IHQgPT4ge1xuICBsZXQgcyA9IHQuX3N0YXJ0XG4gIGNvbnN0IGFyciA9IFtdXG4gIHdoaWxlIChzKSB7XG4gICAgYXJyLnB1c2gocylcbiAgICBzID0gcy5yaWdodFxuICB9XG4gIHJldHVybiBhcnJcbn1cblxuLyoqXG4gKiBDYWxsIGV2ZW50IGxpc3RlbmVycyB3aXRoIGFuIGV2ZW50LiBUaGlzIHdpbGwgYWxzbyBhZGQgYW4gZXZlbnQgdG8gYWxsXG4gKiBwYXJlbnRzIChmb3IgYC5vYnNlcnZlRGVlcGAgaGFuZGxlcnMpLlxuICpcbiAqIEB0ZW1wbGF0ZSBFdmVudFR5cGVcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPEV2ZW50VHlwZT59IHR5cGVcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0V2ZW50VHlwZX0gZXZlbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGxUeXBlT2JzZXJ2ZXJzID0gKHR5cGUsIHRyYW5zYWN0aW9uLCBldmVudCkgPT4ge1xuICBjb25zdCBjaGFuZ2VkVHlwZSA9IHR5cGVcbiAgY29uc3QgY2hhbmdlZFBhcmVudFR5cGVzID0gdHJhbnNhY3Rpb24uY2hhbmdlZFBhcmVudFR5cGVzXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1hcC5zZXRJZlVuZGVmaW5lZChjaGFuZ2VkUGFyZW50VHlwZXMsIHR5cGUsICgpID0+IFtdKS5wdXNoKGV2ZW50KVxuICAgIGlmICh0eXBlLl9pdGVtID09PSBudWxsKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICB0eXBlID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHR5cGUuX2l0ZW0ucGFyZW50KVxuICB9XG4gIGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMoY2hhbmdlZFR5cGUuX2VILCBldmVudCwgdHJhbnNhY3Rpb24pXG59XG5cbi8qKlxuICogQHRlbXBsYXRlIEV2ZW50VHlwZVxuICogQWJzdHJhY3QgWWpzIFR5cGUgY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEFic3RyYWN0VHlwZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX2l0ZW0gPSBudWxsXG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsSXRlbT59XG4gICAgICovXG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpXG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9zdGFydCA9IG51bGxcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RG9jfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5kb2MgPSBudWxsXG4gICAgdGhpcy5fbGVuZ3RoID0gMFxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXJzXG4gICAgICogQHR5cGUge0V2ZW50SGFuZGxlcjxFdmVudFR5cGUsVHJhbnNhY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuX2VIID0gY3JlYXRlRXZlbnRIYW5kbGVyKClcbiAgICAvKipcbiAgICAgKiBEZWVwIGV2ZW50IGhhbmRsZXJzXG4gICAgICogQHR5cGUge0V2ZW50SGFuZGxlcjxBcnJheTxZRXZlbnQ8YW55Pj4sVHJhbnNhY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuX2RFSCA9IGNyZWF0ZUV2ZW50SGFuZGxlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59XG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoTWFya2VyID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxhbnk+fG51bGx9XG4gICAqL1xuICBnZXQgcGFyZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbSA/IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLl9pdGVtLnBhcmVudCkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICB0aGlzLmRvYyA9IHlcbiAgICB0aGlzLl9pdGVtID0gaXRlbVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxFdmVudFR5cGU+fVxuICAgKi9cbiAgX2NvcHkgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxFdmVudFR5cGU+fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBfZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChfZW5jb2RlcikgeyB9XG5cbiAgLyoqXG4gICAqIFRoZSBmaXJzdCBub24tZGVsZXRlZCBpdGVtXG4gICAqL1xuICBnZXQgX2ZpcnN0ICgpIHtcbiAgICBsZXQgbiA9IHRoaXMuX3N0YXJ0XG4gICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICBuID0gbi5yaWdodFxuICAgIH1cbiAgICByZXR1cm4gblxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWUV2ZW50IGFuZCBjYWxscyBhbGwgdHlwZSBvYnNlcnZlcnMuXG4gICAqIE11c3QgYmUgaW1wbGVtZW50ZWQgYnkgZWFjaCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IF9wYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBfcGFyZW50U3Vicykge1xuICAgIGlmICghdHJhbnNhY3Rpb24ubG9jYWwgJiYgdGhpcy5fc2VhcmNoTWFya2VyKSB7XG4gICAgICB0aGlzLl9zZWFyY2hNYXJrZXIubGVuZ3RoID0gMFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlIGFsbCBldmVudHMgdGhhdCBhcmUgY3JlYXRlZCBvbiB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXZlbnRUeXBlLCBUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgb2JzZXJ2ZSAoZikge1xuICAgIGFkZEV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2VILCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmUgYWxsIGV2ZW50cyB0aGF0IGFyZSBjcmVhdGVkIGJ5IHRoaXMgdHlwZSBhbmQgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEFycmF5PFlFdmVudDxhbnk+PixUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgb2JzZXJ2ZURlZXAgKGYpIHtcbiAgICBhZGRFdmVudEhhbmRsZXJMaXN0ZW5lcih0aGlzLl9kRUgsIGYpXG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhbiBvYnNlcnZlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihFdmVudFR5cGUsVHJhbnNhY3Rpb24pOnZvaWR9IGYgT2JzZXJ2ZXIgZnVuY3Rpb25cbiAgICovXG4gIHVub2JzZXJ2ZSAoZikge1xuICAgIHJlbW92ZUV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2VILCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYW4gb2JzZXJ2ZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXk8WUV2ZW50PGFueT4+LFRyYW5zYWN0aW9uKTp2b2lkfSBmIE9ic2VydmVyIGZ1bmN0aW9uXG4gICAqL1xuICB1bm9ic2VydmVEZWVwIChmKSB7XG4gICAgcmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIodGhpcy5fZEVILCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICB0b0pTT04gKCkge31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZUxpc3RTbGljZSA9ICh0eXBlLCBzdGFydCwgZW5kKSA9PiB7XG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IHR5cGUuX2xlbmd0aCArIHN0YXJ0XG4gIH1cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgPSB0eXBlLl9sZW5ndGggKyBlbmRcbiAgfVxuICBsZXQgbGVuID0gZW5kIC0gc3RhcnRcbiAgY29uc3QgY3MgPSBbXVxuICBsZXQgbiA9IHR5cGUuX3N0YXJ0XG4gIHdoaWxlIChuICE9PSBudWxsICYmIGxlbiA+IDApIHtcbiAgICBpZiAobi5jb3VudGFibGUgJiYgIW4uZGVsZXRlZCkge1xuICAgICAgY29uc3QgYyA9IG4uY29udGVudC5nZXRDb250ZW50KClcbiAgICAgIGlmIChjLmxlbmd0aCA8PSBzdGFydCkge1xuICAgICAgICBzdGFydCAtPSBjLmxlbmd0aFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgYy5sZW5ndGggJiYgbGVuID4gMDsgaSsrKSB7XG4gICAgICAgICAgY3MucHVzaChjW2ldKVxuICAgICAgICAgIGxlbi0tXG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQgPSAwXG4gICAgICB9XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0XG4gIH1cbiAgcmV0dXJuIGNzXG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlTGlzdFRvQXJyYXkgPSB0eXBlID0+IHtcbiAgY29uc3QgY3MgPSBbXVxuICBsZXQgbiA9IHR5cGUuX3N0YXJ0XG4gIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmICFuLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3MucHVzaChjW2ldKVxuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodFxuICB9XG4gIHJldHVybiBjc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVMaXN0VG9BcnJheVNuYXBzaG90ID0gKHR5cGUsIHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGNzID0gW11cbiAgbGV0IG4gPSB0eXBlLl9zdGFydFxuICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiBpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNzLnB1c2goY1tpXSlcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHRcbiAgfVxuICByZXR1cm4gY3Ncbn1cblxuLyoqXG4gKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxudW1iZXIsYW55KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVMaXN0Rm9yRWFjaCA9ICh0eXBlLCBmKSA9PiB7XG4gIGxldCBpbmRleCA9IDBcbiAgbGV0IG4gPSB0eXBlLl9zdGFydFxuICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGYoY1tpXSwgaW5kZXgrKywgdHlwZSlcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHRcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBDLFJcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQyxudW1iZXIsQWJzdHJhY3RUeXBlPGFueT4pOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVMaXN0TWFwID0gKHR5cGUsIGYpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgdHlwZUxpc3RGb3JFYWNoKHR5cGUsIChjLCBpKSA9PiB7XG4gICAgcmVzdWx0LnB1c2goZihjLCBpLCB0eXBlKSlcbiAgfSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlTGlzdENyZWF0ZUl0ZXJhdG9yID0gdHlwZSA9PiB7XG4gIGxldCBuID0gdHlwZS5fc3RhcnRcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxhbnk+fG51bGx9XG4gICAqL1xuICBsZXQgY3VycmVudENvbnRlbnQgPSBudWxsXG4gIGxldCBjdXJyZW50Q29udGVudEluZGV4ID0gMFxuICByZXR1cm4ge1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAvLyBmaW5kIHNvbWUgY29udGVudFxuICAgICAgaWYgKGN1cnJlbnRDb250ZW50ID09PSBudWxsKSB7XG4gICAgICAgIHdoaWxlIChuICE9PSBudWxsICYmIG4uZGVsZXRlZCkge1xuICAgICAgICAgIG4gPSBuLnJpZ2h0XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgcmVhY2hlZCB0aGUgZW5kLCBubyBuZWVkIHRvIGNoZWNrIGN1cnJlbnRDb250ZW50LCBiZWNhdXNlIGl0IGRvZXMgbm90IGV4aXN0XG4gICAgICAgIGlmIChuID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGZvdW5kIG4sIHNvIHdlIGNhbiBzZXQgY3VycmVudENvbnRlbnRcbiAgICAgICAgY3VycmVudENvbnRlbnQgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpXG4gICAgICAgIGN1cnJlbnRDb250ZW50SW5kZXggPSAwXG4gICAgICAgIG4gPSBuLnJpZ2h0IC8vIHdlIHVzZWQgdGhlIGNvbnRlbnQgb2Ygbiwgbm93IGl0ZXJhdGUgdG8gbmV4dFxuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50Q29udGVudFtjdXJyZW50Q29udGVudEluZGV4KytdXG4gICAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIGVtcHR5IGN1cnJlbnRDb250ZW50XG4gICAgICBpZiAoY3VycmVudENvbnRlbnQubGVuZ3RoIDw9IGN1cnJlbnRDb250ZW50SW5kZXgpIHtcbiAgICAgICAgY3VycmVudENvbnRlbnQgPSBudWxsXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAqIE9wZXJhdGVzIG9uIGEgc25hcHNob3R0ZWQgc3RhdGUgb2YgdGhlIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LG51bWJlcixBYnN0cmFjdFR5cGU8YW55Pik6dm9pZH0gZiBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZUxpc3RGb3JFYWNoU25hcHNob3QgPSAodHlwZSwgZiwgc25hcHNob3QpID0+IHtcbiAgbGV0IGluZGV4ID0gMFxuICBsZXQgbiA9IHR5cGUuX3N0YXJ0XG4gIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmIGlzVmlzaWJsZShuLCBzbmFwc2hvdCkpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZihjW2ldLCBpbmRleCsrLCB0eXBlKVxuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHthbnl9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZUxpc3RHZXQgPSAodHlwZSwgaW5kZXgpID0+IHtcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcih0eXBlLCBpbmRleClcbiAgbGV0IG4gPSB0eXBlLl9zdGFydFxuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgbiA9IG1hcmtlci5wXG4gICAgaW5kZXggLT0gbWFya2VyLmluZGV4XG4gIH1cbiAgZm9yICg7IG4gIT09IG51bGw7IG4gPSBuLnJpZ2h0KSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuLmNvbnRlbnQuZ2V0Q29udGVudCgpW2luZGV4XVxuICAgICAgfVxuICAgICAgaW5kZXggLT0gbi5sZW5ndGhcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW0/fSByZWZlcmVuY2VJdGVtXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fGJvb2xlYW58bnVtYmVyfG51bGx8c3RyaW5nfFVpbnQ4QXJyYXk+fSBjb250ZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIHJlZmVyZW5jZUl0ZW0sIGNvbnRlbnQpID0+IHtcbiAgbGV0IGxlZnQgPSByZWZlcmVuY2VJdGVtXG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvY1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRFxuICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZVxuICBjb25zdCByaWdodCA9IHJlZmVyZW5jZUl0ZW0gPT09IG51bGwgPyBwYXJlbnQuX3N0YXJ0IDogcmVmZXJlbmNlSXRlbS5yaWdodFxuICAvKipcbiAgICogQHR5cGUge0FycmF5PE9iamVjdHxBcnJheTxhbnk+fG51bWJlcnxudWxsPn1cbiAgICovXG4gIGxldCBqc29uQ29udGVudCA9IFtdXG4gIGNvbnN0IHBhY2tKc29uQ29udGVudCA9ICgpID0+IHtcbiAgICBpZiAoanNvbkNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50QW55KGpzb25Db250ZW50KSlcbiAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKVxuICAgICAganNvbkNvbnRlbnQgPSBbXVxuICAgIH1cbiAgfVxuICBjb250ZW50LmZvckVhY2goYyA9PiB7XG4gICAgaWYgKGMgPT09IG51bGwpIHtcbiAgICAgIGpzb25Db250ZW50LnB1c2goYylcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICBjYXNlIFN0cmluZzpcbiAgICAgICAgICBqc29uQ29udGVudC5wdXNoKGMpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwYWNrSnNvbkNvbnRlbnQoKVxuICAgICAgICAgIHN3aXRjaCAoYy5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBVaW50OEFycmF5OlxuICAgICAgICAgICAgY2FzZSBBcnJheUJ1ZmZlcjpcbiAgICAgICAgICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50QmluYXJ5KG5ldyBVaW50OEFycmF5KC8qKiBAdHlwZSB7VWludDhBcnJheX0gKi8gKGMpKSkpXG4gICAgICAgICAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBEb2M6XG4gICAgICAgICAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudERvYygvKiogQHR5cGUge0RvY30gKi8gKGMpKSlcbiAgICAgICAgICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSkge1xuICAgICAgICAgICAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudFR5cGUoYykpXG4gICAgICAgICAgICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGNvbnRlbnQgdHlwZSBpbiBpbnNlcnQgb3BlcmF0aW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHBhY2tKc29uQ29udGVudCgpXG59XG5cbmNvbnN0IGxlbmd0aEV4Y2VlZGVkID0gKCkgPT4gZXJyb3IuY3JlYXRlKCdMZW5ndGggZXhjZWVkZWQhJylcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58bnVtYmVyfG51bGx8c3RyaW5nfFVpbnQ4QXJyYXk+fSBjb250ZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZUxpc3RJbnNlcnRHZW5lcmljcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBpbmRleCwgY29udGVudCkgPT4ge1xuICBpZiAoaW5kZXggPiBwYXJlbnQuX2xlbmd0aCkge1xuICAgIHRocm93IGxlbmd0aEV4Y2VlZGVkKClcbiAgfVxuICBpZiAoaW5kZXggPT09IDApIHtcbiAgICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIGluZGV4LCBjb250ZW50Lmxlbmd0aClcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgcGFyZW50LCBudWxsLCBjb250ZW50KVxuICB9XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleFxuICBjb25zdCBtYXJrZXIgPSBmaW5kTWFya2VyKHBhcmVudCwgaW5kZXgpXG4gIGxldCBuID0gcGFyZW50Ll9zdGFydFxuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgbiA9IG1hcmtlci5wXG4gICAgaW5kZXggLT0gbWFya2VyLmluZGV4XG4gICAgLy8gd2UgbmVlZCB0byBpdGVyYXRlIG9uZSB0byB0aGUgbGVmdCBzbyB0aGF0IHRoZSBhbGdvcml0aG0gd29ya3NcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIC8vIEB0b2RvIHJlZmFjdG9yIHRoaXMgYXMgaXQgYWN0dWFsbHkgZG9lc24ndCBjb25zaWRlciBmb3JtYXRzXG4gICAgICBuID0gbi5wcmV2IC8vIGltcG9ydGFudCEgZ2V0IHRoZSBsZWZ0IHVuZGVsZXRlZCBpdGVtIHNvIHRoYXQgd2UgY2FuIGFjdHVhbGx5IGRlY3JlYXNlIGluZGV4XG4gICAgICBpbmRleCArPSAobiAmJiBuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSA/IG4ubGVuZ3RoIDogMFxuICAgIH1cbiAgfVxuICBmb3IgKDsgbiAhPT0gbnVsbDsgbiA9IG4ucmlnaHQpIHtcbiAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDw9IG4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGluLWJldHdlZW5cbiAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQobi5pZC5jbGllbnQsIG4uaWQuY2xvY2sgKyBpbmRleCkpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGluZGV4IC09IG4ubGVuZ3RoXG4gICAgfVxuICB9XG4gIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIHN0YXJ0SW5kZXgsIGNvbnRlbnQubGVuZ3RoKVxuICB9XG4gIHJldHVybiB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHBhcmVudCwgbiwgY29udGVudClcbn1cblxuLyoqXG4gKiBQdXNoaW5nIGNvbnRlbnQgaXMgc3BlY2lhbCBhcyB3ZSBnZW5lcmFsbHkgd2FudCB0byBwdXNoIGFmdGVyIHRoZSBsYXN0IGl0ZW0uIFNvIHdlIGRvbid0IGhhdmUgdG8gdXBkYXRlXG4gKiB0aGUgc2VyYWNoIG1hcmtlci5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fG51bWJlcnxudWxsfHN0cmluZ3xVaW50OEFycmF5Pn0gY29udGVudFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVMaXN0UHVzaEdlbmVyaWNzID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGNvbnRlbnQpID0+IHtcbiAgLy8gVXNlIHRoZSBtYXJrZXIgd2l0aCB0aGUgaGlnaGVzdCBpbmRleCBhbmQgaXRlcmF0ZSB0byB0aGUgcmlnaHQuXG4gIGNvbnN0IG1hcmtlciA9IChwYXJlbnQuX3NlYXJjaE1hcmtlciB8fCBbXSkucmVkdWNlKChtYXhNYXJrZXIsIGN1cnJNYXJrZXIpID0+IGN1cnJNYXJrZXIuaW5kZXggPiBtYXhNYXJrZXIuaW5kZXggPyBjdXJyTWFya2VyIDogbWF4TWFya2VyLCB7IGluZGV4OiAwLCBwOiBwYXJlbnQuX3N0YXJ0IH0pXG4gIGxldCBuID0gbWFya2VyLnBcbiAgaWYgKG4pIHtcbiAgICB3aGlsZSAobi5yaWdodCkge1xuICAgICAgbiA9IG4ucmlnaHRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgcGFyZW50LCBuLCBjb250ZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVMaXN0RGVsZXRlID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGluZGV4LCBsZW5ndGgpID0+IHtcbiAgaWYgKGxlbmd0aCA9PT0gMCkgeyByZXR1cm4gfVxuICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXhcbiAgY29uc3Qgc3RhcnRMZW5ndGggPSBsZW5ndGhcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcihwYXJlbnQsIGluZGV4KVxuICBsZXQgbiA9IHBhcmVudC5fc3RhcnRcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIG4gPSBtYXJrZXIucFxuICAgIGluZGV4IC09IG1hcmtlci5pbmRleFxuICB9XG4gIC8vIGNvbXB1dGUgdGhlIGZpcnN0IGl0ZW0gdG8gYmUgZGVsZXRlZFxuICBmb3IgKDsgbiAhPT0gbnVsbCAmJiBpbmRleCA+IDA7IG4gPSBuLnJpZ2h0KSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChuLmlkLmNsaWVudCwgbi5pZC5jbG9jayArIGluZGV4KSlcbiAgICAgIH1cbiAgICAgIGluZGV4IC09IG4ubGVuZ3RoXG4gICAgfVxuICB9XG4gIC8vIGRlbGV0ZSBhbGwgaXRlbXMgdW50aWwgZG9uZVxuICB3aGlsZSAobGVuZ3RoID4gMCAmJiBuICE9PSBudWxsKSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBuLmxlbmd0aCkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQobi5pZC5jbGllbnQsIG4uaWQuY2xvY2sgKyBsZW5ndGgpKVxuICAgICAgfVxuICAgICAgbi5kZWxldGUodHJhbnNhY3Rpb24pXG4gICAgICBsZW5ndGggLT0gbi5sZW5ndGhcbiAgICB9XG4gICAgbiA9IG4ucmlnaHRcbiAgfVxuICBpZiAobGVuZ3RoID4gMCkge1xuICAgIHRocm93IGxlbmd0aEV4Y2VlZGVkKClcbiAgfVxuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBzdGFydEluZGV4LCAtc3RhcnRMZW5ndGggKyBsZW5ndGggLyogaW4gY2FzZSB3ZSByZW1vdmUgdGhlIGFib3ZlIGV4Y2VwdGlvbiAqLylcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlTWFwRGVsZXRlID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGtleSkgPT4ge1xuICBjb25zdCBjID0gcGFyZW50Ll9tYXAuZ2V0KGtleSlcbiAgaWYgKGMgIT09IHVuZGVmaW5lZCkge1xuICAgIGMuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtPYmplY3R8bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pn0gdmFsdWVcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlTWFwU2V0ID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGtleSwgdmFsdWUpID0+IHtcbiAgY29uc3QgbGVmdCA9IHBhcmVudC5fbWFwLmdldChrZXkpIHx8IG51bGxcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jXG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEXG4gIGxldCBjb250ZW50XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgY29udGVudCA9IG5ldyBDb250ZW50QW55KFt2YWx1ZV0pXG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoICh2YWx1ZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICBjYXNlIFN0cmluZzpcbiAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50QW55KFt2YWx1ZV0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFVpbnQ4QXJyYXk6XG4gICAgICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudEJpbmFyeSgvKiogQHR5cGUge1VpbnQ4QXJyYXl9ICovICh2YWx1ZSkpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIERvYzpcbiAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50RG9jKC8qKiBAdHlwZSB7RG9jfSAqLyAodmFsdWUpKVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlKSB7XG4gICAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50VHlwZSh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29udGVudCB0eXBlJylcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCBudWxsLCBudWxsLCBwYXJlbnQsIGtleSwgY29udGVudCkuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVNYXBHZXQgPSAocGFyZW50LCBrZXkpID0+IHtcbiAgY29uc3QgdmFsID0gcGFyZW50Ll9tYXAuZ2V0KGtleSlcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkICYmICF2YWwuZGVsZXRlZCA/IHZhbC5jb250ZW50LmdldENvbnRlbnQoKVt2YWwubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsT2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkPn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlTWFwR2V0QWxsID0gKHBhcmVudCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICovXG4gIGNvbnN0IHJlcyA9IHt9XG4gIHBhcmVudC5fbWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICBpZiAoIXZhbHVlLmRlbGV0ZWQpIHtcbiAgICAgIHJlc1trZXldID0gdmFsdWUuY29udGVudC5nZXRDb250ZW50KClbdmFsdWUubGVuZ3RoIC0gMV1cbiAgICB9XG4gIH0pXG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgdHlwZU1hcEhhcyA9IChwYXJlbnQsIGtleSkgPT4ge1xuICBjb25zdCB2YWwgPSBwYXJlbnQuX21hcC5nZXQoa2V5KVxuICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgJiYgIXZhbC5kZWxldGVkXG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVNYXBHZXRTbmFwc2hvdCA9IChwYXJlbnQsIGtleSwgc25hcHNob3QpID0+IHtcbiAgbGV0IHYgPSBwYXJlbnQuX21hcC5nZXQoa2V5KSB8fCBudWxsXG4gIHdoaWxlICh2ICE9PSBudWxsICYmICghc25hcHNob3Quc3YuaGFzKHYuaWQuY2xpZW50KSB8fCB2LmlkLmNsb2NrID49IChzbmFwc2hvdC5zdi5nZXQodi5pZC5jbGllbnQpIHx8IDApKSkge1xuICAgIHYgPSB2LmxlZnRcbiAgfVxuICByZXR1cm4gdiAhPT0gbnVsbCAmJiBpc1Zpc2libGUodiwgc25hcHNob3QpID8gdi5jb250ZW50LmdldENvbnRlbnQoKVt2Lmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxPYmplY3Q8c3RyaW5nLGFueT58bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pnx1bmRlZmluZWQ+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVNYXBHZXRBbGxTbmFwc2hvdCA9IChwYXJlbnQsIHNuYXBzaG90KSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgKi9cbiAgY29uc3QgcmVzID0ge31cbiAgcGFyZW50Ll9tYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgbGV0IHYgPSB2YWx1ZVxuICAgIHdoaWxlICh2ICE9PSBudWxsICYmICghc25hcHNob3Quc3YuaGFzKHYuaWQuY2xpZW50KSB8fCB2LmlkLmNsb2NrID49IChzbmFwc2hvdC5zdi5nZXQodi5pZC5jbGllbnQpIHx8IDApKSkge1xuICAgICAgdiA9IHYubGVmdFxuICAgIH1cbiAgICBpZiAodiAhPT0gbnVsbCAmJiBpc1Zpc2libGUodiwgc25hcHNob3QpKSB7XG4gICAgICByZXNba2V5XSA9IHYuY29udGVudC5nZXRDb250ZW50KClbdi5sZW5ndGggLSAxXVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxJdGVtPn0gbWFwXG4gKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPEFycmF5PGFueT4+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcEl0ZXJhdG9yID0gbWFwID0+IGl0ZXJhdG9yLml0ZXJhdG9yRmlsdGVyKG1hcC5lbnRyaWVzKCksIC8qKiBAcGFyYW0ge2FueX0gZW50cnkgKi8gZW50cnkgPT4gIWVudHJ5WzFdLmRlbGV0ZWQpXG4iLCAiLyoqXG4gKiBAbW9kdWxlIFlBcnJheVxuICovXG5cbmltcG9ydCB7XG4gIFlFdmVudCxcbiAgQWJzdHJhY3RUeXBlLFxuICB0eXBlTGlzdEdldCxcbiAgdHlwZUxpc3RUb0FycmF5LFxuICB0eXBlTGlzdEZvckVhY2gsXG4gIHR5cGVMaXN0Q3JlYXRlSXRlcmF0b3IsXG4gIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3MsXG4gIHR5cGVMaXN0UHVzaEdlbmVyaWNzLFxuICB0eXBlTGlzdERlbGV0ZSxcbiAgdHlwZUxpc3RNYXAsXG4gIFlBcnJheVJlZklELFxuICBjYWxsVHlwZU9ic2VydmVycyxcbiAgdHJhbnNhY3QsXG4gIEFycmF5U2VhcmNoTWFya2VyLCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIERvYywgVHJhbnNhY3Rpb24sIEl0ZW0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5pbXBvcnQgeyB0eXBlTGlzdFNsaWNlIH0gZnJvbSAnLi9BYnN0cmFjdFR5cGUuanMnXG5cbi8qKlxuICogRXZlbnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZQXJyYXlcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WUFycmF5PFQ+PlxuICovXG5leHBvcnQgY2xhc3MgWUFycmF5RXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZQXJyYXk8VD59IHlhcnJheSBUaGUgY2hhbmdlZCB0eXBlXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uIFRoZSB0cmFuc2FjdGlvbiBvYmplY3RcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5YXJyYXksIHRyYW5zYWN0aW9uKSB7XG4gICAgc3VwZXIoeWFycmF5LCB0cmFuc2FjdGlvbilcbiAgICB0aGlzLl90cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBBIHNoYXJlZCBBcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WUFycmF5RXZlbnQ8VD4+XG4gKiBAaW1wbGVtZW50cyB7SXRlcmFibGU8VD59XG4gKi9cbmV4cG9ydCBjbGFzcyBZQXJyYXkgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBbXVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59XG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoTWFya2VyID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgWUFycmF5IGNvbnRhaW5pbmcgdGhlIHNwZWNpZmllZCBpdGVtcy5cbiAgICogQHRlbXBsYXRlIHtPYmplY3Q8c3RyaW5nLGFueT58QXJyYXk8YW55PnxudW1iZXJ8bnVsbHxzdHJpbmd8VWludDhBcnJheX0gVFxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBpdGVtc1xuICAgKiBAcmV0dXJuIHtZQXJyYXk8VD59XG4gICAqL1xuICBzdGF0aWMgZnJvbSAoaXRlbXMpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7WUFycmF5PFQ+fVxuICAgICAqL1xuICAgIGNvbnN0IGEgPSBuZXcgWUFycmF5KClcbiAgICBhLnB1c2goaXRlbXMpXG4gICAgcmV0dXJuIGFcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pXG4gICAgdGhpcy5pbnNlcnQoMCwgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkpXG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZQXJyYXk8VD59XG4gICAqL1xuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZQXJyYXkoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lBcnJheTxUPn1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7WUFycmF5PFQ+fVxuICAgICAqL1xuICAgIGNvbnN0IGFyciA9IG5ldyBZQXJyYXkoKVxuICAgIGFyci5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGVsID0+XG4gICAgICBlbCBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IC8qKiBAdHlwZSB7dHlwZW9mIGVsfSAqLyAoZWwuY2xvbmUoKSkgOiBlbFxuICAgICkpXG4gICAgcmV0dXJuIGFyclxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWxpbUNvbnRlbnQgPT09IG51bGwgPyB0aGlzLl9sZW5ndGggOiB0aGlzLl9wcmVsaW1Db250ZW50Lmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWUFycmF5RXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgc3VwZXIuX2NhbGxPYnNlcnZlcih0cmFuc2FjdGlvbiwgcGFyZW50U3VicylcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgbmV3IFlBcnJheUV2ZW50KHRoaXMsIHRyYW5zYWN0aW9uKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBjb250ZW50IGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBJbXBvcnRhbnQ6IFRoaXMgZnVuY3Rpb24gZXhwZWN0cyBhbiBhcnJheSBvZiBjb250ZW50LiBOb3QganVzdCBhIGNvbnRlbnRcbiAgICogb2JqZWN0LiBUaGUgcmVhc29uIGZvciB0aGlzIFwid2VpcmRuZXNzXCIgaXMgdGhhdCBpbnNlcnRpbmcgc2V2ZXJhbCBlbGVtZW50c1xuICAgKiBpcyB2ZXJ5IGVmZmljaWVudCB3aGVuIGl0IGlzIGRvbmUgYXMgYSBzaW5nbGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gSW5zZXJ0IGNoYXJhY3RlciAnYScgYXQgcG9zaXRpb24gMFxuICAgKiAgeWFycmF5Lmluc2VydCgwLCBbJ2EnXSlcbiAgICogIC8vIEluc2VydCBudW1iZXJzIDEsIDIgYXQgcG9zaXRpb24gMVxuICAgKiAgeWFycmF5Lmluc2VydCgxLCBbMSwgMl0pXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IGNvbnRlbnQgYXQuXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGNvbnRlbnQgVGhlIGFycmF5IG9mIGNvbnRlbnRcbiAgICovXG4gIGluc2VydCAoaW5kZXgsIGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3ModHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4LCAvKiogQHR5cGUge2FueX0gKi8gKGNvbnRlbnQpKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuc3BsaWNlKGluZGV4LCAwLCAuLi5jb250ZW50KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBhcHBlbmQuXG4gICAqXG4gICAqIEB0b2RvIFVzZSB0aGUgZm9sbG93aW5nIGltcGxlbWVudGF0aW9uIGluIGFsbCB0eXBlcy5cbiAgICovXG4gIHB1c2ggKGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0UHVzaEdlbmVyaWNzKHRyYW5zYWN0aW9uLCB0aGlzLCAvKiogQHR5cGUge2FueX0gKi8gKGNvbnRlbnQpKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkucHVzaCguLi5jb250ZW50KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gY29udGVudCBBcnJheSBvZiBjb250ZW50IHRvIHByZXBwZW5kLlxuICAgKi9cbiAgdW5zaGlmdCAoY29udGVudCkge1xuICAgIHRoaXMuaW5zZXJ0KDAsIGNvbnRlbnQpXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBlbGVtZW50cyBzdGFydGluZyBmcm9tIGFuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgZGVsZXRpbmcgZWxlbWVudHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIGRlbGV0ZSAoaW5kZXgsIGxlbmd0aCA9IDEpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0RGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgbGVuZ3RoKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuc3BsaWNlKGluZGV4LCBsZW5ndGgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGktdGggZWxlbWVudCBmcm9tIGEgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybiBmcm9tIHRoZSBZQXJyYXlcbiAgICogQHJldHVybiB7VH1cbiAgICovXG4gIGdldCAoaW5kZXgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RHZXQodGhpcywgaW5kZXgpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFlBcnJheSB0byBhIEphdmFTY3JpcHQgQXJyYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICAgKi9cbiAgdG9BcnJheSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0VG9BcnJheSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBZQXJyYXkgdG8gYSBKYXZhU2NyaXB0IEFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF1cbiAgICogQHJldHVybiB7QXJyYXk8VD59XG4gICAqL1xuICBzbGljZSAoc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiB0eXBlTGlzdFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFNoYXJlZCBUeXBlIHRvIGEgSlNPTiBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChjID0+IGMgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBjLnRvSlNPTigpIDogYylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIEFycmF5IHdpdGggdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gZXZlcnlcbiAgICogZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHRlbXBsYXRlIE1cbiAgICogQHBhcmFtIHtmdW5jdGlvbihULG51bWJlcixZQXJyYXk8VD4pOk19IGYgRnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBlbGVtZW50IG9mIHRoZSBuZXcgQXJyYXlcbiAgICogQHJldHVybiB7QXJyYXk8TT59IEEgbmV3IGFycmF5IHdpdGggZWFjaCBlbGVtZW50IGJlaW5nIHRoZSByZXN1bHQgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgICBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgbWFwIChmKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0TWFwKHRoaXMsIC8qKiBAdHlwZSB7YW55fSAqLyAoZikpXG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBvbmNlIG9uIG92ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVCxudW1iZXIsWUFycmF5PFQ+KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8VD59XG4gICAqL1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0Q3JlYXRlSXRlcmF0b3IodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWUFycmF5UmVmSUQpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gX2RlY29kZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkWUFycmF5ID0gX2RlY29kZXIgPT4gbmV3IFlBcnJheSgpXG4iLCAiLyoqXG4gKiBAbW9kdWxlIFlNYXBcbiAqL1xuXG5pbXBvcnQge1xuICBZRXZlbnQsXG4gIEFic3RyYWN0VHlwZSxcbiAgdHlwZU1hcERlbGV0ZSxcbiAgdHlwZU1hcFNldCxcbiAgdHlwZU1hcEdldCxcbiAgdHlwZU1hcEhhcyxcbiAgY3JlYXRlTWFwSXRlcmF0b3IsXG4gIFlNYXBSZWZJRCxcbiAgY2FsbFR5cGVPYnNlcnZlcnMsXG4gIHRyYW5zYWN0LFxuICBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIERvYywgVHJhbnNhY3Rpb24sIEl0ZW0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJ2xpYjAvaXRlcmF0b3InXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBleHRlbmRzIFlFdmVudDxZTWFwPFQ+PlxuICogRXZlbnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZTWFwLlxuICovXG5leHBvcnQgY2xhc3MgWU1hcEV2ZW50IGV4dGVuZHMgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WU1hcDxUPn0geW1hcCBUaGUgWUFycmF5IHRoYXQgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8YW55Pn0gc3VicyBUaGUga2V5cyB0aGF0IGNoYW5nZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeW1hcCwgdHJhbnNhY3Rpb24sIHN1YnMpIHtcbiAgICBzdXBlcih5bWFwLCB0cmFuc2FjdGlvbilcbiAgICB0aGlzLmtleXNDaGFuZ2VkID0gc3Vic1xuICB9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIE1hcFR5cGVcbiAqIEEgc2hhcmVkIE1hcCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WU1hcEV2ZW50PE1hcFR5cGU+PlxuICogQGltcGxlbWVudHMge0l0ZXJhYmxlPFtzdHJpbmcsIE1hcFR5cGVdPn1cbiAqL1xuZXhwb3J0IGNsYXNzIFlNYXAgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtJdGVyYWJsZTxyZWFkb25seSBbc3RyaW5nLCBhbnldPj19IGVudHJpZXMgLSBhbiBvcHRpb25hbCBpdGVyYWJsZSB0byBpbml0aWFsaXplIHRoZSBZTWFwXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZW50cmllcykge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxhbnk+P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsXG5cbiAgICBpZiAoZW50cmllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbmV3IE1hcCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBuZXcgTWFwKGVudHJpZXMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSlcbiAgICA7LyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSlcbiAgICB9KVxuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WU1hcDxNYXBUeXBlPn1cbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lNYXA8TWFwVHlwZT59XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1lNYXA8TWFwVHlwZT59XG4gICAgICovXG4gICAgY29uc3QgbWFwID0gbmV3IFlNYXAoKVxuICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgbWFwLnNldChrZXksIHZhbHVlIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gLyoqIEB0eXBlIHt0eXBlb2YgdmFsdWV9ICovICh2YWx1ZS5jbG9uZSgpKSA6IHZhbHVlKVxuICAgIH0pXG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWU1hcEV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIGNhbGxUeXBlT2JzZXJ2ZXJzKHRoaXMsIHRyYW5zYWN0aW9uLCBuZXcgWU1hcEV2ZW50KHRoaXMsIHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgU2hhcmVkIFR5cGUgdG8gYSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxNYXBUeXBlPn1cbiAgICAgKi9cbiAgICBjb25zdCBtYXAgPSB7fVxuICAgIHRoaXMuX21hcC5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGNvbnN0IHYgPSBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpW2l0ZW0ubGVuZ3RoIC0gMV1cbiAgICAgICAgbWFwW2tleV0gPSB2IGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gdi50b0pTT04oKSA6IHZcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBZTWFwIChjb3VudCBvZiBrZXkvdmFsdWUgcGFpcnMpXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzaXplICgpIHtcbiAgICByZXR1cm4gWy4uLmNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCldLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGtleXMgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgWU1hcCBUeXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz59XG4gICAqL1xuICBrZXlzICgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IuaXRlcmF0b3JNYXAoY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKSwgLyoqIEBwYXJhbSB7YW55fSB2ICovIHYgPT4gdlswXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZXMgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgWU1hcCBUeXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPE1hcFR5cGU+fVxuICAgKi9cbiAgdmFsdWVzICgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IuaXRlcmF0b3JNYXAoY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKSwgLyoqIEBwYXJhbSB7YW55fSB2ICovIHYgPT4gdlsxXS5jb250ZW50LmdldENvbnRlbnQoKVt2WzFdLmxlbmd0aCAtIDFdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSXRlcmF0b3Igb2YgW2tleSwgdmFsdWVdIHBhaXJzXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8W3N0cmluZywgTWFwVHlwZV0+fVxuICAgKi9cbiAgZW50cmllcyAoKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLml0ZXJhdG9yTWFwKGNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCksIC8qKiBAcGFyYW0ge2FueX0gdiAqLyB2ID0+IC8qKiBAdHlwZSB7YW55fSAqLyAoW3ZbMF0sIHZbMV0uY29udGVudC5nZXRDb250ZW50KClbdlsxXS5sZW5ndGggLSAxXV0pKVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gb25jZSBvbiBldmVyeSBrZXktdmFsdWUgcGFpci5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihNYXBUeXBlLHN0cmluZyxZTWFwPE1hcFR5cGU+KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIHRoaXMuX21hcC5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGYoaXRlbS5jb250ZW50LmdldENvbnRlbnQoKVtpdGVtLmxlbmd0aCAtIDFdLCBrZXksIHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIEl0ZXJhdG9yIG9mIFtrZXksIHZhbHVlXSBwYWlyc1xuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPFtzdHJpbmcsIE1hcFR5cGVdPn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBzcGVjaWZpZWQgZWxlbWVudCBmcm9tIHRoaXMgWU1hcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAgICovXG4gIGRlbGV0ZSAoa2V5KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBrZXkpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5kZWxldGUoa2V5KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWVkIGtleSBhbmQgdmFsdWUuXG4gICAqIEB0ZW1wbGF0ZSB7TWFwVHlwZX0gVkFMXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byBhZGQgdG8gdGhpcyBZTWFwXG4gICAqIEBwYXJhbSB7VkFMfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgdG8gYWRkXG4gICAqIEByZXR1cm4ge1ZBTH1cbiAgICovXG4gIHNldCAoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcFNldCh0cmFuc2FjdGlvbiwgdGhpcywga2V5LCAvKiogQHR5cGUge2FueX0gKi8gKHZhbHVlKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLnNldChrZXksIHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSB0aGlzIFlNYXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7TWFwVHlwZXx1bmRlZmluZWR9XG4gICAqL1xuICBnZXQgKGtleSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBHZXQodGhpcywga2V5KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBrZXkgZXhpc3RzIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXMgKGtleSkge1xuICAgIHJldHVybiB0eXBlTWFwSGFzKHRoaXMsIGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIHRoaXMgWU1hcC5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoX3ZhbHVlLCBrZXksIG1hcCkge1xuICAgICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIG1hcCwga2V5KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuY2xlYXIoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWU1hcFJlZklEKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IF9kZWNvZGVyXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVhZFlNYXAgPSBfZGVjb2RlciA9PiBuZXcgWU1hcCgpXG4iLCAiLyoqXG4gKiBAbW9kdWxlIFlUZXh0XG4gKi9cblxuaW1wb3J0IHtcbiAgWUV2ZW50LFxuICBBYnN0cmFjdFR5cGUsXG4gIGdldEl0ZW1DbGVhblN0YXJ0LFxuICBnZXRTdGF0ZSxcbiAgaXNWaXNpYmxlLFxuICBjcmVhdGVJRCxcbiAgWVRleHRSZWZJRCxcbiAgY2FsbFR5cGVPYnNlcnZlcnMsXG4gIHRyYW5zYWN0LFxuICBDb250ZW50RW1iZWQsXG4gIEdDLFxuICBDb250ZW50Rm9ybWF0LFxuICBDb250ZW50U3RyaW5nLFxuICBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzLFxuICBpdGVyYXRlRGVsZXRlZFN0cnVjdHMsXG4gIGl0ZXJhdGVTdHJ1Y3RzLFxuICBmaW5kTWFya2VyLFxuICB0eXBlTWFwRGVsZXRlLFxuICB0eXBlTWFwU2V0LFxuICB0eXBlTWFwR2V0LFxuICB0eXBlTWFwR2V0QWxsLFxuICB1cGRhdGVNYXJrZXJDaGFuZ2VzLFxuICBDb250ZW50VHlwZSxcbiAgQXJyYXlTZWFyY2hNYXJrZXIsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgSUQsIERvYywgSXRlbSwgU25hcHNob3QsIFRyYW5zYWN0aW9uIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBvYmplY3QgZnJvbSAnbGliMC9vYmplY3QnXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnbGliMC9tYXAnXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZXF1YWxBdHRycyA9IChhLCBiKSA9PiBhID09PSBiIHx8ICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnICYmIGEgJiYgYiAmJiBvYmplY3QuZXF1YWxGbGF0KGEsIGIpKVxuXG5leHBvcnQgY2xhc3MgSXRlbVRleHRMaXN0UG9zaXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IGxlZnRcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IHJpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gY3VycmVudEF0dHJpYnV0ZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZWZ0LCByaWdodCwgaW5kZXgsIGN1cnJlbnRBdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5sZWZ0ID0gbGVmdFxuICAgIHRoaXMucmlnaHQgPSByaWdodFxuICAgIHRoaXMuaW5kZXggPSBpbmRleFxuICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlc1xuICB9XG5cbiAgLyoqXG4gICAqIE9ubHkgY2FsbCB0aGlzIGlmIHlvdSBrbm93IHRoYXQgdGhpcy5yaWdodCBpcyBkZWZpbmVkXG4gICAqL1xuICBmb3J3YXJkICgpIHtcbiAgICBpZiAodGhpcy5yaWdodCA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICBpZiAoIXRoaXMucmlnaHQuZGVsZXRlZCkge1xuICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKHRoaXMuY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKHRoaXMucmlnaHQuY29udGVudCkpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghdGhpcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSB0aGlzLnJpZ2h0Lmxlbmd0aFxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMubGVmdCA9IHRoaXMucmlnaHRcbiAgICB0aGlzLnJpZ2h0ID0gdGhpcy5yaWdodC5yaWdodFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IHN0ZXBzIHRvIG1vdmUgZm9yd2FyZFxuICogQHJldHVybiB7SXRlbVRleHRMaXN0UG9zaXRpb259XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kTmV4dFBvc2l0aW9uID0gKHRyYW5zYWN0aW9uLCBwb3MsIGNvdW50KSA9PiB7XG4gIHdoaWxlIChwb3MucmlnaHQgIT09IG51bGwgJiYgY291bnQgPiAwKSB7XG4gICAgc3dpdGNoIChwb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICBpZiAoIXBvcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMocG9zLmN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChwb3MucmlnaHQuY29udGVudCkpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghcG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgICAgICBpZiAoY291bnQgPCBwb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBzcGxpdCByaWdodFxuICAgICAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKHBvcy5yaWdodC5pZC5jbGllbnQsIHBvcy5yaWdodC5pZC5jbG9jayArIGNvdW50KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zLmluZGV4ICs9IHBvcy5yaWdodC5sZW5ndGhcbiAgICAgICAgICBjb3VudCAtPSBwb3MucmlnaHQubGVuZ3RoXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgcG9zLmxlZnQgPSBwb3MucmlnaHRcbiAgICBwb3MucmlnaHQgPSBwb3MucmlnaHQucmlnaHRcbiAgICAvLyBwb3MuZm9yd2FyZCgpIC0gd2UgZG9uJ3QgZm9yd2FyZCBiZWNhdXNlIHRoYXQgd291bGQgaGFsdmUgdGhlIHBlcmZvcm1hbmNlIGJlY2F1c2Ugd2UgYWxyZWFkeSBkbyB0aGUgY2hlY2tzIGFib3ZlXG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtib29sZWFufSB1c2VTZWFyY2hNYXJrZXJcbiAqIEByZXR1cm4ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZFBvc2l0aW9uID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGluZGV4LCB1c2VTZWFyY2hNYXJrZXIpID0+IHtcbiAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKClcbiAgY29uc3QgbWFya2VyID0gdXNlU2VhcmNoTWFya2VyID8gZmluZE1hcmtlcihwYXJlbnQsIGluZGV4KSA6IG51bGxcbiAgaWYgKG1hcmtlcikge1xuICAgIGNvbnN0IHBvcyA9IG5ldyBJdGVtVGV4dExpc3RQb3NpdGlvbihtYXJrZXIucC5sZWZ0LCBtYXJrZXIucCwgbWFya2VyLmluZGV4LCBjdXJyZW50QXR0cmlidXRlcylcbiAgICByZXR1cm4gZmluZE5leHRQb3NpdGlvbih0cmFuc2FjdGlvbiwgcG9zLCBpbmRleCAtIG1hcmtlci5pbmRleClcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwb3MgPSBuZXcgSXRlbVRleHRMaXN0UG9zaXRpb24obnVsbCwgcGFyZW50Ll9zdGFydCwgMCwgY3VycmVudEF0dHJpYnV0ZXMpXG4gICAgcmV0dXJuIGZpbmROZXh0UG9zaXRpb24odHJhbnNhY3Rpb24sIHBvcywgaW5kZXgpXG4gIH1cbn1cblxuLyoqXG4gKiBOZWdhdGUgYXBwbGllZCBmb3JtYXRzXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IG5lZ2F0ZWRBdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpbnNlcnROZWdhdGVkQXR0cmlidXRlcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBuZWdhdGVkQXR0cmlidXRlcykgPT4ge1xuICAvLyBjaGVjayBpZiB3ZSByZWFsbHkgbmVlZCB0byByZW1vdmUgYXR0cmlidXRlc1xuICB3aGlsZSAoXG4gICAgY3VyclBvcy5yaWdodCAhPT0gbnVsbCAmJiAoXG4gICAgICBjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgPT09IHRydWUgfHwgKFxuICAgICAgICBjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQgJiZcbiAgICAgICAgZXF1YWxBdHRycyhuZWdhdGVkQXR0cmlidXRlcy5nZXQoLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KS5rZXkpLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLnZhbHVlKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgaWYgKCFjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLmRlbGV0ZSgvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLmtleSlcbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKClcbiAgfVxuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2NcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SURcbiAgbmVnYXRlZEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCBsZWZ0ID0gY3VyclBvcy5sZWZ0XG4gICAgY29uc3QgcmlnaHQgPSBjdXJyUG9zLnJpZ2h0XG4gICAgY29uc3QgbmV4dEZvcm1hdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudEZvcm1hdChrZXksIHZhbCkpXG4gICAgbmV4dEZvcm1hdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApXG4gICAgY3VyclBvcy5yaWdodCA9IG5leHRGb3JtYXRcbiAgICBjdXJyUG9zLmZvcndhcmQoKVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBjdXJyZW50QXR0cmlidXRlc1xuICogQHBhcmFtIHtDb250ZW50Rm9ybWF0fSBmb3JtYXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzID0gKGN1cnJlbnRBdHRyaWJ1dGVzLCBmb3JtYXQpID0+IHtcbiAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBmb3JtYXRcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgY3VycmVudEF0dHJpYnV0ZXMuZGVsZXRlKGtleSlcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50QXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBtaW5pbWl6ZUF0dHJpYnV0ZUNoYW5nZXMgPSAoY3VyclBvcywgYXR0cmlidXRlcykgPT4ge1xuICAvLyBnbyByaWdodCB3aGlsZSBhdHRyaWJ1dGVzW3JpZ2h0LmtleV0gPT09IHJpZ2h0LnZhbHVlIChvciByaWdodCBpcyBkZWxldGVkKVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChjdXJyUG9zLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgICBicmVha1xuICAgIH0gZWxzZSBpZiAoY3VyclBvcy5yaWdodC5kZWxldGVkIHx8IChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQgJiYgZXF1YWxBdHRycyhhdHRyaWJ1dGVzWygvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpKS5rZXldIHx8IG51bGwsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkudmFsdWUpKSkge1xuICAgICAgLy9cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHtNYXA8c3RyaW5nLGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICoqL1xuY29uc3QgaW5zZXJ0QXR0cmlidXRlcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvY1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRFxuICBjb25zdCBuZWdhdGVkQXR0cmlidXRlcyA9IG5ldyBNYXAoKVxuICAvLyBpbnNlcnQgZm9ybWF0LXN0YXJ0IGl0ZW1zXG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCB2YWwgPSBhdHRyaWJ1dGVzW2tleV1cbiAgICBjb25zdCBjdXJyZW50VmFsID0gY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsXG4gICAgaWYgKCFlcXVhbEF0dHJzKGN1cnJlbnRWYWwsIHZhbCkpIHtcbiAgICAgIC8vIHNhdmUgbmVnYXRlZCBhdHRyaWJ1dGUgKHNldCBudWxsIGlmIGN1cnJlbnRWYWwgdW5kZWZpbmVkKVxuICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuc2V0KGtleSwgY3VycmVudFZhbClcbiAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGN1cnJQb3NcbiAgICAgIGN1cnJQb3MucmlnaHQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRGb3JtYXQoa2V5LCB2YWwpKVxuICAgICAgY3VyclBvcy5yaWdodC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApXG4gICAgICBjdXJyUG9zLmZvcndhcmQoKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmVnYXRlZEF0dHJpYnV0ZXNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R8QWJzdHJhY3RUeXBlPGFueT59IHRleHRcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICoqL1xuY29uc3QgaW5zZXJ0VGV4dCA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCB0ZXh0LCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgoX3ZhbCwga2V5KSA9PiB7XG4gICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBhdHRyaWJ1dGVzW2tleV0gPSBudWxsXG4gICAgfVxuICB9KVxuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2NcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SURcbiAgbWluaW1pemVBdHRyaWJ1dGVDaGFuZ2VzKGN1cnJQb3MsIGF0dHJpYnV0ZXMpXG4gIGNvbnN0IG5lZ2F0ZWRBdHRyaWJ1dGVzID0gaW5zZXJ0QXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBhdHRyaWJ1dGVzKVxuICAvLyBpbnNlcnQgY29udGVudFxuICBjb25zdCBjb250ZW50ID0gdGV4dC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nID8gbmV3IENvbnRlbnRTdHJpbmcoLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0ZXh0KSkgOiAodGV4dCBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IG5ldyBDb250ZW50VHlwZSh0ZXh0KSA6IG5ldyBDb250ZW50RW1iZWQodGV4dCkpXG4gIGxldCB7IGxlZnQsIHJpZ2h0LCBpbmRleCB9ID0gY3VyclBvc1xuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBjdXJyUG9zLmluZGV4LCBjb250ZW50LmdldExlbmd0aCgpKVxuICB9XG4gIHJpZ2h0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIGNvbnRlbnQpXG4gIHJpZ2h0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMClcbiAgY3VyclBvcy5yaWdodCA9IHJpZ2h0XG4gIGN1cnJQb3MuaW5kZXggPSBpbmRleFxuICBjdXJyUG9zLmZvcndhcmQoKVxuICBpbnNlcnROZWdhdGVkQXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBuZWdhdGVkQXR0cmlidXRlcylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYXR0cmlidXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZm9ybWF0VGV4dCA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBsZW5ndGgsIGF0dHJpYnV0ZXMpID0+IHtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jXG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEXG4gIG1pbmltaXplQXR0cmlidXRlQ2hhbmdlcyhjdXJyUG9zLCBhdHRyaWJ1dGVzKVxuICBjb25zdCBuZWdhdGVkQXR0cmlidXRlcyA9IGluc2VydEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgYXR0cmlidXRlcylcbiAgLy8gaXRlcmF0ZSB1bnRpbCBmaXJzdCBub24tZm9ybWF0IG9yIG51bGwgaXMgZm91bmRcbiAgLy8gZGVsZXRlIGFsbCBmb3JtYXRzIHdpdGggYXR0cmlidXRlc1tmb3JtYXQua2V5XSAhPSBudWxsXG4gIC8vIGFsc28gY2hlY2sgdGhlIGF0dHJpYnV0ZXMgYWZ0ZXIgdGhlIGZpcnN0IG5vbi1mb3JtYXQgYXMgd2UgZG8gbm90IHdhbnQgdG8gaW5zZXJ0IHJlZHVuZGFudCBuZWdhdGVkIGF0dHJpYnV0ZXMgdGhlcmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICBpdGVyYXRpb25Mb29wOiB3aGlsZSAoXG4gICAgY3VyclBvcy5yaWdodCAhPT0gbnVsbCAmJlxuICAgIChsZW5ndGggPiAwIHx8XG4gICAgICAoXG4gICAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLnNpemUgPiAwICYmXG4gICAgICAgIChjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgfHwgY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgaWYgKCFjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgIHN3aXRjaCAoY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDoge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KVxuICAgICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGVzW2tleV1cbiAgICAgICAgICBpZiAoYXR0ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZXF1YWxBdHRycyhhdHRyLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuZGVsZXRlKGtleSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIGZ1cnRoZXIgZXh0ZW5kIG5lZ2F0ZWRBdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgIGJyZWFrIGl0ZXJhdGlvbkxvb3BcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZWdhdGVkQXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJQb3MucmlnaHQuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKGxlbmd0aCA8IGN1cnJQb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY3VyclBvcy5yaWdodC5pZC5jbGllbnQsIGN1cnJQb3MucmlnaHQuaWQuY2xvY2sgKyBsZW5ndGgpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggLT0gY3VyclBvcy5yaWdodC5sZW5ndGhcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKVxuICB9XG4gIC8vIFF1aWxsIGp1c3QgYXNzdW1lcyB0aGF0IHRoZSBlZGl0b3Igc3RhcnRzIHdpdGggYSBuZXdsaW5lIGFuZCB0aGF0IGl0IGFsd2F5c1xuICAvLyBlbmRzIHdpdGggYSBuZXdsaW5lLiBXZSBvbmx5IGluc2VydCB0aGF0IG5ld2xpbmUgd2hlbiBhIG5ldyBuZXdsaW5lIGlzXG4gIC8vIGluc2VydGVkIC0gaS5lIHdoZW4gbGVuZ3RoIGlzIGJpZ2dlciB0aGFuIHR5cGUubGVuZ3RoXG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgbGV0IG5ld2xpbmVzID0gJydcbiAgICBmb3IgKDsgbGVuZ3RoID4gMDsgbGVuZ3RoLS0pIHtcbiAgICAgIG5ld2xpbmVzICs9ICdcXG4nXG4gICAgfVxuICAgIGN1cnJQb3MucmlnaHQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBjdXJyUG9zLmxlZnQsIGN1cnJQb3MubGVmdCAmJiBjdXJyUG9zLmxlZnQubGFzdElkLCBjdXJyUG9zLnJpZ2h0LCBjdXJyUG9zLnJpZ2h0ICYmIGN1cnJQb3MucmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRTdHJpbmcobmV3bGluZXMpKVxuICAgIGN1cnJQb3MucmlnaHQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKVxuICAgIGN1cnJQb3MuZm9yd2FyZCgpXG4gIH1cbiAgaW5zZXJ0TmVnYXRlZEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgbmVnYXRlZEF0dHJpYnV0ZXMpXG59XG5cbi8qKlxuICogQ2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyIHN0cmluZyBjb250ZW50IGhhcyBiZWVuIGRlbGV0ZWQgaW4gb3JkZXIgdG9cbiAqIGNsZWFuIHVwIGZvcm1hdHRpbmcgSXRlbXMuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbX0gc3RhcnRcbiAqIEBwYXJhbSB7SXRlbXxudWxsfSBjdXJyIGV4Y2x1c2l2ZSBlbmQsIGF1dG9tYXRpY2FsbHkgaXRlcmF0ZXMgdG8gdGhlIG5leHQgQ29udGVudCBJdGVtXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gc3RhcnRBdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gY3VyckF0dHJpYnV0ZXNcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFtb3VudCBvZiBmb3JtYXR0aW5nIEl0ZW1zIGRlbGV0ZWQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNsZWFudXBGb3JtYXR0aW5nR2FwID0gKHRyYW5zYWN0aW9uLCBzdGFydCwgY3Vyciwgc3RhcnRBdHRyaWJ1dGVzLCBjdXJyQXR0cmlidXRlcykgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICovXG4gIGxldCBlbmQgPSBzdGFydFxuICAvKipcbiAgICogQHR5cGUge01hcDxzdHJpbmcsQ29udGVudEZvcm1hdD59XG4gICAqL1xuICBjb25zdCBlbmRGb3JtYXRzID0gbWFwLmNyZWF0ZSgpXG4gIHdoaWxlIChlbmQgJiYgKCFlbmQuY291bnRhYmxlIHx8IGVuZC5kZWxldGVkKSkge1xuICAgIGlmICghZW5kLmRlbGV0ZWQgJiYgZW5kLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpIHtcbiAgICAgIGNvbnN0IGNmID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoZW5kLmNvbnRlbnQpXG4gICAgICBlbmRGb3JtYXRzLnNldChjZi5rZXksIGNmKVxuICAgIH1cbiAgICBlbmQgPSBlbmQucmlnaHRcbiAgfVxuICBsZXQgY2xlYW51cHMgPSAwXG4gIGxldCByZWFjaGVkQ3VyciA9IGZhbHNlXG4gIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XG4gICAgaWYgKGN1cnIgPT09IHN0YXJ0KSB7XG4gICAgICByZWFjaGVkQ3VyciA9IHRydWVcbiAgICB9XG4gICAgaWYgKCFzdGFydC5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gc3RhcnQuY29udGVudFxuICAgICAgc3dpdGNoIChjb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDoge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY29udGVudClcbiAgICAgICAgICBjb25zdCBzdGFydEF0dHJWYWx1ZSA9IHN0YXJ0QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsXG4gICAgICAgICAgaWYgKGVuZEZvcm1hdHMuZ2V0KGtleSkgIT09IGNvbnRlbnQgfHwgc3RhcnRBdHRyVmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBFaXRoZXIgdGhpcyBmb3JtYXQgaXMgb3ZlcndyaXR0ZW4gb3IgaXQgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBhdHRyaWJ1dGUgYWxyZWFkeSBleGlzdGVkLlxuICAgICAgICAgICAgc3RhcnQuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgY2xlYW51cHMrK1xuICAgICAgICAgICAgaWYgKCFyZWFjaGVkQ3VyciAmJiAoY3VyckF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkgPT09IHZhbHVlICYmIHN0YXJ0QXR0clZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoc3RhcnRBdHRyVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjdXJyQXR0cmlidXRlcy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJBdHRyaWJ1dGVzLnNldChrZXksIHN0YXJ0QXR0clZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmVhY2hlZEN1cnIgJiYgIXN0YXJ0LmRlbGV0ZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGN1cnJBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjb250ZW50KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0YXJ0LnJpZ2h0KVxuICB9XG4gIHJldHVybiBjbGVhbnVwc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSBpdGVtXG4gKi9cbmNvbnN0IGNsZWFudXBDb250ZXh0bGVzc0Zvcm1hdHRpbmdHYXAgPSAodHJhbnNhY3Rpb24sIGl0ZW0pID0+IHtcbiAgLy8gaXRlcmF0ZSB1bnRpbCBpdGVtLnJpZ2h0IGlzIG51bGwgb3IgY29udGVudFxuICB3aGlsZSAoaXRlbSAmJiBpdGVtLnJpZ2h0ICYmIChpdGVtLnJpZ2h0LmRlbGV0ZWQgfHwgIWl0ZW0ucmlnaHQuY291bnRhYmxlKSkge1xuICAgIGl0ZW0gPSBpdGVtLnJpZ2h0XG4gIH1cbiAgY29uc3QgYXR0cnMgPSBuZXcgU2V0KClcbiAgLy8gaXRlcmF0ZSBiYWNrIHVudGlsIGEgY29udGVudCBpdGVtIGlzIGZvdW5kXG4gIHdoaWxlIChpdGVtICYmIChpdGVtLmRlbGV0ZWQgfHwgIWl0ZW0uY291bnRhYmxlKSkge1xuICAgIGlmICghaXRlbS5kZWxldGVkICYmIGl0ZW0uY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgY29uc3Qga2V5ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoaXRlbS5jb250ZW50KS5rZXlcbiAgICAgIGlmIChhdHRycy5oYXMoa2V5KSkge1xuICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzLmFkZChrZXkpXG4gICAgICB9XG4gICAgfVxuICAgIGl0ZW0gPSBpdGVtLmxlZnRcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgZXhwZXJpbWVudGFsIGFuZCBzdWJqZWN0IHRvIGNoYW5nZSAvIGJlIHJlbW92ZWQuXG4gKlxuICogSWRlYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGZ1bmN0aW9uIGF0IGFsbC4gRm9ybWF0dGluZyBhdHRyaWJ1dGVzIHNob3VsZCBiZSBjbGVhbmVkIHVwXG4gKiBhdXRvbWF0aWNhbGx5IGFmdGVyIGVhY2ggY2hhbmdlLiBUaGlzIGZ1bmN0aW9uIGl0ZXJhdGVzIHR3aWNlIG92ZXIgdGhlIGNvbXBsZXRlIFlUZXh0IHR5cGVcbiAqIGFuZCByZW1vdmVzIHVubmVjZXNzYXJ5IGZvcm1hdHRpbmcgYXR0cmlidXRlcy4gVGhpcyBpcyBhbHNvIGhlbHBmdWwgZm9yIHRlc3RpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3b24ndCBiZSBleHBvcnRlZCBhbnltb3JlIGFzIHNvb24gYXMgdGhlcmUgaXMgY29uZmlkZW5jZSB0aGF0IHRoZSBZVGV4dCB0eXBlIHdvcmtzIGFzIGludGVuZGVkLlxuICpcbiAqIEBwYXJhbSB7WVRleHR9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn0gSG93IG1hbnkgZm9ybWF0dGluZyBhdHRyaWJ1dGVzIGhhdmUgYmVlbiBjbGVhbmVkIHVwLlxuICovXG5leHBvcnQgY29uc3QgY2xlYW51cFlUZXh0Rm9ybWF0dGluZyA9IHR5cGUgPT4ge1xuICBsZXQgcmVzID0gMFxuICB0cmFuc2FjdCgvKiogQHR5cGUge0RvY30gKi8gKHR5cGUuZG9jKSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgIGxldCBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHR5cGUuX3N0YXJ0KVxuICAgIGxldCBlbmQgPSB0eXBlLl9zdGFydFxuICAgIGxldCBzdGFydEF0dHJpYnV0ZXMgPSBtYXAuY3JlYXRlKClcbiAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IG1hcC5jb3B5KHN0YXJ0QXR0cmlidXRlcylcbiAgICB3aGlsZSAoZW5kKSB7XG4gICAgICBpZiAoZW5kLmRlbGV0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHN3aXRjaCAoZW5kLmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoZW5kLmNvbnRlbnQpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmVzICs9IGNsZWFudXBGb3JtYXR0aW5nR2FwKHRyYW5zYWN0aW9uLCBzdGFydCwgZW5kLCBzdGFydEF0dHJpYnV0ZXMsIGN1cnJlbnRBdHRyaWJ1dGVzKVxuICAgICAgICAgICAgc3RhcnRBdHRyaWJ1dGVzID0gbWFwLmNvcHkoY3VycmVudEF0dHJpYnV0ZXMpXG4gICAgICAgICAgICBzdGFydCA9IGVuZFxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW5kID0gZW5kLnJpZ2h0XG4gICAgfVxuICB9KVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogVGhpcyB3aWxsIGJlIGNhbGxlZCBieSB0aGUgdHJhbnNjdGlvbiBvbmNlIHRoZSBldmVudCBoYW5kbGVycyBhcmUgY2FsbGVkIHRvIHBvdGVudGlhbGx5IGNsZWFudXBcbiAqIGZvcm1hdHRpbmcgYXR0cmlidXRlcy5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICovXG5leHBvcnQgY29uc3QgY2xlYW51cFlUZXh0QWZ0ZXJUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtTZXQ8WVRleHQ+fVxuICAgKi9cbiAgY29uc3QgbmVlZEZ1bGxDbGVhbnVwID0gbmV3IFNldCgpXG4gIC8vIGNoZWNrIGlmIGFub3RoZXIgZm9ybWF0dGluZyBpdGVtIHdhcyBpbnNlcnRlZFxuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2NcbiAgZm9yIChjb25zdCBbY2xpZW50LCBhZnRlckNsb2NrXSBvZiB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmVudHJpZXMoKSkge1xuICAgIGNvbnN0IGNsb2NrID0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgfHwgMFxuICAgIGlmIChhZnRlckNsb2NrID09PSBjbG9jaykge1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaXRlcmF0ZVN0cnVjdHModHJhbnNhY3Rpb24sIC8qKiBAdHlwZSB7QXJyYXk8SXRlbXxHQz59ICovIChkb2Muc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSksIGNsb2NrLCBhZnRlckNsb2NrLCBpdGVtID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgIWl0ZW0uZGVsZXRlZCAmJiAvKiogQHR5cGUge0l0ZW19ICovIChpdGVtKS5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0ICYmIGl0ZW0uY29uc3RydWN0b3IgIT09IEdDXG4gICAgICApIHtcbiAgICAgICAgbmVlZEZ1bGxDbGVhbnVwLmFkZCgvKiogQHR5cGUge2FueX0gKi8gKGl0ZW0pLnBhcmVudClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIC8vIGNsZWFudXAgaW4gYSBuZXcgdHJhbnNhY3Rpb25cbiAgdHJhbnNhY3QoZG9jLCAodCkgPT4ge1xuICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgR0MgfHwgISgvKiogQHR5cGUge1lUZXh0fSAqLyAoaXRlbS5wYXJlbnQpLl9oYXNGb3JtYXR0aW5nKSB8fCBuZWVkRnVsbENsZWFudXAuaGFzKC8qKiBAdHlwZSB7WVRleHR9ICovIChpdGVtLnBhcmVudCkpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtZVGV4dH0gKi8gKGl0ZW0ucGFyZW50KVxuICAgICAgaWYgKGl0ZW0uY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgICBuZWVkRnVsbENsZWFudXAuYWRkKHBhcmVudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIG5vIGZvcm1hdHRpbmcgYXR0cmlidXRlIHdhcyBpbnNlcnRlZCBvciBkZWxldGVkLCB3ZSBjYW4gbWFrZSBkdWUgd2l0aCBjb250ZXh0bGVzc1xuICAgICAgICAvLyBmb3JtYXR0aW5nIGNsZWFudXBzLlxuICAgICAgICAvLyBDb250ZXh0bGVzczogaXQgaXMgbm90IG5lY2Vzc2FyeSB0byBjb21wdXRlIGN1cnJlbnRBdHRyaWJ1dGVzIGZvciB0aGUgYWZmZWN0ZWQgcG9zaXRpb24uXG4gICAgICAgIGNsZWFudXBDb250ZXh0bGVzc0Zvcm1hdHRpbmdHYXAodCwgaXRlbSlcbiAgICAgIH1cbiAgICB9KVxuICAgIC8vIElmIGEgZm9ybWF0dGluZyBpdGVtIHdhcyBpbnNlcnRlZCwgd2Ugc2ltcGx5IGNsZWFuIHRoZSB3aG9sZSB0eXBlLlxuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSBjdXJyZW50QXR0cmlidXRlcyBmb3IgdGhlIGN1cnJlbnQgcG9zaXRpb24gYW55d2F5LlxuICAgIGZvciAoY29uc3QgeVRleHQgb2YgbmVlZEZ1bGxDbGVhbnVwKSB7XG4gICAgICBjbGVhbnVwWVRleHRGb3JtYXR0aW5nKHlUZXh0KVxuICAgIH1cbiAgfSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7SXRlbVRleHRMaXN0UG9zaXRpb259XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBkZWxldGVUZXh0ID0gKHRyYW5zYWN0aW9uLCBjdXJyUG9zLCBsZW5ndGgpID0+IHtcbiAgY29uc3Qgc3RhcnRMZW5ndGggPSBsZW5ndGhcbiAgY29uc3Qgc3RhcnRBdHRycyA9IG1hcC5jb3B5KGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMpXG4gIGNvbnN0IHN0YXJ0ID0gY3VyclBvcy5yaWdodFxuICB3aGlsZSAobGVuZ3RoID4gMCAmJiBjdXJyUG9zLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgaWYgKGN1cnJQb3MucmlnaHQuZGVsZXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHN3aXRjaCAoY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudFR5cGU6XG4gICAgICAgIGNhc2UgQ29udGVudEVtYmVkOlxuICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6XG4gICAgICAgICAgaWYgKGxlbmd0aCA8IGN1cnJQb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY3VyclBvcy5yaWdodC5pZC5jbGllbnQsIGN1cnJQb3MucmlnaHQuaWQuY2xvY2sgKyBsZW5ndGgpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggLT0gY3VyclBvcy5yaWdodC5sZW5ndGhcbiAgICAgICAgICBjdXJyUG9zLnJpZ2h0LmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKVxuICB9XG4gIGlmIChzdGFydCkge1xuICAgIGNsZWFudXBGb3JtYXR0aW5nR2FwKHRyYW5zYWN0aW9uLCBzdGFydCwgY3VyclBvcy5yaWdodCwgc3RhcnRBdHRycywgY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcylcbiAgfVxuICBjb25zdCBwYXJlbnQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoLyoqIEB0eXBlIHtJdGVtfSAqLyAoY3VyclBvcy5sZWZ0IHx8IGN1cnJQb3MucmlnaHQpLnBhcmVudClcbiAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgY3VyclBvcy5pbmRleCwgLXN0YXJ0TGVuZ3RoICsgbGVuZ3RoKVxuICB9XG4gIHJldHVybiBjdXJyUG9zXG59XG5cbi8qKlxuICogVGhlIFF1aWxsIERlbHRhIGZvcm1hdCByZXByZXNlbnRzIGNoYW5nZXMgb24gYSB0ZXh0IGRvY3VtZW50IHdpdGhcbiAqIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24uIEZvciBtb3IgaW5mb3JtYXRpb24gdmlzaXQge0BsaW5rIGh0dHBzOi8vcXVpbGxqcy5jb20vZG9jcy9kZWx0YS98UXVpbGwgRGVsdGF9XG4gKlxuICogQGV4YW1wbGVcbiAqICAge1xuICogICAgIG9wczogW1xuICogICAgICAgeyBpbnNlcnQ6ICdHYW5kYWxmJywgYXR0cmlidXRlczogeyBib2xkOiB0cnVlIH0gfSxcbiAqICAgICAgIHsgaW5zZXJ0OiAnIHRoZSAnIH0sXG4gKiAgICAgICB7IGluc2VydDogJ0dyZXknLCBhdHRyaWJ1dGVzOiB7IGNvbG9yOiAnI2NjY2NjYycgfSB9XG4gKiAgICAgXVxuICogICB9XG4gKlxuICovXG5cbi8qKlxuICAqIEF0dHJpYnV0ZXMgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gYSBzZWxlY3Rpb24gb2YgdGV4dC5cbiAgKlxuICAqIEBleGFtcGxlXG4gICogICB7XG4gICogICAgIGJvbGQ6IHRydWUsXG4gICogICAgIGZvbnQtc2l6ZTogJzQwcHgnXG4gICogICB9XG4gICpcbiAgKiBAdHlwZWRlZiB7T2JqZWN0fSBUZXh0QXR0cmlidXRlc1xuICAqL1xuXG4vKipcbiAqIEBleHRlbmRzIFlFdmVudDxZVGV4dD5cbiAqIEV2ZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBjaGFuZ2VzIG9uIGEgWVRleHQgdHlwZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFlUZXh0RXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZVGV4dH0geXRleHRcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8YW55Pn0gc3VicyBUaGUga2V5cyB0aGF0IGNoYW5nZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5dGV4dCwgdHJhbnNhY3Rpb24sIHN1YnMpIHtcbiAgICBzdXBlcih5dGV4dCwgdHJhbnNhY3Rpb24pXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY2hpbGRyZW4gY2hhbmdlZC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogU2V0IG9mIGFsbCBjaGFuZ2VkIGF0dHJpYnV0ZXMuXG4gICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMua2V5c0NoYW5nZWQgPSBuZXcgU2V0KClcbiAgICBzdWJzLmZvckVhY2goKHN1YikgPT4ge1xuICAgICAgaWYgKHN1YiA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmtleXNDaGFuZ2VkLmFkZChzdWIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7e2FkZGVkOlNldDxJdGVtPixkZWxldGVkOlNldDxJdGVtPixrZXlzOk1hcDxzdHJpbmcse2FjdGlvbjonYWRkJ3wndXBkYXRlJ3wnZGVsZXRlJyxvbGRWYWx1ZTphbnl9PixkZWx0YTpBcnJheTx7aW5zZXJ0PzpBcnJheTxhbnk+fHN0cmluZywgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgKi9cbiAgZ2V0IGNoYW5nZXMgKCkge1xuICAgIGlmICh0aGlzLl9jaGFuZ2VzID09PSBudWxsKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHt7YWRkZWQ6U2V0PEl0ZW0+LGRlbGV0ZWQ6U2V0PEl0ZW0+LGtleXM6TWFwPHN0cmluZyx7YWN0aW9uOidhZGQnfCd1cGRhdGUnfCdkZWxldGUnLG9sZFZhbHVlOmFueX0+LGRlbHRhOkFycmF5PHtpbnNlcnQ/OkFycmF5PGFueT58c3RyaW5nfEFic3RyYWN0VHlwZTxhbnk+fG9iamVjdCwgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgICAgICovXG4gICAgICBjb25zdCBjaGFuZ2VzID0ge1xuICAgICAgICBrZXlzOiB0aGlzLmtleXMsXG4gICAgICAgIGRlbHRhOiB0aGlzLmRlbHRhLFxuICAgICAgICBhZGRlZDogbmV3IFNldCgpLFxuICAgICAgICBkZWxldGVkOiBuZXcgU2V0KClcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NoYW5nZXMgPSBjaGFuZ2VzXG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHRoaXMuX2NoYW5nZXMpXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgY2hhbmdlcyBpbiB0aGUgZGVsdGEgZm9ybWF0LlxuICAgKiBBIHtAbGluayBodHRwczovL3F1aWxsanMuY29tL2RvY3MvZGVsdGEvfFF1aWxsIERlbHRhfSkgdGhhdCByZXByZXNlbnRzIHRoZSBjaGFuZ2VzIG9uIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogQHR5cGUge0FycmF5PHtpbnNlcnQ/OnN0cmluZ3xvYmplY3R8QWJzdHJhY3RUeXBlPGFueT4sIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsYW55Pn0+fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXQgZGVsdGEgKCkge1xuICAgIGlmICh0aGlzLl9kZWx0YSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgeSA9IC8qKiBAdHlwZSB7RG9jfSAqLyAodGhpcy50YXJnZXQuZG9jKVxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8e2luc2VydD86c3RyaW5nfG9iamVjdHxBYnN0cmFjdFR5cGU8YW55PiwgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyLCBhdHRyaWJ1dGVzPzogT2JqZWN0PHN0cmluZyxhbnk+fT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRlbHRhID0gW11cbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCkgLy8gc2F2ZXMgYWxsIGN1cnJlbnQgYXR0cmlidXRlcyBmb3IgaW5zZXJ0XG4gICAgICAgIGNvbnN0IG9sZEF0dHJpYnV0ZXMgPSBuZXcgTWFwKClcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnRhcmdldC5fc3RhcnRcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmc/fVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGFjdGlvbiA9IG51bGxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge30gLy8gY291bnRzIGFkZGVkIG9yIHJlbW92ZWQgbmV3IGF0dHJpYnV0ZXMgZm9yIHJldGFpblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge3N0cmluZ3xvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaW5zZXJ0ID0gJydcbiAgICAgICAgbGV0IHJldGFpbiA9IDBcbiAgICAgICAgbGV0IGRlbGV0ZUxlbiA9IDBcbiAgICAgICAgY29uc3QgYWRkT3AgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKGFjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAdHlwZSB7YW55fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgb3AgPSBudWxsXG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgIGlmIChkZWxldGVMZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICBvcCA9IHsgZGVsZXRlOiBkZWxldGVMZW4gfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVMZW4gPSAwXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAnaW5zZXJ0JzpcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGluc2VydCA9PT0gJ29iamVjdCcgfHwgaW5zZXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIG9wID0geyBpbnNlcnQgfVxuICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBdHRyaWJ1dGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSB7fVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zZXJ0ID0gJydcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICdyZXRhaW4nOlxuICAgICAgICAgICAgICAgIGlmIChyZXRhaW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICBvcCA9IHsgcmV0YWluIH1cbiAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LmlzRW1wdHkoYXR0cmlidXRlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcyA9IG9iamVjdC5hc3NpZ24oe30sIGF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldGFpbiA9IDBcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wKSBkZWx0YS5wdXNoKG9wKVxuICAgICAgICAgICAgYWN0aW9uID0gbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN3aXRjaCAoaXRlbS5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRUeXBlOlxuICAgICAgICAgICAgY2FzZSBDb250ZW50RW1iZWQ6XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKVxuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2luc2VydCdcbiAgICAgICAgICAgICAgICAgIGluc2VydCA9IGl0ZW0uY29udGVudC5nZXRDb250ZW50KClbMF1cbiAgICAgICAgICAgICAgICAgIGFkZE9wKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKClcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdkZWxldGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZUxlbiArPSAxXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpXG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAncmV0YWluJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRhaW4gKz0gMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2luc2VydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkT3AoKVxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnaW5zZXJ0J1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW5zZXJ0ICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKGl0ZW0uY29udGVudCkuc3RyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpXG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVMZW4gKz0gaXRlbS5sZW5ndGhcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKClcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdyZXRhaW4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldGFpbiArPSBpdGVtLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6IHtcbiAgICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChpdGVtLmNvbnRlbnQpXG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY3VyVmFsID0gY3VycmVudEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbFxuICAgICAgICAgICAgICAgICAgaWYgKCFlcXVhbEF0dHJzKGN1clZhbCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkT3AoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVhbEF0dHJzKHZhbHVlLCAob2xkQXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cmlidXRlc1trZXldXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgb2xkQXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJWYWwgPSBjdXJyZW50QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsXG4gICAgICAgICAgICAgICAgaWYgKCFlcXVhbEF0dHJzKGN1clZhbCwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgICBhZGRPcCgpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBjdXJWYWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIG9sZEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJpYnV0ZXNba2V5XVxuICAgICAgICAgICAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZXF1YWxBdHRycyhhdHRyLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhZGRPcCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNba2V5XVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0ciAhPT0gbnVsbCkgeyAvLyB0aGlzIHdpbGwgYmUgY2xlYW5lZCB1cCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBjb250ZXh0bGVzcyBjbGVhbnVwIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdpbnNlcnQnKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChpdGVtLmNvbnRlbnQpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW0gPSBpdGVtLnJpZ2h0XG4gICAgICAgIH1cbiAgICAgICAgYWRkT3AoKVxuICAgICAgICB3aGlsZSAoZGVsdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGxhc3RPcCA9IGRlbHRhW2RlbHRhLmxlbmd0aCAtIDFdXG4gICAgICAgICAgaWYgKGxhc3RPcC5yZXRhaW4gIT09IHVuZGVmaW5lZCAmJiBsYXN0T3AuYXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyByZXRhaW4gZGVsdGEncyBpZiB0aGV5IGRvbid0IGFzc2lnbiBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBkZWx0YS5wb3AoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHRoaXMuX2RlbHRhID0gZGVsdGFcbiAgICB9XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodGhpcy5fZGVsdGEpXG4gIH1cbn1cblxuLyoqXG4gKiBUeXBlIHRoYXQgcmVwcmVzZW50cyB0ZXh0IHdpdGggZm9ybWF0dGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGlzIHR5cGUgcmVwbGFjZXMgeS1yaWNodGV4dCBhcyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGFibGUgdG8gaGFuZGxlXG4gKiBibG9jayBmb3JtYXRzIChmb3JtYXQgaW5mb3JtYXRpb24gb24gYSBwYXJhZ3JhcGgpLCBlbWJlZHMgKGNvbXBsZXggZWxlbWVudHNcbiAqIGxpa2UgcGljdHVyZXMgYW5kIHZpZGVvcyksIGFuZCB0ZXh0IGZvcm1hdHMgKCoqYm9sZCoqLCAqaXRhbGljKikuXG4gKlxuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlUZXh0RXZlbnQ+XG4gKi9cbmV4cG9ydCBjbGFzcyBZVGV4dCBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3N0cmluZ10gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIFlUZXh0LlxuICAgKi9cbiAgY29uc3RydWN0b3IgKHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwZW5kaW5nIG9wZXJhdGlvbnMgb24gdGhpcyB0eXBlXG4gICAgICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKCk6dm9pZD4/fVxuICAgICAqL1xuICAgIHRoaXMuX3BlbmRpbmcgPSBzdHJpbmcgIT09IHVuZGVmaW5lZCA/IFsoKSA9PiB0aGlzLmluc2VydCgwLCBzdHJpbmcpXSA6IFtdXG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPnxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaE1hcmtlciA9IFtdXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIFlUZXh0IGNvbnRhaW5zIGZvcm1hdHRpbmcgYXR0cmlidXRlcy5cbiAgICAgKiBUaGlzIGZsYWcgaXMgdXBkYXRlZCB3aGVuIGEgZm9ybWF0dGluZyBpdGVtIGlzIGludGVncmF0ZWQgKHNlZSBDb250ZW50Rm9ybWF0LmludGVncmF0ZSlcbiAgICAgKi9cbiAgICB0aGlzLl9oYXNGb3JtYXR0aW5nID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgY2hhcmFjdGVycyBvZiB0aGlzIHRleHQgdHlwZS5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30geVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pXG4gICAgdHJ5IHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykuZm9yRWFjaChmID0+IGYoKSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgfVxuICAgIHRoaXMuX3BlbmRpbmcgPSBudWxsXG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZVGV4dCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVRleHR9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgdGV4dCA9IG5ldyBZVGV4dCgpXG4gICAgdGV4dC5hcHBseURlbHRhKHRoaXMudG9EZWx0YSgpKVxuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZVGV4dEV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIHN1cGVyLl9jYWxsT2JzZXJ2ZXIodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpXG4gICAgY29uc3QgZXZlbnQgPSBuZXcgWVRleHRFdmVudCh0aGlzLCB0cmFuc2FjdGlvbiwgcGFyZW50U3VicylcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgZXZlbnQpXG4gICAgLy8gSWYgYSByZW1vdGUgY2hhbmdlIGhhcHBlbmVkLCB3ZSB0cnkgdG8gY2xlYW51cCBwb3RlbnRpYWwgZm9ybWF0dGluZyBkdXBsaWNhdGVzLlxuICAgIGlmICghdHJhbnNhY3Rpb24ubG9jYWwgJiYgdGhpcy5faGFzRm9ybWF0dGluZykge1xuICAgICAgdHJhbnNhY3Rpb24uX25lZWRGb3JtYXR0aW5nQ2xlYW51cCA9IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5mb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9TdHJpbmcgKCkge1xuICAgIGxldCBzdHIgPSAnJ1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgbGV0IG4gPSB0aGlzLl9zdGFydFxuICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSAmJiBuLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRTdHJpbmcpIHtcbiAgICAgICAgc3RyICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKG4uY29udGVudCkuc3RyXG4gICAgICB9XG4gICAgICBuID0gbi5yaWdodFxuICAgIH1cbiAgICByZXR1cm4gc3RyXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5mb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIHtAbGluayBEZWx0YX0gb24gdGhpcyBzaGFyZWQgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IGRlbHRhIFRoZSBjaGFuZ2VzIHRvIGFwcGx5IG9uIHRoaXMgZWxlbWVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9ICBvcHRzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2FuaXRpemVdIFNhbml0aXplIGlucHV0IGRlbHRhLiBSZW1vdmVzIGVuZGluZyBuZXdsaW5lcyBpZiBzZXQgdG8gdHJ1ZS5cbiAgICpcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYXBwbHlEZWx0YSAoZGVsdGEsIHsgc2FuaXRpemUgPSB0cnVlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgY3VyclBvcyA9IG5ldyBJdGVtVGV4dExpc3RQb3NpdGlvbihudWxsLCB0aGlzLl9zdGFydCwgMCwgbmV3IE1hcCgpKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbHRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgb3AgPSBkZWx0YVtpXVxuICAgICAgICAgIGlmIChvcC5pbnNlcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gUXVpbGwgYXNzdW1lcyB0aGF0IHRoZSBjb250ZW50IHN0YXJ0cyB3aXRoIGFuIGVtcHR5IHBhcmFncmFwaC5cbiAgICAgICAgICAgIC8vIFlqcy9ZLlRleHQgYXNzdW1lcyB0aGF0IGl0IHN0YXJ0cyBlbXB0eS4gV2UgYWx3YXlzIGhpZGUgdGhhdFxuICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBuZXdsaW5lIGF0IHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQuXG4gICAgICAgICAgICAvLyBJZiB3ZSBvbWl0IHRoaXMgc3RlcCwgY2xpZW50cyB3aWxsIHNlZSBhIGRpZmZlcmVudCBudW1iZXIgb2ZcbiAgICAgICAgICAgIC8vIHBhcmFncmFwaHMsIGJ1dCBub3RoaW5nIGJhZCB3aWxsIGhhcHBlbi5cbiAgICAgICAgICAgIGNvbnN0IGlucyA9ICghc2FuaXRpemUgJiYgdHlwZW9mIG9wLmluc2VydCA9PT0gJ3N0cmluZycgJiYgaSA9PT0gZGVsdGEubGVuZ3RoIC0gMSAmJiBjdXJyUG9zLnJpZ2h0ID09PSBudWxsICYmIG9wLmluc2VydC5zbGljZSgtMSkgPT09ICdcXG4nKSA/IG9wLmluc2VydC5zbGljZSgwLCAtMSkgOiBvcC5pbnNlcnRcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5zICE9PSAnc3RyaW5nJyB8fCBpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBpbnNlcnRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBjdXJyUG9zLCBpbnMsIG9wLmF0dHJpYnV0ZXMgfHwge30pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChvcC5yZXRhaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ybWF0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgY3VyclBvcywgb3AucmV0YWluLCBvcC5hdHRyaWJ1dGVzIHx8IHt9KVxuICAgICAgICAgIH0gZWxzZSBpZiAob3AuZGVsZXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZVRleHQodHJhbnNhY3Rpb24sIGN1cnJQb3MsIG9wLmRlbGV0ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmFwcGx5RGVsdGEoZGVsdGEpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBEZWx0YSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFlUZXh0IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtzbmFwc2hvdF1cbiAgICogQHBhcmFtIHtTbmFwc2hvdH0gW3ByZXZTbmFwc2hvdF1cbiAgICogQHBhcmFtIHtmdW5jdGlvbigncmVtb3ZlZCcgfCAnYWRkZWQnLCBJRCk6YW55fSBbY29tcHV0ZVlDaGFuZ2VdXG4gICAqIEByZXR1cm4ge2FueX0gVGhlIERlbHRhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9EZWx0YSAoc25hcHNob3QsIHByZXZTbmFwc2hvdCwgY29tcHV0ZVlDaGFuZ2UpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZXtBcnJheTxhbnk+fVxuICAgICAqL1xuICAgIGNvbnN0IG9wcyA9IFtdXG4gICAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKClcbiAgICBjb25zdCBkb2MgPSAvKiogQHR5cGUge0RvY30gKi8gKHRoaXMuZG9jKVxuICAgIGxldCBzdHIgPSAnJ1xuICAgIGxldCBuID0gdGhpcy5fc3RhcnRcbiAgICBmdW5jdGlvbiBwYWNrU3RyICgpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBwYWNrIHN0ciB3aXRoIGF0dHJpYnV0ZXMgdG8gb3BzXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9XG4gICAgICAgIGxldCBhZGRBdHRyaWJ1dGVzID0gZmFsc2VcbiAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGFkZEF0dHJpYnV0ZXMgPSB0cnVlXG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWVcbiAgICAgICAgfSlcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBvcCA9IHsgaW5zZXJ0OiBzdHIgfVxuICAgICAgICBpZiAoYWRkQXR0cmlidXRlcykge1xuICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzXG4gICAgICAgIH1cbiAgICAgICAgb3BzLnB1c2gob3ApXG4gICAgICAgIHN0ciA9ICcnXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVEZWx0YSA9ICgpID0+IHtcbiAgICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1Zpc2libGUobiwgc25hcHNob3QpIHx8IChwcmV2U25hcHNob3QgIT09IHVuZGVmaW5lZCAmJiBpc1Zpc2libGUobiwgcHJldlNuYXBzaG90KSkpIHtcbiAgICAgICAgICBzd2l0Y2ggKG4uY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBDb250ZW50U3RyaW5nOiB7XG4gICAgICAgICAgICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRBdHRyaWJ1dGVzLmdldCgneWNoYW5nZScpXG4gICAgICAgICAgICAgIGlmIChzbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmICFpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1ciA9PT0gdW5kZWZpbmVkIHx8IGN1ci51c2VyICE9PSBuLmlkLmNsaWVudCB8fCBjdXIudHlwZSAhPT0gJ3JlbW92ZWQnKSB7XG4gICAgICAgICAgICAgICAgICBwYWNrU3RyKClcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnNldCgneWNoYW5nZScsIGNvbXB1dGVZQ2hhbmdlID8gY29tcHV0ZVlDaGFuZ2UoJ3JlbW92ZWQnLCBuLmlkKSA6IHsgdHlwZTogJ3JlbW92ZWQnIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZTbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmICFpc1Zpc2libGUobiwgcHJldlNuYXBzaG90KSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXIgPT09IHVuZGVmaW5lZCB8fCBjdXIudXNlciAhPT0gbi5pZC5jbGllbnQgfHwgY3VyLnR5cGUgIT09ICdhZGRlZCcpIHtcbiAgICAgICAgICAgICAgICAgIHBhY2tTdHIoKVxuICAgICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuc2V0KCd5Y2hhbmdlJywgY29tcHV0ZVlDaGFuZ2UgPyBjb21wdXRlWUNoYW5nZSgnYWRkZWQnLCBuLmlkKSA6IHsgdHlwZTogJ2FkZGVkJyB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tTdHIoKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmRlbGV0ZSgneWNoYW5nZScpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RyICs9IC8qKiBAdHlwZSB7Q29udGVudFN0cmluZ30gKi8gKG4uY29udGVudCkuc3RyXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRUeXBlOlxuICAgICAgICAgICAgY2FzZSBDb250ZW50RW1iZWQ6IHtcbiAgICAgICAgICAgICAgcGFja1N0cigpXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgY29uc3Qgb3AgPSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0OiBuLmNvbnRlbnQuZ2V0Q29udGVudCgpWzBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBdHRyaWJ1dGVzLnNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSAvKiogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn0gKi8gKHt9KVxuICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSBhdHRyc1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3BzLnB1c2gob3ApXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgICAgICAgIGlmIChpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgcGFja1N0cigpXG4gICAgICAgICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKG4uY29udGVudCkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG4ucmlnaHRcbiAgICAgIH1cbiAgICAgIHBhY2tTdHIoKVxuICAgIH1cbiAgICBpZiAoc25hcHNob3QgfHwgcHJldlNuYXBzaG90KSB7XG4gICAgICAvLyBzbmFwc2hvdHMgYXJlIG1lcmdlZCBhZ2FpbiBhZnRlciB0aGUgdHJhbnNhY3Rpb24sIHNvIHdlIG5lZWQgdG8ga2VlcCB0aGVcbiAgICAgIC8vIHRyYW5zYWN0aW9uIGFsaXZlIHVudGlsIHdlIGFyZSBkb25lXG4gICAgICB0cmFuc2FjdChkb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgaWYgKHNuYXBzaG90KSB7XG4gICAgICAgICAgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgc25hcHNob3QpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZTbmFwc2hvdCkge1xuICAgICAgICAgIHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHModHJhbnNhY3Rpb24sIHByZXZTbmFwc2hvdClcbiAgICAgICAgfVxuICAgICAgICBjb21wdXRlRGVsdGEoKVxuICAgICAgfSwgJ2NsZWFudXAnKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGVsdGEoKVxuICAgIH1cbiAgICByZXR1cm4gb3BzXG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IHRleHQgYXQgYSBnaXZlbiBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byBzdGFydCBpbnNlcnRpbmcuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGluc2VydCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge1RleHRBdHRyaWJ1dGVzfSBbYXR0cmlidXRlc10gT3B0aW9uYWxseSBkZWZpbmUgc29tZSBmb3JtYXR0aW5nXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlIGluc2VydGVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dC5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5zZXJ0IChpbmRleCwgdGV4dCwgYXR0cmlidXRlcykge1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jXG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcG9zID0gZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgIWF0dHJpYnV0ZXMpXG4gICAgICAgIGlmICghYXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJpYnV0ZXMgPSB7fVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBwb3MuY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodiwgaykgPT4geyBhdHRyaWJ1dGVzW2tdID0gdiB9KVxuICAgICAgICB9XG4gICAgICAgIGluc2VydFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIHBvcywgdGV4dCwgYXR0cmlidXRlcylcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmluc2VydChpbmRleCwgdGV4dCwgYXR0cmlidXRlcykpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYW4gZW1iZWQgYXQgYSBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgdGhlIGVtYmVkIGF0LlxuICAgKiBAcGFyYW0ge09iamVjdCB8IEFic3RyYWN0VHlwZTxhbnk+fSBlbWJlZCBUaGUgT2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZW1iZWQuXG4gICAqIEBwYXJhbSB7VGV4dEF0dHJpYnV0ZXN9IFthdHRyaWJ1dGVzXSBBdHRyaWJ1dGUgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5zZXJ0RW1iZWQgKGluZGV4LCBlbWJlZCwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHkgPSB0aGlzLmRvY1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsICFhdHRyaWJ1dGVzKVxuICAgICAgICBpbnNlcnRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBwb3MsIGVtYmVkLCBhdHRyaWJ1dGVzIHx8IHt9KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuaW5zZXJ0RW1iZWQoaW5kZXgsIGVtYmVkLCBhdHRyaWJ1dGVzIHx8IHt9KSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyB0ZXh0IHN0YXJ0aW5nIGZyb20gYW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBzdGFydCBkZWxldGluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gcmVtb3ZlLiBEZWZhdWx0cyB0byAxLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBkZWxldGUgKGluZGV4LCBsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jXG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgZGVsZXRlVGV4dCh0cmFuc2FjdGlvbiwgZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgdHJ1ZSksIGxlbmd0aClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmRlbGV0ZShpbmRleCwgbGVuZ3RoKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBwcm9wZXJ0aWVzIHRvIGEgcmFuZ2Ugb2YgdGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBwb3NpdGlvbiB3aGVyZSB0byBzdGFydCBmb3JtYXR0aW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBhbW91bnQgb2YgY2hhcmFjdGVycyB0byBhc3NpZ24gcHJvcGVydGllcyB0by5cbiAgICogQHBhcmFtIHtUZXh0QXR0cmlidXRlc30gYXR0cmlidXRlcyBBdHRyaWJ1dGUgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZm9ybWF0IChpbmRleCwgbGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHkgPSB0aGlzLmRvY1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGZhbHNlKVxuICAgICAgICBpZiAocG9zLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgcG9zLCBsZW5ndGgsIGF0dHJpYnV0ZXMpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5mb3JtYXQoaW5kZXgsIGxlbmd0aCwgYXR0cmlidXRlcykpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgcmVtb3ZlZC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlQXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG9yIHVwZGF0ZXMgYW4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKiBAcGFyYW0ge2FueX0gYXR0cmlidXRlVmFsdWUgVGhlIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0QXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcFNldCh0cmFuc2FjdGlvbiwgdGhpcywgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaWRlbnRpZmllcyB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllZCB2YWx1ZS5cbiAgICogQHJldHVybiB7YW55fSBUaGUgcXVlcmllZCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBHZXQodGhpcywgYXR0cmlidXRlTmFtZSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgYXR0cmlidXRlIG5hbWUvdmFsdWUgcGFpcnMgaW4gYSBKU09OIE9iamVjdC5cbiAgICpcbiAgICogQG5vdGUgWG1sLVRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBhdHRyaWJ1dGVzLiBZb3UgY2FuIHVzZSB0aGlzIGZlYXR1cmUgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8gY29tcGxldGUgdGV4dC1ibG9ja3MuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIGFueT59IEEgSlNPTiBPYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZXMgKCkge1xuICAgIHJldHVybiB0eXBlTWFwR2V0QWxsKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlUZXh0UmVmSUQpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gX2RlY29kZXJcbiAqIEByZXR1cm4ge1lUZXh0fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRZVGV4dCA9IF9kZWNvZGVyID0+IG5ldyBZVGV4dCgpXG4iLCAiLyoqXG4gKiBAbW9kdWxlIFlYbWxcbiAqL1xuXG5pbXBvcnQge1xuICBZWG1sRXZlbnQsXG4gIFlYbWxFbGVtZW50LFxuICBBYnN0cmFjdFR5cGUsXG4gIHR5cGVMaXN0TWFwLFxuICB0eXBlTGlzdEZvckVhY2gsXG4gIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3MsXG4gIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcixcbiAgdHlwZUxpc3REZWxldGUsXG4gIHR5cGVMaXN0VG9BcnJheSxcbiAgWVhtbEZyYWdtZW50UmVmSUQsXG4gIGNhbGxUeXBlT2JzZXJ2ZXJzLFxuICB0cmFuc2FjdCxcbiAgdHlwZUxpc3RHZXQsXG4gIHR5cGVMaXN0U2xpY2UsXG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgRG9jLCBDb250ZW50VHlwZSwgVHJhbnNhY3Rpb24sIEl0ZW0sIFlYbWxUZXh0LCBZWG1sSG9vayAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnbGliMC9lcnJvcidcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJ2xpYjAvYXJyYXknXG5cbi8qKlxuICogRGVmaW5lIHRoZSBlbGVtZW50cyB0byB3aGljaCBhIHNldCBvZiBDU1MgcXVlcmllcyBhcHBseS5cbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ1NTX1NlbGVjdG9yc3xDU1NfU2VsZWN0b3JzfVxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHF1ZXJ5ID0gJy5jbGFzc1NlbGVjdG9yJ1xuICogICBxdWVyeSA9ICdub2RlU2VsZWN0b3InXG4gKiAgIHF1ZXJ5ID0gJyNpZFNlbGVjdG9yJ1xuICpcbiAqIEB0eXBlZGVmIHtzdHJpbmd9IENTU19TZWxlY3RvclxuICovXG5cbi8qKlxuICogRG9tIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiBAY2FsbGJhY2sgZG9tRmlsdGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgVGhlIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge01hcH0gYXR0cmlidXRlcyBUaGUgbWFwIG9mIGF0dHJpYnV0ZXMuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRvIGluY2x1ZGUgdGhlIERvbSBub2RlIGluIHRoZSBZWG1sRWxlbWVudC5cbiAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzdWJzZXQgb2YgdGhlIG5vZGVzIG9mIGEgWVhtbEVsZW1lbnQgLyBZWG1sRnJhZ21lbnQgYW5kIGFcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGVtLlxuICpcbiAqIENhbiBiZSBjcmVhdGVkIHdpdGgge0BsaW5rIFlYbWxGcmFnbWVudCNjcmVhdGVUcmVlV2Fsa2VyfVxuICpcbiAqIEBwdWJsaWNcbiAqIEBpbXBsZW1lbnRzIHtJdGVyYWJsZTxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sRWxlbWVudHxZWG1sSG9vaz59XG4gKi9cbmV4cG9ydCBjbGFzcyBZWG1sVHJlZVdhbGtlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lYbWxGcmFnbWVudCB8IFlYbWxFbGVtZW50fSByb290XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQWJzdHJhY3RUeXBlPGFueT4pOmJvb2xlYW59IFtmXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHJvb3QsIGYgPSAoKSA9PiB0cnVlKSB7XG4gICAgdGhpcy5fZmlsdGVyID0gZlxuICAgIHRoaXMuX3Jvb3QgPSByb290XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW19XG4gICAgICovXG4gICAgdGhpcy5fY3VycmVudE5vZGUgPSAvKiogQHR5cGUge0l0ZW19ICovIChyb290Ll9zdGFydClcbiAgICB0aGlzLl9maXJzdENhbGwgPSB0cnVlXG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5leHQgbm9kZS5cbiAgICpcbiAgICogQHJldHVybiB7SXRlcmF0b3JSZXN1bHQ8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2s+fSBUaGUgbmV4dCBub2RlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBuZXh0ICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIGxldCBuID0gdGhpcy5fY3VycmVudE5vZGVcbiAgICBsZXQgdHlwZSA9IG4gJiYgbi5jb250ZW50ICYmIC8qKiBAdHlwZSB7YW55fSAqLyAobi5jb250ZW50KS50eXBlXG4gICAgaWYgKG4gIT09IG51bGwgJiYgKCF0aGlzLl9maXJzdENhbGwgfHwgbi5kZWxldGVkIHx8ICF0aGlzLl9maWx0ZXIodHlwZSkpKSB7IC8vIGlmIGZpcnN0IGNhbGwsIHdlIGNoZWNrIGlmIHdlIGNhbiB1c2UgdGhlIGZpcnN0IGl0ZW1cbiAgICAgIGRvIHtcbiAgICAgICAgdHlwZSA9IC8qKiBAdHlwZSB7YW55fSAqLyAobi5jb250ZW50KS50eXBlXG4gICAgICAgIGlmICghbi5kZWxldGVkICYmICh0eXBlLmNvbnN0cnVjdG9yID09PSBZWG1sRWxlbWVudCB8fCB0eXBlLmNvbnN0cnVjdG9yID09PSBZWG1sRnJhZ21lbnQpICYmIHR5cGUuX3N0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gd2FsayBkb3duIGluIHRoZSB0cmVlXG4gICAgICAgICAgbiA9IHR5cGUuX3N0YXJ0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gd2FsayByaWdodCBvciB1cCBpbiB0aGUgdHJlZVxuICAgICAgICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobi5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBuID0gbi5yaWdodFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuLnBhcmVudCA9PT0gdGhpcy5fcm9vdCkge1xuICAgICAgICAgICAgICBuID0gbnVsbFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbiA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChuLnBhcmVudCkuX2l0ZW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4gIT09IG51bGwgJiYgKG4uZGVsZXRlZCB8fCAhdGhpcy5fZmlsdGVyKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpKSlcbiAgICB9XG4gICAgdGhpcy5fZmlyc3RDYWxsID0gZmFsc2VcbiAgICBpZiAobiA9PT0gbnVsbCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9XG4gICAgfVxuICAgIHRoaXMuX2N1cnJlbnROb2RlID0gblxuICAgIHJldHVybiB7IHZhbHVlOiAvKiogQHR5cGUge2FueX0gKi8gKG4uY29udGVudCkudHlwZSwgZG9uZTogZmFsc2UgfVxuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGxpc3Qgb2Yge0BsaW5rIFlYbWxFbGVtZW50fS5hbmQge0BsaW5rIFlYbWxUZXh0fSB0eXBlcy5cbiAqIEEgWXhtbEZyYWdtZW50IGlzIHNpbWlsYXIgdG8gYSB7QGxpbmsgWVhtbEVsZW1lbnR9LCBidXQgaXQgZG9lcyBub3QgaGF2ZSBhXG4gKiBub2RlTmFtZSBhbmQgaXQgZG9lcyBub3QgaGF2ZSBhdHRyaWJ1dGVzLiBUaG91Z2ggaXQgY2FuIGJlIGJvdW5kIHRvIGEgRE9NXG4gKiBlbGVtZW50IC0gaW4gdGhpcyBjYXNlIHRoZSBhdHRyaWJ1dGVzIGFuZCB0aGUgbm9kZU5hbWUgYXJlIG5vdCBzaGFyZWQuXG4gKlxuICogQHB1YmxpY1xuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlYbWxFdmVudD5cbiAqL1xuZXhwb3J0IGNsYXNzIFlYbWxGcmFnbWVudCBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT58bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBmaXJzdENoaWxkICgpIHtcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuX2ZpcnN0XG4gICAgcmV0dXJuIGZpcnN0ID8gZmlyc3QuY29udGVudC5nZXRDb250ZW50KClbMF0gOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKVxuICAgIHRoaXMuaW5zZXJ0KDAsIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpKVxuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsXG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sRnJhZ21lbnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxGcmFnbWVudH1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBlbCA9IG5ldyBZWG1sRnJhZ21lbnQoKVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBlbC5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGl0ZW0gPT4gaXRlbSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGl0ZW0uY2xvbmUoKSA6IGl0ZW0pKVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWxpbUNvbnRlbnQgPT09IG51bGwgPyB0aGlzLl9sZW5ndGggOiB0aGlzLl9wcmVsaW1Db250ZW50Lmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHN1YnRyZWUgb2YgY2hpbGROb2Rlcy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgd2Fsa2VyID0gZWxlbS5jcmVhdGVUcmVlV2Fsa2VyKGRvbSA9PiBkb20ubm9kZU5hbWUgPT09ICdkaXYnKVxuICAgKiBmb3IgKGxldCBub2RlIGluIHdhbGtlcikge1xuICAgKiAgIC8vIGBub2RlYCBpcyBhIGRpdiBub2RlXG4gICAqICAgbm9wKG5vZGUpXG4gICAqIH1cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihBYnN0cmFjdFR5cGU8YW55Pik6Ym9vbGVhbn0gZmlsdGVyIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIG9uIGVhY2ggY2hpbGQgZWxlbWVudCBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY2hpbGRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBzdWJ0cmVlLlxuICAgKiBAcmV0dXJuIHtZWG1sVHJlZVdhbGtlcn0gQSBzdWJ0cmVlIGFuZCBhIHBvc2l0aW9uIHdpdGhpbiBpdC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlVHJlZVdhbGtlciAoZmlsdGVyKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sVHJlZVdhbGtlcih0aGlzLCBmaWx0ZXIpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgWVhtbEVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBxdWVyeS5cbiAgICogU2ltaWxhciB0byBET00ncyB7QGxpbmsgcXVlcnlTZWxlY3Rvcn0uXG4gICAqXG4gICAqIFF1ZXJ5IHN1cHBvcnQ6XG4gICAqICAgLSB0YWduYW1lXG4gICAqIFRPRE86XG4gICAqICAgLSBpZFxuICAgKiAgIC0gYXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Q1NTX1NlbGVjdG9yfSBxdWVyeSBUaGUgcXVlcnkgb24gdGhlIGNoaWxkcmVuLlxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sSG9va3xudWxsfSBUaGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHF1ZXJ5IG9yIG51bGwuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHF1ZXJ5U2VsZWN0b3IgKHF1ZXJ5KSB7XG4gICAgcXVlcnkgPSBxdWVyeS50b1VwcGVyQ2FzZSgpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGl0ZXJhdG9yID0gbmV3IFlYbWxUcmVlV2Fsa2VyKHRoaXMsIGVsZW1lbnQgPT4gZWxlbWVudC5ub2RlTmFtZSAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHF1ZXJ5KVxuICAgIGNvbnN0IG5leHQgPSBpdGVyYXRvci5uZXh0KClcbiAgICBpZiAobmV4dC5kb25lKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV4dC52YWx1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBZWG1sRWxlbWVudHMgdGhhdCBtYXRjaCB0aGUgcXVlcnkuXG4gICAqIFNpbWlsYXIgdG8gRG9tJ3Mge0BsaW5rIHF1ZXJ5U2VsZWN0b3JBbGx9LlxuICAgKlxuICAgKiBAdG9kbyBEb2VzIG5vdCB5ZXQgc3VwcG9ydCBhbGwgcXVlcmllcy4gQ3VycmVudGx5IG9ubHkgcXVlcnkgYnkgdGFnTmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtDU1NfU2VsZWN0b3J9IHF1ZXJ5IFRoZSBxdWVyeSBvbiB0aGUgY2hpbGRyZW5cbiAgICogQHJldHVybiB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2t8bnVsbD59IFRoZSBlbGVtZW50cyB0aGF0IG1hdGNoIHRoaXMgcXVlcnkuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHF1ZXJ5U2VsZWN0b3JBbGwgKHF1ZXJ5KSB7XG4gICAgcXVlcnkgPSBxdWVyeS50b1VwcGVyQ2FzZSgpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBhcnJheS5mcm9tKG5ldyBZWG1sVHJlZVdhbGtlcih0aGlzLCBlbGVtZW50ID0+IGVsZW1lbnQubm9kZU5hbWUgJiYgZWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBxdWVyeSkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZWG1sRXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgY2FsbFR5cGVPYnNlcnZlcnModGhpcywgdHJhbnNhY3Rpb24sIG5ldyBZWG1sRXZlbnQodGhpcywgcGFyZW50U3VicywgdHJhbnNhY3Rpb24pKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFsbCB0aGUgY2hpbGRyZW4gb2YgdGhpcyBZWG1sRnJhZ21lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbGwgY2hpbGRyZW4uXG4gICAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0TWFwKHRoaXMsIHhtbCA9PiB4bWwudG9TdHJpbmcoKSkuam9pbignJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRG9tIEVsZW1lbnQgdGhhdCBtaXJyb3JzIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IFtfZG9jdW1lbnQ9ZG9jdW1lbnRdIFRoZSBkb2N1bWVudCBvYmplY3QgKHlvdSBtdXN0IGRlZmluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlanMpXG4gICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gW2hvb2tzPXt9XSBPcHRpb25hbCBwcm9wZXJ0eSB0byBjdXN0b21pemUgaG93IGhvb2tzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHByZXNlbnRlZCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7YW55fSBbYmluZGluZ10gWW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkuIFRoaXMgaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBpZiBEb21CaW5kaW5nIHdhbnRzIHRvIGNyZWF0ZSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uIHRvIHRoZSBjcmVhdGVkIERPTSB0eXBlLlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RPTSAoX2RvY3VtZW50ID0gZG9jdW1lbnQsIGhvb2tzID0ge30sIGJpbmRpbmcpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IF9kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihmcmFnbWVudCwgdGhpcylcbiAgICB9XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIHhtbFR5cGUgPT4ge1xuICAgICAgZnJhZ21lbnQuaW5zZXJ0QmVmb3JlKHhtbFR5cGUudG9ET00oX2RvY3VtZW50LCBob29rcywgYmluZGluZyksIG51bGwpXG4gICAgfSlcbiAgICByZXR1cm4gZnJhZ21lbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBjb250ZW50IGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gSW5zZXJ0IGNoYXJhY3RlciAnYScgYXQgcG9zaXRpb24gMFxuICAgKiAgeG1sLmluc2VydCgwLCBbbmV3IFkuWG1sVGV4dCgndGV4dCcpXSlcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgY29udGVudCBhdFxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBUaGUgYXJyYXkgb2YgY29udGVudFxuICAgKi9cbiAgaW5zZXJ0IChpbmRleCwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3RJbnNlcnRHZW5lcmljcyh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGNvbnRlbnQpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtaWdub3JlIF9wcmVsaW1Db250ZW50IGlzIGRlZmluZWQgYmVjYXVzZSB0aGlzIGlzIG5vdCB5ZXQgaW50ZWdyYXRlZFxuICAgICAgdGhpcy5fcHJlbGltQ29udGVudC5zcGxpY2UoaW5kZXgsIDAsIC4uLmNvbnRlbnQpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IGNvbnRlbnQgYXQgYW4gaW5kZXguXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAvLyBJbnNlcnQgY2hhcmFjdGVyICdhJyBhdCBwb3NpdGlvbiAwXG4gICAqICB4bWwuaW5zZXJ0KDAsIFtuZXcgWS5YbWxUZXh0KCd0ZXh0JyldKVxuICAgKlxuICAgKiBAcGFyYW0ge251bGx8SXRlbXxZWG1sRWxlbWVudHxZWG1sVGV4dH0gcmVmIFRoZSBpbmRleCB0byBpbnNlcnQgY29udGVudCBhdFxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBUaGUgYXJyYXkgb2YgY29udGVudFxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXIgKHJlZiwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcmVmSXRlbSA9IChyZWYgJiYgcmVmIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlKSA/IHJlZi5faXRlbSA6IHJlZlxuICAgICAgICB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHRoaXMsIHJlZkl0ZW0sIGNvbnRlbnQpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYyA9IC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpXG4gICAgICBjb25zdCBpbmRleCA9IHJlZiA9PT0gbnVsbCA/IDAgOiBwYy5maW5kSW5kZXgoZWwgPT4gZWwgPT09IHJlZikgKyAxXG4gICAgICBpZiAoaW5kZXggPT09IDAgJiYgcmVmICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IGVycm9yLmNyZWF0ZSgnUmVmZXJlbmNlIGl0ZW0gbm90IGZvdW5kJylcbiAgICAgIH1cbiAgICAgIHBjLnNwbGljZShpbmRleCwgMCwgLi4uY29udGVudClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBlbGVtZW50cyBzdGFydGluZyBmcm9tIGFuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgZGVsZXRpbmcgZWxlbWVudHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZW1vdmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBkZWxldGUgKGluZGV4LCBsZW5ndGggPSAxKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGxlbmd0aClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgX3ByZWxpbUNvbnRlbnQgaXMgZGVmaW5lZCBiZWNhdXNlIHRoaXMgaXMgbm90IHlldCBpbnRlZ3JhdGVkXG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50LnNwbGljZShpbmRleCwgbGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2s+fVxuICAgKi9cbiAgdG9BcnJheSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0VG9BcnJheSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBhcHBlbmQuXG4gICAqL1xuICBwdXNoIChjb250ZW50KSB7XG4gICAgdGhpcy5pbnNlcnQodGhpcy5sZW5ndGgsIGNvbnRlbnQpXG4gIH1cblxuICAvKipcbiAgICogUHJlcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fSBjb250ZW50IEFycmF5IG9mIGNvbnRlbnQgdG8gcHJlcHBlbmQuXG4gICAqL1xuICB1bnNoaWZ0IChjb250ZW50KSB7XG4gICAgdGhpcy5pbnNlcnQoMCwgY29udGVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpLXRoIGVsZW1lbnQgZnJvbSBhIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4gZnJvbSB0aGUgWUFycmF5XG4gICAqIEByZXR1cm4ge1lYbWxFbGVtZW50fFlYbWxUZXh0fVxuICAgKi9cbiAgZ2V0IChpbmRleCkge1xuICAgIHJldHVybiB0eXBlTGlzdEdldCh0aGlzLCBpbmRleClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdXG4gICAqIEByZXR1cm4ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn1cbiAgICovXG4gIHNsaWNlIChzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgY2hpbGQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihZWG1sRWxlbWVudHxZWG1sVGV4dCxudW1iZXIsIHR5cGVvZiBzZWxmKTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCBmKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBvZiB0aGlzIHR5cGUgdG8gYmluYXJ5IGFuZCB3cml0ZSBpdCB0byBhblxuICAgKiBCaW5hcnlFbmNvZGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHRoaXMgSXRlbSBpcyBzZW50IHRvIGEgcmVtb3RlIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZWG1sRnJhZ21lbnRSZWZJRClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBfZGVjb2RlclxuICogQHJldHVybiB7WVhtbEZyYWdtZW50fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRZWG1sRnJhZ21lbnQgPSBfZGVjb2RlciA9PiBuZXcgWVhtbEZyYWdtZW50KClcbiIsICJpbXBvcnQgKiBhcyBvYmplY3QgZnJvbSAnbGliMC9vYmplY3QnXG5cbmltcG9ydCB7XG4gIFlYbWxGcmFnbWVudCxcbiAgdHJhbnNhY3QsXG4gIHR5cGVNYXBEZWxldGUsXG4gIHR5cGVNYXBIYXMsXG4gIHR5cGVNYXBTZXQsXG4gIHR5cGVNYXBHZXQsXG4gIHR5cGVNYXBHZXRBbGwsXG4gIHR5cGVNYXBHZXRBbGxTbmFwc2hvdCxcbiAgdHlwZUxpc3RGb3JFYWNoLFxuICBZWG1sRWxlbWVudFJlZklELFxuICBTbmFwc2hvdCwgWVhtbFRleHQsIENvbnRlbnRUeXBlLCBBYnN0cmFjdFR5cGUsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgRG9jLCBJdGVtIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R8bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pn0gVmFsdWVUeXBlc1xuICovXG5cbi8qKlxuICogQW4gWVhtbEVsZW1lbnQgaW1pdGF0ZXMgdGhlIGJlaGF2aW9yIG9mIGFcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH0uXG4gKlxuICogKiBBbiBZWG1sRWxlbWVudCBoYXMgYXR0cmlidXRlcyAoa2V5IHZhbHVlIHBhaXJzKVxuICogKiBBbiBZWG1sRWxlbWVudCBoYXMgY2hpbGRFbGVtZW50cyB0aGF0IG11c3QgaW5oZXJpdCBmcm9tIFlYbWxFbGVtZW50XG4gKlxuICogQHRlbXBsYXRlIHt7IFtrZXk6IHN0cmluZ106IFZhbHVlVHlwZXMgfX0gW0tWPXsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1dXG4gKi9cbmV4cG9ydCBjbGFzcyBZWG1sRWxlbWVudCBleHRlbmRzIFlYbWxGcmFnbWVudCB7XG4gIGNvbnN0cnVjdG9yIChub2RlTmFtZSA9ICdVTkRFRklORUQnKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMubm9kZU5hbWUgPSBub2RlTmFtZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fcHJlbGltQXR0cnMgPSBuZXcgTWFwKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBuZXh0U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLm5leHQgOiBudWxsXG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgcHJldlNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5wcmV2IDogbnVsbFxuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSlcbiAgICA7KC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKSkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICB9KVxuICAgIHRoaXMuX3ByZWxpbUF0dHJzID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gSXRlbSB3aXRoIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGlzIEl0ZW0gKHdpdGhvdXQgcG9zaXRpb24gZWZmZWN0KVxuICAgKlxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudH1cbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxFbGVtZW50KHRoaXMubm9kZU5hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbEVsZW1lbnQ8S1Y+fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtZWG1sRWxlbWVudDxLVj59XG4gICAgICovXG4gICAgY29uc3QgZWwgPSBuZXcgWVhtbEVsZW1lbnQodGhpcy5ub2RlTmFtZSlcbiAgICBjb25zdCBhdHRycyA9IHRoaXMuZ2V0QXR0cmlidXRlcygpXG4gICAgb2JqZWN0LmZvckVhY2goYXR0cnMsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBlbC5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGl0ZW0gPT4gaXRlbSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGl0ZW0uY2xvbmUoKSA6IGl0ZW0pKVxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFhNTCBzZXJpYWxpemF0aW9uIG9mIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqIFRoZSBhdHRyaWJ1dGVzIGFyZSBvcmRlcmVkIGJ5IGF0dHJpYnV0ZS1uYW1lLCBzbyB5b3UgY2FuIGVhc2lseSB1c2UgdGhpc1xuICAgKiBtZXRob2QgdG8gY29tcGFyZSBZWG1sRWxlbWVudHNcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9TdHJpbmcgKCkge1xuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKClcbiAgICBjb25zdCBzdHJpbmdCdWlsZGVyID0gW11cbiAgICBjb25zdCBrZXlzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAga2V5cy5wdXNoKGtleSlcbiAgICB9XG4gICAga2V5cy5zb3J0KClcbiAgICBjb25zdCBrZXlzTGVuID0ga2V5cy5sZW5ndGhcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNMZW47IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXVxuICAgICAgc3RyaW5nQnVpbGRlci5wdXNoKGtleSArICc9XCInICsgYXR0cnNba2V5XSArICdcIicpXG4gICAgfVxuICAgIGNvbnN0IG5vZGVOYW1lID0gdGhpcy5ub2RlTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgY29uc3QgYXR0cnNTdHJpbmcgPSBzdHJpbmdCdWlsZGVyLmxlbmd0aCA+IDAgPyAnICcgKyBzdHJpbmdCdWlsZGVyLmpvaW4oJyAnKSA6ICcnXG4gICAgcmV0dXJuIGA8JHtub2RlTmFtZX0ke2F0dHJzU3RyaW5nfT4ke3N1cGVyLnRvU3RyaW5nKCl9PC8ke25vZGVOYW1lfT5gXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgZnJvbSB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpcyB0byBiZSByZW1vdmVkLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICByZW1vdmVBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGF0dHJpYnV0ZU5hbWUpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKS5kZWxldGUoYXR0cmlidXRlTmFtZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvciB1cGRhdGVzIGFuIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBLViAmIHN0cmluZ30gS0VZXG4gICAqXG4gICAqIEBwYXJhbSB7S0VZfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICogQHBhcmFtIHtLVltLRVldfSBhdHRyaWJ1dGVWYWx1ZSBUaGUgYXR0cmlidXRlIHZhbHVlIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwU2V0KHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKS5zZXQoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXR0cmlidXRlIHZhbHVlIHRoYXQgYmVsb25ncyB0byB0aGUgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSB7a2V5b2YgS1YgJiBzdHJpbmd9IEtFWVxuICAgKlxuICAgKiBAcGFyYW0ge0tFWX0gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpZGVudGlmaWVzIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVkIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtLVltLRVldfHVuZGVmaW5lZH0gVGhlIHF1ZXJpZWQgYXR0cmlidXRlIHZhbHVlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwR2V0KHRoaXMsIGF0dHJpYnV0ZU5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBhbiBhdHRyaWJ1dGUgZXhpc3RzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byBjaGVjayBmb3IgZXhpc3RlbmNlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBhdHRyaWJ1dGUgZXhpc3RzLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBoYXNBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwSGFzKHRoaXMsIGF0dHJpYnV0ZU5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGF0dHJpYnV0ZSBuYW1lL3ZhbHVlIHBhaXJzIGluIGEgSlNPTiBPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtzbmFwc2hvdF1cbiAgICogQHJldHVybiB7eyBbS2V5IGluIEV4dHJhY3Q8a2V5b2YgS1Ysc3RyaW5nPl0/OiBLVltLZXldfX0gQSBKU09OIE9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXR0cmlidXRlcyAoc25hcHNob3QpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovIChzbmFwc2hvdCA/IHR5cGVNYXBHZXRBbGxTbmFwc2hvdCh0aGlzLCBzbmFwc2hvdCkgOiB0eXBlTWFwR2V0QWxsKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sRWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbaG9va3M9e31dIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGUuXG4gICAqIEByZXR1cm4ge05vZGV9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MgPSB7fSwgYmluZGluZykge1xuICAgIGNvbnN0IGRvbSA9IF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMubm9kZU5hbWUpXG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLmdldEF0dHJpYnV0ZXMoKVxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGF0dHJzW2tleV1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIHl4bWwgPT4ge1xuICAgICAgZG9tLmFwcGVuZENoaWxkKHl4bWwudG9ET00oX2RvY3VtZW50LCBob29rcywgYmluZGluZykpXG4gICAgfSlcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihkb20sIHRoaXMpXG4gICAgfVxuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVhtbEVsZW1lbnRSZWZJRClcbiAgICBlbmNvZGVyLndyaXRlS2V5KHRoaXMubm9kZU5hbWUpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbEVsZW1lbnR9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkWVhtbEVsZW1lbnQgPSBkZWNvZGVyID0+IG5ldyBZWG1sRWxlbWVudChkZWNvZGVyLnJlYWRLZXkoKSlcbiIsICJpbXBvcnQge1xuICBZRXZlbnQsXG4gIFlYbWxUZXh0LCBZWG1sRWxlbWVudCwgWVhtbEZyYWdtZW50LCBUcmFuc2FjdGlvbiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuLyoqXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEZyYWdtZW50PlxuICogQW4gRXZlbnQgdGhhdCBkZXNjcmliZXMgY2hhbmdlcyBvbiBhIFlYbWwgRWxlbWVudCBvciBZeG1sIEZyYWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBZWG1sRXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sRnJhZ21lbnR9IHRhcmdldCBUaGUgdGFyZ2V0IG9uIHdoaWNoIHRoZSBldmVudCBpcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0ge1NldDxzdHJpbmd8bnVsbD59IHN1YnMgVGhlIHNldCBvZiBjaGFuZ2VkIGF0dHJpYnV0ZXMuIGBudWxsYCBpcyBpbmNsdWRlZCBpZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgY2hpbGQgbGlzdCBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiBUaGUgdHJhbnNhY3Rpb24gaW5zdGFuY2Ugd2l0aCB3aWNoIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2Ugd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodGFyZ2V0LCBzdWJzLCB0cmFuc2FjdGlvbikge1xuICAgIHN1cGVyKHRhcmdldCwgdHJhbnNhY3Rpb24pXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY2hpbGRyZW4gY2hhbmdlZC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IGZhbHNlXG4gICAgLyoqXG4gICAgICogU2V0IG9mIGFsbCBjaGFuZ2VkIGF0dHJpYnV0ZXMuXG4gICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuYXR0cmlidXRlc0NoYW5nZWQgPSBuZXcgU2V0KClcbiAgICBzdWJzLmZvckVhY2goKHN1YikgPT4ge1xuICAgICAgaWYgKHN1YiA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNoaWxkTGlzdENoYW5nZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNDaGFuZ2VkLmFkZChzdWIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFlNYXAsXG4gIFlYbWxIb29rUmVmSUQsXG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuLyoqXG4gKiBZb3UgY2FuIG1hbmFnZSBiaW5kaW5nIHRvIGEgY3VzdG9tIHR5cGUgd2l0aCBZWG1sSG9vay5cbiAqXG4gKiBAZXh0ZW5kcyB7WU1hcDxhbnk+fVxuICovXG5leHBvcnQgY2xhc3MgWVhtbEhvb2sgZXh0ZW5kcyBZTWFwIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBob29rTmFtZSBub2RlTmFtZSBvZiB0aGUgRG9tIE5vZGUuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoaG9va05hbWUpIHtcbiAgICBzdXBlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmhvb2tOYW1lID0gaG9va05hbWVcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEl0ZW0gd2l0aCB0aGUgc2FtZSBlZmZlY3QgYXMgdGhpcyBJdGVtICh3aXRob3V0IHBvc2l0aW9uIGVmZmVjdClcbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxIb29rKHRoaXMuaG9va05hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbEhvb2t9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgZWwgPSBuZXcgWVhtbEhvb2sodGhpcy5ob29rTmFtZSlcbiAgICB0aGlzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGVsLnNldChrZXksIHZhbHVlKVxuICAgIH0pXG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERvbSBFbGVtZW50IHRoYXQgbWlycm9ycyB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBbX2RvY3VtZW50PWRvY3VtZW50XSBUaGUgZG9jdW1lbnQgb2JqZWN0ICh5b3UgbXVzdCBkZWZpbmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aGVuIGNhbGxpbmcgdGhpcyBtZXRob2QgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZWpzKVxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBhbnk+fSBbaG9va3NdIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGVcbiAgICogQHJldHVybiB7RWxlbWVudH0gVGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9ET00gKF9kb2N1bWVudCA9IGRvY3VtZW50LCBob29rcyA9IHt9LCBiaW5kaW5nKSB7XG4gICAgY29uc3QgaG9vayA9IGhvb2tzW3RoaXMuaG9va05hbWVdXG4gICAgbGV0IGRvbVxuICAgIGlmIChob29rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRvbSA9IGhvb2suY3JlYXRlRG9tKHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5ob29rTmFtZSlcbiAgICB9XG4gICAgZG9tLnNldEF0dHJpYnV0ZSgnZGF0YS15anMtaG9vaycsIHRoaXMuaG9va05hbWUpXG4gICAgaWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmluZGluZy5fY3JlYXRlQXNzb2NpYXRpb24oZG9tLCB0aGlzKVxuICAgIH1cbiAgICByZXR1cm4gZG9tXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHlwZSB0byBiaW5hcnkgYW5kIHdyaXRlIGl0IHRvIGFuXG4gICAqIEJpbmFyeUVuY29kZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhpcyBJdGVtIGlzIHNlbnQgdG8gYSByZW1vdGUgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxIb29rUmVmSUQpXG4gICAgZW5jb2Rlci53cml0ZUtleSh0aGlzLmhvb2tOYW1lKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lYbWxIb29rfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRZWG1sSG9vayA9IGRlY29kZXIgPT5cbiAgbmV3IFlYbWxIb29rKGRlY29kZXIucmVhZEtleSgpKVxuIiwgImltcG9ydCB7XG4gIFlUZXh0LFxuICBZWG1sVGV4dFJlZklELFxuICBDb250ZW50VHlwZSwgWVhtbEVsZW1lbnQsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbi8qKlxuICogUmVwcmVzZW50cyB0ZXh0IGluIGEgRG9tIEVsZW1lbnQuIEluIHRoZSBmdXR1cmUgdGhpcyB0eXBlIHdpbGwgYWxzbyBoYW5kbGVcbiAqIHNpbXBsZSBmb3JtYXR0aW5nIGluZm9ybWF0aW9uIGxpa2UgYm9sZCBhbmQgaXRhbGljLlxuICovXG5leHBvcnQgY2xhc3MgWVhtbFRleHQgZXh0ZW5kcyBZVGV4dCB7XG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBuZXh0U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLm5leHQgOiBudWxsXG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgcHJldlNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5wcmV2IDogbnVsbFxuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVhtbFRleHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxUZXh0fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IHRleHQgPSBuZXcgWVhtbFRleHQoKVxuICAgIHRleHQuYXBwbHlEZWx0YSh0aGlzLnRvRGVsdGEoKSlcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sVGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbaG9va3NdIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGUuXG4gICAqIEByZXR1cm4ge1RleHR9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MsIGJpbmRpbmcpIHtcbiAgICBjb25zdCBkb20gPSBfZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50b1N0cmluZygpKVxuICAgIGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJpbmRpbmcuX2NyZWF0ZUFzc29jaWF0aW9uKGRvbSwgdGhpcylcbiAgICB9XG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy50b0RlbHRhKCkubWFwKGRlbHRhID0+IHtcbiAgICAgIGNvbnN0IG5lc3RlZE5vZGVzID0gW11cbiAgICAgIGZvciAoY29uc3Qgbm9kZU5hbWUgaW4gZGVsdGEuYXR0cmlidXRlcykge1xuICAgICAgICBjb25zdCBhdHRycyA9IFtdXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRlbHRhLmF0dHJpYnV0ZXNbbm9kZU5hbWVdKSB7XG4gICAgICAgICAgYXR0cnMucHVzaCh7IGtleSwgdmFsdWU6IGRlbHRhLmF0dHJpYnV0ZXNbbm9kZU5hbWVdW2tleV0gfSlcbiAgICAgICAgfVxuICAgICAgICAvLyBzb3J0IGF0dHJpYnV0ZXMgdG8gZ2V0IGEgdW5pcXVlIG9yZGVyXG4gICAgICAgIGF0dHJzLnNvcnQoKGEsIGIpID0+IGEua2V5IDwgYi5rZXkgPyAtMSA6IDEpXG4gICAgICAgIG5lc3RlZE5vZGVzLnB1c2goeyBub2RlTmFtZSwgYXR0cnMgfSlcbiAgICAgIH1cbiAgICAgIC8vIHNvcnQgbm9kZSBvcmRlciB0byBnZXQgYSB1bmlxdWUgb3JkZXJcbiAgICAgIG5lc3RlZE5vZGVzLnNvcnQoKGEsIGIpID0+IGEubm9kZU5hbWUgPCBiLm5vZGVOYW1lID8gLTEgOiAxKVxuICAgICAgLy8gbm93IGNvbnZlcnQgdG8gZG9tIHN0cmluZ1xuICAgICAgbGV0IHN0ciA9ICcnXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lc3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXN0ZWROb2Rlc1tpXVxuICAgICAgICBzdHIgKz0gYDwke25vZGUubm9kZU5hbWV9YFxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGUuYXR0cnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBhdHRyID0gbm9kZS5hdHRyc1tqXVxuICAgICAgICAgIHN0ciArPSBgICR7YXR0ci5rZXl9PVwiJHthdHRyLnZhbHVlfVwiYFxuICAgICAgICB9XG4gICAgICAgIHN0ciArPSAnPidcbiAgICAgIH1cbiAgICAgIHN0ciArPSBkZWx0YS5pbnNlcnRcbiAgICAgIGZvciAobGV0IGkgPSBuZXN0ZWROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBzdHIgKz0gYDwvJHtuZXN0ZWROb2Rlc1tpXS5ub2RlTmFtZX0+YFxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0clxuICAgIH0pLmpvaW4oJycpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxUZXh0UmVmSUQpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbFRleHR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVhZFlYbWxUZXh0ID0gZGVjb2RlciA9PiBuZXcgWVhtbFRleHQoKVxuIiwgImltcG9ydCB7XG4gIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBJRCwgVHJhbnNhY3Rpb24gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdFN0cnVjdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoaWQsIGxlbmd0aCkge1xuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdGhpcyBzdHJ1Y3Qgd2l0aCB0aGUgaXRlbSB0byB0aGUgcmlnaHQuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGFscmVhZHkgYXNzdW1pbmcgdGhhdCBgdGhpcy5pZC5jbG9jayArIHRoaXMubGVuZ3RoID09PSB0aGlzLmlkLmNsb2NrYC5cbiAgICogQWxzbyB0aGlzIG1ldGhvZCBkb2VzICpub3QqIHJlbW92ZSByaWdodCBmcm9tIFN0cnVjdFN0b3JlIVxuICAgKiBAcGFyYW0ge0Fic3RyYWN0U3RydWN0fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3ZXRoZXIgdGhpcyBtZXJnZWQgd2l0aCByaWdodFxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuY29kaW5nUmVmXG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0LCBlbmNvZGluZ1JlZikge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgQWJzdHJhY3RTdHJ1Y3QsXG4gIGFkZFN0cnVjdCxcbiAgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVEZWNvZGVyVjIsIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBTdHJ1Y3RTdG9yZSwgVHJhbnNhY3Rpb24sIElEIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5leHBvcnQgY29uc3Qgc3RydWN0R0NSZWZOdW1iZXIgPSAwXG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEdDIGV4dGVuZHMgQWJzdHJhY3RTdHJ1Y3Qge1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGRlbGV0ZSAoKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0dDfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSByaWdodC5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRoaXMubGVuZ3RoICs9IHJpZ2h0Lmxlbmd0aFxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIHRoaXMuaWQuY2xvY2sgKz0gb2Zmc2V0XG4gICAgICB0aGlzLmxlbmd0aCAtPSBvZmZzZXRcbiAgICB9XG4gICAgYWRkU3RydWN0KHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgdGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUluZm8oc3RydWN0R0NSZWZOdW1iZXIpXG4gICAgZW5jb2Rlci53cml0ZUxlbih0aGlzLmxlbmd0aCAtIG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcmV0dXJuIHtudWxsIHwgbnVtYmVyfVxuICAgKi9cbiAgZ2V0TWlzc2luZyAodHJhbnNhY3Rpb24sIHN0b3JlKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgU3RydWN0U3RvcmUsIEl0ZW0sIFRyYW5zYWN0aW9uIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuXG5leHBvcnQgY2xhc3MgQ29udGVudEJpbmFyeSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGNvbnRlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChjb250ZW50KSB7XG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmNvbnRlbnRdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRCaW5hcnl9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRCaW5hcnkodGhpcy5jb250ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEJpbmFyeX1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50QmluYXJ5fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlQnVmKHRoaXMuY29udGVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiAzXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMiB9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRCaW5hcnl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQ29udGVudEJpbmFyeSA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRCaW5hcnkoZGVjb2Rlci5yZWFkQnVmKCkpXG4iLCAiaW1wb3J0IHtcbiAgYWRkVG9EZWxldGVTZXQsXG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgU3RydWN0U3RvcmUsIEl0ZW0sIFRyYW5zYWN0aW9uIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29udGVudERlbGV0ZWQge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbikge1xuICAgIHRoaXMubGVuID0gbGVuXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RGVsZXRlZH1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudERlbGV0ZWQodGhpcy5sZW4pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50RGVsZXRlZH1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudERlbGV0ZWQodGhpcy5sZW4gLSBvZmZzZXQpXG4gICAgdGhpcy5sZW4gPSBvZmZzZXRcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnREZWxldGVkfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMubGVuICs9IHJpZ2h0LmxlblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgYWRkVG9EZWxldGVTZXQodHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpdGVtLmlkLmNsaWVudCwgaXRlbS5pZC5jbG9jaywgdGhpcy5sZW4pXG4gICAgaXRlbS5tYXJrRGVsZXRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVMZW4odGhpcy5sZW4gLSBvZmZzZXQpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMiB9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnREZWxldGVkfVxuICovXG5leHBvcnQgY29uc3QgcmVhZENvbnRlbnREZWxldGVkID0gZGVjb2RlciA9PiBuZXcgQ29udGVudERlbGV0ZWQoZGVjb2Rlci5yZWFkTGVuKCkpXG4iLCAiaW1wb3J0IHtcbiAgRG9jLCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIFN0cnVjdFN0b3JlLCBUcmFuc2FjdGlvbiwgSXRlbSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcblxuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnbGliMC9lcnJvcidcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZ3VpZFxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRzXG4gKi9cbmNvbnN0IGNyZWF0ZURvY0Zyb21PcHRzID0gKGd1aWQsIG9wdHMpID0+IG5ldyBEb2MoeyBndWlkLCAuLi5vcHRzLCBzaG91bGRMb2FkOiBvcHRzLnNob3VsZExvYWQgfHwgb3B0cy5hdXRvTG9hZCB8fCBmYWxzZSB9KVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50RG9jIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSBkb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb2MpIHtcbiAgICBpZiAoZG9jLl9pdGVtKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdUaGlzIGRvY3VtZW50IHdhcyBhbHJlYWR5IGludGVncmF0ZWQgYXMgYSBzdWItZG9jdW1lbnQuIFlvdSBzaG91bGQgY3JlYXRlIGEgc2Vjb25kIGluc3RhbmNlIGluc3RlYWQgd2l0aCB0aGUgc2FtZSBndWlkLicpXG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtEb2N9XG4gICAgICovXG4gICAgdGhpcy5kb2MgPSBkb2NcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIGNvbnN0IG9wdHMgPSB7fVxuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgICBpZiAoIWRvYy5nYykge1xuICAgICAgb3B0cy5nYyA9IGZhbHNlXG4gICAgfVxuICAgIGlmIChkb2MuYXV0b0xvYWQpIHtcbiAgICAgIG9wdHMuYXV0b0xvYWQgPSB0cnVlXG4gICAgfVxuICAgIGlmIChkb2MubWV0YSAhPT0gbnVsbCkge1xuICAgICAgb3B0cy5tZXRhID0gZG9jLm1ldGFcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW3RoaXMuZG9jXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50RG9jKGNyZWF0ZURvY0Zyb21PcHRzKHRoaXMuZG9jLmd1aWQsIHRoaXMub3B0cykpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnREb2N9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgLy8gdGhpcyBuZWVkcyB0byBiZSByZWZsZWN0ZWQgaW4gZG9jLmRlc3Ryb3kgYXMgd2VsbFxuICAgIHRoaXMuZG9jLl9pdGVtID0gaXRlbVxuICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NBZGRlZC5hZGQodGhpcy5kb2MpXG4gICAgaWYgKHRoaXMuZG9jLnNob3VsZExvYWQpIHtcbiAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NMb2FkZWQuYWRkKHRoaXMuZG9jKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge1xuICAgIGlmICh0cmFuc2FjdGlvbi5zdWJkb2NzQWRkZWQuaGFzKHRoaXMuZG9jKSkge1xuICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmRlbGV0ZSh0aGlzLmRvYylcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc1JlbW92ZWQuYWRkKHRoaXMuZG9jKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7IH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVTdHJpbmcodGhpcy5kb2MuZ3VpZClcbiAgICBlbmNvZGVyLndyaXRlQW55KHRoaXMub3B0cylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA5XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICovXG5leHBvcnQgY29uc3QgcmVhZENvbnRlbnREb2MgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50RG9jKGNyZWF0ZURvY0Zyb21PcHRzKGRlY29kZXIucmVhZFN0cmluZygpLCBkZWNvZGVyLnJlYWRBbnkoKSkpXG4iLCAiaW1wb3J0IHtcbiAgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVEZWNvZGVyVjIsIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBTdHJ1Y3RTdG9yZSwgSXRlbSwgVHJhbnNhY3Rpb24gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRFbWJlZCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZW1iZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChlbWJlZCkge1xuICAgIHRoaXMuZW1iZWQgPSBlbWJlZFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmVtYmVkXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RW1iZWR9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRFbWJlZCh0aGlzLmVtYmVkKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEVtYmVkfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRFbWJlZH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUpTT04odGhpcy5lbWJlZClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA1XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50RW1iZWR9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQ29udGVudEVtYmVkID0gZGVjb2RlciA9PiBuZXcgQ29udGVudEVtYmVkKGRlY29kZXIucmVhZEpTT04oKSlcbiIsICJpbXBvcnQge1xuICBZVGV4dCwgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVEZWNvZGVyVjIsIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBJdGVtLCBTdHJ1Y3RTdG9yZSwgVHJhbnNhY3Rpb24gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRGb3JtYXQge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEZvcm1hdH1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEZvcm1hdCh0aGlzLmtleSwgdGhpcy52YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gX29mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50Rm9ybWF0fVxuICAgKi9cbiAgc3BsaWNlIChfb2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50Rm9ybWF0fSBfcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAoX3JpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gX3RyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlIChfdHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICAvLyBAdG9kbyBzZWFyY2htYXJrZXIgYXJlIGN1cnJlbnRseSB1bnN1cHBvcnRlZCBmb3IgcmljaCB0ZXh0IGRvY3VtZW50c1xuICAgIGNvbnN0IHAgPSAvKiogQHR5cGUge1lUZXh0fSAqLyAoaXRlbS5wYXJlbnQpXG4gICAgcC5fc2VhcmNoTWFya2VyID0gbnVsbFxuICAgIHAuX2hhc0Zvcm1hdHRpbmcgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVLZXkodGhpcy5rZXkpXG4gICAgZW5jb2Rlci53cml0ZUpTT04odGhpcy52YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA2XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEZvcm1hdH1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRDb250ZW50Rm9ybWF0ID0gZGVjb2RlciA9PiBuZXcgQ29udGVudEZvcm1hdChkZWNvZGVyLnJlYWRLZXkoKSwgZGVjb2Rlci5yZWFkSlNPTigpKVxuIiwgImltcG9ydCB7XG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgVHJhbnNhY3Rpb24sIEl0ZW0sIFN0cnVjdFN0b3JlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50SlNPTiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFyclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGFycikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuYXJyID0gYXJyXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmFyclxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEpTT04odGhpcy5hcnIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudEpTT04odGhpcy5hcnIuc2xpY2Uob2Zmc2V0KSlcbiAgICB0aGlzLmFyciA9IHRoaXMuYXJyLnNsaWNlKDAsIG9mZnNldClcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRKU09OfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuY29uY2F0KHJpZ2h0LmFycilcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmFyci5sZW5ndGhcbiAgICBlbmNvZGVyLndyaXRlTGVuKGxlbiAtIG9mZnNldClcbiAgICBmb3IgKGxldCBpID0gb2Zmc2V0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmFycltpXVxuICAgICAgZW5jb2Rlci53cml0ZVN0cmluZyhjID09PSB1bmRlZmluZWQgPyAndW5kZWZpbmVkJyA6IEpTT04uc3RyaW5naWZ5KGMpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiAyXG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRDb250ZW50SlNPTiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKVxuICBjb25zdCBjcyA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBjID0gZGVjb2Rlci5yZWFkU3RyaW5nKClcbiAgICBpZiAoYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNzLnB1c2godW5kZWZpbmVkKVxuICAgIH0gZWxzZSB7XG4gICAgICBjcy5wdXNoKEpTT04ucGFyc2UoYykpXG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgQ29udGVudEpTT04oY3MpXG59XG4iLCAiaW1wb3J0IHtcbiAgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBUcmFuc2FjdGlvbiwgSXRlbSwgU3RydWN0U3RvcmUgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSBmcm9tICcuLi9pbnRlcm5hbHMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb250ZW50QW55IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoYXJyKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT59XG4gICAgICovXG4gICAgdGhpcy5hcnIgPSBhcnJcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRBbnl9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRBbnkodGhpcy5hcnIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50QW55fVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICBjb25zdCByaWdodCA9IG5ldyBDb250ZW50QW55KHRoaXMuYXJyLnNsaWNlKG9mZnNldCkpXG4gICAgdGhpcy5hcnIgPSB0aGlzLmFyci5zbGljZSgwLCBvZmZzZXQpXG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50QW55fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuY29uY2F0KHJpZ2h0LmFycilcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmFyci5sZW5ndGhcbiAgICBlbmNvZGVyLndyaXRlTGVuKGxlbiAtIG9mZnNldClcbiAgICBmb3IgKGxldCBpID0gb2Zmc2V0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmFycltpXVxuICAgICAgZW5jb2Rlci53cml0ZUFueShjKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA4XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEFueX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRDb250ZW50QW55ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IGxlbiA9IGRlY29kZXIucmVhZExlbigpXG4gIGNvbnN0IGNzID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNzLnB1c2goZGVjb2Rlci5yZWFkQW55KCkpXG4gIH1cbiAgcmV0dXJuIG5ldyBDb250ZW50QW55KGNzKVxufVxuIiwgImltcG9ydCB7XG4gIFVwZGF0ZURlY29kZXJWMSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgVHJhbnNhY3Rpb24sIEl0ZW0sIFN0cnVjdFN0b3JlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50U3RyaW5nIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdHIpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RyID0gc3RyXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLnN0ci5zcGxpdCgnJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudFN0cmluZ31cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudFN0cmluZyh0aGlzLnN0cilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRTdHJpbmd9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gbmV3IENvbnRlbnRTdHJpbmcodGhpcy5zdHIuc2xpY2Uob2Zmc2V0KSlcbiAgICB0aGlzLnN0ciA9IHRoaXMuc3RyLnNsaWNlKDAsIG9mZnNldClcblxuICAgIC8vIFByZXZlbnQgZW5jb2RpbmcgaW52YWxpZCBkb2N1bWVudHMgYmVjYXVzZSBvZiBzcGxpdHRpbmcgb2Ygc3Vycm9nYXRlIHBhaXJzOiBodHRwczovL2dpdGh1Yi5jb20veWpzL3lqcy9pc3N1ZXMvMjQ4XG4gICAgY29uc3QgZmlyc3RDaGFyQ29kZSA9IHRoaXMuc3RyLmNoYXJDb2RlQXQob2Zmc2V0IC0gMSlcbiAgICBpZiAoZmlyc3RDaGFyQ29kZSA+PSAweEQ4MDAgJiYgZmlyc3RDaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICAgIC8vIExhc3QgY2hhcmFjdGVyIG9mIHRoZSBsZWZ0IHNwbGl0IGlzIHRoZSBzdGFydCBvZiBhIHN1cnJvZ2F0ZSB1dGYxNi91Y3MyIHBhaXIuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHNwbGl0dGluZyBvZiBzdXJyb2dhdGUgcGFpcnMgYmVjYXVzZSB0aGlzIG1heSBsZWFkIHRvIGludmFsaWQgZG9jdW1lbnRzLlxuICAgICAgLy8gUmVwbGFjZSB0aGUgaW52YWxpZCBjaGFyYWN0ZXIgd2l0aCBhIHVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyICjvv70gLyBVK0ZGRkQpXG4gICAgICB0aGlzLnN0ciA9IHRoaXMuc3RyLnNsaWNlKDAsIG9mZnNldCAtIDEpICsgJ++/vSdcbiAgICAgIC8vIHJlcGxhY2UgcmlnaHQgYXMgd2VsbFxuICAgICAgcmlnaHQuc3RyID0gJ++/vScgKyByaWdodC5zdHIuc2xpY2UoMSlcbiAgICB9XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50U3RyaW5nfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuc3RyICs9IHJpZ2h0LnN0clxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVTdHJpbmcob2Zmc2V0ID09PSAwID8gdGhpcy5zdHIgOiB0aGlzLnN0ci5zbGljZShvZmZzZXQpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDRcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRTdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQ29udGVudFN0cmluZyA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRTdHJpbmcoZGVjb2Rlci5yZWFkU3RyaW5nKCkpXG4iLCAiaW1wb3J0IHtcbiAgcmVhZFlBcnJheSxcbiAgcmVhZFlNYXAsXG4gIHJlYWRZVGV4dCxcbiAgcmVhZFlYbWxFbGVtZW50LFxuICByZWFkWVhtbEZyYWdtZW50LFxuICByZWFkWVhtbEhvb2ssXG4gIHJlYWRZWG1sVGV4dCxcbiAgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVEZWNvZGVyVjIsIFVwZGF0ZUVuY29kZXJWMSwgVXBkYXRlRW5jb2RlclYyLCBTdHJ1Y3RTdG9yZSwgVHJhbnNhY3Rpb24sIEl0ZW0sIFlFdmVudCwgQWJzdHJhY3RUeXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbihVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjIpOkFic3RyYWN0VHlwZTxhbnk+Pn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCB0eXBlUmVmcyA9IFtcbiAgcmVhZFlBcnJheSxcbiAgcmVhZFlNYXAsXG4gIHJlYWRZVGV4dCxcbiAgcmVhZFlYbWxFbGVtZW50LFxuICByZWFkWVhtbEZyYWdtZW50LFxuICByZWFkWVhtbEhvb2ssXG4gIHJlYWRZWG1sVGV4dFxuXVxuXG5leHBvcnQgY29uc3QgWUFycmF5UmVmSUQgPSAwXG5leHBvcnQgY29uc3QgWU1hcFJlZklEID0gMVxuZXhwb3J0IGNvbnN0IFlUZXh0UmVmSUQgPSAyXG5leHBvcnQgY29uc3QgWVhtbEVsZW1lbnRSZWZJRCA9IDNcbmV4cG9ydCBjb25zdCBZWG1sRnJhZ21lbnRSZWZJRCA9IDRcbmV4cG9ydCBjb25zdCBZWG1sSG9va1JlZklEID0gNVxuZXhwb3J0IGNvbnN0IFlYbWxUZXh0UmVmSUQgPSA2XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRUeXBlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbdGhpcy50eXBlXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50VHlwZX1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudFR5cGUodGhpcy50eXBlLl9jb3B5KCkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50VHlwZX1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50VHlwZX0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICB0aGlzLnR5cGUuX2ludGVncmF0ZSh0cmFuc2FjdGlvbi5kb2MsIGl0ZW0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMudHlwZS5fc3RhcnRcbiAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pXG4gICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQuY2xvY2sgPCAodHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGl0ZW0uaWQuY2xpZW50KSB8fCAwKSkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgZ2MnZCBsYXRlciBhbmQgd2Ugd2FudCB0byBtZXJnZSBpdCBpZiBwb3NzaWJsZVxuICAgICAgICAvLyBXZSB0cnkgdG8gbWVyZ2UgYWxsIGRlbGV0ZWQgaXRlbXMgYWZ0ZXIgZWFjaCB0cmFuc2FjdGlvbixcbiAgICAgICAgLy8gYnV0IHdlIGhhdmUgbm8ga25vd2xlZGdlIGFib3V0IHRoYXQgdGhpcyBuZWVkcyB0byBiZSBtZXJnZWRcbiAgICAgICAgLy8gc2luY2UgaXQgaXMgbm90IGluIHRyYW5zYWN0aW9uLmRzLiBIZW5jZSB3ZSBhZGQgaXQgdG8gdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0c1xuICAgICAgICB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzLnB1c2goaXRlbSlcbiAgICAgIH1cbiAgICAgIGl0ZW0gPSBpdGVtLnJpZ2h0XG4gICAgfVxuICAgIHRoaXMudHlwZS5fbWFwLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZC5jbG9jayA8ICh0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoaXRlbS5pZC5jbGllbnQpIHx8IDApKSB7XG4gICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgICAgdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0cy5wdXNoKGl0ZW0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0cmFuc2FjdGlvbi5jaGFuZ2VkLmRlbGV0ZSh0aGlzLnR5cGUpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge1xuICAgIGxldCBpdGVtID0gdGhpcy50eXBlLl9zdGFydFxuICAgIHdoaWxlIChpdGVtICE9PSBudWxsKSB7XG4gICAgICBpdGVtLmdjKHN0b3JlLCB0cnVlKVxuICAgICAgaXRlbSA9IGl0ZW0ucmlnaHRcbiAgICB9XG4gICAgdGhpcy50eXBlLl9zdGFydCA9IG51bGxcbiAgICB0aGlzLnR5cGUuX21hcC5mb3JFYWNoKC8qKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSBpdGVtICovIChpdGVtKSA9PiB7XG4gICAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICBpdGVtLmdjKHN0b3JlLCB0cnVlKVxuICAgICAgICBpdGVtID0gaXRlbS5sZWZ0XG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLnR5cGUuX21hcCA9IG5ldyBNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICB0aGlzLnR5cGUuX3dyaXRlKGVuY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gN1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudFR5cGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQ29udGVudFR5cGUgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50VHlwZSh0eXBlUmVmc1tkZWNvZGVyLnJlYWRUeXBlUmVmKCldKGRlY29kZXIpKVxuIiwgImltcG9ydCB7XG4gIEdDLFxuICBnZXRTdGF0ZSxcbiAgQWJzdHJhY3RTdHJ1Y3QsXG4gIHJlcGxhY2VTdHJ1Y3QsXG4gIGFkZFN0cnVjdCxcbiAgYWRkVG9EZWxldGVTZXQsXG4gIGZpbmRSb290VHlwZUtleSxcbiAgY29tcGFyZUlEcyxcbiAgZ2V0SXRlbSxcbiAgZ2V0SXRlbUNsZWFuRW5kLFxuICBnZXRJdGVtQ2xlYW5TdGFydCxcbiAgcmVhZENvbnRlbnREZWxldGVkLFxuICByZWFkQ29udGVudEJpbmFyeSxcbiAgcmVhZENvbnRlbnRKU09OLFxuICByZWFkQ29udGVudEFueSxcbiAgcmVhZENvbnRlbnRTdHJpbmcsXG4gIHJlYWRDb250ZW50RW1iZWQsXG4gIHJlYWRDb250ZW50RG9jLFxuICBjcmVhdGVJRCxcbiAgcmVhZENvbnRlbnRGb3JtYXQsXG4gIHJlYWRDb250ZW50VHlwZSxcbiAgYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uLFxuICBpc0RlbGV0ZWQsXG4gIFN0YWNrSXRlbSwgRGVsZXRlU2V0LCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIsIENvbnRlbnRUeXBlLCBDb250ZW50RGVsZXRlZCwgU3RydWN0U3RvcmUsIElELCBBYnN0cmFjdFR5cGUsIFRyYW5zYWN0aW9uIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0gZnJvbSAnLi4vaW50ZXJuYWxzLmpzJ1xuXG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJ2xpYjAvYmluYXJ5J1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSdcblxuLyoqXG4gKiBAdG9kbyBUaGlzIHNob3VsZCByZXR1cm4gc2V2ZXJhbCBpdGVtc1xuICpcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7e2l0ZW06SXRlbSwgZGlmZjpudW1iZXJ9fVxuICovXG5leHBvcnQgY29uc3QgZm9sbG93UmVkb25lID0gKHN0b3JlLCBpZCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0lEfG51bGx9XG4gICAqL1xuICBsZXQgbmV4dElEID0gaWRcbiAgbGV0IGRpZmYgPSAwXG4gIGxldCBpdGVtXG4gIGRvIHtcbiAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgIG5leHRJRCA9IGNyZWF0ZUlEKG5leHRJRC5jbGllbnQsIG5leHRJRC5jbG9jayArIGRpZmYpXG4gICAgfVxuICAgIGl0ZW0gPSBnZXRJdGVtKHN0b3JlLCBuZXh0SUQpXG4gICAgZGlmZiA9IG5leHRJRC5jbG9jayAtIGl0ZW0uaWQuY2xvY2tcbiAgICBuZXh0SUQgPSBpdGVtLnJlZG9uZVxuICB9IHdoaWxlIChuZXh0SUQgIT09IG51bGwgJiYgaXRlbSBpbnN0YW5jZW9mIEl0ZW0pXG4gIHJldHVybiB7XG4gICAgaXRlbSwgZGlmZlxuICB9XG59XG5cbi8qKlxuICogTWFrZSBzdXJlIHRoYXQgbmVpdGhlciBpdGVtIG5vciBhbnkgb2YgaXRzIHBhcmVudHMgaXMgZXZlciBkZWxldGVkLlxuICpcbiAqIFRoaXMgcHJvcGVydHkgZG9lcyBub3QgcGVyc2lzdCB3aGVuIHN0b3JpbmcgaXQgaW50byBhIGRhdGFiYXNlIG9yIHdoZW5cbiAqIHNlbmRpbmcgaXQgdG8gb3RoZXIgcGVlcnNcbiAqXG4gKiBAcGFyYW0ge0l0ZW18bnVsbH0gaXRlbVxuICogQHBhcmFtIHtib29sZWFufSBrZWVwXG4gKi9cbmV4cG9ydCBjb25zdCBrZWVwSXRlbSA9IChpdGVtLCBrZWVwKSA9PiB7XG4gIHdoaWxlIChpdGVtICE9PSBudWxsICYmIGl0ZW0ua2VlcCAhPT0ga2VlcCkge1xuICAgIGl0ZW0ua2VlcCA9IGtlZXBcbiAgICBpdGVtID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KS5faXRlbVxuICB9XG59XG5cbi8qKlxuICogU3BsaXQgbGVmdEl0ZW0gaW50byB0d28gaXRlbXNcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW19IGxlZnRJdGVtXG4gKiBAcGFyYW0ge251bWJlcn0gZGlmZlxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBzcGxpdEl0ZW0gPSAodHJhbnNhY3Rpb24sIGxlZnRJdGVtLCBkaWZmKSA9PiB7XG4gIC8vIGNyZWF0ZSByaWdodEl0ZW1cbiAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBsZWZ0SXRlbS5pZFxuICBjb25zdCByaWdodEl0ZW0gPSBuZXcgSXRlbShcbiAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksXG4gICAgbGVmdEl0ZW0sXG4gICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYgLSAxKSxcbiAgICBsZWZ0SXRlbS5yaWdodCxcbiAgICBsZWZ0SXRlbS5yaWdodE9yaWdpbixcbiAgICBsZWZ0SXRlbS5wYXJlbnQsXG4gICAgbGVmdEl0ZW0ucGFyZW50U3ViLFxuICAgIGxlZnRJdGVtLmNvbnRlbnQuc3BsaWNlKGRpZmYpXG4gIClcbiAgaWYgKGxlZnRJdGVtLmRlbGV0ZWQpIHtcbiAgICByaWdodEl0ZW0ubWFya0RlbGV0ZWQoKVxuICB9XG4gIGlmIChsZWZ0SXRlbS5rZWVwKSB7XG4gICAgcmlnaHRJdGVtLmtlZXAgPSB0cnVlXG4gIH1cbiAgaWYgKGxlZnRJdGVtLnJlZG9uZSAhPT0gbnVsbCkge1xuICAgIHJpZ2h0SXRlbS5yZWRvbmUgPSBjcmVhdGVJRChsZWZ0SXRlbS5yZWRvbmUuY2xpZW50LCBsZWZ0SXRlbS5yZWRvbmUuY2xvY2sgKyBkaWZmKVxuICB9XG4gIC8vIHVwZGF0ZSBsZWZ0IChkbyBub3Qgc2V0IGxlZnRJdGVtLnJpZ2h0T3JpZ2luIGFzIGl0IHdpbGwgbGVhZCB0byBwcm9ibGVtcyB3aGVuIHN5bmNpbmcpXG4gIGxlZnRJdGVtLnJpZ2h0ID0gcmlnaHRJdGVtXG4gIC8vIHVwZGF0ZSByaWdodFxuICBpZiAocmlnaHRJdGVtLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmlnaHRJdGVtLnJpZ2h0LmxlZnQgPSByaWdodEl0ZW1cbiAgfVxuICAvLyByaWdodCBpcyBtb3JlIHNwZWNpZmljLlxuICB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzLnB1c2gocmlnaHRJdGVtKVxuICAvLyB1cGRhdGUgcGFyZW50Ll9tYXBcbiAgaWYgKHJpZ2h0SXRlbS5wYXJlbnRTdWIgIT09IG51bGwgJiYgcmlnaHRJdGVtLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0SXRlbS5wYXJlbnQpLl9tYXAuc2V0KHJpZ2h0SXRlbS5wYXJlbnRTdWIsIHJpZ2h0SXRlbSlcbiAgfVxuICBsZWZ0SXRlbS5sZW5ndGggPSBkaWZmXG4gIHJldHVybiByaWdodEl0ZW1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFN0YWNrSXRlbT59IHN0YWNrXG4gKiBAcGFyYW0ge0lEfSBpZFxuICovXG5jb25zdCBpc0RlbGV0ZWRCeVVuZG9TdGFjayA9IChzdGFjaywgaWQpID0+IGFycmF5LnNvbWUoc3RhY2ssIC8qKiBAcGFyYW0ge1N0YWNrSXRlbX0gcyAqLyBzID0+IGlzRGVsZXRlZChzLmRlbGV0aW9ucywgaWQpKVxuXG4vKipcbiAqIFJlZG9lcyB0aGUgZWZmZWN0IG9mIHRoaXMgb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uIFRoZSBZanMgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7U2V0PEl0ZW0+fSByZWRvaXRlbXNcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBpdGVtc1RvRGVsZXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlnbm9yZVJlbW90ZU1hcENoYW5nZXNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi91dGlscy9VbmRvTWFuYWdlci5qcycpLlVuZG9NYW5hZ2VyfSB1bVxuICpcbiAqIEByZXR1cm4ge0l0ZW18bnVsbH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgcmVkb0l0ZW0gPSAodHJhbnNhY3Rpb24sIGl0ZW0sIHJlZG9pdGVtcywgaXRlbXNUb0RlbGV0ZSwgaWdub3JlUmVtb3RlTWFwQ2hhbmdlcywgdW0pID0+IHtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jXG4gIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlXG4gIGNvbnN0IG93bkNsaWVudElEID0gZG9jLmNsaWVudElEXG4gIGNvbnN0IHJlZG9uZSA9IGl0ZW0ucmVkb25lXG4gIGlmIChyZWRvbmUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHJlZG9uZSlcbiAgfVxuICBsZXQgcGFyZW50SXRlbSA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChpdGVtLnBhcmVudCkuX2l0ZW1cbiAgLyoqXG4gICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAqL1xuICBsZXQgbGVmdCA9IG51bGxcbiAgLyoqXG4gICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAqL1xuICBsZXQgcmlnaHRcbiAgLy8gbWFrZSBzdXJlIHRoYXQgcGFyZW50IGlzIHJlZG9uZVxuICBpZiAocGFyZW50SXRlbSAhPT0gbnVsbCAmJiBwYXJlbnRJdGVtLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAvLyB0cnkgdG8gdW5kbyBwYXJlbnQgaWYgaXQgd2lsbCBiZSB1bmRvbmUgYW55d2F5XG4gICAgaWYgKHBhcmVudEl0ZW0ucmVkb25lID09PSBudWxsICYmICghcmVkb2l0ZW1zLmhhcyhwYXJlbnRJdGVtKSB8fCByZWRvSXRlbSh0cmFuc2FjdGlvbiwgcGFyZW50SXRlbSwgcmVkb2l0ZW1zLCBpdGVtc1RvRGVsZXRlLCBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzLCB1bSkgPT09IG51bGwpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB3aGlsZSAocGFyZW50SXRlbS5yZWRvbmUgIT09IG51bGwpIHtcbiAgICAgIHBhcmVudEl0ZW0gPSBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgcGFyZW50SXRlbS5yZWRvbmUpXG4gICAgfVxuICB9XG4gIGNvbnN0IHBhcmVudFR5cGUgPSBwYXJlbnRJdGVtID09PSBudWxsID8gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KSA6IC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChwYXJlbnRJdGVtLmNvbnRlbnQpLnR5cGVcblxuICBpZiAoaXRlbS5wYXJlbnRTdWIgPT09IG51bGwpIHtcbiAgICAvLyBJcyBhbiBhcnJheSBpdGVtLiBJbnNlcnQgYXQgdGhlIG9sZCBwb3NpdGlvblxuICAgIGxlZnQgPSBpdGVtLmxlZnRcbiAgICByaWdodCA9IGl0ZW1cbiAgICAvLyBmaW5kIG5leHQgY2xvbmVkX3JlZG8gaXRlbXNcbiAgICB3aGlsZSAobGVmdCAhPT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICovXG4gICAgICBsZXQgbGVmdFRyYWNlID0gbGVmdFxuICAgICAgLy8gdHJhY2UgcmVkb25lIHVudGlsIHBhcmVudCBtYXRjaGVzXG4gICAgICB3aGlsZSAobGVmdFRyYWNlICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChsZWZ0VHJhY2UucGFyZW50KS5faXRlbSAhPT0gcGFyZW50SXRlbSkge1xuICAgICAgICBsZWZ0VHJhY2UgPSBsZWZ0VHJhY2UucmVkb25lID09PSBudWxsID8gbnVsbCA6IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBsZWZ0VHJhY2UucmVkb25lKVxuICAgICAgfVxuICAgICAgaWYgKGxlZnRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAobGVmdFRyYWNlLnBhcmVudCkuX2l0ZW0gPT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgbGVmdCA9IGxlZnRUcmFjZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgbGVmdCA9IGxlZnQubGVmdFxuICAgIH1cbiAgICB3aGlsZSAocmlnaHQgIT09IG51bGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAqL1xuICAgICAgbGV0IHJpZ2h0VHJhY2UgPSByaWdodFxuICAgICAgLy8gdHJhY2UgcmVkb25lIHVudGlsIHBhcmVudCBtYXRjaGVzXG4gICAgICB3aGlsZSAocmlnaHRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHRUcmFjZS5wYXJlbnQpLl9pdGVtICE9PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIHJpZ2h0VHJhY2UgPSByaWdodFRyYWNlLnJlZG9uZSA9PT0gbnVsbCA/IG51bGwgOiBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgcmlnaHRUcmFjZS5yZWRvbmUpXG4gICAgICB9XG4gICAgICBpZiAocmlnaHRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHRUcmFjZS5wYXJlbnQpLl9pdGVtID09PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIHJpZ2h0ID0gcmlnaHRUcmFjZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcmlnaHQgPSByaWdodC5yaWdodFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByaWdodCA9IG51bGxcbiAgICBpZiAoaXRlbS5yaWdodCAmJiAhaWdub3JlUmVtb3RlTWFwQ2hhbmdlcykge1xuICAgICAgbGVmdCA9IGl0ZW1cbiAgICAgIC8vIEl0ZXJhdGUgcmlnaHQgd2hpbGUgcmlnaHQgaXMgaW4gaXRlbXNUb0RlbGV0ZVxuICAgICAgLy8gSWYgaXQgaXMgaW50ZW5kZWQgdG8gZGVsZXRlIHJpZ2h0IHdoaWxlIGl0ZW0gaXMgcmVkb25lLCB3ZSBjYW4gZXhwZWN0IHRoYXQgaXRlbSBzaG91bGQgcmVwbGFjZSByaWdodC5cbiAgICAgIHdoaWxlIChsZWZ0ICE9PSBudWxsICYmIGxlZnQucmlnaHQgIT09IG51bGwgJiYgKGxlZnQucmlnaHQucmVkb25lIHx8IGlzRGVsZXRlZChpdGVtc1RvRGVsZXRlLCBsZWZ0LnJpZ2h0LmlkKSB8fCBpc0RlbGV0ZWRCeVVuZG9TdGFjayh1bS51bmRvU3RhY2ssIGxlZnQucmlnaHQuaWQpIHx8IGlzRGVsZXRlZEJ5VW5kb1N0YWNrKHVtLnJlZG9TdGFjaywgbGVmdC5yaWdodC5pZCkpKSB7XG4gICAgICAgIGxlZnQgPSBsZWZ0LnJpZ2h0XG4gICAgICAgIC8vIGZvbGxvdyByZWRvbmVcbiAgICAgICAgd2hpbGUgKGxlZnQucmVkb25lKSBsZWZ0ID0gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGxlZnQucmVkb25lKVxuICAgICAgfVxuICAgICAgaWYgKGxlZnQgJiYgbGVmdC5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gcmVkbyB0aGlzIGl0ZW0gYmVjYXVzZSBpdCBjb25mbGljdHMgd2l0aCBhXG4gICAgICAgIC8vIGNoYW5nZSBmcm9tIGFub3RoZXIgY2xpZW50XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJlbnRUeXBlLl9tYXAuZ2V0KGl0ZW0ucGFyZW50U3ViKSB8fCBudWxsXG4gICAgfVxuICB9XG4gIGNvbnN0IG5leHRDbG9jayA9IGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJRClcbiAgY29uc3QgbmV4dElkID0gY3JlYXRlSUQob3duQ2xpZW50SUQsIG5leHRDbG9jaylcbiAgY29uc3QgcmVkb25lSXRlbSA9IG5ldyBJdGVtKFxuICAgIG5leHRJZCxcbiAgICBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLFxuICAgIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCxcbiAgICBwYXJlbnRUeXBlLFxuICAgIGl0ZW0ucGFyZW50U3ViLFxuICAgIGl0ZW0uY29udGVudC5jb3B5KClcbiAgKVxuICBpdGVtLnJlZG9uZSA9IG5leHRJZFxuICBrZWVwSXRlbShyZWRvbmVJdGVtLCB0cnVlKVxuICByZWRvbmVJdGVtLmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMClcbiAgcmV0dXJuIHJlZG9uZUl0ZW1cbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYW55IGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJdGVtIGV4dGVuZHMgQWJzdHJhY3RTdHJ1Y3Qge1xuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICogQHBhcmFtIHtJdGVtIHwgbnVsbH0gbGVmdFxuICAgKiBAcGFyYW0ge0lEIHwgbnVsbH0gb3JpZ2luXG4gICAqIEBwYXJhbSB7SXRlbSB8IG51bGx9IHJpZ2h0XG4gICAqIEBwYXJhbSB7SUQgfCBudWxsfSByaWdodE9yaWdpblxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fElEfG51bGx9IHBhcmVudCBJcyBhIHR5cGUgaWYgaW50ZWdyYXRlZCwgaXMgbnVsbCBpZiBpdCBpcyBwb3NzaWJsZSB0byBjb3B5IHBhcmVudCBmcm9tIGxlZnQgb3IgcmlnaHQsIGlzIElEIGJlZm9yZSBpbnRlZ3JhdGlvbiB0byBzZWFyY2ggZm9yIGl0LlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHBhcmVudFN1YlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0Q29udGVudH0gY29udGVudFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGlkLCBsZWZ0LCBvcmlnaW4sIHJpZ2h0LCByaWdodE9yaWdpbiwgcGFyZW50LCBwYXJlbnRTdWIsIGNvbnRlbnQpIHtcbiAgICBzdXBlcihpZCwgY29udGVudC5nZXRMZW5ndGgoKSlcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSB0aGF0IHdhcyBvcmlnaW5hbGx5IHRvIHRoZSBsZWZ0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCBpcyBjdXJyZW50bHkgdG8gdGhlIGxlZnQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJdGVtIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmxlZnQgPSBsZWZ0XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCBpcyBjdXJyZW50bHkgdG8gdGhlIHJpZ2h0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SXRlbSB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgcmlnaHQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJRCB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yaWdodE9yaWdpbiA9IHJpZ2h0T3JpZ2luXG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fElEfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGFyZW50IHJlZmVycyB0byB0aGlzIGl0ZW0gd2l0aCBzb21lIGtpbmQgb2Yga2V5IChlLmcuIFlNYXAsIHRoZVxuICAgICAqIGtleSBpcyBzcGVjaWZpZWQgaGVyZS4gVGhlIGtleSBpcyB0aGVuIHVzZWQgdG8gcmVmZXIgdG8gdGhlIGxpc3QgaW4gd2hpY2hcbiAgICAgKiB0byBpbnNlcnQgdGhpcyBpdGVtLiBJZiBgcGFyZW50U3ViID0gbnVsbGAgdHlwZS5fc3RhcnQgaXMgdGhlIGxpc3QgaW5cbiAgICAgKiB3aGljaCB0byBpbnNlcnQgdG8uIE90aGVyd2lzZSBpdCBpcyBgcGFyZW50Ll9tYXBgLlxuICAgICAqIEB0eXBlIHtTdHJpbmcgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViXG4gICAgLyoqXG4gICAgICogSWYgdGhpcyB0eXBlJ3MgZWZmZWN0IGlzIHJlZG9uZSB0aGlzIHR5cGUgcmVmZXJzIHRvIHRoZSB0eXBlIHRoYXQgdW5kaWRcbiAgICAgKiB0aGlzIG9wZXJhdGlvbi5cbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmVkb25lID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdENvbnRlbnR9XG4gICAgICovXG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudFxuICAgIC8qKlxuICAgICAqIGJpdDE6IGtlZXBcbiAgICAgKiBiaXQyOiBjb3VudGFibGVcbiAgICAgKiBiaXQzOiBkZWxldGVkXG4gICAgICogYml0NDogbWFyayAtIG1hcmsgbm9kZSBhcyBmYXN0LXNlYXJjaC1tYXJrZXJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSBieXRlXG4gICAgICovXG4gICAgdGhpcy5pbmZvID0gdGhpcy5jb250ZW50LmlzQ291bnRhYmxlKCkgPyBiaW5hcnkuQklUMiA6IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gbWFyayB0aGUgaXRlbSBhcyBhbiBpbmRleGVkIGZhc3Qtc2VhcmNoIG1hcmtlclxuICAgKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHNldCBtYXJrZXIgKGlzTWFya2VkKSB7XG4gICAgaWYgKCgodGhpcy5pbmZvICYgYmluYXJ5LkJJVDQpID4gMCkgIT09IGlzTWFya2VkKSB7XG4gICAgICB0aGlzLmluZm8gXj0gYmluYXJ5LkJJVDRcbiAgICB9XG4gIH1cblxuICBnZXQgbWFya2VyICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQ0KSA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBkbyBub3QgZ2FyYmFnZSBjb2xsZWN0IHRoaXMgSXRlbS5cbiAgICovXG4gIGdldCBrZWVwICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQxKSA+IDBcbiAgfVxuXG4gIHNldCBrZWVwIChkb0tlZXApIHtcbiAgICBpZiAodGhpcy5rZWVwICE9PSBkb0tlZXApIHtcbiAgICAgIHRoaXMuaW5mbyBePSBiaW5hcnkuQklUMVxuICAgIH1cbiAgfVxuXG4gIGdldCBjb3VudGFibGUgKCkge1xuICAgIHJldHVybiAodGhpcy5pbmZvICYgYmluYXJ5LkJJVDIpID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBpdGVtIHdhcyBkZWxldGVkIG9yIG5vdC5cbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqL1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmluZm8gJiBiaW5hcnkuQklUMykgPiAwXG4gIH1cblxuICBzZXQgZGVsZXRlZCAoZG9EZWxldGUpIHtcbiAgICBpZiAodGhpcy5kZWxldGVkICE9PSBkb0RlbGV0ZSkge1xuICAgICAgdGhpcy5pbmZvIF49IGJpbmFyeS5CSVQzXG4gICAgfVxuICB9XG5cbiAgbWFya0RlbGV0ZWQgKCkge1xuICAgIHRoaXMuaW5mbyB8PSBiaW5hcnkuQklUM1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY3JlYXRvciBjbGllbnRJRCBvZiB0aGUgbWlzc2luZyBvcCBvciBkZWZpbmUgbWlzc2luZyBpdGVtcyBhbmQgcmV0dXJuIG51bGwuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEByZXR1cm4ge251bGwgfCBudW1iZXJ9XG4gICAqL1xuICBnZXRNaXNzaW5nICh0cmFuc2FjdGlvbiwgc3RvcmUpIHtcbiAgICBpZiAodGhpcy5vcmlnaW4gJiYgdGhpcy5vcmlnaW4uY2xpZW50ICE9PSB0aGlzLmlkLmNsaWVudCAmJiB0aGlzLm9yaWdpbi5jbG9jayA+PSBnZXRTdGF0ZShzdG9yZSwgdGhpcy5vcmlnaW4uY2xpZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmNsaWVudFxuICAgIH1cbiAgICBpZiAodGhpcy5yaWdodE9yaWdpbiAmJiB0aGlzLnJpZ2h0T3JpZ2luLmNsaWVudCAhPT0gdGhpcy5pZC5jbGllbnQgJiYgdGhpcy5yaWdodE9yaWdpbi5jbG9jayA+PSBnZXRTdGF0ZShzdG9yZSwgdGhpcy5yaWdodE9yaWdpbi5jbGllbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yaWdodE9yaWdpbi5jbGllbnRcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmNvbnN0cnVjdG9yID09PSBJRCAmJiB0aGlzLmlkLmNsaWVudCAhPT0gdGhpcy5wYXJlbnQuY2xpZW50ICYmIHRoaXMucGFyZW50LmNsb2NrID49IGdldFN0YXRlKHN0b3JlLCB0aGlzLnBhcmVudC5jbGllbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2xpZW50XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBhbGwgbWlzc2luZyBpZHMsIG5vdyBmaW5kIHRoZSBpdGVtc1xuXG4gICAgaWYgKHRoaXMub3JpZ2luKSB7XG4gICAgICB0aGlzLmxlZnQgPSBnZXRJdGVtQ2xlYW5FbmQodHJhbnNhY3Rpb24sIHN0b3JlLCB0aGlzLm9yaWdpbilcbiAgICAgIHRoaXMub3JpZ2luID0gdGhpcy5sZWZ0Lmxhc3RJZFxuICAgIH1cbiAgICBpZiAodGhpcy5yaWdodE9yaWdpbikge1xuICAgICAgdGhpcy5yaWdodCA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCB0aGlzLnJpZ2h0T3JpZ2luKVxuICAgICAgdGhpcy5yaWdodE9yaWdpbiA9IHRoaXMucmlnaHQuaWRcbiAgICB9XG4gICAgaWYgKCh0aGlzLmxlZnQgJiYgdGhpcy5sZWZ0LmNvbnN0cnVjdG9yID09PSBHQykgfHwgKHRoaXMucmlnaHQgJiYgdGhpcy5yaWdodC5jb25zdHJ1Y3RvciA9PT0gR0MpKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IG51bGxcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgLy8gb25seSBzZXQgcGFyZW50IGlmIHRoaXMgc2hvdWxkbid0IGJlIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICBpZiAodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5jb25zdHJ1Y3RvciA9PT0gSXRlbSkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMubGVmdC5wYXJlbnRcbiAgICAgICAgdGhpcy5wYXJlbnRTdWIgPSB0aGlzLmxlZnQucGFyZW50U3ViXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yaWdodCAmJiB0aGlzLnJpZ2h0LmNvbnN0cnVjdG9yID09PSBJdGVtKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5yaWdodC5wYXJlbnRcbiAgICAgICAgdGhpcy5wYXJlbnRTdWIgPSB0aGlzLnJpZ2h0LnBhcmVudFN1YlxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnQuY29uc3RydWN0b3IgPT09IElEKSB7XG4gICAgICBjb25zdCBwYXJlbnRJdGVtID0gZ2V0SXRlbShzdG9yZSwgdGhpcy5wYXJlbnQpXG4gICAgICBpZiAocGFyZW50SXRlbS5jb25zdHJ1Y3RvciA9PT0gR0MpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcmVudCA9IC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChwYXJlbnRJdGVtLmNvbnRlbnQpLnR5cGVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgdGhpcy5pZC5jbG9jayArPSBvZmZzZXRcbiAgICAgIHRoaXMubGVmdCA9IGdldEl0ZW1DbGVhbkVuZCh0cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24uZG9jLnN0b3JlLCBjcmVhdGVJRCh0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jayAtIDEpKVxuICAgICAgdGhpcy5vcmlnaW4gPSB0aGlzLmxlZnQubGFzdElkXG4gICAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuc3BsaWNlKG9mZnNldClcbiAgICAgIHRoaXMubGVuZ3RoIC09IG9mZnNldFxuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgaWYgKCghdGhpcy5sZWZ0ICYmICghdGhpcy5yaWdodCB8fCB0aGlzLnJpZ2h0LmxlZnQgIT09IG51bGwpKSB8fCAodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5yaWdodCAhPT0gdGhpcy5yaWdodCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbGVmdCA9IHRoaXMubGVmdFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IG9cbiAgICAgICAgLy8gc2V0IG8gdG8gdGhlIGZpcnN0IGNvbmZsaWN0aW5nIGl0ZW1cbiAgICAgICAgaWYgKGxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICBvID0gbGVmdC5yaWdodFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAgICAgbyA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX21hcC5nZXQodGhpcy5wYXJlbnRTdWIpIHx8IG51bGxcbiAgICAgICAgICB3aGlsZSAobyAhPT0gbnVsbCAmJiBvLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG8gPSBvLmxlZnRcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbyA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3N0YXJ0XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogdXNlIHNvbWV0aGluZyBsaWtlIERlbGV0ZVNldCBoZXJlIChhIHRyZWUgaW1wbGVtZW50YXRpb24gd291bGQgYmUgYmVzdClcbiAgICAgICAgLy8gQHRvZG8gdXNlIGdsb2JhbCBzZXQgZGVmaW5pdGlvbnNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtTZXQ8SXRlbT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBjb25mbGljdGluZ0l0ZW1zID0gbmV3IFNldCgpXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7U2V0PEl0ZW0+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgaXRlbXNCZWZvcmVPcmlnaW4gPSBuZXcgU2V0KClcbiAgICAgICAgLy8gTGV0IGMgaW4gY29uZmxpY3RpbmdJdGVtcywgYiBpbiBpdGVtc0JlZm9yZU9yaWdpblxuICAgICAgICAvLyAqKip7b3JpZ2lufWJiYmJ7dGhpc317YyxifXtjLGJ9e299KioqXG4gICAgICAgIC8vIE5vdGUgdGhhdCBjb25mbGljdGluZ0l0ZW1zIGlzIGEgc3Vic2V0IG9mIGl0ZW1zQmVmb3JlT3JpZ2luXG4gICAgICAgIHdoaWxlIChvICE9PSBudWxsICYmIG8gIT09IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICBpdGVtc0JlZm9yZU9yaWdpbi5hZGQobylcbiAgICAgICAgICBjb25mbGljdGluZ0l0ZW1zLmFkZChvKVxuICAgICAgICAgIGlmIChjb21wYXJlSURzKHRoaXMub3JpZ2luLCBvLm9yaWdpbikpIHtcbiAgICAgICAgICAgIC8vIGNhc2UgMVxuICAgICAgICAgICAgaWYgKG8uaWQuY2xpZW50IDwgdGhpcy5pZC5jbGllbnQpIHtcbiAgICAgICAgICAgICAgbGVmdCA9IG9cbiAgICAgICAgICAgICAgY29uZmxpY3RpbmdJdGVtcy5jbGVhcigpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmVJRHModGhpcy5yaWdodE9yaWdpbiwgby5yaWdodE9yaWdpbikpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcyBhbmQgbyBhcmUgY29uZmxpY3RpbmcgYW5kIHBvaW50IHRvIHRoZSBzYW1lIGludGVncmF0aW9uIHBvaW50cy4gVGhlIGlkIGRlY2lkZXMgd2hpY2ggaXRlbSBjb21lcyBmaXJzdC5cbiAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyB0byB0aGUgbGVmdCBvZiBvLCB3ZSBjYW4gYnJlYWsgaGVyZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSAvLyBlbHNlLCBvIG1pZ2h0IGJlIGludGVncmF0ZWQgYmVmb3JlIGFuIGl0ZW0gdGhhdCB0aGlzIGNvbmZsaWN0cyB3aXRoLiBJZiBzbywgd2Ugd2lsbCBmaW5kIGl0IGluIHRoZSBuZXh0IGl0ZXJhdGlvbnNcbiAgICAgICAgICB9IGVsc2UgaWYgKG8ub3JpZ2luICE9PSBudWxsICYmIGl0ZW1zQmVmb3JlT3JpZ2luLmhhcyhnZXRJdGVtKHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgby5vcmlnaW4pKSkgeyAvLyB1c2UgZ2V0SXRlbSBpbnN0ZWFkIG9mIGdldEl0ZW1DbGVhbkVuZCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgLyBuZWVkIHRvIHNwbGl0IGl0ZW1zLlxuICAgICAgICAgICAgLy8gY2FzZSAyXG4gICAgICAgICAgICBpZiAoIWNvbmZsaWN0aW5nSXRlbXMuaGFzKGdldEl0ZW0odHJhbnNhY3Rpb24uZG9jLnN0b3JlLCBvLm9yaWdpbikpKSB7XG4gICAgICAgICAgICAgIGxlZnQgPSBvXG4gICAgICAgICAgICAgIGNvbmZsaWN0aW5nSXRlbXMuY2xlYXIoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBvID0gby5yaWdodFxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnRcbiAgICAgIH1cbiAgICAgIC8vIHJlY29ubmVjdCBsZWZ0L3JpZ2h0ICsgdXBkYXRlIHBhcmVudCBtYXAvc3RhcnQgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5sZWZ0LnJpZ2h0XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodFxuICAgICAgICB0aGlzLmxlZnQucmlnaHQgPSB0aGlzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgclxuICAgICAgICBpZiAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgICByID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbWFwLmdldCh0aGlzLnBhcmVudFN1YikgfHwgbnVsbFxuICAgICAgICAgIHdoaWxlIChyICE9PSBudWxsICYmIHIubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgciA9IHIubGVmdFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc3RhcnRcbiAgICAgICAgICA7LyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc3RhcnQgPSB0aGlzXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yaWdodCA9IHJcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmlnaHQubGVmdCA9IHRoaXNcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gc2V0IGFzIGN1cnJlbnQgcGFyZW50IHZhbHVlIGlmIHJpZ2h0ID09PSBudWxsIGFuZCB0aGlzIGlzIHBhcmVudFN1YlxuICAgICAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9tYXAuc2V0KHRoaXMucGFyZW50U3ViLCB0aGlzKVxuICAgICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyB0aGUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWUgb2YgcGFyZW50LiBkZWxldGUgcmlnaHRcbiAgICAgICAgICB0aGlzLmxlZnQuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBhZGp1c3QgbGVuZ3RoIG9mIHBhcmVudFxuICAgICAgaWYgKHRoaXMucGFyZW50U3ViID09PSBudWxsICYmIHRoaXMuY291bnRhYmxlICYmICF0aGlzLmRlbGV0ZWQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbGVuZ3RoICs9IHRoaXMubGVuZ3RoXG4gICAgICB9XG4gICAgICBhZGRTdHJ1Y3QodHJhbnNhY3Rpb24uZG9jLnN0b3JlLCB0aGlzKVxuICAgICAgdGhpcy5jb250ZW50LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgdGhpcylcbiAgICAgIC8vIGFkZCBwYXJlbnQgdG8gdHJhbnNhY3Rpb24uY2hhbmdlZFxuICAgICAgYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLCB0aGlzLnBhcmVudFN1YilcbiAgICAgIGlmICgoLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5faXRlbSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9pdGVtLmRlbGV0ZWQpIHx8ICh0aGlzLnBhcmVudFN1YiAhPT0gbnVsbCAmJiB0aGlzLnJpZ2h0ICE9PSBudWxsKSkge1xuICAgICAgICAvLyBkZWxldGUgaWYgcGFyZW50IGlzIGRlbGV0ZWQgb3IgaWYgdGhpcyBpcyBub3QgdGhlIGN1cnJlbnQgYXR0cmlidXRlIHZhbHVlIG9mIHBhcmVudFxuICAgICAgICB0aGlzLmRlbGV0ZSh0cmFuc2FjdGlvbilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcGFyZW50IGlzIG5vdCBkZWZpbmVkLiBJbnRlZ3JhdGUgR0Mgc3RydWN0IGluc3RlYWRcbiAgICAgIG5ldyBHQyh0aGlzLmlkLCB0aGlzLmxlbmd0aCkuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuZXh0IG5vbi1kZWxldGVkIGl0ZW1cbiAgICovXG4gIGdldCBuZXh0ICgpIHtcbiAgICBsZXQgbiA9IHRoaXMucmlnaHRcbiAgICB3aGlsZSAobiAhPT0gbnVsbCAmJiBuLmRlbGV0ZWQpIHtcbiAgICAgIG4gPSBuLnJpZ2h0XG4gICAgfVxuICAgIHJldHVybiBuXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJldmlvdXMgbm9uLWRlbGV0ZWQgaXRlbVxuICAgKi9cbiAgZ2V0IHByZXYgKCkge1xuICAgIGxldCBuID0gdGhpcy5sZWZ0XG4gICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICBuID0gbi5sZWZ0XG4gICAgfVxuICAgIHJldHVybiBuXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGxhc3QgY29udGVudCBhZGRyZXNzIG9mIHRoaXMgSXRlbS5cbiAgICovXG4gIGdldCBsYXN0SWQgKCkge1xuICAgIC8vIGFsbG9jYXRpbmcgaWRzIGlzIHByZXR0eSBjb3N0bHkgYmVjYXVzZSBvZiB0aGUgYW1vdW50IG9mIGlkcyBjcmVhdGVkLCBzbyB3ZSB0cnkgdG8gcmV1c2Ugd2hlbmV2ZXIgcG9zc2libGVcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgPyB0aGlzLmlkIDogY3JlYXRlSUQodGhpcy5pZC5jbGllbnQsIHRoaXMuaWQuY2xvY2sgKyB0aGlzLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvKipcbiAgICogVHJ5IHRvIG1lcmdlIHR3byBpdGVtc1xuICAgKlxuICAgKiBAcGFyYW0ge0l0ZW19IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9PT0gcmlnaHQuY29uc3RydWN0b3IgJiZcbiAgICAgIGNvbXBhcmVJRHMocmlnaHQub3JpZ2luLCB0aGlzLmxhc3RJZCkgJiZcbiAgICAgIHRoaXMucmlnaHQgPT09IHJpZ2h0ICYmXG4gICAgICBjb21wYXJlSURzKHRoaXMucmlnaHRPcmlnaW4sIHJpZ2h0LnJpZ2h0T3JpZ2luKSAmJlxuICAgICAgdGhpcy5pZC5jbGllbnQgPT09IHJpZ2h0LmlkLmNsaWVudCAmJlxuICAgICAgdGhpcy5pZC5jbG9jayArIHRoaXMubGVuZ3RoID09PSByaWdodC5pZC5jbG9jayAmJlxuICAgICAgdGhpcy5kZWxldGVkID09PSByaWdodC5kZWxldGVkICYmXG4gICAgICB0aGlzLnJlZG9uZSA9PT0gbnVsbCAmJlxuICAgICAgcmlnaHQucmVkb25lID09PSBudWxsICYmXG4gICAgICB0aGlzLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IHJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgJiZcbiAgICAgIHRoaXMuY29udGVudC5tZXJnZVdpdGgocmlnaHQuY29udGVudClcbiAgICApIHtcbiAgICAgIGNvbnN0IHNlYXJjaE1hcmtlciA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3NlYXJjaE1hcmtlclxuICAgICAgaWYgKHNlYXJjaE1hcmtlcikge1xuICAgICAgICBzZWFyY2hNYXJrZXIuZm9yRWFjaChtYXJrZXIgPT4ge1xuICAgICAgICAgIGlmIChtYXJrZXIucCA9PT0gcmlnaHQpIHtcbiAgICAgICAgICAgIC8vIHJpZ2h0IGlzIGdvaW5nIHRvIGJlIFwiZm9yZ290dGVuXCIgc28gd2UgbmVlZCB0byB1cGRhdGUgdGhlIG1hcmtlclxuICAgICAgICAgICAgbWFya2VyLnAgPSB0aGlzXG4gICAgICAgICAgICAvLyBhZGp1c3QgbWFya2VyIGluZGV4XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlZCAmJiB0aGlzLmNvdW50YWJsZSkge1xuICAgICAgICAgICAgICBtYXJrZXIuaW5kZXggLT0gdGhpcy5sZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZiAocmlnaHQua2VlcCkge1xuICAgICAgICB0aGlzLmtlZXAgPSB0cnVlXG4gICAgICB9XG4gICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQucmlnaHRcbiAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmlnaHQubGVmdCA9IHRoaXNcbiAgICAgIH1cbiAgICAgIHRoaXMubGVuZ3RoICs9IHJpZ2h0Lmxlbmd0aFxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogTWFyayB0aGlzIEl0ZW0gYXMgZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAoIXRoaXMuZGVsZXRlZCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KVxuICAgICAgLy8gYWRqdXN0IHRoZSBsZW5ndGggb2YgcGFyZW50XG4gICAgICBpZiAodGhpcy5jb3VudGFibGUgJiYgdGhpcy5wYXJlbnRTdWIgPT09IG51bGwpIHtcbiAgICAgICAgcGFyZW50Ll9sZW5ndGggLT0gdGhpcy5sZW5ndGhcbiAgICAgIH1cbiAgICAgIHRoaXMubWFya0RlbGV0ZWQoKVxuICAgICAgYWRkVG9EZWxldGVTZXQodHJhbnNhY3Rpb24uZGVsZXRlU2V0LCB0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jaywgdGhpcy5sZW5ndGgpXG4gICAgICBhZGRDaGFuZ2VkVHlwZVRvVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHBhcmVudCwgdGhpcy5wYXJlbnRTdWIpXG4gICAgICB0aGlzLmNvbnRlbnQuZGVsZXRlKHRyYW5zYWN0aW9uKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmVudEdDZFxuICAgKi9cbiAgZ2MgKHN0b3JlLCBwYXJlbnRHQ2QpIHtcbiAgICBpZiAoIXRoaXMuZGVsZXRlZCkge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICB0aGlzLmNvbnRlbnQuZ2Moc3RvcmUpXG4gICAgaWYgKHBhcmVudEdDZCkge1xuICAgICAgcmVwbGFjZVN0cnVjdChzdG9yZSwgdGhpcywgbmV3IEdDKHRoaXMuaWQsIHRoaXMubGVuZ3RoKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250ZW50ID0gbmV3IENvbnRlbnREZWxldGVkKHRoaXMubGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgY29uc3Qgb3JpZ2luID0gb2Zmc2V0ID4gMCA/IGNyZWF0ZUlEKHRoaXMuaWQuY2xpZW50LCB0aGlzLmlkLmNsb2NrICsgb2Zmc2V0IC0gMSkgOiB0aGlzLm9yaWdpblxuICAgIGNvbnN0IHJpZ2h0T3JpZ2luID0gdGhpcy5yaWdodE9yaWdpblxuICAgIGNvbnN0IHBhcmVudFN1YiA9IHRoaXMucGFyZW50U3ViXG4gICAgY29uc3QgaW5mbyA9ICh0aGlzLmNvbnRlbnQuZ2V0UmVmKCkgJiBiaW5hcnkuQklUUzUpIHxcbiAgICAgIChvcmlnaW4gPT09IG51bGwgPyAwIDogYmluYXJ5LkJJVDgpIHwgLy8gb3JpZ2luIGlzIGRlZmluZWRcbiAgICAgIChyaWdodE9yaWdpbiA9PT0gbnVsbCA/IDAgOiBiaW5hcnkuQklUNykgfCAvLyByaWdodCBvcmlnaW4gaXMgZGVmaW5lZFxuICAgICAgKHBhcmVudFN1YiA9PT0gbnVsbCA/IDAgOiBiaW5hcnkuQklUNikgLy8gcGFyZW50U3ViIGlzIG5vbi1udWxsXG4gICAgZW5jb2Rlci53cml0ZUluZm8oaW5mbylcbiAgICBpZiAob3JpZ2luICE9PSBudWxsKSB7XG4gICAgICBlbmNvZGVyLndyaXRlTGVmdElEKG9yaWdpbilcbiAgICB9XG4gICAgaWYgKHJpZ2h0T3JpZ2luICE9PSBudWxsKSB7XG4gICAgICBlbmNvZGVyLndyaXRlUmlnaHRJRChyaWdodE9yaWdpbilcbiAgICB9XG4gICAgaWYgKG9yaWdpbiA9PT0gbnVsbCAmJiByaWdodE9yaWdpbiA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KVxuICAgICAgaWYgKHBhcmVudC5faXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSBwYXJlbnQuX2l0ZW1cbiAgICAgICAgaWYgKHBhcmVudEl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBwYXJlbnQgdHlwZSBvbiB5Ll9tYXBcbiAgICAgICAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IGtleVxuICAgICAgICAgIGNvbnN0IHlrZXkgPSBmaW5kUm9vdFR5cGVLZXkocGFyZW50KVxuICAgICAgICAgIGVuY29kZXIud3JpdGVQYXJlbnRJbmZvKHRydWUpIC8vIHdyaXRlIHBhcmVudFlLZXlcbiAgICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHlrZXkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8oZmFsc2UpIC8vIHdyaXRlIHBhcmVudCBpZFxuICAgICAgICAgIGVuY29kZXIud3JpdGVMZWZ0SUQocGFyZW50SXRlbS5pZClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuY29uc3RydWN0b3IgPT09IFN0cmluZykgeyAvLyB0aGlzIGVkZ2UgY2FzZSB3YXMgYWRkZWQgYnkgZGlmZmVyZW50aWFsIHVwZGF0ZXNcbiAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8odHJ1ZSkgLy8gd3JpdGUgcGFyZW50WUtleVxuICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHBhcmVudClcbiAgICAgIH0gZWxzZSBpZiAocGFyZW50LmNvbnN0cnVjdG9yID09PSBJRCkge1xuICAgICAgICBlbmNvZGVyLndyaXRlUGFyZW50SW5mbyhmYWxzZSkgLy8gd3JpdGUgcGFyZW50IGlkXG4gICAgICAgIGVuY29kZXIud3JpdGVMZWZ0SUQocGFyZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgICAgfVxuICAgICAgaWYgKHBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHBhcmVudFN1YilcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb250ZW50LndyaXRlKGVuY29kZXIsIG9mZnNldClcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gaW5mb1xuICovXG5leHBvcnQgY29uc3QgcmVhZEl0ZW1Db250ZW50ID0gKGRlY29kZXIsIGluZm8pID0+IGNvbnRlbnRSZWZzW2luZm8gJiBiaW5hcnkuQklUUzVdKGRlY29kZXIpXG5cbi8qKlxuICogQSBsb29rdXAgbWFwIGZvciByZWFkaW5nIEl0ZW0gY29udGVudC5cbiAqXG4gKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oVXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyKTpBYnN0cmFjdENvbnRlbnQ+fVxuICovXG5leHBvcnQgY29uc3QgY29udGVudFJlZnMgPSBbXG4gICgpID0+IHsgZXJyb3IudW5leHBlY3RlZENhc2UoKSB9LCAvLyBHQyBpcyBub3QgSXRlbUNvbnRlbnRcbiAgcmVhZENvbnRlbnREZWxldGVkLCAvLyAxXG4gIHJlYWRDb250ZW50SlNPTiwgLy8gMlxuICByZWFkQ29udGVudEJpbmFyeSwgLy8gM1xuICByZWFkQ29udGVudFN0cmluZywgLy8gNFxuICByZWFkQ29udGVudEVtYmVkLCAvLyA1XG4gIHJlYWRDb250ZW50Rm9ybWF0LCAvLyA2XG4gIHJlYWRDb250ZW50VHlwZSwgLy8gN1xuICByZWFkQ29udGVudEFueSwgLy8gOFxuICByZWFkQ29udGVudERvYywgLy8gOVxuICAoKSA9PiB7IGVycm9yLnVuZXhwZWN0ZWRDYXNlKCkgfSAvLyAxMCAtIFNraXAgaXMgbm90IEl0ZW1Db250ZW50XG5dXG5cbi8qKlxuICogRG8gbm90IGltcGxlbWVudCB0aGlzIGNsYXNzIVxuICovXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RDb250ZW50IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3VsZCByZXR1cm4gZmFsc2UgaWYgdGhpcyBJdGVtIGlzIHNvbWUga2luZCBvZiBtZXRhIGluZm9ybWF0aW9uXG4gICAqIChlLmcuIGZvcm1hdCBpbmZvcm1hdGlvbikuXG4gICAqXG4gICAqICogV2hldGhlciB0aGlzIEl0ZW0gc2hvdWxkIGJlIGFkZHJlc3NhYmxlIHZpYSBgeWFycmF5LmdldChpKWBcbiAgICogKiBXaGV0aGVyIHRoaXMgSXRlbSBzaG91bGQgYmUgY291bnRlZCB3aGVuIGNvbXB1dGluZyB5YXJyYXkubGVuZ3RoXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QWJzdHJhY3RDb250ZW50fVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IF9vZmZzZXRcbiAgICogQHJldHVybiB7QWJzdHJhY3RDb250ZW50fVxuICAgKi9cbiAgc3BsaWNlIChfb2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBYnN0cmFjdENvbnRlbnR9IF9yaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChfcmlnaHQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSBfdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBfaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlIChfdHJhbnNhY3Rpb24sIF9pdGVtKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gX3RyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKF90cmFuc2FjdGlvbikge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IF9zdG9yZVxuICAgKi9cbiAgZ2MgKF9zdG9yZSkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBfZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gX29mZnNldFxuICAgKi9cbiAgd3JpdGUgKF9lbmNvZGVyLCBfb2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIEFic3RyYWN0U3RydWN0LFxuICBVcGRhdGVFbmNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMiwgU3RydWN0U3RvcmUsIFRyYW5zYWN0aW9uLCBJRCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG59IGZyb20gJy4uL2ludGVybmFscy5qcydcbmltcG9ydCAqIGFzIGVycm9yIGZyb20gJ2xpYjAvZXJyb3InXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuXG5leHBvcnQgY29uc3Qgc3RydWN0U2tpcFJlZk51bWJlciA9IDEwXG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFNraXAgZXh0ZW5kcyBBYnN0cmFjdFN0cnVjdCB7XG4gIGdldCBkZWxldGVkICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZGVsZXRlICgpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2tpcH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gcmlnaHQuY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCArPSByaWdodC5sZW5ndGhcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIC8vIHNraXAgc3RydWN0cyBjYW5ub3QgYmUgaW50ZWdyYXRlZFxuICAgIGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUluZm8oc3RydWN0U2tpcFJlZk51bWJlcilcbiAgICAvLyB3cml0ZSBhcyBWYXJVaW50IGJlY2F1c2UgU2tpcHMgY2FuJ3QgbWFrZSB1c2Ugb2YgcHJlZGljdGFibGUgbGVuZ3RoLWVuY29kaW5nXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHRoaXMubGVuZ3RoIC0gb2Zmc2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEByZXR1cm4ge251bGwgfCBudW1iZXJ9XG4gICAqL1xuICBnZXRNaXNzaW5nICh0cmFuc2FjdGlvbiwgc3RvcmUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iLCAiLyoqIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5leHBvcnQge1xuICBEb2MsXG4gIFRyYW5zYWN0aW9uLFxuICBZQXJyYXkgYXMgQXJyYXksXG4gIFlNYXAgYXMgTWFwLFxuICBZVGV4dCBhcyBUZXh0LFxuICBZWG1sVGV4dCBhcyBYbWxUZXh0LFxuICBZWG1sSG9vayBhcyBYbWxIb29rLFxuICBZWG1sRWxlbWVudCBhcyBYbWxFbGVtZW50LFxuICBZWG1sRnJhZ21lbnQgYXMgWG1sRnJhZ21lbnQsXG4gIFlYbWxFdmVudCxcbiAgWU1hcEV2ZW50LFxuICBZQXJyYXlFdmVudCxcbiAgWVRleHRFdmVudCxcbiAgWUV2ZW50LFxuICBJdGVtLFxuICBBYnN0cmFjdFN0cnVjdCxcbiAgR0MsXG4gIFNraXAsXG4gIENvbnRlbnRCaW5hcnksXG4gIENvbnRlbnREZWxldGVkLFxuICBDb250ZW50RG9jLFxuICBDb250ZW50RW1iZWQsXG4gIENvbnRlbnRGb3JtYXQsXG4gIENvbnRlbnRKU09OLFxuICBDb250ZW50QW55LFxuICBDb250ZW50U3RyaW5nLFxuICBDb250ZW50VHlwZSxcbiAgQWJzdHJhY3RUeXBlLFxuICBnZXRUeXBlQ2hpbGRyZW4sXG4gIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tVHlwZUluZGV4LFxuICBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbUpTT04sXG4gIGNyZWF0ZUFic29sdXRlUG9zaXRpb25Gcm9tUmVsYXRpdmVQb3NpdGlvbixcbiAgY29tcGFyZVJlbGF0aXZlUG9zaXRpb25zLFxuICBBYnNvbHV0ZVBvc2l0aW9uLFxuICBSZWxhdGl2ZVBvc2l0aW9uLFxuICBJRCxcbiAgY3JlYXRlSUQsXG4gIGNvbXBhcmVJRHMsXG4gIGdldFN0YXRlLFxuICBTbmFwc2hvdCxcbiAgY3JlYXRlU25hcHNob3QsXG4gIGNyZWF0ZURlbGV0ZVNldCxcbiAgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlLFxuICBjbGVhbnVwWVRleHRGb3JtYXR0aW5nLFxuICBzbmFwc2hvdCxcbiAgZW1wdHlTbmFwc2hvdCxcbiAgZmluZFJvb3RUeXBlS2V5LFxuICBmaW5kSW5kZXhTUyxcbiAgZ2V0SXRlbSxcbiAgdHlwZUxpc3RUb0FycmF5U25hcHNob3QsXG4gIHR5cGVNYXBHZXRTbmFwc2hvdCxcbiAgdHlwZU1hcEdldEFsbFNuYXBzaG90LFxuICBjcmVhdGVEb2NGcm9tU25hcHNob3QsXG4gIGl0ZXJhdGVEZWxldGVkU3RydWN0cyxcbiAgYXBwbHlVcGRhdGUsXG4gIGFwcGx5VXBkYXRlVjIsXG4gIHJlYWRVcGRhdGUsXG4gIHJlYWRVcGRhdGVWMixcbiAgZW5jb2RlU3RhdGVBc1VwZGF0ZSxcbiAgZW5jb2RlU3RhdGVBc1VwZGF0ZVYyLFxuICBlbmNvZGVTdGF0ZVZlY3RvcixcbiAgVW5kb01hbmFnZXIsXG4gIGRlY29kZVNuYXBzaG90LFxuICBlbmNvZGVTbmFwc2hvdCxcbiAgZGVjb2RlU25hcHNob3RWMixcbiAgZW5jb2RlU25hcHNob3RWMixcbiAgZGVjb2RlU3RhdGVWZWN0b3IsXG4gIGxvZ1VwZGF0ZSxcbiAgbG9nVXBkYXRlVjIsXG4gIGRlY29kZVVwZGF0ZSxcbiAgZGVjb2RlVXBkYXRlVjIsXG4gIHJlbGF0aXZlUG9zaXRpb25Ub0pTT04sXG4gIGlzRGVsZXRlZCxcbiAgaXNQYXJlbnRPZixcbiAgZXF1YWxTbmFwc2hvdHMsXG4gIFBlcm1hbmVudFVzZXJEYXRhLCAvLyBAVE9ETyBleHBlcmltZW50YWxcbiAgdHJ5R2MsXG4gIHRyYW5zYWN0LFxuICBBYnN0cmFjdENvbm5lY3RvcixcbiAgbG9nVHlwZSxcbiAgbWVyZ2VVcGRhdGVzLFxuICBtZXJnZVVwZGF0ZXNWMixcbiAgcGFyc2VVcGRhdGVNZXRhLFxuICBwYXJzZVVwZGF0ZU1ldGFWMixcbiAgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlLFxuICBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGVWMixcbiAgZW5jb2RlUmVsYXRpdmVQb3NpdGlvbixcbiAgZGVjb2RlUmVsYXRpdmVQb3NpdGlvbixcbiAgZGlmZlVwZGF0ZSxcbiAgZGlmZlVwZGF0ZVYyLFxuICBjb252ZXJ0VXBkYXRlRm9ybWF0VjFUb1YyLFxuICBjb252ZXJ0VXBkYXRlRm9ybWF0VjJUb1YxLFxuICBvYmZ1c2NhdGVVcGRhdGUsXG4gIG9iZnVzY2F0ZVVwZGF0ZVYyLFxuICBVcGRhdGVFbmNvZGVyVjEsXG4gIFVwZGF0ZUVuY29kZXJWMixcbiAgVXBkYXRlRGVjb2RlclYxLFxuICBVcGRhdGVEZWNvZGVyVjIsXG4gIGVxdWFsRGVsZXRlU2V0cyxcbiAgc25hcHNob3RDb250YWluc1VwZGF0ZVxufSBmcm9tICcuL2ludGVybmFscy5qcydcblxuY29uc3QgZ2xvID0gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyBnbG9iYWxUaGlzXG4gIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge30pXG5cbmNvbnN0IGltcG9ydElkZW50aWZpZXIgPSAnX18gJFlKUyQgX18nXG5cbmlmIChnbG9baW1wb3J0SWRlbnRpZmllcl0gPT09IHRydWUpIHtcbiAgLyoqXG4gICAqIERlYXIgcmVhZGVyIG9mIHRoaXMgbWVzc2FnZS4gUGxlYXNlIHRha2UgdGhpcyBzZXJpb3VzbHkuXG4gICAqXG4gICAqIElmIHlvdSBzZWUgdGhpcyBtZXNzYWdlLCBtYWtlIHN1cmUgdGhhdCB5b3Ugb25seSBpbXBvcnQgb25lIHZlcnNpb24gb2YgWWpzLiBJbiBtYW55IGNhc2VzLFxuICAgKiB5b3VyIHBhY2thZ2UgbWFuYWdlciBpbnN0YWxscyB0d28gdmVyc2lvbnMgb2YgWWpzIHRoYXQgYXJlIHVzZWQgYnkgZGlmZmVyZW50IHBhY2thZ2VzIHdpdGhpbiB5b3VyIHByb2plY3QuXG4gICAqIEFub3RoZXIgcmVhc29uIGZvciB0aGlzIG1lc3NhZ2UgaXMgdGhhdCBzb21lIHBhcnRzIG9mIHlvdXIgcHJvamVjdCB1c2UgdGhlIGNvbW1vbmpzIHZlcnNpb24gb2YgWWpzXG4gICAqIGFuZCBvdGhlcnMgdXNlIHRoZSBFY21hU2NyaXB0IHZlcnNpb24gb2YgWWpzLlxuICAgKlxuICAgKiBUaGlzIG9mdGVuIGxlYWRzIHRvIGlzc3VlcyB0aGF0IGFyZSBoYXJkIHRvIGRlYnVnLiBXZSBvZnRlbiBuZWVkIHRvIHBlcmZvcm0gY29uc3RydWN0b3IgY2hlY2tzLFxuICAgKiBlLmcuIGBzdHJ1Y3QgaW5zdGFuY2VvZiBHQ2AuIElmIHlvdSBpbXBvcnRlZCBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgWWpzLCBpdCBpcyBpbXBvc3NpYmxlIGZvciB1cyB0b1xuICAgKiBkbyB0aGUgY29uc3RydWN0b3IgY2hlY2tzIGFueW1vcmUgLSB3aGljaCBtaWdodCBicmVhayB0aGUgQ1JEVCBhbGdvcml0aG0uXG4gICAqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS95anMveWpzL2lzc3Vlcy80MzhcbiAgICovXG4gIGNvbnNvbGUuZXJyb3IoJ1lqcyB3YXMgYWxyZWFkeSBpbXBvcnRlZC4gVGhpcyBicmVha3MgY29uc3RydWN0b3IgY2hlY2tzIGFuZCB3aWxsIGxlYWQgdG8gaXNzdWVzISAtIGh0dHBzOi8vZ2l0aHViLmNvbS95anMveWpzL2lzc3Vlcy80MzgnKVxufVxuZ2xvW2ltcG9ydElkZW50aWZpZXJdID0gdHJ1ZVxuIiwgIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIEhlbHBlcnMgdG8gd29yayB3aXRoIEluZGV4ZWREQi5cbiAqXG4gKiBAbW9kdWxlIGluZGV4ZWRkYlxuICovXG5cbmltcG9ydCAqIGFzIHByb21pc2UgZnJvbSAnLi9wcm9taXNlLmpzJ1xuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnLi9lcnJvci5qcydcblxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5cbi8qKlxuICogSURCIFJlcXVlc3QgdG8gUHJvbWlzZSB0cmFuc2Zvcm1lclxuICpcbiAqIEBwYXJhbSB7SURCUmVxdWVzdH0gcmVxdWVzdFxuICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICovXG5leHBvcnQgY29uc3QgcnRvcCA9IHJlcXVlc3QgPT4gcHJvbWlzZS5jcmVhdGUoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAvLyBAdHMtaWdub3JlXG4gIHJlcXVlc3Qub25lcnJvciA9IGV2ZW50ID0+IHJlamVjdChuZXcgRXJyb3IoZXZlbnQudGFyZ2V0LmVycm9yKSlcbiAgLy8gQHRzLWlnbm9yZVxuICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGV2ZW50ID0+IHJlc29sdmUoZXZlbnQudGFyZ2V0LnJlc3VsdClcbn0pXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oSURCRGF0YWJhc2UpOmFueX0gaW5pdERCIENhbGxlZCB3aGVuIHRoZSBkYXRhYmFzZSBpcyBmaXJzdCBjcmVhdGVkXG4gKiBAcmV0dXJuIHtQcm9taXNlPElEQkRhdGFiYXNlPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG9wZW5EQiA9IChuYW1lLCBpbml0REIpID0+IHByb21pc2UuY3JlYXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUpXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICovXG4gIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZXZlbnQgPT4gaW5pdERCKGV2ZW50LnRhcmdldC5yZXN1bHQpXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICovXG4gIHJlcXVlc3Qub25lcnJvciA9IGV2ZW50ID0+IHJlamVjdChlcnJvci5jcmVhdGUoZXZlbnQudGFyZ2V0LmVycm9yKSlcbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBldmVudFxuICAgKi9cbiAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBldmVudCA9PiB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lEQkRhdGFiYXNlfVxuICAgICAqL1xuICAgIGNvbnN0IGRiID0gZXZlbnQudGFyZ2V0LnJlc3VsdFxuICAgIGRiLm9udmVyc2lvbmNoYW5nZSA9ICgpID0+IHsgZGIuY2xvc2UoKSB9XG4gICAgcmVzb2x2ZShkYilcbiAgfVxufSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgY29uc3QgZGVsZXRlREIgPSBuYW1lID0+IHJ0b3AoaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpKVxuXG4vKipcbiAqIEBwYXJhbSB7SURCRGF0YWJhc2V9IGRiXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PHN0cmluZz58QXJyYXk8c3RyaW5nfElEQk9iamVjdFN0b3JlUGFyYW1ldGVyc3x1bmRlZmluZWQ+Pn0gZGVmaW5pdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVN0b3JlcyA9IChkYiwgZGVmaW5pdGlvbnMpID0+IGRlZmluaXRpb25zLmZvckVhY2goZCA9PlxuICAvLyBAdHMtaWdub3JlXG4gIGRiLmNyZWF0ZU9iamVjdFN0b3JlLmFwcGx5KGRiLCBkKVxuKVxuXG4vKipcbiAqIEBwYXJhbSB7SURCRGF0YWJhc2V9IGRiXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHN0b3Jlc1xuICogQHBhcmFtIHtcInJlYWR3cml0ZVwifFwicmVhZG9ubHlcIn0gW2FjY2Vzc11cbiAqIEByZXR1cm4ge0FycmF5PElEQk9iamVjdFN0b3JlPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zYWN0ID0gKGRiLCBzdG9yZXMsIGFjY2VzcyA9ICdyZWFkd3JpdGUnKSA9PiB7XG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oc3RvcmVzLCBhY2Nlc3MpXG4gIHJldHVybiBzdG9yZXMubWFwKHN0b3JlID0+IGdldFN0b3JlKHRyYW5zYWN0aW9uLCBzdG9yZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SURCS2V5UmFuZ2V9IFtyYW5nZV1cbiAqIEByZXR1cm4ge1Byb21pc2U8bnVtYmVyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvdW50ID0gKHN0b3JlLCByYW5nZSkgPT5cbiAgcnRvcChzdG9yZS5jb3VudChyYW5nZSkpXG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlIHwgQXJyYXk8YW55PiB9IGtleVxuICogQHJldHVybiB7UHJvbWlzZTxTdHJpbmcgfCBudW1iZXIgfCBBcnJheUJ1ZmZlciB8IERhdGUgfCBBcnJheTxhbnk+Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldCA9IChzdG9yZSwga2V5KSA9PlxuICBydG9wKHN0b3JlLmdldChrZXkpKVxuXG4vKipcbiAqIEBwYXJhbSB7SURCT2JqZWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge1N0cmluZyB8IG51bWJlciB8IEFycmF5QnVmZmVyIHwgRGF0ZSB8IElEQktleVJhbmdlIHwgQXJyYXk8YW55PiB9IGtleVxuICovXG5leHBvcnQgY29uc3QgZGVsID0gKHN0b3JlLCBrZXkpID0+XG4gIHJ0b3Aoc3RvcmUuZGVsZXRlKGtleSkpXG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlIHwgYm9vbGVhbn0gaXRlbVxuICogQHBhcmFtIHtTdHJpbmcgfCBudW1iZXIgfCBBcnJheUJ1ZmZlciB8IERhdGUgfCBBcnJheTxhbnk+fSBba2V5XVxuICovXG5leHBvcnQgY29uc3QgcHV0ID0gKHN0b3JlLCBpdGVtLCBrZXkpID0+XG4gIHJ0b3Aoc3RvcmUucHV0KGl0ZW0sIGtleSkpXG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlIHwgYm9vbGVhbn0gIGl0ZW1cbiAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlIHwgQXJyYXk8YW55Pn0gIGtleVxuICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICovXG5leHBvcnQgY29uc3QgYWRkID0gKHN0b3JlLCBpdGVtLCBrZXkpID0+XG4gIHJ0b3Aoc3RvcmUuYWRkKGl0ZW0sIGtleSkpXG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlfSAgaXRlbVxuICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQga2V5XG4gKi9cbmV4cG9ydCBjb25zdCBhZGRBdXRvS2V5ID0gKHN0b3JlLCBpdGVtKSA9PlxuICBydG9wKHN0b3JlLmFkZChpdGVtKSlcblxuLyoqXG4gKiBAcGFyYW0ge0lEQk9iamVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJREJLZXlSYW5nZX0gW3JhbmdlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF1cbiAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8YW55Pj59XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRBbGwgPSAoc3RvcmUsIHJhbmdlLCBsaW1pdCkgPT5cbiAgcnRvcChzdG9yZS5nZXRBbGwocmFuZ2UsIGxpbWl0KSlcblxuLyoqXG4gKiBAcGFyYW0ge0lEQk9iamVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJREJLZXlSYW5nZX0gW3JhbmdlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF1cbiAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8YW55Pj59XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRBbGxLZXlzID0gKHN0b3JlLCByYW5nZSwgbGltaXQpID0+XG4gIHJ0b3Aoc3RvcmUuZ2V0QWxsS2V5cyhyYW5nZSwgbGltaXQpKVxuXG4vKipcbiAqIEBwYXJhbSB7SURCT2JqZWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEQktleVJhbmdlfG51bGx9IHF1ZXJ5XG4gKiBAcGFyYW0geyduZXh0J3wncHJldid8J25leHR1bmlxdWUnfCdwcmV2dW5pcXVlJ30gZGlyZWN0aW9uXG4gKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gKi9cbmV4cG9ydCBjb25zdCBxdWVyeUZpcnN0ID0gKHN0b3JlLCBxdWVyeSwgZGlyZWN0aW9uKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi9cbiAgbGV0IGZpcnN0ID0gbnVsbFxuICByZXR1cm4gaXRlcmF0ZUtleXMoc3RvcmUsIHF1ZXJ5LCBrZXkgPT4ge1xuICAgIGZpcnN0ID0ga2V5XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0sIGRpcmVjdGlvbikudGhlbigoKSA9PiBmaXJzdClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0lEQk9iamVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJREJLZXlSYW5nZT99IFtyYW5nZV1cbiAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldExhc3RLZXkgPSAoc3RvcmUsIHJhbmdlID0gbnVsbCkgPT4gcXVlcnlGaXJzdChzdG9yZSwgcmFuZ2UsICdwcmV2JylcblxuLyoqXG4gKiBAcGFyYW0ge0lEQk9iamVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJREJLZXlSYW5nZT99IFtyYW5nZV1cbiAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEZpcnN0S2V5ID0gKHN0b3JlLCByYW5nZSA9IG51bGwpID0+IHF1ZXJ5Rmlyc3Qoc3RvcmUsIHJhbmdlLCAnbmV4dCcpXG5cbi8qKlxuICogQHR5cGVkZWYgS2V5VmFsdWVQYWlyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByb3BlcnR5IHthbnl9IGsga2V5XG4gKiBAcHJvcGVydHkge2FueX0gdiBWYWx1ZVxuICovXG5cbi8qKlxuICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SURCS2V5UmFuZ2V9IFtyYW5nZV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdXG4gKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PEtleVZhbHVlUGFpcj4+fVxuICovXG5leHBvcnQgY29uc3QgZ2V0QWxsS2V5c1ZhbHVlcyA9IChzdG9yZSwgcmFuZ2UsIGxpbWl0KSA9PlxuICAvLyBAdHMtaWdub3JlXG4gIHByb21pc2UuYWxsKFtnZXRBbGxLZXlzKHN0b3JlLCByYW5nZSwgbGltaXQpLCBnZXRBbGwoc3RvcmUsIHJhbmdlLCBsaW1pdCldKS50aGVuKChba3MsIHZzXSkgPT4ga3MubWFwKChrLCBpKSA9PiAoeyBrLCB2OiB2c1tpXSB9KSkpXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHJlcXVlc3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oSURCQ3Vyc29yV2l0aFZhbHVlKTp2b2lkfGJvb2xlYW58UHJvbWlzZTx2b2lkfGJvb2xlYW4+fSBmXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICovXG5jb25zdCBpdGVyYXRlT25SZXF1ZXN0ID0gKHJlcXVlc3QsIGYpID0+IHByb21pc2UuY3JlYXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgcmVxdWVzdC5vbmVycm9yID0gcmVqZWN0XG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICovXG4gIHJlcXVlc3Qub25zdWNjZXNzID0gYXN5bmMgZXZlbnQgPT4ge1xuICAgIGNvbnN0IGN1cnNvciA9IGV2ZW50LnRhcmdldC5yZXN1bHRcbiAgICBpZiAoY3Vyc29yID09PSBudWxsIHx8IChhd2FpdCBmKGN1cnNvcikpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgIH1cbiAgICBjdXJzb3IuY29udGludWUoKVxuICB9XG59KVxuXG4vKipcbiAqIEl0ZXJhdGUgb24ga2V5cyBhbmQgdmFsdWVzXG4gKiBAcGFyYW0ge0lEQk9iamVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJREJLZXlSYW5nZXxudWxsfSBrZXlyYW5nZVxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksYW55KTp2b2lkfGJvb2xlYW58UHJvbWlzZTx2b2lkfGJvb2xlYW4+fSBmIENhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgKHZhbHVlLCBrZXkpXG4gKiBAcGFyYW0geyduZXh0J3wncHJldid8J25leHR1bmlxdWUnfCdwcmV2dW5pcXVlJ30gZGlyZWN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVyYXRlID0gKHN0b3JlLCBrZXlyYW5nZSwgZiwgZGlyZWN0aW9uID0gJ25leHQnKSA9PlxuICBpdGVyYXRlT25SZXF1ZXN0KHN0b3JlLm9wZW5DdXJzb3Ioa2V5cmFuZ2UsIGRpcmVjdGlvbiksIGN1cnNvciA9PiBmKGN1cnNvci52YWx1ZSwgY3Vyc29yLmtleSkpXG5cbi8qKlxuICogSXRlcmF0ZSBvbiB0aGUga2V5cyAobm8gdmFsdWVzKVxuICpcbiAqIEBwYXJhbSB7SURCT2JqZWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEQktleVJhbmdlfG51bGx9IGtleXJhbmdlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSk6dm9pZHxib29sZWFufFByb21pc2U8dm9pZHxib29sZWFuPn0gZiBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIHRoZSBrZXlcbiAqIEBwYXJhbSB7J25leHQnfCdwcmV2J3wnbmV4dHVuaXF1ZSd8J3ByZXZ1bmlxdWUnfSBkaXJlY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGl0ZXJhdGVLZXlzID0gKHN0b3JlLCBrZXlyYW5nZSwgZiwgZGlyZWN0aW9uID0gJ25leHQnKSA9PlxuICBpdGVyYXRlT25SZXF1ZXN0KHN0b3JlLm9wZW5LZXlDdXJzb3Ioa2V5cmFuZ2UsIGRpcmVjdGlvbiksIGN1cnNvciA9PiBmKGN1cnNvci5rZXkpKVxuXG4vKipcbiAqIE9wZW4gc3RvcmUgZnJvbSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJREJUcmFuc2FjdGlvbn0gdFxuICogQHBhcmFtIHtTdHJpbmd9IHN0b3JlXG4gKiBAcmV0dXJucyB7SURCT2JqZWN0U3RvcmV9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTdG9yZSA9ICh0LCBzdG9yZSkgPT4gdC5vYmplY3RTdG9yZShzdG9yZSlcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gbG93ZXJcbiAqIEBwYXJhbSB7YW55fSB1cHBlclxuICogQHBhcmFtIHtib29sZWFufSBsb3dlck9wZW5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXBwZXJPcGVuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVJREJLZXlSYW5nZUJvdW5kID0gKGxvd2VyLCB1cHBlciwgbG93ZXJPcGVuLCB1cHBlck9wZW4pID0+IElEQktleVJhbmdlLmJvdW5kKGxvd2VyLCB1cHBlciwgbG93ZXJPcGVuLCB1cHBlck9wZW4pXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHVwcGVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVwcGVyT3BlblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlSURCS2V5UmFuZ2VVcHBlckJvdW5kID0gKHVwcGVyLCB1cHBlck9wZW4pID0+IElEQktleVJhbmdlLnVwcGVyQm91bmQodXBwZXIsIHVwcGVyT3BlbilcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gbG93ZXJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG93ZXJPcGVuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVJREJLZXlSYW5nZUxvd2VyQm91bmQgPSAobG93ZXIsIGxvd2VyT3BlbikgPT4gSURCS2V5UmFuZ2UubG93ZXJCb3VuZChsb3dlciwgbG93ZXJPcGVuKVxuXG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuIiwgImltcG9ydCAqIGFzIFkgZnJvbSAneWpzJ1xuaW1wb3J0ICogYXMgaWRiIGZyb20gJ2xpYjAvaW5kZXhlZGRiJ1xuaW1wb3J0ICogYXMgcHJvbWlzZSBmcm9tICdsaWIwL3Byb21pc2UnXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnbGliMC9vYnNlcnZhYmxlJ1xuXG5jb25zdCBjdXN0b21TdG9yZU5hbWUgPSAnY3VzdG9tJ1xuY29uc3QgdXBkYXRlc1N0b3JlTmFtZSA9ICd1cGRhdGVzJ1xuXG5leHBvcnQgY29uc3QgUFJFRkVSUkVEX1RSSU1fU0laRSA9IDUwMFxuXG4vKipcbiAqIEBwYXJhbSB7SW5kZXhlZGRiUGVyc2lzdGVuY2V9IGlkYlBlcnNpc3RlbmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKElEQk9iamVjdFN0b3JlKTp2b2lkfSBbYmVmb3JlQXBwbHlVcGRhdGVzQ2FsbGJhY2tdXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKElEQk9iamVjdFN0b3JlKTp2b2lkfSBbYWZ0ZXJBcHBseVVwZGF0ZXNDYWxsYmFja11cbiAqL1xuZXhwb3J0IGNvbnN0IGZldGNoVXBkYXRlcyA9IChpZGJQZXJzaXN0ZW5jZSwgYmVmb3JlQXBwbHlVcGRhdGVzQ2FsbGJhY2sgPSAoKSA9PiB7fSwgYWZ0ZXJBcHBseVVwZGF0ZXNDYWxsYmFjayA9ICgpID0+IHt9KSA9PiB7XG4gIGNvbnN0IFt1cGRhdGVzU3RvcmVdID0gaWRiLnRyYW5zYWN0KC8qKiBAdHlwZSB7SURCRGF0YWJhc2V9ICovIChpZGJQZXJzaXN0ZW5jZS5kYiksIFt1cGRhdGVzU3RvcmVOYW1lXSkgLy8gLCAncmVhZG9ubHknKVxuICByZXR1cm4gaWRiLmdldEFsbCh1cGRhdGVzU3RvcmUsIGlkYi5jcmVhdGVJREJLZXlSYW5nZUxvd2VyQm91bmQoaWRiUGVyc2lzdGVuY2UuX2RicmVmLCBmYWxzZSkpLnRoZW4odXBkYXRlcyA9PiB7XG4gICAgaWYgKCFpZGJQZXJzaXN0ZW5jZS5fZGVzdHJveWVkKSB7XG4gICAgICBiZWZvcmVBcHBseVVwZGF0ZXNDYWxsYmFjayh1cGRhdGVzU3RvcmUpXG4gICAgICBZLnRyYW5zYWN0KGlkYlBlcnNpc3RlbmNlLmRvYywgKCkgPT4ge1xuICAgICAgICB1cGRhdGVzLmZvckVhY2godmFsID0+IFkuYXBwbHlVcGRhdGUoaWRiUGVyc2lzdGVuY2UuZG9jLCB2YWwpKVxuICAgICAgfSwgaWRiUGVyc2lzdGVuY2UsIGZhbHNlKVxuICAgICAgYWZ0ZXJBcHBseVVwZGF0ZXNDYWxsYmFjayh1cGRhdGVzU3RvcmUpXG4gICAgfVxuICB9KVxuICAgIC50aGVuKCgpID0+IGlkYi5nZXRMYXN0S2V5KHVwZGF0ZXNTdG9yZSkudGhlbihsYXN0S2V5ID0+IHsgaWRiUGVyc2lzdGVuY2UuX2RicmVmID0gbGFzdEtleSArIDEgfSkpXG4gICAgLnRoZW4oKCkgPT4gaWRiLmNvdW50KHVwZGF0ZXNTdG9yZSkudGhlbihjbnQgPT4geyBpZGJQZXJzaXN0ZW5jZS5fZGJzaXplID0gY250IH0pKVxuICAgIC50aGVuKCgpID0+IHVwZGF0ZXNTdG9yZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0luZGV4ZWRkYlBlcnNpc3RlbmNlfSBpZGJQZXJzaXN0ZW5jZVxuICogQHBhcmFtIHtib29sZWFufSBmb3JjZVN0b3JlXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yZVN0YXRlID0gKGlkYlBlcnNpc3RlbmNlLCBmb3JjZVN0b3JlID0gdHJ1ZSkgPT5cbiAgZmV0Y2hVcGRhdGVzKGlkYlBlcnNpc3RlbmNlKVxuICAgIC50aGVuKHVwZGF0ZXNTdG9yZSA9PiB7XG4gICAgICBpZiAoZm9yY2VTdG9yZSB8fCBpZGJQZXJzaXN0ZW5jZS5fZGJzaXplID49IFBSRUZFUlJFRF9UUklNX1NJWkUpIHtcbiAgICAgICAgaWRiLmFkZEF1dG9LZXkodXBkYXRlc1N0b3JlLCBZLmVuY29kZVN0YXRlQXNVcGRhdGUoaWRiUGVyc2lzdGVuY2UuZG9jKSlcbiAgICAgICAgICAudGhlbigoKSA9PiBpZGIuZGVsKHVwZGF0ZXNTdG9yZSwgaWRiLmNyZWF0ZUlEQktleVJhbmdlVXBwZXJCb3VuZChpZGJQZXJzaXN0ZW5jZS5fZGJyZWYsIHRydWUpKSlcbiAgICAgICAgICAudGhlbigoKSA9PiBpZGIuY291bnQodXBkYXRlc1N0b3JlKS50aGVuKGNudCA9PiB7IGlkYlBlcnNpc3RlbmNlLl9kYnNpemUgPSBjbnQgfSkpXG4gICAgICB9XG4gICAgfSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgY29uc3QgY2xlYXJEb2N1bWVudCA9IG5hbWUgPT4gaWRiLmRlbGV0ZURCKG5hbWUpXG5cbi8qKlxuICogQGV4dGVuZHMgT2JzZXJ2YWJsZTxzdHJpbmc+XG4gKi9cbmV4cG9ydCBjbGFzcyBJbmRleGVkZGJQZXJzaXN0ZW5jZSBleHRlbmRzIE9ic2VydmFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtZLkRvY30gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobmFtZSwgZG9jKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZG9jID0gZG9jXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHRoaXMuX2RicmVmID0gMFxuICAgIHRoaXMuX2Ric2l6ZSA9IDBcbiAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJREJEYXRhYmFzZXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuZGIgPSBudWxsXG4gICAgdGhpcy5zeW5jZWQgPSBmYWxzZVxuICAgIHRoaXMuX2RiID0gaWRiLm9wZW5EQihuYW1lLCBkYiA9PlxuICAgICAgaWRiLmNyZWF0ZVN0b3JlcyhkYiwgW1xuICAgICAgICBbJ3VwZGF0ZXMnLCB7IGF1dG9JbmNyZW1lbnQ6IHRydWUgfV0sXG4gICAgICAgIFsnY3VzdG9tJ11cbiAgICAgIF0pXG4gICAgKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtQcm9taXNlPEluZGV4ZWRkYlBlcnNpc3RlbmNlPn1cbiAgICAgKi9cbiAgICB0aGlzLndoZW5TeW5jZWQgPSBwcm9taXNlLmNyZWF0ZShyZXNvbHZlID0+IHRoaXMub24oJ3N5bmNlZCcsICgpID0+IHJlc29sdmUodGhpcykpKVxuXG4gICAgdGhpcy5fZGIudGhlbihkYiA9PiB7XG4gICAgICB0aGlzLmRiID0gZGJcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtJREJPYmplY3RTdG9yZX0gdXBkYXRlc1N0b3JlXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGJlZm9yZUFwcGx5VXBkYXRlc0NhbGxiYWNrID0gKHVwZGF0ZXNTdG9yZSkgPT4gaWRiLmFkZEF1dG9LZXkodXBkYXRlc1N0b3JlLCBZLmVuY29kZVN0YXRlQXNVcGRhdGUoZG9jKSlcbiAgICAgIGNvbnN0IGFmdGVyQXBwbHlVcGRhdGVzQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9kZXN0cm95ZWQpIHJldHVybiB0aGlzXG4gICAgICAgIHRoaXMuc3luY2VkID0gdHJ1ZVxuICAgICAgICB0aGlzLmVtaXQoJ3N5bmNlZCcsIFt0aGlzXSlcbiAgICAgIH1cbiAgICAgIGZldGNoVXBkYXRlcyh0aGlzLCBiZWZvcmVBcHBseVVwZGF0ZXNDYWxsYmFjaywgYWZ0ZXJBcHBseVVwZGF0ZXNDYWxsYmFjaylcbiAgICB9KVxuICAgIC8qKlxuICAgICAqIFRpbWVvdXQgaW4gbXMgdW50aWxsIGRhdGEgaXMgbWVyZ2VkIGFuZCBwZXJzaXN0ZWQgaW4gaWRiLlxuICAgICAqL1xuICAgIHRoaXMuX3N0b3JlVGltZW91dCA9IDEwMDBcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIHRoaXMuX3N0b3JlVGltZW91dElkID0gbnVsbFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gICAgICogQHBhcmFtIHthbnl9IG9yaWdpblxuICAgICAqL1xuICAgIHRoaXMuX3N0b3JlVXBkYXRlID0gKHVwZGF0ZSwgb3JpZ2luKSA9PiB7XG4gICAgICBpZiAodGhpcy5kYiAmJiBvcmlnaW4gIT09IHRoaXMpIHtcbiAgICAgICAgY29uc3QgW3VwZGF0ZXNTdG9yZV0gPSBpZGIudHJhbnNhY3QoLyoqIEB0eXBlIHtJREJEYXRhYmFzZX0gKi8gKHRoaXMuZGIpLCBbdXBkYXRlc1N0b3JlTmFtZV0pXG4gICAgICAgIGlkYi5hZGRBdXRvS2V5KHVwZGF0ZXNTdG9yZSwgdXBkYXRlKVxuICAgICAgICBpZiAoKyt0aGlzLl9kYnNpemUgPj0gUFJFRkVSUkVEX1RSSU1fU0laRSkge1xuICAgICAgICAgIC8vIGRlYm91bmNlIHN0b3JlIGNhbGxcbiAgICAgICAgICBpZiAodGhpcy5fc3RvcmVUaW1lb3V0SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zdG9yZVRpbWVvdXRJZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fc3RvcmVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHN0b3JlU3RhdGUodGhpcywgZmFsc2UpXG4gICAgICAgICAgICB0aGlzLl9zdG9yZVRpbWVvdXRJZCA9IG51bGxcbiAgICAgICAgICB9LCB0aGlzLl9zdG9yZVRpbWVvdXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZG9jLm9uKCd1cGRhdGUnLCB0aGlzLl9zdG9yZVVwZGF0ZSlcbiAgICB0aGlzLmRlc3Ryb3kgPSB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzKVxuICAgIGRvYy5vbignZGVzdHJveScsIHRoaXMuZGVzdHJveSlcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLl9zdG9yZVRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3N0b3JlVGltZW91dElkKVxuICAgIH1cbiAgICB0aGlzLmRvYy5vZmYoJ3VwZGF0ZScsIHRoaXMuX3N0b3JlVXBkYXRlKVxuICAgIHRoaXMuZG9jLm9mZignZGVzdHJveScsIHRoaXMuZGVzdHJveSlcbiAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRoaXMuX2RiLnRoZW4oZGIgPT4ge1xuICAgICAgZGIuY2xvc2UoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhpcyBpbnN0YW5jZSBhbmQgcmVtb3ZlcyBhbGwgZGF0YSBmcm9tIGluZGV4ZWRkYi5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGNsZWFyRGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xuICAgICAgaWRiLmRlbGV0ZURCKHRoaXMubmFtZSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlfSBrZXlcbiAgICogQHJldHVybiB7UHJvbWlzZTxTdHJpbmcgfCBudW1iZXIgfCBBcnJheUJ1ZmZlciB8IERhdGUgfCBhbnk+fVxuICAgKi9cbiAgZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fZGIudGhlbihkYiA9PiB7XG4gICAgICBjb25zdCBbY3VzdG9tXSA9IGlkYi50cmFuc2FjdChkYiwgW2N1c3RvbVN0b3JlTmFtZV0sICdyZWFkb25seScpXG4gICAgICByZXR1cm4gaWRiLmdldChjdXN0b20sIGtleSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlfSBrZXlcbiAgICogQHBhcmFtIHtTdHJpbmcgfCBudW1iZXIgfCBBcnJheUJ1ZmZlciB8IERhdGV9IHZhbHVlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlPn1cbiAgICovXG4gIHNldCAoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9kYi50aGVuKGRiID0+IHtcbiAgICAgIGNvbnN0IFtjdXN0b21dID0gaWRiLnRyYW5zYWN0KGRiLCBbY3VzdG9tU3RvcmVOYW1lXSlcbiAgICAgIHJldHVybiBpZGIucHV0KGN1c3RvbSwgdmFsdWUsIGtleSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nIHwgbnVtYmVyIHwgQXJyYXlCdWZmZXIgfCBEYXRlfSBrZXlcbiAgICogQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQ+fVxuICAgKi9cbiAgZGVsIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fZGIudGhlbihkYiA9PiB7XG4gICAgICBjb25zdCBbY3VzdG9tXSA9IGlkYi50cmFuc2FjdChkYiwgW2N1c3RvbVN0b3JlTmFtZV0pXG4gICAgICByZXR1cm4gaWRiLmRlbChjdXN0b20sIGtleSlcbiAgICB9KVxuICB9XG59XG4iLCAiaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5cbmltcG9ydCB0eXBlIHsgQXJyYXkgYXMgWUFycmF5LCBNYXAgYXMgWU1hcCB9IGZyb20gXCJ5anNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUb2RvTGlzdCB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbmV3TmFtZT86IHN0cmluZztcbiAgaXNFZGl0aW5nPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2RvSXRlbSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgY29tcGxldGVkOiBib29sZWFuO1xuICBsaXN0SWQ6IHN0cmluZztcbiAgbmV3TmFtZT86IHN0cmluZztcbiAgaXNFZGl0aW5nPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVG9kb0l0ZW0oaXRlbTogVG9kb0xpc3QgfCBUb2RvSXRlbSk6IGl0ZW0gaXMgVG9kb0l0ZW0ge1xuICByZXR1cm4gXCJsaXN0SWRcIiBpbiBpdGVtICYmIHR5cGVvZiBpdGVtLmxpc3RJZCA9PT0gXCJzdHJpbmdcIjtcbn1cblxuZXhwb3J0IGNvbnN0IHRvZG9MaXN0cyA9IHdyaXRhYmxlPFRvZG9MaXN0W10+KCk7XG5leHBvcnQgY29uc3QgdG9kb0l0ZW1zID0gd3JpdGFibGU8VG9kb0l0ZW1bXT4oKTtcblxuZXhwb3J0IGNvbnN0IHlUb2RvTGlzdHMgPSB3cml0YWJsZTxZQXJyYXk8WU1hcDxzdHJpbmcgfCBib29sZWFuPj4+KCk7XG5leHBvcnQgY29uc3QgeVRvZG9JdGVtcyA9IHdyaXRhYmxlPFlBcnJheTxZTWFwPHN0cmluZyB8IGJvb2xlYW4+Pj4oKTtcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiIGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgZ2V0IH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICBpbXBvcnQgeyBmcm9tVWludDhBcnJheSB9IGZyb20gXCJqcy1iYXNlNjRcIjtcblxuICBpbXBvcnQgeyB1c2VJc0Nvbm5lY3RlZCB9IGZyb20gXCIkbGliL2hvb2tzL3VzZUlzQ29ubmVjdGVkXCI7XG5cbiAgaW1wb3J0IHR5cGUgeyBMaXZlIH0gZnJvbSBcImxpdmVfc3ZlbHRlXCI7XG5cbiAgY29uc3QgZG9jID0gbmV3IFkuRG9jKCk7XG4gIGNvbnN0IGNsaWVudERvY3VtZW50VXBkYXRlZEtleSA9IFwiY2xpZW50RG9jdW1lbnRVcGRhdGVkXCI7XG5cbiAgZnVuY3Rpb24gZ2V0QmFzZTY0RG9jdW1lbnQoKSB7XG4gICAgY29uc3QgYmluYXJ5RG9jdW1lbnQgPSBZLmVuY29kZVN0YXRlQXNVcGRhdGUoZG9jKTtcbiAgICBjb25zdCBiYXNlNjREb2N1bWVudCA9IGZyb21VaW50OEFycmF5KGJpbmFyeURvY3VtZW50KTtcblxuICAgIHJldHVybiBiYXNlNjREb2N1bWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMZXQgdGhlIHVzZXIga25vdyB0aGF0IHN5bmMgdG8gc2VydmVyIGlzIGluIHByb2dyZXNzIGJ5IHNob3dpbmcgdGhlIHN0YXR1c1xuICAgKiBpbiB0aGUgU3luY1N0YXR1c0JhZGdlLiBJZiB0aGUgc3luYyB0YWtlcyBsb25nZXIgdGhhbiAxIHNlY29uZCwgdGltZW91dCBhbmRcbiAgICogc2V0IHN5bmMgc3RhdGUgdG8gXCJOb3QgU3luY2VkXCIuXG4gICAqL1xuICBmdW5jdGlvbiBub3RpZnlVc2VyU3luY2luZ0lzSW5Qcm9ncmVzcygpIHtcbiAgICBzeW5jU3RhdGUuc2V0KFwiU3luY2luZ1wiKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGdldChzeW5jU3RhdGUpICE9PSBcIlN5bmNlZFwiKSB7XG4gICAgICAgIHN5bmNTdGF0ZS5zZXQoXCJOb3QgU3luY2VkXCIpO1xuICAgICAgfVxuICAgIH0sIDEwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIExpdmVWaWV3IGlzIGRpc2Nvbm5lY3RlZCBhbmQgYXR0ZW1wdCByZWNvbm5lY3Rpb24gaWYgYSBjb25uZWN0aW9uXG4gICAqIHRvIHRoZSBzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxuICAgKi9cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlY29ubmVjdExpdmVWaWV3SWZEaXNjb25uZWN0ZWQoKSB7XG4gICAgY29uc3QgY29ubmVjdGVkID0gYXdhaXQgdXNlSXNDb25uZWN0ZWQoe30pO1xuXG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIHN5bmNTdGF0ZS5zZXQoXCJOb3QgU3luY2VkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxpdmUgPSBnZXQobGl2ZVZpZXcpO1xuICAgIGlmICghbGl2ZSB8fCBsaXZlLl9faXNEaXNjb25uZWN0ZWQpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtU3luY2VkKHJlc3BvbnNlOiB7IG9rOiBib29sZWFuIH0pIHtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIHN5bmNTdGF0ZS5zZXQoXCJTeW5jZWRcIik7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN5bmNEb2N1bWVudFRvU2VydmVyKGxpdmU6IExpdmUpIHtcbiAgICAvLyBTZXQgdGhlIHRvZG9MaXN0cyBhbmQgdG9kb0l0ZW1zIHN0b3JlcyBzbyB0aGF0IHRoZSBVSSBpcyB1cGRhdGVkLlxuICAgIHRvZG9MaXN0cy5zZXQoZ2V0KHlUb2RvTGlzdHMpLnRvSlNPTigpKTtcbiAgICB0b2RvSXRlbXMuc2V0KGdldCh5VG9kb0l0ZW1zKS50b0pTT04oKSk7XG5cbiAgICBub3RpZnlVc2VyU3luY2luZ0lzSW5Qcm9ncmVzcygpO1xuXG4gICAgLy8gVXBkYXRlIGNsaWVudERvY3VtZW50VXBkYXRlZEtleSB0byB0byBub3RpZnkgb3RoZXIgdGFicyB0aGF0IHRoZSBkb2N1bWVudCBoYXMgYmVlbiB1cGRhdGVkLlxuICAgIC8vIFRoaXMgaXMgdXNlZCB0byBzeW5jIHRoZSBkb2N1bWVudCBzdGF0ZSBhY3Jvc3MgZGlmZmVyZW50IHRhYnMgd2hlbiBvZmZsaW5lLlxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNsaWVudERvY3VtZW50VXBkYXRlZEtleSwgSlNPTi5zdHJpbmdpZnkoRGF0ZS5ub3coKSkpO1xuXG4gICAgLy8gU2VuZCBuZXcgY2xpZW50IGRvY3VtZW50IHRvIHNlcnZlci5cbiAgICBsaXZlPy5wdXNoRXZlbnQoXCJjbGllbnRfZG9jdW1lbnRfdXBkYXRlZFwiLCB7IGRvY3VtZW50OiBnZXRCYXNlNjREb2N1bWVudCgpIH0sIGNvbmZpcm1TeW5jZWQpO1xuXG4gICAgLy8gSW4gY2FzZSB0aGUgTGl2ZVZpZXcgaXMgZGlzY29ubmVjdGVkIGFuZCBhIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlciBpc1xuICAgIC8vIGF2YWlsYWJsZSwgYXR0ZW1wdCByZWNvbm5lY3Rpb24gb2YgdGhlIExpdmVWaWV3IGluIG9yZGVyIHRvIHN5bmMgdGhlXG4gICAgLy8gZG9jdW1lbnQgc3RhdGUuXG4gICAgcmVjb25uZWN0TGl2ZVZpZXdJZkRpc2Nvbm5lY3RlZCgpO1xuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICBpbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tIFwianMtYmFzZTY0XCI7XG4gIGltcG9ydCB7IEluZGV4ZWRkYlBlcnNpc3RlbmNlIH0gZnJvbSBcInktaW5kZXhlZGRiXCI7XG4gIGltcG9ydCAqIGFzIFkgZnJvbSBcInlqc1wiO1xuXG4gIGltcG9ydCB7IHNlbGVjdGVkTGlzdElkLCB1cmxIYXNoIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IHRvZG9MaXN0cywgdG9kb0l0ZW1zLCB5VG9kb0xpc3RzLCB5VG9kb0l0ZW1zIH0gZnJvbSBcIiRzdG9yZXMvY3JkdFN0YXRlXCI7XG4gIGltcG9ydCB7IGxpdmVWaWV3LCBzZXJ2ZXJEb2N1bWVudCB9IGZyb20gXCIkc3RvcmVzL2xpdmVWaWV3U29ja2V0XCI7XG4gIGltcG9ydCB7IHN5bmNTdGF0ZSB9IGZyb20gXCIkc3RvcmVzL3N5bmNTdGF0ZVwiO1xuXG4gIGltcG9ydCB7IGdldFBhcnNlZFZhbHVlRnJvbUxvY2FsU3RvcmFnZSB9IGZyb20gXCIuL0NsaWVudE9ubHlTdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlXCI7XG4gIGltcG9ydCB7IGluZGV4ZWREQk5hbWUgfSBmcm9tIFwiLi9EYXRhQ2xlYXJlci5zdmVsdGVcIjtcblxuICBpbXBvcnQgdHlwZSB7IFNlcnZlckRvY3VtZW50IH0gZnJvbSBcIiRzdG9yZXMvbGl2ZVZpZXdTb2NrZXRcIjtcblxuICBleHBvcnQgbGV0IGlzU3luY2VkVG9JbmRleGVkRGI6IGJvb2xlYW47XG5cbiAgY29uc3Qgc3RhdGVNYXAgPSBkb2MuZ2V0TWFwPFkuQXJyYXk8WS5NYXA8c3RyaW5nIHwgYm9vbGVhbj4+PigpO1xuICBjb25zdCBzeW5jU3RhdGVLZXkgPSBcInN5bmNTdGF0ZVwiO1xuICBsZXQgaW5kZXhlZERiUHJvdmlkZXI6IEluZGV4ZWRkYlBlcnNpc3RlbmNlO1xuXG4gIGZ1bmN0aW9uIHN5bmNXaXRoSW5kZXhlZERiKCkge1xuICAgIGluZGV4ZWREYlByb3ZpZGVyID0gbmV3IEluZGV4ZWRkYlBlcnNpc3RlbmNlKGluZGV4ZWREQk5hbWUsIGRvYyk7XG4gICAgaW5kZXhlZERiUHJvdmlkZXIub24oXCJzeW5jZWRcIiwgKCkgPT4ge1xuICAgICAgLy8gU3luYyBzdG9yZXMgd2l0aCBJbmRleGVkREIgc3RhdGUuXG4gICAgICAkeVRvZG9MaXN0cyA9IHN0YXRlTWFwLmdldChcImxpc3RzXCIpO1xuICAgICAgJHlUb2RvSXRlbXMgPSBzdGF0ZU1hcC5nZXQoXCJ0b2Rvc1wiKTtcbiAgICAgICR0b2RvTGlzdHMgPSAkeVRvZG9MaXN0cyA/ICR5VG9kb0xpc3RzLnRvSlNPTigpIDogW107XG4gICAgICAkdG9kb0l0ZW1zID0gJHlUb2RvSXRlbXMgPyAkeVRvZG9JdGVtcy50b0pTT04oKSA6IFtdO1xuXG4gICAgICBpc1N5bmNlZFRvSW5kZXhlZERiID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN5bmNTZXJ2ZXJUb0NsaWVudCh7IGV2ZW50LCBkb2N1bWVudCB9OiBTZXJ2ZXJEb2N1bWVudCkge1xuICAgIGlmIChldmVudCA9PT0gXCJtb3VudFwiKSByZXR1cm47XG5cbiAgICAvLyBJZiBubyBkb2N1bWVudCBzdGF0ZSBleGlzdHMgb24gc2VydmVyLCBjcmVhdGUgYSBuZXcgZG9jdW1lbnQgZnJvbSBjbGllbnRcbiAgICAvLyBzdGF0ZSBhbmQgc2F2ZSBpdCB0byB0aGUgc2VydmVyLlxuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgWWpzIGFycmF5cyBmb3IgbGlzdHMgYW5kIHRvZG9zIGlmIHRoZXkgZG9uJ3QgZXhpc3QuXG4gICAgICBpZiAoISR5VG9kb0xpc3RzICYmICEkeVRvZG9JdGVtcykge1xuICAgICAgICAkeVRvZG9MaXN0cyA9IG5ldyBZLkFycmF5KCk7XG4gICAgICAgIHN0YXRlTWFwLnNldChcImxpc3RzXCIsICR5VG9kb0xpc3RzKTtcblxuICAgICAgICAkeVRvZG9JdGVtcyA9IG5ldyBZLkFycmF5KCk7XG4gICAgICAgIHN0YXRlTWFwLnNldChcInRvZG9zXCIsICR5VG9kb0l0ZW1zKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2VuZCByZXF1ZXN0IHRvIHNlcnZlciB0byBjcmVhdGUgbmV3IGRvY3VtZW50IGZyb20gY2xpZW50IHN0YXRlLlxuICAgICAgJGxpdmVWaWV3LnB1c2hFdmVudChcbiAgICAgICAgXCJjcmVhdGVfc2VydmVyX2RvY3VtZW50XCIsXG4gICAgICAgIHsgZG9jdW1lbnQ6IGdldEJhc2U2NERvY3VtZW50KCkgfSxcbiAgICAgICAgY29uZmlybVN5bmNlZCxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBkb2N1bWVudCBzdGF0ZSBleGlzdHMgb24gc2VydmVyLCBtZXJnZSBpdCB3aXRoIGNsaWVudCBzdGF0ZS5cbiAgICBZLmFwcGx5VXBkYXRlKGRvYywgdG9VaW50OEFycmF5KGRvY3VtZW50KSk7XG4gICAgJHlUb2RvTGlzdHMgPSBzdGF0ZU1hcC5nZXQoXCJsaXN0c1wiKTtcbiAgICAkeVRvZG9JdGVtcyA9IHN0YXRlTWFwLmdldChcInRvZG9zXCIpO1xuICAgICR0b2RvTGlzdHMgPSAkeVRvZG9MaXN0cy50b0pTT04oKTtcbiAgICAkdG9kb0l0ZW1zID0gJHlUb2RvSXRlbXMudG9KU09OKCk7XG5cbiAgICAvLyBXaGVuIGNvbWluZyBiYWNrIG9ubGluZSwgc2VuZCBzdGF0ZSB0byBzZXJ2ZXIgc28gaXQgY2FuIGJlIGJyb2FkY2FzdGVkLlxuICAgIGlmIChldmVudCA9PT0gXCJyZXF1ZXN0X3NlcnZlcl9kb2N1bWVudFwiKSB7XG4gICAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB1cmwgaWYgbmVlZGVkLiBUaGlzIGlzIGZvciB0aGUgY2FzZSB3aGVyZSBhbiB1cGRhdGUgZGVsZXRlcyBhXG4gICAgLy8gbGlzdCB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyB2aWV3ZWQuXG4gICAgc3luY0FwcFN0YXRlV2l0aFVybCgpO1xuICB9XG5cbiAgLy8gR2V0IHByZXZpb3VzIHN5bmNTdGF0ZSBmcm9tIGxvY2FsU3RvcmFnZSBvbiBhcHAgcmVsb2Fkcy5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNTeW5jU3RhdGUgPSBnZXRQYXJzZWRWYWx1ZUZyb21Mb2NhbFN0b3JhZ2Uoc3luY1N0YXRlS2V5LCBcInN0cmluZ1wiLCAkc3luY1N0YXRlKTtcbiAgICAkc3luY1N0YXRlID0gcHJldmlvdXNTeW5jU3RhdGUgPT09IFwiU3luY2luZ1wiID8gXCJOb3QgU3luY2VkXCIgOiBwcmV2aW91c1N5bmNTdGF0ZTtcbiAgfSk7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgc3luY1dpdGhJbmRleGVkRGIoKTtcbiAgfSk7XG5cbiAgLy8gUmVxdWVzdCBzZXJ2ZXIgZG9jdW1lbnQgYWZ0ZXIgc3luY2luZyB3aXRoIEluZGV4ZWREQiBhbmQgd3MgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAgJDogaWYgKGlzU3luY2VkVG9JbmRleGVkRGIgJiYgJGxpdmVWaWV3KSB7XG4gICAgJGxpdmVWaWV3LnB1c2hFdmVudChcInJlcXVlc3Rfc2VydmVyX2RvY3VtZW50XCIpO1xuICB9XG5cbiAgLy8gU3luYyBzZXJ2ZXIgc3RhdGUgdG8gY2xpZW50IHdoZW5ldmVyIGEgbmV3IHNlcnZlckRvY3VtZW50IGlzIHJlY2VpdmVkLlxuICAkOiBpZiAoaXNTeW5jZWRUb0luZGV4ZWREYiAmJiAkbGl2ZVZpZXcpIHtcbiAgICBzeW5jU2VydmVyVG9DbGllbnQoJHNlcnZlckRvY3VtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBLZWVwICR1cmxIYXNoIGFuZCAkc2VsZWN0ZWRMaXN0SWQgaW4gc3luYyB3aXRoIHRoZSB1cmwuXG4gICAqL1xuICBmdW5jdGlvbiBzeW5jQXBwU3RhdGVXaXRoVXJsKCkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIGNvbnN0IGhhc2ggPSB1cmwuaGFzaDtcblxuICAgIHN3aXRjaCAoaGFzaCkge1xuICAgICAgY2FzZSBcIiNhYm91dFwiOlxuICAgICAgICAkdXJsSGFzaCA9IFwiYWJvdXRcIjtcbiAgICAgICAgJHNlbGVjdGVkTGlzdElkID0gXCJcIjtcbiAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIFwiXCIsIFwiL2FwcFwiKTtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIFwiXCIsIFwiL2FwcCNhYm91dFwiKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnN0IGxpc3RJZCA9IGhhc2gucmVwbGFjZShcIiNcIiwgXCJcIik7XG4gICAgICAgIGNvbnN0IGxpc3QgPSAkdG9kb0xpc3RzLmZpbmQoKGxpc3QpID0+IGxpc3QuaWQgPT09IGxpc3RJZCk7XG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgJHVybEhhc2ggPSBcImxpc3RJZFwiO1xuICAgICAgICAgICRzZWxlY3RlZExpc3RJZCA9IGxpc3RJZDtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgXCIvYXBwXCIpO1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBgL2FwcCMke2xpc3RJZH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkdXJsSGFzaCA9IFwiXCI7XG4gICAgICAgICAgJHNlbGVjdGVkTGlzdElkID0gXCJcIjtcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgXCIvYXBwXCIpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN5bmMgdXJsSGFzaCBhbmQgc2VsZWN0ZWRMaXN0SWQgd2l0aCB1cmwgb24gYXBwIHN0YXJ0LlxuICAvLyBOb3RlOiBUaGlzIG5lZWRzIHRvIGhhcHBlbiBhZnRlciBzeW5jaW5nIHRvIGluZGV4ZWREYlxuICAvLyBzbyB0aGF0ICR0b2RvTGlzdHMgaXMgcG9wdWxhdGVkLlxuICAkOiBpZiAoaXNTeW5jZWRUb0luZGV4ZWREYikgc3luY0FwcFN0YXRlV2l0aFVybCgpO1xuXG4gIC8vIFNldCBzY3JvbGwgcmVzdG9yYXRpb24gc28gcGFnZSBuYXYgdmlhIGJhY2svZm9yd2FyZCBidXR0b25zIHdvcmtzIGFzIGV4cGVjdGVkLlxuICAkOiBpZiAoaXNTeW5jZWRUb0luZGV4ZWREYikgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuXG4gIC8vIEtlZXAgc3luY1N0YXRlIHN0b3JlIGluIHN5bmMgd2l0aCBsb2NhbFN0b3JhZ2UgdG8gYWxsb3cgZm9yIHRoZSBzeW5jIGJhZGdlXG4gIC8vIHRvIGJlIHN5bmNlZCBhY3Jvc3MgdGFicyB3aGVuIG9mZmxpbmUuXG4gICQ6IGlmIChpc1N5bmNlZFRvSW5kZXhlZERiKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3luY1N0YXRlS2V5LCBKU09OLnN0cmluZ2lmeSgkc3luY1N0YXRlKSk7XG4gIH1cbjwvc2NyaXB0PlxuXG48c3ZlbHRlOndpbmRvd1xuICBvbjpwb3BzdGF0ZT17c3luY0FwcFN0YXRlV2l0aFVybH1cbiAgb246c3RvcmFnZT17YXN5bmMgKHsga2V5LCBuZXdWYWx1ZSB9KSA9PiB7XG4gICAgLy8gVGhlc2Ugc3RvcmFnZSBldmVudHMgYXJlIHVzZWQgdG8gc3luYyBzdGF0ZSBhY3Jvc3MgdGFicyB3aGVuIG9mZmxpbmUuXG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgY2xpZW50RG9jdW1lbnRVcGRhdGVkS2V5OlxuICAgICAgICAvLyBEaXNjb25uZWN0IGFuZCByZWNvbm5lY3QgdG8gaW5kZXhlZERiUHJvdmlkZXIgdG8gZm9yY2UgcmUtc3luY2luZ1xuICAgICAgICAvLyBJbmRleGVkREIgc3RhdGUgd2l0aCBhcHAgc3RvcmVzLlxuICAgICAgICAvLyBUT0RPOiBUaGVyZSBpcyBwcm9iYWJseSBhIGJldHRlciB3YXkgdG8gZG8gdGhpcy5cbiAgICAgICAgYXdhaXQgaW5kZXhlZERiUHJvdmlkZXIuZGVzdHJveSgpO1xuICAgICAgICBzeW5jV2l0aEluZGV4ZWREYigpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBzeW5jU3RhdGVLZXk6XG4gICAgICAgICRzeW5jU3RhdGUgPSBKU09OLnBhcnNlKG5ld1ZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9fVxuLz5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBDaXJjbGVBbGVydCwgQ2lyY2xlQ2hlY2tCaWcsIFJlZnJlc2hDdyB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgbGl2ZVZpZXcgfSBmcm9tIFwiJHN0b3Jlcy9saXZlVmlld1NvY2tldFwiO1xuICBpbXBvcnQgeyBzeW5jU3RhdGUgfSBmcm9tIFwiJHN0b3Jlcy9zeW5jU3RhdGVcIjtcbiAgaW1wb3J0IHsgc3luY0RvY3VtZW50VG9TZXJ2ZXIgfSBmcm9tIFwiLi9TdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlXCI7XG48L3NjcmlwdD5cblxuPGJ1dHRvblxuICBhcmlhLWxhYmVsPVwiU3luYyBTdGF0dXMuXCJcbiAgdGl0bGU9XCJDbGljayB0byBmb3JjZSBzeW5jLlwiXG4gIGNsYXNzPVwiXG4gICAgYmFkZ2Ugdy1bMTEzcHhdIGJvcmRlciBib3JkZXItbmV1dHJhbFxuICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICBcIlxuICBjbGFzczpiYWRnZS1hY2NlbnQ9eyRzeW5jU3RhdGUgPT09IFwiU3luY2VkXCJ9XG4gIGNsYXNzOmJhZGdlLXByaW1hcnk9eyRzeW5jU3RhdGUgPT09IFwiU3luY2luZ1wifVxuICBjbGFzczpiYWRnZS1zZWNvbmRhcnk9eyRzeW5jU3RhdGUgPT09IFwiTm90IFN5bmNlZFwifVxuICBkaXNhYmxlZD17JHN5bmNTdGF0ZSA9PT0gXCJTeW5jaW5nXCJ9XG4gIG9uOmNsaWNrPXsoKSA9PiBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpfVxuPlxuICA8ZGl2IGNsYXNzPVwiZmxleCBnYXAtWzVweF0gaXRlbXMtY2VudGVyXCI+XG4gICAgeyNpZiAkc3luY1N0YXRlID09PSBcIlN5bmNlZFwifVxuICAgICAgPENpcmNsZUNoZWNrQmlnIGNsYXNzPVwidy0zIGgtM1wiIC8+XG4gICAgezplbHNlIGlmICRzeW5jU3RhdGUgPT09IFwiU3luY2luZ1wifVxuICAgICAgPFJlZnJlc2hDdyBjbGFzcz1cInctMyBoLTMgYW5pbWF0ZS1zcGluXCIgLz5cbiAgICB7OmVsc2V9XG4gICAgICA8Q2lyY2xlQWxlcnQgY2xhc3M9XCJ3LTMgaC0zXCIgLz5cbiAgICB7L2lmfVxuXG4gICAgeyRzeW5jU3RhdGV9XG4gIDwvZGl2PlxuPC9idXR0b24+XG4iLCAiaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5cbmV4cG9ydCBjb25zdCBjdXJyZW50VGhlbWUgPSB3cml0YWJsZTxcInN5c3RlbVwiIHwgXCJsaWdodFwiIHwgXCJkYXJrXCI+KFwic3lzdGVtXCIpO1xuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCIgY29udGV4dD1cIm1vZHVsZVwiPlxuICBleHBvcnQgZnVuY3Rpb24gc2V0VGhlbWUodGhlbWU6IFwic3lzdGVtXCIgfCBcImxpZ2h0XCIgfCBcImRhcmtcIikge1xuICAgIGN1cnJlbnRUaGVtZS5zZXQodGhlbWUpO1xuXG4gICAgaWYgKHRoZW1lID09PSBcInN5c3RlbVwiKSB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10aGVtZVwiKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidGhlbWVcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtdGhlbWVcIiwgdGhlbWUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGhlbWVcIiwgSlNPTi5zdHJpbmdpZnkodGhlbWUpKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IENoZWNrLCBMYXB0b3AsIE1vb24sIFN1biB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG4gIGltcG9ydCB7IGN1cnJlbnRUaGVtZSB9IGZyb20gXCIkc3RvcmVzL2N1cnJlbnRUaGVtZVwiO1xuXG4gIGV4cG9ydCBsZXQgZm9jdXNJbmRleDogbnVtYmVyO1xuICBleHBvcnQgbGV0IHRoZW1lOiBcInN5c3RlbVwiIHwgXCJsaWdodFwiIHwgXCJkYXJrXCI7XG48L3NjcmlwdD5cblxuPGxpPlxuICA8YnV0dG9uXG4gICAgZGF0YS1mb2N1c2luZGV4PXtmb2N1c0luZGV4fVxuICAgIGNsYXNzPVwiZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXCJcbiAgICBvbjpjbGljaz17KCkgPT4gc2V0VGhlbWUodGhlbWUpfVxuICA+XG4gICAgeyNpZiB0aGVtZSA9PT0gXCJzeXN0ZW1cIn1cbiAgICAgIDxMYXB0b3AgY2xhc3M9XCJoLTQgdy00XCIgLz5cbiAgICB7OmVsc2UgaWYgdGhlbWUgPT09IFwibGlnaHRcIn1cbiAgICAgIDxTdW4gY2xhc3M9XCJoLTQgdy00XCIgLz5cbiAgICB7OmVsc2UgaWYgdGhlbWUgPT09IFwiZGFya1wifVxuICAgICAgPE1vb24gY2xhc3M9XCJoLTQgdy00XCIgLz5cbiAgICB7L2lmfVxuXG4gICAgPHNwYW4gY2xhc3M9XCJmaXJzdC1sZXR0ZXI6Y2FwaXRhbGl6ZVwiPnt0aGVtZX08L3NwYW4+XG5cbiAgICB7I2lmIHRoZW1lID09PSAkY3VycmVudFRoZW1lfVxuICAgICAgPENoZWNrIGNsYXNzPVwiaC00IHctNFwiIC8+XG4gICAgey9pZn1cbiAgPC9idXR0b24+XG48L2xpPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCB7IHNjYWxlIH0gZnJvbSBcInN2ZWx0ZS90cmFuc2l0aW9uXCI7XG4gIGltcG9ydCB7IFN3YXRjaEJvb2sgfSBmcm9tIFwibHVjaWRlLXN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB7IGZvY3VzVHJhcCB9IGZyb20gXCIkbGliL2FjdGlvbnMvZm9jdXNUcmFwXCI7XG5cbiAgaW1wb3J0IHsgb3BlbmVkTWVudUlkIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IGN1cnJlbnRUaGVtZSB9IGZyb20gXCIkc3RvcmVzL2N1cnJlbnRUaGVtZVwiO1xuICBpbXBvcnQgVGhlbWVDaG9pY2VCdXR0b24gZnJvbSBcIi4vVGhlbWVDaG9pY2VCdXR0b24uc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBtZW51Q2xhc3M6IHN0cmluZztcblxuICBjb25zdCB0aGVtZU1lbnVJZCA9IFwidGhlbWUtbWVudS1pZFwiO1xuICBsZXQgZm9jdXNGaXJzdEVsZW1lbnQgPSBmYWxzZTtcblxuICBvbk1vdW50KCgpID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0aGVtZVwiKSk7XG5cbiAgICBpZiAoIXRoZW1lKSB7XG4gICAgICAkY3VycmVudFRoZW1lID0gXCJzeXN0ZW1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgJGN1cnJlbnRUaGVtZSA9IHRoZW1lO1xuICAgIH1cbiAgfSk7XG5cbiAgJDogaWYgKCRvcGVuZWRNZW51SWQgIT09IHRoZW1lTWVudUlkKSB7XG4gICAgZm9jdXNGaXJzdEVsZW1lbnQgPSBmYWxzZTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ7bWVudUNsYXNzfSByZWxhdGl2ZVwiPlxuICA8YnV0dG9uXG4gICAgY2xhc3M9XCJcbiAgICAgIG15LTEgYnRuIGJ0bi1jaXJjbGUgYnRuLW5ldXRyYWxcbiAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICAgIFwiXG4gICAgYXJpYS1sYWJlbD1cIlRoZW1lIFNlbGVjdG9yLlwiXG4gICAgdGl0bGU9XCJDbGljayB0byBjaGFuZ2UgdGhlIHRoZW1lLlwiXG4gICAgb246Y2xpY2s9eygpID0+ICgkb3BlbmVkTWVudUlkID0gJG9wZW5lZE1lbnVJZCA9PT0gdGhlbWVNZW51SWQgPyBcIlwiIDogdGhlbWVNZW51SWQpfVxuICAgIG9uOmtleWRvd249eyhldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgZm9jdXNGaXJzdEVsZW1lbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH19XG4gID5cbiAgICA8U3dhdGNoQm9vayAvPlxuICA8L2J1dHRvbj5cblxuICB7I2lmICRvcGVuZWRNZW51SWQgPT09IHRoZW1lTWVudUlkfVxuICAgIDxkaXZcbiAgICAgIGluOnNjYWxlPXt7IGR1cmF0aW9uOiAxMDAgfX1cbiAgICAgIHVzZTpmb2N1c1RyYXA9e3tcbiAgICAgICAgZm9jdXNGaXJzdEVsZW1lbnQsXG4gICAgICAgIG9uRXNjYXBlOiAoKSA9PiAoJG9wZW5lZE1lbnVJZCA9IFwiXCIpLFxuICAgICAgfX1cbiAgICAgIGNsYXNzPVwibWVudSBiZy1iYXNlLTIwMCBib3JkZXIgYm9yZGVyLW5ldXRyYWwgcm91bmRlZC1ib3ggYWJzb2x1dGUgcmlnaHQtMFwiXG4gICAgPlxuICAgICAgPHAgY2xhc3M9XCJweC00IHB5LTIgZm9udC1ib2xkIGJvcmRlci1iIGJvcmRlci1uZXV0cmFsIHJvdW5kZWQtbm9uZSBtYi0xLjVcIj5UaGVtZTwvcD5cblxuICAgICAgPHVsIGNsYXNzPVwidy0zMlwiPlxuICAgICAgICA8VGhlbWVDaG9pY2VCdXR0b24gZm9jdXNJbmRleD17MH0gdGhlbWU9XCJzeXN0ZW1cIiAvPlxuICAgICAgICA8VGhlbWVDaG9pY2VCdXR0b24gZm9jdXNJbmRleD17MX0gdGhlbWU9XCJsaWdodFwiIC8+XG4gICAgICAgIDxUaGVtZUNob2ljZUJ1dHRvbiBmb2N1c0luZGV4PXsyfSB0aGVtZT1cImRhcmtcIiAvPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgey9pZn1cbjwvZGl2PlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCBBY2NvdW50QnV0dG9uIGZyb20gXCIuL0FjY291bnRCdXR0b24uc3ZlbHRlXCI7XG4gIGltcG9ydCBTZXNzaW9uc0JhZGdlIGZyb20gXCIuL1Nlc3Npb25zQmFkZ2Uuc3ZlbHRlXCI7XG4gIGltcG9ydCBTaGFyZUJ1dHRvbiBmcm9tIFwiLi9TaGFyZUJ1dHRvbi5zdmVsdGVcIjtcbiAgaW1wb3J0IFN5bmNTdGF0dXNCYWRnZSBmcm9tIFwiLi9TeW5jU3RhdHVzQmFkZ2Uuc3ZlbHRlXCI7XG4gIGltcG9ydCBUaGVtZUJ1dHRvbiBmcm9tIFwiLi9UaGVtZUJ1dHRvbi5zdmVsdGVcIjtcblxuICBleHBvcnQgbGV0IGN1cnJlbnRVc2VyRW1haWw6IHN0cmluZztcbiAgZXhwb3J0IGxldCBzZXJ2aWNlV29ya2VyVmVyc2lvbjogc3RyaW5nO1xuICBleHBvcnQgbGV0IGlzQ2xpZW50U3RhdGVSZXN0b3JlZDogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBtZW51Q2xhc3M6IHN0cmluZztcblxuICBsZXQgc2Nyb2xsWTogbnVtYmVyO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6d2luZG93IGJpbmQ6c2Nyb2xsWSAvPlxuXG48ZGl2XG4gIGNsYXNzPVwic3RpY2t5IHRvcC0wIGxlZnQtMCB3LWZ1bGwgcHQtMiBwYi0xIHotMTAgYmctYmFzZS0xMDAgYm9yZGVyLW5ldXRyYWxcIlxuICBjbGFzczpib3JkZXItYj17c2Nyb2xsWSA+IDB9XG4+XG4gIDxkaXYgY2xhc3M9XCJtYXgtdy0yeGwgbXgtYXV0byBweC0yIG1kOnAtMCBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICA8ZGl2PlxuICAgICAgPFN5bmNTdGF0dXNCYWRnZSAvPlxuICAgICAgPFNlc3Npb25zQmFkZ2UgLz5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtM1wiPlxuICAgICAgPFNoYXJlQnV0dG9uIC8+XG4gICAgICA8VGhlbWVCdXR0b24ge21lbnVDbGFzc30gLz5cbiAgICAgIDxBY2NvdW50QnV0dG9uXG4gICAgICAgIHtjdXJyZW50VXNlckVtYWlsfVxuICAgICAgICB7c2VydmljZVdvcmtlclZlcnNpb259XG4gICAgICAgIGJpbmQ6aXNDbGllbnRTdGF0ZVJlc3RvcmVkXG4gICAgICAgIHttZW51Q2xhc3N9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGV4cG9ydCBsZXQgaXNTeW5jZWRUb0luZGV4ZWREYjogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBpc0NsaWVudFN0YXRlUmVzdG9yZWQ6IGJvb2xlYW47XG4gIGV4cG9ydCBsZXQgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkOiBib29sZWFuO1xuXG4gIGNvbnN0IHNjcm9sbFBvc2l0aW9uS2V5ID0gXCJzY3JvbGxQb3NpdGlvblwiO1xuXG4gIGxldCBzY3JvbGxYOiBudW1iZXI7XG4gIGxldCBzY3JvbGxZOiBudW1iZXI7XG5cbiAgZnVuY3Rpb24gcmVzdG9yZVNjcm9sbFBvc2l0aW9uKCkge1xuICAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzY3JvbGxQb3NpdGlvbktleSk7XG4gICAgaWYgKCFzY3JvbGxQb3NpdGlvbikgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgeCwgeSB9ID0gSlNPTi5wYXJzZShzY3JvbGxQb3NpdGlvbik7XG4gICAgICBpZiAodHlwZW9mIHggIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHkgIT09IFwibnVtYmVyXCIpIHJldHVybjtcblxuICAgICAgd2luZG93LnNjcm9sbFRvKHgsIHkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmVzdG9yaW5nIHNjcm9sbCBwb3NpdGlvbi5cIiwgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uIEFGVEVSIHN0YXRlIGlzIHJlc3RvcmVkIHRvIGF2b2lkIGp1bXBpbmcgc2Nyb2xsIHBvc2l0aW9uLlxuICAkOiBpZiAoaXNTeW5jZWRUb0luZGV4ZWREYiAmJiBpc0NsaWVudFN0YXRlUmVzdG9yZWQpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbigpO1xuICAgICAgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkID0gdHJ1ZTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8vIEtlZXAgc2Nyb2xsIHBvc2l0aW9uIHN0b3JlZCBpbiBzZXNzaW9uU3RvcmFnZSBBRlRFUiByZXN0b3Jpbmcgc2Nyb2xsIHBvc2l0aW9uLlxuICAkOiBpZiAoaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkKSB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzY3JvbGxQb3NpdGlvbktleSwgSlNPTi5zdHJpbmdpZnkoeyB4OiBzY3JvbGxYLCB5OiBzY3JvbGxZIH0pKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6d2luZG93IGJpbmQ6c2Nyb2xsWCBiaW5kOnNjcm9sbFkgLz5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBBcnJvd0xlZnQgfSBmcm9tIFwibHVjaWRlLXN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB7IHNob3dUb3BCYXIgfSBmcm9tIFwiJGxpYi90b3BiYXJcIjtcblxuICBpbXBvcnQgdHlwZSB7IExpdmUgfSBmcm9tIFwibGl2ZV9zdmVsdGVcIjtcblxuICBleHBvcnQgbGV0IGxpdmU6IExpdmUgPSB1bmRlZmluZWQ7XG4gIGxpdmU7XG5cbiAgZXhwb3J0IGxldCBocmVmOiBzdHJpbmcgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCBsZXQgYXJpYUxhYmVsID0gXCJCYWNrXCI7XG4gIGV4cG9ydCBsZXQgc2hvd1RvcEJhck9uTmF2ID0gZmFsc2U7XG48L3NjcmlwdD5cblxueyNpZiBocmVmfVxuICA8YVxuICAgIHtocmVmfVxuICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICBjbGFzcz1cIlxuICAgICAgZmxleCByb3VuZGVkLWxnXG4gICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICBcIlxuICA+XG4gICAgPEFycm93TGVmdCBjbGFzcz1cImgtMTAgdy0xMFwiIHN0cm9rZVdpZHRoPXsxLjc1fSAvPlxuICA8L2E+XG57OmVsc2V9XG4gIDxidXR0b25cbiAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgdGl0bGU9e2FyaWFMYWJlbH1cbiAgICBjbGFzcz1cIlxuICAgICAgZmxleCByb3VuZGVkLWxnXG4gICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICBcIlxuICAgIG9uOmNsaWNrPXsoKSA9PiB7XG4gICAgICBpZiAoc2hvd1RvcEJhck9uTmF2KSB7XG4gICAgICAgIHNob3dUb3BCYXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhpc3RvcnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKFwiL2FwcFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpc3RvcnkuYmFjaygpO1xuICAgICAgfVxuICAgIH19XG4gID5cbiAgICA8QXJyb3dMZWZ0IGNsYXNzPVwiaC0xMCB3LTEwXCIgc3Ryb2tlV2lkdGg9ezEuNzV9IC8+XG4gIDwvYnV0dG9uPlxuey9pZn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgQmFjayBmcm9tIFwiLi9CYWNrLnN2ZWx0ZVwiO1xuXG4gIGxldCBzY3JvbGxZOiBudW1iZXI7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTp3aW5kb3cgYmluZDpzY3JvbGxZIC8+XG5cbjxkaXZcbiAgY2xhc3M9XCJzdGlja3kgdG9wLTAgbGVmdC0wIHctZnVsbCB6LTEwIGJhY2tkcm9wLWJsdXIgYm9yZGVyLW5ldXRyYWwgaC1bNjhweF1cIlxuICBjbGFzczpib3JkZXItYj17c2Nyb2xsWSA+IDB9XG4+XG4gIDxkaXYgY2xhc3M9XCJtYXgtdy0yeGwgbXgtYXV0byBweC0yIG1kOnAtMCBoLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICA8QmFjayAvPlxuICA8L2Rpdj5cbjwvZGl2PlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IHNldFRoZW1lIH0gZnJvbSBcIi4vVGhlbWVDaG9pY2VCdXR0b24uc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHR5cGUgeyBMaXZlIH0gZnJvbSBcImxpdmVfc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBsaXZlOiBMaXZlID0gdW5kZWZpbmVkO1xuICBsaXZlO1xuPC9zY3JpcHQ+XG5cbjwhLS0gS2VlcCB0aGVtZSBzeW5jZWQgd2hlbiB0aGVtZSBpcyB1cGRhdGVkIGluIGxvY2FsU3RvcmFnZSBvbiBhbm90aGVyXG50YWIvd2luZG93IG9mIHRoZSBzYW1lIGJyb3dzZXIuIC0tPlxuPHN2ZWx0ZTp3aW5kb3dcbiAgb246c3RvcmFnZT17KHsga2V5LCBuZXdWYWx1ZSB9KSA9PiB7XG4gICAgaWYgKGtleSAhPT0gXCJ0aGVtZVwiKSByZXR1cm47XG5cbiAgICBjb25zdCB0aGVtZSA9IEpTT04ucGFyc2UobmV3VmFsdWUpIHx8IFwic3lzdGVtXCI7XG4gICAgc2V0VGhlbWUodGhlbWUpO1xuICB9fVxuLz5cbiIsICJ0eXBlIENhbGxCYWNrRnVuY3Rpb24gPSAoZXZlbnQ6IFBvaW50ZXJFdmVudCkgPT4gdm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrT3V0c2lkZShlbGVtZW50OiBIVE1MRWxlbWVudCwgY2FsbGJhY2tGdW5jdGlvbjogQ2FsbEJhY2tGdW5jdGlvbikge1xuICBmdW5jdGlvbiBjbGlja091dHNpZGVIYW5kbGVyKGV2ZW50OiBQb2ludGVyRXZlbnQpIHtcbiAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBOb2RlKSkgcmV0dXJuO1xuXG4gICAgaWYgKCFlbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIGNhbGxiYWNrRnVuY3Rpb24oZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tPdXRzaWRlSGFuZGxlcik7XG4gIH0sIDApO1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlKG5ld0NhbGxiYWNrRnVuY3Rpb246IENhbGxCYWNrRnVuY3Rpb24pIHtcbiAgICAgIGNhbGxiYWNrRnVuY3Rpb24gPSBuZXdDYWxsYmFja0Z1bmN0aW9uO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tPdXRzaWRlSGFuZGxlcik7XG4gICAgfSxcbiAgfTtcbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmbHkgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgSW5mbywgVHJpYW5nbGVBbGVydCwgWCB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgY2xpY2tPdXRzaWRlIH0gZnJvbSBcIiRsaWIvYWN0aW9ucy9jbGlja091dHNpZGVcIjtcblxuICBpbXBvcnQgeyB0b2FzdCB9IGZyb20gXCIkc3RvcmVzL3RvYXN0XCI7XG5cbiAgZnVuY3Rpb24gZGlzbWlzc1RvYXN0KCkge1xuICAgICR0b2FzdCA9IHtcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAga2luZDogXCJpbmZvXCIsXG4gICAgICB0aXRsZTogXCJcIixcbiAgICAgIG1zZzogXCJcIixcbiAgICB9O1xuICB9XG48L3NjcmlwdD5cblxueyNpZiAkdG9hc3Quc2hvd31cbiAgPGRpdlxuICAgIHRyYW5zaXRpb246Zmx5PXt7IHg6IDUwIH19XG4gICAgcm9sZT1cImFsZXJ0XCJcbiAgICBjbGFzcz17YFxuICAgICAgZml4ZWQgdG9wLTIgcmlnaHQtMiBtci0yIHctODAgc206dy05NiB6LTUwIHJvdW5kZWQtbGcgcC0zIHNoYWRvdy1tZFxuICAgICAgJHskdG9hc3Qua2luZCA9PT0gXCJpbmZvXCIgJiYgXCJiZy1zdWNjZXNzIHRleHQtc3VjY2Vzcy1jb250ZW50IGZpbGwtc3VjY2Vzc1wifVxuICAgICAgJHskdG9hc3Qua2luZCA9PT0gXCJlcnJvclwiICYmIFwiYmctZXJyb3IgdGV4dC1lcnJvci1jb250ZW50IGZpbGwtZXJyb3JcIn1cbiAgICBgfVxuICAgIHVzZTpjbGlja091dHNpZGU9e2Rpc21pc3NUb2FzdH1cbiAgPlxuICAgIDxwIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEuNSB0ZXh0LXNtIGZvbnQtc2VtaWJvbGQgbGVhZGluZy02XCI+XG4gICAgICB7I2lmICR0b2FzdC5raW5kID09PSBcImluZm9cIn1cbiAgICAgICAgPEluZm8gY2xhc3M9XCJoLTQgdy00XCIgLz5cbiAgICAgIHs6ZWxzZSBpZiAkdG9hc3Qua2luZCA9PT0gXCJlcnJvclwifVxuICAgICAgICA8VHJpYW5nbGVBbGVydCBjbGFzcz1cImgtNCB3LTRcIiAvPlxuICAgICAgey9pZn1cblxuICAgICAgeyR0b2FzdC50aXRsZX1cbiAgICA8L3A+XG5cbiAgICA8cCBjbGFzcz1cIm10LTIgdGV4dC1zbSBsZWFkaW5nLTVcIj57JHRvYXN0Lm1zZ308L3A+XG5cbiAgICA8YnV0dG9uIGNsYXNzPVwiZ3JvdXAgYWJzb2x1dGUgdG9wLTEgcmlnaHQtMSBwLTJcIiBhcmlhLWxhYmVsPVwiY2xvc2VcIiBvbjpjbGljaz17ZGlzbWlzc1RvYXN0fT5cbiAgICAgIDxYIGNsYXNzPVwidy01IGgtNVwiIC8+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2Plxuey9pZn1cbiIsICJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX3MsIF9lO1xuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9hcnI7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07XG4gIGlmICghaXQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzOiBGLFxuICAgICAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgIGRpZEVyciA9IGZhbHNlLFxuICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCA9IGl0LmNhbGwobyk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0Lm5leHQoKTtcbiAgICAgIG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBkaWRFcnIgPSB0cnVlO1xuICAgICAgZXJyID0gZTtcbiAgICB9LFxuICAgIGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyBleHRlcm5hbCBldmVudHNcbnZhciBGSU5BTElaRV9FVkVOVF9OQU1FID0gXCJmaW5hbGl6ZVwiO1xudmFyIENPTlNJREVSX0VWRU5UX05BTUUgPSBcImNvbnNpZGVyXCI7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5mb1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHRyaWdnZXJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNvdXJjZVxuICogQHBhcmFtIHtOb2RlfSBlbFxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7SW5mb30gaW5mb1xuICovXG5mdW5jdGlvbiBkaXNwYXRjaEZpbmFsaXplRXZlbnQoZWwsIGl0ZW1zLCBpbmZvKSB7XG4gIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KEZJTkFMSVpFX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgIGluZm86IGluZm9cbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVzIGEgY29uc2lkZXIgZXZlbnRcbiAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hDb25zaWRlckV2ZW50KGVsLCBpdGVtcywgaW5mbykge1xuICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChDT05TSURFUl9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpdGVtczogaXRlbXMsXG4gICAgICBpbmZvOiBpbmZvXG4gICAgfVxuICB9KSk7XG59XG5cbi8vIGludGVybmFsIGV2ZW50c1xudmFyIERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FID0gXCJkcmFnZ2VkRW50ZXJlZFwiO1xudmFyIERSQUdHRURfTEVGVF9FVkVOVF9OQU1FID0gXCJkcmFnZ2VkTGVmdFwiO1xudmFyIERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FID0gXCJkcmFnZ2VkT3ZlckluZGV4XCI7XG52YXIgRFJBR0dFRF9MRUZUX0RPQ1VNRU5UX0VWRU5UX05BTUUgPSBcImRyYWdnZWRMZWZ0RG9jdW1lbnRcIjtcbnZhciBEUkFHR0VEX0xFRlRfVFlQRVMgPSB7XG4gIExFRlRfRk9SX0FOT1RIRVI6IFwibGVmdEZvckFub3RoZXJcIixcbiAgT1VUU0lERV9PRl9BTlk6IFwib3V0c2lkZU9mQW55XCJcbn07XG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRFbGVtZW50RW50ZXJlZENvbnRhaW5lcihjb250YWluZXJFbCwgaW5kZXhPYmosIGRyYWdnZWRFbCkge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgaW5kZXhPYmo6IGluZGV4T2JqLFxuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWxcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gY29udGFpbmVyRWwgLSB0aGUgZHJvcHpvbmUgdGhlIGVsZW1lbnQgbGVmdFxuICogQHBhcmFtIGRyYWdnZWRFbCAtIHRoZSBkcmFnZ2VkIGVsZW1lbnRcbiAqIEBwYXJhbSB0aGVPdGhlckR6IC0gdGhlIG5ldyBkcm9wem9uZSB0aGUgZWxlbWVudCBlbnRlcmVkXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yQW5vdGhlcihjb250YWluZXJFbCwgZHJhZ2dlZEVsLCB0aGVPdGhlckR6KSB7XG4gIGNvbnRhaW5lckVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbCxcbiAgICAgIHR5cGU6IERSQUdHRURfTEVGVF9UWVBFUy5MRUZUX0ZPUl9BTk9USEVSLFxuICAgICAgdGhlT3RoZXJEejogdGhlT3RoZXJEelxuICAgIH1cbiAgfSkpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudExlZnRDb250YWluZXJGb3JOb25lKGNvbnRhaW5lckVsLCBkcmFnZ2VkRWwpIHtcbiAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsLFxuICAgICAgdHlwZTogRFJBR0dFRF9MRUZUX1RZUEVTLk9VVFNJREVfT0ZfQU5ZXG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRFbGVtZW50SXNPdmVySW5kZXgoY29udGFpbmVyRWwsIGluZGV4T2JqLCBkcmFnZ2VkRWwpIHtcbiAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9PVkVSX0lOREVYX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGluZGV4T2JqOiBpbmRleE9iaixcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsXG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRMZWZ0RG9jdW1lbnQoZHJhZ2dlZEVsKSB7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWxcbiAgICB9XG4gIH0pKTtcbn1cblxudmFyIFRSSUdHRVJTID0ge1xuICBEUkFHX1NUQVJURUQ6IFwiZHJhZ1N0YXJ0ZWRcIixcbiAgRFJBR0dFRF9FTlRFUkVEOiBEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSxcbiAgRFJBR0dFRF9FTlRFUkVEX0FOT1RIRVI6IFwiZHJhZ0VudGVyZWRBbm90aGVyXCIsXG4gIERSQUdHRURfT1ZFUl9JTkRFWDogRFJBR0dFRF9PVkVSX0lOREVYX0VWRU5UX05BTUUsXG4gIERSQUdHRURfTEVGVDogRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUsXG4gIERSQUdHRURfTEVGVF9BTEw6IFwiZHJhZ2dlZExlZnRBbGxcIixcbiAgRFJPUFBFRF9JTlRPX1pPTkU6IFwiZHJvcHBlZEludG9ab25lXCIsXG4gIERST1BQRURfSU5UT19BTk9USEVSOiBcImRyb3BwZWRJbnRvQW5vdGhlclwiLFxuICBEUk9QUEVEX09VVFNJREVfT0ZfQU5ZOiBcImRyb3BwZWRPdXRzaWRlT2ZBbnlcIixcbiAgRFJBR19TVE9QUEVEOiBcImRyYWdTdG9wcGVkXCJcbn07XG52YXIgU09VUkNFUyA9IHtcbiAgUE9JTlRFUjogXCJwb2ludGVyXCIsXG4gIEtFWUJPQVJEOiBcImtleWJvYXJkXCJcbn07XG52YXIgU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUUgPSBcImlzRG5kU2hhZG93SXRlbVwiO1xudmFyIFNIQURPV19FTEVNRU5UX0FUVFJJQlVURV9OQU1FID0gXCJkYXRhLWlzLWRuZC1zaGFkb3ctaXRlbS1pbnRlcm5hbFwiO1xudmFyIFNIQURPV19FTEVNRU5UX0hJTlRfQVRUUklCVVRFX05BTUUgPSBcImRhdGEtaXMtZG5kLXNoYWRvdy1pdGVtLWhpbnRcIjtcbnZhciBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRCA9IFwiaWQ6ZG5kLXNoYWRvdy1wbGFjZWhvbGRlci0wMDAwXCI7XG52YXIgRFJBR0dFRF9FTEVNRU5UX0lEID0gXCJkbmQtYWN0aW9uLWRyYWdnZWQtZWxcIjtcbnZhciBJVEVNX0lEX0tFWSA9IFwiaWRcIjtcbnZhciBhY3RpdmVEbmRab25lQ291bnQgPSAwO1xuZnVuY3Rpb24gaW5jcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpIHtcbiAgYWN0aXZlRG5kWm9uZUNvdW50Kys7XG59XG5mdW5jdGlvbiBkZWNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCkge1xuICBpZiAoYWN0aXZlRG5kWm9uZUNvdW50ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnISB0cnlpbmcgdG8gZGVjcmVtZW50IHdoZW4gdGhlcmUgYXJlIG5vIGRyb3B6b25lc1wiKTtcbiAgfVxuICBhY3RpdmVEbmRab25lQ291bnQtLTtcbn1cblxuLyoqXG4gKiBBbGxvd3MgdXNpbmcgYW5vdGhlciBrZXkgaW5zdGVhZCBvZiBcImlkXCIgaW4gdGhlIGl0ZW1zIGRhdGEuIFRoaXMgaXMgZ2xvYmFsIGFuZCBhcHBsaWVzIHRvIGFsbCBkbmR6b25lcy5cbiAqIEhhcyB0byBiZSBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgbm8gcmVuZGVyZWQgZG5kem9uZXMgd2hhdHNvZXZlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuZXdLZXlOYW1lXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgaXQgd2FzIGNhbGxlZCB3aGVuIHRoZXJlIGFyZSByZW5kZXJlZCBkbmR6b25lcyBvciBpZiBpdCBpcyBnaXZlbiB0aGUgd3JvbmcgdHlwZSAobm90IGEgc3RyaW5nKVxuICovXG5mdW5jdGlvbiBvdmVycmlkZUl0ZW1JZEtleU5hbWVCZWZvcmVJbml0aWFsaXNpbmdEbmRab25lcyhuZXdLZXlOYW1lKSB7XG4gIGlmIChhY3RpdmVEbmRab25lQ291bnQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG9ubHkgb3ZlcnJpZGUgdGhlIGlkIGtleSBiZWZvcmUgaW5pdGlhbGlzaW5nIGFueSBkbmR6b25lXCIpO1xuICB9XG4gIGlmICh0eXBlb2YgbmV3S2V5TmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIml0ZW0gaWQga2V5IGhhcyB0byBiZSBhIHN0cmluZ1wiKTtcbiAgfVxuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wib3ZlcnJpZGluZyBpdGVtIGlkIGtleSBuYW1lXCIsIG5ld0tleU5hbWVdO1xuICB9KTtcbiAgSVRFTV9JRF9LRVkgPSBuZXdLZXlOYW1lO1xufVxudmFyIGlzT25TZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xudmFyIHByaW50RGVidWcgPSBmdW5jdGlvbiBwcmludERlYnVnKCkge307XG5cbi8qKlxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHNob3cvaGlkZSBjb25zb2xlIGRlYnVnIG91dHB1dFxuICogKiBAcGFyYW0ge2Jvb2xlYW59IGlzRGVidWdcbiAqL1xuZnVuY3Rpb24gc2V0RGVidWdNb2RlKGlzRGVidWcpIHtcbiAgaWYgKGlzRGVidWcpIHtcbiAgICBwcmludERlYnVnID0gZnVuY3Rpb24gcHJpbnREZWJ1ZyhnZW5lcmF0ZU1lc3NhZ2UpIHtcbiAgICAgIHZhciBsb2dGdW5jdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY29uc29sZS5kZWJ1ZztcbiAgICAgIHZhciBtZXNzYWdlID0gZ2VuZXJhdGVNZXNzYWdlKCk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICBsb2dGdW5jdGlvbi5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShtZXNzYWdlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dGdW5jdGlvbihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHByaW50RGVidWcgPSBmdW5jdGlvbiBwcmludERlYnVnKCkge307XG4gIH1cbn1cblxuLy8gVGhpcyBpcyBiYXNlZCBvZmYgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc3NDU0MzgvaG93LXRvLWNvbXB1dGUtZ2V0Ym91bmRpbmdjbGllbnRyZWN0LXdpdGhvdXQtY29uc2lkZXJpbmctdHJhbnNmb3Jtcy81Nzg3NjYwMSM1Nzg3NjYwMVxuLy8gSXQgcmVtb3ZlcyB0aGUgdHJhbnNmb3JtcyB0aGF0IGFyZSBwb3RlbnRpYWxseSBhcHBsaWVkIGJ5IHRoZSBmbGlwIGFuaW1hdGlvbnNcbi8qKlxuICogR2V0cyB0aGUgYm91bmRpbmcgcmVjdCBidXQgcmVtb3ZlcyB0cmFuc2Zvcm1zIChleDogZmxpcCBhbmltYXRpb24pXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdSZWN0Tm9UcmFuc2Zvcm1zKGVsKSB7XG4gIHZhciB0YTtcbiAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciB0eCA9IHN0eWxlLnRyYW5zZm9ybTtcbiAgaWYgKHR4KSB7XG4gICAgdmFyIHN4LCBzeSwgZHgsIGR5O1xuICAgIGlmICh0eC5zdGFydHNXaXRoKFwibWF0cml4M2QoXCIpKSB7XG4gICAgICB0YSA9IHR4LnNsaWNlKDksIC0xKS5zcGxpdCgvLCAvKTtcbiAgICAgIHN4ID0gK3RhWzBdO1xuICAgICAgc3kgPSArdGFbNV07XG4gICAgICBkeCA9ICt0YVsxMl07XG4gICAgICBkeSA9ICt0YVsxM107XG4gICAgfSBlbHNlIGlmICh0eC5zdGFydHNXaXRoKFwibWF0cml4KFwiKSkge1xuICAgICAgdGEgPSB0eC5zbGljZSg3LCAtMSkuc3BsaXQoLywgLyk7XG4gICAgICBzeCA9ICt0YVswXTtcbiAgICAgIHN5ID0gK3RhWzNdO1xuICAgICAgZHggPSArdGFbNF07XG4gICAgICBkeSA9ICt0YVs1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuICAgIHZhciB0byA9IHN0eWxlLnRyYW5zZm9ybU9yaWdpbjtcbiAgICB2YXIgeCA9IHJlY3QueCAtIGR4IC0gKDEgLSBzeCkgKiBwYXJzZUZsb2F0KHRvKTtcbiAgICB2YXIgeSA9IHJlY3QueSAtIGR5IC0gKDEgLSBzeSkgKiBwYXJzZUZsb2F0KHRvLnNsaWNlKHRvLmluZGV4T2YoXCIgXCIpICsgMSkpO1xuICAgIHZhciB3ID0gc3ggPyByZWN0LndpZHRoIC8gc3ggOiBlbC5vZmZzZXRXaWR0aDtcbiAgICB2YXIgaCA9IHN5ID8gcmVjdC5oZWlnaHQgLyBzeSA6IGVsLm9mZnNldEhlaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHksXG4gICAgICB3aWR0aDogdyxcbiAgICAgIGhlaWdodDogaCxcbiAgICAgIHRvcDogeSxcbiAgICAgIHJpZ2h0OiB4ICsgdyxcbiAgICAgIGJvdHRvbTogeSArIGgsXG4gICAgICBsZWZ0OiB4XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVjdDtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIGFic29sdXRlIGJvdW5kaW5nIHJlY3QgKGFjY291bnRzIGZvciB0aGUgd2luZG93J3Mgc2Nyb2xsIHBvc2l0aW9uIGFuZCByZW1vdmVzIHRyYW5zZm9ybXMpXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuZnVuY3Rpb24gZ2V0QWJzb2x1dGVSZWN0Tm9UcmFuc2Zvcm1zKGVsKSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdSZWN0Tm9UcmFuc2Zvcm1zKGVsKTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHJlY3QudG9wICsgd2luZG93LnNjcm9sbFksXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgd2luZG93LnNjcm9sbFhcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBhYnNvbHV0ZSBib3VuZGluZyByZWN0IChhY2NvdW50cyBmb3IgdGhlIHdpbmRvdydzIHNjcm9sbCBwb3NpdGlvbilcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHt7dG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHJpZ2h0OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBnZXRBYnNvbHV0ZVJlY3QoZWwpIHtcbiAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHJlY3QudG9wICsgd2luZG93LnNjcm9sbFksXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgd2luZG93LnNjcm9sbFhcbiAgfTtcbn1cblxuLyoqXG4gKiBmaW5kcyB0aGUgY2VudGVyIDopXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZWN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gdG9wXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm90dG9tXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJpZ2h0XG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEByZXR1cm4ge3t4OiBudW1iZXIsIHk6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGZpbmRDZW50ZXIocmVjdCkge1xuICByZXR1cm4ge1xuICAgIHg6IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIsXG4gICAgeTogKHJlY3QudG9wICsgcmVjdC5ib3R0b20pIC8gMlxuICB9O1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gKiBAcHJvcGVydHkge251bWJlcn0geFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50QVxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRCXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNhbGNEaXN0YW5jZShwb2ludEEsIHBvaW50Qikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50QS54IC0gcG9pbnRCLngsIDIpICsgTWF0aC5wb3cocG9pbnRBLnkgLSBwb2ludEIueSwgMikpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50XG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW58Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNQb2ludEluc2lkZVJlY3QocG9pbnQsIHJlY3QpIHtcbiAgcmV0dXJuIHBvaW50LnkgPD0gcmVjdC5ib3R0b20gJiYgcG9pbnQueSA+PSByZWN0LnRvcCAmJiBwb2ludC54ID49IHJlY3QubGVmdCAmJiBwb2ludC54IDw9IHJlY3QucmlnaHQ7XG59XG5cbi8qKlxuICogZmluZCB0aGUgYWJzb2x1dGUgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBvZiBhIGRvbSBlbGVtZW50XG4gKiBAcGFyYW0gZWwge0hUTUxFbGVtZW50fVxuICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGZpbmRDZW50ZXJPZkVsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIGZpbmRDZW50ZXIoZ2V0QWJzb2x1dGVSZWN0KGVsKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxBXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbEJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzQ2VudGVyT2ZBSW5zaWRlQihlbEEsIGVsQikge1xuICB2YXIgY2VudGVyT2ZBID0gZmluZENlbnRlck9mRWxlbWVudChlbEEpO1xuICB2YXIgcmVjdE9mQiA9IGdldEFic29sdXRlUmVjdE5vVHJhbnNmb3JtcyhlbEIpO1xuICByZXR1cm4gaXNQb2ludEluc2lkZVJlY3QoY2VudGVyT2ZBLCByZWN0T2ZCKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fENoaWxkTm9kZX0gZWxBXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fENoaWxkTm9kZX0gZWxCXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNhbGNEaXN0YW5jZUJldHdlZW5DZW50ZXJzKGVsQSwgZWxCKSB7XG4gIHZhciBjZW50ZXJPZkEgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsQSk7XG4gIHZhciBjZW50ZXJPZkIgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsQik7XG4gIHJldHVybiBjYWxjRGlzdGFuY2UoY2VudGVyT2ZBLCBjZW50ZXJPZkIpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIC0gdGhlIGVsZW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSAtIHRydWUgaWYgdGhlIGVsZW1lbnQgaW4gaXRzIGVudGlyZXR5IGlzIG9mZi1zY3JlZW4gaW5jbHVkaW5nIHRoZSBzY3JvbGxhYmxlIGFyZWEgKHRoZSBub3JtYWwgZG9tIGV2ZW50cyBsb29rIGF0IHRoZSBtb3VzZSByYXRoZXIgdGhhbiB0aGUgZWxlbWVudClcbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50T2ZmRG9jdW1lbnQoZWwpIHtcbiAgdmFyIHJlY3QgPSBnZXRBYnNvbHV0ZVJlY3QoZWwpO1xuICByZXR1cm4gcmVjdC5yaWdodCA8IDAgfHwgcmVjdC5sZWZ0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoIHx8IHJlY3QuYm90dG9tIDwgMCB8fCByZWN0LnRvcCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XG59XG5cbnZhciBkelRvU2hhZG93SW5kZXhUb1JlY3Q7XG5cbi8qKlxuICogUmVzZXRzIHRoZSBjYWNoZSB0aGF0IGFsbG93cyBmb3Igc21hcnRlciBcIndvdWxkIGJlIGluZGV4XCIgcmVzb2x1dGlvbi4gU2hvdWxkIGJlIGNhbGxlZCBhZnRlciBldmVyeSBkcmFnIG9wZXJhdGlvblxuICovXG5mdW5jdGlvbiByZXNldEluZGV4ZXNDYWNoZSgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVzZXR0aW5nIGluZGV4ZXMgY2FjaGVcIjtcbiAgfSk7XG4gIGR6VG9TaGFkb3dJbmRleFRvUmVjdCA9IG5ldyBNYXAoKTtcbn1cbnJlc2V0SW5kZXhlc0NhY2hlKCk7XG5cbi8qKlxuICogQ2FjaGVzIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgc2hhZG93IGVsZW1lbnQgd2hlbiBpdCdzIGluIGEgY2VydGFpbiBpbmRleCBpbiBhIGNlcnRhaW4gZHJvcHpvbmUuXG4gKiBIZWxwZnVsIGluIG9yZGVyIHRvIGRldGVybWluZSBcIndvdWxkIGJlIGluZGV4XCIgbW9yZSBlZmZlY3RpdmVseVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHpcbiAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgc2hhZG93IGVsZW1lbnQgaW5kZXhcbiAqL1xuZnVuY3Rpb24gY2FjaGVTaGFkb3dSZWN0KGR6KSB7XG4gIHZhciBzaGFkb3dFbEluZGV4ID0gQXJyYXkuZnJvbShkei5jaGlsZHJlbikuZmluZEluZGV4KGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5nZXRBdHRyaWJ1dGUoU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUpO1xuICB9KTtcbiAgaWYgKHNoYWRvd0VsSW5kZXggPj0gMCkge1xuICAgIGlmICghZHpUb1NoYWRvd0luZGV4VG9SZWN0LmhhcyhkeikpIHtcbiAgICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5zZXQoZHosIG5ldyBNYXAoKSk7XG4gICAgfVxuICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5nZXQoZHopLnNldChzaGFkb3dFbEluZGV4LCBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZHouY2hpbGRyZW5bc2hhZG93RWxJbmRleF0pKTtcbiAgICByZXR1cm4gc2hhZG93RWxJbmRleDtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluZGV4XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW5kZXggLSB0aGUgd291bGQgYmUgaW5kZXhcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNQcm94aW1pdHlCYXNlZCAtIGZhbHNlIGlmIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IG92ZXIgdGhlIGluZGV4LCB0cnVlIGlmIGl0IGlzIG5vdCBvdmVyIGl0IGJ1dCB0aGlzIGluZGV4IGlzIHRoZSBjbG9zZXN0XG4gKi9cbi8qKlxuICogRmluZCB0aGUgaW5kZXggZm9yIHRoZSBkcmFnZ2VkIGVsZW1lbnQgaW4gdGhlIGxpc3QgaXQgaXMgZHJhZ2dlZCBvdmVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmbG9hdGluZ0Fib3ZlRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbGxlY3Rpb25CZWxvd0VsXG4gKiBAcmV0dXJucyB7SW5kZXh8bnVsbH0gLSAgaWYgdGhlIGVsZW1lbnQgaXMgb3ZlciB0aGUgY29udGFpbmVyIHRoZSBJbmRleCBvYmplY3Qgb3RoZXJ3aXNlIG51bGxcbiAqL1xuZnVuY3Rpb24gZmluZFdvdWxkQmVJbmRleChmbG9hdGluZ0Fib3ZlRWwsIGNvbGxlY3Rpb25CZWxvd0VsKSB7XG4gIGlmICghaXNDZW50ZXJPZkFJbnNpZGVCKGZsb2F0aW5nQWJvdmVFbCwgY29sbGVjdGlvbkJlbG93RWwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gY29sbGVjdGlvbkJlbG93RWwuY2hpbGRyZW47XG4gIC8vIHRoZSBjb250YWluZXIgaXMgZW1wdHksIGZsb2F0aW5nIGVsZW1lbnQgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgaXNQcm94aW1pdHlCYXNlZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgdmFyIHNoYWRvd0VsSW5kZXggPSBjYWNoZVNoYWRvd1JlY3QoY29sbGVjdGlvbkJlbG93RWwpO1xuXG4gIC8vIHRoZSBzZWFyY2ggY291bGQgYmUgbW9yZSBlZmZpY2llbnQgYnV0IGtlZXBpbmcgaXQgc2ltcGxlIGZvciBub3dcbiAgLy8gYSBwb3NzaWJsZSBpbXByb3ZlbWVudDogcGFzcyBpbiB0aGUgbGFzdEluZGV4IGl0IHdhcyBmb3VuZCBpbiBhbmQgY2hlY2sgdGhlcmUgZmlyc3QsIHRoZW4gZXhwYW5kIGZyb20gdGhlcmVcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0NlbnRlck9mQUluc2lkZUIoZmxvYXRpbmdBYm92ZUVsLCBjaGlsZHJlbltpXSkpIHtcbiAgICAgIHZhciBjYWNoZWRTaGFkb3dSZWN0ID0gZHpUb1NoYWRvd0luZGV4VG9SZWN0Lmhhcyhjb2xsZWN0aW9uQmVsb3dFbCkgJiYgZHpUb1NoYWRvd0luZGV4VG9SZWN0LmdldChjb2xsZWN0aW9uQmVsb3dFbCkuZ2V0KGkpO1xuICAgICAgaWYgKGNhY2hlZFNoYWRvd1JlY3QpIHtcbiAgICAgICAgaWYgKCFpc1BvaW50SW5zaWRlUmVjdChmaW5kQ2VudGVyT2ZFbGVtZW50KGZsb2F0aW5nQWJvdmVFbCksIGNhY2hlZFNoYWRvd1JlY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBzaGFkb3dFbEluZGV4LFxuICAgICAgICAgICAgaXNQcm94aW1pdHlCYXNlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgaXNQcm94aW1pdHlCYXNlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIC8vIHRoaXMgY2FuIGhhcHBlbiBpZiB0aGVyZSBpcyBzcGFjZSBhcm91bmQgdGhlIGNoaWxkcmVuIHNvIHRoZSBmbG9hdGluZyBlbGVtZW50IGhhc1xuICAvL2VudGVyZWQgdGhlIGNvbnRhaW5lciBidXQgbm90IGFueSBvZiB0aGUgY2hpbGRyZW4sIGluIHRoaXMgY2FzZSB3ZSB3aWxsIGZpbmQgdGhlIG5lYXJlc3QgY2hpbGRcbiAgdmFyIG1pbkRpc3RhbmNlU29GYXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB2YXIgaW5kZXhPZk1pbiA9IHVuZGVmaW5lZDtcbiAgLy8gd2UgYXJlIGNoZWNraW5nIGFsbCBvZiB0aGVtIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyB3aGV0aGVyIHdlIGFyZSBkZWFsaW5nIHdpdGggYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIGNvbnRhaW5lciBhbmQgd2hlcmUgdGhlIGZsb2F0aW5nIGVsZW1lbnQgZW50ZXJlZCBmcm9tXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBjaGlsZHJlbi5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgZGlzdGFuY2UgPSBjYWxjRGlzdGFuY2VCZXR3ZWVuQ2VudGVycyhmbG9hdGluZ0Fib3ZlRWwsIGNoaWxkcmVuW19pXSk7XG4gICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2VTb0Zhcikge1xuICAgICAgbWluRGlzdGFuY2VTb0ZhciA9IGRpc3RhbmNlO1xuICAgICAgaW5kZXhPZk1pbiA9IF9pO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleE9mTWluLFxuICAgIGlzUHJveGltaXR5QmFzZWQ6IHRydWVcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKG9iamVjdCkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0LCBudWxsLCAyKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZGVwdGggb2YgdGhlIGdpdmVuIG5vZGUgaW4gdGhlIERPTSB0cmVlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gdGhlIGRlcHRoIG9mIHRoZSBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldERlcHRoKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGdldCBkZXB0aCBvZiBhIGZhbHN5IG5vZGVcIik7XG4gIH1cbiAgcmV0dXJuIF9nZXREZXB0aChub2RlLCAwKTtcbn1cbmZ1bmN0aW9uIF9nZXREZXB0aChub2RlKSB7XG4gIHZhciBjb3VudFNvRmFyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICBpZiAoIW5vZGUucGFyZW50RWxlbWVudCkge1xuICAgIHJldHVybiBjb3VudFNvRmFyIC0gMTtcbiAgfVxuICByZXR1cm4gX2dldERlcHRoKG5vZGUucGFyZW50RWxlbWVudCwgY291bnRTb0ZhciArIDEpO1xufVxuXG4vKipcbiAqIEEgc2ltcGxlIHV0aWwgdG8gc2hhbGxvdyBjb21wYXJlIG9iamVjdHMgcXVpY2tseSwgaXQgZG9lc24ndCB2YWxpZGF0ZSB0aGUgYXJndW1lbnRzIHNvIHBhc3Mgb2JqZWN0cyBpblxuICogQHBhcmFtIHtPYmplY3R9IG9iakFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpCXG4gKiBAcmV0dXJuIHtib29sZWFufSAtIHRydWUgaWYgb2JqQSBhbmQgb2JqQiBhcmUgc2hhbGxvdyBlcXVhbFxuICovXG5mdW5jdGlvbiBhcmVPYmplY3RzU2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKE9iamVjdC5rZXlzKG9iakEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob2JqQikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAodmFyIGtleUEgaW4gb2JqQSkge1xuICAgIGlmICghe30uaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlBKSB8fCBvYmpCW2tleUFdICE9PSBvYmpBW2tleUFdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFNoYWxsb3cgY29tcGFyZXMgdHdvIGFycmF5c1xuICogQHBhcmFtIGFyckFcbiAqIEBwYXJhbSBhcnJCXG4gKiBAcmV0dXJuIHtib29sZWFufSAtIHdoZXRoZXIgdGhlIGFycmF5cyBhcmUgc2hhbGxvdyBlcXVhbFxuICovXG5mdW5jdGlvbiBhcmVBcnJheXNTaGFsbG93RXF1YWxTYW1lT3JkZXIoYXJyQSwgYXJyQikge1xuICBpZiAoYXJyQS5sZW5ndGggIT09IGFyckIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyQS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJBW2ldICE9PSBhcnJCW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgSU5URVJWQUxfTVMgPSAyMDA7XG52YXIgVE9MRVJBTkNFX1BYID0gMTA7XG52YXIgbmV4dDtcblxuLyoqXG4gKiBUcmFja3MgdGhlIGRyYWdnZWQgZWxlbWVudHMgYW5kIHBlcmZvcm1zIHRoZSBzaWRlIGVmZmVjdHMgd2hlbiBpdCBpcyBkcmFnZ2VkIG92ZXIgYSBkcm9wIHpvbmUgKGJhc2ljYWxseSBkaXNwYXRjaGluZyBjdXN0b20tZXZlbnRzIHNjcm9sbGluZylcbiAqIEBwYXJhbSB7U2V0PEhUTUxFbGVtZW50Pn0gZHJvcFpvbmVzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnZ2VkRWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZXJ2YWxNcyA9IElOVEVSVkFMX01TXVxuICogQHBhcmFtIHtNdWx0aVNjcm9sbGVyfSBtdWx0aVNjcm9sbGVyXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmUoZHJhZ2dlZEVsLCBkcm9wWm9uZXMpIHtcbiAgdmFyIGludGVydmFsTXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IElOVEVSVkFMX01TO1xuICB2YXIgbXVsdGlTY3JvbGxlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICAvLyBpbml0aWFsaXphdGlvblxuICB2YXIgbGFzdERyb3Bab25lRm91bmQ7XG4gIHZhciBsYXN0SW5kZXhGb3VuZDtcbiAgdmFyIGxhc3RJc0RyYWdnZWRJbkFEcm9wWm9uZSA9IGZhbHNlO1xuICB2YXIgbGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkO1xuICAvLyBXZSBhcmUgc29ydGluZyB0byBtYWtlIHN1cmUgdGhhdCBpbiBjYXNlIG9mIG5lc3RlZCB6b25lcyBvZiB0aGUgc2FtZSB0eXBlIHRoZSBvbmUgXCJvbiB0b3BcIiBpcyBjb25zaWRlcmVkIGZpcnN0XG4gIHZhciBkcm9wWm9uZXNGcm9tRGVlcFRvU2hhbGxvdyA9IEFycmF5LmZyb20oZHJvcFpvbmVzKS5zb3J0KGZ1bmN0aW9uIChkejEsIGR6Mikge1xuICAgIHJldHVybiBnZXREZXB0aChkejIpIC0gZ2V0RGVwdGgoZHoxKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIGZ1bmN0aW9uIGluIHRoaXMgbW9kdWxlLiBUcmFja3Mgd2hlcmUgZXZlcnl0aGluZyBpcy8gc2hvdWxkIGJlIGEgdGFrZSB0aGUgYWN0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gYW5kTm93KCkge1xuICAgIHZhciBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkID0gZmluZENlbnRlck9mRWxlbWVudChkcmFnZ2VkRWwpO1xuICAgIHZhciBzY3JvbGxlZCA9IG11bHRpU2Nyb2xsZXIubXVsdGlTY3JvbGxJZk5lZWRlZCgpO1xuICAgIC8vIHdlIG9ubHkgd2FudCB0byBtYWtlIGEgbmV3IGRlY2lzaW9uIGFmdGVyIHRoZSBlbGVtZW50IHdhcyBtb3ZlZCBhIGJpdCB0byBwcmV2ZW50IGZsaWNrZXJpbmdcbiAgICBpZiAoIXNjcm9sbGVkICYmIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZCAmJiBNYXRoLmFicyhsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQueCAtIGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQueCkgPCBUT0xFUkFOQ0VfUFggJiYgTWF0aC5hYnMobGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkLnkgLSBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkLnkpIDwgVE9MRVJBTkNFX1BYKSB7XG4gICAgICBuZXh0ID0gd2luZG93LnNldFRpbWVvdXQoYW5kTm93LCBpbnRlcnZhbE1zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudE9mZkRvY3VtZW50KGRyYWdnZWRFbCkpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJvZmYgZG9jdW1lbnRcIjtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2hEcmFnZ2VkTGVmdERvY3VtZW50KGRyYWdnZWRFbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZCA9IGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQ7XG4gICAgLy8gdGhpcyBpcyBhIHNpbXBsZSBhbGdvcml0aG0sIHBvdGVudGlhbCBpbXByb3ZlbWVudDogZmlyc3QgbG9vayBhdCBsYXN0RHJvcFpvbmVGb3VuZFxuICAgIHZhciBpc0RyYWdnZWRJbkFEcm9wWm9uZSA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkcm9wWm9uZXNGcm9tRGVlcFRvU2hhbGxvdyksXG4gICAgICBfc3RlcDtcbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGR6ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIGlmIChzY3JvbGxlZCkgcmVzZXRJbmRleGVzQ2FjaGUoKTtcbiAgICAgICAgdmFyIGluZGV4T2JqID0gZmluZFdvdWxkQmVJbmRleChkcmFnZ2VkRWwsIGR6KTtcbiAgICAgICAgaWYgKGluZGV4T2JqID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gaXQgaXMgbm90IGluc2lkZVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4T2JqLmluZGV4O1xuICAgICAgICBpc0RyYWdnZWRJbkFEcm9wWm9uZSA9IHRydWU7XG4gICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIG92ZXIgYSBjb250YWluZXJcbiAgICAgICAgaWYgKGR6ICE9PSBsYXN0RHJvcFpvbmVGb3VuZCkge1xuICAgICAgICAgIGxhc3REcm9wWm9uZUZvdW5kICYmIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yQW5vdGhlcihsYXN0RHJvcFpvbmVGb3VuZCwgZHJhZ2dlZEVsLCBkeik7XG4gICAgICAgICAgZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudEVudGVyZWRDb250YWluZXIoZHosIGluZGV4T2JqLCBkcmFnZ2VkRWwpO1xuICAgICAgICAgIGxhc3REcm9wWm9uZUZvdW5kID0gZHo7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggIT09IGxhc3RJbmRleEZvdW5kKSB7XG4gICAgICAgICAgZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudElzT3ZlckluZGV4KGR6LCBpbmRleE9iaiwgZHJhZ2dlZEVsKTtcbiAgICAgICAgICBsYXN0SW5kZXhGb3VuZCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGhhbmRsZSBsb29waW5nIHdpdGggdGhlICdjb250aW51ZScgc3RhdGVtZW50IGFib3ZlXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gdGhlIGZpcnN0IHRpbWUgdGhlIGRyYWdnZWQgZWxlbWVudCBpcyBub3QgaW4gYW55IGRyb3B6b25lIHdlIG5lZWQgdG8gbm90aWZ5IHRoZSBsYXN0IGRyb3B6b25lIGl0IHdhcyBpblxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2l0ZXJhdG9yLmYoKTtcbiAgICB9XG4gICAgaWYgKCFpc0RyYWdnZWRJbkFEcm9wWm9uZSAmJiBsYXN0SXNEcmFnZ2VkSW5BRHJvcFpvbmUgJiYgbGFzdERyb3Bab25lRm91bmQpIHtcbiAgICAgIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yTm9uZShsYXN0RHJvcFpvbmVGb3VuZCwgZHJhZ2dlZEVsKTtcbiAgICAgIGxhc3REcm9wWm9uZUZvdW5kID0gdW5kZWZpbmVkO1xuICAgICAgbGFzdEluZGV4Rm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICBsYXN0SXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lID0gdHJ1ZTtcbiAgICB9XG4gICAgbmV4dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGFuZE5vdywgaW50ZXJ2YWxNcyk7XG4gIH1cbiAgYW5kTm93KCk7XG59XG5cbi8vIGFzc3VtcHRpb24gLSB3ZSBjYW4gb25seSBvYnNlcnZlIG9uZSBkcmFnZ2VkIGVsZW1lbnQgYXQgYSB0aW1lLCB0aGlzIGNvdWxkIGJlIGNoYW5nZWQgaW4gdGhlIGZ1dHVyZVxuZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ1bm9ic2VydmluZ1wiO1xuICB9KTtcbiAgY2xlYXJUaW1lb3V0KG5leHQpO1xuICByZXNldEluZGV4ZXNDYWNoZSgpO1xufVxuXG52YXIgU0NST0xMX1pPTkVfUFggPSAzMDtcblxuLyoqXG4gKiBXaWxsIG1ha2UgYSBzY3JvbGxlciB0aGF0IGNhbiBzY3JvbGwgYW55IGVsZW1lbnQgZ2l2ZW4gdG8gaXQgaW4gYW55IGRpcmVjdGlvblxuICogQHJldHVybnMge3tzY3JvbGxJZk5lZWRlZDogZnVuY3Rpb24oUG9pbnQsIEhUTUxFbGVtZW50KTogYm9vbGVhbiwgcmVzZXRTY3JvbGxpbmc6IGZ1bmN0aW9uKHZvaWQpOnZvaWR9fVxuICovXG5mdW5jdGlvbiBtYWtlU2Nyb2xsZXIoKSB7XG4gIHZhciBzY3JvbGxpbmdJbmZvO1xuICBmdW5jdGlvbiByZXNldFNjcm9sbGluZygpIHtcbiAgICBzY3JvbGxpbmdJbmZvID0ge1xuICAgICAgZGlyZWN0aW9uT2JqOiB1bmRlZmluZWQsXG4gICAgICBzdGVwUHg6IDBcbiAgICB9O1xuICB9XG4gIHJlc2V0U2Nyb2xsaW5nKCk7XG4gIC8vIGRpcmVjdGlvbk9iaiB7eDogMHwxfC0xLCB5OjB8MXwtMX0gLSAxIG1lYW5zIGRvd24gaW4geSBhbmQgcmlnaHQgaW4geFxuICBmdW5jdGlvbiBzY3JvbGxDb250YWluZXIoY29udGFpbmVyRWwpIHtcbiAgICB2YXIgX3Njcm9sbGluZ0luZm8gPSBzY3JvbGxpbmdJbmZvLFxuICAgICAgZGlyZWN0aW9uT2JqID0gX3Njcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqLFxuICAgICAgc3RlcFB4ID0gX3Njcm9sbGluZ0luZm8uc3RlcFB4O1xuICAgIGlmIChkaXJlY3Rpb25PYmopIHtcbiAgICAgIGNvbnRhaW5lckVsLnNjcm9sbEJ5KGRpcmVjdGlvbk9iai54ICogc3RlcFB4LCBkaXJlY3Rpb25PYmoueSAqIHN0ZXBQeCk7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lcihjb250YWluZXJFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZVB4KSB7XG4gICAgcmV0dXJuIFNDUk9MTF9aT05FX1BYIC0gZGlzdGFuY2VQeDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50fSBwb2ludGVyIC0gdGhlIHBvaW50ZXIgd2lsbCBiZSB1c2VkIHRvIGRlY2lkZSBpbiB3aGljaCBkaXJlY3Rpb24gdG8gc2Nyb2xsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRUb1Njcm9sbCAtIHRoZSBzY3JvbGwgY29udGFpbmVyXG4gICAqIElmIHRoZSBwb2ludGVyIGlzIG5leHQgdG8gdGhlIHNpZGVzIG9mIHRoZSBlbGVtZW50IHRvIHNjcm9sbCwgd2lsbCB0cmlnZ2VyIHNjcm9sbGluZ1xuICAgKiBDYW4gYmUgY2FsbGVkIHJlcGVhdGVkbHkgd2l0aCB1cGRhdGVkIHBvaW50ZXIgYW5kIGVsZW1lbnRUb1Njcm9sbCB2YWx1ZXMgd2l0aG91dCBpc3N1ZXNcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSB0cnVlIGlmIHNjcm9sbGluZyB3YXMgbmVlZGVkXG4gICAqL1xuICBmdW5jdGlvbiBzY3JvbGxJZk5lZWRlZChwb2ludGVyLCBlbGVtZW50VG9TY3JvbGwpIHtcbiAgICBpZiAoIWVsZW1lbnRUb1Njcm9sbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZGlzdGFuY2VzID0gY2FsY0lubmVyRGlzdGFuY2VzQmV0d2VlblBvaW50QW5kU2lkZXNPZkVsZW1lbnQocG9pbnRlciwgZWxlbWVudFRvU2Nyb2xsKTtcbiAgICB2YXIgaXNBbHJlYWR5U2Nyb2xsaW5nID0gISFzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iajtcbiAgICBpZiAoZGlzdGFuY2VzID09PSBudWxsKSB7XG4gICAgICBpZiAoaXNBbHJlYWR5U2Nyb2xsaW5nKSByZXNldFNjcm9sbGluZygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgc2Nyb2xsaW5nVmVydGljYWxseSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gZmFsc2U7XG4gICAgLy8gdmVydGljYWxcbiAgICBpZiAoZWxlbWVudFRvU2Nyb2xsLnNjcm9sbEhlaWdodCA+IGVsZW1lbnRUb1Njcm9sbC5jbGllbnRIZWlnaHQpIHtcbiAgICAgIGlmIChkaXN0YW5jZXMuYm90dG9tIDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nVmVydGljYWxseSA9IHRydWU7XG4gICAgICAgIHNjcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqID0ge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMVxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLmJvdHRvbSk7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlcy50b3AgPCBTQ1JPTExfWk9ORV9QWCkge1xuICAgICAgICBzY3JvbGxpbmdWZXJ0aWNhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAtMVxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLnRvcCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQWxyZWFkeVNjcm9sbGluZyAmJiBzY3JvbGxpbmdWZXJ0aWNhbGx5KSB7XG4gICAgICAgIHNjcm9sbENvbnRhaW5lcihlbGVtZW50VG9TY3JvbGwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaG9yaXpvbnRhbFxuICAgIGlmIChlbGVtZW50VG9TY3JvbGwuc2Nyb2xsV2lkdGggPiBlbGVtZW50VG9TY3JvbGwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGlmIChkaXN0YW5jZXMucmlnaHQgPCBTQ1JPTExfWk9ORV9QWCkge1xuICAgICAgICBzY3JvbGxpbmdIb3Jpem9udGFsbHkgPSB0cnVlO1xuICAgICAgICBzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iaiA9IHtcbiAgICAgICAgICB4OiAxLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy5yaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlcy5sZWZ0IDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogLTEsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLmxlZnQpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FscmVhZHlTY3JvbGxpbmcgJiYgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5KSB7XG4gICAgICAgIHNjcm9sbENvbnRhaW5lcihlbGVtZW50VG9TY3JvbGwpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzZXRTY3JvbGxpbmcoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxJZk5lZWRlZDogc2Nyb2xsSWZOZWVkZWQsXG4gICAgcmVzZXRTY3JvbGxpbmc6IHJlc2V0U2Nyb2xsaW5nXG4gIH07XG59XG5cbi8qKlxuICogSWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgZWxlbWVudCByZXR1cm5zIGl0cyBkaXN0YW5jZXMgZnJvbSB0aGUgc2lkZXMsIG90aGVyd2lzZSByZXR1cm5zIG51bGxcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7bnVsbHx7dG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHJpZ2h0OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBjYWxjSW5uZXJEaXN0YW5jZXNCZXR3ZWVuUG9pbnRBbmRTaWRlc09mRWxlbWVudChwb2ludCwgZWwpIHtcbiAgLy8gRXZlbiBpZiB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQgaXMgc21hbGwgaXQgYWN0cyBhcyBhIHNjcm9sbGVyIGZvciB0aGUgdmlld3BvcnRcbiAgdmFyIHJlY3QgPSBlbCA9PT0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCA/IHtcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogd2luZG93LmlubmVyV2lkdGhcbiAgfSA6IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBpZiAoIWlzUG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiBwb2ludC55IC0gcmVjdC50b3AsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSAtIHBvaW50LnksXG4gICAgbGVmdDogcG9pbnQueCAtIHJlY3QubGVmdCxcbiAgICByaWdodDogcmVjdC5yaWdodCAtIHBvaW50LnhcbiAgfTtcbn1cblxuLyoqXG4gQHR5cGVkZWYge09iamVjdH0gTXVsdGlTY3JvbGxlclxuIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTpib29sZWFufSBtdWx0aVNjcm9sbElmTmVlZGVkIC0gY2FsbCB0aGlzIG9uIGV2ZXJ5IFwidGlja1wiIHRvIHNjcm9sbCBjb250YWluZXJzIGlmIG5lZWRlZCwgcmV0dXJucyB0cnVlIGlmIGFueXRoaW5nIHdhcyBzY3JvbGxlZFxuLyoqXG4gKiBDcmVhdGVzIGEgc2Nyb2xsZXIgdGhhbiBjYW4gc2Nyb2xsIGFueSBvZiB0aGUgcHJvdmlkZWQgY29udGFpbmVycyBvciBhbnkgb2YgdGhlaXIgc2Nyb2xsYWJsZSBwYXJlbnRzIChpbmNsdWRpbmcgdGhlIGRvY3VtZW50J3Mgc2Nyb2xsaW5nIGVsZW1lbnQpXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50W119IGJhc2VFbGVtZW50c0ZvclNjcm9sbGluZ1xuICogQHBhcmFtIHtmdW5jdGlvbigpOlBvaW50fSBnZXRQb2ludGVyUG9zaXRpb25cbiAqIEByZXR1cm4ge011bHRpU2Nyb2xsZXJ9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU11bHRpU2Nyb2xsZXIoKSB7XG4gIHZhciBiYXNlRWxlbWVudHNGb3JTY3JvbGxpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICB2YXIgZ2V0UG9pbnRlclBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImNyZWF0aW5nIG11bHRpLXNjcm9sbGVyXCI7XG4gIH0pO1xuICB2YXIgc2Nyb2xsaW5nQ29udGFpbmVyc1NldCA9IGZpbmRSZWxldmFudFNjcm9sbENvbnRhaW5lcnMoYmFzZUVsZW1lbnRzRm9yU2Nyb2xsaW5nKTtcbiAgdmFyIHNjcm9sbGluZ0NvbnRhaW5lcnNEZWVwVG9TaGFsbG93ID0gQXJyYXkuZnJvbShzY3JvbGxpbmdDb250YWluZXJzU2V0KS5zb3J0KGZ1bmN0aW9uIChkejEsIGR6Mikge1xuICAgIHJldHVybiBnZXREZXB0aChkejIpIC0gZ2V0RGVwdGgoZHoxKTtcbiAgfSk7XG4gIHZhciBfbWFrZVNjcm9sbGVyID0gbWFrZVNjcm9sbGVyKCksXG4gICAgc2Nyb2xsSWZOZWVkZWQgPSBfbWFrZVNjcm9sbGVyLnNjcm9sbElmTmVlZGVkLFxuICAgIHJlc2V0U2Nyb2xsaW5nID0gX21ha2VTY3JvbGxlci5yZXNldFNjcm9sbGluZztcblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gLSB3YXMgYW55IGNvbnRhaW5lciBzY3JvbGxlZFxuICAgKi9cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICB2YXIgbW91c2VQb3NpdGlvbiA9IGdldFBvaW50ZXJQb3NpdGlvbigpO1xuICAgIGlmICghbW91c2VQb3NpdGlvbiB8fCAhc2Nyb2xsaW5nQ29udGFpbmVyc0RlZXBUb1NoYWxsb3cpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHNjcm9sbENvbnRhaW5lcnNVbmRlckN1cnNvciA9IHNjcm9sbGluZ0NvbnRhaW5lcnNEZWVwVG9TaGFsbG93LmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBpc1BvaW50SW5zaWRlUmVjdChtb3VzZVBvc2l0aW9uLCBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkgfHwgZWwgPT09IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG4gICAgfSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JvbGxDb250YWluZXJzVW5kZXJDdXJzb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbElmTmVlZGVkKG1vdXNlUG9zaXRpb24sIHNjcm9sbENvbnRhaW5lcnNVbmRlckN1cnNvcltpXSk7XG4gICAgICBpZiAoc2Nyb2xsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG11bHRpU2Nyb2xsSWZOZWVkZWQ6IHNjcm9sbGluZ0NvbnRhaW5lcnNTZXQuc2l6ZSA+IDAgPyB0aWNrIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHJldHVybiByZXNldFNjcm9sbGluZygpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gaW50ZXJuYWwgdXRpbHNcbmZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50cyhlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgc2Nyb2xsYWJsZUNvbnRhaW5lcnMgPSBbXTtcbiAgdmFyIHBhcmVudCA9IGVsZW1lbnQ7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICB2YXIgX3dpbmRvdyRnZXRDb21wdXRlZFN0ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX3dpbmRvdyRnZXRDb21wdXRlZFN0Lm92ZXJmbG93O1xuICAgIGlmIChvdmVyZmxvdy5zcGxpdChcIiBcIikuc29tZShmdW5jdGlvbiAobykge1xuICAgICAgcmV0dXJuIG8uaW5jbHVkZXMoXCJhdXRvXCIpIHx8IG8uaW5jbHVkZXMoXCJzY3JvbGxcIik7XG4gICAgfSkpIHtcbiAgICAgIHNjcm9sbGFibGVDb250YWluZXJzLnB1c2gocGFyZW50KTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIHNjcm9sbGFibGVDb250YWluZXJzO1xufVxuZnVuY3Rpb24gZmluZFJlbGV2YW50U2Nyb2xsQ29udGFpbmVycyhkcm9wWm9uZXMpIHtcbiAgdmFyIHNjcm9sbGluZ0NvbnRhaW5lcnMgPSBuZXcgU2V0KCk7XG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkcm9wWm9uZXMpLFxuICAgIF9zdGVwO1xuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZHogPSBfc3RlcC52YWx1ZTtcbiAgICAgIGZpbmRTY3JvbGxhYmxlUGFyZW50cyhkeikuZm9yRWFjaChmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxpbmdDb250YWluZXJzLmFkZChjb250YWluZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRoZSBzY3JvbGxpbmcgZWxlbWVudCBtaWdodCBoYXZlIG92ZXJmbG93IHZpc2libGUgYW5kIHN0aWxsIGJlIHNjcm9sbGFibGVcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG4gIGlmIChkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuc2Nyb2xsV2lkdGggPiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgIHNjcm9sbGluZ0NvbnRhaW5lcnMuYWRkKGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQpO1xuICB9XG4gIHJldHVybiBzY3JvbGxpbmdDb250YWluZXJzO1xufVxuXG4vKipcbiAqIEZpeGVzIHN2ZWx0ZSBpc3N1ZSB3aGVuIGNsb25pbmcgbm9kZSBjb250YWluaW5nIChvciBiZWluZykgPHNlbGVjdD4gd2hpY2ggd2lsbCBsb29zZSBpdCdzIHZhbHVlLlxuICogU2luY2Ugc3ZlbHRlIG1hbmFnZXMgc2VsZWN0IHZhbHVlIGludGVybmFsbHkuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzY3MTdcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjSGFnb2VsL3N2ZWx0ZS1kbmQtYWN0aW9uL2lzc3Vlcy8zMDZcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gc3ZlbHRlTm9kZUNsb25lKGVsKSB7XG4gIHZhciBjbG9uZWQgPSBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIGVsSXNTZWxlY3QgPSBlbC50YWdOYW1lID09PSBcIlNFTEVDVFwiO1xuICB2YXIgc2VsZWN0cyA9IGVsSXNTZWxlY3QgPyBbZWxdIDogX3RvQ29uc3VtYWJsZUFycmF5KGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzZWxlY3RcIikpO1xuICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc2VsZWN0cyksXG4gICAgX3N0ZXA7XG4gIHRyeSB7XG4gICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgIHZhciBfc2VsZWN0ID0gX3N0ZXAudmFsdWU7XG4gICAgICB2YWx1ZXMucHVzaChfc2VsZWN0LnZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuICBpZiAoc2VsZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIGNsb25lZFNlbGVjdHMgPSBlbElzU2VsZWN0ID8gW2Nsb25lZF0gOiBfdG9Db25zdW1hYmxlQXJyYXkoY2xvbmVkLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzZWxlY3RcIikpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkU2VsZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdCA9IGNsb25lZFNlbGVjdHNbaV07XG4gICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICB2YXIgb3B0aW9uRWwgPSBzZWxlY3QucXVlcnlTZWxlY3RvcihcIm9wdGlvblt2YWx1ZT1cXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCJcIikpO1xuICAgICAgaWYgKG9wdGlvbkVsKSB7XG4gICAgICAgIG9wdGlvbkVsLnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgZWxJc0NhbnZhcyA9IGVsLnRhZ05hbWUgPT09IFwiQ0FOVkFTXCI7XG4gIHZhciBjYW52YXNlcyA9IGVsSXNDYW52YXMgPyBbZWxdIDogX3RvQ29uc3VtYWJsZUFycmF5KGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjYW52YXNcIikpO1xuICBpZiAoY2FudmFzZXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjbG9uZWRDYW52YXNlcyA9IGVsSXNDYW52YXMgPyBbY2xvbmVkXSA6IF90b0NvbnN1bWFibGVBcnJheShjbG9uZWQucXVlcnlTZWxlY3RvckFsbChcImNhbnZhc1wiKSk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGNsb25lZENhbnZhc2VzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGNhbnZhcyA9IGNhbnZhc2VzW19pXTtcbiAgICAgIHZhciBjbG9uZWRDYW52YXMgPSBjbG9uZWRDYW52YXNlc1tfaV07XG4gICAgICBjbG9uZWRDYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBjbG9uZWRDYW52YXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgIGNsb25lZENhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKGNhbnZhcywgMCwgMCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbG9uZWQ7XG59XG5cbi8qKlxuICogQHR5cGUge3tVU0VfQ09NUFVURURfU1RZTEVfSU5TVEVBRF9PRl9CT1VORElOR19SRUNUOiBzdHJpbmd9fVxuICovXG52YXIgRkVBVFVSRV9GTEFHX05BTUVTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC8vIFRoaXMgZmxhZyBleGlzdHMgYXMgYSB3b3JrYXJvdW5kIGZvciBpc3N1ZSA0NTQgKGJhc2ljYWxseSBhIGJyb3dzZXIgYnVnKSAtIHNlZW1zIGxpa2UgdGhlc2UgcmVjdCB2YWx1ZXMgdGFrZSB0aW1lIHRvIHVwZGF0ZSB3aGVuIGluIGdyaWQgbGF5b3V0LiBTZXR0aW5nIGl0IHRvIHRydWUgY2FuIGNhdXNlIHN0cmFuZ2UgYmVoYXZpb3VyIGluIHRoZSBSRVBMIGZvciBub24tZ3JpZCB6b25lcywgc2VlIGlzc3VlIDQ3MFxuICBVU0VfQ09NUFVURURfU1RZTEVfSU5TVEVBRF9PRl9CT1VORElOR19SRUNUOiBcIlVTRV9DT01QVVRFRF9TVFlMRV9JTlNURUFEX09GX0JPVU5ESU5HX1JFQ1RcIlxufSk7XG52YXIgZmVhdHVyZUZsYWdzTWFwID0gX2RlZmluZVByb3BlcnR5KHt9LCBGRUFUVVJFX0ZMQUdfTkFNRVMuVVNFX0NPTVBVVEVEX1NUWUxFX0lOU1RFQURfT0ZfQk9VTkRJTkdfUkVDVCwgZmFsc2UpO1xuXG4vKipcbiAqIEBwYXJhbSB7RkVBVFVSRV9GTEFHX05BTUVTfSBmbGFnTmFtZVxuICogQHBhcmFtIHtib29sZWFufSBmbGFnVmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0RmVhdHVyZUZsYWcoZmxhZ05hbWUsIGZsYWdWYWx1ZSkge1xuICBpZiAoIUZFQVRVUkVfRkxBR19OQU1FU1tmbGFnTmFtZV0pIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHNldCBub24gZXhpc3RpbmcgZmVhdHVyZSBmbGFnIFwiLmNvbmNhdChmbGFnTmFtZSwgXCIhIFN1cHBvcnRlZCBmbGFnczogXCIpLmNvbmNhdChPYmplY3Qua2V5cyhGRUFUVVJFX0ZMQUdfTkFNRVMpKSk7XG4gIGZlYXR1cmVGbGFnc01hcFtmbGFnTmFtZV0gPSAhIWZsYWdWYWx1ZTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtGRUFUVVJFX0ZMQUdfTkFNRVN9IGZsYWdOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBnZXRGZWF0dXJlRmxhZyhmbGFnTmFtZSkge1xuICBpZiAoIUZFQVRVUkVfRkxBR19OQU1FU1tmbGFnTmFtZV0pIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGdldCBub24gZXhpc3RpbmcgZmVhdHVyZSBmbGFnIFwiLmNvbmNhdChmbGFnTmFtZSwgXCIhIFN1cHBvcnRlZCBmbGFnczogXCIpLmNvbmNhdChPYmplY3Qua2V5cyhGRUFUVVJFX0ZMQUdfTkFNRVMpKSk7XG4gIHJldHVybiBmZWF0dXJlRmxhZ3NNYXBbZmxhZ05hbWVdO1xufVxuXG52YXIgVFJBTlNJVElPTl9EVVJBVElPTl9TRUNPTkRTID0gMC4yO1xuXG4vKipcbiAqIHByaXZhdGUgaGVscGVyIGZ1bmN0aW9uIC0gY3JlYXRlcyBhIHRyYW5zaXRpb24gc3RyaW5nIGZvciBhIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgdHJhbnNpdGlvbiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdHJzKHByb3BlcnR5KSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm9wZXJ0eSwgXCIgXCIpLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OX1NFQ09ORFMsIFwicyBlYXNlXCIpO1xufVxuLyoqXG4gKiBjbG9uZXMgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGFwcGxpZXMgcHJvcGVyIHN0eWxlcyBhbmQgdHJhbnNpdGlvbnMgdG8gdGhlIGRyYWdnZWQgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gb3JpZ2luYWxFbGVtZW50XG4gKiBAcGFyYW0ge1BvaW50fSBbcG9zaXRpb25DZW50ZXJPblhZXVxuICogQHJldHVybiB7Tm9kZX0gLSB0aGUgY2xvbmVkLCBzdHlsZWQgZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVEcmFnZ2VkRWxlbWVudEZyb20ob3JpZ2luYWxFbGVtZW50LCBwb3NpdGlvbkNlbnRlck9uWFkpIHtcbiAgdmFyIHJlY3QgPSBvcmlnaW5hbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWwgPSBzdmVsdGVOb2RlQ2xvbmUob3JpZ2luYWxFbGVtZW50KTtcbiAgY29weVN0eWxlc0Zyb21UbyhvcmlnaW5hbEVsZW1lbnQsIGRyYWdnZWRFbCk7XG4gIGRyYWdnZWRFbC5pZCA9IERSQUdHRURfRUxFTUVOVF9JRDtcbiAgZHJhZ2dlZEVsLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICB2YXIgZWxUb3BQeCA9IHJlY3QudG9wO1xuICB2YXIgZWxMZWZ0UHggPSByZWN0LmxlZnQ7XG4gIGRyYWdnZWRFbC5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdChlbFRvcFB4LCBcInB4XCIpO1xuICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuICBpZiAocG9zaXRpb25DZW50ZXJPblhZKSB7XG4gICAgdmFyIGNlbnRlciA9IGZpbmRDZW50ZXIocmVjdCk7XG4gICAgZWxUb3BQeCAtPSBjZW50ZXIueSAtIHBvc2l0aW9uQ2VudGVyT25YWS55O1xuICAgIGVsTGVmdFB4IC09IGNlbnRlci54IC0gcG9zaXRpb25DZW50ZXJPblhZLng7XG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZHJhZ2dlZEVsLnN0eWxlLnRvcCA9IFwiXCIuY29uY2F0KGVsVG9wUHgsIFwicHhcIik7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuICAgIH0sIDApO1xuICB9XG4gIGRyYWdnZWRFbC5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgLy8gd2UgY2FuJ3QgaGF2ZSByZWxhdGl2ZSBvciBhdXRvbWF0aWMgaGVpZ2h0IGFuZCB3aWR0aCBvciBpdCB3aWxsIGJyZWFrIHRoZSBpbGx1c2lvblxuICBkcmFnZ2VkRWwuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gIGRyYWdnZWRFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChyZWN0LmhlaWdodCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQocmVjdC53aWR0aCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiLmNvbmNhdCh0cnMoXCJ0b3BcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImxlZnRcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImJhY2tncm91bmQtY29sb3JcIiksIFwiLCBcIikuY29uY2F0KHRycyhcIm9wYWNpdHlcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImNvbG9yXCIpLCBcIiBcIik7XG4gIC8vIHRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBhIHN0cmFuZ2UgYnJvd3NlciBidWcgdGhhdCBjYXVzZXMgdGhlIHJpZ2h0IGJvcmRlciB0byBkaXNhcHBlYXIgd2hlbiBhbGwgdGhlIHRyYW5zaXRpb25zIGFyZSBhZGRlZCBhdCB0aGUgc2FtZSB0aW1lXG4gIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gKz0gXCIsIFwiLmNvbmNhdCh0cnMoXCJ3aWR0aFwiKSwgXCIsIFwiKS5jb25jYXQodHJzKFwiaGVpZ2h0XCIpKTtcbiAgfSwgMCk7XG4gIGRyYWdnZWRFbC5zdHlsZS56SW5kZXggPSBcIjk5OTlcIjtcbiAgZHJhZ2dlZEVsLnN0eWxlLmN1cnNvciA9IFwiZ3JhYmJpbmdcIjtcbiAgcmV0dXJuIGRyYWdnZWRFbDtcbn1cblxuLyoqXG4gKiBzdHlsZXMgdGhlIGRyYWdnZWQgZWxlbWVudCB0byBhICdkcm9wcGVkJyBzdGF0ZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ2dlZEVsXG4gKi9cbmZ1bmN0aW9uIG1vdmVEcmFnZ2VkRWxlbWVudFRvV2FzRHJvcHBlZFN0YXRlKGRyYWdnZWRFbCkge1xuICBkcmFnZ2VkRWwuc3R5bGUuY3Vyc29yID0gXCJncmFiXCI7XG59XG5cbi8qKlxuICogTW9ycGhzIHRoZSBkcmFnZ2VkIGVsZW1lbnQgc3R5bGUsIG1haW50YWlucyB0aGUgbW91c2UgcG9pbnRlciB3aXRoaW4gdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnZWRFbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weUZyb21FbCAtIHRoZSBlbGVtZW50IHRoZSBkcmFnZ2VkIGVsZW1lbnQgc2hvdWxkIGxvb2sgbGlrZSwgdHlwaWNhbGx5IHRoZSBzaGFkb3cgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRNb3VzZVhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50TW91c2VZXG4gKi9cbmZ1bmN0aW9uIG1vcnBoRHJhZ2dlZEVsZW1lbnRUb0JlTGlrZShkcmFnZ2VkRWwsIGNvcHlGcm9tRWwsIGN1cnJlbnRNb3VzZVgsIGN1cnJlbnRNb3VzZVkpIHtcbiAgY29weVN0eWxlc0Zyb21Ubyhjb3B5RnJvbUVsLCBkcmFnZ2VkRWwpO1xuICB2YXIgbmV3UmVjdCA9IGNvcHlGcm9tRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWxSZWN0ID0gZHJhZ2dlZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgd2lkdGhDaGFuZ2UgPSBuZXdSZWN0LndpZHRoIC0gZHJhZ2dlZEVsUmVjdC53aWR0aDtcbiAgdmFyIGhlaWdodENoYW5nZSA9IG5ld1JlY3QuaGVpZ2h0IC0gZHJhZ2dlZEVsUmVjdC5oZWlnaHQ7XG4gIGlmICh3aWR0aENoYW5nZSB8fCBoZWlnaHRDaGFuZ2UpIHtcbiAgICB2YXIgcmVsYXRpdmVEaXN0YW5jZU9mTW91c2VQb2ludGVyRnJvbURyYWdnZWRTaWRlcyA9IHtcbiAgICAgIGxlZnQ6IChjdXJyZW50TW91c2VYIC0gZHJhZ2dlZEVsUmVjdC5sZWZ0KSAvIGRyYWdnZWRFbFJlY3Qud2lkdGgsXG4gICAgICB0b3A6IChjdXJyZW50TW91c2VZIC0gZHJhZ2dlZEVsUmVjdC50b3ApIC8gZHJhZ2dlZEVsUmVjdC5oZWlnaHRcbiAgICB9O1xuICAgIGlmICghZ2V0RmVhdHVyZUZsYWcoRkVBVFVSRV9GTEFHX05BTUVTLlVTRV9DT01QVVRFRF9TVFlMRV9JTlNURUFEX09GX0JPVU5ESU5HX1JFQ1QpKSB7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQobmV3UmVjdC5oZWlnaHQsIFwicHhcIik7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdChuZXdSZWN0LndpZHRoLCBcInB4XCIpO1xuICAgIH1cbiAgICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KHBhcnNlRmxvYXQoZHJhZ2dlZEVsLnN0eWxlLmxlZnQpIC0gcmVsYXRpdmVEaXN0YW5jZU9mTW91c2VQb2ludGVyRnJvbURyYWdnZWRTaWRlcy5sZWZ0ICogd2lkdGhDaGFuZ2UsIFwicHhcIik7XG4gICAgZHJhZ2dlZEVsLnN0eWxlLnRvcCA9IFwiXCIuY29uY2F0KHBhcnNlRmxvYXQoZHJhZ2dlZEVsLnN0eWxlLnRvcCkgLSByZWxhdGl2ZURpc3RhbmNlT2ZNb3VzZVBvaW50ZXJGcm9tRHJhZ2dlZFNpZGVzLnRvcCAqIGhlaWdodENoYW5nZSwgXCJweFwiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvcHlGcm9tRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvcHlUb0VsXG4gKi9cbmZ1bmN0aW9uIGNvcHlTdHlsZXNGcm9tVG8oY29weUZyb21FbCwgY29weVRvRWwpIHtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb3B5RnJvbUVsKTtcbiAgQXJyYXkuZnJvbShjb21wdXRlZFN0eWxlKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5zdGFydHNXaXRoKFwiYmFja2dyb3VuZFwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJwYWRkaW5nXCIpIHx8IHMuc3RhcnRzV2l0aChcImZvbnRcIikgfHwgcy5zdGFydHNXaXRoKFwidGV4dFwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJhbGlnblwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJqdXN0aWZ5XCIpIHx8IHMuc3RhcnRzV2l0aChcImRpc3BsYXlcIikgfHwgcy5zdGFydHNXaXRoKFwiZmxleFwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJib3JkZXJcIikgfHwgcyA9PT0gXCJvcGFjaXR5XCIgfHwgcyA9PT0gXCJjb2xvclwiIHx8IHMgPT09IFwibGlzdC1zdHlsZS10eXBlXCIgfHxcbiAgICAvLyBjb3B5aW5nIHdpdGggYW5kIGhlaWdodCB0byBtYWtlIHVwIGZvciByZWN0IHVwZGF0ZSB0aW1pbmcgaXNzdWVzIGluIHNvbWUgYnJvd3NlcnNcbiAgICBnZXRGZWF0dXJlRmxhZyhGRUFUVVJFX0ZMQUdfTkFNRVMuVVNFX0NPTVBVVEVEX1NUWUxFX0lOU1RFQURfT0ZfQk9VTkRJTkdfUkVDVCkgJiYgKHMgPT09IFwid2lkdGhcIiB8fCBzID09PSBcImhlaWdodFwiKTtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBjb3B5VG9FbC5zdHlsZS5zZXRQcm9wZXJ0eShzLCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocyksIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShzKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2VzIHRoZSBlbGVtZW50IGNvbXBhdGlibGUgd2l0aCBiZWluZyBkcmFnZ2FibGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnYWJsZUVsXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRyYWdEaXNhYmxlZFxuICovXG5mdW5jdGlvbiBzdHlsZURyYWdnYWJsZShkcmFnZ2FibGVFbCwgZHJhZ0Rpc2FibGVkKSB7XG4gIGRyYWdnYWJsZUVsLmRyYWdnYWJsZSA9IGZhbHNlO1xuICBkcmFnZ2FibGVFbC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGlmICghZHJhZ0Rpc2FibGVkKSB7XG4gICAgZHJhZ2dhYmxlRWwuc3R5bGUudXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcbiAgfSBlbHNlIHtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS51c2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICB9XG59XG5cbi8qKlxuICogSGlkZXMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgc28gdGhhdCBpdCBjYW4gc3RheSBpbiB0aGUgZG9tIHdpdGhvdXQgaW50ZXJydXB0aW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnVGFyZ2V0XG4gKi9cbmZ1bmN0aW9uIGhpZGVFbGVtZW50KGRyYWdUYXJnZXQpIHtcbiAgZHJhZ1RhcmdldC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGRyYWdUYXJnZXQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gIGRyYWdUYXJnZXQuc3R5bGUuekluZGV4ID0gXCItNVwiO1xufVxuXG4vKipcbiAqIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlU2hhZG93RWwoc2hhZG93RWwpIHtcbiAgc2hhZG93RWwuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIHNoYWRvd0VsLnNldEF0dHJpYnV0ZShTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSwgXCJ0cnVlXCIpO1xufVxuXG4vKipcbiAqIHVuZG8gdGhlIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cbmZ1bmN0aW9uIHVuRGVjb3JhdGVTaGFkb3dFbGVtZW50KHNoYWRvd0VsKSB7XG4gIHNoYWRvd0VsLnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuICBzaGFkb3dFbC5yZW1vdmVBdHRyaWJ1dGUoU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUpO1xufVxuXG4vKipcbiAqIHdpbGwgbWFyayB0aGUgZ2l2ZW4gZHJvcHpvbmVzIGFzIHZpc3VhbGx5IGFjdGl2ZVxuICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0U3R5bGVzIC0gbWFwcyBhIGRyb3B6b25lIHRvIGEgc3R5bGVzIG9iamVjdCAoc28gdGhlIHN0eWxlcyBjYW4gYmUgcmVtb3ZlZClcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVBY3RpdmVEcm9wWm9uZXMoZHJvcFpvbmVzKSB7XG4gIHZhciBnZXRTdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgZ2V0Q2xhc3NlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXTtcbiAgfTtcbiAgZHJvcFpvbmVzLmZvckVhY2goZnVuY3Rpb24gKGR6KSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyhkeik7XG4gICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgZHouc3R5bGVbc3R5bGVdID0gc3R5bGVzW3N0eWxlXTtcbiAgICB9KTtcbiAgICBnZXRDbGFzc2VzKGR6KS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gZHouY2xhc3NMaXN0LmFkZChjKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogd2lsbCByZW1vdmUgdGhlICdhY3RpdmUnIHN0eWxpbmcgZnJvbSBnaXZlbiBkcm9wem9uZXNcbiAqIEBwYXJhbSB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBkcm9wWm9uZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFN0eWxlcyAtIG1hcHMgYSBkcm9wem9uZSB0byBhIHN0eWxlcyBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhkcm9wWm9uZXMpIHtcbiAgdmFyIGdldFN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG4gIHZhciBnZXRDbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuICBkcm9wWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoZHopIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKGR6KTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBkei5zdHlsZVtzdHlsZV0gPSBcIlwiO1xuICAgIH0pO1xuICAgIGdldENsYXNzZXMoZHopLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBkei5jbGFzc0xpc3QuY29udGFpbnMoYykgJiYgZHouY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogd2lsbCBwcmV2ZW50IHRoZSBwcm92aWRlZCBlbGVtZW50IGZyb20gc2hyaW5raW5nIGJ5IHNldHRpbmcgaXRzIG1pbldpZHRoIGFuZCBtaW5IZWlnaHQgdG8gdGhlIGN1cnJlbnQgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiB2b2lkfSAtIHJ1biB0aGlzIGZ1bmN0aW9uIHRvIHVuZG8gdGhlIG9wZXJhdGlvbiBhbmQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRTaHJpbmtpbmcoZWwpIHtcbiAgdmFyIG9yaWdpbmFsTWluSGVpZ2h0ID0gZWwuc3R5bGUubWluSGVpZ2h0O1xuICBlbC5zdHlsZS5taW5IZWlnaHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShcImhlaWdodFwiKTtcbiAgdmFyIG9yaWdpbmFsTWluV2lkdGggPSBlbC5zdHlsZS5taW5XaWR0aDtcbiAgZWwuc3R5bGUubWluV2lkdGggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShcIndpZHRoXCIpO1xuICByZXR1cm4gZnVuY3Rpb24gdW5kbygpIHtcbiAgICBlbC5zdHlsZS5taW5IZWlnaHQgPSBvcmlnaW5hbE1pbkhlaWdodDtcbiAgICBlbC5zdHlsZS5taW5XaWR0aCA9IG9yaWdpbmFsTWluV2lkdGg7XG4gIH07XG59XG5cbnZhciBERUZBVUxUX0RST1BfWk9ORV9UWVBFID0gXCItLWFueS0tXCI7XG52YXIgTUlOX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TID0gMTAwO1xudmFyIERJU0FCTEVEX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TID0gMjA7XG52YXIgTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYID0gMztcbnZhciBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFID0ge1xuICBvdXRsaW5lOiBcInJnYmEoMjU1LCAyNTUsIDEwMiwgMC43KSBzb2xpZCAycHhcIlxufTtcbnZhciBPUklHSU5BTF9EUkFHR0VEX0lURU1fTUFSS0VSX0FUVFJJQlVURSA9IFwiZGF0YS1pcy1kbmQtb3JpZ2luYWwtZHJhZ2dlZC1pdGVtXCI7XG52YXIgb3JpZ2luYWxEcmFnVGFyZ2V0O1xudmFyIGRyYWdnZWRFbDtcbnZhciBkcmFnZ2VkRWxEYXRhO1xudmFyIGRyYWdnZWRFbFR5cGU7XG52YXIgb3JpZ2luRHJvcFpvbmU7XG52YXIgb3JpZ2luSW5kZXg7XG52YXIgc2hhZG93RWxEYXRhO1xudmFyIHNoYWRvd0VsRHJvcFpvbmU7XG52YXIgZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbjtcbnZhciBjdXJyZW50TW91c2VQb3NpdGlvbjtcbnZhciBpc1dvcmtpbmdPblByZXZpb3VzRHJhZyA9IGZhbHNlO1xudmFyIGZpbmFsaXppbmdQcmV2aW91c0RyYWcgPSBmYWxzZTtcbnZhciB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnM7XG52YXIgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbnZhciBzY2hlZHVsZWRGb3JSZW1vdmFsQWZ0ZXJEcm9wID0gW107XG52YXIgbXVsdGlTY3JvbGxlcjtcblxuLy8gYSBtYXAgZnJvbSB0eXBlIHRvIGEgc2V0IG9mIGRyb3Atem9uZXNcbnZhciB0eXBlVG9Ecm9wWm9uZXMgPSBuZXcgTWFwKCk7XG4vLyBpbXBvcnRhbnQgLSB0aGlzIGlzIG5lZWRlZCBiZWNhdXNlIG90aGVyd2lzZSB0aGUgY29uZmlnIHRoYXQgd291bGQgYmUgdXNlZCBmb3IgZXZlcnlvbmUgaXMgdGhlIGNvbmZpZyBvZiB0aGUgZWxlbWVudCB0aGF0IGNyZWF0ZWQgdGhlIGV2ZW50IGxpc3RlbmVyc1xudmFyIGR6VG9Db25maWcgPSBuZXcgTWFwKCk7XG4vLyB0aGlzIGlzIG5lZWRlZCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIGNsZWFudXAgb2xkIGxpc3RlbmVycyBhbmQgYXZvaWQgc3RhbGUgY2xvc3VyZXMgaXNzdWVzIChhcyB0aGUgbGlzdGVuZXIgaXMgZGVmaW5lZCB3aXRoaW4gZWFjaCB6b25lKVxudmFyIGVsVG9Nb3VzZURvd25MaXN0ZW5lciA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qIGRyb3Atem9uZXMgcmVnaXN0cmF0aW9uIG1hbmFnZW1lbnQgKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRHJvcFpvbmUoZHJvcFpvbmVFbCwgdHlwZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZWdpc3RlcmluZyBkcm9wLXpvbmUgaWYgYWJzZW50XCI7XG4gIH0pO1xuICBpZiAoIXR5cGVUb0Ryb3Bab25lcy5oYXModHlwZSkpIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMuc2V0KHR5cGUsIG5ldyBTZXQoKSk7XG4gIH1cbiAgaWYgKCF0eXBlVG9Ecm9wWm9uZXMuZ2V0KHR5cGUpLmhhcyhkcm9wWm9uZUVsKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSkuYWRkKGRyb3Bab25lRWwpO1xuICAgIGluY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKTtcbiAgfVxufVxuZnVuY3Rpb24gdW5yZWdpc3RlckRyb3Bab25lKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgdHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKVtcImRlbGV0ZVwiXShkcm9wWm9uZUVsKTtcbiAgZGVjcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpO1xuICBpZiAodHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKS5zaXplID09PSAwKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzW1wiZGVsZXRlXCJdKHR5cGUpO1xuICB9XG59XG5cbi8qIGZ1bmN0aW9ucyB0byBtYW5hZ2Ugb2JzZXJ2aW5nIHRoZSBkcmFnZ2VkIGVsZW1lbnQgYW5kIHRyaWdnZXIgY3VzdG9tIGRyYWctZXZlbnRzICovXG5mdW5jdGlvbiB3YXRjaERyYWdnZWRFbGVtZW50KCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ3YXRjaGluZyBkcmFnZ2VkIGVsZW1lbnRcIjtcbiAgfSk7XG4gIHZhciBkcm9wWm9uZXMgPSB0eXBlVG9Ecm9wWm9uZXMuZ2V0KGRyYWdnZWRFbFR5cGUpO1xuICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZHJvcFpvbmVzKSxcbiAgICBfc3RlcDtcbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIGR6ID0gX3N0ZXAudmFsdWU7XG4gICAgICBkei5hZGRFdmVudExpc3RlbmVyKERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkRW50ZXJlZCk7XG4gICAgICBkei5hZGRFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkTGVmdCk7XG4gICAgICBkei5hZGRFdmVudExpc3RlbmVyKERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkSXNPdmVySW5kZXgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9ET0NVTUVOVF9FVkVOVF9OQU1FLCBoYW5kbGVEcm9wKTtcblxuICAvLyBpdCBpcyBpbXBvcnRhbnQgdGhhdCB3ZSBkb24ndCBoYXZlIGFuIGludGVydmFsIHRoYXQgaXMgZmFzdGVyIHRoYW4gdGhlIGZsaXAgZHVyYXRpb24gYmVjYXVzZSBpdCBjYW4gY2F1c2UgZWxlbWVudHMgdG8ganVtcCBiYWNoIGFuZCBmb3J0aFxuICB2YXIgc2V0SW50ZXJ2YWxNcyA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShBcnJheS5mcm9tKGRyb3Bab25lcy5rZXlzKCkpLm1hcChmdW5jdGlvbiAoZHopIHtcbiAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BBbmltYXRpb25EdXJhdGlvbk1zO1xuICB9KSkpO1xuICB2YXIgb2JzZXJ2YXRpb25JbnRlcnZhbE1zID0gc2V0SW50ZXJ2YWxNcyA9PT0gMCA/IERJU0FCTEVEX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TIDogTWF0aC5tYXgoc2V0SW50ZXJ2YWxNcywgTUlOX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TKTsgLy8gaWYgc2V0SW50ZXJ2YWxNcyBpcyAwIGl0IGdvZXMgdG8gMjAsIG90aGVyd2lzZSBpdCBpcyBtYXggYmV0d2VlbiBpdCBhbmQgbWluIG9ic2VydmF0aW9uLlxuICBtdWx0aVNjcm9sbGVyID0gY3JlYXRlTXVsdGlTY3JvbGxlcihkcm9wWm9uZXMsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3VycmVudE1vdXNlUG9zaXRpb247XG4gIH0pO1xuICBvYnNlcnZlKGRyYWdnZWRFbCwgZHJvcFpvbmVzLCBvYnNlcnZhdGlvbkludGVydmFsTXMgKiAxLjA3LCBtdWx0aVNjcm9sbGVyKTtcbn1cbmZ1bmN0aW9uIHVuV2F0Y2hEcmFnZ2VkRWxlbWVudCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW53YXRjaGluZyBkcmFnZ2VkIGVsZW1lbnRcIjtcbiAgfSk7XG4gIHZhciBkcm9wWm9uZXMgPSB0eXBlVG9Ecm9wWm9uZXMuZ2V0KGRyYWdnZWRFbFR5cGUpO1xuICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRyb3Bab25lcyksXG4gICAgX3N0ZXAyO1xuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZHogPSBfc3RlcDIudmFsdWU7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkRW50ZXJlZCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkTGVmdCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkSXNPdmVySW5kZXgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yMi5mKCk7XG4gIH1cbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoRFJBR0dFRF9MRUZUX0RPQ1VNRU5UX0VWRU5UX05BTUUsIGhhbmRsZURyb3ApO1xuICBtdWx0aVNjcm9sbGVyLmRlc3Ryb3koKTtcbiAgbXVsdGlTY3JvbGxlciA9IHVuZGVmaW5lZDtcbiAgdW5vYnNlcnZlKCk7XG59XG5mdW5jdGlvbiBmaW5kU2hhZG93RWxlbWVudElkeChpdGVtcykge1xuICByZXR1cm4gaXRlbXMuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuICEhaXRlbVtTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRV07XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2hhZG93RWxEYXRhKGRyYWdnZWRFbERhdGEpIHtcbiAgdmFyIF9vYmplY3RTcHJlYWQyJDE7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZHJhZ2dlZEVsRGF0YSksIHt9LCAoX29iamVjdFNwcmVhZDIkMSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDIkMSwgU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUUsIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDIkMSwgSVRFTV9JRF9LRVksIFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lEKSwgX29iamVjdFNwcmVhZDIkMSkpO1xufVxuXG4vKiBjdXN0b20gZHJhZy1ldmVudHMgaGFuZGxlcnMgKi9cbmZ1bmN0aW9uIGhhbmRsZURyYWdnZWRFbnRlcmVkKGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgZW50ZXJlZFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQgPSBkelRvQ29uZmlnLmdldChlLmN1cnJlbnRUYXJnZXQpLFxuICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0Lml0ZW1zLFxuICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBfZHpUb0NvbmZpZyRnZXQuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiaWdub3JpbmcgZHJhZ2dlZCBlbnRlcmVkIGJlY2F1c2UgZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbiAgLy8gdGhpcyBkZWFscyB3aXRoIGFub3RoZXIgcmFjZSBjb25kaXRpb24uIGluIHJhcmUgb2NjYXNpb25zIChzdXBlciByYXBpZCBvcGVyYXRpb25zKSB0aGUgbGlzdCBoYXNuJ3QgdXBkYXRlZCB5ZXRcbiAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtJVEVNX0lEX0tFWV0gIT09IHNoYWRvd0VsRGF0YVtJVEVNX0lEX0tFWV07XG4gIH0pO1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJkcmFnZ2VkIGVudGVyZWQgaXRlbXMgXCIuY29uY2F0KHRvU3RyaW5nKGl0ZW1zKSk7XG4gIH0pO1xuICBpZiAob3JpZ2luRHJvcFpvbmUgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgIHZhciBvcmlnaW5ab25lSXRlbXMgPSBkelRvQ29uZmlnLmdldChvcmlnaW5Ecm9wWm9uZSkuaXRlbXM7XG4gICAgdmFyIG5ld09yaWdpblpvbmVJdGVtcyA9IG9yaWdpblpvbmVJdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbVtTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRV07XG4gICAgfSk7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG9yaWdpbkRyb3Bab25lLCBuZXdPcmlnaW5ab25lSXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfRU5URVJFRF9BTk9USEVSLFxuICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgICB9KTtcbiAgfVxuICB2YXIgX2UkZGV0YWlsJGluZGV4T2JqID0gZS5kZXRhaWwuaW5kZXhPYmosXG4gICAgaW5kZXggPSBfZSRkZXRhaWwkaW5kZXhPYmouaW5kZXgsXG4gICAgaXNQcm94aW1pdHlCYXNlZCA9IF9lJGRldGFpbCRpbmRleE9iai5pc1Byb3hpbWl0eUJhc2VkO1xuICB2YXIgc2hhZG93RWxJZHggPSBpc1Byb3hpbWl0eUJhc2VkICYmIGluZGV4ID09PSBlLmN1cnJlbnRUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoIC0gMSA/IGluZGV4ICsgMSA6IGluZGV4O1xuICBzaGFkb3dFbERyb3Bab25lID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDAsIHNoYWRvd0VsRGF0YSk7XG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9FTlRFUkVELFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZURyYWdnZWRMZWZ0KGUpIHtcbiAgLy8gZGVhbGluZyB3aXRoIGEgcmFyZSByYWNlIGNvbmRpdGlvbiBvbiBleHRyZW1lbHkgcmFwaWQgY2xpY2tpbmcgYW5kIGRyb3BwaW5nXG4gIGlmICghaXNXb3JraW5nT25QcmV2aW91c0RyYWcpIHJldHVybjtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgbGVmdFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQyID0gZHpUb0NvbmZpZy5nZXQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICBvcmlnaW5hbEl0ZW1zID0gX2R6VG9Db25maWckZ2V0Mi5pdGVtcyxcbiAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX2R6VG9Db25maWckZ2V0Mi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuICBpZiAoZHJvcEZyb21PdGhlcnNEaXNhYmxlZCAmJiBlLmN1cnJlbnRUYXJnZXQgIT09IG9yaWdpbkRyb3Bab25lICYmIGUuY3VycmVudFRhcmdldCAhPT0gc2hhZG93RWxEcm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGl0ZW1zID0gX3RvQ29uc3VtYWJsZUFycmF5KG9yaWdpbmFsSXRlbXMpO1xuICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChpdGVtcyk7XG4gIGlmIChzaGFkb3dFbElkeCAhPT0gLTEpIHtcbiAgICBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDEpO1xuICB9XG4gIHZhciBvcmlnU2hhZG93RHogPSBzaGFkb3dFbERyb3Bab25lO1xuICBzaGFkb3dFbERyb3Bab25lID0gdW5kZWZpbmVkO1xuICB2YXIgX2UkZGV0YWlsID0gZS5kZXRhaWwsXG4gICAgdHlwZSA9IF9lJGRldGFpbC50eXBlLFxuICAgIHRoZU90aGVyRHogPSBfZSRkZXRhaWwudGhlT3RoZXJEejtcbiAgaWYgKHR5cGUgPT09IERSQUdHRURfTEVGVF9UWVBFUy5PVVRTSURFX09GX0FOWSB8fCB0eXBlID09PSBEUkFHR0VEX0xFRlRfVFlQRVMuTEVGVF9GT1JfQU5PVEhFUiAmJiB0aGVPdGhlckR6ICE9PSBvcmlnaW5Ecm9wWm9uZSAmJiBkelRvQ29uZmlnLmdldCh0aGVPdGhlckR6KS5kcm9wRnJvbU90aGVyc0Rpc2FibGVkKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcmFnZ2VkIGxlZnQgYWxsLCBwdXR0aW5nIHNoYWRvdyBlbGVtZW50IGJhY2sgaW4gdGhlIG9yaWdpbiBkelwiO1xuICAgIH0pO1xuICAgIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gdHJ1ZTtcbiAgICBzaGFkb3dFbERyb3Bab25lID0gb3JpZ2luRHJvcFpvbmU7XG4gICAgLy8gaWYgdGhlIGxhc3Qgem9uZSBpdCBsZWZ0IGlzIHRoZSBvcmlnaW4gZHosIHdlIHdpbGwgcHV0IGl0IGJhY2sgaW50byBpdGVtcyAod2hpY2ggd2UganVzdCByZW1vdmVkIGl0IGZyb20pXG4gICAgdmFyIG9yaWdpblpvbmVJdGVtcyA9IG9yaWdTaGFkb3dEeiA9PT0gb3JpZ2luRHJvcFpvbmUgPyBpdGVtcyA6IF90b0NvbnN1bWFibGVBcnJheShkelRvQ29uZmlnLmdldChvcmlnaW5Ecm9wWm9uZSkuaXRlbXMpO1xuICAgIG9yaWdpblpvbmVJdGVtcy5zcGxpY2Uob3JpZ2luSW5kZXgsIDAsIHNoYWRvd0VsRGF0YSk7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG9yaWdpbkRyb3Bab25lLCBvcmlnaW5ab25lSXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfTEVGVF9BTEwsXG4gICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgIH0pO1xuICB9XG4gIC8vIGZvciB0aGUgb3JpZ2luIGR6LCB3aGVuIHRoZSBkcmFnZ2VkIGlzIG91dHNpZGUgb2YgYW55LCB0aGlzIHdpbGwgYmUgZmlyZWQgaW4gYWRkaXRpb24gdG8gdGhlIHByZXZpb3VzLiB0aGlzIGlzIGZvciBzaW1wbGljaXR5XG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9MRUZULFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZURyYWdnZWRJc092ZXJJbmRleChlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkcmFnZ2VkIGlzIG92ZXIgaW5kZXhcIiwgZS5jdXJyZW50VGFyZ2V0LCBlLmRldGFpbF07XG4gIH0pO1xuICB2YXIgX2R6VG9Db25maWckZ2V0MyA9IGR6VG9Db25maWcuZ2V0KGUuY3VycmVudFRhcmdldCksXG4gICAgb3JpZ2luYWxJdGVtcyA9IF9kelRvQ29uZmlnJGdldDMuaXRlbXMsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldDMuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGl0ZW1zID0gX3RvQ29uc3VtYWJsZUFycmF5KG9yaWdpbmFsSXRlbXMpO1xuICBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlO1xuICB2YXIgaW5kZXggPSBlLmRldGFpbC5pbmRleE9iai5pbmRleDtcbiAgdmFyIHNoYWRvd0VsSWR4ID0gZmluZFNoYWRvd0VsZW1lbnRJZHgoaXRlbXMpO1xuICBpZiAoc2hhZG93RWxJZHggIT09IC0xKSB7XG4gICAgaXRlbXMuc3BsaWNlKHNoYWRvd0VsSWR4LCAxKTtcbiAgfVxuICBpdGVtcy5zcGxpY2UoaW5kZXgsIDAsIHNoYWRvd0VsRGF0YSk7XG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9PVkVSX0lOREVYLFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cblxuLy8gR2xvYmFsIG1vdXNlL3RvdWNoLWV2ZW50cyBoYW5kbGVyc1xuZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0ge1xuICAgIHg6IGMuY2xpZW50WCxcbiAgICB5OiBjLmNsaWVudFlcbiAgfTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KGN1cnJlbnRNb3VzZVBvc2l0aW9uLnggLSBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uLngsIFwicHgsIFwiKS5jb25jYXQoY3VycmVudE1vdXNlUG9zaXRpb24ueSAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueSwgXCJweCwgMClcIik7XG59XG5mdW5jdGlvbiBoYW5kbGVEcm9wKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJkcm9wcGVkXCI7XG4gIH0pO1xuICBmaW5hbGl6aW5nUHJldmlvdXNEcmFnID0gdHJ1ZTtcbiAgLy8gY2xlYW51cFxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRHJvcCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRHJvcCk7XG4gIHVuV2F0Y2hEcmFnZ2VkRWxlbWVudCgpO1xuICBtb3ZlRHJhZ2dlZEVsZW1lbnRUb1dhc0Ryb3BwZWRTdGF0ZShkcmFnZ2VkRWwpO1xuICBpZiAoIXNoYWRvd0VsRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImVsZW1lbnQgd2FzIGRyb3BwZWQgcmlnaHQgYWZ0ZXIgaXQgbGVmdCBvcmlnaW4gYnV0IGJlZm9yZSBlbnRlcmluZyBzb21ld2hlcmUgZWxzZVwiO1xuICAgIH0pO1xuICAgIHNoYWRvd0VsRHJvcFpvbmUgPSBvcmlnaW5Ecm9wWm9uZTtcbiAgfVxuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wiZHJvcHBlZCBpbiBkelwiLCBzaGFkb3dFbERyb3Bab25lXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQ0ID0gZHpUb0NvbmZpZy5nZXQoc2hhZG93RWxEcm9wWm9uZSksXG4gICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ0Lml0ZW1zLFxuICAgIHR5cGUgPSBfZHpUb0NvbmZpZyRnZXQ0LnR5cGU7XG4gIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXModHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gIH0sIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcFRhcmdldENsYXNzZXM7XG4gIH0pO1xuICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChpdGVtcyk7XG4gIC8vIHRoZSBoYW5kbGVyIG1pZ2h0IHJlbW92ZSB0aGUgc2hhZG93IGVsZW1lbnQsIGV4OiBkcmFndWxhIGxpa2UgY29weSBvbiBkcmFnXG4gIGlmIChzaGFkb3dFbElkeCA9PT0gLTEpIHtcbiAgICBpZiAoc2hhZG93RWxEcm9wWm9uZSA9PT0gb3JpZ2luRHJvcFpvbmUpIHtcbiAgICAgIHNoYWRvd0VsSWR4ID0gb3JpZ2luSW5kZXg7XG4gICAgfVxuICB9XG4gIGl0ZW1zID0gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUVdID8gZHJhZ2dlZEVsRGF0YSA6IGl0ZW07XG4gIH0pO1xuICBmdW5jdGlvbiBmaW5hbGl6ZVdpdGhpblpvbmUoKSB7XG4gICAgdW5sb2NrT3JpZ2luRHpNaW5EaW1lbnNpb25zKCk7XG4gICAgZGlzcGF0Y2hGaW5hbGl6ZUV2ZW50KHNoYWRvd0VsRHJvcFpvbmUsIGl0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA/IFRSSUdHRVJTLkRST1BQRURfT1VUU0lERV9PRl9BTlkgOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fWk9ORSxcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7XG4gICAgaWYgKHNoYWRvd0VsRHJvcFpvbmUgIT09IG9yaWdpbkRyb3Bab25lKSB7XG4gICAgICAvLyBsZXR0aW5nIHRoZSBvcmlnaW4gZHJvcCB6b25lIGtub3cgdGhlIGVsZW1lbnQgd2FzIHBlcm1hbmVudGx5IHRha2VuIGF3YXlcbiAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChvcmlnaW5Ecm9wWm9uZSwgZHpUb0NvbmZpZy5nZXQob3JpZ2luRHJvcFpvbmUpLml0ZW1zLCB7XG4gICAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRST1BQRURfSU5UT19BTk9USEVSLFxuICAgICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNoYWRvd0VsSWR4ICE9PSAtMSkgdW5EZWNvcmF0ZVNoYWRvd0VsZW1lbnQoc2hhZG93RWxEcm9wWm9uZS5jaGlsZHJlbltzaGFkb3dFbElkeF0pO1xuICAgIGNsZWFudXBQb3N0RHJvcCgpO1xuICB9XG4gIGFuaW1hdGVEcmFnZ2VkVG9GaW5hbFBvc2l0aW9uKHNoYWRvd0VsSWR4LCBmaW5hbGl6ZVdpdGhpblpvbmUpO1xufVxuXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIGhhbmRsZURyb3BcbmZ1bmN0aW9uIGFuaW1hdGVEcmFnZ2VkVG9GaW5hbFBvc2l0aW9uKHNoYWRvd0VsSWR4LCBjYWxsYmFjaykge1xuICB2YXIgc2hhZG93RWxSZWN0ID0gc2hhZG93RWxJZHggPiAtMSA/IGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhzaGFkb3dFbERyb3Bab25lLmNoaWxkcmVuW3NoYWRvd0VsSWR4XSkgOiBnZXRCb3VuZGluZ1JlY3ROb1RyYW5zZm9ybXMoc2hhZG93RWxEcm9wWm9uZSk7XG4gIHZhciBuZXdUcmFuc2Zvcm0gPSB7XG4gICAgeDogc2hhZG93RWxSZWN0LmxlZnQgLSBwYXJzZUZsb2F0KGRyYWdnZWRFbC5zdHlsZS5sZWZ0KSxcbiAgICB5OiBzaGFkb3dFbFJlY3QudG9wIC0gcGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUudG9wKVxuICB9O1xuICB2YXIgX2R6VG9Db25maWckZ2V0NSA9IGR6VG9Db25maWcuZ2V0KHNoYWRvd0VsRHJvcFpvbmUpLFxuICAgIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zID0gX2R6VG9Db25maWckZ2V0NS5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcztcbiAgdmFyIHRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSBcIi5jb25jYXQoZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMsIFwibXMgZWFzZVwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPSBkcmFnZ2VkRWwuc3R5bGUudHJhbnNpdGlvbiA/IGRyYWdnZWRFbC5zdHlsZS50cmFuc2l0aW9uICsgXCIsXCIgKyB0cmFuc2l0aW9uIDogdHJhbnNpdGlvbjtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KG5ld1RyYW5zZm9ybS54LCBcInB4LCBcIikuY29uY2F0KG5ld1RyYW5zZm9ybS55LCBcInB4LCAwKVwiKTtcbiAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlRFpGb3JSZW1vdmFsQWZ0ZXJEcm9wKGR6LCBkZXN0cm95KSB7XG4gIHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3AucHVzaCh7XG4gICAgZHo6IGR6LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfSk7XG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGhpZGVFbGVtZW50KGR6KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR6KTtcbiAgfSk7XG59XG4vKiBjbGVhbnVwICovXG5mdW5jdGlvbiBjbGVhbnVwUG9zdERyb3AoKSB7XG4gIGRyYWdnZWRFbC5yZW1vdmUoKTtcbiAgb3JpZ2luYWxEcmFnVGFyZ2V0LnJlbW92ZSgpO1xuICBpZiAoc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcC5sZW5ndGgpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJ3aWxsIGRlc3Ryb3kgem9uZXMgdGhhdCB3ZXJlIHJlbW92ZWQgZHVyaW5nIGRyYWdcIiwgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcF07XG4gICAgfSk7XG4gICAgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcC5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZHogPSBfcmVmLmR6LFxuICAgICAgICBkZXN0cm95ID0gX3JlZi5kZXN0cm95O1xuICAgICAgZGVzdHJveSgpO1xuICAgICAgZHoucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcCA9IFtdO1xuICB9XG4gIGRyYWdnZWRFbCA9IHVuZGVmaW5lZDtcbiAgb3JpZ2luYWxEcmFnVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICBkcmFnZ2VkRWxEYXRhID0gdW5kZWZpbmVkO1xuICBkcmFnZ2VkRWxUeXBlID0gdW5kZWZpbmVkO1xuICBvcmlnaW5Ecm9wWm9uZSA9IHVuZGVmaW5lZDtcbiAgb3JpZ2luSW5kZXggPSB1bmRlZmluZWQ7XG4gIHNoYWRvd0VsRGF0YSA9IHVuZGVmaW5lZDtcbiAgc2hhZG93RWxEcm9wWm9uZSA9IHVuZGVmaW5lZDtcbiAgZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gZmFsc2U7XG4gIGZpbmFsaXppbmdQcmV2aW91c0RyYWcgPSBmYWxzZTtcbiAgdW5sb2NrT3JpZ2luRHpNaW5EaW1lbnNpb25zID0gdW5kZWZpbmVkO1xuICBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlO1xufVxuZnVuY3Rpb24gZG5kem9uZShub2RlLCBvcHRpb25zKSB7XG4gIHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuICB2YXIgY29uZmlnID0ge1xuICAgIGl0ZW1zOiB1bmRlZmluZWQsXG4gICAgdHlwZTogdW5kZWZpbmVkLFxuICAgIGZsaXBEdXJhdGlvbk1zOiAwLFxuICAgIGRyYWdEaXNhYmxlZDogZmFsc2UsXG4gICAgbW9ycGhEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzOiBbXSxcbiAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudDogZnVuY3Rpb24gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQoKSB7fSxcbiAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3I6IGZhbHNlXG4gIH07XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkbmR6b25lIGdvb2QgdG8gZ28gb3B0aW9uczogXCIuY29uY2F0KHRvU3RyaW5nKG9wdGlvbnMpLCBcIiwgY29uZmlnOiBcIikuY29uY2F0KHRvU3RyaW5nKGNvbmZpZykpLCB7XG4gICAgICBub2RlOiBub2RlXG4gICAgfV07XG4gIH0pO1xuICB2YXIgZWxUb0lkeCA9IG5ldyBNYXAoKTtcbiAgZnVuY3Rpb24gYWRkTWF5YmVMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRmFsc2VBbGFybSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZUZhbHNlQWxhcm0sIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlTWF5YmVMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZU1heWJlRHJhZ1N0YXJ0KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRmFsc2VBbGFybSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBoYW5kbGVGYWxzZUFsYXJtKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVGYWxzZUFsYXJtKGUpIHtcbiAgICByZW1vdmVNYXliZUxpc3RlbmVycygpO1xuICAgIG9yaWdpbmFsRHJhZ1RhcmdldCA9IHVuZGVmaW5lZDtcbiAgICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gZHJhZ2dpbmcgaW5pdGlhdGVkIGJ5IHRvdWNoIGV2ZW50cyBwcmV2ZW50cyBvbmNsaWNrIGZyb20gaW5pdGlhbGx5IGZpcmluZ1xuICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hlbmRcIikge1xuICAgICAgZS50YXJnZXQuY2xpY2soKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB7XG4gICAgICB4OiBjLmNsaWVudFgsXG4gICAgICB5OiBjLmNsaWVudFlcbiAgICB9O1xuICAgIGlmIChNYXRoLmFicyhjdXJyZW50TW91c2VQb3NpdGlvbi54IC0gZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbi54KSA+PSBNSU5fTU9WRU1FTlRfQkVGT1JFX0RSQUdfU1RBUlRfUFggfHwgTWF0aC5hYnMoY3VycmVudE1vdXNlUG9zaXRpb24ueSAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueSkgPj0gTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYKSB7XG4gICAgICByZW1vdmVNYXliZUxpc3RlbmVycygpO1xuICAgICAgaGFuZGxlRHJhZ1N0YXJ0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy8gb24gc2FmYXJpIGNsaWNraW5nIG9uIGEgc2VsZWN0IGVsZW1lbnQgZG9lc24ndCBmaXJlIG1vdXNldXAgYXQgdGhlIGVuZCBvZiB0aGUgY2xpY2sgYW5kIGluIGdlbmVyYWwgdGhpcyBtYWtlcyBtb3JlIHNlbnNlXG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQgJiYgKGUudGFyZ2V0LnZhbHVlICE9PSB1bmRlZmluZWQgfHwgZS50YXJnZXQuaXNDb250ZW50RWRpdGFibGUpKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwid29uJ3QgaW5pdGlhdGUgZHJhZyBvbiBhIG5lc3RlZCBpbnB1dCBlbGVtZW50XCI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcHJldmVudHMgcmVzcG9uZGluZyB0byBhbnkgYnV0dG9uIGJ1dCBsZWZ0IGNsaWNrIHdoaWNoIGVxdWFscyAwICh3aGljaCBpcyBmYWxzeSlcbiAgICBpZiAoZS5idXR0b24pIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJpZ25vcmluZyBub25lIGxlZnQgY2xpY2sgYnV0dG9uOiBcIi5jb25jYXQoZS5idXR0b24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1dvcmtpbmdPblByZXZpb3VzRHJhZykge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImNhbm5vdCBzdGFydCBhIG5ldyBkcmFnIGJlZm9yZSBmaW5hbGl6aW5nIHByZXZpb3VzIG9uZVwiO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciBjID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcbiAgICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0ge1xuICAgICAgeDogYy5jbGllbnRYLFxuICAgICAgeTogYy5jbGllbnRZXG4gICAgfTtcbiAgICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IF9vYmplY3RTcHJlYWQyKHt9LCBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uKTtcbiAgICBvcmlnaW5hbERyYWdUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgYWRkTWF5YmVMaXN0ZW5lcnMoKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVEcmFnU3RhcnQoKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW1wiZHJhZyBzdGFydCBjb25maWc6IFwiLmNvbmNhdCh0b1N0cmluZyhjb25maWcpKSwgb3JpZ2luYWxEcmFnVGFyZ2V0XTtcbiAgICB9KTtcbiAgICBpc1dvcmtpbmdPblByZXZpb3VzRHJhZyA9IHRydWU7XG5cbiAgICAvLyBpbml0aWFsaXNpbmcgZ2xvYmFsc1xuICAgIHZhciBjdXJyZW50SWR4ID0gZWxUb0lkeC5nZXQob3JpZ2luYWxEcmFnVGFyZ2V0KTtcbiAgICBvcmlnaW5JbmRleCA9IGN1cnJlbnRJZHg7XG4gICAgb3JpZ2luRHJvcFpvbmUgPSBvcmlnaW5hbERyYWdUYXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAvKiogQHR5cGUge1NoYWRvd1Jvb3QgfCBIVE1MRG9jdW1lbnQgfCBFbGVtZW50IH0gKi9cbiAgICB2YXIgcm9vdE5vZGUgPSBvcmlnaW5Ecm9wWm9uZS5jbG9zZXN0KFwiZGlhbG9nXCIpIHx8IG9yaWdpbkRyb3Bab25lLmdldFJvb3ROb2RlKCk7XG4gICAgdmFyIG9yaWdpbkRyb3Bab25lUm9vdCA9IHJvb3ROb2RlLmJvZHkgfHwgcm9vdE5vZGU7XG4gICAgdmFyIG9yaWdpbmFsSXRlbXMgPSBjb25maWcuaXRlbXMsXG4gICAgICB0eXBlID0gY29uZmlnLnR5cGUsXG4gICAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBjb25maWcuY2VudHJlRHJhZ2dlZE9uQ3Vyc29yO1xuICAgIHZhciBpdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheShvcmlnaW5hbEl0ZW1zKTtcbiAgICBkcmFnZ2VkRWxEYXRhID0gaXRlbXNbY3VycmVudElkeF07XG4gICAgZHJhZ2dlZEVsVHlwZSA9IHR5cGU7XG4gICAgc2hhZG93RWxEYXRhID0gY3JlYXRlU2hhZG93RWxEYXRhKGRyYWdnZWRFbERhdGEpO1xuXG4gICAgLy8gY3JlYXRpbmcgdGhlIGRyYWdnYWJsZSBlbGVtZW50XG4gICAgZHJhZ2dlZEVsID0gY3JlYXRlRHJhZ2dlZEVsZW1lbnRGcm9tKG9yaWdpbmFsRHJhZ1RhcmdldCwgY2VudHJlRHJhZ2dlZE9uQ3Vyc29yICYmIGN1cnJlbnRNb3VzZVBvc2l0aW9uKTtcbiAgICBvcmlnaW5hbERyYWdUYXJnZXQuc2V0QXR0cmlidXRlKE9SSUdJTkFMX0RSQUdHRURfSVRFTV9NQVJLRVJfQVRUUklCVVRFLCB0cnVlKTtcblxuICAgIC8vIFdlIHdpbGwga2VlcCB0aGUgb3JpZ2luYWwgZG9tIG5vZGUgaW4gdGhlIGRvbSBiZWNhdXNlIHRvdWNoIGV2ZW50cyBrZWVwIGZpcmluZyBvbiBpdCwgd2Ugd2FudCB0byByZS1hZGQgaXQgYWZ0ZXIgdGhlIGZyYW1ld29yayByZW1vdmVzIGl0XG4gICAgZnVuY3Rpb24ga2VlcE9yaWdpbmFsRWxlbWVudEluRG9tKCkge1xuICAgICAgaWYgKCFkcmFnZ2VkRWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICBvcmlnaW5Ecm9wWm9uZVJvb3QuYXBwZW5kQ2hpbGQoZHJhZ2dlZEVsKTtcbiAgICAgICAgLy8gdG8gcHJldmVudCB0aGUgb3V0bGluZSBmcm9tIGRpc2FwcGVhcmluZ1xuICAgICAgICBkcmFnZ2VkRWwuZm9jdXMoKTtcbiAgICAgICAgd2F0Y2hEcmFnZ2VkRWxlbWVudCgpO1xuICAgICAgICBoaWRlRWxlbWVudChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgICAgICBvcmlnaW5Ecm9wWm9uZVJvb3QuYXBwZW5kQ2hpbGQob3JpZ2luYWxEcmFnVGFyZ2V0KTtcbiAgICAgICAgLy8gYWZ0ZXIgdGhlIHJlbW92YWwgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnQgd2UgY2FuIGdpdmUgdGhlIHNoYWRvdyBlbGVtZW50IHRoZSBvcmlnaW5hbCBpdGVtIGlkIHNvIHRoYXQgdGhlIGhvc3Qgem9uZSBjYW4gZmluZCBpdCBhbmQgcmVuZGVyIGl0IGNvcnJlY3RseSBpZiBpdCBkb2VzIGxvb2t1cHMgYnkgaWRcbiAgICAgICAgc2hhZG93RWxEYXRhW0lURU1fSURfS0VZXSA9IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShrZWVwT3JpZ2luYWxFbGVtZW50SW5Eb20pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGtlZXBPcmlnaW5hbEVsZW1lbnRJbkRvbSk7XG4gICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoQXJyYXkuZnJvbSh0eXBlVG9Ecm9wWm9uZXMuZ2V0KGNvbmZpZy50eXBlKSkuZmlsdGVyKGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6ID09PSBvcmlnaW5Ecm9wWm9uZSB8fCAhZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgfSksIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIH0pO1xuXG4gICAgLy8gcmVtb3ZpbmcgdGhlIG9yaWdpbmFsIGVsZW1lbnQgYnkgcmVtb3ZpbmcgaXRzIGRhdGEgZW50cnlcbiAgICBpdGVtcy5zcGxpY2UoY3VycmVudElkeCwgMSwgc2hhZG93RWxEYXRhKTtcbiAgICB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnMgPSBwcmV2ZW50U2hyaW5raW5nKG9yaWdpbkRyb3Bab25lKTtcbiAgICBkaXNwYXRjaENvbnNpZGVyRXZlbnQob3JpZ2luRHJvcFpvbmUsIGl0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHX1NUQVJURUQsXG4gICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgIH0pO1xuXG4gICAgLy8gaGFuZGluZyBvdmVyIHRvIGdsb2JhbCBoYW5kbGVycyAtIHN0YXJ0aW5nIHRvIHdhdGNoIHRoZSBlbGVtZW50XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVEcm9wLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRHJvcCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBjb25maWd1cmUoX3JlZjIpIHtcbiAgICB2YXIgX3JlZjIkaXRlbXMgPSBfcmVmMi5pdGVtcyxcbiAgICAgIGl0ZW1zID0gX3JlZjIkaXRlbXMgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJGl0ZW1zLFxuICAgICAgX3JlZjIkZmxpcER1cmF0aW9uTXMgPSBfcmVmMi5mbGlwRHVyYXRpb25NcyxcbiAgICAgIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zID0gX3JlZjIkZmxpcER1cmF0aW9uTXMgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRmbGlwRHVyYXRpb25NcyxcbiAgICAgIF9yZWYyJHR5cGUgPSBfcmVmMi50eXBlLFxuICAgICAgbmV3VHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9aT05FX1RZUEUgOiBfcmVmMiR0eXBlLFxuICAgICAgX3JlZjIkZHJhZ0Rpc2FibGVkID0gX3JlZjIuZHJhZ0Rpc2FibGVkLFxuICAgICAgZHJhZ0Rpc2FibGVkID0gX3JlZjIkZHJhZ0Rpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGRyYWdEaXNhYmxlZCxcbiAgICAgIF9yZWYyJG1vcnBoRGlzYWJsZWQgPSBfcmVmMi5tb3JwaERpc2FibGVkLFxuICAgICAgbW9ycGhEaXNhYmxlZCA9IF9yZWYyJG1vcnBoRGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkbW9ycGhEaXNhYmxlZCxcbiAgICAgIF9yZWYyJGRyb3BGcm9tT3RoZXJzRCA9IF9yZWYyLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQsXG4gICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX3JlZjIkZHJvcEZyb21PdGhlcnNEID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGRyb3BGcm9tT3RoZXJzRCxcbiAgICAgIF9yZWYyJGRyb3BUYXJnZXRTdHlsZSA9IF9yZWYyLmRyb3BUYXJnZXRTdHlsZSxcbiAgICAgIGRyb3BUYXJnZXRTdHlsZSA9IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSA9PT0gdm9pZCAwID8gREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSA6IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSxcbiAgICAgIF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9IF9yZWYyLmRyb3BUYXJnZXRDbGFzc2VzLFxuICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkZHJvcFRhcmdldENsYXNzLFxuICAgICAgX3JlZjIkdHJhbnNmb3JtRHJhZ2dlID0gX3JlZjIudHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQsXG4gICAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IF9yZWYyJHRyYW5zZm9ybURyYWdnZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcmVmMiR0cmFuc2Zvcm1EcmFnZ2UsXG4gICAgICBfcmVmMiRjZW50cmVEcmFnZ2VkT24gPSBfcmVmMi5jZW50cmVEcmFnZ2VkT25DdXJzb3IsXG4gICAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBfcmVmMiRjZW50cmVEcmFnZ2VkT24gPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkY2VudHJlRHJhZ2dlZE9uO1xuICAgIGNvbmZpZy5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcyA9IGRyb3BBbmltYXRpb25EdXJhdGlvbk1zO1xuICAgIGlmIChjb25maWcudHlwZSAmJiBuZXdUeXBlICE9PSBjb25maWcudHlwZSkge1xuICAgICAgdW5yZWdpc3RlckRyb3Bab25lKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICB9XG4gICAgY29uZmlnLnR5cGUgPSBuZXdUeXBlO1xuICAgIGNvbmZpZy5pdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheShpdGVtcyk7XG4gICAgY29uZmlnLmRyYWdEaXNhYmxlZCA9IGRyYWdEaXNhYmxlZDtcbiAgICBjb25maWcubW9ycGhEaXNhYmxlZCA9IG1vcnBoRGlzYWJsZWQ7XG4gICAgY29uZmlnLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50ID0gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQ7XG4gICAgY29uZmlnLmNlbnRyZURyYWdnZWRPbkN1cnNvciA9IGNlbnRyZURyYWdnZWRPbkN1cnNvcjtcblxuICAgIC8vIHJlYWx0aW1lIHVwZGF0ZSBmb3IgZHJvcFRhcmdldFN0eWxlXG4gICAgaWYgKGluaXRpYWxpemVkICYmIGlzV29ya2luZ09uUHJldmlvdXNEcmFnICYmICFmaW5hbGl6aW5nUHJldmlvdXNEcmFnICYmICghYXJlT2JqZWN0c1NoYWxsb3dFcXVhbChkcm9wVGFyZ2V0U3R5bGUsIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGUpIHx8ICFhcmVBcnJheXNTaGFsbG93RXF1YWxTYW1lT3JkZXIoZHJvcFRhcmdldENsYXNzZXMsIGNvbmZpZy5kcm9wVGFyZ2V0Q2xhc3NlcykpKSB7XG4gICAgICBzdHlsZUluYWN0aXZlRHJvcFpvbmVzKFtub2RlXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmRyb3BUYXJnZXRTdHlsZTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BUYXJnZXRDbGFzc2VzO1xuICAgICAgfSk7XG4gICAgICBzdHlsZUFjdGl2ZURyb3Bab25lcyhbbm9kZV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BUYXJnZXRTdHlsZTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRyb3BUYXJnZXRDbGFzc2VzO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGUgPSBkcm9wVGFyZ2V0U3R5bGU7XG4gICAgY29uZmlnLmRyb3BUYXJnZXRDbGFzc2VzID0gX3RvQ29uc3VtYWJsZUFycmF5KGRyb3BUYXJnZXRDbGFzc2VzKTtcblxuICAgIC8vIHJlYWx0aW1lIHVwZGF0ZSBmb3IgZHJvcEZyb21PdGhlcnNEaXNhYmxlZFxuICAgIGZ1bmN0aW9uIGdldENvbmZpZ1Byb3AoZHosIHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopID8gZHpUb0NvbmZpZy5nZXQoZHopW3Byb3BOYW1lXSA6IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgfVxuICAgIGlmIChpbml0aWFsaXplZCAmJiBpc1dvcmtpbmdPblByZXZpb3VzRHJhZyAmJiBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCAhPT0gZHJvcEZyb21PdGhlcnNEaXNhYmxlZCkge1xuICAgICAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQpIHtcbiAgICAgICAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhbbm9kZV0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRTdHlsZVwiKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbmZpZ1Byb3AoZHosIFwiZHJvcFRhcmdldENsYXNzZXNcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0U3R5bGVcIik7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRDbGFzc2VzXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uZmlnLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBkcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuICAgIGR6VG9Db25maWcuc2V0KG5vZGUsIGNvbmZpZyk7XG4gICAgcmVnaXN0ZXJEcm9wWm9uZShub2RlLCBuZXdUeXBlKTtcbiAgICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChjb25maWcuaXRlbXMpO1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgdmFyIGRyYWdnYWJsZUVsID0gbm9kZS5jaGlsZHJlbltpZHhdO1xuICAgICAgc3R5bGVEcmFnZ2FibGUoZHJhZ2dhYmxlRWwsIGRyYWdEaXNhYmxlZCk7XG4gICAgICBpZiAoaWR4ID09PSBzaGFkb3dFbElkeCkge1xuICAgICAgICBpZiAoIW1vcnBoRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3JwaERyYWdnZWRFbGVtZW50VG9CZUxpa2UoZHJhZ2dlZEVsLCBkcmFnZ2FibGVFbCwgY3VycmVudE1vdXNlUG9zaXRpb24ueCwgY3VycmVudE1vdXNlUG9zaXRpb24ueSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50KGRyYWdnZWRFbCwgZHJhZ2dlZEVsRGF0YSwgaWR4KTtcbiAgICAgICAgZGVjb3JhdGVTaGFkb3dFbChkcmFnZ2FibGVFbCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBlbFRvTW91c2VEb3duTGlzdGVuZXIuZ2V0KGRyYWdnYWJsZUVsKSk7XG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBlbFRvTW91c2VEb3duTGlzdGVuZXIuZ2V0KGRyYWdnYWJsZUVsKSk7XG4gICAgICBpZiAoIWRyYWdEaXNhYmxlZCkge1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICAgIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5zZXQoZHJhZ2dhYmxlRWwsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgICB9XG4gICAgICAvLyB1cGRhdGluZyB0aGUgaWR4XG4gICAgICBlbFRvSWR4LnNldChkcmFnZ2FibGVFbCwgaWR4KTtcbiAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25maWd1cmUob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUobmV3T3B0aW9ucykge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcInBvaW50ZXIgZG5kem9uZSB3aWxsIHVwZGF0ZSBuZXdPcHRpb25zOiBcIi5jb25jYXQodG9TdHJpbmcobmV3T3B0aW9ucykpO1xuICAgICAgfSk7XG4gICAgICBjb25maWd1cmUobmV3T3B0aW9ucyk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgZnVuY3Rpb24gZGVzdHJveUR6KCkge1xuICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gXCJwb2ludGVyIGRuZHpvbmUgd2lsbCBkZXN0cm95XCI7XG4gICAgICAgIH0pO1xuICAgICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUobm9kZSwgZHpUb0NvbmZpZy5nZXQobm9kZSkudHlwZSk7XG4gICAgICAgIGR6VG9Db25maWdbXCJkZWxldGVcIl0obm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNXb3JraW5nT25QcmV2aW91c0RyYWcgJiYgIW5vZGUuY2xvc2VzdChcIltcIi5jb25jYXQoT1JJR0lOQUxfRFJBR0dFRF9JVEVNX01BUktFUl9BVFRSSUJVVEUsIFwiXVwiKSkpIHtcbiAgICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgYmUgc2NoZWR1bGVkIGZvciBkZXN0cnVjdGlvblwiO1xuICAgICAgICB9KTtcbiAgICAgICAgc2NoZWR1bGVEWkZvclJlbW92YWxBZnRlckRyb3Aobm9kZSwgZGVzdHJveUR6KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlc3Ryb3lEeigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIF9JRF9UT19JTlNUUlVDVElPTjtcbnZhciBJTlNUUlVDVElPTl9JRHMgPSB7XG4gIERORF9aT05FX0FDVElWRTogXCJkbmQtem9uZS1hY3RpdmVcIixcbiAgRE5EX1pPTkVfRFJBR19ESVNBQkxFRDogXCJkbmQtem9uZS1kcmFnLWRpc2FibGVkXCJcbn07XG52YXIgSURfVE9fSU5TVFJVQ1RJT04gPSAoX0lEX1RPX0lOU1RSVUNUSU9OID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfSURfVE9fSU5TVFJVQ1RJT04sIElOU1RSVUNUSU9OX0lEcy5ETkRfWk9ORV9BQ1RJVkUsIFwiVGFiIHRvIG9uZSB0aGUgaXRlbXMgYW5kIHByZXNzIHNwYWNlLWJhciBvciBlbnRlciB0byBzdGFydCBkcmFnZ2luZyBpdFwiKSwgX2RlZmluZVByb3BlcnR5KF9JRF9UT19JTlNUUlVDVElPTiwgSU5TVFJVQ1RJT05fSURzLkRORF9aT05FX0RSQUdfRElTQUJMRUQsIFwiVGhpcyBpcyBhIGRpc2FibGVkIGRyYWcgYW5kIGRyb3AgbGlzdFwiKSwgX0lEX1RPX0lOU1RSVUNUSU9OKTtcbnZhciBBTEVSVF9ESVZfSUQgPSBcImRuZC1hY3Rpb24tYXJpYS1hbGVydFwiO1xudmFyIGFsZXJ0c0RpdjtcbmZ1bmN0aW9uIGluaXRBcmlhT25Ccm93c2VyKCkge1xuICBpZiAoYWxlcnRzRGl2KSB7XG4gICAgLy8gaXQgaXMgYWxyZWFkeSBpbml0aWFsaXplZFxuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXR0aW5nIHRoZSBkeW5hbWljIGFsZXJ0c1xuICBhbGVydHNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAoZnVuY3Rpb24gaW5pdEFsZXJ0c0RpdigpIHtcbiAgICBhbGVydHNEaXYuaWQgPSBBTEVSVF9ESVZfSUQ7XG4gICAgLy8gdGFiIGluZGV4IC0xIG1ha2VzIHRoZSBhbGVydCBiZSByZWFkIHR3aWNlIG9uIGNocm9tZSBmb3Igc29tZSByZWFzb25cbiAgICAvL2FsZXJ0c0Rpdi50YWJJbmRleCA9IC0xO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUuYm90dG9tID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUuekluZGV4ID0gXCItNVwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLmhlaWdodCA9IFwiMFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuICAgIGFsZXJ0c0Rpdi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYWxlcnRcIik7XG4gIH0pKCk7XG4gIGRvY3VtZW50LmJvZHkucHJlcGVuZChhbGVydHNEaXYpO1xuXG4gIC8vIHNldHRpbmcgdGhlIGluc3RydWN0aW9uc1xuICBPYmplY3QuZW50cmllcyhJRF9UT19JTlNUUlVDVElPTikuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgaWQgPSBfcmVmMlswXSxcbiAgICAgIHR4dCA9IF9yZWYyWzFdO1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5LnByZXBlbmQoaW5zdHJ1Y3Rpb25Ub0hpZGRlbkRpdihpZCwgdHh0KSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSBzdGF0aWMgYXJpYSBpbnN0cnVjdGlvbnMgc28gdGhleSBjYW4gYmUgYXR0YWNoZWQgdG8gem9uZXNcbiAqIEByZXR1cm4ge3tETkRfWk9ORV9BQ1RJVkU6IHN0cmluZywgRE5EX1pPTkVfRFJBR19ESVNBQkxFRDogc3RyaW5nfSB8IG51bGx9IC0gdGhlIElEcyBmb3Igc3RhdGljIGFyaWEgaW5zdHJ1Y3Rpb24gKHRvIGJlIHVzZWQgdmlhIGFyaWEtZGVzY3JpYmVkYnkpIG9yIG51bGwgb24gdGhlIHNlcnZlclxuICovXG5mdW5jdGlvbiBpbml0QXJpYSgpIHtcbiAgaWYgKGlzT25TZXJ2ZXIpIHJldHVybiBudWxsO1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgaW5pdEFyaWFPbkJyb3dzZXIoKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgaW5pdEFyaWFPbkJyb3dzZXIpO1xuICB9XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgSU5TVFJVQ1RJT05fSURzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCB0aGUgYXJ0aWZhY3RzIChkb20gZWxlbWVudHMpIGFkZGVkIGJ5IHRoaXMgbW9kdWxlXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lBcmlhKCkge1xuICBpZiAoaXNPblNlcnZlciB8fCAhYWxlcnRzRGl2KSByZXR1cm47XG4gIE9iamVjdC5rZXlzKElEX1RPX0lOU1RSVUNUSU9OKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBfZG9jdW1lbnQkZ2V0RWxlbWVudEI7XG4gICAgcmV0dXJuIChfZG9jdW1lbnQkZ2V0RWxlbWVudEIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpID09PSBudWxsIHx8IF9kb2N1bWVudCRnZXRFbGVtZW50QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RvY3VtZW50JGdldEVsZW1lbnRCLnJlbW92ZSgpO1xuICB9KTtcbiAgYWxlcnRzRGl2LnJlbW92ZSgpO1xuICBhbGVydHNEaXYgPSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpbnN0cnVjdGlvblRvSGlkZGVuRGl2KGlkLCB0eHQpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdi5pZCA9IGlkO1xuICBkaXYuaW5uZXJIVE1MID0gXCI8cD5cIi5jb25jYXQodHh0LCBcIjwvcD5cIik7XG4gIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgZGl2LnN0eWxlLnpJbmRleCA9IFwiLTVcIjtcbiAgcmV0dXJuIGRpdjtcbn1cblxuLyoqXG4gKiBXaWxsIG1ha2UgdGhlIHNjcmVlbiByZWFkZXIgYWxlcnQgdGhlIHByb3ZpZGVkIHRleHQgdG8gdGhlIHVzZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eHRcbiAqL1xuZnVuY3Rpb24gYWxlcnRUb1NjcmVlblJlYWRlcih0eHQpIHtcbiAgaWYgKGlzT25TZXJ2ZXIpIHJldHVybjtcbiAgaWYgKCFhbGVydHNEaXYpIHtcbiAgICBpbml0QXJpYU9uQnJvd3NlcigpO1xuICB9XG4gIGFsZXJ0c0Rpdi5pbm5lckhUTUwgPSBcIlwiO1xuICB2YXIgYWxlcnRUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodHh0KTtcbiAgYWxlcnRzRGl2LmFwcGVuZENoaWxkKGFsZXJ0VGV4dCk7XG4gIC8vIHRoaXMgaXMgbmVlZGVkIGZvciBTYWZhcmlcbiAgYWxlcnRzRGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgYWxlcnRzRGl2LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZVwiO1xufVxuXG52YXIgREVGQVVMVF9EUk9QX1pPTkVfVFlQRSQxID0gXCItLWFueS0tXCI7XG52YXIgREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSQxID0ge1xuICBvdXRsaW5lOiBcInJnYmEoMjU1LCAyNTUsIDEwMiwgMC43KSBzb2xpZCAycHhcIlxufTtcbnZhciBpc0RyYWdnaW5nID0gZmFsc2U7XG52YXIgZHJhZ2dlZEl0ZW1UeXBlO1xudmFyIGZvY3VzZWREejtcbnZhciBmb2N1c2VkRHpMYWJlbCA9IFwiXCI7XG52YXIgZm9jdXNlZEl0ZW07XG52YXIgZm9jdXNlZEl0ZW1JZDtcbnZhciBmb2N1c2VkSXRlbUxhYmVsID0gXCJcIjtcbnZhciBhbGxEcmFnVGFyZ2V0cyA9IG5ldyBXZWFrU2V0KCk7XG52YXIgZWxUb0tleURvd25MaXN0ZW5lcnMgPSBuZXcgV2Vha01hcCgpO1xudmFyIGVsVG9Gb2N1c0xpc3RlbmVycyA9IG5ldyBXZWFrTWFwKCk7XG52YXIgZHpUb0hhbmRsZXMgPSBuZXcgTWFwKCk7XG52YXIgZHpUb0NvbmZpZyQxID0gbmV3IE1hcCgpO1xudmFyIHR5cGVUb0Ryb3Bab25lcyQxID0gbmV3IE1hcCgpO1xuXG4vKiBUT0RPIChwb3RlbnRpYWxseSlcbiAqIHdoYXQncyB0aGUgZGVhbCB3aXRoIHRoZSBibGFjayBib3JkZXIgb2Ygdm9pY2UtcmVhZGVyIG5vdCBmb2xsb3dpbmcgZm9jdXM/XG4gKiBtYXliZSBrZWVwIGZvY3VzIG9uIHRoZSBsYXN0IGRyYWdnZWQgaXRlbSB1cG9uIGRyb3A/XG4gKi9cblxudmFyIElOU1RSVUNUSU9OX0lEcyQxO1xuXG4vKiBkcm9wLXpvbmVzIHJlZ2lzdHJhdGlvbiBtYW5hZ2VtZW50ICovXG5mdW5jdGlvbiByZWdpc3RlckRyb3Bab25lJDEoZHJvcFpvbmVFbCwgdHlwZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZWdpc3RlcmluZyBkcm9wLXpvbmUgaWYgYWJzZW50XCI7XG4gIH0pO1xuICBpZiAodHlwZVRvRHJvcFpvbmVzJDEuc2l6ZSA9PT0gMCkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiYWRkaW5nIGdsb2JhbCBrZXlkb3duIGFuZCBjbGljayBoYW5kbGVyc1wiO1xuICAgIH0pO1xuICAgIElOU1RSVUNUSU9OX0lEcyQxID0gaW5pdEFyaWEoKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZ2xvYmFsS2V5RG93bkhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZ2xvYmFsQ2xpY2tIYW5kbGVyKTtcbiAgfVxuICBpZiAoIXR5cGVUb0Ryb3Bab25lcyQxLmhhcyh0eXBlKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcyQxLnNldCh0eXBlLCBuZXcgU2V0KCkpO1xuICB9XG4gIGlmICghdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpLmhhcyhkcm9wWm9uZUVsKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcyQxLmdldCh0eXBlKS5hZGQoZHJvcFpvbmVFbCk7XG4gICAgaW5jcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpO1xuICB9XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVyRHJvcFpvbmUkMShkcm9wWm9uZUVsLCB0eXBlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcInVucmVnaXN0ZXJpbmcgZHJvcC16b25lXCI7XG4gIH0pO1xuICBpZiAoZm9jdXNlZER6ID09PSBkcm9wWm9uZUVsKSB7XG4gICAgaGFuZGxlRHJvcCQxKCk7XG4gIH1cbiAgdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpW1wiZGVsZXRlXCJdKGRyb3Bab25lRWwpO1xuICBkZWNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG4gIGlmICh0eXBlVG9Ecm9wWm9uZXMkMS5nZXQodHlwZSkuc2l6ZSA9PT0gMCkge1xuICAgIHR5cGVUb0Ryb3Bab25lcyQxW1wiZGVsZXRlXCJdKHR5cGUpO1xuICB9XG4gIGlmICh0eXBlVG9Ecm9wWm9uZXMkMS5zaXplID09PSAwKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJyZW1vdmluZyBnbG9iYWwga2V5ZG93biBhbmQgY2xpY2sgaGFuZGxlcnNcIjtcbiAgICB9KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZ2xvYmFsS2V5RG93bkhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZ2xvYmFsQ2xpY2tIYW5kbGVyKTtcbiAgICBJTlNUUlVDVElPTl9JRHMkMSA9IHVuZGVmaW5lZDtcbiAgICBkZXN0cm95QXJpYSgpO1xuICB9XG59XG5mdW5jdGlvbiBnbG9iYWxLZXlEb3duSGFuZGxlcihlKSB7XG4gIGlmICghaXNEcmFnZ2luZykgcmV0dXJuO1xuICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAge1xuICAgICAgICBoYW5kbGVEcm9wJDEoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdsb2JhbENsaWNrSGFuZGxlcigpIHtcbiAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gIGlmICghYWxsRHJhZ1RhcmdldHMuaGFzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJjbGlja2VkIG91dHNpZGUgb2YgYW55IGRyYWdnYWJsZVwiO1xuICAgIH0pO1xuICAgIGhhbmRsZURyb3AkMSgpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVab25lRm9jdXMoZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ6b25lIGZvY3VzXCI7XG4gIH0pO1xuICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgdmFyIG5ld2x5Rm9jdXNlZER6ID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpZiAobmV3bHlGb2N1c2VkRHogPT09IGZvY3VzZWREeikgcmV0dXJuO1xuICBmb2N1c2VkRHpMYWJlbCA9IG5ld2x5Rm9jdXNlZER6LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIikgfHwgXCJcIjtcbiAgdmFyIF9kelRvQ29uZmlnJGdldCA9IGR6VG9Db25maWckMS5nZXQoZm9jdXNlZER6KSxcbiAgICBvcmlnaW5JdGVtcyA9IF9kelRvQ29uZmlnJGdldC5pdGVtcztcbiAgdmFyIG9yaWdpbkl0ZW0gPSBvcmlnaW5JdGVtcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bSVRFTV9JRF9LRVldID09PSBmb2N1c2VkSXRlbUlkO1xuICB9KTtcbiAgdmFyIG9yaWdpbklkeCA9IG9yaWdpbkl0ZW1zLmluZGV4T2Yob3JpZ2luSXRlbSk7XG4gIHZhciBpdGVtVG9Nb3ZlID0gb3JpZ2luSXRlbXMuc3BsaWNlKG9yaWdpbklkeCwgMSlbMF07XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQyID0gZHpUb0NvbmZpZyQxLmdldChuZXdseUZvY3VzZWREeiksXG4gICAgdGFyZ2V0SXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQyLml0ZW1zLFxuICAgIGF1dG9BcmlhRGlzYWJsZWQgPSBfZHpUb0NvbmZpZyRnZXQyLmF1dG9BcmlhRGlzYWJsZWQ7XG4gIGlmIChuZXdseUZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPCBmb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIHx8IG5ld2x5Rm9jdXNlZER6LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPCBmb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkge1xuICAgIHRhcmdldEl0ZW1zLnB1c2goaXRlbVRvTW92ZSk7XG4gICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhcmdldEl0ZW1zLnVuc2hpZnQoaXRlbVRvTW92ZSk7XG4gICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgfVxuICB9XG4gIHZhciBkekZyb20gPSBmb2N1c2VkRHo7XG4gIGRpc3BhdGNoRmluYWxpemVFdmVudChkekZyb20sIG9yaWdpbkl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX0FOT1RIRVIsXG4gICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gIH0pO1xuICBkaXNwYXRjaEZpbmFsaXplRXZlbnQobmV3bHlGb2N1c2VkRHosIHRhcmdldEl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gIH0pO1xuICBmb2N1c2VkRHogPSBuZXdseUZvY3VzZWREejtcbn1cbmZ1bmN0aW9uIHRyaWdnZXJBbGxEenNVcGRhdGUoKSB7XG4gIGR6VG9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYsIGR6KSB7XG4gICAgdmFyIHVwZGF0ZSA9IF9yZWYudXBkYXRlO1xuICAgIHJldHVybiB1cGRhdGUoZHpUb0NvbmZpZyQxLmdldChkeikpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZURyb3AkMSgpIHtcbiAgdmFyIGRpc3BhdGNoQ29uc2lkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImRyb3BcIjtcbiAgfSk7XG4gIGlmICghZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiU3RvcHBlZCBkcmFnZ2luZyBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsKSk7XG4gIH1cbiAgaWYgKGFsbERyYWdUYXJnZXRzLmhhcyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGlmIChkaXNwYXRjaENvbnNpZGVyKSB7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGZvY3VzZWREeiwgZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLml0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHX1NUT1BQRUQsXG4gICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5LRVlCT0FSRFxuICAgIH0pO1xuICB9XG4gIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXModHlwZVRvRHJvcFpvbmVzJDEuZ2V0KGRyYWdnZWRJdGVtVHlwZSksIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gIH0sIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0Q2xhc3NlcztcbiAgfSk7XG4gIGZvY3VzZWRJdGVtID0gbnVsbDtcbiAgZm9jdXNlZEl0ZW1JZCA9IG51bGw7XG4gIGZvY3VzZWRJdGVtTGFiZWwgPSBcIlwiO1xuICBkcmFnZ2VkSXRlbVR5cGUgPSBudWxsO1xuICBmb2N1c2VkRHogPSBudWxsO1xuICBmb2N1c2VkRHpMYWJlbCA9IFwiXCI7XG4gIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlckFsbER6c1VwZGF0ZSgpO1xufVxuLy8vLy8vXG5mdW5jdGlvbiBkbmR6b25lJDEobm9kZSwgb3B0aW9ucykge1xuICB2YXIgY29uZmlnID0ge1xuICAgIGl0ZW1zOiB1bmRlZmluZWQsXG4gICAgdHlwZTogdW5kZWZpbmVkLFxuICAgIGRyYWdEaXNhYmxlZDogZmFsc2UsXG4gICAgem9uZVRhYkluZGV4OiAwLFxuICAgIHpvbmVJdGVtVGFiSW5kZXg6IDAsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFJDEsXG4gICAgZHJvcFRhcmdldENsYXNzZXM6IFtdLFxuICAgIGF1dG9BcmlhRGlzYWJsZWQ6IGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPD0gMSkgcmV0dXJuO1xuICAgIGFyci5zcGxpY2UoaiwgMSwgYXJyLnNwbGljZShpLCAxLCBhcnJbal0pWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJoYW5kbGluZyBrZXkgZG93blwiLCBlLmtleV07XG4gICAgfSk7XG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBhZmZlY3QgbmVzdGVkIGlucHV0IGVsZW1lbnRzIG9yIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgICAgICAgIGlmICgoZS50YXJnZXQuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCB8fCBlLnRhcmdldC5ocmVmIHx8IGUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSAmJiAhYWxsRHJhZ1RhcmdldHMuaGFzKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnRpbmcgc2Nyb2xsaW5nIG9uIHNwYWNlYmFyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgLy8gVE9ETyAtIHNob3VsZCB0aGlzIHRyaWdnZXIgYSBkcm9wPyBvbmx5IGhlcmUgb3IgaW4gZ2VuZXJhbCAoYXMgaW4gd2hlbiBoaXR0aW5nIHNwYWNlIG9yIGVudGVyIG91dHNpZGUgb2YgYW55IHpvbmUpP1xuICAgICAgICAgICAgaGFuZGxlRHJvcCQxKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRyYWcgc3RhcnRcbiAgICAgICAgICAgIGhhbmRsZURyYWdTdGFydChlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0MyA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDMuaXRlbXM7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgICB2YXIgaWR4ID0gY2hpbGRyZW4uaW5kZXhPZihlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcImFycm93IGRvd25cIiwgaWR4XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoaWR4IDwgY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKCFjb25maWcuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgICAgICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gcG9zaXRpb24gXCIpLmNvbmNhdChpZHggKyAyLCBcIiBpbiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2FwKGl0ZW1zLCBpZHgsIGlkeCArIDEpO1xuICAgICAgICAgICAgZGlzcGF0Y2hGaW5hbGl6ZUV2ZW50KG5vZGUsIGl0ZW1zLCB7XG4gICAgICAgICAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRST1BQRURfSU5UT19aT05FLFxuICAgICAgICAgICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgICAgICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0NCA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICBfaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ0Lml0ZW1zO1xuICAgICAgICAgIHZhciBfY2hpbGRyZW4gPSBBcnJheS5mcm9tKG5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgIHZhciBfaWR4ID0gX2NoaWxkcmVuLmluZGV4T2YoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXCJhcnJvdyB1cFwiLCBfaWR4XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoX2lkeCA+IDApIHtcbiAgICAgICAgICAgIGlmICghY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgYWxlcnRUb1NjcmVlblJlYWRlcihcIk1vdmVkIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwsIFwiIHRvIHBvc2l0aW9uIFwiKS5jb25jYXQoX2lkeCwgXCIgaW4gdGhlIGxpc3QgXCIpLmNvbmNhdChmb2N1c2VkRHpMYWJlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dhcChfaXRlbXMsIF9pZHgsIF9pZHggLSAxKTtcbiAgICAgICAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChub2RlLCBfaXRlbXMsIHtcbiAgICAgICAgICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICAgICAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgICAgICAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVEcmFnU3RhcnQoZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZHJhZyBzdGFydFwiO1xuICAgIH0pO1xuICAgIHNldEN1cnJlbnRGb2N1c2VkSXRlbShlLmN1cnJlbnRUYXJnZXQpO1xuICAgIGZvY3VzZWREeiA9IG5vZGU7XG4gICAgZHJhZ2dlZEl0ZW1UeXBlID0gY29uZmlnLnR5cGU7XG4gICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgdmFyIGRyb3BUYXJnZXRzID0gQXJyYXkuZnJvbSh0eXBlVG9Ecm9wWm9uZXMkMS5nZXQoY29uZmlnLnR5cGUpKS5maWx0ZXIoZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHogPT09IGZvY3VzZWREeiB8fCAhZHpUb0NvbmZpZyQxLmdldChkeikuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgICB9KTtcbiAgICBzdHlsZUFjdGl2ZURyb3Bab25lcyhkcm9wVGFyZ2V0cywgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZyQxLmdldChkeikuZHJvcFRhcmdldFN0eWxlO1xuICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIH0pO1xuICAgIGlmICghY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIHZhciBtc2cgPSBcIlN0YXJ0ZWQgZHJhZ2dpbmcgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIuIFVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlIGl0IHdpdGhpbiBpdHMgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKTtcbiAgICAgIGlmIChkcm9wVGFyZ2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG1zZyArPSBcIiwgb3IgdGFiIHRvIGFub3RoZXIgbGlzdCBpbiBvcmRlciB0byBtb3ZlIHRoZSBpdGVtIGludG8gaXRcIjtcbiAgICAgIH1cbiAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIobXNnKTtcbiAgICB9XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG5vZGUsIGR6VG9Db25maWckMS5nZXQobm9kZSkuaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RBUlRFRCxcbiAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgfSk7XG4gICAgdHJpZ2dlckFsbER6c1VwZGF0ZSgpO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ID09PSBmb2N1c2VkSXRlbSkgcmV0dXJuO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaGFuZGxlRHJvcCQxKGZhbHNlKTtcbiAgICBoYW5kbGVEcmFnU3RhcnQoZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0Q3VycmVudEZvY3VzZWRJdGVtKGRyYWdnYWJsZUVsKSB7XG4gICAgdmFyIF9kelRvQ29uZmlnJGdldDUgPSBkelRvQ29uZmlnJDEuZ2V0KG5vZGUpLFxuICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ1Lml0ZW1zO1xuICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XG4gICAgdmFyIGZvY3VzZWRJdGVtSWR4ID0gY2hpbGRyZW4uaW5kZXhPZihkcmFnZ2FibGVFbCk7XG4gICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICBmb2N1c2VkSXRlbS50YWJJbmRleCA9IGNvbmZpZy56b25lSXRlbVRhYkluZGV4O1xuICAgIGZvY3VzZWRJdGVtSWQgPSBpdGVtc1tmb2N1c2VkSXRlbUlkeF1bSVRFTV9JRF9LRVldO1xuICAgIGZvY3VzZWRJdGVtTGFiZWwgPSBjaGlsZHJlbltmb2N1c2VkSXRlbUlkeF0uZ2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKSB8fCBcIlwiO1xuICB9XG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShfcmVmMikge1xuICAgIHZhciBfcmVmMiRpdGVtcyA9IF9yZWYyLml0ZW1zLFxuICAgICAgaXRlbXMgPSBfcmVmMiRpdGVtcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMiRpdGVtcyxcbiAgICAgIF9yZWYyJHR5cGUgPSBfcmVmMi50eXBlLFxuICAgICAgbmV3VHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9aT05FX1RZUEUkMSA6IF9yZWYyJHR5cGUsXG4gICAgICBfcmVmMiRkcmFnRGlzYWJsZWQgPSBfcmVmMi5kcmFnRGlzYWJsZWQsXG4gICAgICBkcmFnRGlzYWJsZWQgPSBfcmVmMiRkcmFnRGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZHJhZ0Rpc2FibGVkLFxuICAgICAgX3JlZjIkem9uZVRhYkluZGV4ID0gX3JlZjIuem9uZVRhYkluZGV4LFxuICAgICAgem9uZVRhYkluZGV4ID0gX3JlZjIkem9uZVRhYkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3JlZjIkem9uZVRhYkluZGV4LFxuICAgICAgX3JlZjIkem9uZUl0ZW1UYWJJbmRlID0gX3JlZjIuem9uZUl0ZW1UYWJJbmRleCxcbiAgICAgIHpvbmVJdGVtVGFiSW5kZXggPSBfcmVmMiR6b25lSXRlbVRhYkluZGUgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiR6b25lSXRlbVRhYkluZGUsXG4gICAgICBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPSBfcmVmMi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9yZWYyJGRyb3BGcm9tT3RoZXJzRCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkcm9wRnJvbU90aGVyc0QsXG4gICAgICBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMi5kcm9wVGFyZ2V0U3R5bGUsXG4gICAgICBkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUkMSA6IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSxcbiAgICAgIF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9IF9yZWYyLmRyb3BUYXJnZXRDbGFzc2VzLFxuICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkZHJvcFRhcmdldENsYXNzLFxuICAgICAgX3JlZjIkYXV0b0FyaWFEaXNhYmxlID0gX3JlZjIuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICAgIGF1dG9BcmlhRGlzYWJsZWQgPSBfcmVmMiRhdXRvQXJpYURpc2FibGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkYXV0b0FyaWFEaXNhYmxlO1xuICAgIGNvbmZpZy5pdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheShpdGVtcyk7XG4gICAgY29uZmlnLmRyYWdEaXNhYmxlZCA9IGRyYWdEaXNhYmxlZDtcbiAgICBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgY29uZmlnLnpvbmVUYWJJbmRleCA9IHpvbmVUYWJJbmRleDtcbiAgICBjb25maWcuem9uZUl0ZW1UYWJJbmRleCA9IHpvbmVJdGVtVGFiSW5kZXg7XG4gICAgY29uZmlnLmRyb3BUYXJnZXRTdHlsZSA9IGRyb3BUYXJnZXRTdHlsZTtcbiAgICBjb25maWcuZHJvcFRhcmdldENsYXNzZXMgPSBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICBjb25maWcuYXV0b0FyaWFEaXNhYmxlZCA9IGF1dG9BcmlhRGlzYWJsZWQ7XG4gICAgaWYgKGNvbmZpZy50eXBlICYmIG5ld1R5cGUgIT09IGNvbmZpZy50eXBlKSB7XG4gICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUkMShub2RlLCBjb25maWcudHlwZSk7XG4gICAgfVxuICAgIGNvbmZpZy50eXBlID0gbmV3VHlwZTtcbiAgICByZWdpc3RlckRyb3Bab25lJDEobm9kZSwgbmV3VHlwZSk7XG4gICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIiwgZHJhZ0Rpc2FibGVkKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxpc3RcIik7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiwgZHJhZ0Rpc2FibGVkID8gSU5TVFJVQ1RJT05fSURzJDEuRE5EX1pPTkVfRFJBR19ESVNBQkxFRCA6IElOU1RSVUNUSU9OX0lEcyQxLkRORF9aT05FX0FDVElWRSk7XG4gICAgfVxuICAgIGR6VG9Db25maWckMS5zZXQobm9kZSwgY29uZmlnKTtcbiAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgbm9kZS50YWJJbmRleCA9IG5vZGUgPT09IGZvY3VzZWREeiB8fCBmb2N1c2VkSXRlbS5jb250YWlucyhub2RlKSB8fCBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCB8fCBmb2N1c2VkRHogJiYgY29uZmlnLnR5cGUgIT09IGR6VG9Db25maWckMS5nZXQoZm9jdXNlZER6KS50eXBlID8gLTEgOiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnRhYkluZGV4ID0gY29uZmlnLnpvbmVUYWJJbmRleDtcbiAgICB9XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgaGFuZGxlWm9uZUZvY3VzKTtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlRWwgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgYWxsRHJhZ1RhcmdldHMuYWRkKGRyYWdnYWJsZUVsKTtcbiAgICAgIGRyYWdnYWJsZUVsLnRhYkluZGV4ID0gaXNEcmFnZ2luZyA/IC0xIDogY29uZmlnLnpvbmVJdGVtVGFiSW5kZXg7XG4gICAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgICAgZHJhZ2dhYmxlRWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxpc3RpdGVtXCIpO1xuICAgICAgfVxuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZWxUb0tleURvd25MaXN0ZW5lcnMuZ2V0KGRyYWdnYWJsZUVsKSk7XG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZWxUb0ZvY3VzTGlzdGVuZXJzLmdldChkcmFnZ2FibGVFbCkpO1xuICAgICAgaWYgKCFkcmFnRGlzYWJsZWQpIHtcbiAgICAgICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIGVsVG9LZXlEb3duTGlzdGVuZXJzLnNldChkcmFnZ2FibGVFbCwgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljayk7XG4gICAgICAgIGVsVG9Gb2N1c0xpc3RlbmVycy5zZXQoZHJhZ2dhYmxlRWwsIGhhbmRsZUNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RyYWdnaW5nICYmIGNvbmZpZy5pdGVtc1tpXVtJVEVNX0lEX0tFWV0gPT09IGZvY3VzZWRJdGVtSWQpIHtcbiAgICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFtcImZvY3VzaW5nIG9uXCIsIHtcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBmb2N1c2VkSXRlbUlkOiBmb2N1c2VkSXRlbUlkXG4gICAgICAgICAgfV07XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiBpdCBpcyBhIG5lc3RlZCBkcm9wem9uZSwgaXQgd2FzIHJlLXJlbmRlcmVkIGFuZCB3ZSBuZWVkIHRvIHJlZnJlc2ggb3VyIHBvaW50ZXJcbiAgICAgICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICAgICAgZm9jdXNlZEl0ZW0udGFiSW5kZXggPSBjb25maWcuem9uZUl0ZW1UYWJJbmRleDtcbiAgICAgICAgLy8gd2l0aG91dCB0aGlzIHRoZSBlbGVtZW50IGxvc2VzIGZvY3VzIGlmIGl0IG1vdmVzIGJhY2t3YXJkcyBpbiB0aGUgbGlzdFxuICAgICAgICBkcmFnZ2FibGVFbC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBfbG9vcChpKTtcbiAgICB9XG4gIH1cbiAgY29uZmlndXJlKG9wdGlvbnMpO1xuICB2YXIgaGFuZGxlcyA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwia2V5Ym9hcmQgZG5kem9uZSB3aWxsIHVwZGF0ZSBuZXdPcHRpb25zOiBcIi5jb25jYXQodG9TdHJpbmcobmV3T3B0aW9ucykpO1xuICAgICAgfSk7XG4gICAgICBjb25maWd1cmUobmV3T3B0aW9ucyk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImtleWJvYXJkIGRuZHpvbmUgd2lsbCBkZXN0cm95XCI7XG4gICAgICB9KTtcbiAgICAgIHVucmVnaXN0ZXJEcm9wWm9uZSQxKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICAgIGR6VG9Db25maWckMVtcImRlbGV0ZVwiXShub2RlKTtcbiAgICAgIGR6VG9IYW5kbGVzW1wiZGVsZXRlXCJdKG5vZGUpO1xuICAgIH1cbiAgfTtcbiAgZHpUb0hhbmRsZXMuc2V0KG5vZGUsIGhhbmRsZXMpO1xuICByZXR1cm4gaGFuZGxlcztcbn1cblxudmFyIF9leGNsdWRlZCA9IFtcIml0ZW1zXCIsIFwiZmxpcER1cmF0aW9uTXNcIiwgXCJ0eXBlXCIsIFwiZHJhZ0Rpc2FibGVkXCIsIFwibW9ycGhEaXNhYmxlZFwiLCBcImRyb3BGcm9tT3RoZXJzRGlzYWJsZWRcIiwgXCJ6b25lVGFiSW5kZXhcIiwgXCJ6b25lSXRlbVRhYkluZGV4XCIsIFwiZHJvcFRhcmdldFN0eWxlXCIsIFwiZHJvcFRhcmdldENsYXNzZXNcIiwgXCJ0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudFwiLCBcImF1dG9BcmlhRGlzYWJsZWRcIiwgXCJjZW50cmVEcmFnZ2VkT25DdXJzb3JcIl07XG5cbi8qKlxuICogQSBjdXN0b20gYWN0aW9uIHRvIHR1cm4gYW55IGNvbnRhaW5lciB0byBhIGRuZCB6b25lIGFuZCBhbGwgb2YgaXRzIGRpcmVjdCBjaGlsZHJlbiB0byBkcmFnZ2FibGVzXG4gKiBTdXBwb3J0cyBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIGludGVyYWN0aW9ucy5cbiAqIERpc3BhdGNoZXMgdHdvIGV2ZW50cyB0aGF0IHRoZSBjb250YWluZXIgaXMgZXhwZWN0ZWQgdG8gcmVhY3QgdG8gYnkgbW9kaWZ5aW5nIGl0cyBsaXN0IG9mIGl0ZW1zLFxuICogd2hpY2ggd2lsbCB0aGVuIGZlZWQgYmFjayBpbiB0byB0aGlzIGFjdGlvbiB2aWEgdGhlIHVwZGF0ZSBmdW5jdGlvblxuICpcbiAqIEB0eXBlZGVmIHtvYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7YXJyYXl9IGl0ZW1zIC0gdGhlIGxpc3Qgb2YgaXRlbXMgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGdpdmVuIG5vZGUgKHRoZSBsaXN0IHVzZWQgaW4gdGhlICNlYWNoIGJsb2NrXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3R5cGVdIC0gdGhlIHR5cGUgb2YgdGhlIGRuZCB6b25lLiBjaGlsZHJlbiBkcmFnZ2VkIGZyb20gaGVyZSBjYW4gb25seSBiZSBkcm9wcGVkIGluIG90aGVyIHpvbmVzIG9mIHRoZSBzYW1lIHR5cGUsIGRlZmF1bHQgdG8gYSBiYXNlIHR5cGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmxpcER1cmF0aW9uTXNdIC0gaWYgdGhlIGxpc3QgYW5pbWF0ZWQgdXNpbmcgZmxpcCAocmVjb21tZW5kZWQpLCBzcGVjaWZpZXMgdGhlIGZsaXAgZHVyYXRpb24gc3VjaCB0aGF0IGV2ZXJ5dGhpbmcgc3luY3Mgd2l0aCBpdCB3aXRob3V0IGNvbmZsaWN0LCBkZWZhdWx0cyB0byB6ZXJvXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkcmFnRGlzYWJsZWRdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFttb3JwaERpc2FibGVkXSAtIHdoZXRoZXIgZHJhZ2dlZCBlbGVtZW50IHNob3VsZCBtb3JwaCB0byB6b25lIGRpbWVuc2lvbnNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Ryb3BGcm9tT3RoZXJzRGlzYWJsZWRdXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3pvbmVUYWJJbmRleF0gLSBzZXQgdGhlIHRhYmluZGV4IG9mIHRoZSBsaXN0IGNvbnRhaW5lciB3aGVuIG5vdCBkcmFnZ2luZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFt6b25lSXRlbVRhYkluZGV4XSAtIHNldCB0aGUgdGFiaW5kZXggb2YgdGhlIGxpc3QgY29udGFpbmVyIGl0ZW1zIHdoZW4gbm90IGRyYWdnaW5nXG4gKiBAcHJvcGVydHkge29iamVjdH0gW2Ryb3BUYXJnZXRTdHlsZV1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtkcm9wVGFyZ2V0Q2xhc3Nlc11cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFt0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudF1cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgLSB0aGUgZWxlbWVudCB0byBlbmhhbmNlXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3t1cGRhdGU6IGZ1bmN0aW9uLCBkZXN0cm95OiBmdW5jdGlvbn19XG4gKi9cbmZ1bmN0aW9uIGRuZHpvbmUkMihub2RlLCBvcHRpb25zKSB7XG4gIGlmIChzaG91bGRJZ25vcmVab25lKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge31cbiAgICB9O1xuICB9XG4gIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgdmFyIHBvaW50ZXJab25lID0gZG5kem9uZShub2RlLCBvcHRpb25zKTtcbiAgdmFyIGtleWJvYXJkWm9uZSA9IGRuZHpvbmUkMShub2RlLCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICB2YWxpZGF0ZU9wdGlvbnMobmV3T3B0aW9ucyk7XG4gICAgICBwb2ludGVyWm9uZS51cGRhdGUobmV3T3B0aW9ucyk7XG4gICAgICBrZXlib2FyZFpvbmUudXBkYXRlKG5ld09wdGlvbnMpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHBvaW50ZXJab25lLmRlc3Ryb3koKTtcbiAgICAgIGtleWJvYXJkWm9uZS5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIElmIHRoZSB1c2VyIG1hcmtlZCBzb21ldGhpbmcgaW4gdGhlIGFuY2VzdHJ5IG9mIG91ciBub2RlIGFzIHNoYWRvdyBlbGVtZW50LCB3ZSBjYW4gaWdub3JlIGl0XG4gKiBXZSBuZWVkIHRoZSB1c2VyIHRvIG1hcmsgaXQgZm9yIHVzIGJlY2F1c2Ugc3ZlbHRlIHVwZGF0ZXMgdGhlIGFjdGlvbiBmcm9tIGRlZXAgdG8gc2hhbGxvdyAoYnV0IHJlbmRlcnMgdG9wIGRvd24pXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVab25lKG5vZGUpIHtcbiAgcmV0dXJuICEhbm9kZS5jbG9zZXN0KFwiW1wiLmNvbmNhdChTSEFET1dfRUxFTUVOVF9ISU5UX0FUVFJJQlVURV9OQU1FLCBcIj1cXFwidHJ1ZVxcXCJdXCIpKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIC8qZXNsaW50LWRpc2FibGUqL1xuICB2YXIgaXRlbXMgPSBvcHRpb25zLml0ZW1zLFxuICAgIGZsaXBEdXJhdGlvbk1zID0gb3B0aW9ucy5mbGlwRHVyYXRpb25NcyxcbiAgICB0eXBlID0gb3B0aW9ucy50eXBlLFxuICAgIGRyYWdEaXNhYmxlZCA9IG9wdGlvbnMuZHJhZ0Rpc2FibGVkLFxuICAgIG1vcnBoRGlzYWJsZWQgPSBvcHRpb25zLm1vcnBoRGlzYWJsZWQsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IG9wdGlvbnMuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCxcbiAgICB6b25lVGFiSW5kZXggPSBvcHRpb25zLnpvbmVUYWJJbmRleCxcbiAgICB6b25lSXRlbVRhYkluZGV4ID0gb3B0aW9ucy56b25lSXRlbVRhYkluZGV4LFxuICAgIGRyb3BUYXJnZXRTdHlsZSA9IG9wdGlvbnMuZHJvcFRhcmdldFN0eWxlLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzID0gb3B0aW9ucy5kcm9wVGFyZ2V0Q2xhc3NlcyxcbiAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IG9wdGlvbnMudHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQsXG4gICAgYXV0b0FyaWFEaXNhYmxlZCA9IG9wdGlvbnMuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBvcHRpb25zLmNlbnRyZURyYWdnZWRPbkN1cnNvcixcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIC8qZXNsaW50LWVuYWJsZSovXG4gIGlmIChPYmplY3Qua2V5cyhyZXN0KS5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS53YXJuKFwiZG5kem9uZSB3aWxsIGlnbm9yZSB1bmtub3duIG9wdGlvbnNcIiwgcmVzdCk7XG4gIH1cbiAgaWYgKCFpdGVtcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm5vICdpdGVtcycga2V5IHByb3ZpZGVkIHRvIGRuZHpvbmVcIik7XG4gIH1cbiAgdmFyIGl0ZW1XaXRoTWlzc2luZ0lkID0gaXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhe30uaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBJVEVNX0lEX0tFWSk7XG4gIH0pO1xuICBpZiAoaXRlbVdpdGhNaXNzaW5nSWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nICdcIi5jb25jYXQoSVRFTV9JRF9LRVksIFwiJyBwcm9wZXJ0eSBmb3IgaXRlbSBcIikuY29uY2F0KHRvU3RyaW5nKGl0ZW1XaXRoTWlzc2luZ0lkKSkpO1xuICB9XG4gIGlmIChkcm9wVGFyZ2V0Q2xhc3NlcyAmJiAhQXJyYXkuaXNBcnJheShkcm9wVGFyZ2V0Q2xhc3NlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkcm9wVGFyZ2V0Q2xhc3NlcyBzaG91bGQgYmUgYW4gYXJyYXkgYnV0IGluc3RlYWQgaXQgaXMgYSBcIi5jb25jYXQoX3R5cGVvZihkcm9wVGFyZ2V0Q2xhc3NlcyksIFwiLCBcIikuY29uY2F0KHRvU3RyaW5nKGRyb3BUYXJnZXRDbGFzc2VzKSkpO1xuICB9XG4gIGlmICh6b25lVGFiSW5kZXggJiYgIWlzSW50KHpvbmVUYWJJbmRleCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ6b25lVGFiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyIGJ1dCBpbnN0ZWFkIGl0IGlzIGEgXCIuY29uY2F0KF90eXBlb2Yoem9uZVRhYkluZGV4KSwgXCIsIFwiKS5jb25jYXQodG9TdHJpbmcoem9uZVRhYkluZGV4KSkpO1xuICB9XG4gIGlmICh6b25lSXRlbVRhYkluZGV4ICYmICFpc0ludCh6b25lSXRlbVRhYkluZGV4KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInpvbmVJdGVtVGFiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyIGJ1dCBpbnN0ZWFkIGl0IGlzIGEgXCIuY29uY2F0KF90eXBlb2Yoem9uZUl0ZW1UYWJJbmRleCksIFwiLCBcIikuY29uY2F0KHRvU3RyaW5nKHpvbmVJdGVtVGFiSW5kZXgpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSW50KHZhbHVlKSB7XG4gIHJldHVybiAhaXNOYU4odmFsdWUpICYmIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuICh4IHwgMCkgPT09IHg7XG4gIH0ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShpbml0aWFsVmFsdWUpIHtcbiAgdmFyIF92YWwgPSBpbml0aWFsVmFsdWU7XG4gIHZhciBzdWJzID0gbmV3IFNldCgpO1xuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF92YWw7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWwpIHtcbiAgICAgIF92YWwgPSBuZXdWYWw7XG4gICAgICBBcnJheS5mcm9tKHN1YnMpLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHJldHVybiBjYihfdmFsKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2IpIHtcbiAgICAgIHN1YnMuYWRkKGNiKTtcbiAgICAgIGNiKF92YWwpO1xuICAgIH0sXG4gICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNiKSB7XG4gICAgICBzdWJzW1wiZGVsZXRlXCJdKGNiKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBpc0l0ZW1zRHJhZ0Rpc2FibGVkID0gY3JlYXRlU3RvcmUodHJ1ZSk7XG5mdW5jdGlvbiBnZXRBZGRlZE9wdGlvbnMoKSB7XG4gIHZhciBpc0l0ZW1zRHJhZ0Rpc2FibGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICByZXR1cm4ge1xuICAgIGRyYWdEaXNhYmxlZDogaXNJdGVtc0RyYWdEaXNhYmxlZCxcbiAgICB6b25lSXRlbVRhYkluZGV4OiAtMVxuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gYWN0aW9uIHRoYXQgd3JhcHMgYXJvdW5kIHRoZSBkbmR6b25lIGFjdGlvbiB0byBtYWtlIGl0IGVhc3kgdG8gd29yayB3aXRoIGRyYWcgaGFuZGxlc1xuICogV2hlbiB1c2luZyB0aGlzIHlvdSBtdXN0IGFsc28gdXNlIHRoZSAnZHJhZ0hhbmRsZScgYWN0aW9uIChzZWUgYmVsb3cpIG9uIGFuIGVsZW1lbnQgaW5zaWRlIGVhY2ggaXRlbSB3aXRoaW4gdGhlIHpvbmVcbiAqIENyZWRpdCBmb3IgdGhlIGlkZWEgYW5kIGluaXRpYWwgaW1wbGVtZW50YXRpb24gZ29lcyB0byBAZ2xldWNoIChHcmVnIExldWNoKSBhbmQgQGdlb3ZpZSAoR2VvcmcgVmllbm5hKVxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gd2lsbCBiZSBwYXNzZWQgZG93biB0byB0aGUgZG5kem9uZVxuICogQHJldHVybiB7e3VwZGF0ZTogKG5ld09wdGlvbnM6IE9iamVjdCkgPT4ge30sIGRlc3Ryb3k6ICgpID0+IHt9fX1cbiAqL1xuZnVuY3Rpb24gZHJhZ0hhbmRsZVpvbmUobm9kZSwgb3B0aW9ucykge1xuICB2YXIgY3VycmVudE9wdGlvbnMgPSBvcHRpb25zO1xuICB2YXIgem9uZSA9IGRuZHpvbmUkMihub2RlLCBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY3VycmVudE9wdGlvbnMpLCBnZXRBZGRlZE9wdGlvbnMoKSkpO1xuICBmdW5jdGlvbiBpc0l0ZW1EaXNhYmxlZENCKGlzSXRlbXNEcmFnRGlzYWJsZWQpIHtcbiAgICB6b25lLnVwZGF0ZShfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY3VycmVudE9wdGlvbnMpLCBnZXRBZGRlZE9wdGlvbnMoaXNJdGVtc0RyYWdEaXNhYmxlZCkpKTtcbiAgfVxuICBpc0l0ZW1zRHJhZ0Rpc2FibGVkLnN1YnNjcmliZShpc0l0ZW1EaXNhYmxlZENCKTtcbiAgZnVuY3Rpb24gY29uc2lkZXIoZSkge1xuICAgIHZhciBfZSRkZXRhaWwkaW5mbyA9IGUuZGV0YWlsLmluZm8sXG4gICAgICBzb3VyY2UgPSBfZSRkZXRhaWwkaW5mby5zb3VyY2UsXG4gICAgICB0cmlnZ2VyID0gX2UkZGV0YWlsJGluZm8udHJpZ2dlcjtcbiAgICAvLyBFbnN1cmUgZHJhZ2dpbmcgaXMgc3RvcHBlZCBvbiBkcmFnIGZpbmlzaCB2aWEga2V5Ym9hcmRcbiAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLktFWUJPQVJEICYmIHRyaWdnZXIgPT09IFRSSUdHRVJTLkRSQUdfU1RPUFBFRCkge1xuICAgICAgaXNJdGVtc0RyYWdEaXNhYmxlZC5zZXQodHJ1ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGZpbmFsaXplKGUpIHtcbiAgICB2YXIgc291cmNlID0gZS5kZXRhaWwuaW5mby5zb3VyY2U7XG4gICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIHBvaW50ZXIgKG1vdXNlLCB0b3VjaClcbiAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLlBPSU5URVIpIHtcbiAgICAgIGlzSXRlbXNEcmFnRGlzYWJsZWQuc2V0KHRydWUpO1xuICAgIH1cbiAgfVxuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjb25zaWRlclwiLCBjb25zaWRlcik7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImZpbmFsaXplXCIsIGZpbmFsaXplKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICBjdXJyZW50T3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICB6b25lLnVwZGF0ZShfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY3VycmVudE9wdGlvbnMpLCBnZXRBZGRlZE9wdGlvbnMoaXNJdGVtc0RyYWdEaXNhYmxlZC5nZXQoKSkpKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb25zaWRlclwiLCBjb25zaWRlcik7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmaW5hbGl6ZVwiLCBmaW5hbGl6ZSk7XG4gICAgICBpc0l0ZW1zRHJhZ0Rpc2FibGVkLnVuc3Vic2NyaWJlKGlzSXRlbURpc2FibGVkQ0IpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIG1hcmsgZHJhZyBoYW5kbGVzIGluc2lkZSBpdGVtcyB0aGF0IGJlbG9uZyB0byBhICdkcmFnSGFuZGxlWm9uZScgKHNlZSBhYm92ZSlcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGhhbmRsZVxuICogQHJldHVybiB7e3VwZGF0ZTogKiwgZGVzdHJveTogKn19XG4gKi9cbmZ1bmN0aW9uIGRyYWdIYW5kbGUoaGFuZGxlKSB7XG4gIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuICBmdW5jdGlvbiBzdGFydERyYWcoZSkge1xuICAgIC8vIHByZXZlbnRpbmcgZGVmYXVsdCB0byBwcmV2ZW50IGxhZyBvbiB0b3VjaCBkZXZpY2VzIChiZWNhdXNlIG9mIHRoZSBicm93c2VyIGNoZWNraW5nIGZvciBzY3JlZW4gc2Nyb2xsaW5nKVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpc0l0ZW1zRHJhZ0Rpc2FibGVkLnNldChmYWxzZSk7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIgfHwgZS5rZXkgPT09IFwiIFwiKSBpc0l0ZW1zRHJhZ0Rpc2FibGVkLnNldChmYWxzZSk7XG4gIH1cbiAgaXNJdGVtc0RyYWdEaXNhYmxlZC5zdWJzY3JpYmUoZnVuY3Rpb24gKGRpc2FibGVkKSB7XG4gICAgaGFuZGxlLnRhYkluZGV4ID0gZGlzYWJsZWQgPyAwIDogLTE7XG4gICAgaGFuZGxlLnN0eWxlLmN1cnNvciA9IGRpc2FibGVkID8gXCJncmFiXCIgOiBcImdyYWJiaW5nXCI7XG4gIH0pO1xuICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBzdGFydERyYWcpO1xuICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgc3RhcnREcmFnKTtcbiAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHN0YXJ0RHJhZyk7XG4gICAgICBoYW5kbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgc3RhcnREcmFnKTtcbiAgICAgIGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IERSQUdHRURfRUxFTUVOVF9JRCwgRkVBVFVSRV9GTEFHX05BTUVTLCBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSwgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQsIFNPVVJDRVMsIFRSSUdHRVJTLCBhbGVydFRvU2NyZWVuUmVhZGVyLCBkbmR6b25lJDIgYXMgZG5kem9uZSwgZHJhZ0hhbmRsZSwgZHJhZ0hhbmRsZVpvbmUsIG92ZXJyaWRlSXRlbUlkS2V5TmFtZUJlZm9yZUluaXRpYWxpc2luZ0RuZFpvbmVzLCBzZXREZWJ1Z01vZGUsIHNldEZlYXR1cmVGbGFnIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICBpbXBvcnQgeyBmb2N1c1RyYXAgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL2ZvY3VzVHJhcFwiO1xuICBpbXBvcnQgeyBjbGlja091dHNpZGUgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL2NsaWNrT3V0c2lkZVwiO1xuXG4gIGltcG9ydCB7IGl0ZW1Ub1Byb2Nlc3NJZCwgb3BlbmVkTWVudUlkIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IHRvZG9MaXN0cyB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgRGVsZXRlSXRlbSB9IGZyb20gXCIuL1RvZG9BcHAuc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBsaXN0SWQ6IHN0cmluZztcbiAgZXhwb3J0IGxldCBtZW51Q2xhc3M6IHN0cmluZztcbiAgZXhwb3J0IGxldCBkZWxldGVJdGVtOiBEZWxldGVJdGVtO1xuXG4gIGxldCBkaWFsb2c6IEhUTUxEaWFsb2dFbGVtZW50O1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcblxuICAgIHJldHVybiAoKSA9PiBkaWFsb2cuY2xvc2UoKTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPGRpYWxvZ1xuICBiaW5kOnRoaXM9e2RpYWxvZ31cbiAgY2xhc3M9XCJ7bWVudUNsYXNzfSBtZW51IGJnLWJhc2UtMjAwIGJvcmRlciBib3JkZXItbmV1dHJhbCByb3VuZGVkLWJveFwiXG4gIG9uOmNsb3NlPXsoKSA9PiB7XG4gICAgJG9wZW5lZE1lbnVJZCA9IFwiXCI7XG4gICAgJGl0ZW1Ub1Byb2Nlc3NJZCA9IFwiXCI7XG4gIH19XG4+XG4gIDxkaXZcbiAgICBjbGFzcz1cInRleHQtbGdcIlxuICAgIHVzZTpjbGlja091dHNpZGU9eygpID0+IGRpYWxvZy5jbG9zZSgpfVxuICAgIHVzZTpmb2N1c1RyYXA9e3tcbiAgICAgIGZvY3VzRmlyc3RFbGVtZW50OiB0cnVlLFxuICAgICAgb25Fc2NhcGU6ICgpID0+IGRpYWxvZy5jbG9zZSgpLFxuICAgIH19XG4gID5cbiAgICA8cCBjbGFzcz1cInB4LTQgcHktMiBmb250LWJvbGQgYm9yZGVyLWIgYm9yZGVyLW5ldXRyYWwgcm91bmRlZC1ub25lIG1iLTJcIj5Db25maXJtIERlbGV0aW9uPC9wPlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1hcm91bmRcIj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMFwiXG4gICAgICAgIGNsYXNzPVwiXG4gICAgICAgIGJ0biBib3JkZXIgYm9yZGVyLW5ldXRyYWxcbiAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICBcIlxuICAgICAgICBvbjpjbGljaz17KCkgPT4gZGlhbG9nLmNsb3NlKCl9XG4gICAgICA+XG4gICAgICAgIENhbmNlbFxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMVwiXG4gICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1lcnJvciBib3JkZXIgYm9yZGVyLW5ldXRyYWxcIlxuICAgICAgICBvbjpjbGljaz17KCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxpc3QgPSAkdG9kb0xpc3RzLmZpbmQoKGxpc3QpID0+IGxpc3QuaWQgPT09IGxpc3RJZCk7XG4gICAgICAgICAgZGVsZXRlSXRlbShsaXN0KTtcbiAgICAgICAgICBkaWFsb2cuY2xvc2UoKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgRGVsZXRlXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2RpYWxvZz5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBzaW5lSW4gfSBmcm9tIFwic3ZlbHRlL2Vhc2luZ1wiO1xuICBpbXBvcnQgeyBmYWRlIH0gZnJvbSBcInN2ZWx0ZS90cmFuc2l0aW9uXCI7XG5cbiAgaW1wb3J0IHsgQ2hldnJvbkRvd24sIENoZXZyb25VcCB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCB0aXRsZTogc3RyaW5nO1xuICBleHBvcnQgbGV0IHRvdGFsQ291bnQ6IG51bWJlcjtcbiAgZXhwb3J0IGxldCB1bmNvbXBsZXRlZENvdW50OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCBsZXQgaXNEcm9wZG93bk9wZW5lZDogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWQ6IGJvb2xlYW47XG5cbiAgY29uc3QgZW1vdGljb25zID0gW1xuICAgIFwiKOKXleKAv+KXlSlcIixcbiAgICBcIijvvL7ilr3vvL4pXCIsXG4gICAgXCLil4nigL/il4lcIixcbiAgICBcIuKJluKAv+KJllwiLFxuICAgIFwi4LSu4peh4LSuXCIsXG4gICAgXCLilbAo4paU4oiA4paUKeKVr1wiLFxuICAgIFwi4oqZ4pa94oqZXCIsXG4gICAgXCLIjy7MrsiPXCIsXG4gICAgXCLil5nigL/il5lcIixcbiAgICBcIihe5Lq6XilcIixcbiAgICBcItmpKOKXleKAv+KXle+9oSnbtlwiLFxuICAgIFwi4LSu4peh4LSuXCIsXG4gICAgXCIoKl7igL9eKilcIixcbiAgICBcIigg4oC+zIEg4pehIOKAvsyBIClcIixcbiAgICBcIijvv6PkuKrvv6MpXCIsXG4gICAgXCIoKuqSpuC6tOqSs+qSpuC6tSlcIixcbiAgICBcIijCrOKAv8KsKVwiLFxuICAgIFwiKOKAouKAv+KAoilcIixcbiAgXTtcbiAgbGV0IGVtb3RpY29uSW5kZXggPSAwO1xuXG4gICQ6IGlmIChpc0Ryb3Bkb3duT3BlbmVkKSB7XG4gICAgZW1vdGljb25JbmRleCsrO1xuICAgIGlmIChlbW90aWNvbkluZGV4ID49IGVtb3RpY29ucy5sZW5ndGgpIHtcbiAgICAgIGVtb3RpY29uSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgY2xhc3M9XCJjb2xsYXBzZSBib3JkZXIgYm9yZGVyLW5ldXRyYWwgbXQtMiBtYi0yMCBvdmVyZmxvdy12aXNpYmxlXCJcbiAgY2xhc3M6Y29sbGFwc2Utb3Blbj17aXNEcm9wZG93bk9wZW5lZH1cbiAgc3R5bGU6dmlzaWJpbGl0eT17aXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwifVxuPlxuICA8IS0tIENvbGxhcHNlIHRpdGxlLiAtLT5cbiAgPGRpdiBjbGFzcz1cImNvbGxhcHNlLXRpdGxlIHJlbGF0aXZlXCIgc3R5bGU9XCJjdXJzb3I6IGRlZmF1bHQ7XCI+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggZ2FwLTIgaXRlbXMtY2VudGVyIHRleHQteGwgZm9udC1tZWRpdW0gbXItNVwiPlxuICAgICAgPHNwYW4gc3R5bGU9XCJ3b3JkLWJyZWFrOiBicmVhay13b3JkO1wiPnt0aXRsZX08L3NwYW4+XG5cbiAgICAgIDxzcGFuXG4gICAgICAgIHRpdGxlPXt1bmNvbXBsZXRlZENvdW50ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IGAke3VuY29tcGxldGVkQ291bnR9IFVuY29tcGxldGVkIC8gJHt0b3RhbENvdW50fSBUb3RhbGBcbiAgICAgICAgICA6IGAke3RvdGFsQ291bnR9IExpc3RzYH1cbiAgICAgICAgY2xhc3M9XCJiYWRnZSBiYWRnZS1uZXV0cmFsIHNocmluay0wXCJcbiAgICAgID5cbiAgICAgICAge3VuY29tcGxldGVkQ291bnQgIT09IHVuZGVmaW5lZCA/IGAke3VuY29tcGxldGVkQ291bnR9IC8gJHt0b3RhbENvdW50fWAgOiB0b3RhbENvdW50fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBDb2xsYXBzZSB0b2dnbGUuIC0tPlxuICAgIDxidXR0b25cbiAgICAgIHRpdGxlPVwiVG9nZ2xlIGNvbGxhcHNlLlwiXG4gICAgICBhcmlhLWxhYmVsPVwiVG9nZ2xlIGNvbGxhcHNlLlwiXG4gICAgICBjbGFzcz1cIlxuICAgICAgIHN3YXAgc3dhcC1yb3RhdGUgYWJzb2x1dGUgdG9wLVsxOHB4XSByaWdodC01IHJvdW5kZWQtbGdcbiAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgIFwiXG4gICAgICBjbGFzczpzd2FwLWFjdGl2ZT17aXNEcm9wZG93bk9wZW5lZH1cbiAgICAgIG9uOmNsaWNrPXsoKSA9PiAoaXNEcm9wZG93bk9wZW5lZCA9ICFpc0Ryb3Bkb3duT3BlbmVkKX1cbiAgICA+XG4gICAgICA8Q2hldnJvbkRvd24gY2xhc3M9XCJzd2FwLW9mZlwiIC8+XG4gICAgICA8Q2hldnJvblVwIGNsYXNzPVwic3dhcC1vblwiIC8+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJjb2xsYXBzZS1jb250ZW50XCI+XG4gICAgPHNsb3QgLz5cbiAgPC9kaXY+XG48L2Rpdj5cblxueyNpZiAhaXNEcm9wZG93bk9wZW5lZH1cbiAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHRleHQtNnhsIHhzOnRleHQtN3hsIHNtOnRleHQtOHhsIG9wYWNpdHktOTBcIiBpbjpmYWRlPXt7IGVhc2luZzogc2luZUluIH19PlxuICAgIHtlbW90aWNvbnNbZW1vdGljb25JbmRleF19XG4gIDwvZGl2Plxuey9pZn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBpbXBvcnQgeyBYIH0gZnJvbSBcImx1Y2lkZS1zdmVsdGVcIjtcblxuICBpbXBvcnQgeyBmb2N1c1RyYXAgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL2ZvY3VzVHJhcFwiO1xuICBpbXBvcnQgeyBjbGlja091dHNpZGUgfSBmcm9tIFwiJGxpYi9hY3Rpb25zL2NsaWNrT3V0c2lkZVwiO1xuXG4gIGltcG9ydCB7IGl0ZW1Ub1Byb2Nlc3NJZCwgb3BlbmVkTWVudUlkIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IHRvZG9MaXN0cyB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgVG9kb0l0ZW0gfSBmcm9tIFwiJHN0b3Jlcy9jcmR0U3RhdGVcIjtcblxuICBleHBvcnQgbGV0IGl0ZW1Ub01vdmU6IFRvZG9JdGVtO1xuICBleHBvcnQgbGV0IG1lbnVDbGFzczogc3RyaW5nO1xuICBleHBvcnQgbGV0IG1vdmVUb2RvOiAoaXRlbVRvTW92ZTogVG9kb0l0ZW0sIG5ld0xpc3RJZDogc3RyaW5nKSA9PiB2b2lkO1xuXG4gIGxldCBkaWFsb2c6IEhUTUxEaWFsb2dFbGVtZW50O1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGRpYWxvZy5zaG93TW9kYWwoKTtcblxuICAgIHJldHVybiAoKSA9PiBkaWFsb2cuY2xvc2UoKTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPGRpYWxvZ1xuICBiaW5kOnRoaXM9e2RpYWxvZ31cbiAgY2xhc3M9XCJ7bWVudUNsYXNzfSBtZW51IGJnLWJhc2UtMjAwIGJvcmRlciBib3JkZXItbmV1dHJhbCByb3VuZGVkLWJveFwiXG4gIG9uOmNsb3NlPXsoKSA9PiB7XG4gICAgJG9wZW5lZE1lbnVJZCA9IFwiXCI7XG4gICAgJGl0ZW1Ub1Byb2Nlc3NJZCA9IFwiXCI7XG4gIH19XG4+XG4gIDxkaXZcbiAgICBjbGFzcz1cInRleHQtbGdcIlxuICAgIHVzZTpjbGlja091dHNpZGU9eygpID0+IGRpYWxvZy5jbG9zZSgpfVxuICAgIHVzZTpmb2N1c1RyYXA9e3tcbiAgICAgIGZvY3VzRmlyc3RFbGVtZW50OiB0cnVlLFxuICAgICAgb25Fc2NhcGU6ICgpID0+IGRpYWxvZy5jbG9zZSgpLFxuICAgIH19XG4gID5cbiAgICA8cCBjbGFzcz1cInBsLTQgcHItMTQgcHktMiBmb250LWJvbGQgYm9yZGVyLWIgYm9yZGVyLW5ldXRyYWwgcm91bmRlZC1ub25lIG1iLTEuNVwiPlNlbGVjdCBMaXN0PC9wPlxuXG4gICAgPGJ1dHRvblxuICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMFwiXG4gICAgICBjbGFzcz1cIlxuICAgICAgICBhYnNvbHV0ZSB0b3AtMy41IHJpZ2h0LTMgcm91bmRlZC1sZ1xuICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgIFwiXG4gICAgICBhcmlhLWxhYmVsPVwiQ2xvc2UuXCJcbiAgICAgIHRpdGxlPVwiQ2xvc2UuXCJcbiAgICAgIG9uOmNsaWNrPXsoKSA9PiBkaWFsb2cuY2xvc2UoKX1cbiAgICA+XG4gICAgICA8WCBjbGFzcz1cInctNSBoLTVcIiAvPlxuICAgIDwvYnV0dG9uPlxuXG4gICAgPHVsPlxuICAgICAgeyNlYWNoICR0b2RvTGlzdHMgYXMgbGlzdCwgaW5kZXggKGxpc3QuaWQpfVxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgZGF0YS1mb2N1c2luZGV4PXtpbmRleCArIDF9XG4gICAgICAgICAgICB0aXRsZT1cIk1vdmUgdG8gdGhpcyBsaXN0LlwiXG4gICAgICAgICAgICBjbGFzcz1cIlxuICAgICAgICAgICAgICBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMyByb3VuZGVkLWxnXG4gICAgICAgICAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIHN0eWxlPVwid29yZC1icmVhazogYnJlYWstd29yZDtcIlxuICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgbW92ZVRvZG8oaXRlbVRvTW92ZSwgbGlzdC5pZCk7XG4gICAgICAgICAgICAgIGRpYWxvZy5jbG9zZSgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgIGNsYXNzPVwicmFkaW8gYmctdHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICBjbGFzczpyYWRpby1hY2NlbnQ9e2xpc3QuaWQgPT09IGl0ZW1Ub01vdmUubGlzdElkfVxuICAgICAgICAgICAgICBjaGVja2VkPXtsaXN0LmlkID09PSBpdGVtVG9Nb3ZlLmxpc3RJZH1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIHtsaXN0Lm5hbWV9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvbGk+XG4gICAgICB7L2VhY2h9XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L2RpYWxvZz5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmbHkgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcblxuICBleHBvcnQgbGV0IGFkZEl0ZW1DYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgZXhwb3J0IGxldCB2YWx1ZTogc3RyaW5nO1xuICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgc3VibWl0QnV0dG9uVGV4dDogc3RyaW5nO1xuICBleHBvcnQgbGV0IHN1Ym1pdEJ1dHRvblRpdGxlOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkOiBib29sZWFuO1xuXG4gIGxldCBlcnJvciA9IFwiXCI7XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3VibWl0KCkge1xuICAgIC8vIFRyaW0gd2hpdGVzcGFjZS5cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xccysvZywgXCIgXCIpLnRyaW0oKTtcblxuICAgIC8vIENoZWNrIGlmIGVtcHR5IHN0cmluZy5cbiAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIGVycm9yID0gXCJDYW5ub3QgYmUgYmxhbmshXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgc3RyaW5nIGlzIHRvbyBsb25nLlxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiA1MDApIHtcbiAgICAgIGVycm9yID0gXCJDYW5ub3QgYmUgb3ZlciA1MDAgY2hhcmFjdGVycyFcIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhZGRJdGVtQ2FsbGJhY2soKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxmb3JtXG4gIG9uOnN1Ym1pdHxwcmV2ZW50RGVmYXVsdD17aGFuZGxlU3VibWl0fVxuICBjbGFzcz1cImpvaW4gbXktMSB3LWZ1bGxcIlxuICBzdHlsZTp2aXNpYmlsaXR5PXtpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWQgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCJ9XG4+XG4gIDxpbnB1dFxuICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICB7cGxhY2Vob2xkZXJ9XG4gICAgY2xhc3M9XCJcbiAgICAgIGlucHV0IGlucHV0LWJvcmRlcmVkIGJvcmRlci1uZXV0cmFsIHctZnVsbCBqb2luLWl0ZW1cbiAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTEgZm9jdXM6cmluZy1hY2NlbnQgZm9jdXM6cmluZy1pbnNldFxuICAgIFwiXG4gICAgcmVxdWlyZWRcbiAgICBiaW5kOnZhbHVlXG4gICAgb246aW5wdXQ9eygpID0+IChlcnJvciA9IFwiXCIpfVxuICAvPlxuXG4gIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWFjY2VudCBqb2luLWl0ZW0gYm9yZGVyIGJvcmRlci1uZXV0cmFsXCIgdGl0bGU9e3N1Ym1pdEJ1dHRvblRpdGxlfT5cbiAgICB7c3VibWl0QnV0dG9uVGV4dH1cbiAgPC9idXR0b24+XG48L2Zvcm0+XG5cbnsjaWYgZXJyb3J9XG4gIDxwIHN0eWxlPVwid29yZC1icmVhazogYnJlYWstd29yZDtcIiBjbGFzcz1cInRleHQtZXJyb3JcIiBpbjpmbHk9e3sgeTogLTEwIH19PntlcnJvcn08L3A+XG57L2lmfVxuIiwgImltcG9ydCB7IGN1YmljT3V0IH0gZnJvbSAnLi4vZWFzaW5nL2luZGV4LmpzJztcbmltcG9ydCB7IGlzX2Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXguanMnO1xuXG4vKipcbiAqIFRoZSBmbGlwIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCBhbmQgYW5pbWF0ZXMgYmV0d2VlbiB0aGVtLCB0cmFuc2xhdGluZyB0aGUgeCBhbmQgeSB2YWx1ZXMuXG4gKiBgZmxpcGAgc3RhbmRzIGZvciBbRmlyc3QsIExhc3QsIEludmVydCwgUGxheV0oaHR0cHM6Ly9hZXJvdHdpc3QuY29tL2Jsb2cvZmxpcC15b3VyLWFuaW1hdGlvbnMvKS5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcy9zdmVsdGUtYW5pbWF0ZSNmbGlwXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7eyBmcm9tOiBET01SZWN0OyB0bzogRE9NUmVjdCB9fSBmcm9tVG9cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3B1YmxpYy5qcycpLkZsaXBQYXJhbXN9IHBhcmFtc1xuICogQHJldHVybnMge2ltcG9ydCgnLi9wdWJsaWMuanMnKS5BbmltYXRpb25Db25maWd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGlwKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zID0ge30pIHtcblx0Y29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXHRjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuXHRjb25zdCBbb3gsIG95XSA9IHN0eWxlLnRyYW5zZm9ybU9yaWdpbi5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcblx0Y29uc3QgZHggPSBmcm9tLmxlZnQgKyAoZnJvbS53aWR0aCAqIG94KSAvIHRvLndpZHRoIC0gKHRvLmxlZnQgKyBveCk7XG5cdGNvbnN0IGR5ID0gZnJvbS50b3AgKyAoZnJvbS5oZWlnaHQgKiBveSkgLyB0by5oZWlnaHQgLSAodG8udG9wICsgb3kpO1xuXHRjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAoZCkgPT4gTWF0aC5zcXJ0KGQpICogMTIwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0gcGFyYW1zO1xuXHRyZXR1cm4ge1xuXHRcdGRlbGF5LFxuXHRcdGR1cmF0aW9uOiBpc19mdW5jdGlvbihkdXJhdGlvbikgPyBkdXJhdGlvbihNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpKSA6IGR1cmF0aW9uLFxuXHRcdGVhc2luZyxcblx0XHRjc3M6ICh0LCB1KSA9PiB7XG5cdFx0XHRjb25zdCB4ID0gdSAqIGR4O1xuXHRcdFx0Y29uc3QgeSA9IHUgKiBkeTtcblx0XHRcdGNvbnN0IHN4ID0gdCArICh1ICogZnJvbS53aWR0aCkgLyB0by53aWR0aDtcblx0XHRcdGNvbnN0IHN5ID0gdCArICh1ICogZnJvbS5oZWlnaHQpIC8gdG8uaGVpZ2h0O1xuXHRcdFx0cmV0dXJuIGB0cmFuc2Zvcm06ICR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7c3h9LCAke3N5fSk7YDtcblx0XHR9XG5cdH07XG59XG4iLCAidHlwZSBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbktleWRvd24oZWxlbWVudDogSFRNTEVsZW1lbnQsIGNhbGxiYWNrRnVuY3Rpb246IEtleWJvYXJkRXZlbnRDYWxsYmFjaykge1xuICBmdW5jdGlvbiBvbktleWRvd25IYW5kbGVyKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY2FsbGJhY2tGdW5jdGlvbihldmVudCk7XG4gIH1cblxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5ZG93bkhhbmRsZXIpO1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlKG5ld0NhbGxiYWNrRnVuY3Rpb246IEtleWJvYXJkRXZlbnRDYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2tGdW5jdGlvbiA9IG5ld0NhbGxiYWNrRnVuY3Rpb247XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBvbktleWRvd25IYW5kbGVyKTtcbiAgICB9LFxuICB9O1xufVxuIiwgImludGVyZmFjZSBOYXZpZ2F0b3JFeHRlbmRlZCBleHRlbmRzIE5hdmlnYXRvciB7XG4gIG1zTWF4VG91Y2hQb2ludHM/OiBudW1iZXI7XG4gIHVzZXJhZ2VudD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdXNlciBkZXZpY2UgaGFzIGEgdG91Y2ggc2NyZWVuLlxuICpcbiAqIEZyb20gTUROOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jyb3dzZXJfZGV0ZWN0aW9uX3VzaW5nX3RoZV91c2VyX2FnZW50I21vYmlsZV9kZXZpY2VfZGV0ZWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VIYXNUb3VjaFNjcmVlbigpOiBib29sZWFuIHtcbiAgY29uc3QgbmF2aWdhdG9yRXh0ZW5kZWQ6IE5hdmlnYXRvckV4dGVuZGVkID0gbmF2aWdhdG9yO1xuICBsZXQgaGFzVG91Y2hTY3JlZW4gPSBmYWxzZTtcblxuICBpZiAoXCJtYXhUb3VjaFBvaW50c1wiIGluIG5hdmlnYXRvcikge1xuICAgIGhhc1RvdWNoU2NyZWVuID0gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMDtcbiAgfSBlbHNlIGlmIChcbiAgICBcIm1zTWF4VG91Y2hQb2ludHNcIiBpbiBuYXZpZ2F0b3IgJiZcbiAgICBuYXZpZ2F0b3JFeHRlbmRlZC5tc01heFRvdWNoUG9pbnRzXG4gICkge1xuICAgIGhhc1RvdWNoU2NyZWVuID0gbmF2aWdhdG9yRXh0ZW5kZWQubXNNYXhUb3VjaFBvaW50cyA+IDA7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbVEgPSBtYXRjaE1lZGlhPy4oXCIocG9pbnRlcjpjb2Fyc2UpXCIpO1xuICAgIGlmIChtUT8ubWVkaWEgPT09IFwiKHBvaW50ZXI6Y29hcnNlKVwiKSB7XG4gICAgICBoYXNUb3VjaFNjcmVlbiA9ICEhbVEubWF0Y2hlcztcbiAgICB9IGVsc2UgaWYgKFwib3JpZW50YXRpb25cIiBpbiB3aW5kb3cpIHtcbiAgICAgIGhhc1RvdWNoU2NyZWVuID0gdHJ1ZTsgLy8gZGVwcmVjYXRlZCwgYnV0IGdvb2QgZmFsbGJhY2tcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBhcyBhIGxhc3QgcmVzb3J0LCBmYWxsIGJhY2sgdG8gdXNlciBhZ2VudCBzbmlmZmluZ1xuICAgICAgY29uc3QgVUEgPSBuYXZpZ2F0b3JFeHRlbmRlZC51c2VyQWdlbnQ7XG4gICAgICBoYXNUb3VjaFNjcmVlbiA9XG4gICAgICAgIC9cXGIoQmxhY2tCZXJyeXx3ZWJPU3xpUGhvbmV8SUVNb2JpbGUpXFxiL2kudGVzdChVQSkgfHxcbiAgICAgICAgL1xcYihBbmRyb2lkfFdpbmRvd3MgUGhvbmV8aVBhZHxpUG9kKVxcYi9pLnRlc3QoVUEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBoYXNUb3VjaFNjcmVlbjtcbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBHcmlwSG9yaXpvbnRhbCB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgaXRlbVRvUHJvY2Vzc0lkLCBvcGVuZWRNZW51SWQgfSBmcm9tIFwiJHN0b3Jlcy9jbGllbnRPbmx5U3RhdGVcIjtcblxuICBleHBvcnQgbGV0IGRyYWdEaXNhYmxlZDogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBpdGVtSWQ6IHN0cmluZztcblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydERyYWcoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSB7XG4gICAgLy8gUHJldmVudGluZyBkZWZhdWx0IHRvIHByZXZlbnQgbGFnIG9uIHRvdWNoIGRldmljZXMgKGJlY2F1c2Ugb2YgdGhlXG4gICAgLy8gYnJvd3NlciBjaGVja2luZyBmb3Igc2NyZWVuIHNjcm9sbGluZykuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAkaXRlbVRvUHJvY2Vzc0lkID0gaXRlbUlkO1xuICAgIGRyYWdEaXNhYmxlZCA9IGZhbHNlO1xuICAgICRvcGVuZWRNZW51SWQgPSBcIlwiO1xuICB9XG48L3NjcmlwdD5cblxuPGJ1dHRvblxuICB0aXRsZT1cIkRyYWcgdG8gcmVvcmRlci5cIlxuICBhcmlhLWxhYmVsPVwiRHJhZyB0byByZW9yZGVyLlwiXG4gIGNsYXNzPVwiXG4gICAgcm91bmRlZC1sZ1xuICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnRcbiAgXCJcbiAgY2xhc3M6Y3Vyc29yLWdyYWI9e2RyYWdEaXNhYmxlZH1cbiAgY2xhc3M6Y3Vyc29yLWdyYWJiaW5nPXshZHJhZ0Rpc2FibGVkfVxuICB0YWJpbmRleD1cIi0xXCJcbiAgb246bW91c2Vkb3duPXtoYW5kbGVTdGFydERyYWd9XG4gIG9uOnRvdWNoc3RhcnQ9e2hhbmRsZVN0YXJ0RHJhZ31cbiAgb246Y2xpY2s9eygpID0+IChkcmFnRGlzYWJsZWQgPSB0cnVlKX1cbj5cbiAgPEdyaXBIb3Jpem9udGFsIGNsYXNzPVwidy02IGgtNlwiIC8+XG48L2J1dHRvbj5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmbHkgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgQ2hlY2sgfSBmcm9tIFwibHVjaWRlLXN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB7IGZvY3VzVHJhcCB9IGZyb20gXCIkbGliL2FjdGlvbnMvZm9jdXNUcmFwXCI7XG4gIGltcG9ydCB7IGNsaWNrT3V0c2lkZSB9IGZyb20gXCIkbGliL2FjdGlvbnMvY2xpY2tPdXRzaWRlXCI7XG5cbiAgaW1wb3J0IHsgb3BlbmVkTWVudUlkIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IGlzVG9kb0l0ZW0gfSBmcm9tIFwiJHN0b3Jlcy9jcmR0U3RhdGVcIjtcblxuICBpbXBvcnQgdHlwZSB7IFRvZG9MaXN0LCBUb2RvSXRlbSB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuICBpbXBvcnQgdHlwZSB7IFVwZGF0ZUl0ZW0gfSBmcm9tIFwiLi9Ub2RvQXBwLnN2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgaXRlbTogVG9kb0xpc3QgfCBUb2RvSXRlbTtcbiAgZXhwb3J0IGxldCB1cGRhdGVJdGVtOiBVcGRhdGVJdGVtO1xuICBleHBvcnQgbGV0IG1lbnVDbGFzczogc3RyaW5nO1xuXG4gIGxldCBuZXdOYW1lID0gaXRlbS5uZXdOYW1lO1xuICBsZXQgZXJyb3IgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBDb21taXQgZWRpdHMgbWFkZSB0byB0aGUgaXRlbSBhbmQgY2xvc2UgdGhlIGVkaXQgZm9ybS5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbW1pdEVkaXRzKCkge1xuICAgIGlmIChpc1RvZG9JdGVtKGl0ZW0pKSB7XG4gICAgICB1cGRhdGVJdGVtKHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIG5hbWU6IG5ld05hbWUsXG4gICAgICAgIGNvbXBsZXRlZDogaXRlbS5jb21wbGV0ZWQsXG4gICAgICAgIGxpc3RJZDogaXRlbS5saXN0SWQsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlSXRlbSh7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBuYW1lOiBuZXdOYW1lLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgJG9wZW5lZE1lbnVJZCA9IFwiXCI7XG4gIH1cblxuICAvKipcbiAgICogRGlzY2FyZCBlZGl0cyBtYWRlIHRvIHRoZSBpdGVtIGFuZCBjbG9zZSB0aGUgZWRpdCBmb3JtLlxuICAgKi9cbiAgZnVuY3Rpb24gZGlzY2FyZEVkaXRzKCkge1xuICAgIGlmIChpc1RvZG9JdGVtKGl0ZW0pKSB7XG4gICAgICB1cGRhdGVJdGVtKHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgY29tcGxldGVkOiBpdGVtLmNvbXBsZXRlZCxcbiAgICAgICAgbGlzdElkOiBpdGVtLmxpc3RJZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVJdGVtKHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRvcGVuZWRNZW51SWQgPSBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3VibWl0KCkge1xuICAgIC8vIFRyaW0gd2hpdGVzcGFjZS5cbiAgICBuZXdOYW1lID0gbmV3TmFtZS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKS50cmltKCk7XG5cbiAgICAvLyBDaGVjayBpZiBuZXcgaXRlbSBuYW1lIGlzIGVtcHR5IHN0cmluZyBvciB1bmNoYW5nZWQuXG4gICAgaWYgKFtcIlwiLCBpdGVtLm5hbWVdLmluY2x1ZGVzKG5ld05hbWUpKSB7XG4gICAgICBkaXNjYXJkRWRpdHMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBuZXcgaXRlbSBuYW1lIGlzIGEgY2hhbmdlIGluIGNhc2luZyBvZiB0aGUgb3JpZ2luYWwgbmFtZS5cbiAgICBpZiAoaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5ld05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY29tbWl0RWRpdHMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBzdHJpbmcgaXMgdG9vIGxvbmcuXG4gICAgaWYgKG5ld05hbWUubGVuZ3RoID4gNTAwKSB7XG4gICAgICBlcnJvciA9IFwiQ2Fubm90IGJlIG92ZXIgNTAwIGNoYXJhY3RlcnMhXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tbWl0RWRpdHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgdXNlciB0byBjYW5jZWwgdGhlIGVkaXQgYnkgcHJlc3NpbmcgdGhlIGVzY2FwZSBrZXkuXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVFc2NhcGUoKSB7XG4gICAgbmV3TmFtZSA9IFwiXCI7XG4gICAgaGFuZGxlU3VibWl0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVJbnB1dCgpIHtcbiAgICAvLyBUcmFjayB0aGUgbmV3TmFtZSBzbyB0aGF0IHBhZ2UgcmVmcmVzaGVzIGRvbid0IHJlc2V0IHRoZSBpbnB1dCB2YWx1ZS5cbiAgICB1cGRhdGVJdGVtKHsgLi4uaXRlbSwgbmV3TmFtZSB9KTtcblxuICAgIC8vIFJlc2V0IGVycm9yIG1lc3NhZ2UuXG4gICAgZXJyb3IgPSBcIlwiO1xuICB9XG48L3NjcmlwdD5cblxuPGZvcm1cbiAgY2xhc3M9XCJ7bWVudUNsYXNzfSB3LWZ1bGxcIlxuICBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9e2hhbmRsZVN1Ym1pdH1cbiAgdXNlOmNsaWNrT3V0c2lkZT17aGFuZGxlU3VibWl0fVxuICB1c2U6Zm9jdXNUcmFwPXt7XG4gICAgZm9jdXNGaXJzdEVsZW1lbnQ6IHRydWUsXG4gICAgb25Fc2NhcGU6IGhhbmRsZUVzY2FwZSxcbiAgfX1cbj5cbiAgPGRpdiBjbGFzcz1cInctZnVsbCBqb2luXCI+XG4gICAgPGlucHV0XG4gICAgICBkYXRhLWZvY3VzaW5kZXg9XCIwXCJcbiAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIGNsYXNzPVwiXG4gICAgICAgIGlucHV0IGlucHV0LWJvcmRlcmVkIGJvcmRlci1uZXV0cmFsIHctZnVsbCBqb2luLWl0ZW1cbiAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzOnJpbmctMSBmb2N1czpyaW5nLWFjY2VudCBmb2N1czpyaW5nLWluc2V0XG4gICAgICBcIlxuICAgICAgYmluZDp2YWx1ZT17bmV3TmFtZX1cbiAgICAgIG9uOmlucHV0PXtoYW5kbGVJbnB1dH1cbiAgICAvPlxuXG4gICAgPGJ1dHRvblxuICAgICAgZGF0YS1mb2N1c2luZGV4PVwiMVwiXG4gICAgICBjbGFzcz1cImJ0biBidG4tYWNjZW50IGpvaW4taXRlbSBib3JkZXIgYm9yZGVyLW5ldXRyYWxcIlxuICAgICAgYXJpYS1sYWJlbD1cIlVwZGF0ZSBpdGVtLlwiXG4gICAgPlxuICAgICAgPENoZWNrIGNsYXNzPVwidy01IGgtNVwiIC8+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuXG4gIHsjaWYgZXJyb3J9XG4gICAgPHAgc3R5bGU9XCJ3b3JkLWJyZWFrOiBicmVhay13b3JkO1wiIGNsYXNzPVwidGV4dC1lcnJvciBtdC0xIHRleHQtc21cIiBpbjpmbHk9e3sgeTogLTEwIH19PlxuICAgICAge2Vycm9yfVxuICAgIDwvcD5cbiAgey9pZn1cbjwvZm9ybT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBzY2FsZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xuICBpbXBvcnQgeyBDaXJjbGVFbGxpcHNpcywgQ2lyY2xlWCwgTW92ZVJpZ2h0LCBQZW5jaWwsIFRyYXNoMiB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgZm9jdXNUcmFwIH0gZnJvbSBcIiRsaWIvYWN0aW9ucy9mb2N1c1RyYXBcIjtcblxuICBpbXBvcnQgeyBpdGVtVG9Qcm9jZXNzSWQsIG9wZW5lZE1lbnVJZCB9IGZyb20gXCIkc3RvcmVzL2NsaWVudE9ubHlTdGF0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgVG9kb0xpc3QsIFRvZG9JdGVtIH0gZnJvbSBcIiRzdG9yZXMvY3JkdFN0YXRlXCI7XG4gIGltcG9ydCB0eXBlIHsgVXBkYXRlSXRlbSwgRGVsZXRlSXRlbSB9IGZyb20gXCIuL1RvZG9BcHAuc3ZlbHRlXCI7XG5cbiAgZXhwb3J0IGxldCBpdGVtOiBUb2RvTGlzdCB8IFRvZG9JdGVtO1xuICBleHBvcnQgbGV0IHVwZGF0ZUl0ZW06IFVwZGF0ZUl0ZW07XG4gIGV4cG9ydCBsZXQgZGVsZXRlSXRlbTogRGVsZXRlSXRlbTtcbiAgZXhwb3J0IGxldCBtZW51Q2xhc3M6IHN0cmluZztcbiAgZXhwb3J0IGxldCBtb3ZlVG9kb01lbnVJZCA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBjb25maXJtRGVsZXRpb25Nb2RhbElkID0gdW5kZWZpbmVkO1xuXG4gIGxldCBmb2N1c0ZpcnN0RWxlbWVudCA9IGZhbHNlO1xuXG4gICQ6IGlmICgkb3BlbmVkTWVudUlkICE9PSBpdGVtLmlkKSB7XG4gICAgZm9jdXNGaXJzdEVsZW1lbnQgPSBmYWxzZTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ7bWVudUNsYXNzfSByZWxhdGl2ZSBwb2ludGVyLWV2ZW50cy1hdXRvXCI+XG4gIDxidXR0b25cbiAgICBjbGFzcz1cIlxuICAgICAgZmxleCBpdGVtcy1jZW50ZXIgcm91bmRlZC1mdWxsXG4gICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICBcIlxuICAgIGFyaWEtbGFiZWw9XCJPcHRpb25zIG1lbnUuXCJcbiAgICB0aXRsZT1cIkNsaWNrIHRvIHRvZ2dsZSBvcHRpb25zIG1lbnUuXCJcbiAgICBvbjpjbGljaz17KCkgPT4gKCRvcGVuZWRNZW51SWQgPSAkb3BlbmVkTWVudUlkID09PSBpdGVtLmlkID8gXCJcIiA6IGl0ZW0uaWQpfVxuICAgIG9uOmtleWRvd249eyhldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgZm9jdXNGaXJzdEVsZW1lbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH19XG4gID5cbiAgICA8ZGl2IGNsYXNzPVwic3dhcCBzd2FwLXJvdGF0ZVwiPlxuICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiaGlkZGVuXCIgY2hlY2tlZD17JG9wZW5lZE1lbnVJZCA9PT0gaXRlbS5pZH0gLz5cbiAgICAgIDxDaXJjbGVFbGxpcHNpcyBjbGFzcz1cInN3YXAtb2ZmXCIgLz5cbiAgICAgIDxDaXJjbGVYIGNsYXNzPVwic3dhcC1vblwiIC8+XG4gICAgPC9kaXY+XG4gIDwvYnV0dG9uPlxuXG4gIHsjaWYgJG9wZW5lZE1lbnVJZCA9PT0gaXRlbS5pZH1cbiAgICA8dWxcbiAgICAgIGNsYXNzPVwiYWJzb2x1dGUgcmlnaHQtOCAtYm90dG9tLTEgbWVudSBiZy1iYXNlLTIwMCBib3JkZXIgYm9yZGVyLW5ldXRyYWwgcm91bmRlZC1ib3hcIlxuICAgICAgaW46c2NhbGU9e3sgZHVyYXRpb246IDEwMCB9fVxuICAgICAgdXNlOmZvY3VzVHJhcD17e1xuICAgICAgICBmb2N1c0ZpcnN0RWxlbWVudCxcbiAgICAgICAgb25Fc2NhcGU6ICgpID0+ICgkb3BlbmVkTWVudUlkID0gXCJcIiksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxsaT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGRhdGEtZm9jdXNpbmRleD1cIjJcIlxuICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMS41IHAtMiByb3VuZGVkLWxnXG4gICAgICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgICAgICBcIlxuICAgICAgICAgIG9uOmNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbmZpcm1EZWxldGlvbk1vZGFsSWQpIHtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCBldmVudCBmcm9tIGJ1YmJsaW5nIHVwIHRvIENsaWNrT3V0c2lkZUNsYXNzSGFuZGxlci5cbiAgICAgICAgICAgICAgJGl0ZW1Ub1Byb2Nlc3NJZCA9IGl0ZW0uaWQ7XG4gICAgICAgICAgICAgICRvcGVuZWRNZW51SWQgPSBjb25maXJtRGVsZXRpb25Nb2RhbElkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVsZXRlSXRlbShpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFRyYXNoMiBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgIERlbGV0ZVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk+XG5cbiAgICAgIHsjaWYgbW92ZVRvZG9NZW51SWR9XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBkYXRhLWZvY3VzaW5kZXg9XCIxXCJcbiAgICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICAgIGZsZXggaXRlbXMtY2VudGVyIGdhcC0xLjUgcC0yIHJvdW5kZWQtbGdcbiAgICAgICAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgb246Y2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byBDbGlja091dHNpZGVDbGFzc0hhbmRsZXIuXG4gICAgICAgICAgICAgICRpdGVtVG9Qcm9jZXNzSWQgPSBpdGVtLmlkO1xuICAgICAgICAgICAgICAkb3BlbmVkTWVudUlkID0gbW92ZVRvZG9NZW51SWQ7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxNb3ZlUmlnaHQgY2xhc3M9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgIE1vdmVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9saT5cbiAgICAgIHsvaWZ9XG5cbiAgICAgIDxsaT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGRhdGEtZm9jdXNpbmRleD1cIjBcIlxuICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMS41IHAtMiByb3VuZGVkLWxnXG4gICAgICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgICAgICBcIlxuICAgICAgICAgIG9uOmNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCBldmVudCBmcm9tIGJ1YmJsaW5nIHVwIHRvIENsaWNrT3V0c2lkZUNsYXNzSGFuZGxlci5cbiAgICAgICAgICAgICRvcGVuZWRNZW51SWQgPSBcImVkaXQtZm9ybS1pZFwiO1xuXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcbiAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgbmV3TmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICBpc0VkaXRpbmc6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFBlbmNpbCBjbGFzcz1cInctNCBoLTRcIiAvPlxuICAgICAgICAgIEVkaXRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gIHsvaWZ9XG48L2Rpdj5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gIGltcG9ydCB7IGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgZG5kem9uZSB9IGZyb20gXCJzdmVsdGUtZG5kLWFjdGlvblwiO1xuICBpbXBvcnQgKiBhcyBZIGZyb20gXCJ5anNcIjtcblxuICBpbXBvcnQgeyBvbktleWRvd24gfSBmcm9tIFwiJGxpYi9hY3Rpb25zL29uS2V5ZG93blwiO1xuICBpbXBvcnQgeyB1c2VIYXNUb3VjaFNjcmVlbiB9IGZyb20gXCIkbGliL2hvb2tzL3VzZUhhc1RvdWNoU2NyZWVuXCI7XG5cbiAgaW1wb3J0IHsgaXRlbVRvUHJvY2Vzc0lkLCBvcGVuZWRNZW51SWQgfSBmcm9tIFwiJHN0b3Jlcy9jbGllbnRPbmx5U3RhdGVcIjtcbiAgaW1wb3J0IHsgeVRvZG9JdGVtcyB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuXG4gIGltcG9ydCBEcmFnSGFuZGxlIGZyb20gXCIuL0RyYWdIYW5kbGUuc3ZlbHRlXCI7XG4gIGltcG9ydCBFZGl0Rm9ybSBmcm9tIFwiLi9FZGl0Rm9ybS5zdmVsdGVcIjtcbiAgaW1wb3J0IE9wdGlvbnNNZW51IGZyb20gXCIuL09wdGlvbnNNZW51LnN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgVG9kb0l0ZW0gfSBmcm9tIFwiJHN0b3Jlcy9jcmR0U3RhdGVcIjtcbiAgaW1wb3J0IHR5cGUgeyBEZWxldGVJdGVtLCBEbmRIYW5kbGVyLCBVcGRhdGVJdGVtIH0gZnJvbSBcIi4vVG9kb0FwcC5zdmVsdGVcIjtcblxuICBleHBvcnQgbGV0IHRpdGxlOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgaXRlbXM6IFRvZG9JdGVtW107XG4gIGV4cG9ydCBsZXQgdG9nZ2xlQ29tcGxldGVkOiAoaXRlbUlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGV4cG9ydCBsZXQgdXBkYXRlSXRlbTogVXBkYXRlSXRlbTtcbiAgZXhwb3J0IGxldCBkZWxldGVJdGVtOiBEZWxldGVJdGVtO1xuICBleHBvcnQgbGV0IGhhbmRsZUNvbnNpZGVyOiBEbmRIYW5kbGVyO1xuICBleHBvcnQgbGV0IGhhbmRsZUZpbmFsaXplOiBEbmRIYW5kbGVyO1xuICBleHBvcnQgbGV0IGhhbmRsZURyYWdLZXlEb3duOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGl0ZW1JZDogc3RyaW5nKSA9PiB2b2lkO1xuICBleHBvcnQgbGV0IGRyYWdEaXNhYmxlZDogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBmbGlwRHVyYXRpb25NczogbnVtYmVyO1xuICBleHBvcnQgbGV0IG1lbnVDbGFzczogc3RyaW5nO1xuICBleHBvcnQgbGV0IG1vdmVUb2RvTWVudUlkOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkOiBib29sZWFuO1xuXG4gIGNvbnN0IGhhc1RvdWNoU2NyZWVuID0gdXNlSGFzVG91Y2hTY3JlZW4oKTtcblxuICBmdW5jdGlvbiB1cGRhdGVVaU9uQ29uc2lkZXIobmV3SXRlbXM6IFRvZG9JdGVtW10pIHtcbiAgICBpdGVtcyA9IG5ld0l0ZW1zO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVWlPbkZpbmFsaXplKG5ld0l0ZW1zOiBUb2RvSXRlbVtdKSB7XG4gICAgY29uc3Qgb2xkSW5kZXggPSAkeVRvZG9JdGVtcy50b0FycmF5KCkuZmluZEluZGV4KCh5TWFwKSA9PiB5TWFwLmdldChcImlkXCIpID09PSAkaXRlbVRvUHJvY2Vzc0lkKTtcblxuICAgIGNvbnN0IG9sZEl0ZW0gPSAkeVRvZG9JdGVtcy5nZXQob2xkSW5kZXgpO1xuICAgIGNvbnN0IG5ld0l0ZW0gPSBuZXcgWS5NYXA8c3RyaW5nIHwgYm9vbGVhbj4oKTtcbiAgICBuZXdJdGVtLnNldChcImlkXCIsIG9sZEl0ZW0uZ2V0KFwiaWRcIikpO1xuICAgIG5ld0l0ZW0uc2V0KFwibmFtZVwiLCBvbGRJdGVtLmdldChcIm5hbWVcIikpO1xuICAgIG5ld0l0ZW0uc2V0KFwiY29tcGxldGVkXCIsIG9sZEl0ZW0uZ2V0KFwiY29tcGxldGVkXCIpKTtcbiAgICBuZXdJdGVtLnNldChcImxpc3RJZFwiLCBvbGRJdGVtLmdldChcImxpc3RJZFwiKSk7XG5cbiAgICAkeVRvZG9JdGVtcy5kb2MudHJhbnNhY3QoKCkgPT4ge1xuICAgICAgJHlUb2RvSXRlbXMuZGVsZXRlKG9sZEluZGV4KTtcblxuICAgICAgLy8gTW92ZSB0aGUgaXRlbSB0byB0aGUgbmV3IHBvc2l0aW9uLlxuXG4gICAgICBjb25zdCBpbmRleEluTmV3SXRlbXMgPSBuZXdJdGVtcy5maW5kSW5kZXgoKGxpc3QpID0+IGxpc3QuaWQgPT09ICRpdGVtVG9Qcm9jZXNzSWQpO1xuICAgICAgY29uc3QgcHJldkl0ZW1JZCA9IGluZGV4SW5OZXdJdGVtcyA9PT0gMCA/IG51bGwgOiBuZXdJdGVtc1tpbmRleEluTmV3SXRlbXMgLSAxXS5pZDtcblxuICAgICAgaWYgKCFwcmV2SXRlbUlkKSB7XG4gICAgICAgICR5VG9kb0l0ZW1zLnVuc2hpZnQoW25ld0l0ZW1dKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbmRleCA9ICR5VG9kb0l0ZW1zLnRvQXJyYXkoKS5maW5kSW5kZXgoKHlNYXApID0+IHlNYXAuZ2V0KFwiaWRcIikgPT09IHByZXZJdGVtSWQpICsgMTtcbiAgICAgICR5VG9kb0l0ZW1zLmluc2VydChpbmRleCwgW25ld0l0ZW1dKTtcbiAgICB9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjx1bFxuICBjbGFzcz1cIlxuICAgIG1pbi1oLVs0MHB4XSByb3VuZGVkLWxnXG4gICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gIFwiXG4gIHN0eWxlOnZpc2liaWxpdHk9e2lzU2Nyb2xsUG9zaXRpb25SZXN0b3JlZCA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIn1cbiAgYXJpYS1sYWJlbD17dGl0bGV9XG4gIHVzZTpkbmR6b25lPXt7XG4gICAgaXRlbXMsXG4gICAgZmxpcER1cmF0aW9uTXMsXG4gICAgZHJhZ0Rpc2FibGVkLFxuICAgIG1vcnBoRGlzYWJsZWQ6IHRydWUsXG4gICAgZHJvcFRhcmdldFN0eWxlOiB7fSxcbiAgICBkcm9wVGFyZ2V0Q2xhc3NlczogW1wiYm9yZGVyLTJcIiwgXCJib3JkZXItZGFzaGVkXCIsIFwicm91bmRlZC1sZ1wiLCBcImJvcmRlci1hY2NlbnRcIl0sXG4gIH19XG4gIG9uOmNvbnNpZGVyPXsoZXZlbnQpID0+IGhhbmRsZUNvbnNpZGVyKGV2ZW50LCB1cGRhdGVVaU9uQ29uc2lkZXIpfVxuICBvbjpmaW5hbGl6ZT17KGV2ZW50KSA9PiBoYW5kbGVGaW5hbGl6ZShldmVudCwgdXBkYXRlVWlPbkZpbmFsaXplKX1cbj5cbiAgeyNlYWNoIGl0ZW1zIGFzIGl0ZW0gKGl0ZW0uaWQpfVxuICAgIDxsaVxuICAgICAgY2xhc3M9XCJcbiAgICAgICAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHJvdW5kZWQtbGdcbiAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICBcIlxuICAgICAgYXJpYS1sYWJlbD17aXRlbS5uYW1lfVxuICAgICAgYW5pbWF0ZTpmbGlwPXt7IGR1cmF0aW9uOiBmbGlwRHVyYXRpb25NcyB9fVxuICAgICAgdXNlOm9uS2V5ZG93bj17KGV2ZW50KSA9PiBoYW5kbGVEcmFnS2V5RG93bihldmVudCwgaXRlbS5pZCl9XG4gICAgPlxuICAgICAgeyNpZiBpdGVtLmlzRWRpdGluZ31cbiAgICAgICAgPEVkaXRGb3JtIHtpdGVtfSB7dXBkYXRlSXRlbX0ge21lbnVDbGFzc30gLz5cbiAgICAgIHs6ZWxzZX1cbiAgICAgICAgPGxhYmVsXG4gICAgICAgICAgdGl0bGU9XCJDbGljayB0byB0b2dnbGUgY29tcGxldGVkLlwiXG4gICAgICAgICAgY2xhc3M9XCJcbiAgICAgICAgICAgIGZsZXggaXRlbXMtY2VudGVyIGdhcC0zIGdyb3cgcHgtMiBweS0xLjUgbXItNSByb3VuZGVkLWxnXG4gICAgICAgICAgICB0ZXh0LWxnIGN1cnNvci1wb2ludGVyIGFjdGl2ZTpiZy1iYXNlLTMwMFwiXG4gICAgICAgICAgY2xhc3M6b3BhY2l0eS01MD17aXRlbS5jb21wbGV0ZWR9XG4gICAgICAgICAgY2xhc3M6cG9pbnRlci1ldmVudHMtbm9uZT17JG9wZW5lZE1lbnVJZH1cbiAgICAgICAgICBjbGFzczpob3ZlcjpiZy1iYXNlLTIwMD17IWhhc1RvdWNoU2NyZWVufVxuICAgICAgICA+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgY2xhc3M9XCJcbiAgICAgICAgICAgICAgY2hlY2tib3ggYmctdHJhbnNwYXJlbnQgcG9pbnRlci1ldmVudHMtYXV0b1xuICAgICAgICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nLTIgZm9jdXMtdmlzaWJsZTpyaW5nLWFjY2VudCBmb2N1cy12aXNpYmxlOnJpbmctb2Zmc2V0LXRyYW5zcGFyZW50XG4gICAgICAgICAgICBcIlxuICAgICAgICAgICAgY2hlY2tlZD17aXRlbS5jb21wbGV0ZWR9XG4gICAgICAgICAgICBvbjpjaGFuZ2U9eygpID0+IHRvZ2dsZUNvbXBsZXRlZChpdGVtLmlkKX1cbiAgICAgICAgICAgIG9uOmtleWRvd249eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVDb21wbGV0ZWQoaXRlbS5pZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxzcGFuIHN0eWxlPVwid29yZC1icmVhazogYnJlYWstd29yZDtcIiBjbGFzczpsaW5lLXRocm91Z2g9e2l0ZW0uY29tcGxldGVkfT5cbiAgICAgICAgICAgIHtpdGVtLm5hbWV9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGdhcC0xXCI+XG4gICAgICAgICAgPE9wdGlvbnNNZW51IHtpdGVtfSB7dXBkYXRlSXRlbX0ge2RlbGV0ZUl0ZW19IHttZW51Q2xhc3N9IHttb3ZlVG9kb01lbnVJZH0gLz5cblxuICAgICAgICAgIDxEcmFnSGFuZGxlIGJpbmQ6ZHJhZ0Rpc2FibGVkIGl0ZW1JZD17aXRlbS5pZH0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICB7L2lmfVxuICAgIDwvbGk+XG4gIHs6ZWxzZX1cbiAgICA8bGlcbiAgICAgIGNsYXNzPVwiXG4gICAgICBmbGV4IGl0ZW1zLWNlbnRlciBoLTEwIHB4LTIgcm91bmRlZC1sZ1xuICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgXCJcbiAgICAgIGluOmZhZGU9e3sgZGVsYXk6IDI1MCB9fVxuICAgID5cbiAgICAgIFRoaXMgbGlzdCBpcyBsb29raW5nIGxvbmVseSEgQWRkIHNvbWUgaXRlbXM/XG4gICAgPC9saT5cbiAgey9lYWNofVxuPC91bD5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gIGltcG9ydCB7IGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgQ2hldnJvblJpZ2h0IH0gZnJvbSBcImx1Y2lkZS1zdmVsdGVcIjtcbiAgaW1wb3J0IHsgZG5kem9uZSB9IGZyb20gXCJzdmVsdGUtZG5kLWFjdGlvblwiO1xuICBpbXBvcnQgKiBhcyBZIGZyb20gXCJ5anNcIjtcblxuICBpbXBvcnQgeyBvbktleWRvd24gfSBmcm9tIFwiJGxpYi9hY3Rpb25zL29uS2V5ZG93blwiO1xuICBpbXBvcnQgeyB1c2VIYXNUb3VjaFNjcmVlbiB9IGZyb20gXCIkbGliL2hvb2tzL3VzZUhhc1RvdWNoU2NyZWVuXCI7XG5cbiAgaW1wb3J0IHsgaXRlbVRvUHJvY2Vzc0lkLCBvcGVuZWRNZW51SWQsIHNlbGVjdGVkTGlzdElkLCB1cmxIYXNoIH0gZnJvbSBcIiRzdG9yZXMvY2xpZW50T25seVN0YXRlXCI7XG4gIGltcG9ydCB7IHRvZG9MaXN0cywgdG9kb0l0ZW1zLCB5VG9kb0xpc3RzIH0gZnJvbSBcIiRzdG9yZXMvY3JkdFN0YXRlXCI7XG5cbiAgaW1wb3J0IERyYWdIYW5kbGUgZnJvbSBcIi4vRHJhZ0hhbmRsZS5zdmVsdGVcIjtcbiAgaW1wb3J0IEVkaXRGb3JtIGZyb20gXCIuL0VkaXRGb3JtLnN2ZWx0ZVwiO1xuICBpbXBvcnQgT3B0aW9uc01lbnUgZnJvbSBcIi4vT3B0aW9uc01lbnUuc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHR5cGUgeyBUb2RvTGlzdCB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuICBpbXBvcnQgdHlwZSB7IERlbGV0ZUl0ZW0sIERuZEhhbmRsZXIsIFVwZGF0ZUl0ZW0gfSBmcm9tIFwiLi9Ub2RvQXBwLnN2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgdXBkYXRlSXRlbTogVXBkYXRlSXRlbTtcbiAgZXhwb3J0IGxldCBkZWxldGVJdGVtOiBEZWxldGVJdGVtO1xuICBleHBvcnQgbGV0IGhhbmRsZUNvbnNpZGVyOiBEbmRIYW5kbGVyO1xuICBleHBvcnQgbGV0IGhhbmRsZUZpbmFsaXplOiBEbmRIYW5kbGVyO1xuICBleHBvcnQgbGV0IGhhbmRsZURyYWdLZXlEb3duOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGl0ZW1JZDogc3RyaW5nKSA9PiB2b2lkO1xuICBleHBvcnQgbGV0IGRyYWdEaXNhYmxlZDogYm9vbGVhbjtcbiAgZXhwb3J0IGxldCBmbGlwRHVyYXRpb25NczogbnVtYmVyO1xuICBleHBvcnQgbGV0IG1lbnVDbGFzczogc3RyaW5nO1xuICBleHBvcnQgbGV0IGNvbmZpcm1EZWxldGlvbk1vZGFsSWQ6IHN0cmluZztcbiAgZXhwb3J0IGxldCBpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWQ6IGJvb2xlYW47XG5cbiAgY29uc3QgaGFzVG91Y2hTY3JlZW4gPSB1c2VIYXNUb3VjaFNjcmVlbigpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVVpT25Db25zaWRlcihuZXdJdGVtczogVG9kb0xpc3RbXSkge1xuICAgICR0b2RvTGlzdHMgPSBuZXdJdGVtcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVVpT25GaW5hbGl6ZShuZXdJdGVtczogVG9kb0xpc3RbXSkge1xuICAgIGNvbnN0IG9sZEluZGV4ID0gJHlUb2RvTGlzdHMudG9BcnJheSgpLmZpbmRJbmRleCgoeU1hcCkgPT4geU1hcC5nZXQoXCJpZFwiKSA9PT0gJGl0ZW1Ub1Byb2Nlc3NJZCk7XG5cbiAgICBjb25zdCBvbGRMaXN0ID0gJHlUb2RvTGlzdHMuZ2V0KG9sZEluZGV4KTtcbiAgICBjb25zdCBuZXdMaXN0ID0gbmV3IFkuTWFwPHN0cmluZz4oKTtcblxuICAgIGxldCBvbGRMaXN0SWQgPSBvbGRMaXN0LmdldChcImlkXCIpO1xuICAgIGlmICh0eXBlb2Ygb2xkTGlzdElkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbGlzdCBJRCBtdXN0IGJlIGEgc3RyaW5nLlwiKTtcbiAgICB9XG5cbiAgICBsZXQgb2xkTGlzdE5hbWUgPSBvbGRMaXN0LmdldChcIm5hbWVcIik7XG4gICAgaWYgKHR5cGVvZiBvbGRMaXN0TmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGxpc3QgbmFtZSBtdXN0IGJlIGEgc3RyaW5nLlwiKTtcbiAgICB9XG5cbiAgICBuZXdMaXN0LnNldChcImlkXCIsIG9sZExpc3RJZCk7XG4gICAgbmV3TGlzdC5zZXQoXCJuYW1lXCIsIG9sZExpc3ROYW1lKTtcblxuICAgICR5VG9kb0xpc3RzLmRvYy50cmFuc2FjdCgoKSA9PiB7XG4gICAgICAkeVRvZG9MaXN0cy5kZWxldGUob2xkSW5kZXgpO1xuXG4gICAgICAvLyBNb3ZlIHRoZSBsaXN0IHRvIHRoZSBuZXcgcG9zaXRpb24uXG4gICAgICBjb25zdCBpbmRleCA9IG5ld0l0ZW1zLmZpbmRJbmRleCgobGlzdCkgPT4gbGlzdC5pZCA9PT0gJGl0ZW1Ub1Byb2Nlc3NJZCk7XG4gICAgICAkeVRvZG9MaXN0cy5pbnNlcnQoaW5kZXgsIFtuZXdMaXN0XSk7XG4gICAgfSk7XG4gIH1cbjwvc2NyaXB0PlxuXG48dWxcbiAgY2xhc3M9XCJcbiAgICBtaW4taC1bNDBweF0gcm91bmRlZC1sZ1xuICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICBcIlxuICBzdHlsZTp2aXNpYmlsaXR5PXtpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWQgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCJ9XG4gIGFyaWEtbGFiZWw9XCJMaXN0c1wiXG4gIHVzZTpkbmR6b25lPXt7XG4gICAgaXRlbXM6ICR0b2RvTGlzdHMsXG4gICAgZmxpcER1cmF0aW9uTXMsXG4gICAgZHJhZ0Rpc2FibGVkLFxuICAgIG1vcnBoRGlzYWJsZWQ6IHRydWUsXG4gICAgZHJvcFRhcmdldFN0eWxlOiB7fSxcbiAgICBkcm9wVGFyZ2V0Q2xhc3NlczogW1wiYm9yZGVyLTJcIiwgXCJib3JkZXItZGFzaGVkXCIsIFwicm91bmRlZC1sZ1wiLCBcImJvcmRlci1hY2NlbnRcIl0sXG4gIH19XG4gIG9uOmNvbnNpZGVyPXsoZXZlbnQpID0+IGhhbmRsZUNvbnNpZGVyKGV2ZW50LCB1cGRhdGVVaU9uQ29uc2lkZXIpfVxuICBvbjpmaW5hbGl6ZT17KGV2ZW50KSA9PiBoYW5kbGVGaW5hbGl6ZShldmVudCwgdXBkYXRlVWlPbkZpbmFsaXplKX1cbj5cbiAgeyNlYWNoICR0b2RvTGlzdHMgYXMgbGlzdCAobGlzdC5pZCl9XG4gICAge0Bjb25zdCBsaXN0SXRlbXMgPSAkdG9kb0l0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5saXN0SWQgPT09IGxpc3QuaWQpfVxuICAgIHtAY29uc3QgdW5jb21wbGV0ZWRJdGVtcyA9IGxpc3RJdGVtcy5maWx0ZXIoKGl0ZW0pID0+ICFpdGVtLmNvbXBsZXRlZCl9XG4gICAgPGxpXG4gICAgICBjbGFzcz1cIlxuICAgICAgICBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gcm91bmRlZC1sZ1xuICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgIFwiXG4gICAgICBhcmlhLWxhYmVsPXtsaXN0Lm5hbWV9XG4gICAgICBhbmltYXRlOmZsaXA9e3sgZHVyYXRpb246IGZsaXBEdXJhdGlvbk1zIH19XG4gICAgICB1c2U6b25LZXlkb3duPXsoZXZlbnQpID0+IGhhbmRsZURyYWdLZXlEb3duKGV2ZW50LCBsaXN0LmlkKX1cbiAgICA+XG4gICAgICB7I2lmIGxpc3QuaXNFZGl0aW5nfVxuICAgICAgICA8RWRpdEZvcm0gaXRlbT17bGlzdH0ge3VwZGF0ZUl0ZW19IHttZW51Q2xhc3N9IC8+XG4gICAgICB7OmVsc2V9XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0aXRsZT1cIkNsaWNrIHRvIHZpZXcgbGlzdC5cIlxuICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSBncm93IHB4LTIgcHktMS41IG1yLTUgcm91bmRlZC1sZ1xuICAgICAgICAgICAgdGV4dC1sZyB0ZXh0LWxlZnQgYWN0aXZlOmJnLWJhc2UtMzAwXG4gICAgICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgICAgICBcIlxuICAgICAgICAgIGNsYXNzOnBvaW50ZXItZXZlbnRzLW5vbmU9eyRvcGVuZWRNZW51SWR9XG4gICAgICAgICAgY2xhc3M6aG92ZXI6YmctYmFzZS0yMDA9eyFoYXNUb3VjaFNjcmVlbn1cbiAgICAgICAgICBvbjpjbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgJHVybEhhc2ggPSBcImxpc3RJZFwiO1xuICAgICAgICAgICAgJHNlbGVjdGVkTGlzdElkID0gbGlzdC5pZDtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBgL2FwcCMke2xpc3QuaWR9YCk7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIHN0eWxlPVwid29yZC1icmVhazogYnJlYWstd29yZDtcIj5cbiAgICAgICAgICAgIHtsaXN0Lm5hbWV9XG5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmFkZ2UteHMgdHJhbnNpdGlvbi1ub25lIHAtMlwiPlxuICAgICAgICAgICAgICB7dW5jb21wbGV0ZWRJdGVtcy5sZW5ndGh9IC8ge2xpc3RJdGVtcy5sZW5ndGh9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgPENoZXZyb25SaWdodCBjbGFzcz1cInNocmluay0wIHctNCBoLTRcIiAvPlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBnYXAtMVwiPlxuICAgICAgICAgIDxPcHRpb25zTWVudSBpdGVtPXtsaXN0fSB7dXBkYXRlSXRlbX0ge2RlbGV0ZUl0ZW19IHttZW51Q2xhc3N9IHtjb25maXJtRGVsZXRpb25Nb2RhbElkfSAvPlxuXG4gICAgICAgICAgPERyYWdIYW5kbGUgYmluZDpkcmFnRGlzYWJsZWQgaXRlbUlkPXtsaXN0LmlkfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIHsvaWZ9XG4gICAgPC9saT5cbiAgezplbHNlfVxuICAgIDxsaVxuICAgICAgY2xhc3M9XCJcbiAgICAgICAgZmxleCBpdGVtcy1jZW50ZXIgaC0xMCBweC0yIHJvdW5kZWQtbGdcbiAgICAgICAgZm9jdXM6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyByaW5nLWFjY2VudCByaW5nLW9mZnNldC0xIHJpbmctb2Zmc2V0LWJhc2UtMTAwXG4gICAgICBcIlxuICAgICAgaW46ZmFkZT17eyBkZWxheTogMjUwIH19XG4gICAgPlxuICAgICAgTm8gbGlzdHMgeWV0LiBQbGVhc2UgY3JlYXRlIGEgbGlzdCB0byBnZXQgc3RhcnRlZC5cbiAgICA8L2xpPlxuICB7L2VhY2h9XG48L3VsPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCIgY29udGV4dD1cIm1vZHVsZVwiPlxuICBleHBvcnQgdHlwZSBEZWxldGVJdGVtID0gKGl0ZW06IFRvZG9MaXN0IHwgVG9kb0l0ZW0pID0+IHZvaWQ7XG5cbiAgZXhwb3J0IHR5cGUgRG5kSGFuZGxlciA9IChcbiAgICBldmVudDogQ3VzdG9tRXZlbnQsXG4gICAgdXBkYXRlVWk6IChuZXdJdGVtczogVG9kb0xpc3RbXSB8IFRvZG9JdGVtW10pID0+IHZvaWQsXG4gICkgPT4gdm9pZDtcblxuICBleHBvcnQgdHlwZSBVcGRhdGVJdGVtID0gKG5ld0l0ZW06IFRvZG9MaXN0IHwgVG9kb0l0ZW0pID0+IHZvaWQ7XG48L3NjcmlwdD5cblxuPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgU09VUkNFUywgVFJJR0dFUlMgfSBmcm9tIFwic3ZlbHRlLWRuZC1hY3Rpb25cIjtcbiAgaW1wb3J0ICogYXMgWSBmcm9tIFwieWpzXCI7XG5cbiAgaW1wb3J0IHtcbiAgICBpc0xpc3RzT3BlbmVkLFxuICAgIGlzVG9kb09wZW5lZCxcbiAgICBpdGVtVG9Qcm9jZXNzSWQsXG4gICAgbmV3TGlzdCxcbiAgICBuZXdUb2RvLFxuICAgIG9wZW5lZE1lbnVJZCxcbiAgICBzZWxlY3RlZExpc3RJZCxcbiAgfSBmcm9tIFwiJHN0b3Jlcy9jbGllbnRPbmx5U3RhdGVcIjtcbiAgaW1wb3J0IHsgdG9kb0xpc3RzLCB0b2RvSXRlbXMsIHlUb2RvTGlzdHMsIHlUb2RvSXRlbXMsIGlzVG9kb0l0ZW0gfSBmcm9tIFwiJHN0b3Jlcy9jcmR0U3RhdGVcIjtcbiAgaW1wb3J0IHsgbGl2ZVZpZXcgfSBmcm9tIFwiJHN0b3Jlcy9saXZlVmlld1NvY2tldFwiO1xuXG4gIGltcG9ydCB7IHN5bmNEb2N1bWVudFRvU2VydmVyIH0gZnJvbSBcIi4vU3RhdGVNYW5hZ2VtZW50LnN2ZWx0ZVwiO1xuICBpbXBvcnQgQ29uZmlybURlbGV0aW9uTW9kYWwgZnJvbSBcIi4vQ29uZmlybURlbGV0aW9uTW9kYWwuc3ZlbHRlXCI7XG4gIGltcG9ydCBJdGVtc0NvbnRhaW5lciBmcm9tIFwiLi9JdGVtc0NvbnRhaW5lci5zdmVsdGVcIjtcbiAgaW1wb3J0IE1vdmVUb2RvTWVudSBmcm9tIFwiLi9Nb3ZlVG9kb01lbnUuc3ZlbHRlXCI7XG4gIGltcG9ydCBOZXdJdGVtRm9ybSBmcm9tIFwiLi9OZXdJdGVtRm9ybS5zdmVsdGVcIjtcbiAgaW1wb3J0IFRvZG9DaGVja0xpc3QgZnJvbSBcIi4vVG9kb0NoZWNrTGlzdC5zdmVsdGVcIjtcbiAgaW1wb3J0IFRvZG9MaXN0U2VsZWN0b3IgZnJvbSBcIi4vVG9kb0xpc3RTZWxlY3Rvci5zdmVsdGVcIjtcblxuICBpbXBvcnQgdHlwZSB7IFRvZG9MaXN0LCBUb2RvSXRlbSB9IGZyb20gXCIkc3RvcmVzL2NyZHRTdGF0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgbWVudUNsYXNzOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkOiBib29sZWFuO1xuXG4gIGNvbnN0IGNvbmZpcm1EZWxldGlvbk1vZGFsSWQgPSBcImNvbmZpcm0tZGVsZXRpb24tbW9kYWwtaWRcIjtcbiAgY29uc3QgbW92ZVRvZG9NZW51SWQgPSBcIm1vdmUtdG9kby1tZW51LWlkXCI7XG4gIGNvbnN0IGZsaXBEdXJhdGlvbk1zID0gMTAwO1xuICBsZXQgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcblxuICAvLyBUb2RvIGxpc3RzIGhhbmRsZXJzIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4gIGZ1bmN0aW9uIGFkZExpc3QoKSB7XG4gICAgY29uc3QgbGlzdCA9IG5ldyBZLk1hcDxzdHJpbmc+KCk7XG4gICAgbGlzdC5zZXQoXCJpZFwiLCBjcnlwdG8ucmFuZG9tVVVJRCgpKTtcbiAgICBsaXN0LnNldChcIm5hbWVcIiwgJG5ld0xpc3QpO1xuICAgICR5VG9kb0xpc3RzLnVuc2hpZnQoW2xpc3RdKTtcblxuICAgICRuZXdMaXN0ID0gXCJcIjtcblxuICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gIH1cblxuICAvLyBUb2RvIGl0ZW1zIGhhbmRsZXJzIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4gIGZ1bmN0aW9uIGFkZFRvZG8oKSB7XG4gICAgY29uc3QgdG9kbyA9IG5ldyBZLk1hcDxzdHJpbmcgfCBib29sZWFuPigpO1xuICAgIHRvZG8uc2V0KFwiaWRcIiwgY3J5cHRvLnJhbmRvbVVVSUQoKSk7XG4gICAgdG9kby5zZXQoXCJuYW1lXCIsICRuZXdUb2RvKTtcbiAgICB0b2RvLnNldChcImNvbXBsZXRlZFwiLCBmYWxzZSk7XG4gICAgdG9kby5zZXQoXCJsaXN0SWRcIiwgJHNlbGVjdGVkTGlzdElkKTtcbiAgICAkeVRvZG9JdGVtcy51bnNoaWZ0KFt0b2RvXSk7XG5cbiAgICAkbmV3VG9kbyA9IFwiXCI7XG5cbiAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlQ29tcGxldGVkKGl0ZW1JZDogc3RyaW5nKSB7XG4gICAgZm9yIChjb25zdCB5VG9kbyBvZiAkeVRvZG9JdGVtcykge1xuICAgICAgaWYgKHlUb2RvLmdldChcImlkXCIpID09PSBpdGVtSWQpIHtcbiAgICAgICAgeVRvZG8uc2V0KFwiY29tcGxldGVkXCIsICF5VG9kby5nZXQoXCJjb21wbGV0ZWRcIikpO1xuICAgICAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgYSB0b2RvIGl0ZW0gdG8gYSBuZXcgbGlzdC5cbiAgICovXG4gIGZ1bmN0aW9uIG1vdmVUb2RvKGl0ZW1Ub01vdmU6IFRvZG9JdGVtLCBuZXdMaXN0SWQ6IHN0cmluZykge1xuICAgIC8vIFJldHVybiBpZiB0aGUgaXRlbVRvTW92ZSBpcyBhbHJlYWR5IGluIHRoZSBuZXcgbGlzdC5cbiAgICBpZiAoaXRlbVRvTW92ZS5saXN0SWQgPT09IG5ld0xpc3RJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE1vdmUgaXRlbVRvTW92ZSB0byB0aGUgdG9wIG9mIHRoZSBuZXcgbGlzdC5cbiAgICBjb25zdCBpbmRleCA9ICR5VG9kb0l0ZW1zLnRvQXJyYXkoKS5maW5kSW5kZXgoKHlUb2RvKSA9PiB5VG9kby5nZXQoXCJpZFwiKSA9PT0gaXRlbVRvTW92ZS5pZCk7XG4gICAgY29uc3QgdG9kbyA9IG5ldyBZLk1hcDxzdHJpbmcgfCBib29sZWFuPigpO1xuICAgIHRvZG8uc2V0KFwiaWRcIiwgaXRlbVRvTW92ZS5pZCk7XG4gICAgdG9kby5zZXQoXCJuYW1lXCIsIGl0ZW1Ub01vdmUubmFtZSk7XG4gICAgdG9kby5zZXQoXCJjb21wbGV0ZWRcIiwgaXRlbVRvTW92ZS5jb21wbGV0ZWQpO1xuICAgIHRvZG8uc2V0KFwibGlzdElkXCIsIG5ld0xpc3RJZCk7XG5cbiAgICAkeVRvZG9JdGVtcy5kb2MudHJhbnNhY3QoKCkgPT4ge1xuICAgICAgJHlUb2RvSXRlbXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICR5VG9kb0l0ZW1zLnVuc2hpZnQoW3RvZG9dKTtcbiAgICB9KTtcblxuICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gIH1cblxuICAvLyBTaGFyZWQgaGFuZGxlcnMgZm9yIGJvdGggdG9kbyBsaXN0cyBhbmQgdG9kbyBpdGVtcyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4gIGNvbnN0IHVwZGF0ZUl0ZW06IFVwZGF0ZUl0ZW0gPSAobmV3SXRlbSkgPT4ge1xuICAgIGlmIChpc1RvZG9JdGVtKG5ld0l0ZW0pKSB7XG4gICAgICBmb3IgKGNvbnN0IHlUb2RvIG9mICR5VG9kb0l0ZW1zKSB7XG4gICAgICAgIGlmICh5VG9kby5nZXQoXCJpZFwiKSA9PT0gbmV3SXRlbS5pZCkge1xuICAgICAgICAgICR5VG9kb0l0ZW1zLmRvYy50cmFuc2FjdCgoKSA9PiB7XG4gICAgICAgICAgICB5VG9kby5zZXQoXCJuYW1lXCIsIG5ld0l0ZW0ubmFtZSk7XG4gICAgICAgICAgICB5VG9kby5zZXQoXCJjb21wbGV0ZWRcIiwgbmV3SXRlbS5jb21wbGV0ZWQpO1xuICAgICAgICAgICAgeVRvZG8uc2V0KFwibGlzdElkXCIsIG5ld0l0ZW0ubGlzdElkKTtcblxuICAgICAgICAgICAgbmV3SXRlbS5uZXdOYW1lID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB5VG9kby5kZWxldGUoXCJuZXdOYW1lXCIpXG4gICAgICAgICAgICAgIDogeVRvZG8uc2V0KFwibmV3TmFtZVwiLCBuZXdJdGVtLm5ld05hbWUpO1xuXG4gICAgICAgICAgICBuZXdJdGVtLmlzRWRpdGluZyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8geVRvZG8uZGVsZXRlKFwiaXNFZGl0aW5nXCIpXG4gICAgICAgICAgICAgIDogeVRvZG8uc2V0KFwiaXNFZGl0aW5nXCIsIG5ld0l0ZW0uaXNFZGl0aW5nKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgeUxpc3Qgb2YgJHlUb2RvTGlzdHMpIHtcbiAgICAgICAgaWYgKHlMaXN0LmdldChcImlkXCIpID09PSBuZXdJdGVtLmlkKSB7XG4gICAgICAgICAgJHlUb2RvTGlzdHMuZG9jLnRyYW5zYWN0KCgpID0+IHtcbiAgICAgICAgICAgIHlMaXN0LnNldChcIm5hbWVcIiwgbmV3SXRlbS5uYW1lKTtcblxuICAgICAgICAgICAgbmV3SXRlbS5uZXdOYW1lID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB5TGlzdC5kZWxldGUoXCJuZXdOYW1lXCIpXG4gICAgICAgICAgICAgIDogeUxpc3Quc2V0KFwibmV3TmFtZVwiLCBuZXdJdGVtLm5ld05hbWUpO1xuXG4gICAgICAgICAgICBuZXdJdGVtLmlzRWRpdGluZyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8geUxpc3QuZGVsZXRlKFwiaXNFZGl0aW5nXCIpXG4gICAgICAgICAgICAgIDogeUxpc3Quc2V0KFwiaXNFZGl0aW5nXCIsIG5ld0l0ZW0uaXNFZGl0aW5nKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGRlbGV0ZUl0ZW06IERlbGV0ZUl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICBpZiAoaXNUb2RvSXRlbShpdGVtKSkge1xuICAgICAgZm9yIChjb25zdCB5VG9kbyBvZiAkeVRvZG9JdGVtcykge1xuICAgICAgICBpZiAoeVRvZG8uZ2V0KFwiaWRcIikgPT09IGl0ZW0uaWQpIHtcbiAgICAgICAgICAkeVRvZG9JdGVtcy5kZWxldGUoaW5kZXgpO1xuICAgICAgICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgeUxpc3Qgb2YgJHlUb2RvTGlzdHMpIHtcbiAgICAgICAgaWYgKHlMaXN0LmdldChcImlkXCIpID09PSBpdGVtLmlkKSB7XG4gICAgICAgICAgJHlUb2RvTGlzdHMuZG9jLnRyYW5zYWN0KCgpID0+IHtcbiAgICAgICAgICAgICR5VG9kb0xpc3RzLmRlbGV0ZShpbmRleCk7XG4gICAgICAgICAgICBjbGVhbk9ycGhhbmVkVG9kb3MoaXRlbS5pZCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjbGVhbk9ycGhhbmVkVG9kb3MobGlzdElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvbGRUb2RvTGlzdElkcyA9ICR0b2RvTGlzdHMubWFwKChsaXN0KSA9PiBsaXN0LmlkKTtcbiAgICBjb25zdCBuZXdUb2RvTGlzdElkcyA9IG9sZFRvZG9MaXN0SWRzLmZpbHRlcigoaWQpID0+IGlkICE9PSBsaXN0SWQpO1xuXG4gICAgLy8gTk9URTogVGhlIGluZGV4IGlzIHRyYWNrZWQgbWFudWFsbHkgaGVyZSBiZWNhdXNlIHRoZSBkZWxldGVcbiAgICAvLyBvcGVyYXRpb24gY2hhbmdlcyB0aGUgYXJyYXkgbGVuZ3RoLlxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgJHlUb2RvSXRlbXMuZm9yRWFjaCgoeU1hcCkgPT4ge1xuICAgICAgbGV0IHlNYXBMaXN0SWQgPSB5TWFwLmdldChcImxpc3RJZFwiKTtcbiAgICAgIHlNYXBMaXN0SWQgPSB0eXBlb2YgeU1hcExpc3RJZCA9PT0gXCJzdHJpbmdcIiA/IHlNYXBMaXN0SWQgOiBcIlwiO1xuXG4gICAgICBpZiAoIW5ld1RvZG9MaXN0SWRzLmluY2x1ZGVzKHlNYXBMaXN0SWQpKSB7XG4gICAgICAgICR5VG9kb0l0ZW1zLmRlbGV0ZShpbmRleCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBpbmNyZW1lbnQgaW5kZXggaWYgdGhlIGl0ZW0gaXMgbm90IGRlbGV0ZWQuXG4gICAgICBpbmRleCsrO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gRHJhZyBhbmQgZHJvcCBoYW5kbGVycyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuICBjb25zdCBoYW5kbGVDb25zaWRlcjogRG5kSGFuZGxlciA9IChldmVudCwgdXBkYXRlVWlPbkNvbnNpZGVyKSA9PiB7XG4gICAgLy8gVXBkYXRlIHRoZSBpdGVtcyBsaXN0IGluIHRoZSBVSS5cbiAgICBjb25zdCBuZXdJdGVtcyA9IGZpbHRlckR1cGxpY2F0ZXMoZXZlbnQuZGV0YWlsLml0ZW1zKTtcbiAgICB1cGRhdGVVaU9uQ29uc2lkZXIobmV3SXRlbXMpO1xuXG4gICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIGtleWJvYXJkLlxuICAgIGNvbnN0IHsgc291cmNlLCB0cmlnZ2VyIH0gPSBldmVudC5kZXRhaWwuaW5mbztcbiAgICBpZiAoc291cmNlID09PSBTT1VSQ0VTLktFWUJPQVJEICYmIHRyaWdnZXIgPT09IFRSSUdHRVJTLkRSQUdfU1RPUFBFRCkge1xuICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRmluYWxpemU6IERuZEhhbmRsZXIgPSAoZXZlbnQsIHVwZGF0ZVVpT25GaW5hbGl6ZSkgPT4ge1xuICAgIC8vIFVwZGF0ZSB0aGUgaXRlbXMgbGlzdCBpbiB0aGUgVUkuXG4gICAgLy8gVE9ETzogSXMgaXQgbmVjZXNzYXJ5IHRvIGNoZWNrIHRoYXQgdGhlIGlkIGlzIHJlc2V0IGJhY2sgZnJvbSB0aGVcbiAgICAvLyBzdmVsdGUtZG5kLWFjdGlvbiBwbGFjZWhvbGRlciBpZD8gSWYgdGhlIGlkIGlzIG5vdCByZXNldCwgdGhlblxuICAgIC8vIGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgZHVwbGljYXRlIGlkcyB3aGljaCB3aWxsIGNyYXNoIHRoZSBhcHAuXG4gICAgY29uc3QgbmV3SXRlbXMgPSBmaWx0ZXJEdXBsaWNhdGVzKGV2ZW50LmRldGFpbC5pdGVtcyk7XG4gICAgdXBkYXRlVWlPbkZpbmFsaXplKG5ld0l0ZW1zKTtcblxuICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBwb2ludGVyIChtb3VzZSwgdG91Y2gpXG4gICAgY29uc3QgeyBzb3VyY2UgfSA9IGV2ZW50LmRldGFpbC5pbmZvO1xuICAgIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuUE9JTlRFUikge1xuICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIHRvIHNlcnZlci5cbiAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmVtb3ZlIGFueSBpdGVtcyB3aXRoIGR1cGxpY2F0ZSBpZHMgZnJvbSB0aGUgaXRlbXMgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBmaWx0ZXJEdXBsaWNhdGVzKGl0ZW1zOiBUb2RvTGlzdFtdIHwgVG9kb0l0ZW1bXSkge1xuICAgIGNvbnN0IGlkczogc3RyaW5nW10gPSBbXTtcblxuICAgIHJldHVybiBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgIGlmICghaWRzLmluY2x1ZGVzKGl0ZW0uaWQpKSB7XG4gICAgICAgIGlkcy5wdXNoKGl0ZW0uaWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUga2V5ZG93biBldmVudHMgZm9yIGRyYWcgYW5kIGRyb3AuXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVEcmFnS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCwgaXRlbUlkOiBzdHJpbmcpIHtcbiAgICAvLyBBbGxvdyBFbnRlciBhbmQgU3BhY2Uga2V5cyB0byBzdGFydCBkcmFnIGFuZCBkcm9wLlxuICAgIGlmICgoZXZlbnQua2V5ID09PSBcIkVudGVyXCIgfHwgZXZlbnQua2V5ID09PSBcIiBcIikgJiYgZHJhZ0Rpc2FibGVkKSB7XG4gICAgICBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgLy8gVHJhY2sgd2hpY2ggaXRlbSBpcyBiZWluZyBkcmFnZ2VkLlxuICAgICAgJGl0ZW1Ub1Byb2Nlc3NJZCA9IGl0ZW1JZDtcbiAgICB9XG4gIH1cblxuICAvLyBLZWVwIHNlbGVjdGVkIGxpc3QgbmFtZSBhbmQgaXRlbXMgaW4gc3luYyB3aXRoIHNlbGVjdGVkIGxpc3QgaWQgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG4gIGZ1bmN0aW9uIHNldFNlbGVjdGVkTGlzdE5hbWUobGlzdElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gJHRvZG9MaXN0cy5maW5kKChsaXN0KSA9PiBsaXN0LmlkID09PSBsaXN0SWQpPy5uYW1lID8/IFwiXCI7XG4gIH1cbiAgJDogc2VsZWN0ZWRMaXN0TmFtZSA9IHNldFNlbGVjdGVkTGlzdE5hbWUoJHNlbGVjdGVkTGlzdElkKTtcblxuICAkOiBzZWxlY3RlZExpc3RUb2RvSXRlbXMgPSAkdG9kb0l0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5saXN0SWQgPT09ICRzZWxlY3RlZExpc3RJZCk7XG4gICQ6IHNlbGVjdGVkTGlzdFVuY29tcGxldGVkSXRlbXMgPSBzZWxlY3RlZExpc3RUb2RvSXRlbXMuZmlsdGVyKChpdGVtKSA9PiAhaXRlbS5jb21wbGV0ZWQpO1xuXG4gIC8vIEdldCBpdGVtVG9Nb3ZlIHdoZW4gJGl0ZW1Ub1Byb2Nlc3NJZCBjaGFuZ2VzIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXG4gICQ6IGl0ZW1Ub01vdmUgPSAkdG9kb0l0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09ICRpdGVtVG9Qcm9jZXNzSWQpO1xuPC9zY3JpcHQ+XG5cbnsjaWYgJGl0ZW1Ub1Byb2Nlc3NJZCAmJiAkb3BlbmVkTWVudUlkID09PSBjb25maXJtRGVsZXRpb25Nb2RhbElkfVxuICA8Q29uZmlybURlbGV0aW9uTW9kYWwgbGlzdElkPXskaXRlbVRvUHJvY2Vzc0lkfSB7bWVudUNsYXNzfSB7ZGVsZXRlSXRlbX0gLz5cbnsvaWZ9XG5cbnsjaWYgaXRlbVRvTW92ZSAmJiAkb3BlbmVkTWVudUlkID09PSBtb3ZlVG9kb01lbnVJZH1cbiAgPE1vdmVUb2RvTWVudSB7aXRlbVRvTW92ZX0ge21lbnVDbGFzc30ge21vdmVUb2RvfSAvPlxuey9pZn1cblxueyNpZiAkc2VsZWN0ZWRMaXN0SWR9XG4gIDxOZXdJdGVtRm9ybVxuICAgIGFkZEl0ZW1DYWxsYmFjaz17YWRkVG9kb31cbiAgICBiaW5kOnZhbHVlPXskbmV3VG9kb31cbiAgICBwbGFjZWhvbGRlcj1cIkVudGVyIG5ldyBpdGVtIG5hbWVcIlxuICAgIHN1Ym1pdEJ1dHRvblRleHQ9XCJBZGRcIlxuICAgIHN1Ym1pdEJ1dHRvblRpdGxlPVwiQWRkIGl0ZW0gdG8gbGlzdC5cIlxuICAgIHtpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWR9XG4gIC8+XG5cbiAgPEl0ZW1zQ29udGFpbmVyXG4gICAgdGl0bGU9e3NlbGVjdGVkTGlzdE5hbWV9XG4gICAgdG90YWxDb3VudD17c2VsZWN0ZWRMaXN0VG9kb0l0ZW1zLmxlbmd0aH1cbiAgICB1bmNvbXBsZXRlZENvdW50PXtzZWxlY3RlZExpc3RVbmNvbXBsZXRlZEl0ZW1zLmxlbmd0aH1cbiAgICBiaW5kOmlzRHJvcGRvd25PcGVuZWQ9eyRpc1RvZG9PcGVuZWR9XG4gICAge2lzU2Nyb2xsUG9zaXRpb25SZXN0b3JlZH1cbiAgPlxuICAgIDxUb2RvQ2hlY2tMaXN0XG4gICAgICB0aXRsZT17c2VsZWN0ZWRMaXN0TmFtZX1cbiAgICAgIGl0ZW1zPXtzZWxlY3RlZExpc3RUb2RvSXRlbXN9XG4gICAgICB7dG9nZ2xlQ29tcGxldGVkfVxuICAgICAge3VwZGF0ZUl0ZW19XG4gICAgICB7ZGVsZXRlSXRlbX1cbiAgICAgIHtoYW5kbGVDb25zaWRlcn1cbiAgICAgIHtoYW5kbGVGaW5hbGl6ZX1cbiAgICAgIHtoYW5kbGVEcmFnS2V5RG93bn1cbiAgICAgIGJpbmQ6ZHJhZ0Rpc2FibGVkXG4gICAgICB7ZmxpcER1cmF0aW9uTXN9XG4gICAgICB7bWVudUNsYXNzfVxuICAgICAge21vdmVUb2RvTWVudUlkfVxuICAgICAge2lzU2Nyb2xsUG9zaXRpb25SZXN0b3JlZH1cbiAgICAvPlxuICA8L0l0ZW1zQ29udGFpbmVyPlxuezplbHNlfVxuICA8TmV3SXRlbUZvcm1cbiAgICBhZGRJdGVtQ2FsbGJhY2s9e2FkZExpc3R9XG4gICAgYmluZDp2YWx1ZT17JG5ld0xpc3R9XG4gICAgcGxhY2Vob2xkZXI9XCJFbnRlciBuZXcgbGlzdCBuYW1lXCJcbiAgICBzdWJtaXRCdXR0b25UZXh0PVwiQ3JlYXRlXCJcbiAgICBzdWJtaXRCdXR0b25UaXRsZT1cIkNyZWF0ZSBuZXcgbGlzdC5cIlxuICAgIHtpc1Njcm9sbFBvc2l0aW9uUmVzdG9yZWR9XG4gIC8+XG5cbiAgPEl0ZW1zQ29udGFpbmVyXG4gICAgdGl0bGU9XCJMaXN0c1wiXG4gICAgdG90YWxDb3VudD17JHRvZG9MaXN0cy5sZW5ndGh9XG4gICAgYmluZDppc0Ryb3Bkb3duT3BlbmVkPXskaXNMaXN0c09wZW5lZH1cbiAgICB7aXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkfVxuICA+XG4gICAgPFRvZG9MaXN0U2VsZWN0b3JcbiAgICAgIHt1cGRhdGVJdGVtfVxuICAgICAge2RlbGV0ZUl0ZW19XG4gICAgICB7aGFuZGxlQ29uc2lkZXJ9XG4gICAgICB7aGFuZGxlRmluYWxpemV9XG4gICAgICB7aGFuZGxlRHJhZ0tleURvd259XG4gICAgICBiaW5kOmRyYWdEaXNhYmxlZFxuICAgICAge2ZsaXBEdXJhdGlvbk1zfVxuICAgICAge21lbnVDbGFzc31cbiAgICAgIHtjb25maXJtRGVsZXRpb25Nb2RhbElkfVxuICAgICAge2lzU2Nyb2xsUG9zaXRpb25SZXN0b3JlZH1cbiAgICAvPlxuICA8L0l0ZW1zQ29udGFpbmVyPlxuey9pZn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBpbXBvcnQgeyBmbHkgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgaW1wb3J0IHsgSW5mbyB9IGZyb20gXCJsdWNpZGUtc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHsgdXNlSXNDb25uZWN0ZWQgfSBmcm9tIFwiJGxpYi9ob29rcy91c2VJc0Nvbm5lY3RlZFwiO1xuXG4gIGxldCBuZXdTVzogU2VydmljZVdvcmtlcjtcbiAgbGV0IHNob3dBbGVydCA9IGZhbHNlO1xuICBsZXQgaXNTV1VwZGF0ZUF2YWlsYWJsZSA9IGZhbHNlO1xuICBsZXQgaXNTV1VwZGF0ZUNvbmZpcm1lZCA9IGZhbHNlO1xuICBsZXQgd2lkdGg6IG51bWJlcjtcblxuICBhc3luYyBmdW5jdGlvbiBkZXRlY3RTV1VwZGF0ZSgpIHtcbiAgICAvLyBHZXQgY3VycmVudCBhY3RpdmUgU1cuXG4gICAgY29uc3QgcmVnaXN0cmF0aW9uID0gYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBTVyBhbHJlYWR5IGluc3RhbGxlZCBhbmQgd2FpdGluZy5cbiAgICBuZXdTVyA9IHJlZ2lzdHJhdGlvbi53YWl0aW5nO1xuICAgIGlmIChuZXdTVykge1xuICAgICAgaXNTV1VwZGF0ZUF2YWlsYWJsZSA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgbm8gd2FpdGluZyBTVywgbGlzdGVuIGZvciBuZXcgU1cgaW5zdGFsbC5cbiAgICByZWdpc3RyYXRpb24uYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZvdW5kXCIsICgpID0+IHtcbiAgICAgIG5ld1NXID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmc7XG4gICAgICBuZXdTVz8uYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgaWYgKG5ld1NXLnN0YXRlID09PSBcImluc3RhbGxlZFwiKSB7XG4gICAgICAgICAgaXNTV1VwZGF0ZUF2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgZGV0ZWN0U1dVcGRhdGUoKTtcbiAgfSk7XG5cbiAgJDogaWYgKGlzU1dVcGRhdGVBdmFpbGFibGUpIHtcbiAgICB1c2VJc0Nvbm5lY3RlZCh7IHRpbWVvdXQ6IDEwMDAwIH0pLnRoZW4oKGlzQ29ubmVjdGVkKSA9PiB7XG4gICAgICBpZiAoaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgc2hvd0FsZXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gICQ6IGlmIChpc1NXVXBkYXRlQ29uZmlybWVkKSB7XG4gICAgLy8gVE9ETzogTWVzc2FnZSB0eXBlIGlzIGN1cnJlbnRseSBoYXJkY29kZWQgZHVlIHRvIEZpcmVmb3ggbm90IHN1cHBvcnRpbmdcbiAgICAvLyBFUyBtb2R1bGVzIGluIHNlcnZpY2Ugd29ya2VycyBzbyB0aGUgdmFsdWVzIGNhbid0IGJlIGltcG9ydGVkIDooXG4gICAgbmV3U1cucG9zdE1lc3NhZ2UoeyB0eXBlOiBcInJlcXVlc3Rfc2tpcF93YWl0aW5nXCIgfSk7XG4gIH1cbjwvc2NyaXB0PlxuXG57I2lmIHNob3dBbGVydH1cbiAgPGRpdlxuICAgIHJvbGU9XCJhbGVydFwiXG4gICAgdHJhbnNpdGlvbjpmbHk9e3sgeTogLTEwMCwgZHVyYXRpb246IDc1MCB9fVxuICAgIGJpbmQ6Y2xpZW50V2lkdGg9e3dpZHRofVxuICAgIHN0eWxlOm1hcmdpbi1sZWZ0PXtgLSR7d2lkdGggLyAyfXB4YH1cbiAgICBjbGFzcz1cIlxuICAgICAgZml4ZWQgbGVmdC0xLzIgbWF4LXctWzkwdnddIHhzOm1heC13LXNtIHotNDBcbiAgICAgIGFsZXJ0IHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLW5ldXRyYWwgbS0yXG4gICAgXCJcbiAgPlxuICAgIDxJbmZvIC8+XG5cbiAgICA8ZGl2PlxuICAgICAgPGgzIGNsYXNzPVwiZm9udC1ib2xkXCI+VXBkYXRlIEF2YWlsYWJsZTwvaDM+XG4gICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zbVwiPlJlbG9hZCB0byB1cGRhdGU/PC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2PlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzcz1cImJ0biBidG4tc20gYm9yZGVyIGJvcmRlci1uZXV0cmFsIHRyYW5zaXRpb24tbm9uZVwiXG4gICAgICAgIG9uOmNsaWNrPXsoKSA9PiAoc2hvd0FsZXJ0ID0gZmFsc2UpfVxuICAgICAgPlxuICAgICAgICBMYXRlclxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1hY2NlbnQgYm9yZGVyIGJvcmRlci1uZXV0cmFsXCJcbiAgICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpc1NXVXBkYXRlQ29uZmlybWVkID0gdHJ1ZTtcbiAgICAgICAgICBzaG93QWxlcnQgPSBmYWxzZTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgVXBkYXRlXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG57L2lmfVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IG9wZW5lZE1lbnVJZCwgdXJsSGFzaCB9IGZyb20gXCIkc3RvcmVzL2NsaWVudE9ubHlTdGF0ZVwiO1xuXG4gIGltcG9ydCBBcHBJbmZvIGZyb20gXCIuL0FwcEluZm8uc3ZlbHRlXCI7XG4gIGltcG9ydCBBcHBTa2VsZXRvbiBmcm9tIFwiLi9BcHBTa2VsZXRvbi5zdmVsdGVcIjtcbiAgaW1wb3J0IENsaWNrT3V0c2lkZUNsYXNzSGFuZGxlciBmcm9tIFwiLi9DbGlja091dHNpZGVDbGFzc0hhbmRsZXIuc3ZlbHRlXCI7XG4gIGltcG9ydCBDbGllbnRPbmx5U3RhdGVNYW5hZ2VtZW50IGZyb20gXCIuL0NsaWVudE9ubHlTdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlXCI7XG4gIGltcG9ydCBIZWFkZXIgZnJvbSBcIi4vSGVhZGVyLnN2ZWx0ZVwiO1xuICBpbXBvcnQgU2Nyb2xsUG9zaXRpb25SZXN0b3JlciBmcm9tIFwiLi9TY3JvbGxQb3NpdGlvblJlc3RvcmVyLnN2ZWx0ZVwiO1xuICBpbXBvcnQgU2VydmljZVdvcmtlciBmcm9tIFwiLi9TZXJ2aWNlV29ya2VyLnN2ZWx0ZVwiO1xuICBpbXBvcnQgU3RhdGVNYW5hZ2VtZW50IGZyb20gXCIuL1N0YXRlTWFuYWdlbWVudC5zdmVsdGVcIjtcbiAgaW1wb3J0IFN0aWNreUhlYWRlciBmcm9tIFwiLi9TdGlja3lIZWFkZXIuc3ZlbHRlXCI7XG4gIGltcG9ydCBUaGVtZVN5bmNNYW5hZ2VyIGZyb20gXCIuL1RoZW1lU3luY01hbmFnZXIuc3ZlbHRlXCI7XG4gIGltcG9ydCBUb2FzdCBmcm9tIFwiLi9Ub2FzdC5zdmVsdGVcIjtcbiAgaW1wb3J0IFRvZG9BcHAgZnJvbSBcIi4vVG9kb0FwcC5zdmVsdGVcIjtcbiAgaW1wb3J0IFVwZGF0ZUFsZXJ0IGZyb20gXCIuL1VwZGF0ZUFsZXJ0LnN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgTGl2ZSB9IGZyb20gXCJsaXZlX3N2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgbGl2ZTogTGl2ZTtcbiAgbGl2ZTtcblxuICBleHBvcnQgbGV0IGN1cnJlbnRVc2VyRW1haWw6IHN0cmluZztcblxuICBjb25zdCBtZW51Q2xhc3MgPSBcIm1lbnUtY2xhc3NcIjtcbiAgbGV0IGlzQ2xpZW50U3RhdGVSZXN0b3JlZCA9IGZhbHNlO1xuICBsZXQgaXNTeW5jZWRUb0luZGV4ZWREYiA9IGZhbHNlO1xuICBsZXQgaXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkID0gZmFsc2U7XG4gIGxldCBzZXJ2aWNlV29ya2VyVmVyc2lvbjogc3RyaW5nO1xuPC9zY3JpcHQ+XG5cbjxTdGF0ZU1hbmFnZW1lbnQgYmluZDppc1N5bmNlZFRvSW5kZXhlZERiIC8+XG48Q2xpZW50T25seVN0YXRlTWFuYWdlbWVudCBiaW5kOmlzQ2xpZW50U3RhdGVSZXN0b3JlZCAvPlxuPFNjcm9sbFBvc2l0aW9uUmVzdG9yZXJcbiAge2lzU3luY2VkVG9JbmRleGVkRGJ9XG4gIHtpc0NsaWVudFN0YXRlUmVzdG9yZWR9XG4gIGJpbmQ6aXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkXG4vPlxuPFNlcnZpY2VXb3JrZXIgYmluZDpzZXJ2aWNlV29ya2VyVmVyc2lvbiAvPlxuPFRoZW1lU3luY01hbmFnZXIgLz5cblxuPENsaWNrT3V0c2lkZUNsYXNzSGFuZGxlciBjbGFzc05hbWU9e21lbnVDbGFzc30gY2FsbGJhY2tGdW5jdGlvbj17KCkgPT4gKCRvcGVuZWRNZW51SWQgPSBcIlwiKX0gLz5cblxueyNpZiBpc1N5bmNlZFRvSW5kZXhlZERiICYmIGlzQ2xpZW50U3RhdGVSZXN0b3JlZH1cbiAgPFRvYXN0IC8+XG4gIDxVcGRhdGVBbGVydCAvPlxuXG4gIHsjaWYgJHVybEhhc2ggPT09IFwiXCJ9XG4gICAgPEhlYWRlciB7Y3VycmVudFVzZXJFbWFpbH0ge3NlcnZpY2VXb3JrZXJWZXJzaW9ufSBiaW5kOmlzQ2xpZW50U3RhdGVSZXN0b3JlZCB7bWVudUNsYXNzfSAvPlxuICB7OmVsc2V9XG4gICAgPFN0aWNreUhlYWRlciAvPlxuICB7L2lmfVxuXG4gIHsjaWYgJHVybEhhc2ggPT09IFwiYWJvdXRcIn1cbiAgICA8QXBwSW5mbyAvPlxuICB7OmVsc2V9XG4gICAgPGRpdiBjbGFzcz1cIm1heC13LTJ4bCBteC1hdXRvIHB4LTIgbWQ6cC0wXCI+XG4gICAgICA8VG9kb0FwcCB7bWVudUNsYXNzfSB7aXNTY3JvbGxQb3NpdGlvblJlc3RvcmVkfSAvPlxuICAgIDwvZGl2PlxuICB7L2lmfVxuezplbHNlfVxuICA8QXBwU2tlbGV0b24gLz5cbnsvaWZ9XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgc2hvd1RvcEJhciB9IGZyb20gXCIkbGliL3RvcGJhclwiO1xuXG4gIGltcG9ydCB0eXBlIHsgTGl2ZSB9IGZyb20gXCJsaXZlX3N2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgbGl2ZTogTGl2ZSA9IHVuZGVmaW5lZDtcbiAgbGl2ZTtcblxuICBleHBvcnQgbGV0IHRpdGxlOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgc3VidGl0bGU6IHN0cmluZyA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBocmVmOiBzdHJpbmc7XG4gIGV4cG9ydCBsZXQgbGlua1RleHQ6IHN0cmluZztcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiaGVybyBtaW4taC1zY3JlZW5cIj5cbiAgPGRpdiBjbGFzcz1cImhlcm8tY29udGVudCB0ZXh0LWNlbnRlclwiPlxuICAgIDxkaXYgY2xhc3M9XCJtYXgtdy1tZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm14LWF1dG8gdGV4dC04eGwgbWItMTBcIj4o4peRX+KXkSk8L2Rpdj5cbiAgICAgIDxoMSBjbGFzcz1cInRleHQteGwgZm9udC1ib2xkIG15LTNcIj57dGl0bGV9PC9oMT5cblxuICAgICAgeyNpZiBzdWJ0aXRsZX1cbiAgICAgICAgPHAgY2xhc3M9XCJteS0yXCI+e3N1YnRpdGxlfTwvcD5cbiAgICAgIHsvaWZ9XG5cbiAgICAgIDxhXG4gICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1hY2NlbnQgbXktMlwiXG4gICAgICAgIHtocmVmfVxuICAgICAgICBvbjpjbGlja3xwcmV2ZW50RGVmYXVsdD17KCkgPT4ge1xuICAgICAgICAgIHNob3dUb3BCYXIoKTtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2xpbmtUZXh0fVxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIiwgIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgY291bnQ7XG5cbiAgbGV0IGNsaWVudE9ubHlDb3VudCA9IGNvdW50O1xuPC9zY3JpcHQ+XG5cbjxidXR0b24gcGh4LWNsaWNrPVwiaW5jcmVtZW50XCI+XG4gIHtjb3VudH1cbjwvYnV0dG9uPlxuXG48YnV0dG9uIG9uOmNsaWNrPXsoKSA9PiBjbGllbnRPbmx5Q291bnQrK30+XG4gIHtjbGllbnRPbmx5Q291bnR9XG48L2J1dHRvbj5cblxuPHN0eWxlPlxuICBidXR0b24ge1xuICAgIG1hcmdpbjogMTBweDtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICBpbXBvcnQgdHlwZSB7IExpdmUgfSBmcm9tIFwibGl2ZV9zdmVsdGVcIjtcblxuICBleHBvcnQgbGV0IGxpdmU6IExpdmU7XG5cbiAgZnVuY3Rpb24gcHVzaFZpc2liaWxpdHlDaGFuZ2VFdmVudCgpIHtcbiAgICBjb25zdCBzZXNzaW9uSWRLZXkgPSBcInNlc3Npb25JZFwiO1xuICAgIGxldCBzZXNzaW9uSWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHNlc3Npb25JZEtleSk7XG5cbiAgICBpZiAoIXNlc3Npb25JZCkge1xuICAgICAgc2Vzc2lvbklkID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc2Vzc2lvbklkS2V5LCBzZXNzaW9uSWQpO1xuICAgIH1cblxuICAgIGxpdmU/LnB1c2hFdmVudChcInZpc2liaWxpdHlfY2hhbmdlXCIsIHsgc2Vzc2lvbklkLCB2aXNpYmlsaXR5U3RhdGU6IGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSB9KTtcbiAgfVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIHB1c2hWaXNpYmlsaXR5Q2hhbmdlRXZlbnQoKTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTp3aW5kb3dcbiAgb246dmlzaWJpbGl0eWNoYW5nZT17KCkgPT4ge1xuICAgIHB1c2hWaXNpYmlsaXR5Q2hhbmdlRXZlbnQoKTtcbiAgfX1cbi8+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHsgQ2hlY2sgfSBmcm9tIFwibHVjaWRlLXN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB0eXBlIHsgTGl2ZSB9IGZyb20gXCJsaXZlX3N2ZWx0ZVwiO1xuXG4gIGV4cG9ydCBsZXQgbGl2ZTogTGl2ZSA9IHVuZGVmaW5lZDtcbiAgbGl2ZTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiaC1zY3JlZW4gdy1zY3JlZW4gYmctYWNjZW50IGZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyXCI+XG4gIDxDaGVjayBjb2xvcj1cIiMyYTMyM2NcIiBjbGFzcz1cImgtOTYgdy05NlwiIC8+XG48L2Rpdj5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBSZWRvMiwgVW5kbzIgfSBmcm9tIFwibHVjaWRlLXN2ZWx0ZVwiO1xuXG4gIGltcG9ydCB7IGxpdmVWaWV3IH0gZnJvbSBcIiRzdG9yZXMvbGl2ZVZpZXdTb2NrZXRcIjtcbiAgaW1wb3J0IHsgc3luY0RvY3VtZW50VG9TZXJ2ZXIgfSBmcm9tIFwiLi9TdGF0ZU1hbmFnZW1lbnQuc3ZlbHRlXCI7XG5cbiAgaW1wb3J0IHR5cGUgeyBVbmRvTWFuYWdlciB9IGZyb20gXCJ5anNcIjtcblxuICBleHBvcnQgbGV0IHVuZG9NYW5hZ2VyOiBVbmRvTWFuYWdlcjtcblxuICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgbGV0IHVuZG9Db3VudCA9IDA7XG4gIGxldCByZWRvQ291bnQgPSAwO1xuXG4gICQ6IGlmICh1bmRvTWFuYWdlcikge1xuICAgIHVuZG9NYW5hZ2VyLm9uKFwic3RhY2staXRlbS1hZGRlZFwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiYWRkIGV2ZW50OlwiLCBldmVudCk7XG4gICAgICB1bmRvQ291bnQgPSB1bmRvTWFuYWdlci51bmRvU3RhY2subGVuZ3RoO1xuICAgICAgcmVkb0NvdW50ID0gdW5kb01hbmFnZXIucmVkb1N0YWNrLmxlbmd0aDtcbiAgICB9KTtcblxuICAgIHVuZG9NYW5hZ2VyLm9uKFwic3RhY2staXRlbS1wb3BwZWRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcInBvcCBldmVudDpcIiwgZXZlbnQpO1xuICAgICAgLy8gVE9ETzogdHJhY2sgY3VycmVudCBzZWxlY3RlZCBsaXN0IGFuZCBVUkwgaGFzaD9cbiAgICB9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgc3R5bGU9XCJzY3JvbGxiYXItZ3V0dGVyOiBzdGFibGU7XCJcbiAgY2xhc3M9XCJmbGV4IGdhcC0yIGZpeGVkIGxlZnQtMS8yIGJvdHRvbS0wIHotNDAgbS0yXCJcbiAgYmluZDpjbGllbnRXaWR0aD17d2lkdGh9XG4gIHN0eWxlOm1hcmdpbi1sZWZ0PXtgLSR7d2lkdGggLyAyfXB4YH1cbj5cbiAgPGRpdiBjbGFzcz1cImluZGljYXRvclwiPlxuICAgIHsjaWYgdW5kb0NvdW50ID4gMH1cbiAgICAgIDxzcGFuIGNsYXNzPVwiaW5kaWNhdG9yLWl0ZW0gYmFkZ2UgYmFkZ2Utc21cIj57dW5kb0NvdW50fTwvc3Bhbj5cbiAgICB7L2lmfVxuXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3M9XCJcbiAgICAgICAgbXktMSBidG4gYnRuLWNpcmNsZSBidG4tbmV1dHJhbCBzaGFkb3ctMnhsXG4gICAgICAgIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1cy12aXNpYmxlOnJpbmcgcmluZy1hY2NlbnQgcmluZy1vZmZzZXQtMSByaW5nLW9mZnNldC1iYXNlLTEwMFxuICAgICAgXCJcbiAgICAgIGFyaWEtbGFiZWw9XCJVbmRvLlwiXG4gICAgICB0aXRsZT1cIlVuZG8gbGFzdCBhY3Rpb24uXCJcbiAgICAgIGRpc2FibGVkPXt1bmRvQ291bnQgPT09IDB9XG4gICAgICBvbjpjbGljaz17KCkgPT4ge1xuICAgICAgICB1bmRvTWFuYWdlci51bmRvKCk7XG4gICAgICAgIHN5bmNEb2N1bWVudFRvU2VydmVyKCRsaXZlVmlldyk7XG4gICAgICB9fVxuICAgID5cbiAgICAgIDxVbmRvMiBjbGFzc05hbWU9XCJ3LTYgaC02XCIgLz5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cImluZGljYXRvclwiPlxuICAgIHsjaWYgcmVkb0NvdW50ID4gMH1cbiAgICAgIDxzcGFuIGNsYXNzPVwiaW5kaWNhdG9yLWl0ZW0gYmFkZ2UgYmFkZ2Utc21cIj57cmVkb0NvdW50fTwvc3Bhbj5cbiAgICB7L2lmfVxuXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3M9XCJcbiAgICAgICAgbXktMSBidG4gYnRuLWNpcmNsZSBidG4tbmV1dHJhbFxuICAgICAgICBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXMtdmlzaWJsZTpyaW5nIHJpbmctYWNjZW50IHJpbmctb2Zmc2V0LTEgcmluZy1vZmZzZXQtYmFzZS0xMDBcbiAgICAgIFwiXG4gICAgICBhcmlhLWxhYmVsPVwiUmVkby5cIlxuICAgICAgdGl0bGU9XCJSZWRvIGxhc3QgYWN0aW9uLlwiXG4gICAgICBkaXNhYmxlZD17cmVkb0NvdW50ID09PSAwfVxuICAgICAgb246Y2xpY2s9eygpID0+IHtcbiAgICAgICAgdW5kb01hbmFnZXIucmVkbygpO1xuICAgICAgICBzeW5jRG9jdW1lbnRUb1NlcnZlcigkbGl2ZVZpZXcpO1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8UmVkbzIgY2xhc3NOYW1lPVwidy02IGgtNlwiIC8+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9kaXY+XG4iLCAiY29uc3QgREVCVUcgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZ2lzdGVyU2VydmljZVdvcmtlcihzZXJ2aWNlV29ya2VyUGF0aDogc3RyaW5nKSB7XG4gIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uID0gYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoc2VydmljZVdvcmtlclBhdGgsIHtcbiAgICAgICAgICB0eXBlOiBcIm1vZHVsZVwiLCAvLyBBbGxvdyBFUyBtb2R1bGUgaW1wb3J0cyBpbiBzdy5cbiAgICAgICAgICB1cGRhdGVWaWFDYWNoZTogXCJub25lXCIsIC8vIEFsd2F5cyB1cGRhdGUgc3cgaW1wb3J0cyBmcm9tIG5ldHdvcmsgdG8gcHJldmVudCBjYWNoaW5nIGlzc3Vlcy5cbiAgICAgICAgfSk7XG4gICAgICAgIERFQlVHICYmIGNvbnNvbGUubG9nKFwiW1NlcnZpY2UgV29ya2VyXSBSZWdpc3RlcmVkLlwiLCByZWdpc3RyYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltTZXJ2aWNlIFdvcmtlcl0gUmVnaXN0cmF0aW9uIEZhaWxlZC5cIiwgZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJbU2VydmljZSBXb3JrZXJdIE5vdCBTdXBwb3J0ZWQuXCIpO1xuICB9XG59XG4iLCAiaW1wb3J0IHRvcGJhciBmcm9tIFwiLi4vLi4vdmVuZG9yL3RvcGJhclwiO1xuaW1wb3J0IHsgTE9BRElOR19TVEFSVF9FVkVOVCwgTE9BRElOR19TVE9QX0VWRU5UIH0gZnJvbSBcIi4vbGliL2V2ZW50c1wiO1xuXG4vKipcbiAqIENvbmZpZ3VyZSB0b3BiYXIgYW5kIGxpc3RlbiBmb3IgbG9hZGluZyBldmVudHMgdG8gc2hvdy9oaWRlIHRvcGJhci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRUb3BCYXIoKSB7XG4gIC8vIENvbmZpZ3VyZSB0b3BiYXIuXG4gIHRvcGJhci5jb25maWcoeyBiYXJDb2xvcnM6IHsgMDogXCIjMDBjN2I1XCIgfSwgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAwLCAwLCAuMylcIiB9KTtcblxuICAvLyBMaXN0ZW4gZm9yIHBhZ2UgbG9hZGluZyBldmVudHMuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKExPQURJTkdfU1RBUlRfRVZFTlQsIChfZSkgPT4gdG9wYmFyLnNob3coMzAwKSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKExPQURJTkdfU1RPUF9FVkVOVCwgKF9lKSA9PiB0b3BiYXIuaGlkZSgpKTtcbn1cbiIsICIvLyBJZiB5b3Ugd2FudCB0byB1c2UgUGhvZW5peCBjaGFubmVscywgcnVuIGBtaXggaGVscCBwaHguZ2VuLmNoYW5uZWxgXG4vLyB0byBnZXQgc3RhcnRlZCBhbmQgdGhlbiB1bmNvbW1lbnQgdGhlIGxpbmUgYmVsb3cuXG4vLyBpbXBvcnQgXCIuL3VzZXJfc29ja2V0LmpzXCJcblxuLy8gWW91IGNhbiBpbmNsdWRlIGRlcGVuZGVuY2llcyBpbiB0d28gd2F5cy5cbi8vXG4vLyBUaGUgc2ltcGxlc3Qgb3B0aW9uIGlzIHRvIHB1dCB0aGVtIGluIGFzc2V0cy92ZW5kb3IgYW5kXG4vLyBpbXBvcnQgdGhlbSB1c2luZyByZWxhdGl2ZSBwYXRoczpcbi8vXG4vLyAgICAgaW1wb3J0IFwiLi4vdmVuZG9yL3NvbWUtcGFja2FnZS5qc1wiXG4vL1xuLy8gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBgbnBtIGluc3RhbGwgc29tZS1wYWNrYWdlIC0tcHJlZml4IGFzc2V0c2AgYW5kIGltcG9ydFxuLy8gdGhlbSB1c2luZyBhIHBhdGggc3RhcnRpbmcgd2l0aCB0aGUgcGFja2FnZSBuYW1lOlxuLy9cbi8vICAgICBpbXBvcnQgXCJzb21lLXBhY2thZ2VcIlxuLy9cblxuLy8gSW5jbHVkZSBwaG9lbml4X2h0bWwgdG8gaGFuZGxlIG1ldGhvZD1QVVQvREVMRVRFIGluIGZvcm1zIGFuZCBidXR0b25zLlxuaW1wb3J0IFwicGhvZW5peF9odG1sXCI7XG5cbi8vIEVzdGFibGlzaCBQaG9lbml4IFNvY2tldCBhbmQgTGl2ZVZpZXcgY29uZmlndXJhdGlvbi5cbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCJwaG9lbml4XCI7XG5pbXBvcnQgeyBMaXZlU29ja2V0IH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCI7XG5cbi8vIExpdmUgU3ZlbHRlIGludGVncmF0aW9uLlxuaW1wb3J0IHsgZ2V0SG9va3MgfSBmcm9tIFwibGl2ZV9zdmVsdGVcIjtcbi8vIEB0cy1leHBlY3QtZXJyb3I7IGxvYWRpbmcgYWxsIFN2ZWx0ZSBjb21wb25lbnRzIGZvciBsaXZlX3N2ZWx0ZS5cbmltcG9ydCAqIGFzIENvbXBvbmVudHMgZnJvbSBcIi4uL3N2ZWx0ZS8qKi8qLnN2ZWx0ZVwiO1xuXG5pbXBvcnQgeyB1c2VSZWdpc3RlclNlcnZpY2VXb3JrZXIgfSBmcm9tIFwiJGxpYi9ob29rcy91c2VSZWdpc3RlclNlcnZpY2VXb3JrZXJcIjtcbmltcG9ydCB7IGluaXRUb3BCYXIgfSBmcm9tIFwiJGxpYi90b3BiYXIvaW5pdFRvcEJhclwiO1xuXG5pbXBvcnQgeyByZWNvbm5lY3RMaXZlVmlld0lmRGlzY29ubmVjdGVkIH0gZnJvbSBcIiRjb21wb25lbnRzL1N0YXRlTWFuYWdlbWVudC5zdmVsdGVcIjtcblxuaW50ZXJmYWNlIExpdmVWaWV3U29ja2V0IGV4dGVuZHMgTGl2ZVNvY2tldCB7XG4gIGlzQ29ubmVjdGVkOiAoKSA9PiBib29sZWFuO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIGxpdmVTb2NrZXQ6IExpdmVWaWV3U29ja2V0O1xuICB9XG59XG5cbnVzZVJlZ2lzdGVyU2VydmljZVdvcmtlcihcIi9zdy5qc1wiKTtcbmluaXRUb3BCYXIoKTtcblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKT8uZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcbmxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHtcbiAgaG9va3M6IGdldEhvb2tzKENvbXBvbmVudHMpLFxuICBwYXJhbXM6IHsgX2NzcmZfdG9rZW46IGNzcmZUb2tlbiB9LFxufSkgYXMgTGl2ZVZpZXdTb2NrZXQ7XG5cbi8vIGNvbm5lY3QgaWYgdGhlcmUgYXJlIGFueSBMaXZlVmlld3Mgb24gdGhlIHBhZ2VcbmxpdmVTb2NrZXQuY29ubmVjdCgpO1xuXG4vLyBleHBvc2UgbGl2ZVNvY2tldCBvbiB3aW5kb3cgZm9yIHdlYiBjb25zb2xlIGRlYnVnIGxvZ3MgYW5kIGxhdGVuY3kgc2ltdWxhdGlvbjpcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlRGVidWcoKVxuLy8gPj4gbGl2ZVNvY2tldC5lbmFibGVMYXRlbmN5U2ltKDEwMDApICAvLyBlbmFibGVkIGZvciBkdXJhdGlvbiBvZiBicm93c2VyIHNlc3Npb25cbi8vID4+IGxpdmVTb2NrZXQuZGlzYWJsZUxhdGVuY3lTaW0oKVxud2luZG93LmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0O1xuXG4vLyBXaGVuIHRoZSB3ZWJzb2NrZXQgY29ubmVjdHMsIGNoZWNrIGlmIHRoZSB1c2VyIHNob3VsZCBiZSByZWRpcmVjdGVkIChpLmUuIGR1ZVxuLy8gdG8gYmVpbmcgbG9nZ2VkIG91dCkuIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIHNlcnZpY2Ugd29ya2VyIHdpbGxcbi8vIGFsd2F5cyBzZXJ2ZSBmcm9tIHRoZSBjYWNoZSBzbyB0aGUgc3RhbmRhcmQgUGhvZW5peCByZWRpcmVjdCB3aWxsIG5vdCBvY2N1ci5cbmxpdmVTb2NrZXQuZ2V0U29ja2V0KCkub25PcGVuKGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcImJ5cGFzc19zZXJ2aWNlX3dvcmtlclwiLCBEYXRlLm5vdygpLnRvU3RyaW5nKCkpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgIGlmIChyZXNwb25zZS5yZWRpcmVjdGVkKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShyZXNwb25zZS51cmwpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgY2hlY2tpbmcgZm9yIHJlZGlyZWN0aW9uIG9uIExpdmVWaWV3IHNvY2tldCBjb25uZWN0aW9uLlwiLCBlcnJvcik7XG4gIH1cbn0pO1xuXG4vLyBDaGVjayBmb3Igd2hlbiB0aGUgcGFnZSBiZWNvbWVzIHZpc2libGUgYW5kIHJlZnJlc2ggdG8gZW5zdXJlIHRoZSBzb2NrZXQgaXNcbi8vIHJlY29ubmVjdGVkLiBUaGlzIGlzIG1haW5seSBmb3IgdGhlIGNhc2Ugd2hlcmUgYSB1c2VyIHN3aXRjaGVzIGF3YXkgZnJvbSB0aGVcbi8vIGFwcCB3aW5kb3cgYW5kIHJldHVybnMgYWZ0ZXIgYW4gZXh0ZW5kZWQgcGVyaW9kIHdoZXJlIHRoZSBzb2NrZXQgbWF5IGhhdmVcbi8vIGJlZW4gZGlzY29ubmVjdGVkLlxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsICgpID0+IHtcbiAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcbiAgICByZWNvbm5lY3RMaXZlVmlld0lmRGlzY29ubmVjdGVkKCk7XG4gIH1cbn0pO1xuXG4vLyBQYXRjaCBjb25zb2xlLmxvZyB0byBkZXRlY3Qgd2hlbiBjaGFubmVsIGNvbm5lY3Rpb24gZmFpbHMgZHVlIHRvIHN0YWxlIENTUkZcbi8vIHRva2VuIGFuZCBoYW5kbGUgdGhlIGZhaWxlZCBjb25uZWN0aW9uIGJ5IHJlbG9hZGluZyB0aGUgcGFnZSBhZnRlciBhIGZyZXNoXG4vLyBDU1JGIHRva2VuIGlzIGZldGNoZWQgYnkgdGhlIHNlcnZpY2Ugd29ya2VyLlxuLy8gVE9ETzogVGhpcyBpcyBraW5kIG9mIGEgaGFja3kgc29sdXRpb24uIFRoZXJlIG1heSBiZSBhIGJldHRlciB3YXkgdG8gZG8gdGhpcy4uLlxuY29uc3Qgb3JpZ2luYWxDb25zb2xlTG9nID0gY29uc29sZS5sb2c7XG5jb25zb2xlLmxvZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIC8vIENhbGwgdGhlIG9yaWdpbmFsIGNvbnNvbGUubG9nIG1ldGhvZCB0byBzdGlsbCBsb2cgdGhlIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUuXG4gIG9yaWdpbmFsQ29uc29sZUxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuXG4gIGlmIChtZXNzYWdlLmluY2x1ZGVzKFwiRmFsbGluZyBiYWNrIHRvIHBhZ2UgcmVxdWVzdFwiKSkge1xuICAgIC8vIE5PVEU6IFRoZSBkZWxheSBpcyB0byBhbGxvdyB0aGUgbmV3IEhUTUwgd2l0aCBhIGZyZXNoIENTUkYgdG9rZW4gdG8gYmVcbiAgICAvLyBjYWNoZWQgYnkgc2VydmljZSB3b3JrZXIgYmVmb3JlIHJlbG9hZGluZy5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKSwgMjAwMCk7XG4gIH1cbn07XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFNQSxPQUFDLFNBQVVBLFNBQVFDLFdBQVU7QUFDM0I7QUFHQSxTQUFDLFdBQVk7QUFDWCxjQUFJLFdBQVc7QUFDZixjQUFJLFVBQVUsQ0FBQyxNQUFNLE9BQU8sVUFBVSxHQUFHO0FBQ3pDLG1CQUFTLElBQUksR0FBRyxJQUFJLFFBQVEsVUFBVSxDQUFDRCxRQUFPLHVCQUF1QixFQUFFLEdBQUc7QUFDeEUsWUFBQUEsUUFBTyx3QkFDTEEsUUFBTyxRQUFRLENBQUMsSUFBSSx1QkFBdUI7QUFDN0MsWUFBQUEsUUFBTyx1QkFDTEEsUUFBTyxRQUFRLENBQUMsSUFBSSxzQkFBc0IsS0FDMUNBLFFBQU8sUUFBUSxDQUFDLElBQUksNkJBQTZCO0FBQUEsVUFDckQ7QUFDQSxjQUFJLENBQUNBLFFBQU87QUFDVixZQUFBQSxRQUFPLHdCQUF3QixTQUFVLFVBQVVFLFVBQVM7QUFDMUQsa0JBQUksV0FBVyxJQUFJLEtBQUssRUFBRSxRQUFRO0FBQ2xDLGtCQUFJLGFBQWEsS0FBSyxJQUFJLEdBQUcsTUFBTSxXQUFXLFNBQVM7QUFDdkQsa0JBQUlDLE1BQUtI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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNlUyxJQUFPLENBQUE7TUFBQSxFQUFBOztRQUFZLElBQVEsQ0FBQTtRQUFBO0lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUEzQkMsS0FBTyxDQUFBO1VBQUE7Ozs7WUFBWUEsS0FBUSxDQUFBO1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFkakQsV0FBUSxDQUFBLENBQUssUUFBTSxFQUFJLEtBQUssaUJBQWdCLENBQUEsR0FBQSxDQUFNLFFBQU0sRUFBSSxLQUFLLFdBQVUsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNjMUQsSUFBTyxDQUFBO01BQUEsRUFBQTs7UUFBWSxJQUFRLENBQUE7UUFBQTtJQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFBM0JDLEtBQU8sQ0FBQTtVQUFBOzs7O1lBQVlBLEtBQVEsQ0FBQTtZQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VBZDVDLFdBQVEsQ0FBQSxDQUFLLFFBQU0sRUFBSSxLQUFLLGtCQUFpQixDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQ2NyQixJQUFPLENBQUE7OztRQUFZLElBQVEsQ0FBQTtRQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBQTNCQyxLQUFPLENBQUE7VUFBQTs7OztZQUFZQSxLQUFRLENBQUE7WUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQWRuRCxXQUFRLENBQUEsQ0FBSyxRQUFNLEVBQUksS0FBSyxlQUFjLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01DY2pCLElBQU8sQ0FBQTs7O1FBQVksSUFBUSxDQUFBO1FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFBM0JDLEtBQU8sQ0FBQTtVQUFBOzs7O1lBQVlBLEtBQVEsQ0FBQTtZQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VBZHBELFdBQVEsQ0FBQSxDQUFLLFFBQU0sRUFBSSxLQUFLLGdCQUFlLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01DY3JCLElBQU8sQ0FBQTtNQUFBLEVBQUE7O1FBQVksSUFBUSxDQUFBO1FBQUE7SUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBQTNCQyxLQUFPLENBQUE7VUFBQTs7OztZQUFZQSxLQUFRLENBQUE7WUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQWRqRCxXQUFRLENBQUEsQ0FBSyxRQUFNLEVBQUksS0FBSyxpQkFBZ0IsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNjcEIsSUFBTyxDQUFBOzs7UUFBWSxJQUFRLENBQUE7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUEzQkMsS0FBTyxDQUFBO1VBQUE7Ozs7WUFBWUEsS0FBUSxDQUFBO1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFkbkQsV0FBUTtPQUFLLFVBQVEsRUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQUssS0FBSSxDQUFBOztRQUFNOztVQUFVLE1BQU07VUFBTSxNQUFNO1VBQU0sTUFBTTtVQUFLLE1BQU07Ozs7UUFBVTs7VUFBVSxNQUFNO1VBQU0sTUFBTTtVQUFTLE1BQU07VUFBTSxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNjeEosSUFBTyxDQUFBOzs7UUFBWSxJQUFRLENBQUE7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUEzQkMsS0FBTyxDQUFBO1VBQUE7Ozs7WUFBWUEsS0FBUSxDQUFBO1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFkdkQsV0FBUTs7UUFBSzs7VUFBVSxLQUFLOzs7T0FBMEMsUUFBTSxFQUFJLEtBQUssaUJBQWdCLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNjMUUsSUFBTyxDQUFBOzs7UUFBWSxJQUFRLENBQUE7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUEzQkMsS0FBTyxDQUFBO1VBQUE7Ozs7WUFBWUEsS0FBUSxDQUFBO1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFkdEQsV0FBUTtPQUFLLFVBQVEsRUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQUssS0FBSSxDQUFBO09BQU0sUUFBTSxFQUFJLEtBQUssYUFBWSxDQUFBO09BQU0sUUFBTSxFQUFJLEtBQUssYUFBWSxDQUFBO09BQU0sUUFBTSxFQUFJLEtBQUssWUFBVyxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01DY3hJLElBQU8sQ0FBQTtNQUFBLEVBQUE7O1FBQVksSUFBUSxDQUFBO1FBQUE7SUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBQTNCQyxLQUFPLENBQUE7VUFBQTs7OztZQUFZQSxLQUFRLENBQUE7WUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQWQvQyxXQUFRO09BQUssVUFBUSxFQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FBSyxLQUFJLENBQUE7T0FBTSxRQUFNLEVBQUksS0FBSyxZQUFXLENBQUE7T0FBTSxRQUFNLEVBQUksS0FBSyxXQUFVLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUNjOUYsSUFBTyxDQUFBOzs7UUFBWSxJQUFRLENBQUE7UUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUEzQkMsS0FBTyxDQUFBO1VBQUE7Ozs7WUFBWUEsS0FBUSxDQUFBO1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFkdEQsV0FBUTtPQUFLLFVBQVEsRUFBSSxNQUFNLE1BQU0sTUFBTSxLQUFLLEtBQUssSUFBRyxDQUFBO09BQU0sVUFBUSxFQUFJLE1BQU0sTUFBTSxNQUFNLEtBQUssS0FBSyxJQUFHLENBQUE7T0FBTSxVQUFRLEVBQUksTUFBTSxLQUFLLE1B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YSxJQUFJLHlCQUF5QixLQUFLLElBQUksRUFBRSxTQUFTLENBQUM7QUFFbkUsWUFBTSxXQUFXLE1BQU0sTUFBTSxHQUFHO0FBQ2hDLFVBQUksU0FBUyxZQUFZO0FBQ3ZCLGVBQU8sU0FBUyxRQUFRLFNBQVMsR0FBRztBQUFBLE1BQ3RDO0FBQUEsSUFDRixTQUFTLE9BQVA7QUFDQSxjQUFRLE1BQU0sdUVBQXVFLEtBQUs7QUFBQSxJQUM1RjtBQUFBLEVBQ0YsQ0FBQztBQU1ELFNBQU8saUJBQWlCLG9CQUFvQixNQUFNO0FBQ2hELFFBQUksU0FBUyxvQkFBb0IsV0FBVztBQUMxQyxzQ0FBZ0M7QUFBQSxJQUNsQztBQUFBLEVBQ0YsQ0FBQztBQU1ELE1BQU0scUJBQXFCLFFBQVE7QUFDbkMsVUFBUSxNQUFNLFNBQVUsU0FBUztBQUUvQix1QkFBbUIsTUFBTSxTQUFTLFNBQVM7QUFFM0MsUUFBSSxRQUFRLFNBQVMsOEJBQThCLEdBQUc7QUFHcEQsaUJBQVcsTUFBTSxPQUFPLFNBQVMsT0FBTyxHQUFHLEdBQUk7QUFBQSxJQUNqRDtBQUFBLEVBQ0Y7IiwKICAibmFtZXMiOiBbIndpbmRvdyIsICJkb2N1bWVudCIsICJlbGVtZW50IiwgImlkIiwgInRvcGJhciIsICJsb29wIiwgIkN1c3RvbUV2ZW50IiwgInBhcmFtcyIsICJlbGVtZW50IiwgImNsb3N1cmUiLCAiZ2xvYmFsIiwgInBhcmFtcyIsICJiaW5kIiwgImdsb2JhbCIsICJwYXJhbXMiLCAibGl2ZVNvY2tldCIsICJjbG9zdXJlIiwgImxvY2FsU3RvcmFnZSIsICJoYXNoIiwgImlkIiwgImF0dHIiLCAiZmlsZSIsICJmaWxlMiIsICJhY3RpdmUiLCAiaW5zdGFuY2UiLCAiYXJncyIsICJub3ciLCAiZnJvbSIsICJjaGlsZHJlbiIsICJ1cGRhdGUiLCAiaW5zZXJ0IiwgIl9hIiwgInBhcmFtcyIsICJjb3VudCIsICJfYSIsICJub29wIiwgImVsZW1lbnQiLCAibm9vcCIsICJlbGVtZW50IiwgImZpbGUiLCAibm9vcCIsICJsZW5ndGgiLCAia2V5cyIsICJub29wIiwgIm5vb3AiLCAibm93IiwgImVsZW1lbnQiLCAiX2EiLCAiY2hpbGRyZW4iLCAibGFzdCIsICJpbnNlcnQiLCAiZGV0YWNoIiwgImVsZW1lbnQiLCAiY3Jvc3NvcmlnaW4iLCAiZGV0YWNoIiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJoYXNoIiwgImRvYyIsICJuZXh0IiwgImRldGFjaCIsICJmcm9tIiwgInBhcmFtcyIsICJub29wIiwgInRpY2siLCAibm93IiwgImRldGFjaCIsICJwYXJhbXMiLCAidGljayIsICJub29wIiwgIm5vdyIsICJwYXJhbXMiLCAiaW5pdCIsICJ0aWNrIiwgIm5vb3AiLCAibm93IiwgImNyZWF0ZV9lYWNoX2Jsb2NrIiwgIm5leHQiLCAiaW5zZXJ0IiwgImtleXMiLCAidXBkYXRlIiwgImluc3RhbmNlIiwgImNyZWF0ZV9mcmFnbWVudCIsICJhcHBlbmRfc3R5bGVzIiwgIm5vb3AiLCAiZGV0YWNoIiwgImNyZWF0ZV9zbG90IiwgImNyZWF0ZSIsICJpbnNlcnQiLCAiYXR0ciIsICJfYSIsICJub29wIiwgImRldGFjaCIsICJ0ZXh0IiwgImtleXMiLCAiY3R4IiwgIl9hIiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3R4IiwgImVsZW1lbnQiLCAibm9vcCIsICJ1cGRhdGUiLCAic3Vic2NyaWJlIiwgInJ1biIsICJjdHgiLCAiZWxlbWVudCIsICJzY2FsZSIsICJmbGlwIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiaWQiLCAic2NhbGUiLCAiZmxpcCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJtYXAiLCAiY3JlYXRlIiwgImNyZWF0ZSIsICJhcmdzIiwgImlzTmFOIiwgImlzTmFOIiwgInBhcnNlSW50IiwgInRvVWludDhBcnJheSIsICJhcHBlbmQiLCAidG9VaW50OEFycmF5IiwgImtleXMiLCAidG9VaW50OEFycmF5IiwgInRvVWludDhBcnJheSIsICJjcmVhdGUiLCAiY3JlYXRlIiwgImNyZWF0ZSIsICJhc3NpZ24iLCAibGVuZ3RoIiwgImlzRW1wdHkiLCAibGVuZ3RoIiwgImFyZ3MiLCAiY3JlYXRlIiwgImRvYyIsICJFTEVNRU5UX05PREUiLCAiZG9jIiwgIlRFWFRfTk9ERSIsICJDT01NRU5UX05PREUiLCAiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsICJjcmVhdGUiLCAiY3JlYXRlIiwgImFyZ3MiLCAiY3JlYXRlIiwgImFyZ3MiLCAic3R5bGUiLCAiY3JlYXRlIiwgIm5leHQiLCAiZGVsIiwgImlkIiwgImxlbmd0aCIsICJuZXh0IiwgImkiLCAiY3JlYXRlIiwgImRvYyIsICJ0b1VpbnQ4QXJyYXkiLCAiYW55IiwgInVwZGF0ZSIsICJjbGllbnRpZCIsICJzbmFwc2hvdCIsICJzdHJ1Y3QiLCAiaGFzQ29udGVudCIsICJub3ciLCAiZnJvbSIsICJrZXlzIiwgIm1hcCIsICJjb3VudCIsICJ0ZXh0IiwgImF0dHIiLCAiaW5zZXJ0IiwgImlzRW1wdHkiLCAiYXNzaWduIiwgImVsZW1lbnQiLCAiaXRlbSIsICJjcmVhdGUiLCAidHJhbnNhY3QiLCAicmFuZ2UiLCAicmFuZ2UiLCAicmFuZ2UiLCAiY3JlYXRlIiwgInRyYW5zYWN0IiwgImRvYyIsICJjcmVhdGUiLCAidXBkYXRlIiwgInRyYW5zYWN0IiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiZWxlbWVudCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImtleXMiLCAib2JqIiwgImRyYWdnZWRFbCIsICJwcmludERlYnVnIiwgImNoaWxkcmVuIiwgImRyYWdnZWRFbCIsICJtdWx0aVNjcm9sbGVyIiwgInRpY2siLCAiZWxlbWVudCIsICJkcmFnZ2VkRWwiLCAiZHoiLCAiZHJhZ2dlZEVsRGF0YSIsICJ1cGRhdGUiLCAiaWQiLCAiY2hpbGRyZW4iLCAiX2xvb3AiLCAiaSIsICJmbGlwRHVyYXRpb25NcyIsICJnZXQiLCAic3Vic2NyaWJlIiwgImN0eCIsICJsaXN0IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiZnJvbSIsICJwYXJhbXMiLCAiZWxlbWVudCIsICJjdHgiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImNvbmZpcm1EZWxldGlvbk1vZGFsSWQiLCAibW92ZVRvZG9NZW51SWQiLCAiY3R4IiwgImFyZ3MiLCAiY3R4IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjb3VudCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImltcG9ydF90b3BiYXIiLCAidG9wYmFyIl0KfQo=
